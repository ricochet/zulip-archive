[
    {
        "content": "<p>Hi, everyone.</p>\n<h2>summary</h2>\n<p>after compare the performance, i found jit-generated simple expression <code>(3.0 + 4.0) / 3.0 &lt; 4.0</code> 10x slow than hardcode. so my question is:</p>\n<ol>\n<li>Is this as expected?</li>\n<li>If not，how i can improved the performance?</li>\n</ol>\n<h2>the bench</h2>\n<p>the  <code>create_jit_op</code>function generate a function that are equivalent to <code>arrow_native_calc</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">arrow_native_calc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">ArrowNativeTypeOp</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">add_wrapping</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">div_wrapping</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">).</span><span class=\"n\">lt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hardcode_calc</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add_benchmark</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Criterion</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_jit_op</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"arrow_native_calc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">criterion</span>::<span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">arrow_native_calc</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"hardcode_calc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">criterion</span>::<span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">hardcode_calc</span><span class=\"p\">()))</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"jit_calc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">criterion</span>::<span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">criterion_group</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">benches</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_benchmark</span><span class=\"p\">);</span>\n<span class=\"n\">criterion_main</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">benches</span><span class=\"p\">);</span>\n</code></pre></div>\n<h2>bench result</h2>\n<p>the result show <code>jit_calc</code> 10x slower than <code>arrow_native_calc</code> and <code>hardcode_calc</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">arrow_native_calc</span><span class=\"w\">       </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">543.67</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"w\"> </span><span class=\"mf\">546.12</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"w\"> </span><span class=\"mf\">549.82</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.9606</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">0.4079</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">2.0981</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.68</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">5.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n\n<span class=\"n\">hardcode_calc</span><span class=\"w\">           </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">541.32</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"w\"> </span><span class=\"mf\">542.14</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"w\"> </span><span class=\"mf\">542.98</span><span class=\"w\"> </span><span class=\"n\">ps</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">1.1323</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.7533</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.4321</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Change</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">noise</span><span class=\"w\"> </span><span class=\"n\">threshold</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n\n<span class=\"n\">jit_calc</span><span class=\"w\">                </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">8.4618</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">8.5140</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">8.5938</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">98.873</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">98.850</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">98.831</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">14.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">4.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">10.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n</code></pre></div>\n<h2>the detail of <code>create_jit_op</code></h2>\n<ol>\n<li><strong>how function generated</strong></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">create_jit_op</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">CodegenContext</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// call_conv is CallConv::Fast,</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">create_func_gen_ctx</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"op\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">)],</span>\n<span class=\"w\">        </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">)],</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">entry_block</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">create_block</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">switch_to_block</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// call f64 add wrapping on tuple, and call_conv: CallConv::Fast,</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_block</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">call_f64_add_wrapping</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// call f64 div wrapping on res and f64 const and call_conv: CallConv::Fast,</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">f64const</span><span class=\"p\">(</span><span class=\"mf\">3.0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">call_f64_div_wrapping</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// call f64 lt on &amp;res and &amp;f64 const and call_conv: CallConv::Fast,</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">create_sized_stack_slot</span><span class=\"p\">(</span><span class=\"n\">StackSlotData</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">StackSlotKind</span>::<span class=\"n\">ExplicitSlot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">));</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_addr</span><span class=\"p\">(</span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">f64const</span><span class=\"p\">(</span><span class=\"mf\">4.0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">stack_addr</span><span class=\"p\">(</span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">slot</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">func_ctx</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(</span><span class=\"n\">MemFlags</span>::<span class=\"n\">new</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">call_f64_lt</span><span class=\"p\">(</span><span class=\"n\">res_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs_ref</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func_ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mem</span>::<span class=\"n\">transmute</span>::<span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">code</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li><strong>call imported function.</strong></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">call_f64_add_wrapping</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span>: <span class=\"nc\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">NativeOpCall</span>::<span class=\"n\">Float64AddWrapping</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">call_binary</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">call_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">op</span>: <span class=\"nc\">NativeOpCall</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">lhs</span>: <span class=\"nc\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span>: <span class=\"nc\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptype</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// FIXME this don't generate new func id during every call.</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">module</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"n\">op</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">lhs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"p\">]);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">inst_results</span><span class=\"p\">(</span><span class=\"n\">call</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">signature</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pointer_type</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Signature</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">NativeOpCall</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">Float64AddWrapping</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Float64DivWrapping</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">params</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">)],</span>\n<span class=\"w\">                </span><span class=\"n\">returns</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">F64</span><span class=\"p\">)],</span>\n<span class=\"w\">                </span><span class=\"n\">call_conv</span>: <span class=\"nc\">CallConv</span>::<span class=\"n\">Fast</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"n\">Float64Lt</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">params</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">pointer_type</span><span class=\"p\">)],</span>\n<span class=\"w\">                </span><span class=\"n\">returns</span>: <span class=\"nc\">vec</span><span class=\"o\">!</span><span class=\"p\">[</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">)],</span>\n<span class=\"w\">                </span><span class=\"n\">call_conv</span>: <span class=\"nc\">CallConv</span>::<span class=\"n\">Fast</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">addr</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">NativeOpCall</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">Float64AddWrapping</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span>::<span class=\"n\">add_wrapping</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">Float64DivWrapping</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span>::<span class=\"n\">div_wrapping</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">Float64Lt</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"kt\">f64</span>::<span class=\"n\">lt</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<ol start=\"3\">\n<li><strong>flag settings</strong></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">build_flags</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">settings</span>::<span class=\"n\">Flags</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">flag_builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">builder</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">flag_builder</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s\">\"use_colocated_libcalls\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"false\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">flag_builder</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s\">\"is_pic\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"false\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">flag_builder</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s\">\"enable_llvm_abi_extensions\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"true\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">flag_builder</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s\">\"opt_level\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"speed\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">flags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">settings</span>::<span class=\"n\">Flags</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">flag_builder</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">use_colocated_libcalls</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">is_pic</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"n\">flags</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 422077002,
        "sender_full_name": "Jeremy Mei(梅杰)",
        "timestamp": 1708242678
    },
    {
        "content": "<p>LLVM will optimize hardcode_calc and the arrow_native_calc call to constant values. You need to black_box the constants in the calculation to prevent this. I'm not sure if Cranelift optimizes float operations with known operands to a constant.</p>",
        "id": 422086808,
        "sender_full_name": "bjorn3",
        "timestamp": 1708252059
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> still 5x slow.</p>\n<h1>bench result.</h1>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">benches</span><span class=\"o\">/</span><span class=\"n\">scalar_calc</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">scalar_calc</span><span class=\"o\">-</span><span class=\"n\">a5b82b9d208b7531</span><span class=\"p\">)</span>\n<span class=\"n\">arrow_native_calc</span><span class=\"w\">       </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">1.4768</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">1.4820</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">1.4890</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.6881</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.2297</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">0.1460</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.29</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">9.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">5.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n\n<span class=\"n\">hardcode_calc</span><span class=\"w\">           </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">1.8864</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">1.8950</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">1.9124</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.6743</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.0642</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">0.6151</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.86</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">change</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">performance</span><span class=\"w\"> </span><span class=\"n\">detected</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">14.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"w\">  </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">6.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">7.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n\n<span class=\"n\">jit_calc</span><span class=\"w\">                </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">7.4061</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">7.4375</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">7.4785</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">99.119</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">99.081</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">99.043</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">12.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">10.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n</code></pre></div>\n<h1>the bench code.</h1>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">arrow_native_calc</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">ArrowNativeTypeOp</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"nc\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"nc\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">add_wrapping</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">).</span><span class=\"n\">div_wrapping</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">).</span><span class=\"n\">lt</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">d</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">hardcode_calc</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">d</span>: <span class=\"kt\">f64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"n\">d</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">add_benchmark</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Criterion</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">create_jit_op</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"arrow_native_calc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">arrow_native_calc</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"hardcode_calc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">criterion</span>::<span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"n\">hardcode_calc</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">                </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">bench_function</span><span class=\"p\">(</span><span class=\"s\">\"jit_calc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"p\">(</span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">3.0_</span><span class=\"k\">f64</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">black_box</span><span class=\"p\">(</span><span class=\"mf\">4.0_</span><span class=\"k\">f64</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">criterion_group</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">benches</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">add_benchmark</span><span class=\"p\">);</span>\n<span class=\"n\">criterion_main</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">benches</span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 422088620,
        "sender_full_name": "Jeremy Mei(梅杰)",
        "timestamp": 1708253848
    },
    {
        "content": "<p>Could you try replacing <code>hardcode_calc(...)</code> with <code>criterion::black_box(hardcode_calc as fn(f64, f64, f64, f64) -&gt; f64)(...)</code> to avoid inlining the <code>hardcode_calc</code> function itself?</p>",
        "id": 422093819,
        "sender_full_name": "bjorn3",
        "timestamp": 1708259036
    },
    {
        "content": "<p>Also it looks like you are calling an external function for every float add. The rust version would inline this too.</p>",
        "id": 422093886,
        "sender_full_name": "bjorn3",
        "timestamp": 1708259069
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/jit-generated.20simple.20expression.2010x.20slow.20than.20hardcode/near/422093819\">said</a>:</p>\n<blockquote>\n<p>Could you try replacing <code>hardcode_calc(...)</code> with <code>criterion::black_box(hardcode_calc as fn(f64, f64, f64, f64) -&gt; f64)(...)</code> to avoid inlining the <code>hardcode_calc</code> function itself?</p>\n</blockquote>\n<p>yes, all of those  add_wrapping, div_wrapping, lt function is inline function. but seem jit-generated function do not inline.</p>\n<ol>\n<li><strong>the new ben result after this changed</strong>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"n\">benches</span><span class=\"o\">/</span><span class=\"n\">scalar_calc</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">scalar_calc</span><span class=\"o\">-</span><span class=\"n\">a5b82b9d208b7531</span><span class=\"p\">)</span>\n<span class=\"n\">arrow_native_calc</span><span class=\"w\">       </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">1.4803</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">1.4847</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">1.4919</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">0.2458</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">0.9349</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">2.0967</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.03</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Change</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">noise</span><span class=\"w\"> </span><span class=\"n\">threshold</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">6.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n\n<span class=\"n\">hardcode_calc</span><span class=\"w\">           </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">2.0588</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">2.0776</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">2.1101</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">38.601</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">39.948</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">41.544</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">regressed</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">17.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n<span class=\"w\">  </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">3.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">4.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">mild</span>\n<span class=\"w\">  </span><span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">9.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n\n<span class=\"n\">jit_calc</span><span class=\"w\">                </span><span class=\"n\">time</span>:   <span class=\"p\">[</span><span class=\"mf\">5.4364</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">5.4583</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"w\"> </span><span class=\"mf\">5.4957</span><span class=\"w\"> </span><span class=\"n\">ns</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span>: <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">99.014</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">99.003</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">98.994</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">improved</span><span class=\"p\">.</span>\n<span class=\"n\">Found</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">outliers</span><span class=\"w\"> </span><span class=\"n\">among</span><span class=\"w\"> </span><span class=\"mi\">100</span><span class=\"w\"> </span><span class=\"n\">measurements</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">2.00</span><span class=\"o\">%</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">high</span><span class=\"w\"> </span><span class=\"n\">severe</span>\n</code></pre></div>\n<ol start=\"2\">\n<li><strong>disasm of <code>create_jit_op</code> function from test debug.</strong></li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">\"</span><span class=\"w\">  </span><span class=\"nf\">pushq</span><span class=\"w\">   </span><span class=\"nv\">%rbp</span>\n<span class=\"w\">  </span><span class=\"nf\">unwind</span><span class=\"w\"> </span><span class=\"no\">PushFrameRegs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"no\">offset_upward_to_caller_sp</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rbp</span>\n<span class=\"w\">  </span><span class=\"nf\">unwind</span><span class=\"w\"> </span><span class=\"no\">DefineNewFrame</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"no\">offset_upward_to_caller_sp</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">offset_downward_to_clobbers</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"nf\">subq</span><span class=\"w\">    </span><span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">$16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rsp</span>\n<span class=\"w\">  </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%r13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"nf\">unwind</span><span class=\"w\"> </span><span class=\"no\">SaveReg</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"no\">clobber_offset</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">reg</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"no\">p13i</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"nl\">block0:</span>\n<span class=\"w\">  </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%r13</span>\n<span class=\"w\">  </span><span class=\"nf\">load_ext_name</span><span class=\"w\"> </span><span class=\"no\">userextname0</span><span class=\"err\">+</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rax</span>\n<span class=\"w\">  </span><span class=\"nf\">call</span><span class=\"w\">    </span><span class=\"p\">*</span><span class=\"nv\">%rax</span>\n<span class=\"w\">  </span><span class=\"nf\">movabsq</span><span class=\"w\"> </span><span class=\"no\">$4613937818241073152</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">  </span><span class=\"nf\">vmovq</span><span class=\"w\">   </span><span class=\"nv\">%rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%xmm1</span>\n<span class=\"w\">  </span><span class=\"nf\">load_ext_name</span><span class=\"w\"> </span><span class=\"no\">userextname1</span><span class=\"err\">+</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rax</span>\n<span class=\"w\">  </span><span class=\"nf\">call</span><span class=\"w\">    </span><span class=\"p\">*</span><span class=\"nv\">%rax</span>\n<span class=\"w\">  </span><span class=\"nf\">load_ext_name</span><span class=\"w\"> </span><span class=\"no\">userextname2</span><span class=\"err\">+</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rax</span>\n<span class=\"w\">  </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%r13</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rdi</span>\n<span class=\"w\">  </span><span class=\"nf\">call</span><span class=\"w\">    </span><span class=\"p\">*</span><span class=\"nv\">%rax</span>\n<span class=\"w\">  </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nv\">%r13</span>\n<span class=\"w\">  </span><span class=\"nf\">addq</span><span class=\"w\">    </span><span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"no\">$16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rsp</span>\n<span class=\"w\">  </span><span class=\"nf\">movq</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nv\">%rsp</span>\n<span class=\"w\">  </span><span class=\"nf\">popq</span><span class=\"w\">    </span><span class=\"nv\">%rbp</span>\n<span class=\"w\">  </span><span class=\"nf\">ret</span>\n<span class=\"err\">\"</span>\n</code></pre></div>",
        "id": 422095893,
        "sender_full_name": "Jeremy Mei(梅杰)",
        "timestamp": 1708261041
    },
    {
        "content": "<blockquote>\n<p>but seem jit-generated function do not inline.</p>\n</blockquote>\n<p>Correct. There is no way to inline between LLVM and Cranelift generated functions, just like there is no way to inline between LLVM and GCC generated functions.</p>",
        "id": 422096096,
        "sender_full_name": "bjorn3",
        "timestamp": 1708261215
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691571\">Jeremy Mei(梅杰)</span> has marked this topic as resolved.</p>",
        "id": 422096245,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708261341
    }
]