[
    {
        "content": "<p>Hello! Is there any plans for callconv that allows passing variable number of arguments and also receiving argument count on callee side? This is a must-have when making a Scheme implementation. At the moment I am having runstack which is stored in per-thread storage and I push/pop arguments there and store TLS in pinned reg but it seems like not the best solution</p>",
        "id": 475742485,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1728448654
    },
    {
        "content": "<p>UPD: I've tested doing <code>return_call_indirect</code> with 32 arguments to a function which accepts 24 arguments and it seems like it works and runs properly? The computation result does not change so stack is not broken and Rust code runs fine after function returns. How <em>unsafe</em> is this way of doing calls?</p>",
        "id": 475749388,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1728451950
    },
    {
        "content": "<p>We don’t support variadic ABIs directly (PRs welcome) but in various places where we need a dynamic number of args eg in wasmtime at hostcall boundaries we emulate it by building an arg array in memory. I wouldn’t recommend calling a function with a statically incorrect signature — that’s undefined behavior even if it happens to work by luck in some cases</p>",
        "id": 475768009,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728457237
    }
]