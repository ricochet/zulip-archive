[
    {
        "content": "<p>Do we have any policy on circular egraph rewrite rules (ie rule 1 matches on the RHS of rule 2, and rule 2 matches on the RHS of rule 1)?</p>",
        "id": 350639726,
        "sender_full_name": "kmeakin",
        "timestamp": 1681777365
    },
    {
        "content": "<p>In particular, I want a rule like<br>\n<code>ineg(select(cond, x, y)) =&gt; select(cond, ineg(x), ineg(y))</code><br>\nand also <code>select(cond, ineg(x), ineg(y)) =&gt; ineg(select(cond, x, y))</code></p>",
        "id": 350640032,
        "sender_full_name": "kmeakin",
        "timestamp": 1681777508
    },
    {
        "content": "<p>The good news is that shouldn't lead to much extra computation. If one rule fires then the other one will too, but the second one will only build instructions which are already in the GVN map, so they won't be passed through the ISLE rules a third time.</p>",
        "id": 350643259,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681778815
    },
    {
        "content": "<p>We're still figuring out what makes \"good\" rules in our particular version of the egraph framework, and I don't think we've tried any pairs of rules of that form yet. So maybe the answer is we should try it and find out whether it has a significant effect. But I'm curious whether <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> already has informed guesses about how that experiment will go.</p>",
        "id": 350643607,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681778953
    },
    {
        "content": "<p>The only thing that we need to avoid is a \"generative\" situation where, e.g., we rewrite x =&gt; x + 0. Without limits, that would recurse infinitely. We have a backstop to that sort of issue with our rewrite-depth limit (currently 5), just in case</p>",
        "id": 350644359,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681779231
    },
    {
        "content": "<p>One other issue that arises in cases like this is cost vs. payoff. As a very handwavy and not-formal-at-all sort of guideline, I think we probably want to write rules that have clear directionality (in an, err, thermodynamic sense of sorts -- toward simpler programs). Or said another way, a rule might be good if the thing it rewrites to (or another rewrite that it unlocks) is more likely to be chosen during extraction than the original. On the other hand, a rule like a generic commutativity rule (e.g., for every <code>iadd(a, b)</code>, rewrite to <code>iadd(b, a)</code> too) will (again, handwavily) lead to better cases 50% of the time at most, and just adds an extra node (and the matching cost on it) otherwise</p>",
        "id": 350644796,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681779392
    },
    {
        "content": "<p>That does preclude some of the emergent magic that can happen in full equality saturation of course, so maybe there's another mode or set of rules that we do enable when we want \"perfect optimization\"</p>",
        "id": 350644876,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681779426
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/circular.20egraph.20rules.3F/near/350644796\">said</a>:</p>\n<blockquote>\n<p>One other issue that arises in cases like this is cost vs. payoff. As a very handwavy and not-formal-at-all sort of guideline, I think we probably want to write rules that have clear directionality (in an, err, thermodynamic sense of sorts -- toward simpler programs). Or said another way, a rule might be good if the thing it rewrites to (or another rewrite that it unlocks) is more likely to be chosen during extraction than the original. On the other hand, a rule like a generic commutativity rule (e.g., for every <code>iadd(a, b)</code>, rewrite to <code>iadd(b, a)</code> too) will (again, handwavily) lead to better cases 50% of the time at most, and just adds an extra node (and the matching cost on it) otherwise</p>\n</blockquote>\n<p>What about guarding such rewrite rules to only apply if the rewrite triggers further rewrites?<br>\neg</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unop</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unop</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unop</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">cond</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unop</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unop</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">op</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n</code></pre></div>",
        "id": 350645231,
        "sender_full_name": "kmeakin",
        "timestamp": 1681779582
    },
    {
        "content": "<p>ah, definitely not, we don't want to invoke <code>simplify</code> recursively inside of <code>simplify</code> -- that is a recipe for unexpected runaway rewrites</p>",
        "id": 350646272,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681779987
    },
    {
        "content": "<p>and such a question would require backtracking (if a new node doesn't simplify to anything interesting then... delete it?); and we've already spent the time invoking rewrite rules on it anyway</p>",
        "id": 350646380,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681780038
    },
    {
        "content": "<p>fwiw, I haven't studied the latest PRs in detail, but we do have precedent for rules that aren't obviously better by themselves if they \"herd terms in the right direction\" -- e.g., we have DeMorgan that pushes bnot downward, past or/and, to try to combine with other things</p>",
        "id": 350646516,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681780093
    },
    {
        "content": "<p>as long as we're consistent in that direction, it seems reasonable</p>",
        "id": 350646551,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681780107
    },
    {
        "content": "<p>I don't think either direction is obviously better:<br>\n<code>ineg(select(cond, x, y))</code> is probably faster in the general case,<br>\nbut <code>select(cond, ineg(x), ineg(y))</code> could reveal further rewrites (eg if x or y are constants)</p>",
        "id": 350647742,
        "sender_full_name": "kmeakin",
        "timestamp": 1681780651
    },
    {
        "content": "<p>one way to resolve the question objectively is just to test! trying to see if the rule improves anything in the Sightglass suite would be interesting</p>",
        "id": 350648176,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681780839
    },
    {
        "content": "<p>I'll try that in the morning</p>",
        "id": 350654504,
        "sender_full_name": "kmeakin",
        "timestamp": 1681783775
    },
    {
        "content": "<p>Btw why don't we support generative rewrites? IIRC EGG supports generative rewrites</p>",
        "id": 350654629,
        "sender_full_name": "kmeakin",
        "timestamp": 1681783829
    },
    {
        "content": "<p>Well, it's not that we don't support it; nothing in the infrastructure will prevent you from writing such a rule, and it will even execute and produce more nodes. But the reasoning is exactly what I wrote above: it leads to blowup.</p>",
        "id": 350701586,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681805291
    },
    {
        "content": "<p>Imagine the simple rule <code>x =&gt; x + 0</code>. It can be iterated infinitely many times; the only reason the optimization would terminate with such a rule is our backstop limit on rewrite depth</p>",
        "id": 350701711,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681805329
    },
    {
        "content": "<p>That's why we (by convention) don't write such rules</p>",
        "id": 350701766,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681805346
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/circular.20egraph.20rules.3F/near/350701711\">said</a>:</p>\n<blockquote>\n<p>Imagine the simple rule <code>x =&gt; x + 0</code>. It can be iterated infinitely many times; the only reason the optimization would terminate with such a rule is our backstop limit on rewrite depth</p>\n</blockquote>\n<p>I think EGG handles that by allowing e-classes to have loops</p>",
        "id": 351169750,
        "sender_full_name": "kmeakin",
        "timestamp": 1681947062
    },
    {
        "content": "<p>You're right: in egg, <code>x =&gt; x + 0</code> will match every e-node, but for a given <code>x</code> it will only create one <code>x + 0</code> e-node. Once that's unioned into the same e-class as <code>x</code>, when the rule fires again to create <code>(x + 0) + 0</code>, it'll notice that the left-hand side is equivalent to <code>x</code> and then that <code>x + 0</code> is already in the GVN map, and it won't create another e-node. That still allows a rule like <code>(x + y) + z</code> to match <code>x</code> because the matcher can follow cycles in the e-graph. It also makes extraction difficult, which is a big part of why we disallow cycles in Cranelift's e-graph implementation.</p>",
        "id": 351171458,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681948464
    },
    {
        "content": "<p>I see</p>",
        "id": 351173701,
        "sender_full_name": "kmeakin",
        "timestamp": 1681950359
    }
]