[
    {
        "content": "<p>Hi all,</p>\n<p>I've been toying with regalloc2 for some local dev but I've ran into a bit of a snag. I have the following instruction pseudocode that I'd like to register allocate using regalloc2 (I'm aware that it's not SSA, but I run into the same exact problem if I model this using block parameters instead):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">exit</span><span class=\"w\"> </span><span class=\"n\">r1</span>\n</code></pre></div>\n<p>Now, the odditiy of the architecture that I'd like to compile to is that both <code>jz</code> and <code>jmp</code> clobber a set of registers.</p>\n<p>The above pseudocode is fed to regalloc2 as follows (format is <code>insn id | insn | operands | clobbers</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">preds</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">succs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v0i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jz</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v0i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">preds</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"n\">succs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v3i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jmp</span><span class=\"p\">(</span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">preds</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"n\">succs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v3i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jmp</span><span class=\"p\">(</span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">preds</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)],</span><span class=\"w\"> </span><span class=\"n\">succs</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v3i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p10i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>RA2 successfully computes a result for this, but it's entirely wrong! It outputs the following InstOrEdit trace:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">p0i</span><span class=\"p\">]</span>\n<span class=\"n\">Jz</span><span class=\"p\">(</span><span class=\"n\">r0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">p0i</span><span class=\"p\">]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">p10i</span><span class=\"p\">]</span>\n<span class=\"n\">Move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p10i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p4i</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Jmp</span><span class=\"p\">(</span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">p10i</span><span class=\"p\">]</span>\n<span class=\"n\">Move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p10i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p4i</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">Jmp</span><span class=\"p\">(</span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">r3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">p10i</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Here, <code>p0i</code> is <code>RAX</code>, <code>p4i</code> is <code>RSI</code>, and <code>p10i</code> is <code>R10</code>. Effectively, it's output the following assembly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">exit</span><span class=\"w\"> </span><span class=\"n\">r10</span>\n</code></pre></div>\n<p>It's assigned the <code>r10</code> register to the <code>10/20</code> constants, because <code>exit</code> wants its argument to be in that physical register specifically. The main problem here of course is that the <code>jmp</code> instructions will clobber <code>r10</code>, so the final call to <code>exit</code> will contain garbage. RA2 seemingly is aware of this, because it attempts to back up the value into RSI (which isn't clobbered) first. But then it proceeds to never restore <code>r10</code> with <code>mov r10, rsi</code> after the branch?</p>\n<p>(Additionally, the choice of the initial <code>mov r10, [10/20]</code> is weird too. Why doesn't it immediately assign <code>RSI</code> to these cases, so it doesn't have to move around immediately after?)</p>\n<p>At first, I thought this was an issue with my input not being in SSA form. However, restructuring this so that block3 has a block parameter and assigning that appropriately results in exactly the same broken code.</p>\n<p>I suspect that the issue has something to do with RA2 not properly considering clobbers if the instruction doing the clobbering is a branch/block terminator. To illustrate, I added a simple NopClobber instruction to my ISA that does nothing except clobber. I placed this after each branch (i.e., its the first instruction in any block with a nonzero amount of predecessors). Re-running RA2 on that input results in the following assignment which, while suboptimal, at least is correct:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">nop</span><span class=\"o\">-</span><span class=\"n\">clobber</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">nop</span><span class=\"o\">-</span><span class=\"n\">clobber</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">20</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r10</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block3</span>\n\n<span class=\"n\">block3</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">nop</span><span class=\"o\">-</span><span class=\"n\">clobber</span>\n<span class=\"w\">    </span><span class=\"n\">mov</span><span class=\"w\"> </span><span class=\"n\">r10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rdi</span>\n<span class=\"w\">    </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">r10</span>\n</code></pre></div>\n<p>This workaround is fine for now, but it results in a suboptimal allocation and is probably indicative of _some_ issue in RA2. Figured I'd reach out and poke you, to see if this is something that RA2 should/could be handling better.</p>",
        "id": 453788063,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721852426
    },
    {
        "content": "<p>Ah, what's going on here is that the blockparam assignment causes edge-moves to be generated, and edge-moves go before the predecessor block's jump because there are multiple preds (block1 and block2) for one successor (block3)</p>",
        "id": 453794098,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721854325
    },
    {
        "content": "<p>In general, branches are special -- there are some restrictions on how they can use parameters as well -- because of the need to insert these moves that logically happen only on the edge actually before the branch over that edge</p>",
        "id": 453794213,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721854356
    },
    {
        "content": "<p>The bug honestly is that we don't error out when branches have clobbers specified...</p>",
        "id": 453794274,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721854375
    },
    {
        "content": "<p>To address this by making the allocator more flexible (actually fully supporting clobbers and all kinds of arguments on branches) would be quite nontrivial because it would mean we actually need to split the edge -- something we don't do currently (the CFG is immutable) -- or else require an empty block on every edge, which would be quite expensive</p>",
        "id": 453794584,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721854456
    },
    {
        "content": "<p>so RA2 was designed with the tradeoff that branches are limited, which worked for the real ISAs we were targeting. Could you say more about why branches have clobbers (maybe there's some other solution we can think of)?</p>",
        "id": 453794687,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721854483
    },
    {
        "content": "<p>Fair enough. I can emulate clobbers on branches through the nop-clobber trick so losing that isn't too bad for my usecases.</p>\n<p>Am I correct in thinking that RA2 does fixed-register choices before it attempts to compensate for clobbers? That'd explain the suboptimal choice for it to first move the constants into r10 (the fixed register for the exit insn), then work around the clobber that it encounters with the swap in/out of rdi.</p>\n<p>My branch instructions cause clobbers because the final assembly also does a function call before the branch for instrumentation purposes, and this function call ends up doing the actual branch, instead of the real x86 instruction (you'll notice that the clobber set in my trace above is exactly the same as the set of caller-save registers on Win64). The reason for not having some kind of <code>Insn::InstrumentCall</code> before the branches is that in the case of <code>Jz</code> I don't want RA2 to spend efforts on ensuring that the argument isn't clobbered when it doesn't suffer from the clobbering (the clobbering happens after the conditional register has been read)</p>",
        "id": 453796117,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721854903
    },
    {
        "content": "<p>I suppose the alternative would be to just have the instrumentation back up all registers (i.e. a non-clobbering call) so that I don't have to worry about clobbers in edges at all.</p>",
        "id": 453797217,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721855136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"739673\">@Thijs Molendijk</span> You can put clobbers on branches if the destination block has more than 1 predecessor. If the destination block only has 1 predecessor then you need to use the nop clobber trick.</p>",
        "id": 453803650,
        "sender_full_name": "Amanieu",
        "timestamp": 1721858012
    },
    {
        "content": "<blockquote>\n<p>Am I correct in thinking that RA2 does fixed-register choices before it attempts to compensate for clobbers?</p>\n</blockquote>\n<p>No, this isn't how it works: RA2 collects all requirements, including fixed-register constraints and clobber conflicts, and handles them all together in the main allocation loop. If you had put the same constraints and clobbers on a regular instruction in straight line code, you'd see it work properly. The only issue is with branches, as I mentioned; branches are special because they can come <em>after</em> an edge move that they logically should come before (so their uses are heavily restricted).</p>",
        "id": 453811640,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721861968
    },
    {
        "content": "<p>Just to confirm, I'm not allowed to have a block that contains a branching instruction that isn't the final instruction, right? I just ran into some oddities where regallocs were weird/incorrect when I had a block that ended with <code>jz x, a; jmp b</code>, but I presume I need to model that as two blocks, one direct branch and one implicit fallthrough?</p>",
        "id": 454060350,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721944588
    },
    {
        "content": "<p>(if that's the case, it'd probably also be good to add an assertion/check for that)</p>",
        "id": 454060403,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721944618
    },
    {
        "content": "<p>Hm, nevermind. That still results in a bad allocation. Let me reduce it and see if I can find what is causing it</p>",
        "id": 454060711,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721944780
    },
    {
        "content": "<p>RA2 itself doesn't care about whether the last 1 or last N instructions are branches; it gets its canonical CFG from what you provide re: successor info</p>",
        "id": 454061218,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721945030
    },
    {
        "content": "<p>Hm okay, I ran into another bug, but I'm not sure where. I have the following input:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2147483647</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v1i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Syscall</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p0i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v1i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p9i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jz</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"o\">@</span><span class=\"n\">Late</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v5i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p3i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jmp</span><span class=\"p\">(</span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NopClobber</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p3i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NopClobber</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p3i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n</code></pre></div>\n<p>This is roughly equivalent to the following assembly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">block0</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">mov</span><span class=\"w\"> </span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2147483647</span>\n<span class=\"w\">    </span><span class=\"n\">syscall</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">r1</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"n\">jz</span><span class=\"w\"> </span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n<span class=\"w\">    </span><span class=\"n\">jmp</span><span class=\"w\"> </span><span class=\"n\">block2</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">exit</span><span class=\"w\"> </span><span class=\"n\">r2</span>\n\n<span class=\"n\">block2</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">exit</span><span class=\"w\"> </span><span class=\"n\">r2</span>\n</code></pre></div>\n<p>There are only clobbers on non-branch instructions here, so we should be fine w.r.t. avoiding the clobbering issues described earlier. I've automatically inserted a NopClobber in both branches, even if it might not be necessary (since they both only have a single predecessor). </p>\n<p>Running RA2 on this errors with \"Could not allocate minimal bundle, but the allocation problem should be possible to solve\" (<a href=\"https://github.com/bytecodealliance/regalloc2/blob/main/src/ion/process.rs#L1266\">https://github.com/bytecodealliance/regalloc2/blob/main/src/ion/process.rs#L1266</a>).</p>\n<p>Now, if I drop the RAX clobber from the syscall instruction, it successfully completes the allocation with a proper working allocation:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">MovImm64</span><span class=\"p\">(</span><span class=\"n\">r1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">2147483647</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v1i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">p9i</span><span class=\"p\">]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Syscall</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p0i</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v1i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p9i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">p0i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p9i</span><span class=\"p\">]</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jz</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"o\">@</span><span class=\"n\">Late</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">reg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Def</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v5i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p3i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">p0i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">p3i</span><span class=\"p\">]</span>\n<span class=\"n\">Move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p0i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p4i</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Jmp</span><span class=\"p\">(</span><span class=\"n\">BlockId</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NopClobber</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"n\">Move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p4i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p3i</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p3i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">p3i</span><span class=\"p\">]</span>\n\n<span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">pred</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Block</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">succ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">==</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">NopClobber</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s\">\"RAX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RCX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"RDX\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R9\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R10\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"R11\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[]</span>\n<span class=\"n\">Move</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p4i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">p3i</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">insn</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Exit</span><span class=\"p\">(</span><span class=\"n\">r2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">operands</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Use</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">v2i</span><span class=\"w\"> </span><span class=\"n\">fixed</span><span class=\"p\">(</span><span class=\"n\">p3i</span><span class=\"p\">)]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">clobbers</span><span class=\"o\">=</span><span class=\"p\">[]</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">allocs</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">p3i</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>(well, it's not actually working but that's the result of the NopClobber hack; I'm lacking a NopClobber after the Jz if branch is not taken, so RA2 only moves RAX into RDI after Jz, at which point RAX is already clobbered. But that's my fault, not RA2's).</p>\n<p>The docs for Program::inst_clobbers say \"Note that it is legal for a register to be both a clobber and an actual def (via pinned vreg or via operand constrained to the reg). This is for convenience: e.g., a call instruction might have a constant clobber set determined by the ABI, but some of those clobbered registers are sometimes return value(s).\". The behavior above seems to contradict this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc2/blob/main/src/ion/process.rs#L1266\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8149892b8913fab26d277725075953f131cccd48/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313733393030333237346165613439666331653863376537343062666232383364333637386665613434336533616665633364663366656664363036626536322f62797465636f6465616c6c69616e63652f726567616c6c6f6332&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc2/blob/main/src/ion/process.rs#L1266\" title=\"regalloc2/src/ion/process.rs at main · bytecodealliance/regalloc2\">regalloc2/src/ion/process.rs at main · bytecodealliance/regalloc2</a></div><div class=\"message_embed_description\">A new register allocator. Contribute to bytecodealliance/regalloc2 development by creating an account on GitHub.</div></div></div>",
        "id": 454063348,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721946246
    },
    {
        "content": "<p>Unfortunately I've run out of spare cycles for support here; I'd encourage you to look at how Cranelift uses RA2 and continue to debug, and I may be able to return later</p>",
        "id": 454063999,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721946604
    },
    {
        "content": "<p>No worries, thanks for the help. I'll file an issue on the repo if nothing else, perhaps I'll have time myself to look into it deeper.</p>",
        "id": 454064304,
        "sender_full_name": "Thijs Molendijk",
        "timestamp": 1721946791
    }
]