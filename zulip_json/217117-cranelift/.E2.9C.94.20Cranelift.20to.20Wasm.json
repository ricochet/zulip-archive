[
    {
        "content": "<p>Can the Cranelift compiler be compiled to WASM? I was wondering about getting something similar to Wasmtime written in Golang (or C) so it could be run on BSD platforms like FreeBSD, OpenBSD, and Dragonfly BSD, but the actual generation of machine code at runtime is not something to reinvent.</p>",
        "id": 446270788,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1719061471
    },
    {
        "content": "<p>Yes, you can see this in Wasmtime with <code>cargo build --target wasm32-wasip1 --features all-arch,compile --no-default-features</code> which builds a wasm binary that can do <code>./wasmtime.wasm compile ...</code> which is more-or-less cranelift-compiled to wasm</p>",
        "id": 446274336,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719064173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"704709\">Frank Rehwinkel</span> has marked this topic as resolved.</p>",
        "id": 446276298,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719065692
    },
    {
        "content": "<p>I misspoke when I said/thought the BSD program would be wasmtime-like. Now I appreciate more of what the wasmtime-cli brings to the table. So just a new embedder that could use the wasip1 build of cranelift is what I meant. And the debug and release versions of the command provided above built it cleanly. Thanks.</p>",
        "id": 446277253,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1719066423
    },
    {
        "content": "<p>Just a follow up. It works. Building the release version of the wasmtime as given above creates a 7MB wasm file (built it on a mac). On a Linux machine where I had built <code>iwasm</code> from <code>wamr</code>, I ran the cranelift compiler with iwasm and passed some arguments to the compiler, the filename and the target: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">iwasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">dir</span><span class=\"o\">=</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"o\">-</span><span class=\"n\">unknown</span><span class=\"o\">-</span><span class=\"n\">linux</span><span class=\"o\">-</span><span class=\"n\">gnu</span>\n</code></pre></div>\n<p>which created a <code>hello.cwasm</code> file after 2 seconds.</p>\n<p>Then to run the compiled binary, I resorted to <code>wasmtime</code> again because I didn't know anything else that runs compiled wasm yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">precompiled</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">cwasm</span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span>\n</code></pre></div>\n<p>I think that's cool. Using a wasm version of cranelift to compile other wasm files into a target's compiled wasm. So far could only see it build and run with the x86_64-unknown-linux-gnu target and I could see the builds succeed for x86_64-unknown-{dragonfly, freebsd, openbsd} but don't have machines to try them on (and don't have an embedder on such machines yet either).</p>",
        "id": 446293841,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1719074245
    },
    {
        "content": "<p>Separate from your actual question but to address a few other points you brought up with possibly-useful info:</p>\n<blockquote>\n<p>so it could be run on BSD platforms like FreeBSD, OpenBSD, and Dragonfly BSD</p>\n</blockquote>\n<p>Wasmtime should either build and work, or be very close to doing so, on FreeBSD (and patches welcome if not); OpenBSD is a little trickier because of crate support and need for rustc binaries (<a href=\"https://github.com/bytecodealliance/wasmtime/issues/6962\">https://github.com/bytecodealliance/wasmtime/issues/6962</a> and you can see my PR that did have it working at one point at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2980\">https://github.com/bytecodealliance/wasmtime/pull/2980</a>); haven't tried on NetBSD or Dragonfly. We list more details in our docs under tiers (<a href=\"https://docs.wasmtime.dev/stability-tiers.html\">https://docs.wasmtime.dev/stability-tiers.html</a>) and platforms (<a href=\"https://docs.wasmtime.dev/stability-platform-support.html\">https://docs.wasmtime.dev/stability-platform-support.html</a>)</p>\n<blockquote>\n<p>I resorted to <code>wasmtime</code> again because I didn't know anything else that runs compiled wasm yet</p>\n</blockquote>\n<p><code>.cwasm</code> is Wasmtime's own format and we don't have a formal spec or even a stability guarantee between versions: the compiled code directly accesses data structures maintained by the Wasmtime runtime, so is very specific and unlikely to be easy to run in some other runtime. All that to say that \"anything else that runs [.cwasm]\" is unlikely to / shouldn't exist in the future.</p>\n<p>Glad this worked out for you -- would be interesting to hear more about the use-case (just running on the above platforms or...? e.g. some folks run Cranelift compilation in Wasm because they want to sandbox against runaway compiler resource usage, etc)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6962\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/999c24728ee4baa1fa11052ef9e2aacf345e51c4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363665363737646461663337373831386437643033653232396435393736363838316531323765306335306337626539666335333737636637373139636638312f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36393632&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6962\" title=\"NetBSD/OpenBSD support · Issue #6962 · bytecodealliance/wasmtime\">NetBSD/OpenBSD support · Issue #6962 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hi, I've tried to compile wasmtime on NetBSD 9.3 and it's failed with the unsupported platform error in https://github.com/bytecodealliance/wasmtime/blob/main/crates/runtime/src/traphandlers/unix.r...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2980\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/506d4c404b7866c7ffd58c3f0c4b4d6ae275903f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333733353239303838396565343837323234633230643338386461373431613335373530356166323163303430316566313364623739313937363230613230642f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f32393830&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2980\" title=\"Port to OpenBSD! by cfallin · Pull Request #2980 · bytecodealliance/wasmtime\">Port to OpenBSD! by cfallin · Pull Request #2980 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Verified to work with several simple Wasm modules on an OpenBSD 6.9\nx86_64 machine, built with the Rust 1.51.0 included in the packages\ncollection (pkg_add rust) because rustup doesn't support\nOpen...</div></div></div>",
        "id": 446303275,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1719079541
    },
    {
        "content": "<p>Oh, that's very interesting info. I was under the mistaken impression the compiled wasm could be runnable by something other than wasmtime. But that explains why the wasmtime version had to match what was found in the .cwasm file. And it makes  perfect sense - there was no ABI for the first Wasm modules that embedders would all be trying to support.</p>\n<p>My use case generally was to see what was possible to extend the use of wasm in environments where Wasmtime didn't play nicely, like OpenBSD in particular. I had seen posts earlier where because OpenBSD won't keep its ABI standard from release to release, it was considered too much of a moving target and there was no company behind wanting to keep up the necessary support. I see OpenBSD and Dragonfly BSD are listed in the Tier 3 rustc handbook, with check marks for the std library and the host tools; so I guess cargo can be built for them, not sure if rustup could be built for them.</p>\n<p>OpenBSD has been of interest to me for a long time because of its emphasis on security first, before features and speed. And then I was looking at the <a href=\"http://upspin.io\">Upspin</a> project again, after having worked on it years ago, and thought it could be nice to replace some upspin binaries that have to be built for each platform (and they like to support Dragonfly and OpenBSD) with an embedder for each of those platforms but then the meat of the functionality (encryption of files and encryption of rpc and TCP connections with a name server and then the federated client server) would be served with Wasm modules.</p>\n<p>Generally I thought, if someone is running an OpenBSD laptop or desktop, they probably have their privacy and security in mind first, and being able to offer a way to use Wasm modules, maybe Wasm component modules, what with the strictest sandboxing that implies, just falls right into their wheelhouse.</p>\n<p>Upspin hasn't caught on with a lot of people yet. They admit their users so far have to be very software savvy. And their key pair story had made it hard to see how to put a client into a browser so (I think) their shared file system is pretty much only used on desktops (but that is based on info from years ago so maybe has changed).</p>\n<p>Because GitHub has created an easy PassKey version for their 2FA, I started wondering about a mashup of Upspin, PassKeys and Wasm Components, but support on OpenBSD seemed like the first hurdle that would be easiest to understand. I guess there are C and C++, maybe even Golang, wasm embedders I could work from for OpenBSD and skip the idea of using Cranelift entirely, but they don't support Component modules so probably I won't let OpenBSD be a show stopper for now.</p>\n<p>Thanks for the feedback above, the trail of wasmtime/openbsd attempts from 2001 and earlier is thought provoking.</p>",
        "id": 446336762,
        "sender_full_name": "Frank Rehwinkel",
        "timestamp": 1719095192
    }
]