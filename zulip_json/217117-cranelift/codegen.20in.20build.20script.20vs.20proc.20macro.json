[
    {
        "content": "<p>Is there a specific reason meta programming is often done in build scripts instead of proc macros? I keep seeing code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">include!</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"fm\">env!</span><span class=\"p\">(</span><span class=\"s\">\"OUT_DIR\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"s\">\"/settings.rs\"</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>With that, I miss rust-analyzer's ability to expand the macro and I don't see the advantage. (except maybe that proc macros need a little bit more setup?)</p>\n<p>Maybe I'm just missing some tip how to work with this efficiently?</p>",
        "id": 354825892,
        "sender_full_name": "Remo Senekowitsch",
        "timestamp": 1682933466
    },
    {
        "content": "<p>It's largely a simplicity and debuggability issue: for example, at least with ISLE (which also is integrated in this way), we can separately invoke the metacompiler to see plain old source code in files. proc-macros deal with internal token trees and are much much harder to observe because of that</p>",
        "id": 354914038,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1682956957
    },
    {
        "content": "<p>(there's also history at least with ISLE of having checked in the source to the tree, at one point; it's not possible to make such a switch if the thing is based on a proc macro, AFAIK)</p>",
        "id": 354914260,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1682957013
    },
    {
        "content": "<p>In the case of ISLE especially there's also the issue that the set of dependencies needed to build a proc macro takes quite a while to compile, and we've tried to minimize build time for Cranelift.</p>",
        "id": 354923096,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1682959381
    },
    {
        "content": "<p>that makes sense, thanks!</p>",
        "id": 354935823,
        "sender_full_name": "Remo Senekowitsch",
        "timestamp": 1682962668
    },
    {
        "content": "<p>Hm wait but the compile time of a build script vs a proc macro doesn't matter? Also for separate dependencies there's no difference? In that both build scripts and proc macros can  have deps and can run in debug mode?</p>",
        "id": 354938530,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682963487
    },
    {
        "content": "<p>I'm not actually sure of any reason to use a build script over a proc macro other than one was slightly more natural to write</p>",
        "id": 354938608,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682963504
    },
    {
        "content": "<p>I just meant that there's a lot more code to compile in the <code>sym</code> family of crates than there is if you just use <code>writeln!</code> a bunch.</p>",
        "id": 354942313,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1682964493
    },
    {
        "content": "<p>Proc macros don't require <code>syn</code> (which I think you mean over <code>sym</code>?) though, we're generating Rust code today and we can convert that to a proc macro with <code>the_string.parse().unwrap()</code>, no <code>syn</code> needed</p>",
        "id": 354945220,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682965207
    },
    {
        "content": "<p>That is what I meant, yeah. Huh, I didn't realize parsing from a string was an option.</p>",
        "id": 354946328,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1682965461
    },
    {
        "content": "<p>if rust-analyzer doesn't support build scripts but does support proc macros then I would say we should probably transition everything to proc macros instead, basically just converting <code>build.rs</code> to a <code>cranelift-codegen-macros/src/lib.rs</code> with a little extra fluff</p>",
        "id": 354949573,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682966218
    },
    {
        "content": "<p>If I may chime in. I think rust-analyzer supports <code>include!</code> statements fine, but support for it might be pretty recent. After this issue was solved just a couple weeks ago <a href=\"https://github.com/rust-lang/rust-analyzer/issues/3767\">https://github.com/rust-lang/rust-analyzer/issues/3767</a>, I've had no issues with the current approach. I get docs on hover for all generated cranelift code and even jump to definition works properly</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust-analyzer/issues/3767\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3e111d3f3a8ead8e7362ce7ee355164430f384ad\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363165653464336462616161386439356432313638616632373731306235656332326564313131626539663562643831643536646338383130663331323833332f727573742d6c616e672f727573742d616e616c797a65722f6973737565732f33373637)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust-analyzer/issues/3767\" title=\"Support Goto Definition into `include!`  路 Issue #3767 路 rust-lang/rust-analyzer\">Support Goto Definition into `include!`  路 Issue #3767 路 rust-lang/rust-analyzer</a></div><div class=\"message_embed_description\">settings.json (vscode): { \"rust-analyzer.cargoFeatures.loadOutDirsFromCheck\": true, } rust-analyzer: 1c2d4135db867efe335a0654d86429bea7bb9caf (current master) How to reproduce: Add lapin = { versio...</div></div></div>",
        "id": 354952584,
        "sender_full_name": "Setzer22",
        "timestamp": 1682967023
    },
    {
        "content": "<p>Can confirm, I now get docs on hover, can expand the macro... I suspect a reload of vscode fixed it. That editor has a tendency to get confused. Didn't know rust-analyzer could do that, thanks!</p>",
        "id": 354954234,
        "sender_full_name": "Remo Senekowitsch",
        "timestamp": 1682967452
    },
    {
        "content": "<p>With proc macros rust-analyzer will never invalidate the macro expansion when the .isle files change, not will cargo know that it needs to rebuild if they change. Proc macros don't have any way to declare which files they read.</p>",
        "id": 354960267,
        "sender_full_name": "bjorn3",
        "timestamp": 1682969204
    },
    {
        "content": "<p>ah right I forgot about that! Good reason to stick with build scripts, and great to hear rust-analyzer supports it as well!</p>",
        "id": 354993304,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682983011
    }
]