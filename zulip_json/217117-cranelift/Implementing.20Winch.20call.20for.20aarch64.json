[
    {
        "content": "<p>Hello!<br>\nToday, I took a stab at implementing call for aarch64 in winch, I got the basic plumbing going, taking inspiration from x64, and cranelift, but I'm left with a couple of questions:<br>\nRight now, I have hardcoded the calling convention to SystemV, but my understanding is that we should somehow get this information from the assembler instead. I'm unsure how to do this, though, and the x64 implementation has a hardcoded x64. Can you guide me here?</p>\n<ul>\n<li>Looking at the generated code, I am confused because it doesn't adhere to the calling convention. I expect arguments to be passed into regs w0, w1... but they are instead in other registers. I thought this was an issue with my implementation, but cranelift uses similar registers (like w2, w3). Is that expected?</li>\n<li>I started adding disas tests, but when I try to assemble, and link the generated assembly, the <code>bl</code> targets are completely off (even with cranelift), so I'm assuming that I am doing something wrong. How should I go about testing the generated asm?</li>\n</ul>",
        "id": 486349690,
        "sender_full_name": "marin",
        "timestamp": 1733417104
    },
    {
        "content": "<p>Re: register offsets: what you're probably seeing (just my educated guess) is that Wasm parameters come after the \"caller vmctx\" and \"callee vmctx\" parameters in Wasmtime's internal calling convention; so a wasm function with one arg will indeed take that one arg in <code>x2</code>/<code>w2</code> (depending on width)</p>",
        "id": 486351736,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733417666
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> for the design questions around calling convention</p>",
        "id": 486351784,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733417681
    },
    {
        "content": "<p>ohh that makes a lot of sense! is that internal calling convention described anywhere?</p>",
        "id": 486352814,
        "sender_full_name": "marin",
        "timestamp": 1733417943
    },
    {
        "content": "<p>I don't think we've formally documented it separately (there are probably comments somewhere); it's kind of implicit in the code unfortunately, sorry :-/</p>",
        "id": 486353523,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733418134
    },
    {
        "content": "<p>You can find the documentation in the ABI module <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/abi/mod.rs#L15\">https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/abi/mod.rs#L15</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/abi/mod.rs#L15\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/77ecf13a3c847f58d95d8653258d5c03cf46ec67/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333639396433326130353438373139316463323730346237383232333433336638316130336439376264663539656364313733386262303365646266313466612f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/abi/mod.rs#L15\" title=\"wasmtime/winch/codegen/src/abi/mod.rs at main · bytecodealliance/wasmtime\">wasmtime/winch/codegen/src/abi/mod.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 486353560,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733418144
    },
    {
        "content": "<p>It's explicitly stated how the <code>ABISig</code> behaves.</p>",
        "id": 486353619,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733418165
    },
    {
        "content": "<p>It's great that you've gotten calls almost working! For future reference and to avoid the risk of duplicated efforts it's advised to reach out through Zulip or comment in this issue <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">https://github.com/bytecodealliance/wasmtime/issues/8321</a> whenever you'd like to implement a new Aarch64 instruction. For now calls are assigned to me, since it's the next immediate instruction that I was planning on working next, however, I haven't started, so if you have no objections, I'll add your github handle next to it.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b04f429589e7377581ac1a15ed51a138fd6bd6e5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373662336430313463613831643333323432386237313361616339383366666231623730396430356635313336343435663065656263383430303637656361342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38333231&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\" title=\"winch: Aarch64 MacroAssembler completeness · Issue #8321 · bytecodealliance/wasmtime\">winch: Aarch64 MacroAssembler completeness · Issue #8321 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation. If you're interest...</div></div></div>",
        "id": 486354351,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733418364
    },
    {
        "content": "<p>I will next time for sure! I just started out of curiosity and then fell into the rabbit hole. I'll assign myself  the other instruction I had to implement to get things working then.</p>",
        "id": 486354836,
        "sender_full_name": "marin",
        "timestamp": 1733418520
    },
    {
        "content": "<p>I think you won't be able to edit the issue -- I can do that for you though. Feel free to send me your GH handle and the other instruction either here or DM!</p>",
        "id": 486357916,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733419460
    },
    {
        "content": "<p>here's my handle: MarinPostma</p>\n<p>the other instruction I had to implement was <code>trapz</code> and <code>address_at_vmctx</code></p>",
        "id": 486358847,
        "sender_full_name": "marin",
        "timestamp": 1733419759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> how would you trigger a libcall from wasm?</p>",
        "id": 486359997,
        "sender_full_name": "marin",
        "timestamp": 1733420116
    },
    {
        "content": "<p>a memcpy, I guess?</p>",
        "id": 486360415,
        "sender_full_name": "marin",
        "timestamp": 1733420237
    },
    {
        "content": "<p>It depends what exactly you mean by libcall in this context. Are you trying to call out to some builtin function?</p>",
        "id": 486360708,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733420340
    },
    {
        "content": "<p>I am trying to enter the <code>CalleeKind::LibCall</code> branch of the <code>Masm::call</code>'s callee argument</p>",
        "id": 486360950,
        "sender_full_name": "marin",
        "timestamp": 1733420419
    },
    {
        "content": "<p>Usually in that case you'd load the address of the function into a register and emit a call using that register, similar to what's in there for x64 <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/asm.rs#L1290\">https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/asm.rs#L1290</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/asm.rs#L1290\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/77ecf13a3c847f58d95d8653258d5c03cf46ec67/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333639396433326130353438373139316463323730346237383232333433336638316130336439376264663539656364313733386262303365646266313466612f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/x64/asm.rs#L1290\" title=\"wasmtime/winch/codegen/src/isa/x64/asm.rs at main · bytecodealliance/wasmtime\">wasmtime/winch/codegen/src/isa/x64/asm.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 486361584,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733420636
    },
    {
        "content": "<p>sorry, I did not express myself correctly. What I mean to do is to write some wasm code that will emit a libcall instruction. I tried with <code>Memory.fill</code>, but it is just a regular call to<code>wasmtime_builtin_memory_fill</code></p>",
        "id": 486362412,
        "sender_full_name": "marin",
        "timestamp": 1733420876
    },
    {
        "content": "<p>I wan to test my implementation</p>",
        "id": 486362561,
        "sender_full_name": "marin",
        "timestamp": 1733420894
    },
    {
        "content": "<p>I don't think there's a great way to hit the libcall case in aarch64, the libcall is used as a fallback mechanism for when the target architecture doesn't offer support for certain operations (e.g., <code>f32_floor</code>). Most (if not all) of the float operations for aarch64 have been implemented and none of those require a libcall <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/aarch64/masm.rs#L353\">https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/aarch64/masm.rs#L353</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/aarch64/masm.rs#L353\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1c08c5638b3e736081fc1cc9636cbbada5ea7bab/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613262313539353535633761336665393866353766633135633765346232343062303162316665363866646662306433396636346634663564386330373235372f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/winch/codegen/src/isa/aarch64/masm.rs#L353\" title=\"wasmtime/winch/codegen/src/isa/aarch64/masm.rs at main · bytecodealliance/wasmtime\">wasmtime/winch/codegen/src/isa/aarch64/masm.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 486364816,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733421649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> I believe it is done: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9751\">https://github.com/bytecodealliance/wasmtime/pull/9751</a>, can I do anything else? More instructions?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9751\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/456ac08141374806b5ffb82346a847751585da2f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646164303266343330323632386638326332626264613038323864616365346266303030383430633363363064303762353166303866373366303864326463342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39373531&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9751\" title=\"winch: Implement aarch64 call, trapz, address_at_vmctx by MarinPostma · Pull Request #9751 · bytecodealliance/wasmtime\">winch: Implement aarch64 call, trapz, address_at_vmctx by MarinPostma · Pull Request #9751 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Implement the following MASM instruction for the aarch64 platform:\n\ncall\naddress_at_vmctx\ntrapz\n\nI initially planned to only implement call, but implementing the tests uncovered the necessity to im...</div></div></div>",
        "id": 486538301,
        "sender_full_name": "marin",
        "timestamp": 1733498858
    },
    {
        "content": "<p>Thanks, I'll take look today! If you're interested, here's the list of missing instructions for aarch64  <a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\">https://github.com/bytecodealliance/wasmtime/issues/8321</a> feel free to pick -- by the way, we also have the <a class=\"stream\" data-stream-id=\"417703\" href=\"/#narrow/channel/417703-winch\">#winch</a> stream, so feel free to move any other conversation there regarding other instructions/questions/etc.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/00d9b7ca9cdca90119941c50416bc0eb713c06d8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636232643331333062353262633938393135363338666134663863623336383034353639633766643536316637376237626435323436396665373034326331382f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38333231&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8321\" title=\"winch: Aarch64 MacroAssembler completeness · Issue #8321 · bytecodealliance/wasmtime\">winch: Aarch64 MacroAssembler completeness · Issue #8321 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Winch's support for Aarch64 is minimal. The objective of this issue to track the missing items in order to bring the Aarch64 MacroAssembler to parity with the x64 implementation. If you're interest...</div></div></div>",
        "id": 486542524,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1733500138
    }
]