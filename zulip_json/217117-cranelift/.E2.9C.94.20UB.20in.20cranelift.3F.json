[
    {
        "content": "<p>Does cranelift have a concept of UB/poison like LLVM does?</p>",
        "id": 347531547,
        "sender_full_name": "kmeakin",
        "timestamp": 1680821315
    },
    {
        "content": "<p>Nope, we've actually pretty explicitly chosen <em>not</em> to have UB</p>",
        "id": 347531694,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821388
    },
    {
        "content": "<p>I understand wasm requires things like division by zero to trap. But splitting the check for zero divisor and division into separate instructions in the IR could expose more optimisation opportunites. Would just have to modify the fronted to generate code that checks for UB and traps</p>",
        "id": 347531717,
        "sender_full_name": "kmeakin",
        "timestamp": 1680821402
    },
    {
        "content": "<p>small asterisk around memory accesses -- if you access an invalid pointer, all bets are off</p>",
        "id": 347531719,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821402
    },
    {
        "content": "<p>There are a whole host of benefits we get by <em>not</em> having UB, and I've tried to hold the line on this as much as possible: verification is simpler and subtle correctness bugs from unexpected optimization assumptions just can't happen</p>",
        "id": 347531880,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821456
    },
    {
        "content": "<p>It's true that in some cases it will limit opportunities, but our goal is explicitly not to be LLVM</p>",
        "id": 347531898,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821467
    },
    {
        "content": "<p>(for a somewhat related discussion, see recent comments about pointer provenance on GitHub -- I argued to treat a pointer as an integer, and define an access to a pointer as valid as long as the integer value is valid, irrespective of its provenance; because the alternative, where certain kinds of derivations are UB, just causes so many broken assumptions that it's impossible to be really sure about optimization correctness)</p>",
        "id": 347532122,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821562
    },
    {
        "content": "<p>Fuzzing and other similar testing is another example of the benefits we get from UB: by giving one particular meaning to any given CLIF, we can test via equality of outputs, rather than some sort of refinement or one-possible-valid-behavior predicate</p>",
        "id": 347532253,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821626
    },
    {
        "content": "<p>every once in a while this comes up when someone sees an optimization opportunity; maybe I should write an RFC if it would help align everyone :-)</p>",
        "id": 347532343,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821661
    },
    {
        "content": "<p>Thank you. Would be interesting to see how far we can push perf without compromising on UB</p>",
        "id": 347532481,
        "sender_full_name": "kmeakin",
        "timestamp": 1680821745
    },
    {
        "content": "<p>IIRC there was a paper where they disabled UB in LLVM and there was only a few % slowdown in most benchmarks</p>",
        "id": 347532529,
        "sender_full_name": "kmeakin",
        "timestamp": 1680821763
    },
    {
        "content": "<p>I <em>do</em> suspect that there are ways to design abstractions that expose some of the optimization opportunities without UB, though. One way to see UB is under-capture of invariants in the IR's type system. So for example a \"non-zero integer type\" as the output of a \"trap if divisor is 0\" operator could then be fed into a non-trapping div</p>",
        "id": 347532559,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821769
    },
    {
        "content": "<p>ah, that's interesting, I haven't seen concrete numbers; that's not bad at all</p>",
        "id": 347532613,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/UB.20in.20cranelift.3F/near/347532559\">said</a>:</p>\n<blockquote>\n<p>I <em>do</em> suspect that there are ways to design abstractions that expose some of the optimization opportunities without UB, though. One way to see UB is under-capture of invariants in the IR's type system. So for example a \"non-zero integer type\" as the output of a \"trap if divisor is 0\" operator could then be fed into a non-trapping div</p>\n</blockquote>\n<p>Something like a refinement type system?</p>",
        "id": 347532698,
        "sender_full_name": "kmeakin",
        "timestamp": 1680821843
    },
    {
        "content": "<p>Yeah, in the most general sense :-) I don't know if I would want something like fully general refinement predicates in CLIF</p>",
        "id": 347533034,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680821988
    },
    {
        "content": "<p>though maybe actually at least integer-range refinements would make sense</p>",
        "id": 347533080,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680822002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as resolved.</p>",
        "id": 348812937,
        "sender_full_name": "Notification Bot",
        "timestamp": 1681326460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> <a href=\"#narrow/stream/217117-cranelift/topic/.E2.9C.94.20UB.20in.20cranelift.3F/near/347532529\">said</a>:</p>\n<blockquote>\n<p>IIRC there was a paper where they disabled UB in LLVM and there was only a few % slowdown in most benchmarks</p>\n</blockquote>\n<p>Do you have a link, perchance?  I'd be very interested to see how they did that.</p>",
        "id": 350861760,
        "sender_full_name": "scottmcm",
        "timestamp": 1681843772
    }
]