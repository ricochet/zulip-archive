[
    {
        "content": "<p>hey! I'm running into a segfault when calling a function defined in a DLL compiled from C++. I can successfully find and call the function using <a href=\"https://docs.rs/dlopen/latest/dlopen/\">dlopen</a>: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Library</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"SimpleDLL.dll\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fn_ptr</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"DisplayHelloFromMyDLL\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">display_hello</span>: <span class=\"nc\">fn</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">mem</span>::<span class=\"n\">transmute</span><span class=\"p\">(</span><span class=\"n\">fn_ptr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"n\">display_hello</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// This works.</span>\n</code></pre></div>\n<p>But when I add <code>display_hello</code> to the JITBuilder's symbols, build a call to the function, and execute the finalized main function, I get a segmentation fault.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">jit_builder</span><span class=\"p\">.</span><span class=\"n\">symbols</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// These functions defined in Rust directly work fine.</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"Base.print_int\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builtin</span>::<span class=\"n\">print_int</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"Base.alloc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builtin</span>::<span class=\"n\">alloc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"Base.dealloc\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">builtin</span>::<span class=\"n\">dealloc</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// This doesn't.</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"s\">\"DisplayHelloFromMyDLL\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fn_ptr</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"p\">]);</span><span class=\"w\"></span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">local_callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">.</span><span class=\"n\">b</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">local_callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Here's the source for the DLL.</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"cp\">#include</span><span class=\"w\"> </span><span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"></span>\n<span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"kr\">__declspec</span><span class=\"p\">(</span><span class=\"n\">dllexport</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"n\">DisplayHelloFromMyDLL</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Hello.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 302028058,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664789327
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">cg_clif</a> (a project of mine) seems to be having the same problem. Could you check that <code>fn_ptr</code> is not a null pointer? And if it isn't get a backtrace at the point of the crash using a debugger?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6c13f77c2feb0326be90978e58d7ea2db901d505\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613464666635316634653863353862356636326433306336653238343834626436653135323632303838333764306637623864616535303064323664383164382f626a6f726e332f72757374635f636f646567656e5f6372616e656c696674)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" title=\"GitHub - bjorn3/rustc_codegen_cranelift: Cranelift based backend for rustc\">GitHub - bjorn3/rustc_codegen_cranelift: Cranelift based backend for rustc</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 302037901,
        "sender_full_name": "bjorn3",
        "timestamp": 1664793612
    },
    {
        "content": "<p>When printing <code>fn_ptr</code> after looking up the symbol, it's equal to <code>0x7ff8c57412e9</code>. When stepping through the execution of <code>main()</code> this is the instruction that the debugger crashes at: <a href=\"/user_uploads/15107/AzCBJQntKSZ0f5omPw8KQZV_/Screenshot-2022-10-03-104320.png\">screenshot</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/AzCBJQntKSZ0f5omPw8KQZV_/Screenshot-2022-10-03-104320.png\" title=\"screenshot\"><img src=\"/user_uploads/15107/AzCBJQntKSZ0f5omPw8KQZV_/Screenshot-2022-10-03-104320.png\"></a></div>",
        "id": 302114431,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664819240
    },
    {
        "content": "<p>Can you look if there is any memory mapped at 0x7ff8c57412e9 and if so with which permissions?</p>",
        "id": 302114787,
        "sender_full_name": "bjorn3",
        "timestamp": 1664819352
    },
    {
        "content": "<p>I'm a bit of a novice with systems stuff. Could you point me to a reference for how to do that?</p>",
        "id": 302115736,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664819662
    },
    {
        "content": "<p>It depends on which debugger you use. In any case I don't use windows for development, so I don't have any experience with windows debuggers.</p>",
        "id": 302120964,
        "sender_full_name": "bjorn3",
        "timestamp": 1664821198
    },
    {
        "content": "<p>I'm currently using LLDB, if that's familiar.  I'll do some more digging and try to find that info.</p>",
        "id": 302128007,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664823445
    },
    {
        "content": "<p>Oh here's the backtrace message: </p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>* thread #1, stop reason = Exception 0xc0000005 encountered at address 0x7ff8c58912e9:\nUser-mode data execution prevention (DEP) violation at location 0x7ff8c58912e9\n  * frame #0: 0x00007ff8c58912e9\n</code></pre></div>\n<p>So this address isn't executable?</p>",
        "id": 302131801,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664824684
    },
    {
        "content": "<p>Didn't know lldb worked on windows. I thought you had to do eg windbg. Could you try disassembling the first couple of instructions at this address to see if there is executable code not marked as executable or if there is no code there in the first place? Something like <code>disassemble --start-address 0xdeadbeef --count 20</code> works for disassembling 20 instructions at 0xdeadbeef.</p>",
        "id": 302135227,
        "sender_full_name": "bjorn3",
        "timestamp": 1664825992
    },
    {
        "content": "<p>By the way feel free to @ mention me in case I don't respond. I don't continuously monitor this, but do have push notifications for mentions enabled.</p>",
        "id": 302135449,
        "sender_full_name": "bjorn3",
        "timestamp": 1664826076
    },
    {
        "content": "<p>Thanks, I'm in no rush.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&gt; disassemble --start-address 0x7ff8c58912e9 --count 1\nerror: Only part of a ReadProcessMemory or WriteProcessMemory request was completed.\nerror: Failed to disassemble memory at 0x7ff8c58912e9.\n</code></pre></div>\n<p>I think there are windows os-level protections of some sort?</p>",
        "id": 302136510,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664826500
    },
    {
        "content": "<p>Could you try <code>image dump sections</code>? Not sure if it works on Windows.</p>",
        "id": 302139863,
        "sender_full_name": "bjorn3",
        "timestamp": 1664827758
    },
    {
        "content": "<blockquote>\n<p>I think there are windows os-level protections of some sort?</p>\n</blockquote>\n<p>It seems like that memory isn't mapped at all, not just mapped as non-executable.</p>",
        "id": 302140103,
        "sender_full_name": "bjorn3",
        "timestamp": 1664827839
    },
    {
        "content": "<p>Here's the section for the DLL. I can paste the other sections if needed</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Sections for 'C:\\Users\\Tim\\Projects\\hubbub\\target\\debug\\SimpleDLL.dll' (x86_64):\n  SectID     Type             Load Address                             Perm File Off.  File Size  Flags      Section Name\n  ---------- ---------------- ---------------------------------------  ---- ---------- ---------- ---------- ----------------------------\n  0xffffffffffffffff regular  [0x0000000180000000-0x0000000180000400)* r--  0x00000000 0x00000400 0x00000000 SimpleDLL.dll.PECOFF header\n  0x00000001 code             [0x0000000180001000-0x0000000180011000)* rwx  0x00000000 0x00000000 0xe00000a0 SimpleDLL.dll..textbss\n  0x00000002 code             [0x0000000180011000-0x0000000180018da1)* r-x  0x00000400 0x00007e00 0x60000020 SimpleDLL.dll..text\n  0x00000003 data             [0x0000000180019000-0x000000018001bbe7)* r--  0x00008200 0x00002c00 0x40000040 SimpleDLL.dll..rdata\n  0x00000004 data             [0x000000018001c000-0x000000018001c8e8)* rw-  0x0000ae00 0x00000200 0xc0000040 SimpleDLL.dll..data\n  0x00000005 data             [0x000000018001d000-0x000000018001f148)* r--  0x0000b000 0x00002200 0x40000040 SimpleDLL.dll..pdata\n  0x00000006 data             [0x0000000180020000-0x0000000180020d03)* r--  0x0000d200 0x00000e00 0x40000040 SimpleDLL.dll..idata\n  0x00000007 data             [0x0000000180021000-0x000000018002110a)* rw-  0x0000e000 0x00000200 0xc0000040 SimpleDLL.dll..msvcjmc\n  0x00000008 data             [0x0000000180022000-0x0000000180022175)* r--  0x0000e200 0x00000200 0x40000040 SimpleDLL.dll..00cfg\n  0x00000009 data             [0x0000000180023000-0x000000018002343c)* r--  0x0000e400 0x00000600 0x40000040 SimpleDLL.dll..rsrc\n  0x0000000a regular          [0x0000000180024000-0x0000000180024259)* r--  0x0000ea00 0x00000400 0x42000040 SimpleDLL.dll..reloc\n</code></pre></div>",
        "id": 302140513,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664827995
    },
    {
        "content": "<p>Is there also a range close to the address that causes the crash when being called?</p>",
        "id": 302140788,
        "sender_full_name": "bjorn3",
        "timestamp": 1664828096
    },
    {
        "content": "<p>Also are you using libloading 0.7.3 (the latest version)?</p>",
        "id": 302141522,
        "sender_full_name": "bjorn3",
        "timestamp": 1664828337
    },
    {
        "content": "<p>Just reread your original message. You are using the dlopen crate. I assumed that you used the libloading crate. My bad.</p>",
        "id": 302141713,
        "sender_full_name": "bjorn3",
        "timestamp": 1664828406
    },
    {
        "content": "<p>Listing all exes/libs, the main exe is the closest</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&gt; image list\n[  0] 6571EF52-F94D-4FCA-8132-A4FC69AF8E87-00000BFB 0x00007ff71f4d0000 C:\\Users\\Tim\\Projects\\hubbub\\target\\debug\\hubbub.exe\n[  1] 51CC349D-A70E-6939-8B16-74F9D3A0C814-00000001 0x00007ff93e810000 C:\\Windows\\System32\\ntdll.dll\n[  2] FB221C21-913B-2EAD-8848-085FF757F870-00000001 0x00007ff93dad0000 C:\\Windows\\System32\\kernel32.dll\n...\n[ 21] 19E22631-C79A-9F11-E31E-93E8BB518332-00000001 0x00007ff93e590000 C:\\Windows\\System32\\imm32.dll\n[ 22] 7896C01C-3A5D-6AA1-98D2-71F14C724849-00000001 0x00007ff93bff0000 C:\\Windows\\System32\\bcryptprimitives.dll\n[ 23] 4D7C44AD-7BE4-4CFA-908F-77D2AB12331F-00000001 SimpleDLL.dll[0x0000000180000000] C:\\Users\\Tim\\Projects\\hubbub\\target\\debug\\SimpleDLL.dll\n[ 24] 27AC0972-E525-84FE-1A88-B1FE70D1603B-00000002 ucrtbased.dll[0x0000000180000000] C:\\Windows\\System32\\ucrtbased.dll\n[ 25] 44BC4E56-BD3A-8A6E-4D6A-62E50576C750-00000001 vcruntime140d.dll[0x0000000180000000] C:\\Windows\\System32\\vcruntime140d.dl\n</code></pre></div>\n<p>but it doesn't include the fn ptr in its range:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>&gt; image dump sections hubbub.exe\nSections for 'C:\\Users\\Tim\\Projects\\hubbub\\target\\debug\\hubbub.exe' (x86_64):\n  SectID     Type             Load Address                             Perm File Off.  File Size  Flags      Section Name\n  ---------- ---------------- ---------------------------------------  ---- ---------- ---------- ---------- ----------------------------\n  0xffffffffffffffff regular          [0x00007ff71f4d0000-0x00007ff71f4d0400)  r--  0x00000000 0x00000400 0x00000000 hubbub.exe.PECOFF header\n  0x00000001 code             [0x00007ff71f4d1000-0x00007ff721a07270)  r-x  0x00000400 0x02536400 0x60000020 hubbub.exe..text\n  0x00000002 data             [0x00007ff721a08000-0x00007ff723b718e0)  r--  0x02536800 0x02169a00 0x40000040 hubbub.exe..rdata\n  0x00000003 data             [0x00007ff723b72000-0x00007ff723c3f098)  rw-  0x046a0200 0x00066800 0xc0000040 hubbub.exe..data\n  0x00000004 data             [0x00007ff723c40000-0x00007ff723dc7254)  r--  0x04706a00 0x00187400 0x40000040 hubbub.exe..pdata\n  0x00000005 data             [0x00007ff723dc8000-0x00007ff723dc815c)  r--  0x0488de00 0x00000200 0x40000040 hubbub.exe._RDATA\n  0x00000006 regular          [0x00007ff723dc9000-0x00007ff723e350bc)  r--  0x0488e000 0x0006c200 0x42000040 hubbub.exe..reloc\n</code></pre></div>",
        "id": 302141843,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664828464
    },
    {
        "content": "<p>Weird. Just as a sanity check, you didn't drop the <code>Library</code> before running the cranelift function? Otherwise the library is probably unloaded.</p>",
        "id": 302142809,
        "sender_full_name": "bjorn3",
        "timestamp": 1664828852
    },
    {
        "content": "<p>Nope, no drop.</p>",
        "id": 302144247,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664829365
    },
    {
        "content": "<p>Wait, I had an error where I was opening the library in a second place and letting it implicitly drop there, which led to the first load being unloaded.</p>",
        "id": 302147796,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664830832
    },
    {
        "content": "<p>Thanks for walking me through this, it works now!</p>",
        "id": 302147946,
        "sender_full_name": "Tim Ngo",
        "timestamp": 1664830894
    },
    {
        "content": "<p><span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 302205582,
        "sender_full_name": "bjorn3",
        "timestamp": 1664869114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"517638\">Tim Ngo</span> has marked this topic as resolved.</p>",
        "id": 303283151,
        "sender_full_name": "Notification Bot",
        "timestamp": 1665416544
    }
]