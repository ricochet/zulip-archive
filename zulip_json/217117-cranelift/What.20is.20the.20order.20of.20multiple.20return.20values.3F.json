[
    {
        "content": "<p>In what order do I need to return multiple values in order to return this enum in registers? (I know that it is exactly 16 bytes in size when aligned)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[repr(C, u8)]</span>\n<span class=\"k\">enum</span> <span class=\"nc\">Trampoline</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"n\">Ret</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">   </span><span class=\"n\">Throw</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">TailCall</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 341176444,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1678562712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"382336\">@Adel Prokurov</span> <code>#[repr(C)]</code> types don't get passed in registers unless the C ABI says so. In your case the C ABI on at least x86_64 says to pass it on the stack so it will be passed on the stack. You could split it into two u64 you pass manually if you really need. Or if the exact abi doesn't matter you can remove the <code>#[repr]</code> in which case it will be passed in two registers provided that you are using the rust calling convention. (no guarantees, but it just so happens to be the case right now)</p>",
        "id": 341181728,
        "sender_full_name": "bjorn3",
        "timestamp": 1678566358
    },
    {
        "content": "<p>By the way do you want this for perf or abi reasons?</p>",
        "id": 341181783,
        "sender_full_name": "bjorn3",
        "timestamp": 1678566368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/What.20is.20the.20order.20of.20multiple.20return.20values.3F/near/341181783\">said</a>:</p>\n<blockquote>\n<p>By the way do you want this for perf or abi reasons?</p>\n</blockquote>\n<p>I want it for Scheme -&gt; Rust calls that are not in tail position. To do Scheme -&gt; Rust call I first invoke a thunk that checks arity of a procedure and the type of procedure and then actually invokes the code, it is not done in a tail call because my thunk signature is like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"p\">(</span><span class=\"n\">vm</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Vm</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proc</span>: <span class=\"nc\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">argc</span>: <span class=\"kt\">usize</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">tag</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><code>proc</code> actually stores the <code>fn(...) -&gt; Trampoline</code> pointer. On the return I update <code>tag</code> ref to trampoline tag and because of this tail call is not done. So it is more of a performance thing</p>",
        "id": 341220905,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1678596688
    },
    {
        "content": "<p>For returning into rust code with multiple return values I did recommend creating a trampoline which writes the values to a location specified as pointer argument. This is also what Wasmtime does for handling multiple return values.</p>",
        "id": 341287477,
        "sender_full_name": "bjorn3",
        "timestamp": 1678630900
    },
    {
        "content": "<p>Yea that is what I am doing right now but then thunk written in Rust does not perform tail call, probably I'll stick to it then and just will wait for <code>return_call</code> support in Cranelift to rewrite thunks in Cranelift IR :D</p>",
        "id": 341288670,
        "sender_full_name": "Adel Prokurov",
        "timestamp": 1678631383
    }
]