[
    {
        "content": "<p>Hi everyone, currently experimenting with combining the Cranelift JIT capabilities with emulation.<br>\nFor that, I've been trying to develop a separate Cranelift implementation for my GBA emulator which emulates the ARM7TDMI CPU and as some instructions need to read or write from and to the <code>Bus</code>, I have a <code>Mcu</code> trait declaring <code>read{8, 16, 32}</code> and <code>write{8, 16, 32}</code> methods in order to access the memory map.</p>\n<p>When emulating via interpretation, I can just plainly call those read/write functions and everything works, for the Cranelift JIT I've tried to piece together the information I need to make those functions callable as <code>FuncRefs</code>.</p>\n<p>I create a <code>JITBuilder</code> and declare the symbols:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span><span class=\"p\">::</span><span class=\"n\">with_isa</span><span class=\"p\">(</span><span class=\"n\">isa</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span><span class=\"p\">::</span><span class=\"n\">default_libcall_names</span><span class=\"p\">());</span>\n<span class=\"c1\">// Declare bus read functions.</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"read8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bus</span><span class=\"p\">::</span><span class=\"n\">read8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"read16\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bus</span><span class=\"p\">::</span><span class=\"n\">read16</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"read32\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bus</span><span class=\"p\">::</span><span class=\"n\">read32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"c1\">// Declare bus write functions.</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"write8\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bus</span><span class=\"p\">::</span><span class=\"n\">write8</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"write16\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bus</span><span class=\"p\">::</span><span class=\"n\">write16</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"write32\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Bus</span><span class=\"p\">::</span><span class=\"n\">write32</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I then create a <code>JITModule</code> from the <code>builder</code>and <em>declare</em> the functions, here with a macro, and store the resulting <code>FuncID</code>s for later use:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$module</span><span class=\"p\">:</span><span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"p\">:</span><span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">paste</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigr</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigr</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">].</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I32</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigr</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">].</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">([</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">]));</span>\n\n<span class=\"w\">            </span><span class=\"cp\">$module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"s\">\"read\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">::</span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigr</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"p\">}}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"cp\">$module</span><span class=\"p\">:</span><span class=\"nc\">expr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"p\">:</span><span class=\"nc\">expr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">paste</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigw</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigw</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">].</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">I32</span><span class=\"p\">));</span>\n<span class=\"w\">            </span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigw</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">].</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">([</span><span class=\"o\">&lt;</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">]));</span>\n\n<span class=\"w\">            </span><span class=\"cp\">$module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"fm\">concat!</span><span class=\"p\">(</span><span class=\"s\">\"write\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">Linkage</span><span class=\"p\">::</span><span class=\"n\">Local</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">sigw</span><span class=\"w\"> </span><span class=\"cp\">$bits</span><span class=\"o\">&gt;</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"p\">}}</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">w8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">w16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">w32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">link_io_funcs</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Inside the emulated instruction, where I generate the CLIR, I do the following to be able to call the function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r8_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">jit</span><span class=\"p\">.</span><span class=\"n\">io</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">clir</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">clir</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">r8_func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">aligned_addr</span><span class=\"p\">]);</span>\n</code></pre></div>\n<p>When compiling in release mode, however, I get the <code>STATUS_ACCESS_VIOLATION</code> when trying to run the compiled code and in debug mode I don't think the generated <code>call</code> really does anything as the code runs but seemingly seems to skip over the <code>call</code>. The x86 disassembly from Cranelift itself only shows <code>call User(userextname2)</code> and IDA Pro spits out <code>call $+2</code>.</p>",
        "id": 441734177,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717168955
    },
    {
        "content": "<p>I've also tried declaring all the trait methods and its implementations as <code>extern \"C\"</code> just in case.</p>",
        "id": 441769898,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178220
    },
    {
        "content": "<p>It's hard to \"debug remotely\" via Zulip thread but the <code>call $+2</code> is certainly suspicious: perhaps the relocation isn't happening for some reason? cc <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> for thoughts from the cranelift-jit side (I don't know that module well)</p>",
        "id": 441770341,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717178367
    },
    {
        "content": "<p>most helpful would be to single-step at the assembly level and see where the crash actually happens</p>",
        "id": 441770402,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717178383
    },
    {
        "content": "<p>I can post the full repo but it is messy and I've tried to at least include an MRE here ^^</p>",
        "id": 441770448,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178398
    },
    {
        "content": "<p>i.e. if the call is going somewhere unexpected, or if control reaches your host functions but the ABI mismatches for some reason</p>",
        "id": 441770527,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717178411
    },
    {
        "content": "<p>Can you give a couple of instructions of context around the crash site?</p>",
        "id": 441770552,
        "sender_full_name": "bjorn3",
        "timestamp": 1717178417
    },
    {
        "content": "<p>And preferably including the raw bytes for the instructions.</p>",
        "id": 441770597,
        "sender_full_name": "bjorn3",
        "timestamp": 1717178431
    },
    {
        "content": "<p>I can, one sec</p>",
        "id": 441770622,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178444
    },
    {
        "content": "<p>(re: full repo, nah, personally at least I think it's unlikely folks are going to dig into a whole project, figure out how to run it, and debug it for you; better to give tips on what to look at)</p>",
        "id": 441770670,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717178458
    },
    {
        "content": "<p><a href=\"https://gist.github.com/xkevio/056424c69f6158af2e9b2af7ffc76da8\">https://gist.github.com/xkevio/056424c69f6158af2e9b2af7ffc76da8</a><br>\nthis here includes the cranelift annotated x86 of a GBA rom i attempted to recompile as well as the bytes in the second attachment</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/xkevio/056424c69f6158af2e9b2af7ffc76da8\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/xkevio/056424c69f6158af2e9b2af7ffc76da8\" title=\"gang.asm\">gang.asm</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 441770872,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178518
    },
    {
        "content": "<p>ah, its <code>call $+5</code> not +2 in IDA pro</p>",
        "id": 441771129,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178584
    },
    {
        "content": "<p>For the raw bytes would you mind printing them with <code>println!(\"{:#X}\", bytes)</code> instead of <code>println!(\"{:X}\", bytes)</code>? That will allow me to copy-paste them into a rust source file without having to manually add <code>0x</code> prefixes everywhere.</p>",
        "id": 441771266,
        "sender_full_name": "bjorn3",
        "timestamp": 1717178635
    },
    {
        "content": "<blockquote>\n<p><code>call $+5</code></p>\n</blockquote>\n<p>that bit is certainly the issue then; call to the next instruction, so the call doesn't happen but a stray return address is pushed and the stack is misaligned. The key bit will be working out why the reloc didn't happen</p>",
        "id": 441771397,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717178671
    },
    {
        "content": "<p>(<code>$+5</code> is the instruction after the call, since we emit the 5-byte form; the signed 32-bit offset is relative to the end of the inst, so that target indicates the field in the inst is all zeroes, i.e., hasn't been filled in)</p>",
        "id": 441771508,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1717178715
    },
    {
        "content": "<p>Did you call <code>jit_module.finalize_definitions()</code> before calling the jitted function?</p>",
        "id": 441771573,
        "sender_full_name": "bjorn3",
        "timestamp": 1717178739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/.60STATUS_ACCESS_VIOLATION.60.20when.20trying.20to.20use.20.60call.60/near/441771266\">said</a>:</p>\n<blockquote>\n<p>For the raw bytes would you mind printing them with <code>println!(\"{:#X}\", bytes)</code> instead of <code>println!(\"{:X}\", bytes)</code>? That will allow me to copy-paste them into a rust source file without having to manually add <code>0x</code> prefixes everywhere.</p>\n</blockquote>\n<p>I added it to the gist I already sent now</p>",
        "id": 441772044,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178901
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/.60STATUS_ACCESS_VIOLATION.60.20when.20trying.20to.20use.20.60call.60/near/441771573\">said</a>:</p>\n<blockquote>\n<p>Did you call <code>jit_module.finalize_definitions()</code> before calling the jitted function?</p>\n</blockquote>\n<p>I didn't, but I did just now and still the status access violation</p>",
        "id": 441772104,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717178925
    },
    {
        "content": "<p>Not sure what the issue is then.</p>",
        "id": 441774151,
        "sender_full_name": "bjorn3",
        "timestamp": 1717179628
    },
    {
        "content": "<p>any ideal place where I should be calling <code>finalize_definitions</code>? Just before using <code>Context::compile</code>, right after <code>declare_func_in_func(...)</code>?</p>",
        "id": 441774306,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717179682
    },
    {
        "content": "<p>It should be called after all <code>define_function</code> calls and before the first call of any jitted function.</p>",
        "id": 441774493,
        "sender_full_name": "bjorn3",
        "timestamp": 1717179729
    },
    {
        "content": "<p>oh uhm so I may or may not have forgotten to use <code>define_function</code> then</p>",
        "id": 441775260,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717179975
    },
    {
        "content": "<p>however, now I get a new error that wasnt there before</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'main'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span>C:<span class=\"se\">\\U</span>sers<span class=\"se\">\\x</span>kevi<span class=\"se\">\\.</span>cargo<span class=\"se\">\\r</span>egistry<span class=\"se\">\\s</span>rc<span class=\"se\">\\i</span>ndex.crates.io-6f17d22bba15001f<span class=\"se\">\\c</span>ranelift-codegen-0.105.0<span class=\"se\">\\s</span>rc<span class=\"se\">\\r</span>emove_constant_phis.rs:268:10:\nremove_constant_phis:<span class=\"w\"> </span>entry<span class=\"w\"> </span>block<span class=\"w\"> </span>unknown\nnote:<span class=\"w\"> </span>run<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span><span class=\"w\"> </span>environment<span class=\"w\"> </span>variable<span class=\"w\"> </span>to<span class=\"w\"> </span>display<span class=\"w\"> </span>a<span class=\"w\"> </span>backtrace\n</code></pre></div>",
        "id": 441775315,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717179993
    },
    {
        "content": "<p>Do you have any empty functions?</p>",
        "id": 441775661,
        "sender_full_name": "bjorn3",
        "timestamp": 1717180091
    },
    {
        "content": "<p>the first block is always the same and shouldnt be affected by external functions, and thus should not ever be empty</p>",
        "id": 441775843,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717180146
    },
    {
        "content": "<p>Can you get a dump of the clif ir that is responsible for the crash?</p>",
        "id": 441777380,
        "sender_full_name": "bjorn3",
        "timestamp": 1717180638
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/.60STATUS_ACCESS_VIOLATION.60.20when.20trying.20to.20use.20.60call.60/near/441777380\">said</a>:</p>\n<blockquote>\n<p>Can you get a dump of the clif ir that is responsible for the crash?</p>\n</blockquote>\n<p>for the violation or the <code>entry block unknown</code>?</p>",
        "id": 441809112,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717190694
    },
    {
        "content": "<p>cause the <code>entry block unknown</code> is probably because <code>define_function</code> is trying to compile the function and put it into the context of all the other code i am translating. all the other external function examples also didnt need to use <code>define_function</code></p>",
        "id": 441809310,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717190773
    },
    {
        "content": "<p>Okay so I've refactored my code a little bit to make use of all the <code>JITModule</code> functionality. When compiling/translating an ARM guest code block, after finalizing the builder, I <em>declare</em> the current jitted block function with <code>Linkage::Export</code>, I then <em>define</em> that function, use <code>clear_context</code>, <code>finalize_definitions</code> and get the fn pointer with <code>get_finalized_function</code>. My bus read/write functions are still declared after creating the <code>JITModule</code> and symbols are defined with <code>JITBuilder::symbol</code>. Before using the functions, I do <code>declare_func_in_func</code> still.</p>\n<p>Now, however, when compiling the block that would include such a function call, I get an internal panic in <code>cranelift_jit</code> from a <code>TryFromIntError()</code> stemming from <code>pcrel</code> here.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Reloc</span><span class=\"p\">::</span><span class=\"n\">X86PCRel4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Reloc</span><span class=\"p\">::</span><span class=\"n\">X86CallPCRel4</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">get_address</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">base</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"kt\">isize</span><span class=\"p\">::</span><span class=\"n\">try_from</span><span class=\"p\">(</span><span class=\"n\">addend</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">pcrel</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">::</span><span class=\"n\">try_from</span><span class=\"p\">((</span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">write_unaligned</span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pcrel</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 442386389,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717453471
    },
    {
        "content": "<p>(<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/src/compiled_blob.rs#L58\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/src/compiled_blob.rs#L58</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/src/compiled_blob.rs#L58\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e03fe1c92291a1d3a151bbd0975df082fd0c3a6c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326364643235386539613734636238616464656363653934333961306137306265666532363639623166313933303064336534366263343565363733326364322f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/src/compiled_blob.rs#L58\" title=\"wasmtime/cranelift/jit/src/compiled_blob.rs at main · bytecodealliance/wasmtime\">wasmtime/cranelift/jit/src/compiled_blob.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 442386526,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717453532
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span></p>",
        "id": 442587722,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717522962
    },
    {
        "content": "<p>Try declaring your read and write functions as Linkage::Import.</p>",
        "id": 442599381,
        "sender_full_name": "bjorn3",
        "timestamp": 1717526399
    },
    {
        "content": "<p>That will ensure the colocated flag isn't set for them. On x86 colocated requires the target of a call to be within +/-2GB of the call site, which is pretty much guaranteed to not be the case for functions imported from the host program.</p>",
        "id": 442599627,
        "sender_full_name": "bjorn3",
        "timestamp": 1717526463
    },
    {
        "content": "<p>Then, we are back to the <code>STATUS_ACCESS_VIOLATION</code></p>",
        "id": 442599632,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717526463
    },
    {
        "content": "<p>I hate to post the repo directly for the same reasons <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> mentioned but just so we arent missing anything obvious. <a href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L81-L89\">https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L81-L89</a> for the main method finalization, <a href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/mod.rs#L51-L82\">https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/mod.rs#L51-L82</a> for the read/write functions and <a href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L257\">https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L257</a> for an example where they will be called</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L81-L89\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e2e20d474d34ab0838284f907d739b6fc07ac931/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326339333032623565613832633431396663343962306437656130376361656564363666343536666131353830313139376164303936356562353365316166622f786b6576696f2f6b6261&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L81-L89\" title=\"kba/src/arm/jit/arm7tdmi.rs at cranelift · xkevio/kba\">kba/src/arm/jit/arm7tdmi.rs at cranelift · xkevio/kba</a></div><div class=\"message_embed_description\">w.i.p gba emulator. Contribute to xkevio/kba development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/mod.rs#L51-L82\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e2e20d474d34ab0838284f907d739b6fc07ac931/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326339333032623565613832633431396663343962306437656130376361656564363666343536666131353830313139376164303936356562353365316166622f786b6576696f2f6b6261&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/mod.rs#L51-L82\" title=\"kba/src/arm/jit/mod.rs at cranelift · xkevio/kba\">kba/src/arm/jit/mod.rs at cranelift · xkevio/kba</a></div><div class=\"message_embed_description\">w.i.p gba emulator. Contribute to xkevio/kba development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L257\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e2e20d474d34ab0838284f907d739b6fc07ac931/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326339333032623565613832633431396663343962306437656130376361656564363666343536666131353830313139376164303936356562353365316166622f786b6576696f2f6b6261&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/xkevio/kba/blob/cranelift/src/arm/jit/arm7tdmi.rs#L257\" title=\"kba/src/arm/jit/arm7tdmi.rs at cranelift · xkevio/kba\">kba/src/arm/jit/arm7tdmi.rs at cranelift · xkevio/kba</a></div><div class=\"message_embed_description\">w.i.p gba emulator. Contribute to xkevio/kba development by creating an account on GitHub.</div></div></div>",
        "id": 442600567,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717526741
    },
    {
        "content": "<p>gba_bios.bin is <a href=\"https://archive.org/details/gba_bios_202206\">https://archive.org/details/gba_bios_202206</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://archive.org/details/gba_bios_202206\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4920b555f02e1f99bbcafffe401d624eed8d0b0c/68747470733a2f2f617263686976652e6f72672f73657276696365732f696d672f6762615f62696f735f323032323036&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://archive.org/details/gba_bios_202206\" title=\"gba_bios : Nintendo : Free Download, Borrow, and Streaming : Internet Archive\">gba_bios : Nintendo : Free Download, Borrow, and Streaming : Internet Archive</a></div><div class=\"message_embed_description\">Gameboy Advanced BIOS file for emulation of ROMs. </div></div></div>",
        "id": 442603123,
        "sender_full_name": "bjorn3",
        "timestamp": 1717527552
    },
    {
        "content": "<p>oh yea, forgot i still hard-include that</p>",
        "id": 442603203,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717527575
    },
    {
        "content": "<p>that one should suffice though</p>",
        "id": 442603221,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717527582
    },
    {
        "content": "<p><a href=\"https://github.com/wheremyfoodat/Panda3DS/tree/cdn/docs/gba-demos\">https://github.com/wheremyfoodat/Panda3DS/tree/cdn/docs/gba-demos</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wheremyfoodat/Panda3DS/tree/cdn/docs/gba-demos\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8601fd9079c5a51380c38515a2e2852b8e5931cf/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353435633062663133333335653738396531386232393032336464303833383637643435613138643466373566636431613032363235393036373531363864322f77686572656d79666f6f6461742f50616e6461334453&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wheremyfoodat/Panda3DS/tree/cdn/docs/gba-demos\" title=\"Panda3DS/docs/gba-demos at cdn · wheremyfoodat/Panda3DS\">Panda3DS/docs/gba-demos at cdn · wheremyfoodat/Panda3DS</a></div><div class=\"message_embed_description\">HLE 3DS emulator. Contribute to wheremyfoodat/Panda3DS development by creating an account on GitHub.</div></div></div>",
        "id": 442603413,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717527628
    },
    {
        "content": "<p>would also need <code>first.gba</code>, also named <code>gang.gba</code> to reproduce exactly</p>",
        "id": 442603461,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717527649
    },
    {
        "content": "<p>Managed to reproduce the SIGSEGV.</p>",
        "id": 442603538,
        "sender_full_name": "bjorn3",
        "timestamp": 1717527678
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"s\">\"kba\"</span><span class=\"w\"> </span><span class=\"n\">received</span><span class=\"w\"> </span><span class=\"n\">signal</span><span class=\"w\"> </span><span class=\"n\">SIGSEGV</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Segmentation</span><span class=\"w\"> </span><span class=\"n\">fault</span><span class=\"p\">.</span>\n<span class=\"n\">kba</span><span class=\"p\">::</span><span class=\"n\">mmu</span><span class=\"p\">::</span><span class=\"n\">bus</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"p\">}::</span><span class=\"n\">write8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x617fa30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mi\">33554432</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mmu</span><span class=\"o\">/</span><span class=\"n\">bus</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">227</span>\n<span class=\"mi\">227</span><span class=\"w\">                 </span><span class=\"mh\">0x02</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wram</span><span class=\"p\">[</span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"mh\">0x0004_0000</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">,</span>\n<span class=\"p\">(</span><span class=\"n\">gdb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bt</span>\n<span class=\"p\">#</span><span class=\"mi\">0</span><span class=\"w\">  </span><span class=\"n\">kba</span><span class=\"p\">::</span><span class=\"n\">mmu</span><span class=\"p\">::</span><span class=\"n\">bus</span><span class=\"p\">::{</span><span class=\"k\">impl</span><span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"p\">}::</span><span class=\"n\">write8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x617fa30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mi\">33554432</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mmu</span><span class=\"o\">/</span><span class=\"n\">bus</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">227</span>\n<span class=\"p\">#</span><span class=\"mi\">1</span><span class=\"w\">  </span><span class=\"mh\">0x00005555555eb75a</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">kba</span><span class=\"p\">::</span><span class=\"n\">mmu</span><span class=\"p\">::</span><span class=\"n\">Mcu</span><span class=\"p\">::</span><span class=\"n\">write16</span><span class=\"o\">&lt;</span><span class=\"n\">kba</span><span class=\"p\">::</span><span class=\"n\">mmu</span><span class=\"p\">::</span><span class=\"n\">bus</span><span class=\"p\">::</span><span class=\"n\">Bus</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">=</span><span class=\"mh\">0x617fa30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"o\">=</span><span class=\"mi\">33554432</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">mmu</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">67</span>\n<span class=\"p\">#</span><span class=\"mi\">2</span><span class=\"w\">  </span><span class=\"mh\">0x0000555556cc804e</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">??</span><span class=\"w\"> </span><span class=\"p\">()</span>\n</code></pre></div>\n<p><code>write8</code> has a function signature of <code>fn(&amp;mut Bus, u32, u8)</code>, but in the clif IR you are calling with with a signature of <code>fn(u32, u8)</code>, in other words, you are missing the <code>&amp;mut Bus</code> argument. The crash happens because the u32 you give is interpreted as the <code>&amp;mut Bus</code> pointer.</p>",
        "id": 442604412,
        "sender_full_name": "bjorn3",
        "timestamp": 1717527959
    },
    {
        "content": "<p>oh my god</p>",
        "id": 442604492,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717527980
    },
    {
        "content": "<p><code>&amp;mut Bus</code> would be <code>isa::pointer_type</code> in clif right?</p>",
        "id": 442604689,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717528046
    },
    {
        "content": "<p>I see two possible solutions for this:</p>\n<ol>\n<li>Make <code>Bus</code> a singleton stored in a static.</li>\n<li>Pass the <code>Bus</code> through everywhere as argument. This is what Wasmtime effectively does for the <code>VMContext</code> which contains pointers to all wasm instance specific information.</li>\n</ol>",
        "id": 442604707,
        "sender_full_name": "bjorn3",
        "timestamp": 1717528051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646077\">Kevin K.</span> <a href=\"#narrow/stream/217117-cranelift/topic/.60STATUS_ACCESS_VIOLATION.60.20when.20trying.20to.20use.20.60call.60/near/442604689\">said</a>:</p>\n<blockquote>\n<p><code>&amp;mut Bus</code> would be <code>isa::pointer_type</code> in clif right?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 442604751,
        "sender_full_name": "bjorn3",
        "timestamp": 1717528063
    },
    {
        "content": "<p>it compiles now and works omg, thank you so much that was a much simpler error than i thought. cannot believe i managed to miss that</p>",
        "id": 442608939,
        "sender_full_name": "Kevin K.",
        "timestamp": 1717529281
    },
    {
        "content": "<p>Great! Happy to help!</p>",
        "id": 442609044,
        "sender_full_name": "bjorn3",
        "timestamp": 1717529308
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646077\">Kevin K.</span> has marked this topic as resolved.</p>",
        "id": 442609246,
        "sender_full_name": "Notification Bot",
        "timestamp": 1717529380
    }
]