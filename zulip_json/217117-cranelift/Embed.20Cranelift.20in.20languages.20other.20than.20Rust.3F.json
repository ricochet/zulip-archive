[
    {
        "content": "<p>Hi everyone <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> . Usually, compilers are rewritten in their new programming languages after the first version. Will I be able to embed Cranelift in such new language's rewritten compiler? In general, is it possible to embed Cranelift in a language other than Rust?</p>",
        "id": 421107739,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707764499
    },
    {
        "content": "<p>Right now there is no C-compatible API but I suspect that'd be the easiest route: wrap the <code>InstructionBuilder</code> and related interfaces in an FFI shim and then call into that. (This question is I guess a bit more general: will your language have an FFI to Rust? If so then yes it can call Cranelift; if it instead has an FFI to language X, one will need a language-X wrapper around Cranelift, and C is a common choice for that)</p>",
        "id": 421118420,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707768402
    },
    {
        "content": "<p>THx <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> for passing by. Actually I did not know that I can FFI to Rust directly because I thought that Rust ABI is not stable. Is it documented somewhere besides its source code?</p>",
        "id": 421237440,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707828647
    },
    {
        "content": "<p>No, it’s not; I can imagine other ways to do this if you’re developing your own language though. For example, you could generate shim code in Rust from “extern FFI” declarations in your language and build and link it against Cranelift.</p>",
        "id": 421271971,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707839442
    },
    {
        "content": "<p>Are you saying that I can define extern \"mylang\" in Rust to expose Crainlift APIs to my language? Isn't this extending the Rust compiler?</p>",
        "id": 421281064,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707841775
    },
    {
        "content": "<p>No, the other way around; \"extern FFI declarations in your language\" means something written in your language to describe the Rust interface</p>",
        "id": 421283194,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707842471
    },
    {
        "content": "<p>Interesting. I still need to rely on the unstable Rust ABI though, right?</p>",
        "id": 421285041,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707843077
    },
    {
        "content": "<p>No, in the proposed idea, you would generate Rust code that calls Cranelift directly, and exports a C-ABI interface that you can then call directly from your language's generated code</p>",
        "id": 421285188,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707843120
    },
    {
        "content": "<p>I guess it's basically an automated approach to the \"add a C API to Cranelift\" option</p>",
        "id": 421285294,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707843140
    },
    {
        "content": "<p>with the downside that it won't benefit other Cranelift users, but the upside that it gives you a general way to bind to Rust interfaces from your language -- both seem valid to me</p>",
        "id": 421285347,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707843161
    },
    {
        "content": "<p>Got you! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 421285735,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707843286
    },
    {
        "content": "<p>On a different approach. If I go with using Wasmtime after compiling my language to WASM.</p>\n<p>Compared to using Cranelift IR, would I lose Cranelift optimizations that benefit from meta data passed down?</p>\n<p>I guess another problem is that I cannot develop a standard runtime library that interfaces with the OS in my language if it targets WASM as WASI is still at early stage.</p>",
        "id": 421287262,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707843776
    },
    {
        "content": "<p>targeting Wasm is actually a great option, IMHO</p>",
        "id": 421287584,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707843879
    },
    {
        "content": "<p>if you do that, it would be worthwhile to look into the component model and wit-bindgen as well to give you a first-class way of doing FFI</p>",
        "id": 421287737,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707843941
    },
    {
        "content": "<p>My understanding of WIT and CM is that they are for interoperability between WASM modules but not outside WASM (e.g. system ABIs).</p>\n<p>How can I write a standard runtime library in my new language that actually interfaces with the host OS and compiles to WASM at the same time?</p>",
        "id": 421302687,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707849407
    },
    {
        "content": "<p>that's their core purpose, yes, but in the wasm-component universe, additional WASI APIs are being defined: for example, there is now networking (http and I think raw sockets), and there is work on things like async IO, key-value stores, graphics APIs, and a bunch of other stuff</p>",
        "id": 421303054,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707849533
    },
    {
        "content": "<p>I will need to extend WASI APIs in some areas and I want to write these extensions in the same new language.</p>",
        "id": 421303597,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707849705
    },
    {
        "content": "<p>OK, perhaps Wasm with WASI isn't the best option then, if you think you'll need to extend APIs to make use of OS-specific behavior. In any case, lots of options here -- best of luck!</p>",
        "id": 421304257,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707849940
    },
    {
        "content": "<p>Thank you for your time.<br>\nOne more question if you allow me plz.</p>\n<p>I guess what I want is to be able to link to external libraries. If I compile my language to WASM then AOT to binaries, will I be able to link against them (using my language compiler somehow) as host provided functions to my compiled WASM?</p>",
        "id": 421305680,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707850418
    },
    {
        "content": "<p>that depends on the Wasm VM; it's not a builtin feature of Wasm. In Wasmtime, when you AOT-compile, you get an opaque artifact that still requires Wasmtime to load and run; the program that embeds Wasmtime (as a library) can provide arbitrary imports for the Wasm module implemented in native code. In other Wasm VMs, there may be other functionality for this (but it wouldn't be \"standard\").</p>",
        "id": 421306201,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707850599
    },
    {
        "content": "<p>Oh! I thought AOT meant a final self-contained executable in the target ISA with no dependency on Wasmtime. I am wondering what I the role of Wasmtime in this case.</p>",
        "id": 421307338,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707850959
    },
    {
        "content": "<p>The role of Wasmtime is still to provide the runtime support for the Wasm: for example, allocating the Wasm heaps, managing the Wasm tables, and eventually providing other Wasm features (GC, ...) as required. The AOT-compilation means that the Wasm bytecode is compiled to machine code ahead of time, but that machine code is still dependent on Wasmtime's runtime.</p>",
        "id": 421307569,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707851043
    },
    {
        "content": "<p>Aha! I guess the AOT compiled code is still packaged as wasm then and needs a runtime for loading and linking which is the program embedding the Wasmtime. It would be nice if all can be packaged as standalone executable.</p>",
        "id": 421308385,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707851334
    },
    {
        "content": "<p>Thank you once again for your generosity sir.</p>",
        "id": 421309666,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707851827
    },
    {
        "content": "<p>Not quite packaged as Wasm; a <code>.cwasm</code> file (the output of <code>wasmtime compile</code>) is considered to be an opaque blob and Wasmtime doesn't make any promises about format. I think we have an issue on file to do a truly standalone compilation; it would involve basically linking the runtime part of Wasmtime against the AOT code, and a wrapper to start up the module</p>",
        "id": 421310043,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707851974
    },
    {
        "content": "<p>if someone wants to build that out, it'd be neat! just not a priority at the moment</p>",
        "id": 421310076,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707851991
    },
    {
        "content": "<p>Actually it might be also nice if AOT compiles on the first run then cache the result</p>",
        "id": 421310364,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707852114
    },
    {
        "content": "<p>oh, <code>wasmtime run</code> does that already!</p>",
        "id": 421310681,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707852239
    },
    {
        "content": "<p>(<code>wasmtime run --disable-cache</code> to see the speed difference)</p>",
        "id": 421310740,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707852251
    },
    {
        "content": "<p>(or I think there's a new cmdline syntax for that now, I forget what it is)</p>",
        "id": 421310799,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1707852277
    },
    {
        "content": "<p>Nice! <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 421310802,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707852279
    },
    {
        "content": "<p>I will need to gather my thoughts after this fruitful discussion to decide on an approach to take with leveraging Wasmtime/Cranelift...</p>",
        "id": 421310952,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1707852352
    }
]