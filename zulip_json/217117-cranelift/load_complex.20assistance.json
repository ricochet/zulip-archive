[
    {
        "content": "<p>I'm trying to test true/false in a bit vector. It seems to be a good use for <code>load_complex</code>, but I'm getting verification errors. Can anyone help me understand what's going on? Thanks in advance.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">load_bit</span><span class=\"p\">(</span><span class=\"n\">builder</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">base</span>: <span class=\"nc\">Value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"nc\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Value</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">byte_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">udiv_imm</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bit_idx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">band_imm</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iconst</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">ishl</span><span class=\"p\">(</span><span class=\"n\">one</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bit_idx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">baddr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">iadd</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">byte_idx</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">MemFlags</span>::<span class=\"n\">trusted</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">baddr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// why doesn't this work? as opposed to the two lines above</span>\n<span class=\"w\">    </span><span class=\"c1\">// let byte = builder.ins().load_complex(types::I8, MemFlags::trusted(), &amp;[base, byte_idx], 0);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">band</span><span class=\"p\">(</span><span class=\"n\">bit</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">byte</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">ins</span><span class=\"p\">().</span><span class=\"n\">icmp_imm</span><span class=\"p\">(</span><span class=\"n\">IntCC</span>::<span class=\"n\">NotEqual</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>This is the clif being generated:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">v27</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">udiv_imm</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v28</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band_imm</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v25</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v29</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v30</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ishl</span><span class=\"w\"> </span><span class=\"n\">v29</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v28</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v31</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load_complex</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">notrap</span><span class=\"w\"> </span><span class=\"n\">aligned</span><span class=\"w\"> </span><span class=\"n\">v19</span><span class=\"o\">+</span><span class=\"n\">v27</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v32</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v30</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v31</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v33</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp_imm</span><span class=\"w\"> </span><span class=\"n\">ne</span><span class=\"w\"> </span><span class=\"n\">v32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>\n\n<p>And the Error I see is <code>v31 is a real GPR value defined by a ghost instruction</code>.</p>",
        "id": 214411794,
        "sender_full_name": "Christopher Vittal",
        "timestamp": 1603520108
    },
    {
        "content": "<p>Hm, <code>load_complex</code> does not seem to have an encoding for <code>i8</code>, just <code>i32</code> and <code>i64</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7b7b1f49973ed9af024789680f9d348013bb8b8c/cranelift/codegen/meta/src/isa/x86/encodings.rs#L838-L842\">https://github.com/bytecodealliance/wasmtime/blob/7b7b1f49973ed9af024789680f9d348013bb8b8c/cranelift/codegen/meta/src/isa/x86/encodings.rs#L838-L842</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/7b7b1f49973ed9af024789680f9d348013bb8b8c/cranelift/codegen/meta/src/isa/x86/encodings.rs#L838-L842\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7b7b1f49973ed9af024789680f9d348013bb8b8c/cranelift/codegen/meta/src/isa/x86/encodings.rs#L838-L842\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 214464675,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1603595177
    },
    {
        "content": "<p>Thanks for your help, It looks like what I really need is <code>uload8_complex</code>.</p>",
        "id": 214492792,
        "sender_full_name": "Christopher Vittal",
        "timestamp": 1603636806
    },
    {
        "content": "<p><code>uload8_complex</code> was what I needed. The exact size of the SSA values once they're in registers is just <em>not important</em>.</p>",
        "id": 214527769,
        "sender_full_name": "Christopher Vittal",
        "timestamp": 1603681097
    }
]