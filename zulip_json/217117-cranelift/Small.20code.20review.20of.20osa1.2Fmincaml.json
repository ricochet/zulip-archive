[
    {
        "content": "<p>@osa1 I just took a look at the codegen part of your <code>mincaml</code>. Here are a few things I noticed:</p>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L28\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L28</a></p>\n<blockquote>\n<p>// How does this know I'm building for x86_64 Linux?<br>\n<code>cranelift_native</code> detects the host architecture and returns it.</p>\n</blockquote>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L30\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L30</a></p>\n<blockquote>\n<p>[1, 2, 3, 4, 5, 6, 7, 8], // TODO: what is this?<br>\nThe \"name\" of the object file. It is mainly used in linker errors.</p>\n</blockquote>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L161\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L161</a></p>\n<blockquote>\n<p>call_conv: CallConv::SystemV,<br>\nYou may want to use <code>module.target_config().default_call_conv</code> instead. Also you may want to use <code>module.target_config().pointer_type()</code> above instead of <code>I64</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L236-L237\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L236-L237</a></p>\n<blockquote>\n<p>// TODO: We already created a signature for this function, in the forward declaration in<br>\n// <code>init_module_env</code>. Is there a way to reuse it here?<br>\nNo, the signature that you assign to a <code>Function</code> gets modified as part of the compilation process. For example the register location gets assigned or types bigger than a register get split into multiple arguments</p>\n</blockquote>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L265\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L265</a></p>\n<blockquote>\n<p>let entry_block = *label_to_block.get(&amp;blocks[0].label).unwrap();<br>\nYou can use <code>let entry_block = label_to_block[&amp;blocks[0].label];</code>.</p>\n</blockquote>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L349\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L349</a></p>\n<blockquote>\n<p>// Not sure about the arguments here...<br>\nThis should be <code>&amp;[]</code> like you have here unless you are doing something special.</p>\n</blockquote>\n<p><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L356\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L356</a></p>\n<blockquote>\n<p>let cl_block = *label_to_block.get(label).unwrap();<br>\nSame as with <code>entry_block</code>.</p>\n</blockquote>",
        "id": 198577084,
        "sender_full_name": "bjorn3",
        "timestamp": 1590316276
    },
    {
        "content": "<p>Oh wow, I got a review from a cranelift dev!! Thank you so much! I'll update the code.</p>",
        "id": 198577504,
        "sender_full_name": "osa1",
        "timestamp": 1590317128
    },
    {
        "content": "<p>Btw, I'm currently writing my own code generator, and the data structures in entity are so useful, I'm basically copying all of them to my code base. I wish they were in a reusable package. They don't mention cranelift types anyway so this would be easy, I think</p>",
        "id": 198577548,
        "sender_full_name": "osa1",
        "timestamp": 1590317175
    },
    {
        "content": "<p>Oh wait, it's already a package with no deps!!!</p>",
        "id": 198577575,
        "sender_full_name": "osa1",
        "timestamp": 1590317255
    },
    {
        "content": "<p>Hmm.. it's a bit unforunate that I need Eq for ReservedValue. I wonder if it would be better to have a <code>is_reserved_value()</code> method in the trait instead. I don't need full Eq to check for reserved values.</p>",
        "id": 198578264,
        "sender_full_name": "osa1",
        "timestamp": 1590318476
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Small.20code.20review.20of.20osa1.2Fmincaml/near/198577504\">said</a>:</p>\n<blockquote>\n<p>Oh wow, I got a review from a cranelift dev!! Thank you so much! I'll update the code.</p>\n</blockquote>\n<p>I do contribute to Cranelift, but I am not a member of the bytecodealliance. I am mostly a consumer of Cranelift myself. (<a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">https://github.com/bjorn3/rustc_codegen_cranelift</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/17426603?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" title=\"bjorn3/rustc_codegen_cranelift\">bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 198578307,
        "sender_full_name": "bjorn3",
        "timestamp": 1590318522
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Small.20code.20review.20of.20osa1.2Fmincaml/near/198578264\">said</a>:</p>\n<blockquote>\n<p>Hmm.. it's a bit unforunate that I need Eq for ReservedValue. I wonder if it would be better to have a <code>is_reserved_value()</code> method in the trait instead. I don't need full Eq to check for reserved values.</p>\n</blockquote>\n<p>I think that would also work.</p>",
        "id": 198578320,
        "sender_full_name": "bjorn3",
        "timestamp": 1590318600
    },
    {
        "content": "<p>Also, <code>SecondaryMap&lt;..., PackedOption&lt;X&gt;&gt;</code> shouldn't require <code>X: Clone</code>, I think.</p>",
        "id": 198578652,
        "sender_full_name": "osa1",
        "timestamp": 1590319164
    },
    {
        "content": "<p>In that case you could would be able to do <code>SecondaryMap::with_default(PackedOption::from(Some(NoClone)))</code>, which would give problems.</p>",
        "id": 198578751,
        "sender_full_name": "bjorn3",
        "timestamp": 1590319328
    },
    {
        "content": "<p>What's the problem with it?</p>",
        "id": 198578780,
        "sender_full_name": "osa1",
        "timestamp": 1590319397
    },
    {
        "content": "<p>In that case <code>SecundaryMap</code> would have to clone the <code>PackedOption&lt;NoClone&gt;</code> when it needs a new copy of the default element. However that type can't be cloned, as it contains a <code>NoClone</code>, which can't be cloned.</p>",
        "id": 198578843,
        "sender_full_name": "bjorn3",
        "timestamp": 1590319538
    },
    {
        "content": "<p>Right, I mean, it should <em>ideally</em> designed in a way that doesn't require <code>X: Clone</code> for the type above, as we don't need to full general <code>Clone</code> for <code>X</code>, we only need to clone the default value for <code>X</code>. Perhaps that's not possible for some reason though.</p>",
        "id": 198578962,
        "sender_full_name": "osa1",
        "timestamp": 1590319769
    },
    {
        "content": "<p>Hmm, is it possible to provide a specialized implementation, like <code>impl SecondaryMap&lt;K, PackedOption&lt;V&gt;&gt;</code> ? That wouldn't require <code>V: Clone</code></p>",
        "id": 198579024,
        "sender_full_name": "osa1",
        "timestamp": 1590319865
    },
    {
        "content": "<p>Because of the existence of <code>SecundaryMap::with_default</code>, any value can be the default value.</p>",
        "id": 198579025,
        "sender_full_name": "bjorn3",
        "timestamp": 1590319870
    },
    {
        "content": "<p>Hmm, right</p>",
        "id": 198579029,
        "sender_full_name": "osa1",
        "timestamp": 1590319884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Small.20code.20review.20of.20osa1.2Fmincaml/near/198579024\">said</a>:</p>\n<blockquote>\n<p>Hmm, is it possible to provide a specialized implementation, like <code>impl SecondaryMap&lt;K, PackedOption&lt;V&gt;&gt;</code> ? That wouldn't require <code>V: Clone</code></p>\n</blockquote>\n<p>That will probably require a differently names set of methods to prevent conflicts. Or needs to use <code>#![feature(specialization)]</code>, which is unsound and nightly only. (not sure if <code>#![feature(min_specialization)]</code> is enough)</p>",
        "id": 198579086,
        "sender_full_name": "bjorn3",
        "timestamp": 1590319970
    },
    {
        "content": "<p>This type checks:</p>\n<div class=\"codehilite\"><pre><span></span><code>impl&lt;K, V&gt; SecondaryMap&lt;K, PackedOption&lt;V&gt;&gt;\nwhere\n    K: EntityRef,\n    V: ReservedValue,\n{\n    /// blah blah blah\n    pub fn new_reserved() -&gt; Self {\n        Self {\n            elems: Vec::new(),\n            default: Default::default(),\n            unused: PhantomData,\n        }\n    }\n\n    /// blah blah blah\n    pub fn resize_reserved(&amp;mut self, n: usize)\n    where\n    {\n        self.elems.resize_with(n, || Default::default());\n    }\n}\n</code></pre></div>",
        "id": 198580026,
        "sender_full_name": "osa1",
        "timestamp": 1590321575
    },
    {
        "content": "<p>The <code>default</code> field is not used</p>",
        "id": 198580035,
        "sender_full_name": "osa1",
        "timestamp": 1590321599
    },
    {
        "content": "<p>How are you going to implement <code>IndexMut</code> for <code>SecundaryMap&lt;K, PackedOption&lt;V&gt;&gt;</code>? It overlaps with the implementation for <code>SecundaryMap&lt;K, V&gt;</code>.</p>",
        "id": 198580612,
        "sender_full_name": "bjorn3",
        "timestamp": 1590322543
    },
    {
        "content": "<p>I don't need to implement it, the implemented version will work, right?</p>",
        "id": 198580666,
        "sender_full_name": "osa1",
        "timestamp": 1590322605
    },
    {
        "content": "<p>Oh.. you're right.</p>",
        "id": 198580684,
        "sender_full_name": "osa1",
        "timestamp": 1590322660
    },
    {
        "content": "<p>Yeah those need to be overridden as well.. sigh.</p>",
        "id": 198580687,
        "sender_full_name": "osa1",
        "timestamp": 1590322679
    },
    {
        "content": "<p>I guess this is not a problem in cranelift as seconday maps also have a primary map for the actual values (double indirection, e.g. <code>SecondaryMap&lt;Block, Option&lt;BlockIndex&gt;&gt;</code>) or the actual values are simple types.</p>",
        "id": 198581128,
        "sender_full_name": "osa1",
        "timestamp": 1590323346
    },
    {
        "content": "<p>Most of the time Cranelift uses <code>SecondaryMap</code> either for simple types or vectors of simple types.</p>",
        "id": 198581251,
        "sender_full_name": "bjorn3",
        "timestamp": 1590323525
    },
    {
        "content": "<p>What is the specific case you want to use <code>SecondaryMap</code> for?</p>",
        "id": 198581269,
        "sender_full_name": "bjorn3",
        "timestamp": 1590323579
    },
    {
        "content": "<p>I want to map block indices (an entity) to actual block contents (complex type that has a vector of instructions), but some of the blocks may not be used after allocation so I need a SecondaryMap for that.</p>",
        "id": 198581370,
        "sender_full_name": "osa1",
        "timestamp": 1590323691
    },
    {
        "content": "<p>If a lot of blocks are unused you can use <code>SparseMap</code>. Otherwise see if there is some sensible default value for the block content type and use a <code>PrimaryMap</code>. Or use <code>Option&lt;Block&gt;</code> as value. The <code>Block</code> type contains a <code>Vec</code>, which has a niche (invalid value, in this case a null pointer), so layout optimizations should use that niche as <code>None</code> value.</p>",
        "id": 198581595,
        "sender_full_name": "bjorn3",
        "timestamp": 1590324083
    },
    {
        "content": "<p>Yeah <code>PrimaryMap&lt;K, Option&lt;V&gt;&gt;</code> works, though it's not as nice ergonomically</p>",
        "id": 198582460,
        "sender_full_name": "osa1",
        "timestamp": 1590325362
    }
]