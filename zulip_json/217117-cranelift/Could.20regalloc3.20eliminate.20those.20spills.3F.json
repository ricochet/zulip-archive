[
    {
        "content": "<p>Hello. Could <a href=\"https://github.com/Amanieu/regalloc3\">regalloc3</a> solve <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9590\">this issue</a> with rematerialisation? I have <a href=\"https://github.com/primoly/regalloc2/tree/regalloc3\">this branch</a> using regalloc3 as the backend for regalloc2 (just a more up to date variant of <a href=\"https://github.com/Amanieu/regalloc2/tree/regalloc3\">this</a>) and then use it in Wasmtime/Cranelift. But since regalloc2 does not support rematerialisation, the <code>regalloc3.rs</code> implementation for <a href=\"https://github.com/primoly/regalloc2/blob/32e0d496d13ef2cb56f47251218d4a05ee2fa8c1/src/regalloc3.rs#L464\"><code>can_rematerialize</code></a> always returns <code>None</code>. If Cranelift where to use regalloc3 directly and implemented <code>can_rematerialize</code> properly, would that solve, for instance, the issue of unneeded spills <a href=\"https://github.com/bytecodealliance/wasmtime/issues/9590\">here</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e6106b8d1d9e30eb1a43e8cf0d146e2e2d3359ce/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656533313461306661356439656135383630366262616661623866373566383137666232663265653135613462326633663265386337356432313730656334332f416d616e6965752f726567616c6c6f6333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3\" title=\"GitHub - Amanieu/regalloc3: New register allocator designed as a successor to regalloc2\">GitHub - Amanieu/regalloc3: New register allocator designed as a successor to regalloc2</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9590\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/693ec9f88370214272acd1570d2f23353bd8a368/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646534336465323636373631353662363161316664393330313632303064353538653930633166613231333632343733363761373364666261313335346364612f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39353930&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9590\" title=\"Changing a stored value from 1 to 0 makes suspicion performance decreasing · Issue #9590 · bytecodealliance/wasmtime\">Changing a stored value from 1 to 0 makes suspicion performance decreasing · Issue #9590 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Test Cases case.zip Steps to Reproduce Hi, I run the attached two cases(good.wasm &amp; bad.wasm) in Wasmtime and WasmEdge(AOT), and collect their execution time respectively (measured by time tool). #...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/primoly/regalloc2/tree/regalloc3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e222e9d09a90afc9178ceddc505e9d842005d060/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616462386563376239663032393264653935366163326135626163383134616638643665316231636661616366396531386335303361666331383138393433332f7072696d6f6c792f726567616c6c6f6332&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/primoly/regalloc2/tree/regalloc3\" title=\"GitHub - primoly/regalloc2 at regalloc3\">GitHub - primoly/regalloc2 at regalloc3</a></div><div class=\"message_embed_description\">A new register allocator. Contribute to primoly/regalloc2 development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc2/tree/regalloc3\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4ff20e3e28539b12f16d70a58d837d8fe21b9029/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333738353263613561373965336162303463626664336130363366353165333737393131663665326436633265666635653764323536343839633833376137312f416d616e6965752f726567616c6c6f6332&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc2/tree/regalloc3\" title=\"GitHub - Amanieu/regalloc2 at regalloc3\">GitHub - Amanieu/regalloc2 at regalloc3</a></div><div class=\"message_embed_description\">A new register allocator. Contribute to Amanieu/regalloc2 development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/primoly/regalloc2/blob/32e0d496d13ef2cb56f47251218d4a05ee2fa8c1/src/regalloc3.rs#L464\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e222e9d09a90afc9178ceddc505e9d842005d060/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616462386563376239663032393264653935366163326135626163383134616638643665316231636661616366396531386335303361666331383138393433332f7072696d6f6c792f726567616c6c6f6332&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/primoly/regalloc2/blob/32e0d496d13ef2cb56f47251218d4a05ee2fa8c1/src/regalloc3.rs#L464\" title=\"regalloc2/src/regalloc3.rs at 32e0d496d13ef2cb56f47251218d4a05ee2fa8c1 · primoly/regalloc2\">regalloc2/src/regalloc3.rs at 32e0d496d13ef2cb56f47251218d4a05ee2fa8c1 · primoly/regalloc2</a></div><div class=\"message_embed_description\">A new register allocator. Contribute to primoly/regalloc2 development by creating an account on GitHub.</div></div></div>",
        "id": 486586931,
        "sender_full_name": "primoly",
        "timestamp": 1733515739
    },
    {
        "content": "<p>Yes, regalloc3 will <a href=\"https://github.com/Amanieu/regalloc3/blob/main/src/internal/allocator/spill.rs#L103\">never</a> spill a rematerializable value. However it would still requires that Cranelift provide this information to the register allocator.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3/blob/main/src/internal/allocator/spill.rs#L103\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e6106b8d1d9e30eb1a43e8cf0d146e2e2d3359ce/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656533313461306661356439656135383630366262616661623866373566383137666232663265653135613462326633663265386337356432313730656334332f416d616e6965752f726567616c6c6f6333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3/blob/main/src/internal/allocator/spill.rs#L103\" title=\"regalloc3/src/internal/allocator/spill.rs at main · Amanieu/regalloc3\">regalloc3/src/internal/allocator/spill.rs at main · Amanieu/regalloc3</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div>",
        "id": 486590486,
        "sender_full_name": "Amanieu",
        "timestamp": 1733517288
    },
    {
        "content": "<p>For anyone interested in this -- the path toward experimenting directly with RA3 by porting Cranelift onto its APIs would be:</p>\n<ul>\n<li>Lift all the backend types that use <code>regalloc2</code>-provided registers and operands onto RA3 equivalents.</li>\n<li>Address handling of blockparams: RA3 forbids blockparams on unconditional branches, so this would require a fairly nontrivial refactor in lowering (it implies necessary redundant-blockparam optimization, which we don't do at <code>-O0</code>). Probably we would want/need to lift that restriction in RA3 instead.</li>\n<li>Implement the trait giving RA3 a view of VCode for a function.</li>\n</ul>\n<p>My PR to move to RA2 (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/3989\">https://github.com/bytecodealliance/wasmtime/pull/3989</a>) is an upper bound for effort: it shows what it takes to lift the whole compiler onto a new set of types, but also involved refactors for RA2's SSA-based VCode. Nevertheless expect the diff to be nontrivial.</p>\n<p>If all that work is done, then there would be some process questions around maintenance and vetting and code-review -- RA2 was fully code-reviewed and vetted per BA standards, and we would need to do the same for RA3 -- and we'd want more of the Cranelift team to be familiar with RA3 as well since the regalloc is a critical piece of the backend. But all those things would come after a \"direct port\" prototype showing benefits.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3989\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0071759054314df4102a16408cef7d5b25271d4e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306563636331613334343563613337303235646534633835393062303438626464353761626535653930323333616661363461373664356330376635383930662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f33393839&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3989\" title=\"Switch Cranelift over to regalloc2. by cfallin · Pull Request #3989 · bytecodealliance/wasmtime\">Switch Cranelift over to regalloc2. by cfallin · Pull Request #3989 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a draft PR for now, meant to serve as a discussion-starter. I&#39;ll work on splitting this into logically separate commits next week, but wanted to get the initial thing up first.\nAll test...</div></div></div>",
        "id": 486593041,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1733518517
    }
]