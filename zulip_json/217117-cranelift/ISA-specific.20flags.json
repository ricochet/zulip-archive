[
    {
        "content": "<p>Does anyone by chance remember how to get an instance of <code>cranelift_codegen::isa::x86::settings::Flags</code> and not <code>cranelift_codegen::settings::Flags</code>? I want to use the ISA-specific one that's already configured by CLIF flags, e.g., without building a new instance of it.</p>",
        "id": 198268166,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590015748
    },
    {
        "content": "<p>It seems to be stored in <code>cranelift_codegen::isa::x86::Isa.isa_flags</code>:</p>\n<p><a href=\"https://docs.rs/cranelift-codegen/0.63.0/src/cranelift_codegen/isa/x86/mod.rs.html#33\">https://docs.rs/cranelift-codegen/0.63.0/src/cranelift_codegen/isa/x86/mod.rs.html#33</a></p>",
        "id": 198315694,
        "sender_full_name": "bjorn3",
        "timestamp": 1590065045
    },
    {
        "content": "<p>Good find; I guess I'll have to do some casting or something...</p>",
        "id": 198336859,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590075916
    },
    {
        "content": "<p>I guess it's going to be unsafe but what is the \"right\" way to do this? I tried <code>let x86_isa = &amp;*(isa as *const isa::x86::Isa)</code> but that doesn't work because <code>isa</code> is <code>&amp;dyn TargetIsa</code></p>",
        "id": 198352310,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590082886
    },
    {
        "content": "<p>I get: casting <code>&amp;dyn isa::TargetIsa</code> as <code>*const isa::x86::Isa</code> is invalid</p>",
        "id": 198352429,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590082937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> in general that's not a safe thing to do in Rust</p>",
        "id": 198358971,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590086236
    },
    {
        "content": "<p>you can get away with it though by doing <code>&amp;*(ptr as *const dyn A as *const B)</code></p>",
        "id": 198359007,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590086252
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I figured</p>",
        "id": 198359021,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590086258
    },
    {
        "content": "<p>the other \"trick\" is to add <code>fn as_any(&amp;self) -&gt; &amp;dyn Any;</code> to the trait</p>",
        "id": 198359036,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590086267
    },
    {
        "content": "<p>What is the better way?</p>",
        "id": 198359039,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590086268
    },
    {
        "content": "<p>and then you'd call <code>ptr.as_any().downcast_ref::&lt;B&gt;().unwrap()</code></p>",
        "id": 198359049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590086276
    },
    {
        "content": "<p>which would be a safe assertion of the type</p>",
        "id": 198359055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590086280
    },
    {
        "content": "<p>Yeah, I was looking into <code>Any::downcast_ref</code>... is this a preferable way to do things?</p>",
        "id": 198359191,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590086335
    },
    {
        "content": "<p>yeah for dynamic type downcasting it's through <code>Any</code></p>",
        "id": 198359254,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590086375
    },
    {
        "content": "<p>Ok, I'll do that then; thanks!</p>",
        "id": 198359270,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590086385
    }
]