[
    {
        "content": "<p>Hello!<br>\nSome time ago I discovered Cranelift, it's a pretty cool project! Yesterday I read some of the code (fixed a good-first-issue at first, maybe I can push it in a few days) and seems you lack some kind of after-transformation verification/equivalence checker (like LLVM does) of your rules and also have seen it's one of your roadmap entries. Thought about it for a bit and came up with a simple solution (that probably was already mentioned..), symbolic representations (which are used everywhere) with a solver with your rules (for the equivalence checker) or just running tests on those symbolic inputs.<br>\nWhat do you think? This doesn't sound too bad to implement (... probably?). Was this already mentioned/worked on? Is this too simple and doesn't answer some needs?<br>\nNew to the community, hello!</p>",
        "id": 340369099,
        "sender_full_name": "ghostway",
        "timestamp": 1678284269
    },
    {
        "content": "<p>This is being worked on: <a href=\"https://github.com/avanhatt/wasmtime\">https://github.com/avanhatt/wasmtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avanhatt/wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a6ace7f7b90212f944acdb343631ab97d2475f63\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373031393162376266623166303835633661336334666239656135653435303530636234663465353063643737646332393663653731396338353738363161662f6176616e686174742f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avanhatt/wasmtime\" title=\"GitHub - avanhatt/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift\">GitHub - avanhatt/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - GitHub - avanhatt/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift</div></div></div>",
        "id": 340395628,
        "sender_full_name": "bjorn3",
        "timestamp": 1678289860
    },
    {
        "content": "<p>This uses the Z3 SMT solver I believe.</p>",
        "id": 340395751,
        "sender_full_name": "bjorn3",
        "timestamp": 1678289889
    },
    {
        "content": "<p>Interesting. Doesn't seem like I can contribute to that -- seems like it is very disorganized (with a lot of weird Z3 notation I guess) unless you have some document overviewing it? It seems very close to what I imagined, anyway</p>",
        "id": 340399739,
        "sender_full_name": "ghostway",
        "timestamp": 1678290787
    },
    {
        "content": "<p>That is very much work-in-progress, but has already discovered previously-unknown bugs. So yes, we agree with you: checking equivalence of ISLE rules is a good idea!</p>\n<p>I'd certainly be interested to see your approach to the idea if this is something you want to work on. The level of complexity in that team's implementation (and I think they'd agree that it is quite complex) is, I think, necessary to handle the full suite of ISLE rules. But you might find there's a subset of rules where you can do something simpler or faster, and that could be valuable. You could also explore something like property-based testing or fuzzing, which might be a nice complement to the complete search that an SMT solver like Z3 does. Or you might just have fun experimenting, which I think is worth-while too. In any case I'd encourage you to explore your idea if you want to!</p>",
        "id": 340408450,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678292795
    },
    {
        "content": "<p>What is the scope of their implementation and why is it complex (the former might answer the latter)?</p>",
        "id": 340412179,
        "sender_full_name": "ghostway",
        "timestamp": 1678293668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span> it's complex because it's quite a hard problem! I think you may be missing some context here -- this is an ongoing research collaboration and most of the context is in weekly meetings that we have with <span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span> and others. I don't think the repo is intended for public consumption yet necessarily, which is why it doesn't have polished documentation. The intent of the collaboration is to eventually publish something, after which time it'll be upstreamed and much better documented</p>",
        "id": 340416247,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1678294678
    },
    {
        "content": "<p>I see I'm missing a lot of context then! Depending on whether this is something the future publishers would like to share, I'd be happy to come to one of the meetings.<br>\nI'm not well versed on these things, just had an idea when I've seen it on your roadmap, so I probably don't have a full understanding of the problem.<br>\nThanks for the warm welcome, anyway!</p>",
        "id": 340417923,
        "sender_full_name": "ghostway",
        "timestamp": 1678295108
    },
    {
        "content": "<p>it's probably up to <span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span> how we share the current effort; I suspect when the work is merged upstream and fully publicly documented that might be a good time to jump in though</p>",
        "id": 340483920,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1678318204
    },
    {
        "content": "<p>Sure. Is there a rough date for when that's going to happen? In the meantime I'll see what I can make up of this problem</p>",
        "id": 340519031,
        "sender_full_name": "ghostway",
        "timestamp": 1678341639
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span> ! As other have mentioned, our current implementation is very much a research prototype at this stage; we’ll add comprehensive documentation before merging upstream. </p>\n<p>As for scope/complexity: our current focus is ISLE rules on integer types (i8, i16, i32, and i64) for the ARM aarch64 backend (though we’ve also been able to apply our prototype to rules in the midend optimizer and x86 backends). The implementation is complex because ISLE is much more expressive than most compilers’ term rewriting DSLs: lowering rules in particular require combining the semantics of ISLE matches themselves, clif (Cranelift IR) terms, ARM aarch64 instructions, and many external Rust functions from external constructors and extractors. Many of these terms do not have semantics that map directly onto a symbolic representation like SMT, so we have custom encodings. In addition, ISLE rules are polymorphic over clif types, so we need custom logic for type inference and type enumeration (SMT requires static bitvector widths). </p>\n<p>In terms of contributing: our meetings are currently focused on the final push toward publication, so while you’re welcome to attend now (send me a DM and I can forward info), the meeting topics will likely be fairly inaccessible without context. By late April/early May we should be in a much better place to onboard new contributors. I also typically give weekly updates at the general Cranelift meetings, which have information on attending <a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\">here</a>. And as Chris and Jamey have said, there are a lot of cool complimentary approaches someone could take to checking transformation equivalence, that I would also be excited to see happen and would be happy to give input on if that's helpful!</p>\n<p>You can find some information on bugs analyzed by our tool thus far here:</p>\n<ul>\n<li><a href=\"#narrow/stream/217117-cranelift/topic/ISLE.20verification.20found.20previously.20reported.20bug\">Reproduction of previous <code>cls</code> bug.</a></li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093577169\">Bug in mid-end boolean optimization due to semantics of ISLE’s if construct</a>.</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\">Bug in matching on negated immediate <code>iconst</code> values.</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/208616364d41775e7fb1442406342d7a8eeaf0df\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633335636633613832303563333934363064636261646530346163303033373763653734303331363965363965376233643063656663393039613031643039652f62797465636f6465616c6c69616e63652f6d656574696e6773)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/meetings/tree/main/cranelift\" title=\"meetings/cranelift at main · bytecodealliance/meetings\">meetings/cranelift at main · bytecodealliance/meetings</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/meetings development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093577169\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b39ce2b8b41343875531e54732c6089814d477b5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633361653866616163623232653064646637646462373737386134313431623033333039356538326132653662336537343861646131333734663036346466322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35363736)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5676#discussion_r1093577169\" title=\"Cranelift: Rewrite `or(and(x, y), not(y)) =&gt; or(x, not(y))` by fitzgen · Pull Request #5676 · bytecodealliance/wasmtime\">Cranelift: Rewrite `or(and(x, y), not(y)) =&gt; or(x, not(y))` by fitzgen · Pull Request #5676 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Thanks again to Souper for pointing this one out! cc @regehr</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8ca29ad105e808a8859b67f265254c3eb7491a26\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303637396336633961303963623662303031666530343637383833643065366338353139326262353538636438363865336231363632623663316139346363382f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35393033)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5903\" title=\"Cranelift: ISLE: aarch64: `imm12_from_negated_value` rules don't apply for i32, i16 · Issue #5903 · bytecodealliance/wasmtime\">Cranelift: ISLE: aarch64: `imm12_from_negated_value` rules don't apply for i32, i16 · Issue #5903 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Our prototype verifier seems to have found a completeness/performance (not correctness) bug in the handling of some narrow immediate values in aarch64. aarch64 has the following rules that check if...</div></div></div>",
        "id": 340556640,
        "sender_full_name": "Alexa VanHattum",
        "timestamp": 1678355354
    },
    {
        "content": "<p>Regarding complementary approaches, I got thinking yesterday about one that should be fairly easy to try: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5967\">https://github.com/bytecodealliance/wasmtime/issues/5967</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5967\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bff115032e205fcea41cf3e810ca1603ca41a441\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613064373864663364643166663034653037303933613462353930313463626439303163666435343532623334633761393662633666623861663933653338652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35393637)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5967\" title=\"cranelift: Fuzz mid-end optimizations · Issue #5967 · bytecodealliance/wasmtime\">cranelift: Fuzz mid-end optimizations · Issue #5967 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Currently, the cranelift-fuzzgen fuzz target performs differential fuzzing between our Cranelift interpreter and the native backend for the host. The native backend may be configured to run...</div></div></div>",
        "id": 340645061,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678377270
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span>  Hello!<br>\nYes, I've seen some rust stuff in the ISLE which was interesting. Why is it conserved to particular backends? Is clif itself too expressive, or is it a limitation on the optimizations you use? <br>\nI'll see what I can do about both meetings. Thanks for the details!<br>\nYeah, fuzzing the interpreter does sound good as well (but then, why are you testing on particular backends?)</p>",
        "id": 340775901,
        "sender_full_name": "ghostway",
        "timestamp": 1678430917
    },
    {
        "content": "<p>Aha, I see. ISLE is also for emitting, not only transforming the graph. That's actually very interesting, like LLVM's tablegen but for transforming as well (kind of, not exactly)...</p>",
        "id": 340859399,
        "sender_full_name": "ghostway",
        "timestamp": 1678454436
    },
    {
        "content": "<p>About your idea <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span>, it wouldn't be enough to add an <code>optimize</code> function to <code>TestFileCompiler</code> and just do <code>self.ctx.optimize(isa)</code>, right? So how would that be done?</p>",
        "id": 340910728,
        "sender_full_name": "ghostway",
        "timestamp": 1678466286
    },
    {
        "content": "<p>This recent blog post might help answer some of your questions about why ISLE works the way it does, and what it does and doesn't do: <a href=\"https://cfallin.org/blog/2023/01/20/cranelift-isle/\">https://cfallin.org/blog/2023/01/20/cranelift-isle/</a></p>",
        "id": 340919842,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678468490
    },
    {
        "content": "<p>And to clarify, it isn't that I want to fuzz the interpreter; we're using the interpreter as a reference implementation of CLIF semantics, so to some extent it's \"trusted\". Instead I want to check that this reference implementation says that a CLIF program after mid-end optimization still means the same thing that it did before optimization.</p>",
        "id": 340947486,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678476297
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span>, I've updated issue 5967 with more detail about how I think that would work. Feel free to ask more questions either here or in issue comments! I'd prefer to discuss that idea in issue comments so there's a record of any questions and answers there.</p>",
        "id": 340955260,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1678478876
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504918\">Jamey Sharp</span> <a href=\"#narrow/stream/217117-cranelift/topic/Equivalence.2FTransformation.20verifier.20of.20ISLE.20rules/near/340947486\">said</a>:</p>\n<blockquote>\n<p>And to clarify, it isn't that I want to fuzz the interpreter; we're using the interpreter as a reference implementation of CLIF semantics, so to some extent it's \"trusted\". Instead I want to check that this reference implementation says that a CLIF program after mid-end optimization still means the same thing that it did before optimization.</p>\n</blockquote>\n<p>Yes, I understood. Thanks for the blog post!</p>\n<p>Thanks for the clarifications on the issue. I'll try to work on it tomorrow maybe.</p>",
        "id": 340955908,
        "sender_full_name": "ghostway",
        "timestamp": 1678479094
    },
    {
        "content": "<p>About the clarifications, yes it's what I did. Just need to add that boolean (if I understood exactly what you wanted. We will see in the eventual pr) :)</p>",
        "id": 340956473,
        "sender_full_name": "ghostway",
        "timestamp": 1678479289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span>  I finally got to this, and as a sanity check I switched it to always use the optimized one (with the interpreter). I added a to_optimized method to the <code>TestCase</code> (creates a new instance of TestCase) and I am getting <code>Trap(User(HeapMisaligned))</code> just after starting. Do you have an idea why would that happen?</p>",
        "id": 341158735,
        "sender_full_name": "ghostway",
        "timestamp": 1678553856
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span> , the fuzzgen library sometimes creates CLIF functions that purposefully trap. (this should be less than 1% of the functions that it generates).</p>\n<p>What we do in the fuzzer is that if it traps in the interpreter we don't actually run it on the host. In this case It is probably a good idea to ignore the traps.</p>\n<p>Or, if we are comparing the interpreter vs the interpreter we can record the original test case results (including the exact trap) and compare it against the optimized version, that way we can ensure that we don't change traps via optimizations.</p>",
        "id": 341177517,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1678563282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> Hello,<br>\nI see, but you already <code>continue</code> if the result of the first run is a trap; so it wouldn't even get to the second run<br>\nAlso,  is compiling and optimizing for the interpreter too expensive (even for small compiles like testcases)? I don't see a pretty way to inter-changeably optimize or compile code without inflating the code considerably</p>",
        "id": 341181261,
        "sender_full_name": "ghostway",
        "timestamp": 1678565993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span> I think you replied in the wrong topic. If you click the button to edit your message you can edit the topic name of your message to the right topic.</p>",
        "id": 341181489,
        "sender_full_name": "bjorn3",
        "timestamp": 1678566158
    },
    {
        "content": "<p>Well, the first step is always running the interpreter, so after that we can branch and do two completely different things. </p>\n<ul>\n<li>In one case we do the regular compile and run in host</li>\n<li>In the other we just run the clif through the optimizer again and back to the interpreter it goes.</li>\n</ul>\n<p>It is a bit more code, but it should be fairly clean to split after the first interpreter run.</p>\n<blockquote>\n<p>Also, is compiling and optimizing for the interpreter too expensive (even for small compiles like testcases)?</p>\n</blockquote>\n<p>IIRC running the compiler is the most expensive step, I think I measured it once and it was like 50% of the fuzzer time (This was a long time ago, so I might be misremembering some stuff). For optimizations I haven't measured it recently and we had a bunch of changes in the optimizations that we do. </p>\n<p>We shouldn't need to run the compile step for the interpreter, just the optimizations.</p>",
        "id": 341201273,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1678581336
    },
    {
        "content": "<p>Yes, but having two or more (because of lifetimes), possibly uninitialized, variables is not what I'd like to see in rust code. I didn't want to use closures, but they might just be the prettiest way you can do this (I don't want to duplicate that for loop). It still crashes for me, anyway. Let's talk over code and not hypotheticals, maybe this afternoon/evening I'll commit this (morning for me right now)</p>",
        "id": 341227910,
        "sender_full_name": "ghostway",
        "timestamp": 1678601996
    },
    {
        "content": "<p>I've created the PR <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> :)</p>",
        "id": 341301982,
        "sender_full_name": "ghostway",
        "timestamp": 1678636808
    }
]