[
    {
        "content": "<p>Slightly off topic (I suspect), but did the <code>cranelift</code> team ever consider an <code>MLIR</code>-like architecture for the compiler middle end?</p>\n<p>I did a little experiment in the last 2 months where I tried to prototype an MLIR-like thing in Rust (plus go a bit beyond, by writing an abstract interpreter that can be re-configured as required for different analyses/optimizations -- on user-defined lattices): <a href=\"https://github.com/femtomc/abstraps\">https://github.com/femtomc/abstraps</a> today I started thinking about supporting codegen through <code>cranelift</code> as part of (one possible) lowering process. </p>\n<p>One thing which seems really nice about the dialect/intrinsic extension ideas is that you can (mostly) freely extend the IR framework without worrying about breaking core intrinsics, etc.</p>\n<p>I've also found the trait/interface mechanisms in MLIR to be particularly helpful to structure thinking about pass design.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/femtomc/abstraps\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/793d010a1c0e45074aca9e52a54e9a8a61e2fa67\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633664633064626537636366343131383138366531393337653965636164313261343739373461366437386138383734656638663439363338643063656661312f66656d746f6d632f6162737472617073)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/femtomc/abstraps\" title=\"GitHub - femtomc/abstraps: Pull your compiler up with abstract bootstraps.\">GitHub - femtomc/abstraps: Pull your compiler up with abstract bootstraps.</a></div><div class=\"message_embed_description\">Pull your compiler up with abstract bootstraps. Contribute to femtomc/abstraps development by creating an account on GitHub.</div></div></div>",
        "id": 266584270,
        "sender_full_name": "McCoy",
        "timestamp": 1641082692
    },
    {
        "content": "<p>While MLIR is flexible, I think it does come at the cost of compile performance.</p>",
        "id": 266609283,
        "sender_full_name": "bjorn3",
        "timestamp": 1641122431
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/mlir-like.20IR.20concepts.20ever.20considered.3F/near/266609283\">said</a>:</p>\n<blockquote>\n<p>While MLIR is flexible, I think it does come at the cost of compile performance.</p>\n</blockquote>\n<p>Yes, agreed. You mean â€” the concepts must be implemented using dynamic dispatch (dynamism) (?) (I assume) it would be interesting to understand how bad this gets.</p>",
        "id": 266626289,
        "sender_full_name": "McCoy",
        "timestamp": 1641147496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"449589\">@McCoy</span> I think the dynamism would be the main concern w.r.t. compiler performance -- we generate our instruction selector code based on a set of rules that lower the (statically known) set of IR nodes -- but I think a layered approach could be developed here, if there are interesting applications for it</p>",
        "id": 266713973,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641231437
    },
    {
        "content": "<p>in particular I'm imagining a single \"user-defined op\" IR node at the CLIF level that can be filled in with whatever behavior, as long as it is lowered before it reaches isel</p>",
        "id": 266714032,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641231459
    },
    {
        "content": "<p>This is basically what I did in my little experiment (wrt \"user-defined op\")</p>\n<p>I am worried about dynamism costs when applying passes. I'm not really sure how MLIR gets around this in C++. E.g. each time you apply a past, you will likely need to do the equivalent of \"cast this trait obj to X to provide access to an interface required by this pass\". </p>\n<p>I wonder how this is avoided in C++... or perhaps it is not avoided, and it's just the concrete cost of using these extensibility ideas</p>",
        "id": 266715756,
        "sender_full_name": "McCoy",
        "timestamp": 1641232228
    }
]