[
    {
        "content": "<p>Does anyone have any documentation on using cranelift-module or thorough examples?</p>",
        "id": 389323593,
        "sender_full_name": "Chris Clark",
        "timestamp": 1693967723
    },
    {
        "content": "<p>Hey, we don't have great documentation on this. My understanding is that you shouldn't really use <code>cranelift-module</code> directly, it mostly exposes a trait that other crates implement. </p>\n<p>One of them is <code>cranelift-object</code> that provides a module that allows you to produce object files. The other one is <code>cranelift-jit</code> that provides a module that can be run with the JIT.</p>\n<p>If you are interested in the JIT part, <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L66-L89\"><code>cranelift-jit-demo</code> has a good example of how it's used</a>. If you are interested in the the object emission part we have an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/36ca00c0a830ae6394cf188f9c02d1d5076ceb2d/cranelift/src/compile.rs#L52-L73\">example in <code>clif-util</code></a> but it's mostly the same thing.</p>",
        "id": 389378252,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1693993548
    },
    {
        "content": "<p>There's also this <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L95-L111\">example on declaring data sections</a></p>",
        "id": 389378489,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1693993620
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/217117-cranelift/topic/Module.20Documentation.20or.20Examples/near/389378252\">said</a>:</p>\n<p>Ahh, okay. I am looking at producing my first executable with a main function in CLIR. So, I need to use cranelift-object to generate the .o file, and then use a linker to make it an executable. I will look at the data section link you provided. That is the biggest gap in my understanding, as well as how to pass the function to object, and how to manipulate the global data, and use it within the function. But I just want to set up the main.o file first with a simple return of 42 :) I will review the code and examples tonight. Thank you!</p>",
        "id": 389491820,
        "sender_full_name": "Chris Clark",
        "timestamp": 1694023441
    },
    {
        "content": "<p>Oh, right you might also want to look at this message, since I also have some other examples there (the linking part):</p>\n<p><a href=\"#narrow/stream/217117-cranelift/topic/generate.20binary/near/388828156\">https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/generate.20binary/near/388828156</a></p>",
        "id": 389500182,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1694026904
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"410955\">Afonso Bordado</span> <a href=\"#narrow/stream/217117-cranelift/topic/Module.20Documentation.20or.20Examples/near/389500182\">said</a>:</p>\n<blockquote>\n<p>Oh, right you might also want to look at this message, since I also have some other examples there (the linking part):</p>\n<p><a href=\"#narrow/stream/217117-cranelift/topic/generate.20binary/near/388828156\">https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/generate.20binary/near/388828156</a></p>\n</blockquote>\n<p>So, saltwater is your project which can do linking outside of the need for gcc or llvm's linker? That's nice. Any plans to include it in the cranelift project?</p>",
        "id": 389522041,
        "sender_full_name": "Chris Clark",
        "timestamp": 1694037327
    },
    {
        "content": "<p>I'm sort of just maintaining it, Unfortunately I don't really have time to do much work on it. But yeah, its a C compiler that is fully based on cranelift. It doesent do linking itself, it calls into the system linker to do that.</p>\n<p>I'm not sure its worth merging with the cranelift project, It's not a very active project, and I think it makes sense to keep them separate</p>",
        "id": 389522451,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1694037543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"619350\">@Chris Clark</span> I'm trying to do the same hahaha. I'm going to check the links that Afonso shared next weekend. I'll tell you if I come up with a simple way of making a simple object file that returns a number. I already have the generated clif. But I'm missing the object and linking part</p>",
        "id": 389535524,
        "sender_full_name": "Juan Bono",
        "timestamp": 1694045413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"577281\">@Juan Bono</span>  I have been sick these past few days, and now we have a huge install at work this evening. I'm not sure when I'm going to be able to look at this. Everywhere I go, i can't find a linker as a library. I must call out to an external linker. Zig is getting closer every day. I might require an external linker for now, and then use zigs later.</p>",
        "id": 389902279,
        "sender_full_name": "Chris Clark",
        "timestamp": 1694186516
    },
    {
        "content": "<p>I was able to generate the main.o file and then link it with gcc. I pasted an example main function with that <a href=\"https://gist.github.com/juanbono/9ad4d22e99ea73579691bcf60c765d42\">https://gist.github.com/juanbono/9ad4d22e99ea73579691bcf60c765d42</a> . I wasn't able to find linker lib. I saw that saltwater just calls cc linker using std::process::Command. That's another option so you don't have to call another program after you generate the object file.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/juanbono/9ad4d22e99ea73579691bcf60c765d42\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/juanbono/9ad4d22e99ea73579691bcf60c765d42\" title=\"cranelift binary\">cranelift binary</a></div><div class=\"message_embed_description\">cranelift binary. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 389971876,
        "sender_full_name": "Juan Bono",
        "timestamp": 1694221637
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"577281\">@Juan Bono</span>  this is great thank you. I'll take a look</p>",
        "id": 390055268,
        "sender_full_name": "Chris Clark",
        "timestamp": 1694283641
    },
    {
        "content": "<p>Finally got to sit in front of the computer for a bit, you did all the hard work there. Great job. I got the objdump of main looking good. but when trying to link it complains of no _start, and then I get a segfault when running it. Possibly because push %rbp isn't allowed. I'll have to look at it again later.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">o</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">main</span><span class=\"o\">&gt;</span>:\n   <span class=\"mi\">0</span>:   <span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span>:   <span class=\"nc\">b8</span><span class=\"w\"> </span><span class=\"mi\">05</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">          </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x5</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">   </span><span class=\"mi\">9</span>:   <span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">   </span><span class=\"n\">c</span>:   <span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"n\">d</span>:   <span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>",
        "id": 390057057,
        "sender_full_name": "Chris Clark",
        "timestamp": 1694285601
    },
    {
        "content": "<p>I used gcc, and that worked. it was ld by itself that had the problem.</p>",
        "id": 390062972,
        "sender_full_name": "Chris Clark",
        "timestamp": 1694291894
    },
    {
        "content": "<p>Great! I found there is a cc crate that can be used to programmatically link the object file <a href=\"https://github.com/rust-lang/cc-rs\">https://github.com/rust-lang/cc-rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/cc-rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c2a918d2a39b8a1e7a2052d225477a298b4b3105\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636266653535653063316233353433323035616164613563643861313361363935363466393731666533386538303561613937323531353663376133356231342f727573742d6c616e672f63632d7273)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/cc-rs\" title=\"GitHub - rust-lang/cc-rs: Rust library for build scripts to compile C/C++ code into a Rust library\">GitHub - rust-lang/cc-rs: Rust library for build scripts to compile C/C++ code into a Rust library</a></div><div class=\"message_embed_description\">Rust library for build scripts to compile C/C++ code into a Rust library - GitHub - rust-lang/cc-rs: Rust library for build scripts to compile C/C++ code into a Rust library</div></div></div>",
        "id": 390146342,
        "sender_full_name": "Juan Bono",
        "timestamp": 1694352914
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619350\">Chris Clark</span> <a href=\"#narrow/stream/217117-cranelift/topic/Module.20Documentation.20or.20Examples/near/390062972\">said</a>:</p>\n<blockquote>\n<p>I used gcc, and that worked. it was ld by itself that had the problem.</p>\n</blockquote>\n<p>Yeah, gcc and clang wrap ld and add a ton of extra flags for it to for example find the C standard library and the crt object which defines <code>_start</code>.</p>",
        "id": 390164438,
        "sender_full_name": "bjorn3",
        "timestamp": 1694365491
    }
]