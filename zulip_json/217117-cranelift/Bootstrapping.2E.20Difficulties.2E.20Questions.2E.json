[
    {
        "content": "<p>I hadn't really thought about this, but using cranelift to bootstrap is going to be quite difficult. I just started the process of focusing on being able to make my language in my own language (no where near there). But I will have a problem I'm sure others have ran into. I will need to conform to rust implementations if I wanted to link rust built cranelift crates to my language. </p>\n<p>I could choose a high level point where I pass variables in to a point where it is fully rust, rather than use all cranelift components independently. But then, my language will have a significant surface area still in rust.</p>\n<p>I was thinking it might be nice to build my objects following rust standards so I could link any rust library, but I'm almost certain the rust community will view this as undefined behavior, even if I mimicked lifetimes, alignment, and everything perfectly.</p>\n<p>Has anyone done this for their language?</p>",
        "id": 490795748,
        "sender_full_name": "Chris Clark",
        "timestamp": 1735148148
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619350\">Chris Clark</span> <a href=\"#narrow/channel/217117-cranelift/topic/Bootstrapping.2E.20Difficulties.2E.20Questions.2E/near/490795748\">said</a>:</p>\n<blockquote>\n<p>I'm almost certain the rust community will view this as undefined behavior</p>\n</blockquote>\n<p>no, that's implementation-defined behavior (where it works as intended but the exact behavior isn't guaranteed to be stable). undefined behavior is worse, where you're violating assumptions the compiler makes (it operates based on the assumption that X isn't possible, so if you do X anyway it breaks) so it's possible to do any of: do exactly what you want, delete all your code, do something completely unexpected (stereotypically that's formatting your hard drive), crash (even at compile-time), etc.</p>",
        "id": 490825312,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1735178731
    },
    {
        "content": "<p>to be clear i'm not trying to imply rustc's behavior wil be easy to match or well specified, but it is possible to do things where your output will always work (ignoring bugs), unlike UB</p>",
        "id": 490825748,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1735179176
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  I just found this github repo, <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\">rustc_codegen_cranelift</a> and I'm now very scared of trying to mimic rustc. Is this a good place for me to start?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9f1a2d45de6f50c299d2d65b01822c3c2a7e4569/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353766383961393665396661373065376436346364333761326163636332363638386433623164633066356334663861613538656234353239643466346237302f626a6f726e332f72757374635f636f646567656e5f6372616e656c696674&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift\" title=\"GitHub - bjorn3/rustc_codegen_cranelift: You are probably looking for the upstream version of rustc_codegen_cranelift\">GitHub - bjorn3/rustc_codegen_cranelift: You are probably looking for the upstream version of rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">You are probably looking for the upstream version of rustc_codegen_cranelift - bjorn3/rustc_codegen_cranelift</div></div></div>",
        "id": 490899935,
        "sender_full_name": "Chris Clark",
        "timestamp": 1735234502
    },
    {
        "content": "<p>rustc_codegen_cranelift and the default LLVM backend are ABI compatible with each other (minus a couple of bugs), so I don't think you will get much benefit from using rustc_codegen_cranelift in terms of interoperability.</p>",
        "id": 490910234,
        "sender_full_name": "bjorn3",
        "timestamp": 1735242108
    },
    {
        "content": "<p>Ahh, I found <a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/master/src/base.rs\">base.rs</a> and it does look like this will help me generate structures and implementation that should match rustc though. Or am I misunderstanding?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/master/src/base.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/157926a40bdde040e03caf348b54678f7ffbe725/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333966303033636639343530643863616230643161623762383165626165656264316530383330343163383733666133363763333862363134666436623630382f727573742d6c616e672f72757374635f636f646567656e5f6372616e656c696674&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/master/src/base.rs\" title=\"rustc_codegen_cranelift/src/base.rs at master · rust-lang/rustc_codegen_cranelift\">rustc_codegen_cranelift/src/base.rs at master · rust-lang/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to rust-lang/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 490913127,
        "sender_full_name": "Chris Clark",
        "timestamp": 1735244268
    },
    {
        "content": "<p><a href=\"http://base.rs\">base.rs</a> translates MIR to cranelift ir. Rustc is not designed to generate arbitrary MIR however. Each MIR body has to correspond with an item and items are normally created when lowering rust AST to HIR. You can probably get it to work, but it would not be trivial.</p>",
        "id": 490914678,
        "sender_full_name": "bjorn3",
        "timestamp": 1735245493
    }
]