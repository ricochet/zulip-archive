[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span>: I am surprised that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2755\">https://github.com/bytecodealliance/wasmtime/pull/2755</a> is needed... I haven't looked at the implementation of <code>debug!</code> but I assumed that the point of having such a macro is that the expressions passed to the logger are not evaluated _unless_ logging is enabled. Why do we have to have another check around that?!?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2755\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2755\" title=\"Cranelift: remove logging of vcode when the log level isn't debug or more by bnjbvr · Pull Request #2755 · bytecodealliance/wasmtime\">Cranelift: remove logging of vcode when the log level isn't debug or more by bnjbvr · Pull Request #2755 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This logging step may be quite expensive, since rendering the VCode into strings has never been\noptimized at all and is using pretty naive string concatenation. Removing it is a clear compile times...</div></div></div>",
        "id": 231503095,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616517925
    },
    {
        "content": "<p>Indeed, I was surprised too -- will be curious to know more details about <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> 's environment (ie loggingg module setup)</p>",
        "id": 231503249,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616517973
    },
    {
        "content": "<p>if it is the case that args are always evaluated, or we can't rely on them not being so, then we should audit a bunch of hot paths!</p>",
        "id": 231503298,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616517995
    },
    {
        "content": "<p>(a lot of debug logging just prints primitive locals that exist anyway, so I imagine there's no overhead there aside from the do-I-log branch; but there may be other cases where we explicitly build a string in a call somewhere)</p>",
        "id": 231503414,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616518043
    },
    {
        "content": "<p>yes, exactly!</p>",
        "id": 231505001,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> regardless of logging level the arguments to the logging macro are always evaluated</p>",
        "id": 231505385,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518730
    },
    {
        "content": "<p>regardless of whichever logging crate you're using I believe</p>",
        "id": 231505417,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518742
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> that is very much a TIL for me and I now know what I'm doing with high-ish priority. Thanks :-)</p>",
        "id": 231505474,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616518764
    },
    {
        "content": "<p>That seems broken, though... most of us expect logging to be lazily evaluated?</p>",
        "id": 231505535,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518785
    },
    {
        "content": "<p>wait no, don't quote me on this</p>",
        "id": 231505639,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, is this something that could/should be fixed in <code>log</code>? Or does it have to be this way?</p>",
        "id": 231505654,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518820
    },
    {
        "content": "<p>the source disagrees with me</p>",
        "id": 231505657,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518821
    },
    {
        "content": "<p>do you have the link?</p>",
        "id": 231505776,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518854
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> no I am wrong</p>",
        "id": 231505850,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518877
    },
    {
        "content": "<p>arguments are not  evaluated</p>",
        "id": 231505868,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518882
    },
    {
        "content": "<p>so this is probably the tokio bug and a crate that wasn't updated</p>",
        "id": 231505892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> I just checked locally and <code>log::debug!(\"{:?}\", println!(\"\"));</code> doesn't print anything</p>",
        "id": 231505931,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518908
    },
    {
        "content": "<p>so arguments aren't evaluated unless the log level is enabled</p>",
        "id": 231505964,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518918
    },
    {
        "content": "<p>sorry I thought it was the other way around which is why I approved...</p>",
        "id": 231506022,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518926
    },
    {
        "content": "<p>phew... my faith in <code>log</code> is restored</p>",
        "id": 231506026,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518930
    },
    {
        "content": "<p>Phew. Crisis averted.</p>",
        "id": 231506087,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616518954
    },
    {
        "content": "<p>but does that mean that <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span>'s PR was necessary?</p>",
        "id": 231506107,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518965
    },
    {
        "content": "<p>Well, it's possible that others may be running with older (buggy) logging environments for which this is not true, I suppose</p>",
        "id": 231506175,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616518988
    },
    {
        "content": "<p>it means it shouldn't be necessary, no</p>",
        "id": 231506194,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616518993
    },
    {
        "content": "<p>yeah</p>",
        "id": 231506203,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616518997
    },
    {
        "content": "<p>Alex, what's the tokio bug?</p>",
        "id": 231506234,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616519012
    },
    {
        "content": "<p><a href=\"https://github.com/tokio-rs/tracing/issues/1249\">https://github.com/tokio-rs/tracing/issues/1249</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tokio-rs/tracing/issues/1249\" style=\"background-image: url(https://avatars.githubusercontent.com/u/20248544?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tokio-rs/tracing/issues/1249\" title=\"When using tracing-log, `log::log_enabled!` is always true · Issue #1249 · tokio-rs/tracing\">When using tracing-log, `log::log_enabled!` is always true · Issue #1249 · tokio-rs/tracing</a></div><div class=\"message_embed_description\">Bug Report Version ├── tracing-subscriber v0.2.15 │ ├── tracing v0.1.22 () │ ├── tracing-log v0.1.1 │ │ └── tracing-core v0.1.17 () Platform Linux finknottle 5.8.0-43-generic #49~20.04.1-Ubuntu SMP...</div></div></div>",
        "id": 231506454,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616519081
    },
    {
        "content": "<p>cool, thanks</p>",
        "id": 231506935,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1616519252
    },
    {
        "content": "<p>oh really? i just spent some time looking at the log's code and concluded that it was necessary... let me back it up</p>",
        "id": 231508850,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1616519971
    },
    {
        "content": "<p>I was equally surprised by this, the arguments are not evaluated if the max_level is correctly set</p>",
        "id": 231512316,
        "sender_full_name": "lqd",
        "timestamp": 1616521344
    },
    {
        "content": "<p>which could happen if the buggy version of tracing-subscriber is used, or if some incorrect code is used to set up the loggers</p>",
        "id": 231512504,
        "sender_full_name": "lqd",
        "timestamp": 1616521427
    },
    {
        "content": "<p>to make sure, I've added panics at the same places the PR changes things: </p>\n<ul>\n<li>using env_logger default's init: no issues</li>\n<li>using the \"unexpected\" tracing-subscriber init that wycats had trouble with: no issues now with the most recent tracing-subscriber version with the fix</li>\n<li>using the recommended way to setup tracing-subscriber: no issues</li>\n<li>setting up tracing-subscriber differently, \"incorrectly\": unexpected logs from regalloc</li>\n</ul>",
        "id": 231513382,
        "sender_full_name": "lqd",
        "timestamp": 1616521718
    },
    {
        "content": "<p>It might have been a red herring then: we're using tracing-subscriber, as well as another small log wrapper that might be doing something silly. I'll confirm, but then we can probably revert the change I've made.</p>",
        "id": 231518430,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1616523630
    },
    {
        "content": "<p>Yep, that was it: we were using a default ctor of <code>tracing_subscriber</code> which sets the <code>max_level</code> to <code>LevelFilter::Max</code>, by default -_-'</p>",
        "id": 231524929,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1616526131
    },
    {
        "content": "<p>Good thing that the log macros are actually sane, and that we don't need to audit the full code base for other log uses!</p>",
        "id": 231524973,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1616526156
    },
    {
        "content": "<p>its a bummer that the log ecosystem and tracing-subscriber dont work together perfectly well, but fastly uses tracing-subscriber in a lot of contexts and i expect many other users will as well, so its worthwhile to make sure we are optimized properly for using tracing-subscriber as well as the usual env_logger or equivelant</p>",
        "id": 231850510,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616696082
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> we have a nice solution now suggested by Alex in #2758 -- agreed that we want to avoid performance footguns like this lest we drive folks away thinking our backend is too slow</p>",
        "id": 231851751,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1616696560
    }
]