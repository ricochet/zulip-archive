[
    {
        "content": "<p>Hi, as some of you may know I'm working on stack switching in Wasm(time).<br>\nI just wanted to share a few insights I've had recently when working on moving the actual stack switching from being done using libcalls (using a customized version of <code>wasmtime-fiber</code> under the hood) to Cranelift-generated code.</p>\n<p>This may be interesting for the people I talked to at the Wasm CG meeting in Pittsburgh, because I realized since then that the performance improvements have a different underlying cause than I previously thought.</p>\n<p><strong>Summary:</strong><br>\nI've been able to reproduce the fact that moving the stack switching to Cranelift-generated code drastically improves performance across more benchmarks, shaving away up to 85% of the overall runtime in micro-benchmarks.<br>\nHowever, my new insight is that this drastic change isn't simply due to removing the general overhead induced by libcalls for crossing from generated code into the runtime.</p>\n<p>Instead, the performance improvements mainly come from the fact that stack switching messes up the CPU's return address branch prediction (RABP), and our previous use of libcalls for switching was accidentally amplifying that effect.<br>\nIn our old implementation (using libcalls), performing a stack switch while executing Wasm involved a series of nested function calls until reaching the code that does the actual stack switching.<br>\nOn the switched-to stack, we would then return from a similar series of slightly different calls to continue executing Wasm. But the stack switch would cause the RABP to consistently mispredict the return addresses when returning from these nested calls, leading to a series of 4 consecutive mispredicts on every stack switch.</p>\n<p>In the new design, where the stack switching is effectively inlined, these mispredicts per stack switch are avoided.</p>\n<p><strong>Additional details for the morbidly curious:</strong><br>\nThe micro-benchmark where we see the 85% runtime reduction is the simplest one testing just stack switching performance:<br>\nThe Wasm function <code>$f</code> <code>resume</code>s a stack running <code>$g</code>, which immediately <code>suspend</code>s/yields back to the stack running <code>$f</code>. This happens in a tight loop, meaning that we constantly switch between the stacks running <code>$f</code> and <code>$g</code>.</p>\n<p>Here's how the stacks look like at the point when <code>$g</code> is about to suspend itself to go back to <code>$f</code> (most recent frame on top):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"n\">wasmtime_fiber_switch</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"n\">wasmtime_fiber_switch</span><span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&lt;-</span><span class=\"w\"> </span><span class=\"n\">PC</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">libcalls</span><span class=\"p\">:::</span><span class=\"n\">resume</span><span class=\"w\">     </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"n\">libcalls</span><span class=\"p\">:::</span><span class=\"n\">suspend</span><span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">catch_unwind_and_longjmp0</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">catch_unwind_and_longjmp1</span><span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">resume</span><span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">libcalls</span><span class=\"p\">::</span><span class=\"n\">raw</span><span class=\"p\">::</span><span class=\"n\">suspend</span><span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"cp\">$f</span><span class=\"w\">            </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"cp\">$g</span><span class=\"w\">            </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">....</span><span class=\"w\">           </span><span class=\"o\">|</span><span class=\"w\">        </span><span class=\"o\">|</span><span class=\"w\">            </span><span class=\"o\">....</span><span class=\"w\">           </span><span class=\"o\">|</span>\n<span class=\"w\">  </span><span class=\"o\">+---------------------------+</span><span class=\"w\">        </span><span class=\"o\">+---------------------------+</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">inactive</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">)</span><span class=\"w\">                      </span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"w\"> </span><span class=\"n\">stack</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I'm taking some liberty here regarding the names of the functions on the stack, but the bottom line is:<br>\nThe left, currently inactive stack has frames on top from the last time <code>$f</code> switched over to the other stack by executing a <code>resume</code>:<br>\nSome frames come from the libcall infrastructure (<code>libcalls::*</code>, <code>catch_unwind_and_longjmp</code>, ...), followed by the actual implementation using (a modified version of) wasmtime_fiber (<code>wasmtime_fiber_switch</code>).</p>\n<p>The right stack, currently running, is in the middle of a similar sequence of nested function calls for a <code>suspend</code> and is just about to perform the actual switch back to the left stack.</p>\n<p>The issue now is as follows: At the point in the picture, the CPU's internal return address stack (RAS) currently ends with entries reflecting that the most recent calls came from <code>$g</code>, <code>libcalls::raw::suspend</code>, <code>catch_unwind_and_longjmp1</code>, and <code>libcalls:::suspend</code>.<br>\nAfter switching stacks, we continue inside the frame for <code>wasmtime_fiber_switch</code> on the left, and return from the 4 functions on top back into <code>$f</code>. However, the RAS' information is now invalid, resulting each of these 4 returns to be mispredicted.</p>\n<p>I'm doing all my testing on a Tiger Lake CPU, but seeing the same on on Zen 2. From what I can tell, they seem to rely exclusively on the RAS for return branch prediction: No matter the number of iterations, I always end up with exactly 4 mispredicts per <code>suspend</code> or <code>resume</code>, meaning that the predictor never \"learns\" that something funky is happening at these returns and that it should predict them without the RAS.</p>",
        "id": 451006553,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1720797401
    },
    {
        "content": "<p>Whoa this is a fascinating insight! Nice catch!</p>\n<p>I'm not sure if it's possible, but would things perhaps work out better by structuring the switching like <code>wsamtime_fiber_switch</code> where it's the same function for suspending and resuming? That way everything would be \"mirrored\" in the sense that the only mispredict would be the return location back to the destination stack. If even 1 mispredict hurts performance that much though it seems like inline without call/ret is the only way to go?</p>",
        "id": 451024463,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720801850
    },
    {
        "content": "<p>Yes, you are right that having only a single libcall/function would have led to a less severe performance impact: If there was only a single libcall (lets call it <code>switch</code>), then the four topmost frames on each stack in my picture above would be the same. You would then indeed only mispredict a single return per switch, from the lowest of these four frames back into the Wasm frame.</p>\n<p>This difference between calling one vs two different functions to do the switching goes away if instead of using libcalls we directly called leaf functions from Wasm that do all of the switching themselves, rather than calling further functions:<br>\nWe could  have functions <code>fn_resume_</code> and <code>fn_suspend</code>, both of which do all of the switching inline without further calls, and call them directly from Wasm, withouth using the normal libcall machinery.<br>\nIn other words, you call <code>fn_suspend</code> on one stack and return from a matching <code>fn_resume</code> call in the other stack. That would also reduce the number of mispredicts to 1 per stack switch.</p>\n<p>So maybe my insight can be summarized as follows:<br>\nIf you want to do the stack switching by calling some external function, you should either make sure that it's always the same function at all stack switch sites, or, if there are multiple switching functions they should be leaf functions. In each of these cases you will pay by having one guaranteed mispredict.<br>\nAnd you're right that if you really want to avoid that last mispredict, you have to fully inline the switching.</p>\n<p>Of course, based on where you do the stack switching, the fact that the switching effectively invalidates the RAS may result in some mispredicts down the line anyway, which can't be avoided by inlining the switching itself:<br>\nIf your code tends to do stack switches while on a deep stack (for example, if there are a lot of frames hidden in the \"....\" part below <code>$f</code> and <code>$g</code> in my picture), then you'll end up getting mispredicts when popping those frames anyway.</p>",
        "id": 451034261,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1720805111
    },
    {
        "content": "<p>That's a good point yeah about guaranteed mispredictes as stacks are switched. That may also mean that the performance of this microbenchmark may not be too too realistic to optimize for?</p>",
        "id": 451037612,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720806205
    },
    {
        "content": "<p>In that if 90% of the \"slowdown\" is just the return address mispredicts and \"real world\" applications are expected to also hit branch mispredicts then the microbenchmark is exploiting a non-real-world property where the benchmark doesn't hit the mispredicts on its own</p>",
        "id": 451037746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720806246
    },
    {
        "content": "<p>Yes, the benchmark I mentioned is mostly intended to measure raw switching performance when everything is in cache, mostly to establish an upper bound on what performance improvement that may be gained by moving to Cranelift-generated stack switching code. I didn't mean to give the impression that I'm expecting this to translate to a 85% or so performance improvement in a real-world program.</p>\n<p>I'd guess that there are few programs where the raw performance of stack switching dominates the runtime. I'd guess that generators would come closest to that (if you really want to implement them using stack switching). We have a benchmark in our suite that's similar to a simple generator, and are seeing something like a 40-50% improvement there.</p>\n<p>But you're also right that trying to measure \"raw switching performance\" is muddied a bit by the realization that a stack switch may cause subsequent mispredictions when returning further down the stack, after the switch itself finished.<br>\nI guess it's safe to say that the amount of follow-up mispredictions heavily depends on the workload. I could imagine that there are workloads where you frequently switch between stacks and then do additional work on top of the frames on the existing stacks between switches (the generator probably fits into that box). For something like async-await and coroutines I'm much less sure...</p>\n<p>In general, we really want to create more realistic benchmarks to get an idea of how these changes affect real-world workloads. This message here was mostly just intended to provide a bit of a follow-up to my talk at the CG meeting, back when I had much less of an understanding where the surprisingly large performance difference was coming from (even for a micro-benchmark). In particular, I wanted to clarify that it's not just the usual benefits of inlining plus avoiding the overhead introduced by libcalls, but that there was something more subtle going on, directly related to the fact that we are switching stacks.</p>",
        "id": 451050659,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1720810721
    },
    {
        "content": "<p>So in any case, my sentence \"If you want to do the stack switching by calling some external function, you should ...\" sounded like a guideline when in reality it probably makes to meaningful difference <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 451052664,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1720811195
    },
    {
        "content": "<p>Oh sorry I also don't mean to dissuade benchmarking efforts either! This is a fascinating realization that I had no idea would be so impactful. To me this is basically justification for the asterisk on this benchmark and interpreting its results, but regardless it's still important to measure!</p>",
        "id": 451077320,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720819196
    },
    {
        "content": "<p>No worries, I didn't take it that way! I think the main takeaway message here is that something interesting was affecting our previous implementation, but quantifying the actual impact requires some more work</p>",
        "id": 451490693,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1721047900
    }
]