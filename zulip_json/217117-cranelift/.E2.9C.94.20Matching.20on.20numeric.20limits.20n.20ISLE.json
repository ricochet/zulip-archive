[
    {
        "content": "<p>How can I match on numeric limits (eg UMIN, SMIN, SMAX) in ISLE?<br>\nI'm trying to add rewrites for <code>sge(x, SMIN) == true</code> etc</p>",
        "id": 342434554,
        "sender_full_name": "kmeakin",
        "timestamp": 1679006006
    },
    {
        "content": "<p>Good question! Unsigned minimum is easy since it's always 0. Unsigned maximum for a given type <code>ty</code> is available as <code>(ty_mask ty)</code>. The signed versions are trickier.</p>",
        "id": 342435454,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679006459
    },
    {
        "content": "<p>Good catch, I meant UMAX <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 342435635,
        "sender_full_name": "kmeakin",
        "timestamp": 1679006546
    },
    {
        "content": "<p>Let's see. Signed minimum is all zeroes except a 1 in the sign bit, and signed maximum is all ones except a 0 in the sign bitâ€¦ There's probably something clever there.</p>",
        "id": 342435812,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679006631
    },
    {
        "content": "<p>I dunno about y'all but I personally enjoy mashing <code>0</code> or <code>f</code> exactly 15 times when writing consts in hex!</p>",
        "id": 342436106,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679006759
    },
    {
        "content": "<p>the straightforward answer is that we should probably just define some constants in the prelude</p>",
        "id": 342436165,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679006772
    },
    {
        "content": "<p>These aren't constants though because they depend on the bit-width of the type <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 342436198,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679006794
    },
    {
        "content": "<p>ah, right, type-parameterized... so yeah we might want a <code>ty_smin</code>, <code>ty_smax</code></p>",
        "id": 342436285,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679006840
    },
    {
        "content": "<p>(external pure ctors I mean)</p>",
        "id": 342436312,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679006853
    },
    {
        "content": "<p>I think it's interesting that signed min is the same as unsigned min with the sign bit flipped, and similarly for max. So we <em>could</em> do this with one extra pure constructor (flip sign bit?). But I think you're right that it should just be the specialized signed-min and signed-max constructors.</p>\n<p>Whatever we do here will also be useful in backends. For example, riscv currently has an open PR that could use this for saturating floating-point to integer conversions.</p>",
        "id": 342437001,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679007169
    },
    {
        "content": "<p>Ooh, the one annoying thing here too is that you kinda really want an extractor instead of having to do <code>(if-let $true (u64_eq ...))</code></p>",
        "id": 342437217,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679007270
    },
    {
        "content": "<p>unless something has changed, one can bind both an etor and ctor to a term...</p>",
        "id": 342437289,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007304
    },
    {
        "content": "<p>ah, I guess the tricky bit is the flipped signature though</p>",
        "id": 342437341,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007327
    },
    {
        "content": "<p>oh wait no, it's the same (type on the \"outside\") in most contexts you'd probably want an etor</p>",
        "id": 342437389,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007353
    },
    {
        "content": "<p>err, no to myself, it's flipped</p>",
        "id": 342437538,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007403
    },
    {
        "content": "<p>less parens more coffee</p>",
        "id": 342437563,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007416
    },
    {
        "content": "<p>I always have trouble with which way around the constructor and extractor types are, so I'd just have to try it. \"type on the outside\" sounds plausible?</p>",
        "id": 342437879,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679007561
    },
    {
        "content": "<p>works for the extractor, but for the constructor I think you want <code>(Type) u64</code></p>",
        "id": 342438087,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007641
    },
    {
        "content": "<p>Oh yeah. Okay I hate all the options now.</p>",
        "id": 342438767,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679007924
    },
    {
        "content": "<p>yup...</p>",
        "id": 342438930,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679007995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"600668\">@kmeakin</span> Okay, so in conclusion: Would you mind opening a PR which adds external constructors <code>ty_smin</code> and <code>ty_smax</code>, which take a <code>Type</code> and return a <code>u64</code>? You'd use them like <code>(if-let $true (u64_eq n (ty_smin ty)))</code>, which nobody is happy with, but that seems to be where we're at today.</p>",
        "id": 342439347,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679008201
    },
    {
        "content": "<p>thank you, I will try that</p>",
        "id": 342440167,
        "sender_full_name": "kmeakin",
        "timestamp": 1679008572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as resolved.</p>",
        "id": 342441705,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679009370
    },
    {
        "content": "<p>Nice work, <span class=\"user-mention\" data-user-id=\"600668\">@kmeakin</span>!</p>",
        "id": 342445462,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1679011428
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as unresolved.</p>",
        "id": 342452603,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679015296
    },
    {
        "content": "<p>The constructors don't seem to be matching :(</p>\n<p>This function is unchanged</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">icmp_ule_umax</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xffff_ffff</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">ule</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 342452686,
        "sender_full_name": "kmeakin",
        "timestamp": 1679015350
    },
    {
        "content": "<p>This is the rule that should fire:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">ule</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">UMAX</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_int</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">IntCC</span><span class=\"p\">.</span><span class=\"n\">UnsignedLessThanOrEqual</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">umax</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))))</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"cp\">$true</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_eq</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_umax</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">)))</span>\n<span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">subsume</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n</code></pre></div>",
        "id": 342452736,
        "sender_full_name": "kmeakin",
        "timestamp": 1679015382
    },
    {
        "content": "<p>And the constructor implementations are</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">ty_umin</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ty</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">ty_umax</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ty_mask</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">ty_smin</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty_bits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">bits</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"fm\">debug_assert_ne!</span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64_</span><span class=\"k\">u64</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">checked_sub</span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"unimplemented for &gt; 64 bits\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i64</span>::<span class=\"n\">MIN</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">shift</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">ty_smax</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ty</span>: <span class=\"nc\">Type</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u64</span> <span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ty_bits</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"p\">.</span><span class=\"n\">bits</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"fm\">debug_assert_ne!</span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shift</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">64_</span><span class=\"k\">u64</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">checked_sub</span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"unimplemented for &gt; 64 bits\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"kt\">i64</span>::<span class=\"n\">MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">shift</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 342452843,
        "sender_full_name": "kmeakin",
        "timestamp": 1679015427
    },
    {
        "content": "<p>nvm I figured it out. I was passing the <code>ty</code> from the <code>icmp</code> instruction to <code>ty_umax</code>, when I should have passed the <code>ty</code> from the <code>iconst</code> instruction</p>",
        "id": 342456771,
        "sender_full_name": "kmeakin",
        "timestamp": 1679018074
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as resolved.</p>",
        "id": 342457184,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679018415
    }
]