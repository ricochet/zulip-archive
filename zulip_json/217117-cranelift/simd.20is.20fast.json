[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> you might be interested in this, so I'm updating Rust's simd support for wasm to the latest spec. One of the examples in the simd repo is a hex encoder that uses sse/avx on x86 and such, so I copied one of those and translated it to wasm intrinsics. Below \"default\" is using the simd intrinsics and \"fallback\" is the code you would write today (e.g. no intrinsics). Also \"large\" is processing 1MB and \"small\" is processing &lt; 128 bytes.</p>\n<div class=\"codehilite\"><pre><span></span><code>test benches::large_default  ... bench:     213,961 ns/iter (+/- 5,108) = 4900 MB/s\ntest benches::large_fallback ... bench:   3,108,434 ns/iter (+/- 75,730) = 337 MB/s\ntest benches::small_default  ... bench:          52 ns/iter (+/- 0) = 2250 MB/s\ntest benches::small_fallback ... bench:         358 ns/iter (+/- 0) = 326 MB/s\n</code></pre></div>",
        "id": 203776379,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594677158
    },
    {
        "content": "<p>basically wasmtime's implementation of SIMD, for hex encoding, is a 7x-15x speedup</p>",
        "id": 203776409,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594677181
    },
    {
        "content": "<p>not exactly a clever benchmark since who's bottlenecked hex encoding, but I figured this was pretty neat :)</p>",
        "id": 203776434,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594677207
    },
    {
        "content": "<p>Nice! Yeah, thanks for showing me that. Where's the code for those benchmarks?</p>",
        "id": 203776756,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1594677473
    },
    {
        "content": "<p>gimme one min, will post soon</p>",
        "id": 203777348,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594677848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> <a href=\"https://github.com/rust-lang/stdarch/pull/874\">https://github.com/rust-lang/stdarch/pull/874</a>, notably <a href=\"https://github.com/rust-lang/stdarch/pull/874/files#diff-179577566f4ea187af5abf39056532cb\">https://github.com/rust-lang/stdarch/pull/874/files#diff-179577566f4ea187af5abf39056532cb</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/stdarch/pull/874\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/stdarch/pull/874\" title=\"Update and revamp wasm32 SIMD intrinsics by alexcrichton · Pull Request #874 · rust-lang/stdarch\">Update and revamp wasm32 SIMD intrinsics by alexcrichton · Pull Request #874 · rust-lang/stdarch</a></div><div class=\"message_embed_description\">Lots of time and lots of things have happened since the simd128 support\nwas first added to this crate. Things are starting to settle down now so\nthis commit syncs the Rust intrinsic definitions wit...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/stdarch/pull/874/files#diff-179577566f4ea187af5abf39056532cb\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/stdarch/pull/874/files#diff-179577566f4ea187af5abf39056532cb\" title=\"Update and revamp wasm32 SIMD intrinsics by alexcrichton · Pull Request #874 · rust-lang/stdarch\">Update and revamp wasm32 SIMD intrinsics by alexcrichton · Pull Request #874 · rust-lang/stdarch</a></div><div class=\"message_embed_description\">Lots of time and lots of things have happened since the simd128 support\nwas first added to this crate. Things are starting to settle down now so\nthis commit syncs the Rust intrinsic definitions wit...</div></div></div>",
        "id": 203777716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594678152
    },
    {
        "content": "<p>That's pretty cool... I guess I never thought through how I would compile Rust to Wasm SIMD--but there it is!</p>",
        "id": 203783989,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1594683333
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> , Can you share that translation? The before and after?</p>",
        "id": 203787205,
        "sender_full_name": "Johnnie Birch",
        "timestamp": 1594686247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"257554\">@Johnnie Birch</span> I think <a href=\"https://gist.github.com/alexcrichton/f9f10a1e2ce56c246fb449df45c3f113\">https://gist.github.com/alexcrichton/f9f10a1e2ce56c246fb449df45c3f113</a> is it</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/alexcrichton/f9f10a1e2ce56c246fb449df45c3f113\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/alexcrichton/f9f10a1e2ce56c246fb449df45c3f113\" title=\"fallback.rs\">fallback.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 203790049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594689304
    },
    {
        "content": "<p>I previously used jitdump to get this stuff out but jitdump isn't working for me right now</p>",
        "id": 203790058,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594689318
    },
    {
        "content": "<p><code>perf report</code> isn't getting any symbols showing up and it's not figuring out where jit code lives</p>",
        "id": 203790065,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594689330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Got it thanks. Sorry, I'll take a look at jitdump and perf report. Need to figure out a way to have proper testing for those.</p>",
        "id": 203792651,
        "sender_full_name": "Johnnie Birch",
        "timestamp": 1594692892
    },
    {
        "content": "<p>hm ok I bisected a bit and it looks like <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1565\">https://github.com/bytecodealliance/wasmtime/pull/1565</a> breaks <code>perf</code> when the module is loaded from the cache, before that commit or <code>--disable-cache</code> fixes the perf issues I was having</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1565\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1565\" title=\"Reactor support. by sunfishcode · Pull Request #1565 · bytecodealliance/wasmtime\">Reactor support. by sunfishcode · Pull Request #1565 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This implements the new WASI ABI described here:\nhttps://github.com/WebAssembly/WASI/blob/master/design/application-abi.md\nIt adds APIs to Instance and Linker with support for running\nWASI programs...</div></div></div>",
        "id": 203798412,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594701867
    },
    {
        "content": "<p>I'll investigate tomorrow more, no idea what that PR would be doing...</p>",
        "id": 203798431,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594701922
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> any chance you can run it on aarch64 too? :)</p>",
        "id": 203816303,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1594720967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> </p>\n<div class=\"codehilite\"><pre><span></span><code>thread &#39;&lt;unnamed&gt;&#39; panicked at &#39;Vector ops not implemented.&#39;, cranelift/codegen/src/isa/aarch64/lower_inst.rs:1624:13\n</code></pre></div>\n\n\n<p>:(</p>",
        "id": 203828053,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594730540
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/FmtznhBc_dhddsORTy9sbEHX/hex.wasm.gz\">hex.wasm.gz</a> -- this is the file I'm using:</p>\n<div class=\"codehilite\"><pre><span></span><code>$ ./target/release/wasmtime run --enable-simd -- hex.wasm --bench\n\nrunning 9 tests\ntest tests::avx_works ... ignored\ntest tests::big ... ignored\ntest tests::empty ... ignored\ntest tests::encode_equals_fallback ... ignored\ntest tests::odd ... ignored\ntest benches::large_default  ... bench:     214,676 ns/iter (+/- 2,050) = 4884 MB/s\ntest benches::large_fallback ... bench:   3,447,077 ns/iter (+/- 78,646) = 304 MB/s\ntest benches::small_default  ... bench:          54 ns/iter (+/- 0) = 2166 MB/s\ntest benches::small_fallback ... bench:         397 ns/iter (+/- 7) = 294 MB/s\n\ntest result: ok. 0 passed; 0 failed; 5 ignored; 4 measured; 0 filtered out\n</code></pre></div>",
        "id": 203829541,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594731485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> aww, well we're working on simd, so hopefully it'll all be implemented soon!</p>",
        "id": 203834154,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1594734088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> btw, I had to run 'gunzip' twice on that file... am I doing something weird?</p>",
        "id": 203842177,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1594738152
    },
    {
        "content": "<p>uh...</p>",
        "id": 203842236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594738182
    },
    {
        "content": "<p>it looks like zulip maybe ran another layer of gz after I uploaded</p>",
        "id": 203842281,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594738202
    },
    {
        "content": "<p>or I ran gz twice by accident</p>",
        "id": 203842319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594738209
    },
    {
        "content": "<p>it should be 16MB ish</p>",
        "id": 203842329,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594738213
    },
    {
        "content": "<p>yeah I got it working, but was very confused for a little bit :-)</p>",
        "id": 203842398,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1594738252
    }
]