[
    {
        "content": "<p>Right now, if you use <code>r32</code> or <code>r64</code> without enabling stack maps, then assertions fail. This makes sense if the assumption is that they are always references to GC-managed things.</p>\n<p>I'm adding <code>externref</code> support in Wasmtime, and I'm using ref counting, not a tracing gc. The default implementation of <code>cranelift_wasm::TargetEnvironment::reference_type</code> translates <code>externref</code> to <code>r32</code> or <code>r64</code> depending on the target's pointer width.</p>\n<p>Do folks think it be better to</p>\n<ul>\n<li>\n<p>relax the constraint on <code>r32</code> and <code>r64</code> so that they can be used without stack maps, or</p>\n</li>\n<li>\n<p>override the <code>TargetEnvironment::reference_type</code> method to return <code>i32</code> or <code>i64</code> for pointers to reference counted things?</p>\n</li>\n</ul>",
        "id": 198363072,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590088230
    },
    {
        "content": "<p>How do you implement the incrementing and decrementing of the refcount? If you use <code>r32</code>/<code>r64</code> as is the refcount will never be changed.</p>",
        "id": 198367563,
        "sender_full_name": "bjorn3",
        "timestamp": 1590090602
    },
    {
        "content": "<p>I'm doing that in <code>FuncEnvironment</code>'s translate methods to do the ref counting operations when they are stored somewhere permanent (ie a global or table) and maintaining the invariant that on-stack (and in local) references are always the callers responsibility to ensure they are held alive. This way, wasm functions don't need to do ref counting operations at function calls nor when accessing or updating locals.</p>",
        "id": 198368174,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590090875
    },
    {
        "content": "<p>Then option 2 (using <code>i32</code>/<code>i64</code>) makes most sense to me.</p>",
        "id": 198368425,
        "sender_full_name": "bjorn3",
        "timestamp": 1590090979
    },
    {
        "content": "<p>Yeah, I jsut started exploring that, and it also turns out that the assertion fails even when I override <code>TargetEnvironment::reference_type</code> to return <code>self.pointer_type()</code>, so there is something else suspicious in addition going on here.</p>",
        "id": 198368592,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590091048
    }
]