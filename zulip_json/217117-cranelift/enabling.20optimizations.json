[
    {
        "content": "<p>Do I need to explicitly run optimization passes in some way? The generated amd64 assembly I'm getting is like, comically inefficient</p>",
        "id": 220646656,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1608596660
    },
    {
        "content": "<p>You can set the <code>opt_level</code> option to <code>speed_and_size</code> when building the TargetIsa.</p>",
        "id": 220733313,
        "sender_full_name": "bjorn3",
        "timestamp": 1608670549
    },
    {
        "content": "<p>Also in what kind of way is it inefficient?</p>",
        "id": 220733369,
        "sender_full_name": "bjorn3",
        "timestamp": 1608670566
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372634\">@Nathan Ringo</span> ^</p>",
        "id": 220733378,
        "sender_full_name": "bjorn3",
        "timestamp": 1608670573
    },
    {
        "content": "<p>er, if I'm using SimpleJIT, where would I be building the TargetIsa? (I think it uses native or whatever)<br>\nThere's a bunch of <code>mov rdi, 0; mov rsi, rdi</code> and there's no direct calls at all; only <code>mov rcx, number; jmp rcx</code> which by my understanding is significantly less efficient</p>",
        "id": 220733516,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1608670669
    },
    {
        "content": "<p>like, for example, in <a href=\"https://github.com/bytecodealliance/simplejit-demo/blob/main/src/jit.rs\">https://github.com/bytecodealliance/simplejit-demo/blob/main/src/jit.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/simplejit-demo/blob/main/src/jit.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/simplejit-demo/blob/main/src/jit.rs\" title=\"bytecodealliance/simplejit-demo\">bytecodealliance/simplejit-demo</a></div><div class=\"message_embed_description\">JIT compiler and runtime for a toy language, using Cranelift - bytecodealliance/simplejit-demo</div></div></div>",
        "id": 220733938,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1608670942
    },
    {
        "content": "<p>Those kinds of inefficiencies are coming from regalloc. Cranelift is currently switching to a new framework for backends. This includes a regalloc that shouldn't do this. For aarch64 it is the default (and only) backend. For x86_64 you have to enable it using the experimental_x64 feature flag.</p>",
        "id": 220743426,
        "sender_full_name": "bjorn3",
        "timestamp": 1608677448
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372634\">@Nathan Ringo</span> ^</p>",
        "id": 220743452,
        "sender_full_name": "bjorn3",
        "timestamp": 1608677474
    },
    {
        "content": "<p>The mov; jmp by the way is because is_pic is not enabled by default. x86_64 doesn't allow 64bit immediates for calls.</p>",
        "id": 220743623,
        "sender_full_name": "bjorn3",
        "timestamp": 1608677587
    },
    {
        "content": "<p>You can use a custom TargetIsa instead of the native one by using <code>with_isa</code> instead of <code>new</code> for the jit builder.</p>",
        "id": 220743670,
        "sender_full_name": "bjorn3",
        "timestamp": 1608677638
    },
    {
        "content": "<p>Okay, I'll look at those, thanks</p>",
        "id": 220743673,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1608677641
    },
    {
        "content": "<p>hm, am I correct in thinking that <code>experimental_x64</code> is only available in the Git version of Cranelift? It doesn't appear to exist in the released 0.68.0 despite being in the wasmtime repo...</p>",
        "id": 220746062,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1608679546
    },
    {
        "content": "<p>That is possible.</p>",
        "id": 220765395,
        "sender_full_name": "bjorn3",
        "timestamp": 1608706398
    }
]