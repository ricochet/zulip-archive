[
    {
        "content": "<p>Hi, I'm interested in discovering missing optimization opportunities in cranelift.<br>\nI've tried to add/erase some optimization rules in <code>cranelift/codegen/src/opts</code>,<br>\nbut it does not seem to change the compilation result of my program.</p>\n<p>Is there any established way to test a new optimization?</p>\n<p>Thank you.</p>",
        "id": 491257309,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1735549444
    },
    {
        "content": "<p>My current workflow is as follows:</p>\n<ol>\n<li><code>emcc example.c</code> to get a wasm module. For example, it contains <code>int y = x / 1</code> to see that optimization happens.</li>\n<li><code>wasmtime explore example.wasm</code> to see the compilation process.</li>\n</ol>\n<p>I observe <code>int y = x / 1</code> is not optimized away. But the default optimization level is 2 in <code>wasmtime explore</code>, which is the highest level.<br>\nI think it is weird that cranelift misses such easy optimization opportunity in such optimization level.<br>\n(Also the optimization is indeed defined in <code>cranelift/codegen/src/opts</code>.)</p>\n<p>I'd appreciate if anyone can spot a problem in my workflow.</p>",
        "id": 491261393,
        "sender_full_name": "Bongjun Jang",
        "timestamp": 1735552137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"815101\">@Bongjun Jang</span> nothing wrong with your experiment -- indeed, we can't optimize away divides right now. This is a limitation in our optimization framework where we can't reason about trapping opcodes -- see <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\">https://github.com/bytecodealliance/wasmtime/issues/5908</a>. (In this case of course with a constant nonzero divisor, we should be able to know that no trap will ever occur, and remove the op -- but we don't have the framework to remove any trapping opcode at the moment.)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8963dd91646aae7fcc7de30f45d35c3e56cba24e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383966373766396338386638616364343638346539366231303633316233353161626230323664613536663265656463623232343663343765666562663263342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35393038&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5908\" title=\"cranelift/egraphs: allow simplifying trapping arithmetic 路 Issue #5908 路 bytecodealliance/wasmtime\">cranelift/egraphs: allow simplifying trapping arithmetic 路 Issue #5908 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature We currently have simplification rules in opts/algebraic.isle to rewrite x/1 to x, and in opts/cprop.isle to constant-fold division when both operands are constant. But these rules can't fi...</div></div></div>",
        "id": 491306145,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1735578381
    },
    {
        "content": "<p>Handling trapping opcodes in our value-based design is not really that \"easy\", which is why it hasn't been tackled yet; we have plenty of ideas, we just need to take the time to implement them. Once we have the framework, it will then indeed be easy to add rules for specific cases like this</p>",
        "id": 491306425,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1735578518
    }
]