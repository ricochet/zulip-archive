[
    {
        "content": "<p>We've updated the verification engine to verify several more instructions now, including clz and cls. Interestingly enough, we were able to catch a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3248\">cls bug</a> that was reported previously(!) We've reproduced the bug <a href=\"https://github.com/avanhatt/wasmtime/blob/7835320e8136822f80cd18963a11c291242c81f2/cranelift/isle/veri/veri_engine/examples/broken/cls/broken_cls8.isle#L79-L83\">here</a>.</p>\n<p>Here are the relevant parts of a counterexample from the solver.<br>\nSuppose we start with <code>x = 0xc0</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"x__clif0__2\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">lhs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">clif</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">side</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mh\">0xc0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"(_ BitVec 8)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"#xc0\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This is also the arg to cls:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"cls__5__a__17\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">cls</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mh\">0xc0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"(_ BitVec 8)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"#xc0\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The solver concludes that <code>cls(0xc0: bv8)</code> should be 1:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"cls8ret_18\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">cls</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"mh\">0xc0</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">leading</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"(_ BitVec 8)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"#x01\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>On the rhs we have that the input to aarch64 cls is 0xc0 extended to 32 bits, plus an extra 32 unconstrained bits (these get ignored):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"a64_cls__11__a__45\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rhs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">cls</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mh\">0xc0</span><span class=\"w\"> </span><span class=\"n\">extended</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mi\">64</span><span class=\"w\"> </span><span class=\"n\">bits</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"(_ BitVec 64)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"#x40000000000000c0\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Since the buggy rule zero extends instead of sign extending, the solver concludes that <code>a64cls(0x000000c0: bv32) = 23</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"a64cls32ret_46\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"(_ BitVec 64)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"#x0000000000000017\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>If the input had been sign extended, the result would have been 25. In this counterexample, when the solver subtracts the result is -1:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"sub_imm__14__ret__64\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;--</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">[],</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"(_ BitVec 64)\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"#xffffffffffffffff\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">),</span><span class=\"w\"></span>\n</code></pre></div>\n<p>But the result from the lhs is 1, so verification fails.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3248\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a89ec1aa93b42225ecd6ba928bfdbbd5355df5e8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333536616434366136316165653964396562663334316463353738613332663562313438393363356264306233376464616366323266656364313263383732362f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33323438)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3248\" title=\"Cranelift: cls instruction is not correctly implemented  for `i16` and `i8` in any backend. · Issue #3248 · bytecodealliance/wasmtime\">Cranelift: cls instruction is not correctly implemented  for `i16` and `i8` in any backend. · Issue #3248 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey, @dheaton-arm reported an interesting implementation detail from the aarch64 backend on the cls instruction. However, further testing shows that this instruction is not correctly implemented in...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avanhatt/wasmtime/blob/7835320e8136822f80cd18963a11c291242c81f2/cranelift/isle/veri/veri_engine/examples/broken/cls/broken_cls8.isle#L79-L83\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/34686155383fa6b4dcd9afe0e0cbe47a1e91def2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613032303130313564386430363139343032303830386336376532383730323866356438373339353638323137376530323266613631356562313463343730342f6176616e686174742f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avanhatt/wasmtime/blob/7835320e8136822f80cd18963a11c291242c81f2/cranelift/isle/veri/veri_engine/examples/broken/cls/broken_cls8.isle#L79-L83\" title=\"wasmtime/broken_cls8.isle at 7835320e8136822f80cd18963a11c291242c81f2 · avanhatt/wasmtime\">wasmtime/broken_cls8.isle at 7835320e8136822f80cd18963a11c291242c81f2 · avanhatt/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/broken_cls8.isle at 7835320e8136822f80cd18963a11c291242c81f2 · avanhatt/wasmtime</div></div></div>",
        "id": 320792613,
        "sender_full_name": "Monica Pardeshi",
        "timestamp": 1673469464
    },
    {
        "content": "<p>super cool to see this catching real bugs we've had!</p>",
        "id": 320797225,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1673471062
    }
]