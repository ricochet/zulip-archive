[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm trying to understand a bit more the status of Spectre mitigations and I was wondering if someone could help me clarify if <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\">this issue</a> is still representative of the work that needs to be done in order to mitigate spectre variants. As far as I can tell, heap-bounds checking was implemented in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\">https://github.com/bytecodealliance/wasmtime/pull/1930</a>; but according to the linked issue, there are a couple of other areas (jump table + table call) that are still not implemented. Is my understanding correct?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/43865c95a2f38ac0ff165751360ccd940b5cdc3f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663632303038363265323735376131643466313134663133323566306264306131326466636231643966323063373665306565333932383434326362636461622f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31303332)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1032\" title=\"Mitigating Spectre attacks · Issue #1032 · bytecodealliance/wasmtime\">Mitigating Spectre attacks · Issue #1032 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hello, You are probably well aware, but some mainstream compilers are emitting retpolines to help mitigate Spectre variant 2 attacks. Do you have any plans to add a similar capability to the creton...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/037cd672bad1087fdccfef00ea8a8b0c5578a49e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353338323666366461373833316238623065363864663535666135636562363362643866306535306230663664396463393436313463366564313264633037322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f31393330)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1930\" title=\"Spectre mitigation on heap access overflow checks. by cfallin · Pull Request #1930 · bytecodealliance/wasmtime\">Spectre mitigation on heap access overflow checks. by cfallin · Pull Request #1930 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR adds a conditional move following a heap bounds check through which the address to be accessed flows. This conditional move ensures that even if the branch is mispredicted (access is actual...</div></div></div>",
        "id": 278584176,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1649696328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> that's correct, we have a cmov guard on the heap pointer so that heap bounds checks can't be circumvented in the speculative path, but we don't do the equivalent for jump tables or for Wasm table accesses. My (very fuzzy) recollection was that at the time of #1930, we had other answers for those issues in the context of a Firefox backend, and the heap bounds check was seen as the main hole to patch. But other environments would of course be different and it seems to me that for long-running Wasm instances, for example, we need to do the same for table accesses and br_table jumps (via jump tables). I'd be happy to review a PR for this if you're interested in doing one.</p>",
        "id": 278585069,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1649696651
    },
    {
        "content": "<p>On a related note, Arm has been <a href=\"https://developer.arm.com/Arm%20Security%20Center/Speculative%20Processor%20Vulnerability\">publishing</a> whitepapers on the various speculative execution vulnerabilities, which include recommended instruction sequences to mitigate the issues. In particular, conditional moves are only a partial solution - a specific barrier instruction has been introduced as well, though it might be mostly to future-proof the recommendation (the barrier instruction executes as a no-op on processors that predate it).</p>",
        "id": 278592540,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1649699783
    },
    {
        "content": "<p>I meant to get back to this earlier, sorry about that! Everything that you've pointed out makes sense to me, thank you both, that answers my questions for the near term. Chris, I might come back to this with questions around the implementation.</p>",
        "id": 280338034,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1651060140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411395\">Saúl Cabrera</span> has marked this topic as resolved.</p>",
        "id": 280338059,
        "sender_full_name": "Notification Bot",
        "timestamp": 1651060154
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> I went ahead and implemented the table and br_table mitigations here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/4092\">https://github.com/bytecodealliance/wasmtime/pull/4092</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/4092\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/80117431bac6ea88a55500e0b3fd428e24f8acb9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326437626130313531613839383737363565643131383332316633643436653732333463393839316431626362343536616234393535663037326166326438632f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f34303932)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/4092\" title=\"Implement Spectre mitigations for table accesses and br_tables. by cfallin · Pull Request #4092 · bytecodealliance/wasmtime\">Implement Spectre mitigations for table accesses and br_tables. by cfallin · Pull Request #4092 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, we have partial Spectre mitigation: we protect heap accesses\nwith dynamic bounds checks. Specifically, we guard against errant\naccesses on the misspeculated path beyond the bounds-check ...</div></div></div>",
        "id": 280704181,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1651277495
    },
    {
        "content": "<p>Thank you for doing this <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> !</p>",
        "id": 280884263,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1651503451
    }
]