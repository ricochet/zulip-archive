[
    {
        "content": "<p>The documentation (readable by laypeople at least) is severely missing, best one being the cranelift-jit-example, but it only covers working with primitive types.<br>\nNow I need to work with a struct, and I'm not quite sure how to do it. As far as I understand, the way is to pass and return structures larger than usize is by reference. However, I am not sure how to allocate stack space that could then be used as a return slot.</p>",
        "id": 262136157,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637359293
    },
    {
        "content": "<p>hi Ivan,</p>\n<p>cranelift only has scalars (and vector types), it does not have support for structs built in</p>\n<p>if you're source language has structs, you'll have to keep them in memory and emit clif loads/stores with the appropriate offsets for the struct's layout</p>\n<p>you can optionally do something like a \"mem2reg\" pass before emitting clif if you are concerned about performance of excessive memory operations</p>",
        "id": 262139238,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1637360754
    },
    {
        "content": "<p>I understand that much, my question is how to do it. What exact instructions do I need to emit to follow a pointer with or without offset, or allocate stack space and take its address to it to pass to a function.</p>",
        "id": 262173068,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1637399706
    },
    {
        "content": "<p>Adding to this question, I see that <a href=\"https://docs.rs/cranelift-codegen/0.77.0/cranelift_codegen/ir/enum.ArgumentPurpose.html\"><code>ArgumentPurpose</code></a> has the variants <code>StructArgument</code> and <code>StructReturn</code>, but these are poorly documented. What effect do they have?</p>",
        "id": 262413980,
        "sender_full_name": "Veverak",
        "timestamp": 1637644314
    },
    {
        "content": "<p>StructArgument is for when you try to pass a struct argument in C that according to the ABI wouldn't be passed in registers. The argument needs to be a pointer to the actual struct data. Cranelift will then copy the struct to the right place on the stack where the callee would expect to find the struct according to the C ABI.</p>",
        "id": 262419124,
        "sender_full_name": "bjorn3",
        "timestamp": 1637650721
    },
    {
        "content": "<p>StructReturn is for the argument that contains the location to store the struct that is returned if it isn't returned in a register. StructReturn is currently a nop, but it should ensure that the right register is used to pass the return value. Currently you need to pass it as first argument for the right register to be used.</p>",
        "id": 262419304,
        "sender_full_name": "bjorn3",
        "timestamp": 1637650848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451107\">@Veverak</span></p>",
        "id": 262419337,
        "sender_full_name": "bjorn3",
        "timestamp": 1637650887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> has marked this topic as resolved.</p>",
        "id": 262890947,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638044206
    }
]