[
    {
        "content": "<p>Are commutative versions of rewrite rules necessary?<br>\neg <code>x*0 == 0*x == x</code><br>\nConstant arguments are moved to the RHS by <code>const_prop.isle</code><br>\nIs it just an optimisation?</p>",
        "id": 342649014,
        "sender_full_name": "kmeakin",
        "timestamp": 1679080942
    },
    {
        "content": "<p>ah for constants it is not necessary to have rules for both, because we do move constants to the right hand side</p>",
        "id": 342649217,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679081002
    },
    {
        "content": "<p>for non-constants, it is currently necessary to write both rules</p>",
        "id": 342649261,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679081018
    },
    {
        "content": "<p>we want to eventually be able to mark certain things as commutative in ISLE, so that the compiler essentially macro-expands the commutativity for us, but that requires quite a bit of design and we haven't spent time on it yet</p>",
        "id": 342649416,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679081056
    },
    {
        "content": "<p>Yup, and to give a little more context in case it helps, another alternative might be to have a generic commutativity rule that creates both forms of every commutative operator in the egraph, to maximize possible rule applications; but we made a conscious tradeoff not to do this because it would significantly increase the size of the egraph and rule application cost</p>",
        "id": 342649573,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679081117
    },
    {
        "content": "<p>in contrast, duplicating rules when needed is relatively low-cost, because the ISLE compiler can merge them and run them all in sublinear cost</p>",
        "id": 342649662,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679081149
    },
    {
        "content": "<p>Both sound very interesting</p>",
        "id": 342650281,
        "sender_full_name": "kmeakin",
        "timestamp": 1679081372
    },
    {
        "content": "<p>I wonder if it would be possible to generate rewrite rules just by listing an opcodes properties (eg associative, commutative, neutral element, absorbing element)</p>",
        "id": 342650430,
        "sender_full_name": "kmeakin",
        "timestamp": 1679081416
    },
    {
        "content": "<p>that's kind of along the lines of what we're thinking with commutativity in particular: marking a term with type <code>(Value Value) Value</code> as commutative and then using it on the LHS should automatically expand into two LHSes (or an or-pattern)</p>",
        "id": 342650695,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679081508
    },
    {
        "content": "<p>which is kind of the moral equivalent of fusing/composing with a general commutativity rule</p>",
        "id": 342650748,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679081524
    },
    {
        "content": "<p>Maybe ISLE needs a macro system <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 342650985,
        "sender_full_name": "kmeakin",
        "timestamp": 1679081621
    },
    {
        "content": "<p>Oh no! This is the part of the conversation where I run away screaming :-)</p>",
        "id": 342651555,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679081843
    },
    {
        "content": "<p>fwiw, I've tried to \"hold the line\" on complexity in the language, because I think we get benefits from simplicity in terms of analyzability, verifiability, ability to have a coherent mental model and understand bugs, etc. It's easy to argue for expressivity from the PoV of the backend author but it carries hidden costs. I'd be worried if we ever gained either generics/polymorphism or a macro system, and so far we've gotten along without them</p>",
        "id": 342651868,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679081946
    },
    {
        "content": "<p>(this may be a little bit unfashionable, and can also lead to ignorance of true benefits a la Golang's eventual adoption of generics, but we are a DSL and can afford different tradeoffs, and also it seems problems that initially call for big hammers can often be solved in different ways after some thought)</p>",
        "id": 342652073,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679082031
    },
    {
        "content": "<p>Good point on the expressiveness vs analyzability tradeoff</p>",
        "id": 342652467,
        "sender_full_name": "kmeakin",
        "timestamp": 1679082205
    },
    {
        "content": "<p>Maybe having a few predefined properties that could be attached to an operator would get 80% of the benefit with 10% of the effort</p>",
        "id": 342653741,
        "sender_full_name": "kmeakin",
        "timestamp": 1679082691
    },
    {
        "content": "<p>eg semigroup, monoid, group</p>",
        "id": 342653953,
        "sender_full_name": "kmeakin",
        "timestamp": 1679082758
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as resolved.</p>",
        "id": 343517384,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679431515
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as unresolved.</p>",
        "id": 344150561,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679627680
    },
    {
        "content": "<p>What about marking instructions as commutative, rather than rewrite rules?</p>\n<p>ie when generating extractors for commutative instructions, generate an extractor that matches both versions:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Type</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">extractor</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">bor</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">or</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">inst_data</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">InstructionData</span><span class=\"p\">.</span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Opcode</span><span class=\"p\">.</span><span class=\"n\">Bor</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_array_2</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">inst_data</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">InstructionData</span><span class=\"p\">.</span><span class=\"n\">Binary</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Opcode</span><span class=\"p\">.</span><span class=\"n\">Bor</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_array_2</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">))))</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 344151148,
        "sender_full_name": "kmeakin",
        "timestamp": 1679627923
    },
    {
        "content": "<p>So, IIUC, the egraph would not be bloated</p>",
        "id": 344151192,
        "sender_full_name": "kmeakin",
        "timestamp": 1679627944
    },
    {
        "content": "<p>That's more-or-less the consequence of what is proposed above (\"marking a term with type <code>(Value Value) Value</code> as commutative\"): the idea is that we'd put a flag on the <code>decl</code>, and then any use of the term in the LHS of a rule would turn into what you describe</p>",
        "id": 344331778,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679679478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/Commutative.20rewrites/near/344331778\">said</a>:</p>\n<blockquote>\n<p>That's more-or-less the consequence of what is proposed above (\"marking a term with type <code>(Value Value) Value</code> as commutative\"): the idea is that we'd put a flag on the <code>decl</code>, and then any use of the term in the LHS of a rule would turn into what you describe</p>\n</blockquote>\n<p>Oh I see, I thought you were referring to rewrite rules, not constructors</p>",
        "id": 344990779,
        "sender_full_name": "kmeakin",
        "timestamp": 1679961807
    }
]