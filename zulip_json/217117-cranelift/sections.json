[
    {
        "content": "<p>How do i define data in a specific coff/elf/mach-o section?</p>",
        "id": 195378083,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1587969904
    },
    {
        "content": "<p>At this point there is no way to get specify a target section when using <code>.define_data()</code>. When using either <code>cranelift-object</code> or <code>cranelift-faerie</code>, you will have to manually define it on the <code>object::write::Object</code> cq <code>faerie::Artifact</code> after you called <code>.finish()</code>.</p>",
        "id": 195391638,
        "sender_full_name": "bjorn3",
        "timestamp": 1587979266
    },
    {
        "content": "<p>Is there a plan to do this? or would be of interest (once I'm proficient enough with cranelift and rust) to do a pull request at some point in the future ?</p>",
        "id": 195687161,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588155169
    },
    {
        "content": "<p>It would be nice to have. I am not sure about the correct api though, as <code>cranelift-simplejit</code> can't support it.</p>",
        "id": 195690490,
        "sender_full_name": "bjorn3",
        "timestamp": 1588157340
    },
    {
        "content": "<p>this would be required to support MacOS in a future version.</p>",
        "id": 195709084,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588167263
    },
    {
        "content": "<p>Which section do you need to specify to support MacOS?</p>",
        "id": 195788314,
        "sender_full_name": "Philip Craig",
        "timestamp": 1588207855
    },
    {
        "content": "<p>On macos, you tend to need to interact with objc. Now that can be done through APIs but the cleanest way is through mach-o sections/segments. The objc runtime then finds the classes and class references and hooks everything up.</p>",
        "id": 195799104,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588223315
    },
    {
        "content": "<p>I can give specifics if needed there (my current llvm based compiler emits objc compatbile classses</p>",
        "id": 195799121,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588223342
    },
    {
        "content": "<p>Ok I don't know anything about objc. If it's only extra metadata that needs to be put in those sections (and not the code/data itself), then you may be able to add it via the <code>object</code> APIs after module::finish.</p>",
        "id": 195801947,
        "sender_full_name": "Philip Craig",
        "timestamp": 1588227758
    },
    {
        "content": "<blockquote>\n<p>this would be required to support MacOS in a future version.</p>\n</blockquote>\n<p>Can you say more about why that is?</p>",
        "id": 195830638,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588249125
    },
    {
        "content": "<p>Maybe he was talking about the fact that apple is slowly making LLVM bitcode mandatory to distribute apps in the app store? This is stored in a certain section of the object file.</p>",
        "id": 195831788,
        "sender_full_name": "bjorn3",
        "timestamp": 1588249897
    },
    {
        "content": "<p>Ah, interesting. That'd make sense, I guess, and might well be something we need to address eventually</p>",
        "id": 195832614,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588250359
    },
    {
        "content": "<p>rustc_codegen_llvm also has this problem, as it uses a different LLVM version. Currently it just generates a dummy bitcode and clang argument section to please the linker for iOS.</p>",
        "id": 195833047,
        "sender_full_name": "bjorn3",
        "timestamp": 1588250594
    },
    {
        "content": "<p>oooh, good point! Does that mean that currently it's not possible to ship Rust code to iOS in production?</p>",
        "id": 195833457,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588250842
    },
    {
        "content": "<p><a href=\"https://github.com/getditto/rust-bitcode\" title=\"https://github.com/getditto/rust-bitcode\">https://github.com/getditto/rust-bitcode</a> has a script to recompile rustc against the apple version of LLVM.</p>\n<p>See also <a href=\"https://github.com/rust-lang/rust/issues/35968\" title=\"https://github.com/rust-lang/rust/issues/35968\">https://github.com/rust-lang/rust/issues/35968</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/getditto/rust-bitcode\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/37997887?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/getditto/rust-bitcode\" title=\"getditto/rust-bitcode\">getditto/rust-bitcode</a></div><div class=\"message_embed_description\">Rust toolchain for Xcode-compatible iOS bitcode. Contribute to getditto/rust-bitcode development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/35968\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/35968\" title=\"Support Apple app store bitcode · Issue #35968 · rust-lang/rust\">Support Apple app store bitcode · Issue #35968 · rust-lang/rust</a></div><div class=\"message_embed_description\">Bitcode is the future of Apple&#39;s app distribution and we don&#39;t support it now. Doing so is tricky because Apple choses whatever rev of LLVM they want and upgrade it per their whims. We can&amp;...</div></div></div>",
        "id": 195834183,
        "sender_full_name": "bjorn3",
        "timestamp": 1588251269
    },
    {
        "content": "<p>thanks!</p>",
        "id": 195835095,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588251744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> what I meant was that for Objc classes (Which on OSX are kind of a requirement to do anything on the OS) you need to emit data with pointers to functions and other data in special sections the runtime knows.</p>",
        "id": 195863058,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588263231
    },
    {
        "content": "<p>Ah, so you didn't mean a future version of macOS, but a future version of Wasmtime, got it!</p>\n<p>I think I still don't fully understand, though—would having this data in the correct format give us good ObjC bindings that people could use to create and interact with Wasm instances, as opposed to them having to go through the C API?</p>",
        "id": 195864193,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1588263732
    },
    {
        "content": "<p>so there's two ways to to access the objc api</p>",
        "id": 195865027,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588264100
    },
    {
        "content": "<p>with objc_* c apis</p>",
        "id": 195865035,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588264105
    },
    {
        "content": "<p>which you might imagine, are a pain</p>",
        "id": 195865052,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1588264112
    }
]