[
    {
        "content": "<p>Hello people!  Quick question -- does cranelift require reducible control-flow graphs?</p>",
        "id": 264158761,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1638972119
    },
    {
        "content": "<p>Cranelift doesn't require it.</p>",
        "id": 264163150,
        "sender_full_name": "bjorn3",
        "timestamp": 1638974101
    },
    {
        "content": "<p>cool, tx.  (also how do you know?  wasm graphs won't contain these initially; you can only get them after jump threading or such...)</p>",
        "id": 264163747,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1638974368
    },
    {
        "content": "<p>context is i was thinking of having a poke at funclets or similar idioms</p>",
        "id": 264163883,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1638974422
    },
    {
        "content": "<p>rustc_codegen_cranelift doesn't turn potentially irreducable control flow from rustc MIR into reducable control flow when generating cranelift ir</p>",
        "id": 264164001,
        "sender_full_name": "bjorn3",
        "timestamp": 1638974479
    },
    {
        "content": "<p>I never got any issues from this.</p>",
        "id": 264164040,
        "sender_full_name": "bjorn3",
        "timestamp": 1638974511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"396878\">Andy Wingo</span> <a href=\"#narrow/stream/217117-cranelift/topic/reducible.20cfgs.3F/near/264163883\">said</a>:</p>\n<blockquote>\n<p>context is i was thinking of having a poke at funclets or similar idioms</p>\n</blockquote>\n<p>that isn't supported by cranelift ir yet</p>",
        "id": 264164134,
        "sender_full_name": "bjorn3",
        "timestamp": 1638974543
    },
    {
        "content": "<p>that's why i was thinking of having a poke at it</p>",
        "id": 264164418,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1638974672
    },
    {
        "content": "<p>Have you seen <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3427\">https://github.com/bytecodealliance/wasmtime/issues/3427</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2049\">https://github.com/bytecodealliance/wasmtime/issues/2049</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\">https://github.com/bytecodealliance/wasmtime/issues/1677</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3427\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f62ba6fa3ffe804a748a154d453ef6a557527ed5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343037653835626162323730613961616630353135376430613435643731656438313534386366626131316334326563666264663430633261306530336231652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33343237)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3427\" title=\"Implementation strategy for the Exception Handling proposal · Issue #3427 · bytecodealliance/wasmtime\">Implementation strategy for the Exception Handling proposal · Issue #3427 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I&#39;ve been interested in having the Exception Handling proposal supported in Wasmtime, so I looked into possible ways to implement it. There&#39;s been some prior discussion in issues #2049 and ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2049\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0176966dfd310e4e1875d0d038ae4ccc1b57b570\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363264613861646664353739633137353663636238623439353764643462636366343333316336373836343537633361333565656635363766616638356638652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f32303439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2049\" title=\"Exception support · Issue #2049 · bytecodealliance/wasmtime\">Exception support · Issue #2049 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Cranelift currently doesn&#39;t support SEH (but has some support for finally I think). This is a feature request to support properly exception (landingpads on Posix, SEH on windows, maybe ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/41ddd7181cb63424b1c7f787e3be4db4dfc20753\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306161303238316135663333336237316131626337656233666438316366626331343036633636336231306434313932343132393030383639316134363134662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31363737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\" title=\"Support cleanup during unwinding · Issue #1677 · bytecodealliance/wasmtime\">Support cleanup during unwinding · Issue #1677 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Currently the generated unwinding information only restores registers. This issue proposes to make it possible to also run cleanup actions like running destructors during unwinding. Benefit...</div></div></div>",
        "id": 264164677,
        "sender_full_name": "bjorn3",
        "timestamp": 1638974786
    },
    {
        "content": "<p>no i had not, thank you for those pointers!</p>",
        "id": 264164941,
        "sender_full_name": "Andy Wingo",
        "timestamp": 1638974895
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/wasmtime/tree/eh_cleanup\">https://github.com/bjorn3/wasmtime/tree/eh_cleanup</a> was an experiment of mine for implementing it. Never finished it though.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/wasmtime/tree/eh_cleanup\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/53094f6bfcece4e9efa6445fe7e0badb2e765b4b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306139316466376666313630623833363165613261346632303033613634363265643038343530383838306666313936626639313535396639376264333535382f626a6f726e332f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/wasmtime/tree/eh_cleanup\" title=\"GitHub - bjorn3/wasmtime at eh_cleanup\">GitHub - bjorn3/wasmtime at eh_cleanup</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - GitHub - bjorn3/wasmtime at eh_cleanup</div></div></div>",
        "id": 264165264,
        "sender_full_name": "bjorn3",
        "timestamp": 1638975033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"396878\">@Andy Wingo</span> to add some confirmation here, the backend parts (regalloc, cfg lowering to branches) were explicitly designed to handle irreducible control flow, and if there's something that breaks with it, I'd consider it a bug; happy to jump on any issues that arise!</p>",
        "id": 264183077,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1638981882
    }
]