[
    {
        "content": "<p>Hello everyone, I am working on GPU/AI compilers and have a strong interest in cranelift.</p>\n<p>The idea of multi-layer IR and progressive lowering is gaining attention due to the popularity of MLIR. Compared to previous approaches to put LLVM IR (or cranelift IR) as the central IR, multi-layer IR often improves engineering efficiency and maintainability by gradually breaking down structured semantics. In the AI ecosystem, MLIR is becoming increasingly crucial as many frameworks like TensorFlow, XLA, Triton, JAX, IREE use it for their compilation toolchains. Additionally, MLIR is making significant contributions to traditional compilers such as flang and clangir, as well as circuit compilers like CIRCT.</p>\n<p>While I know that MLIR has Rust bindings, I wonder if having a native multi-layer IR compiler infrastructure within the Rust ecosystem, with close integrating of cranelift IR as a backend IR, could simplify developing any (CPU/GPU/AI/..) compilers using Rust. And I wonder if we could create a new project for this purpose, how would such a framework be different from MLIR? How would it be designed based on Rust's features? Also since rustc itself is based on multi-level lowering, any chance we can find from it about how we can simplify construction of these compilers?</p>\n<p>Sorry this might be off-topic but I believe people in the cranelift community may find this interesting and give some suggestions.</p>",
        "id": 482787586,
        "sender_full_name": "Twice",
        "timestamp": 1731777869
    },
    {
        "content": "<p>MLIR wouldn't benefit Cranelift or Wasmtime. It would only add compile time overhead and if you want the best runtime performance you already should be using LLVM instead. Rustc wouldn't benefit from replacing any of it's internal IR's with MLIR either as MLIR it closely tied with the LLVM ecosystem AFAIK while rustc needs to support backends for GCC and Cranelift too. In addition rustc needs a whole lot of custom serialization logic for serializing things into the crate metadata and incr comp cache and in both cases it needs to be possible to deserialize (part of the data for) a single function at a time, while I think MLIR requires deserializing a whole module at once. The MLIR C api (which rustc would need to use as calling C++ api's would need a wrapper exposing a C api) is also unstable.</p>",
        "id": 482857838,
        "sender_full_name": "bjorn3",
        "timestamp": 1731846319
    },
    {
        "content": "<p>Hmm.. if what you are referring to as MLIR is the subproject in LLVM, I think this may not be relevant to my proposal: I did not intend to use MLIR to replace <strong>anything</strong>. My idea is to provide a reusable compiler infrastructure (written in Rust) that can be used in many different compilers to save development time (instead of just a low-level IR like LLVM/cranelift IR). And this infrastructure may closely resemble the design of MLIR (or it may have many differences, which is exactly what I hope to discuss).</p>\n<p>Also you mentioned that \"as MLIR it closely tied with the LLVM ecosystem\", and I think it's one of the reasons why a (multi-level) compiler infrastructure in Rust ecosystem tied to cranelift (and maybe also LLVM/SPIRV..) would have potential benefits.</p>",
        "id": 482860944,
        "sender_full_name": "Twice",
        "timestamp": 1731848865
    },
    {
        "content": "<p>In addition, from my understanding of MLIR, the target IR of MLIR is not necessarily LLVM IR. Currently, in addition to LLVM IR, MLIR can target to SPIRV and C++ code (if you want to add a new target IR, just add a new \"dialect\" to MLIR and provide some \"conversion\" patterns/passes).</p>\n<p>You also mentioned incremental compilation, which is something I am interested in. If we can have a good design of the compiler framework/infrastruture that allows users to easily support incremental compilation, it can also reduce a lot of work (such as serialization, as you mentioned).</p>",
        "id": 482862297,
        "sender_full_name": "Twice",
        "timestamp": 1731850162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"610178\">Twice</span> <a href=\"#narrow/stream/217117-cranelift/topic/Multi-level.20IR.20infrastructure.20in.20Rust.20ecosystem.3F/near/482787586\">said</a>:</p>\n<blockquote>\n<p>While I know that MLIR has Rust bindings, I wonder if having a native multi-layer IR compiler infrastructure within the Rust ecosystem, with close integrating of cranelift IR as a backend IR, could simplify developing any (CPU/GPU/AI/..) compilers using Rust. And I wonder if we could create a new project for this purpose, how would such a framework be different from MLIR? How would it be designed based on Rust's features? Also since rustc itself is based on multi-level lowering, any chance we can find from it about how we can simplify construction of these compilers?</p>\n</blockquote>\n<p>This might be a good starting point - <a href=\"https://github.com/vaivaswatha/pliron\">Pliron</a>. Although the project is still in its early stages, the author has presented some compelling arguments against MLIR’s Rust bindings through the C API and how a native Rust-based compiler IR framework can be advantageous in this context. By the way, he mentions plans to add a (PoC) Cranelift IR dialect, but I don’t believe he has gotten around to implementing it yet.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/vaivaswatha/pliron\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/56ee9284ed95ac6f15dbd6d81e63e43ae2d34298/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373931353366623937363030373636633432353263313766393532646663616535626162306564326162653331353837626266336338616330653564653437622f76616976617377617468612f706c69726f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/vaivaswatha/pliron\" title=\"GitHub - vaivaswatha/pliron: Programming Languages Intermediate Representation\">GitHub - vaivaswatha/pliron: Programming Languages Intermediate Representation</a></div><div class=\"message_embed_description\">Programming Languages Intermediate Representation. Contribute to vaivaswatha/pliron development by creating an account on GitHub.</div></div></div>",
        "id": 482871457,
        "sender_full_name": "Nihal Pasham",
        "timestamp": 1731857422
    },
    {
        "content": "<blockquote>\n<p>Hmm.. if what you are referring to as MLIR is the subproject in LLVM, I think this may not be relevant to my proposal: I did not intend to use MLIR to replace <strong>anything</strong>. My idea is to provide a reusable compiler infrastructure (written in Rust) that can be used in many different compilers to save development time (instead of just a low-level IR like LLVM/cranelift IR). And this infrastructure may closely resemble the design of MLIR (or it may have many differences, which is exactly what I hope to discuss).</p>\n</blockquote>\n<p>My bad. I though you were proposing to use LLVM's MLIR.</p>",
        "id": 482872496,
        "sender_full_name": "bjorn3",
        "timestamp": 1731858284
    },
    {
        "content": "<blockquote>\n<p>This might be a good starting point - Pliron.</p>\n</blockquote>\n<p>Wow, I've never heard of that before. Thank you for bringing it to my attention!</p>\n<p>I read the author's excellent <a href=\"https://github.com/vaivaswatha/pliron/wiki/Introduction\">introduction</a> and <a href=\"https://cgithub.com/vaivaswatha/pliron/wiki/Comparison-with-other-compiler-frameworks\">comparison</a>, which explains many things. I will continue to explore this project : )</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/vaivaswatha/pliron/wiki/Introduction\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/56ee9284ed95ac6f15dbd6d81e63e43ae2d34298/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373931353366623937363030373636633432353263313766393532646663616535626162306564326162653331353837626266336338616330653564653437622f76616976617377617468612f706c69726f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/vaivaswatha/pliron/wiki/Introduction\" title=\"Introduction\">Introduction</a></div><div class=\"message_embed_description\">Programming Languages Intermediate Representation. Contribute to vaivaswatha/pliron development by creating an account on GitHub.</div></div></div>",
        "id": 482918603,
        "sender_full_name": "Twice",
        "timestamp": 1731897279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"610178\">@Twice</span> this isn't a fully formed thought but you might also want to look into the nanopass framework and related papers for inspiration of a macro or something for Rust</p>\n<p><a href=\"https://nanopass.org/documentation.html\">https://nanopass.org/documentation.html</a></p>\n<p>seems like the kind of thing you might like</p>",
        "id": 486148248,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1733334622
    }
]