[
    {
        "content": "<p>Hi, I've just started working on cranelift and I'm trying to do some pattern matching which involves inspecting values and not just the input opcode. From the instruction I'm lowering, I want to look at the two inputs and figure out if each of them is using the same input value (same virtual register?)  Is this possible, or is lowering just not the place where this can happen? I'm coming from LLVM, so any description is those terms of how instructions are represented and can be queried would be most welcome.</p>",
        "id": 243167618,
        "sender_full_name": "Sam Parker",
        "timestamp": 1624026304
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general/topic/Inspecting.20inputs.20during.20cranelift.20lowering\">#general &gt; Inspecting inputs during cranelift lowering</a> by <span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span></p>",
        "id": 243167918,
        "sender_full_name": "Notification Bot",
        "timestamp": 1624026423
    },
    {
        "content": "<p>Hi Sam, and welcome! I moved this topic to the #cranelift stream for more visibility to folks focusing on Cranelift. Many of them will probably only be around a bit later in the day, though <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 243168120,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1624026502
    },
    {
        "content": "<p>I think the <code>Shuffle</code> operation is doing that in the x64 backend: it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/a64abf9b7650ed9f2916b030cb92cb9dfbb1adb2/cranelift/codegen/src/isa/x64/lower.rs#L2660\">checks whether its two operands live in the same register</a> and emits a different lowering if that is the case.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/a64abf9b7650ed9f2916b030cb92cb9dfbb1adb2/cranelift/codegen/src/isa/x64/lower.rs#L2660\" style=\"background-image: url(https://opengraph.githubassets.com/a876a39d19f7b09f2083380cb3a06eb125c8966995c06bf48deef33e7824c6a5/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/a64abf9b7650ed9f2916b030cb92cb9dfbb1adb2/cranelift/codegen/src/isa/x64/lower.rs#L2660\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 243180707,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1624032406
    },
    {
        "content": "<p>Right, we can do the comparisons on registers once they've been 'put', but can I inspect the inputs to the inputs (which I assumed haven't been visited yet)? From my extremely limited understanding, it looks like lowering is done with a per-instruction context, which is why I'm suspecting I can't look at much but the current instruction.</p>",
        "id": 243359018,
        "sender_full_name": "Sam Parker",
        "timestamp": 1624268321
    },
    {
        "content": "<p>And the answer is yes... put_input_in_reg can be used on the input's inputs :)</p>",
        "id": 243363592,
        "sender_full_name": "Sam Parker",
        "timestamp": 1624271469
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"421408\">@Sam Parker</span> , there are several lowering patterns in the current backends that look beyond the inputs to the currently-being-lowered instruction; see e.g. <code>lower_to_amode</code> in aarch64 (looks through extends and a tree of adds to find all addends), or xext/uext handling in aarch64, or uext handling in x64</p>",
        "id": 243400734,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1624289777
    },
    {
        "content": "<p>and, indeed, once you have an input further up the operand tree you can get it in a reg directly, as you've found!</p>",
        "id": 243400787,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1624289803
    },
    {
        "content": "<p>note that some care should be taken when merging effectful ops -- see the <code>sink</code> method on <code>LowerCtx</code> if, e.g., you happen to merge a load</p>",
        "id": 243400866,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1624289844
    }
]