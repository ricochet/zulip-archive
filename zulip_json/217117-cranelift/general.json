[
    {
        "content": "<p>Starting a new topic for general chatting, as a possible starting point for beginners and newcomers in the Cranelift stream, and so we can get a link to it and put it in README etc.</p>",
        "id": 188737505,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1582296437
    },
    {
        "content": "<p>Has anyone successfully cross-compiled wasmtime / Cranelift with <code>cargo --target ...</code>? I'm trying to build an aarch64 binary and run it with qemu-aarch64, to avoid slow CPU on my physical aarch64 machine (RPi4). I'm running into an issue where some part of the build system is invoking native (x86) <code>cc</code>. I've never cross-compiled with the Cargo toolchain in general and I'm curious if this is supposed to be supported...</p>",
        "id": 188776516,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582320593
    },
    {
        "content": "<p>What crate invokes cc?</p>",
        "id": 188776769,
        "sender_full_name": "bjorn3",
        "timestamp": 1582320771
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>: see cross compilation question above ^</p>",
        "id": 188776823,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582320831
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> in theory it should work just fine with the right configuration, but compiling for aarch64 won't succeed for wasmtime at least because it has x86/x86_64-specific things and will liekly fail to link/resolve/etc</p>",
        "id": 188776931,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582320896
    },
    {
        "content": "<p>cranelift however should be comipleable to aarch64 (I think?), but can you gist the error you're seeing?</p>",
        "id": 188776950,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582320911
    },
    {
        "content": "<p>Ah, I just discovered I needed some config in <code>~/.cargo/config</code> (as per <a href=\"https://github.com/japaric/rust-cross\" target=\"_blank\" title=\"https://github.com/japaric/rust-cross\">japaric/rust-cross</a>), namely</p>\n<div class=\"codehilite\"><pre><span></span>[target.aarch64-unknown-linux-gnu]\nlinker = &quot;aarch64-linux-gnu-gcc&quot;\n</pre></div>\n\n\n<p>I'm now just seeing a missing symbol <code>__chkstk</code> in <code>wasmtime_jit::link::link_module</code>, which I suppose is some of the platform-specific glue you mentioned. How difficult do you think it would be to stub things out? (I just want to get far enough to try a \"hello world\" and shake out all my <code>unimplemented!()</code>'s in my new arm64 backend...)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/japaric/rust-cross\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/5018213?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/japaric/rust-cross\" target=\"_blank\" title=\"japaric/rust-cross\">japaric/rust-cross</a></div><div class=\"message_embed_description\">Everything you need to know about cross compiling Rust programs! - japaric/rust-cross</div></div></div>",
        "id": 188777277,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582321173
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> to get things working at all you can use stubs like in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/943\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/943\">https://github.com/bytecodealliance/wasmtime/pull/943</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/943\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/943\" target=\"_blank\" title=\"Fix compilation for armv7 by pepyakin · Pull Request #943 · bytecodealliance/wasmtime\">Fix compilation for armv7 by pepyakin · Pull Request #943 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Provide a dummy symbol for PROBESTACK to make wasmtime compile on armv7.</div></div></div>",
        "id": 188777533,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582321403
    },
    {
        "content": "<p>which will likely merge soon anyway</p>",
        "id": 188777541,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582321410
    },
    {
        "content": "<p>and yeah there you need to configure the linker for cargo to pass to rustc to use</p>",
        "id": 188777561,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582321428
    },
    {
        "content": "<p>Excellent, will take a look -- thanks very much!</p>",
        "id": 188777637,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582321482
    },
    {
        "content": "<p>is \"v0 -&gt; v1\" a regmove? I can't find where that syntax is printed</p>",
        "id": 189137532,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582738744
    },
    {
        "content": "<p>hard to search for -&gt; in rust code :P</p>",
        "id": 189137546,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582738756
    },
    {
        "content": "<p>its what happens when <code>v0</code> becomes an alias for <code>v1</code></p>",
        "id": 189137599,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582738798
    },
    {
        "content": "<p>I see, I guess those are skipped when iterating over insts in a block?</p>",
        "id": 189137699,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582738838
    },
    {
        "content": "<p>With <code>for inst in f.layout.block_insts(bb) {</code></p>",
        "id": 189137726,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582738858
    },
    {
        "content": "<p>or maybe there is something which replaces the aliases with the actual value</p>",
        "id": 189137918,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582738968
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> Right. They're not instructions, they're just aliases.</p>",
        "id": 189137923,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582738969
    },
    {
        "content": "<p>see <a href=\"https://docs.rs/cranelift-codegen/0.59.0/cranelift_codegen/ir/dfg/struct.DataFlowGraph.html#method.change_to_alias\" target=\"_blank\" title=\"https://docs.rs/cranelift-codegen/0.59.0/cranelift_codegen/ir/dfg/struct.DataFlowGraph.html#method.change_to_alias\">https://docs.rs/cranelift-codegen/0.59.0/cranelift_codegen/ir/dfg/struct.DataFlowGraph.html#method.change_to_alias</a> and related methods</p>",
        "id": 189137998,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1582739022
    },
    {
        "content": "<p>is there a reason they need to stay around, rather than the instructions being updated?</p>",
        "id": 189138124,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582739090
    },
    {
        "content": "<p>I think the main reason is that this design avoids the need for def-to-use linkage -- otherwise one needs to find all uses to do the rewrite.</p>",
        "id": 189138207,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582739148
    },
    {
        "content": "<p>ah good point. <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> I think some of the new backend code is wrong then, because it is not following the aliases</p>",
        "id": 189138309,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582739198
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> I see, details welcome if you've found a bug :-)</p>",
        "id": 189138406,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582739279
    },
    {
        "content": "<p>You can call <code>DataFlowGraph::resolve_aliases</code> on a value if you want to look through aliases</p>",
        "id": 189138489,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582739322
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> ah, I've found at least one case in <code>LowerCtx</code> where it doesn't resolve aliases. I'll audit for this, but specifics of what you ran into would be useful as well, thanks!</p>",
        "id": 189138663,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582739430
    },
    {
        "content": "<p>The one I found was in the edge-blocks phi parts</p>",
        "id": 189139185,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582739736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> the best way to do this would be to replace all value_regs[] lookup with a function that calls <code>DataFlowGraph::resolve_aliases</code></p>",
        "id": 189139248,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582739770
    },
    {
        "content": "<p>Yup, on it -- thanks for finding this!</p>",
        "id": 189139280,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582739801
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> <code>DataFlowGraph::value_def()</code> already resolves aliases, so you did it eagerly in a few places, not a big deal though</p>",
        "id": 189204230,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582801713
    },
    {
        "content": "<p>Does <code>clif-util wasm</code>translate the entire wasm module to CLIF and then compile it? Does it translate per-function or?<br>\nedit: I think it's eager, I found <code>src/wasm.rs</code>.</p>",
        "id": 189302660,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582890142
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> why are the aliases printed per block?</p>",
        "id": 189328282,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582909135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> The aliases don't have an inherent location, so they could go anywhere.</p>",
        "id": 189328447,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582909242
    },
    {
        "content": "<p>Ok, that's what I expected. Just surprising to see them in random blocks</p>",
        "id": 189328517,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582909290
    },
    {
        "content": "<p>It's not always at the top of a block, although that's common because the SSA algorithm oftgen emits aliases for block parameters.</p>",
        "id": 189328530,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582909300
    },
    {
        "content": "<p>For aliases of instruction values, we print them immediately after the instructions whose values they're aliasing</p>",
        "id": 189328613,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582909326
    },
    {
        "content": "<p>Ah I see that now. I was mostly seeing them at the start of the block, due to large numbers of block arguments</p>",
        "id": 189328658,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1582909388
    },
    {
        "content": "<p>Why does rust code compiled to wasm, have vmctx params in the clif?</p>",
        "id": 189882223,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583493353
    },
    {
        "content": "<p>The <code>vmctx</code> is necessary to get for example the location of the heap</p>",
        "id": 189882346,
        "sender_full_name": "bjorn3",
        "timestamp": 1583493456
    },
    {
        "content": "<p>Ah, for example wasmtime will setup something to pass there?</p>",
        "id": 189882369,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583493478
    },
    {
        "content": "<p>Yes</p>",
        "id": 189882415,
        "sender_full_name": "bjorn3",
        "timestamp": 1583493489
    },
    {
        "content": "<p>With <code>fn0 = u0:827 sig0</code>, is that u0:827 actually an entity reference to another function? I thought clif functions were insulated from all other functions</p>",
        "id": 189883024,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583494138
    },
    {
        "content": "<p><code>u0:827</code> is a number that doesn't have any meaning during compilation. After compilation the user of cranelift-codegen (for example cranelift-module, or wasmtime) interprets it to determine what the target of a relocations is.</p>",
        "id": 189883247,
        "sender_full_name": "bjorn3",
        "timestamp": 1583494326
    },
    {
        "content": "<p>Aha, so the user has to keep track of which functions CLIF functions are which numbers</p>",
        "id": 189883298,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1583494384
    },
    {
        "content": "<p>Yes, except when using cranelift-module, in which case cranelift-module does it for you.</p>",
        "id": 189883392,
        "sender_full_name": "bjorn3",
        "timestamp": 1583494449
    },
    {
        "content": "<p>Can anyone online give me a quick review of a refactoring PR? No functionality changed... <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1246\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1246\">https://github.com/bytecodealliance/wasmtime/pull/1246</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1246\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1246\" target=\"_blank\" title=\"Refactor SIMD implementation by abrown · Pull Request #1246 · bytecodealliance/wasmtime\">Refactor SIMD implementation by abrown · Pull Request #1246 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Before adding the remaining SIMD instructions, I thought it would be good to clean up the current implementation. I have tried to be very careful to avoid any change to behavior when renaming/movin...</div></div></div>",
        "id": 189920742,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1583519367
    },
    {
        "content": "<p>Hello. Could someone review/merge my PRs (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/1382\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1382\">https://github.com/bytecodealliance/wasmtime/pull/1382</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1534\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1534\">https://github.com/bytecodealliance/wasmtime/pull/1534</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1510\">https://github.com/bytecodealliance/wasmtime/pull/1510</a>)?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1382\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1382\" title=\"Support sealing blocks created by cranelift_frontend::Switch by teapotd · Pull Request #1382 · bytecodealliance/wasmtime\">Support sealing blocks created by cranelift_frontend::Switch by teapotd · Pull Request #1382 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR introduces a method to seal generated blocks during emit in cranelift_frontend::Switch. Fixes #1323.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1534\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1534\" title=\"[bugpoint] Remove block params by teapotd · Pull Request #1534 · bytecodealliance/wasmtime\">[bugpoint] Remove block params by teapotd · Pull Request #1534 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR adds a mutator for bugpoint that attempts to replace block params with constants. Fixes #1142.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1510\" title=\"Always check if struct-return parameter is needed by teapotd · Pull Request #1510 · bytecodealliance/wasmtime\">Always check if struct-return parameter is needed by teapotd · Pull Request #1510 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Current implementation of legalize_signature for x86 ABI assumes struct-return parameters can be generated only for multi-return functions. This is incorrect: functions can become multi-return afte...</div></div></div>",
        "id": 195734444,
        "sender_full_name": "teapotd",
        "timestamp": 1588176929
    },
    {
        "content": "<p>I'll take a look at #1382</p>",
        "id": 195735020,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1588177177
    },
    {
        "content": "<p>What are valid values for <code>b8/16/32/64</code> types? According to <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/docs/ir.md#boolean-types\">Cranelift IR docs</a>, they are either all zeros or all ones, but when I tried <code>bconst.b8 true</code> I got <code>1</code>, not <code>0xFF</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/docs/ir.md#boolean-types\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/docs/ir.md#boolean-types\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 198816881,
        "sender_full_name": "teapotd",
        "timestamp": 1590524661
    },
    {
        "content": "<p>On the other hand, <code>bnot</code> for <code>b32</code> negates all bits and <code>icmp</code> for vector types yields masks filled with zeroes or ones on x86, as boolean vector type.</p>",
        "id": 198819657,
        "sender_full_name": "teapotd",
        "timestamp": 1590526164
    },
    {
        "content": "<blockquote>\n<p>Several larger boolean types are also defined, primarily to be used as SIMD element types. They can be stored in memory, and are represented as either all zero bits or all one bits.</p>\n</blockquote>",
        "id": 198829945,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590532506
    },
    {
        "content": "<p>So, I read that as: the SIMD types do have a defined representation but the scalar types may not</p>",
        "id": 198829971,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590532531
    },
    {
        "content": "<p>i.e. you have to use <code>bint</code> to get an integer value out of a <code>b8</code> but if you extracted a lane of a <code>b8x16</code> it would be either <code>0x00</code> or <code>0xff</code></p>",
        "id": 198830079,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590532609
    },
    {
        "content": "<p>Hm, if you create a boolean vector with <code>vconst</code> it's using <code>0</code>/<code>1</code>: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/filetests/filetests/isa/x86/simd-vconst-rodata.clif#L13-L19\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/filetests/filetests/isa/x86/simd-vconst-rodata.clif#L13-L19</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/filetests/filetests/isa/x86/simd-vconst-rodata.clif#L13-L19\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/filetests/filetests/isa/x86/simd-vconst-rodata.clif#L13-L19\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 198830584,
        "sender_full_name": "teapotd",
        "timestamp": 1590533035
    },
    {
        "content": "<p><span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> then something is not right: perhaps the documentation should change or perhaps <code>vconst.BxN</code> should change... since I don't do a lot with the <code>BxN</code> types I haven't noticed any issues</p>",
        "id": 198831066,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590533342
    },
    {
        "content": "<p>And, thinking about it more, it is the documentation that is correct: it should match the Wasm SIMD spec which says</p>\n<blockquote>\n<p>The comparison operations all compare two vectors lane-wise, and produce a mask vector with the same number of lanes as the input interpretation where the bits in each lane are 0 for false and all ones for true.</p>\n</blockquote>",
        "id": 198831211,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590533436
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#comparisons\">https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#comparisons</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#comparisons\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/simd/blob/master/proposals/simd/SIMD.md#comparisons\" title=\"WebAssembly/simd\">WebAssembly/simd</a></div><div class=\"message_embed_description\">Branch of the spec repo scoped to discussion of SIMD in WebAssembly  - WebAssembly/simd</div></div></div>",
        "id": 198831260,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590533487
    },
    {
        "content": "<p>This should be a relatively simple fix but feel free to open an issue if it wasn't the main point of what you were getting at... your question was more about scalar types?</p>",
        "id": 198831352,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590533547
    },
    {
        "content": "<p>No, I was interested in vector types, as I was looking into <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1187\">#1187</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1187\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1187\" title=\"Improve bitselect codegen with knowledge of operand origin · Issue #1187 · bytecodealliance/wasmtime\">Improve bitselect codegen with knowledge of operand origin · Issue #1187 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature As discussed in WebAssembly/simd#192, the Wasm SIMD bitselect instruction could be lowered to one of the x86 BLEND* family of instructions instead using 3-4 instructions. Benefit Potentiall...</div></div></div>",
        "id": 198831898,
        "sender_full_name": "teapotd",
        "timestamp": 1590533845
    },
    {
        "content": "<p>There's a <a href=\"https://docs.rs/cranelift-codegen/0.63.0/cranelift_codegen/ir/trait.InstBuilder.html#method.vselect\"><code>vselect</code></a> instruction in Cranelift that currently has no encoding and it could be encoded as <code>blend</code> on x86. We could then use <code>vselect</code> instead of <code>bitselect</code> directly in wasm code translator or replace it in preopt.</p>",
        "id": 198832402,
        "sender_full_name": "teapotd",
        "timestamp": 1590534158
    },
    {
        "content": "<p>I'll make fix for vconst</p>",
        "id": 198832506,
        "sender_full_name": "teapotd",
        "timestamp": 1590534246
    },
    {
        "content": "<p>Sounds good; just a heads up that at least PBLENDW should be coming soon-ish: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1765/commits/66216fc1f5f133ebffdba42bf075da6b5cc3c634\">https://github.com/bytecodealliance/wasmtime/pull/1765/commits/66216fc1f5f133ebffdba42bf075da6b5cc3c634</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1765/commits/66216fc1f5f133ebffdba42bf075da6b5cc3c634\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/541880?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1765/commits/66216fc1f5f133ebffdba42bf075da6b5cc3c634\" title=\"Implement fcvt_from_uint (i32x4 -&gt; f32x4) for x86 by abrown · Pull Request #1765 · bytecodealliance/wasmtime\">Implement fcvt_from_uint (i32x4 -&gt; f32x4) for x86 by abrown · Pull Request #1765 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This converts an i32x4 into an f32x4 with some rounding either by using an AVX512VL/F instruction--VCVTUDQ2PS--or a long sequence of SSE4.1 compatible instructions.\nIt is still a draft as it depend...</div></div></div>",
        "id": 198833076,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1590534686
    },
    {
        "content": "<p>does anyone know why cranelift got merged into wasmtime? Just curious really.</p>",
        "id": 203020973,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594058303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"295546\">@Carlo Kok</span> I wrote a comment explaining the reasoning here: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1185#issuecomment-591050388\">https://github.com/bytecodealliance/wasmtime/issues/1185#issuecomment-591050388</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1185#issuecomment-591050388\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1185#issuecomment-591050388\" title=\"Tracking issue for merging the cranelift and wasmtime repositories · Issue #1185 · bytecodealliance/wasmtime\">Tracking issue for merging the cranelift and wasmtime repositories · Issue #1185 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Discussed at yesterday&#39;s meeting I wanted to open an issue tracking progress for merging the wasmtime/cranelift repositories. I think there are three major work items that need to happen: Perfo...</div></div></div>",
        "id": 203022046,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594058829
    },
    {
        "content": "<p>thanks! note that I wasn't complaining. Just curious</p>",
        "id": 203022081,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594058848
    },
    {
        "content": "<p>good read. Thanks</p>",
        "id": 203022217,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594058909
    },
    {
        "content": "<blockquote>\n<p>note that I wasn't complaining. Just curious<br>\nUnderstood, yes, but thank you for emphasizing it! <span aria-label=\"heart\" class=\"emoji emoji-2764\" role=\"img\" title=\"heart\">:heart:</span></p>\n</blockquote>",
        "id": 203023825,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594059874
    },
    {
        "content": "<p>is there a list of supported triples ?</p>",
        "id": 203024527,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594060217
    },
    {
        "content": "<p>So feature wise, things I currently use in LLVM that cranelift doesn't have yet: Exception handling, COMDAT; So I'd say cranelift already has a fairly impressive set of features.</p>",
        "id": 203025271,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594060675
    },
    {
        "content": "<p>x86_64 is the most complete target. aarch64 comes next. x86 is a little worse. risc-v and arm32 are just stubs.</p>",
        "id": 203027183,
        "sender_full_name": "bjorn3",
        "timestamp": 1594061724
    },
    {
        "content": "<p>oh arm32 isn't done at all? IT's a bit hard to see from the codegen repo</p>",
        "id": 203027233,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594061748
    },
    {
        "content": "<p>yes, there are literally no instruction encodings: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c91a9313b532067bb53eea44a182bb0c5bd2ebf4/cranelift/codegen/meta/src/isa/arm32/mod.rs#L73-L77\">https://github.com/bytecodealliance/wasmtime/blob/c91a9313b532067bb53eea44a182bb0c5bd2ebf4/cranelift/codegen/meta/src/isa/arm32/mod.rs#L73-L77</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c91a9313b532067bb53eea44a182bb0c5bd2ebf4/cranelift/codegen/meta/src/isa/arm32/mod.rs#L73-L77\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c91a9313b532067bb53eea44a182bb0c5bd2ebf4/cranelift/codegen/meta/src/isa/arm32/mod.rs#L73-L77\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 203027402,
        "sender_full_name": "bjorn3",
        "timestamp": 1594061821
    },
    {
        "content": "<p>risc-v at least has some: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/riscv/encodings.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/riscv/encodings.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/riscv/encodings.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/cranelift/codegen/meta/src/isa/riscv/encodings.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 203027450,
        "sender_full_name": "bjorn3",
        "timestamp": 1594061850
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>So feature wise, things I currently use in LLVM that cranelift doesn't have yet: arm(32), Exception handling, COMDAT; So I'd say cranelift already has a fairly impressive set of features.</p>\n</blockquote>\n</blockquote>",
        "id": 203027689,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594061968
    },
    {
        "content": "<p>updated :)</p>",
        "id": 203027692,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594061969
    },
    {
        "content": "<p>cranelift is currently transitioning to a new framework for backends. the aarch64 backend has been created using that new framework. the x86_64 backend is currently using the old framework. a new x86_64 backend is being developed, but it is still in a relatively early stage.</p>",
        "id": 203027810,
        "sender_full_name": "bjorn3",
        "timestamp": 1594062017
    },
    {
        "content": "<p>dwarf unwinding support would be useful for <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/\">https://github.com/bjorn3/rustc_codegen_cranelift/</a> too. there is already an issue for it: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\">https://github.com/bytecodealliance/wasmtime/issues/1677</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/17426603?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/\" title=\"bjorn3/rustc_codegen_cranelift\">bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1677\" title=\"Support cleanup during unwinding · Issue #1677 · bytecodealliance/wasmtime\">Support cleanup during unwinding · Issue #1677 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature Currently the generated unwinding information only restores registers. This issue proposes to make it possible to also run cleanup actions like running destructors during unwinding. Benefit...</div></div></div>",
        "id": 203027944,
        "sender_full_name": "bjorn3",
        "timestamp": 1594062109
    },
    {
        "content": "<p>I read that yes (new framework) but i do know x86-32 works too (old backend though)</p>",
        "id": 203028019,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594062133
    },
    {
        "content": "<p>yeah. Just unwinding has some concerns though: win32 is vastly different than win64; and there's exception handling itself too</p>",
        "id": 203028124,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594062198
    },
    {
        "content": "<p>Exception handling and unwinding isn't that different though. At least not on the targets I saw.</p>",
        "id": 203028289,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594062292
    },
    {
        "content": "<p>Cranelift can already generate SEH and .eh_frame tables. They are just treated as not requiring any cleanup.</p>",
        "id": 203028299,
        "sender_full_name": "bjorn3",
        "timestamp": 1594062300
    },
    {
        "content": "<p>ah cool</p>",
        "id": 203028448,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594062374
    },
    {
        "content": "<p>Wasmtime uses them to unwind back to the caller when the wasm code traps or a called rust function panics.</p>",
        "id": 203028539,
        "sender_full_name": "bjorn3",
        "timestamp": 1594062442
    },
    {
        "content": "<p>And this works with win32 seh too?</p>",
        "id": 203029273,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594062885
    },
    {
        "content": "<p>That is impressive</p>",
        "id": 203029291,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594062896
    },
    {
        "content": "<p>I don't know if it works on win32 SEH. As far as I know Wasmtime doesn't work on 32bit yet.</p>",
        "id": 203029460,
        "sender_full_name": "bjorn3",
        "timestamp": 1594062987
    },
    {
        "content": "<p>Ah</p>",
        "id": 203029484,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594063008
    },
    {
        "content": "<p>I want to  tackle COMDAT myself once it's supported in the object code</p>",
        "id": 203255032,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594206671
    },
    {
        "content": "<p>would a feature reqeust for SEH and arm32 be welcome? so there's some place to track and gauge interest?</p>",
        "id": 203255054,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594206706
    },
    {
        "content": "<p>hi! I think there's already an issue open for supporting arm32: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1173\">https://github.com/bytecodealliance/wasmtime/issues/1173</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1173\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1173\" title=\"arm32 support · Issue #1173 · bytecodealliance/wasmtime\">arm32 support · Issue #1173 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">What is the feature or code improvement you would like to do in Cranelift? I would like to add ARM support by implementing ARM (not Thumb) encodings/recipes and abi. I am especially interested in a...</div></div></div>",
        "id": 203258652,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1594209475
    },
    {
        "content": "<p>thanx! Missed that one</p>",
        "id": 203259180,
        "sender_full_name": "Carlo Kok",
        "timestamp": 1594209841
    },
    {
        "content": "<p>a boolean vector's elements are meant to be all 0 or all 1 right?</p>",
        "id": 204555124,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595342278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> they at least encode false or true (i.e., are not vectors of false/true):</p>\n<div class=\"codehilite\"><pre><span></span><code>/// Boolean types: `B1`, `B8`, `B16`, `B32`, `B64`, and `B128`. These all encode &#39;true&#39; or &#39;false&#39;. The\n/// larger types use redundant bits.\n</code></pre></div>",
        "id": 204558586,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595343698
    },
    {
        "content": "<p>(from codegen/src/ir/types.rs)</p>",
        "id": 204558613,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595343708
    },
    {
        "content": "<p>I'm not sure whether a <code>true</code> B128 is meant to be 0....001 or 1...111 though</p>",
        "id": 204558716,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595343735
    },
    {
        "content": "<p>I can't seem to find anything in the old x86 backend that would imply either way... continuing to look</p>",
        "id": 204558977,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595343856
    },
    {
        "content": "<p>Sorry what I meant was that each element was 0x00... or 0xff...</p>",
        "id": 204559139,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595343941
    },
    {
        "content": "<p>Ah, OK, it seems that it must be numeric <code>0</code> or <code>1</code>, because we use a simple zero-extension to go from e.g. <code>B8</code> to <code>I8</code> and the latter must be 0 or 1</p>",
        "id": 204559152,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595343945
    },
    {
        "content": "<p>Look at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L956\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L956</a> for example</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L956\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L956\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 204559248,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595343973
    },
    {
        "content": "<p>Ah, well that is interesting indeed</p>",
        "id": 204559285,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595343993
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> or <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> do you know more?</p>",
        "id": 204559562,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595344103
    },
    {
        "content": "<p>I suppose it has to be 0 / -1 (ff...) given the masking above -- but then that means we have to be careful with <code>bint</code> of the result of that must be 0 / 1</p>",
        "id": 204559621,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595344134
    },
    {
        "content": "<p>I seem to recall that true lanes are all ones, while false lanes are all zeroes, i don't know if it's guaranteed though</p>",
        "id": 204560986,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1595344758
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> you might know ^?</p>",
        "id": 204561044,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1595344787
    },
    {
        "content": "<p>Yeah, I think what Benjamin said is correct: the vector booleans have to be all 0s or all 1s... There was an issue about this, let me dig it up.</p>",
        "id": 204561379,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1595344899
    },
    {
        "content": "<p>Here it is: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1769\">https://github.com/bytecodealliance/wasmtime/pull/1769</a>. This fixed a bug where boolean vector lanes were not all 0s or all 1s. The Cranelift IR documentation describing this is here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#boolean-types\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#boolean-types</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1769\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1769\" title=\"Make vconst BxN match specification by teapotd · Pull Request #1769 · bytecodealliance/wasmtime\">Make vconst BxN match specification by teapotd · Pull Request #1769 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Cranelift IR docs for boolean types say:\n\nSeveral larger boolean types are also defined, primarily to be used as SIMD element types. They can be stored in memory, and are represented as either all ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#boolean-types\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#boolean-types\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 204562317,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1595345248
    },
    {
        "content": "<p>Thanks for the links Andrew!</p>",
        "id": 204563688,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595345833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> looks like aarch64's Bint lowering is wrong?</p>",
        "id": 204564002,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595345979
    },
    {
        "content": "<p>Yes, given the above, it should mask down to the LSB</p>",
        "id": 204564151,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595346038
    },
    {
        "content": "<p>I'll put together a patch unless you want to include this in yours</p>",
        "id": 204564189,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595346057
    },
    {
        "content": "<p>Also icmp / fcmp -- they use <code>cset</code> which yields 0/1. If dest type is &gt; <code>b1</code> then we need a negation</p>",
        "id": 204564298,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595346121
    },
    {
        "content": "<p>Vector comparisons don't use cset</p>",
        "id": 204564646,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595346257
    },
    {
        "content": "<p>Two separate issues I guess -- there's the question of vector lane values (your immediate question) but then there's also the representation of scalar <code>b8</code> / <code>b16</code> / ...</p>",
        "id": 204565563,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595346717
    },
    {
        "content": "<p>For the latter, we should also use the 0 / -1 representation</p>",
        "id": 204565651,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595346755
    },
    {
        "content": "<p>Oh silly me, I was thinking you meant <code>bNxM</code> when you said &gt;<code>b1</code></p>",
        "id": 204565899,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595346865
    },
    {
        "content": "<p>Yup no worries! I'll patch the scalar case</p>",
        "id": 204567528,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1595347603
    },
    {
        "content": "<p>Thanks! And the original reason I went looking into this was a mistake on my side anyway, but Im happy we found this issue due to it :)</p>",
        "id": 204568044,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1595347836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Not sure where this message has gone, but: yesterday i had to pin the version of rustc nightly because staticvec doesn't compile in rustc nightly anymore, and this was breaking the build.</p>",
        "id": 205352295,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596027640
    },
    {
        "content": "<p>opened a PR for static vec, but it's not sufficient as staticvec's CI relies on miri, thus the latest rustc nightly version that supports miri, which is currently 2 weeks old... <a href=\"https://github.com/slightlyoutofphase/staticvec/pull/39\">https://github.com/slightlyoutofphase/staticvec/pull/39</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/slightlyoutofphase/staticvec/pull/39\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/47403582?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/slightlyoutofphase/staticvec/pull/39\" title=\"Remove rustc compiler features to unbreak rustc nightly build by bnjbvr · Pull Request #39 · slightlyoutofphase/staticvec\">Remove rustc compiler features to unbreak rustc nightly build by bnjbvr · Pull Request #39 · slightlyoutofphase/staticvec</a></div><div class=\"message_embed_description\">following landing of rust-lang/rust#73858,\nthe const_saturing_int_methods feature is in a weird nonexisting\nstate (stabilized in a future Rust version), so remove it from the list\nto unblock compil...</div></div></div>",
        "id": 205352430,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596027696
    },
    {
        "content": "<p>Bah, I'll work on updating our CI to be green soon</p>",
        "id": 205353304,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596028113
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 205354788,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> since you're around, can i bother you with more CI questions?</p>",
        "id": 205354803,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028840
    },
    {
        "content": "<p>Sure yeah what's up?</p>",
        "id": 205354835,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596028861
    },
    {
        "content": "<p>I'm trying to mark the cranelift filetests as should_panic with the experimental_x64 feature, but it doesn't seem to be taken into account when i run the tests, unfortunately.</p>",
        "id": 205354847,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028866
    },
    {
        "content": "<p>What's the marker look like?</p>",
        "id": 205354892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596028892
    },
    {
        "content": "<p>i've added <code>#[cfg_attr(feature = \"experimental_x64\", should_panic)</code> above the test in cranelift/tests/filetests.rs, but it does nothing.</p>",
        "id": 205354902,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028896
    },
    {
        "content": "<p>I'm running the tests with <code>cargo --features experimental_x64 --all --exclude lightbeam</code> (+ peepmatic exclusions)</p>",
        "id": 205354946,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028919
    },
    {
        "content": "<p>Is it a #[test] function?</p>",
        "id": 205354947,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596028920
    },
    {
        "content": "<p>yes it is</p>",
        "id": 205354994,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028926
    },
    {
        "content": "<p>And that crate has that feature in cargo.toml?</p>",
        "id": 205355027,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596028947
    },
    {
        "content": "<p>yes</p>",
        "id": 205355085,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596028978
    },
    {
        "content": "<p>Hm weird... Wanna gist your patch and I'll take a look?</p>",
        "id": 205355133,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029002
    },
    {
        "content": "<p>Sure, thanks!</p>",
        "id": 205355422,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029146
    },
    {
        "content": "<p><a href=\"https://paste.mozilla.org/ryemqRPh\">https://paste.mozilla.org/ryemqRPh</a></p>",
        "id": 205355423,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029147
    },
    {
        "content": "<p>Hm and you're not getting compile.failures?</p>",
        "id": 205355579,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029219
    },
    {
        "content": "<p>Nope</p>",
        "id": 205355591,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029226
    },
    {
        "content": "<p>If so then cranelift/cargo.toml may not have the feature?</p>",
        "id": 205355620,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029245
    },
    {
        "content": "<p>I'll dig a bit more in in a sec</p>",
        "id": 205355633,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029254
    },
    {
        "content": "<p>it is there, though: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/Cargo.toml#L51\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/Cargo.toml#L51</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/Cargo.toml#L51\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/Cargo.toml#L51\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 205355691,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029282
    },
    {
        "content": "<p>ok, so new fact: if i run the tests from wasmtime root dir, it doesn't happen. If i run from the wasmtime/cranelift directory, the compile error happens, and the test isn't run if i remove the body addends</p>",
        "id": 205355991,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029431
    },
    {
        "content": "<p>aha</p>",
        "id": 205356609,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029719
    },
    {
        "content": "<p>if you do <code>cargo test -p cranelift-tools --feature ...</code> that doesn't actually do what you would expect</p>",
        "id": 205356622,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029729
    },
    {
        "content": "<p>it's basically a bug in Cargo</p>",
        "id": 205356626,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029732
    },
    {
        "content": "<p>it applies the features to w/e is in the current directory, not the target of <code>-p</code></p>",
        "id": 205356644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029746
    },
    {
        "content": "<p>aha! and if i run in wasmtime with --all, it'll work? let me try this!</p>",
        "id": 205356710,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029766
    },
    {
        "content": "<p>you'll need to do <code>--manifest-path cranelift/Cargo.toml</code> or change the cwd</p>",
        "id": 205356713,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029768
    },
    {
        "content": "<p>nah it won't workwith <code>--all</code> either</p>",
        "id": 205356720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029777
    },
    {
        "content": "<p>there's a bit more info <a href=\"https://doc.rust-lang.org/nightly/cargo/reference/unstable.html#resolver\">here</a> about the unstable feature to fix this</p>",
        "id": 205356790,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596029817
    },
    {
        "content": "<p>oh well, thanks it works with this!</p>",
        "id": 205357046,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029938
    },
    {
        "content": "<p>i'll split the CI steps then</p>",
        "id": 205357063,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596029947
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> well, does it mean that we should be able to run the tests with experimental_x64 in CI? i'm a bit lost regarding how to do this, then</p>",
        "id": 205360771,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596031558
    },
    {
        "content": "<p>I'd probably limit this to a nightly rustc which executes Cargo with the relevant <code>-Z</code> flag</p>",
        "id": 205360895,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596031602
    },
    {
        "content": "<p>so that way we don't have to bend over backwards for this</p>",
        "id": 205360909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596031610
    },
    {
        "content": "<p>great idea!</p>",
        "id": 205362060,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596032120
    },
    {
        "content": "<p>but it causes new compile time errors that i don't quite understand <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 205362091,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596032140
    },
    {
        "content": "<p><a href=\"https://paste.mozilla.org/BtuHrkxb\">https://paste.mozilla.org/BtuHrkxb</a></p>",
        "id": 205362196,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596032176
    },
    {
        "content": "<p>hm interesting</p>",
        "id": 205362319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596032233
    },
    {
        "content": "<p>so what's happening in cargo is that the behavior of the feature resolver is different, where features are less eagerly unified</p>",
        "id": 205362358,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596032252
    },
    {
        "content": "<p>I think that means the wiggle crate depends on <code>syn</code> but doesn't activate the right set of features</p>",
        "id": 205362392,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596032265
    },
    {
        "content": "<p>er, no</p>",
        "id": 205362418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596032275
    },
    {
        "content": "<p>hm I'll have to dig into that later</p>",
        "id": 205362483,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596032287
    },
    {
        "content": "<p>that may actually be a bug in cargo? unsure</p>",
        "id": 205362495,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596032291
    },
    {
        "content": "<p>oops, sorry to cause more work</p>",
        "id": 205366478,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034083
    },
    {
        "content": "<p>heh no worries</p>",
        "id": 205366941,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> btw it looks like wasmtime CI is green, what was the failure you were seeing again?</p>",
        "id": 205366968,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034271
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> oh yeah i added a commit that pinned the version of rustc nightly, let me find that</p>",
        "id": 205367451,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034494
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/commit/2c1d3704653f094a93848a87f79361bca511392b\">https://github.com/bytecodealliance/wasmtime/commit/2c1d3704653f094a93848a87f79361bca511392b</a> was the commit, but i can see there was another CI failure</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/2c1d3704653f094a93848a87f79361bca511392b\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/2c1d3704653f094a93848a87f79361bca511392b\" title=\"CI: use fixed version of Rust nightly following build failures in sta… · bytecodealliance/wasmtime@2c1d370\">CI: use fixed version of Rust nightly following build failures in sta… · bytecodealliance/wasmtime@2c1d370</a></div><div class=\"message_embed_description\">…ticvec</div></div></div>",
        "id": 205367542,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034537
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/runs/918219496?check_suite_focus=true\">https://github.com/bytecodealliance/wasmtime/runs/918219496?check_suite_focus=true</a> was one of the CI failures with staticvec</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/runs/918219496?check_suite_focus=true\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/runs/918219496?check_suite_focus=true\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 205367750,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034615
    },
    {
        "content": "<p>hm did you bump a staticvec version?</p>",
        "id": 205367863,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034658
    },
    {
        "content": "<p>b/c CI for the main branch came back green a few hour sago</p>",
        "id": 205367898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034672
    },
    {
        "content": "<p>no, i did pin the version of rustc nightly running in wasmtime (first link above)</p>",
        "id": 205368422,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034891
    },
    {
        "content": "<p>hm ok well I can try to help with a PR</p>",
        "id": 205368469,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034917
    },
    {
        "content": "<p>but it sounds like local changes may have necessitated a pin</p>",
        "id": 205368531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034930
    },
    {
        "content": "<p>I don't know what to debug if main CI isn't failing</p>",
        "id": 205368549,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034940
    },
    {
        "content": "<p>see also <a href=\"https://github.com/slightlyoutofphase/staticvec/pull/39\">https://github.com/slightlyoutofphase/staticvec/pull/39</a>, but it seems that it requires a miri in rustc nightly to work</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/slightlyoutofphase/staticvec/pull/39\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/47403582?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/slightlyoutofphase/staticvec/pull/39\" title=\"Remove rustc compiler features to unbreak rustc nightly build by bnjbvr · Pull Request #39 · slightlyoutofphase/staticvec\">Remove rustc compiler features to unbreak rustc nightly build by bnjbvr · Pull Request #39 · slightlyoutofphase/staticvec</a></div><div class=\"message_embed_description\">following landing of rust-lang/rust#73858,\nthe const_saturing_int_methods feature is in a weird nonexisting\nstate (stabilized in a future Rust version), so remove it from the list\nto unblock compil...</div></div></div>",
        "id": 205368571,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034948
    },
    {
        "content": "<p>it makes sense that it'd break, but I don't know why main CI isn't failing in tha tcase</p>",
        "id": 205368614,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034968
    },
    {
        "content": "<p>Reverting 2c1d3704653f094a93848a87f79361bca511392b should make the CI fail</p>",
        "id": 205368646,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596034983
    },
    {
        "content": "<p>oooh wait I see</p>",
        "id": 205368674,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034993
    },
    {
        "content": "<p>you landed that on <code>main</code></p>",
        "id": 205368680,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596034996
    },
    {
        "content": "<p>sorry I see now</p>",
        "id": 205368695,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596035003
    },
    {
        "content": "<p>no worries</p>",
        "id": 205368705,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596035007
    },
    {
        "content": "<p>I thought this was just in your PR</p>",
        "id": 205368707,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596035007
    },
    {
        "content": "<p>i did it a bit preemptively because it was blocking a PR landing in spidermonkey</p>",
        "id": 205368734,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596035020
    },
    {
        "content": "<p>ah ok, in any case that's all I would have done, we can't do much until staticvec updates</p>",
        "id": 205368740,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596035022
    },
    {
        "content": "<p>nah no worries</p>",
        "id": 205368751,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596035026
    },
    {
        "content": "<p>just got mixed up what was landed where</p>",
        "id": 205368764,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596035035
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> I think it'd be good to do these kinds of things in their own PR, or at least mention the pinning in the PR they're included in</p>",
        "id": 205369001,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1596035127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> yeah, i mentioned it here on zulip with a mention to Alex, but this message disappeared in the meanwhile, not sure what happened...</p>",
        "id": 205369296,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596035258
    },
    {
        "content": "<p>i'll put a message in the PR next time</p>",
        "id": 205369311,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596035265
    },
    {
        "content": "<p>ah, yeah, the vanished message is very strange. But documenting things like this in a PR is good practice anyway, I think. Though really I'd prefer it to be its own PR, and an issue opened about reverting it at the same time</p>",
        "id": 205369481,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1596035320
    },
    {
        "content": "<p>Right. There's also a speed vs process tradeoff here: opening a new PR would have taken two more CI runs (one for the PR, one to rebase the other PR on top of the first one). And, this is not the first time this is happening after the merger of Wasmtime and Cranelift repositories (i can recall at least two other instances, last being last week, so third time this is happening to me), and because of time zones, people working in europe are more likely to hit the \"unrelated CI failures because of a rustc nightly change\" before anyone else...</p>",
        "id": 205371935,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596036273
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> ok I <a href=\"https://github.com/rust-lang/cargo/issues/8563\">opened a Cargo issue</a> for the wiggle problem you're seeing</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/cargo/issues/8563\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/cargo/issues/8563\" title=\"Testing a proc macro may build with the wrong crates with -Zfeatures=all · Issue #8563 · rust-lang/cargo\">Testing a proc macro may build with the wrong crates with -Zfeatures=all · Issue #8563 · rust-lang/cargo</a></div><div class=\"message_embed_description\">This is unfortunately a bit of a complicated issue. This came up when we tested out using -Zfeatures=all on the wasmtime repository where we got an error that looked like: error[E0277]: the trait b...</div></div></div>",
        "id": 205372071,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596036338
    },
    {
        "content": "<p>in the meantime you can use <code>doctest = false</code> in <code>crates/wiggle/macro/Cargo.toml</code></p>",
        "id": 205372094,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596036358
    },
    {
        "content": "<p>and still use <code>-Zfeatures=all</code> i think</p>",
        "id": 205372140,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596036367
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Thanks a lot! I can run all the tests! (with a few annotations to skip some)</p>",
        "id": 205374739,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596037588
    },
    {
        "content": "<p>that being said, if i try to run a particular test by adding its name to the CLI command, i run into a similar compile error as above, again</p>",
        "id": 205374799,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596037622
    },
    {
        "content": "<p>it's probably a later problem, though, as long as we can run something in the meanwhile</p>",
        "id": 205374838,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596037644
    },
    {
        "content": "<p>Just a heads up: it seems the test_x64 CI has an intermittent failure, not sure yet what causes it, and I won't be around or have time today to investigate it too much, unfortunately.</p>",
        "id": 205614085,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596214344
    },
    {
        "content": "<p>I observed something similar in #2060 but thought it was due to rebasing. It's a bit hard to figure out what is going wrong because all the <code>should_panic</code> tests emit backtraces so there are a lot errors in the logs--is there a way to mute those somehow?</p>",
        "id": 205616867,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1596215890
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>: I think #2071 looks like a good change if we overlook the intermittent CI issues--with Benjamin out, should we merge it or look into the CI issues first?</p>",
        "id": 205617156,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1596216098
    },
    {
        "content": "<p>seems fine by me, but I don't know much about the components in play here</p>",
        "id": 205617563,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1596216348
    },
    {
        "content": "<p>It seems this is good to merge, but I also think we should address the CI intermittent failure somehow; slippery slope to \"manually ignore\" tests</p>",
        "id": 205617653,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1596216390
    },
    {
        "content": "<p>i managed to catch the crash in rr, that i packed so one can reproduce it on a similar CPU (machine cpuinfo is there: <a href=\"https://benj.me/pub/cpuinfo\">https://benj.me/pub/cpuinfo</a>)<br>\nHere's the packed trace directory, to be unzipped and then run with <code>rr replay $trace_dir</code>: <a href=\"https://benj.me/pub/rr-trace.zip\">https://benj.me/pub/rr-trace.zip</a></p>",
        "id": 205620374,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596217847
    },
    {
        "content": "<p>We should probably disable the x64 CI if it's too buggy, though</p>",
        "id": 205620428,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596217880
    },
    {
        "content": "<p>/me disappears</p>",
        "id": 205620435,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1596217884
    },
    {
        "content": "<p>I see someone restarted the CI and this time the new backend step passed; I'll merge #2071 since I can use Benjamin's changes and we can talk more about troubleshooting or disabling the new backend step if it keeps happening (any objections?)</p>",
        "id": 205632515,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1596224138
    },
    {
        "content": "<p>Fwiw, Cranelift has been shipped in Firefox and will be used for wasm compilation on aarch64 devices! Thanks to all who contributed making this possible! cc <span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> <span class=\"user-mention\" data-user-id=\"300050\">@Anton Kirilov</span> etc.</p>",
        "id": 208955060,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1599134031
    },
    {
        "content": "<p>(Also: these two days are company-wide PTO for Mozillians, so Mozillians' activity might be low!)</p>",
        "id": 208955209,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1599134105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> awesome!</p>",
        "id": 208956449,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1599134859
    },
    {
        "content": "<p><span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> <span aria-label=\"confetti\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"confetti\">:confetti:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"ship\" class=\"emoji emoji-1f6a2\" role=\"img\" title=\"ship\">:ship:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <span aria-label=\"confetti\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"confetti\">:confetti:</span> <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 209016163,
        "sender_full_name": "bjorn3",
        "timestamp": 1599160464
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> Hi, I think changing from String -&gt; anyhow broke some of the usefulness of clif-utils errors</p>",
        "id": 210539923,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1600444760
    },
    {
        "content": "<p>previously when it failed, it printed out what it matched / what it missed, but I dont seem to get that now</p>",
        "id": 210540164,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1600444876
    },
    {
        "content": "<p>oh? which ones? <code>anyhow</code> has lots of ability to annotate errors with extra context, and its possible I accidentally forgot to translate some string concatenation into annotated context</p>",
        "id": 210540256,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600444917
    },
    {
        "content": "<p>for example: <code>cargo run -p cranelift-tools -- test cranelift/filetests/filetests/vcode/aarch64/reftypes.clif</code></p>",
        "id": 210540428,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1600444976
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"265780\">Joey Gouly</span> <a href=\"#narrow/stream/217117-cranelift/topic/general/near/210540164\">said</a>:</p>\n<blockquote>\n<p>previously when it failed, it printed out what it matched / what it missed, but I dont seem to get that now</p>\n</blockquote>\n<p>for filetests? its possible that I messed up the <code>if &lt;condition&gt; { print() }</code> logic when translating CLI flags, which should be unrelated to anyhow, although it was the same PR. some of them used <code>flag_print</code> and others used <code>flag_verbose</code>, and I might have messed some of them up</p>",
        "id": 210540517,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600445013
    },
    {
        "content": "<p>if you delete one of the <code>nextln</code> checks, the output you get is: <code>FAIL reftypes.clif: compile</code></p>",
        "id": 210540530,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1600445019
    },
    {
        "content": "<p>let me look into it</p>",
        "id": 210540542,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600445027
    },
    {
        "content": "<p>thanks!</p>",
        "id": 210540882,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1600445165
    },
    {
        "content": "<p>Fix over here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2207\">https://github.com/bytecodealliance/wasmtime/pull/2207</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2207\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2207\" title=\"Make filetest errors report full context by fitzgen · Pull Request #2207 · bytecodealliance/wasmtime\">Make filetest errors report full context by fitzgen · Pull Request #2207 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This provides the full error context, not just the source error&#39;s message. The anyhow::Error&#39;s Display implementation just shows the source error&#39;s message, not any of its context. The ...</div></div></div>",
        "id": 210554052,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600451726
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 210847941,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1600767948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> Hi, I was wondering in general what the plans for peepomatic were? Is the aim to turn it on by default?</p>",
        "id": 213581482,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1602865073
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265780\">@Joey Gouly</span> </p>\n<p>The most immediate plan is to demonstrate better codegen while not sacrificing compilation time (very much, since peepmatic is currently a little slower than the hand-written simple preopt pass) by creating peephole passes from superoptimizations synthesized by <a href=\"https://github.com/google/souper\">Souper</a>. See the recent work to add <code>clif-util souper-harvest</code> and <code>clif-util souper-to-peepmatic</code> commands.</p>\n<p>After that is successful, we can start talking about when it makes sense to turn on custom Peepmatic passes for which Cranelift embeddings. For example, it likely makes sense for Lucet before it makes sense for SpiderMonkey.</p>\n<p>Eventually I would like to replace the hand written simple preopt with the peepmatic version. There are a few open questions here. First is the question of compile times: peepmatic is currently a little slower than the hand written pass. There's certainly more room for improvement here. But it is also easier to add new optimizations via peepmatic DSL than via open coding matches on <code>InstructionData</code>, and peepmatic is designed such that its performance scales as the number of optimizations in a peephole pass grows. When do we cross the line from \"not worth it\" to \"worth it\" when balancing compile times and code quality? I'm not sure. That's kind of why I've been declining to add anything to the peepmatic version of simple-preopt that isn't already in the hand-written version. At least this way we are comparing apples to apples, even if we are leaving peepmatic's biggest strengths on the floor.</p>\n<p>This sort of ties into having a better benchmark suite as well, so we can have concrete numbers to work with. A benchmark suite that doesn't require a Web embedding. I want to start work on this soon because it is so hard to evaluate any decisions we make related to this stuff without it.</p>\n<p>More things I'd like Peepmatic to do eventually:</p>\n<ul>\n<li>\n<p>vcode peephole optimizations (it is already generic over the IR it is optimizing in anticipation of this, but we need a simple reaching defs analysis so we can determine whether two uses of some virtual register are the same value or not)</p>\n</li>\n<li>\n<p>clif -&gt; vcode lowering</p>\n</li>\n<li>\n<p>perhaps even instruction selection (the go compiler uses their equivalent DSL for instruction selection and I find it very nice, but other folks might have other feelings on this topic)</p>\n</li>\n<li>\n<p>perhaps port LLVM's inst combine pass over to peepmatic</p>\n</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/souper\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/souper\" title=\"google/souper\">google/souper</a></div><div class=\"message_embed_description\">A superoptimizer for LLVM IR. Contribute to google/souper development by creating an account on GitHub.</div></div></div>",
        "id": 213584031,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1602866319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> thanks for the explanation!</p>",
        "id": 213894524,
        "sender_full_name": "Joey Gouly",
        "timestamp": 1603186408
    },
    {
        "content": "<p>hi! i was wondering if there is documentation somewhere for cranelift_frontend's FuncInstBuilder ? it seems to be where the logic for instructions is, but <a href=\"http://docs.rs\">docs.rs</a> doesn't seem to have generated documentation for it (indeed, searching a function used in the example on <a href=\"https://docs.rs/cranelift-frontend/0.69.0/cranelift_frontend/index.html\">https://docs.rs/cranelift-frontend/0.69.0/cranelift_frontend/index.html</a> such as <code>iconst</code> doesn't yield any results)</p>",
        "id": 222995877,
        "sender_full_name": "carado",
        "timestamp": 1610819967
    },
    {
        "content": "<p>(FuncInstBuilder being what is returned by <code>cranelift_frontend::FunctionBuilder::ins()</code>)</p>",
        "id": 222995958,
        "sender_full_name": "carado",
        "timestamp": 1610820034
    },
    {
        "content": "<p>FuncInstBuilder implements the InstBuilder trait: <a href=\"https://docs.rs/cranelift-codegen/0.66.0/cranelift_codegen/ir/trait.InstBuilder.html\">https://docs.rs/cranelift-codegen/0.66.0/cranelift_codegen/ir/trait.InstBuilder.html</a></p>",
        "id": 223002066,
        "sender_full_name": "bjorn3",
        "timestamp": 1610826341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"380969\">@carado</span></p>",
        "id": 223002075,
        "sender_full_name": "bjorn3",
        "timestamp": 1610826355
    },
    {
        "content": "<p>oh cool, thanks!</p>",
        "id": 223002321,
        "sender_full_name": "carado",
        "timestamp": 1610826713
    },
    {
        "content": "<p>Hello! <br>\nI am getting (exit code: 0xc0000005, STATUS_ACCESS_VIOLATION) when trying to Linkage::Import </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ello_world</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Ello World!\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 223855479,
        "sender_full_name": "Anhad Singh",
        "timestamp": 1611550461
    },
    {
        "content": "<p>Nvm I fixed it. Is there a way to do overloaded functions in module.symobl() as the docs say that the one last created is accepted</p>",
        "id": 223859078,
        "sender_full_name": "Anhad Singh",
        "timestamp": 1611555337
    }
]