[
    {
        "content": "<p>Looking to help out with the interpreter and wanted to ask if anyone had any thoughts in terms of direction, such as what people are working on, or if anyone had any strong opinions on what I should start with? (I see that there's quite a few unimplemented instructions in <code>step.rs</code>)</p>",
        "id": 248207719,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1627989192
    },
    {
        "content": "<p>Hey, we are actively working on the interpreter right now, so help would be much appreciated!</p>\n<p>Currently the work being done is with the intention of using this interpreter in the new fuzzer (tracked in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3050\">#3050</a>). Some recent work was in implementing <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3112\">i128 ops support</a> (very early, we only support like 6 ops) and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3101\">supporting jump tables</a>. </p>\n<p>Right now I'm working on implementing Heap and Stack support for the interpreter. Although we first need to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3136\">support it in our test infrastructure</a>.</p>\n<p>I don't have any opinions on what we need to prioritize after heap and stack support, I think its mostly going to be implementing the rest of the CLIF opcodes. I know that i128 support is very incomplete, as well as SIMD ops support, regular arithmetic instructions are very under tested in our test suite, however they should be mostly implemented in the interpreter.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3050\" style=\"background-image: url(https://opengraph.githubassets.com/813de2d6de6505db6a9da756b534c381a78661d289afd6c9b09d655e3c3abf3b/bytecodealliance/wasmtime/issues/3050)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3050\" title=\"Tracking issue for the Cranelift CLIF-level differential fuzzer  · Issue #3050 · bytecodealliance/wasmtime\">Tracking issue for the Cranelift CLIF-level differential fuzzer  · Issue #3050 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In #3038 we introduced the initial version of the Cranelift CLIF-level differential fuzzer. This fuzzer generates CLIF modules that are run on the interpreter and subsequently on the host machine (...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3112\" style=\"background-image: url(https://opengraph.githubassets.com/cdd99639567dac4660a493fbbdedc0fd491c586b39c05897c6d6cec02e9163c4/bytecodealliance/wasmtime/pull/3112)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3112\" title=\"Add basic i128 support to Cranelift Interpreter by afonso360 · Pull Request #3112 · bytecodealliance/wasmtime\">Add basic i128 support to Cranelift Interpreter by afonso360 · Pull Request #3112 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey,\nThis PR adds the i128 data type to DataValue, and implements some basic operations on the interpreter</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3101\" style=\"background-image: url(https://opengraph.githubassets.com/0ae0665b3890c717cb591e7e80bf321a3c2943a8717e8bdadff0062be98beeb9/bytecodealliance/wasmtime/pull/3101)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3101\" title=\"Implement JumpTable branches in Cranelift interpreter by afonso360 · Pull Request #3101 · bytecodealliance/wasmtime\">Implement JumpTable branches in Cranelift interpreter by afonso360 · Pull Request #3101 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">👋\nThis PR Implements branches that use jump tables in the interpreter. Some additional questions inline.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3136\" style=\"background-image: url(https://opengraph.githubassets.com/eb7e34c45bc0bb50ab1b63073513ef6e32289d2d9830619d9f472b6d6e65ccd1/bytecodealliance/wasmtime/issues/3136)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3136\" title=\"Adding heap support in filetest infrastructure · Issue #3136 · bytecodealliance/wasmtime\">Adding heap support in filetest infrastructure · Issue #3136 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey! I&#39;ve been thinking about adding heap (and stack) support for the interpreter, but I think it would be a good idea to have a runtest test suite before doing that. To that end, I&#39;ve been...</div></div></div>",
        "id": 248208705,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1627990051
    },
    {
        "content": "<p>Alright, thanks; so working through some of the <code>unimplemented!</code>s in <code>step.rs</code> isn't a bad idea? (Just to check I've understood correctly)</p>",
        "id": 248210109,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1627991106
    },
    {
        "content": "<p>No, not at all. Although some of them might be hard to get started with. Arithmetic ops such as <code>UaddSat</code> and similar, should be fairly simple to implement and might be a good starting point!</p>",
        "id": 248210327,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1627991293
    },
    {
        "content": "<p>Not sure if I'm missing something, but trying to test my implementation of <code>UaddSat</code> using clif-util on an IR file, I'm not sure how to return the value from the function (as <code>UaddSat</code> only supports SIMD vectors, which IR seems to use <code>i32x4</code> (eg) notation for, but in the function signature it tries interpreting that as hex?).</p>",
        "id": 248244838,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1628007930
    },
    {
        "content": "<p>Oops, didn't realize that <code>UaddSat</code> was SIMD only.</p>\n<p>Anyway, you can have a look at the existing test suite for SIMD,  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/simd-arithmetic.clif\"><code>simd-arithmetic.clif</code></a> should have pretty much what you need.</p>\n<blockquote>\n<p>but in the function signature it tries interpreting that as hex?</p>\n</blockquote>\n<p>That sound's weird, do you have an example test case to share?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/simd-arithmetic.clif\" style=\"background-image: url(https://opengraph.githubassets.com/7df3dcc77d2854048235fb8476d78b3e1f7e6b45d6824ac848e0cbec5912979d/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/filetests/filetests/runtests/simd-arithmetic.clif\" title=\"wasmtime/simd-arithmetic.clif at main · bytecodealliance/wasmtime\">wasmtime/simd-arithmetic.clif at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/simd-arithmetic.clif at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 248290065,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1628030622
    },
    {
        "content": "<p>Thanks for the link to that test suite; turns out it was a syntax issue but the error attributed it to the wrong line (1) - I'd been declaring the SIMD vectors wrong (if you don't specify all the lanes and only put one number it complains about expecting hexadecimal on line 1).</p>",
        "id": 248330401,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1628071132
    },
    {
        "content": "<p>For instructions like <code>Shuffle</code>, how are the immediate bytes retrieved from <code>step</code>? <code>arg(0)</code> yields <code>StepError::UnknownValue</code> and <code>imm()</code> fails because it tries to unwrap a <code>None</code>.</p>",
        "id": 250485244,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1629812045
    },
    {
        "content": "<p>Also, in the IR the <code>cls</code> instruction doesn't specify any specific integer sizes, but on the <code>AArch64</code> backend it sign-extends anything less than 32-bit to 32-bit (though this isn't currently implemented at all for <code>x86_64</code>). Should the interpreter mimic this behaviour and sign-extend to 32-bit before counting?</p>",
        "id": 250753986,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1629975315
    },
    {
        "content": "<p>Hey, sorry I missed the earlier message.</p>\n<blockquote>\n<p>For instructions like Shuffle, how are the immediate bytes retrieved from step? arg(0) yields StepError::UnknownValue and imm() fails because it tries to unwrap a None.</p>\n</blockquote>\n<p>It looks like we store that outside of the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/ir/instructions.rs#L324\">InstructionData struct</a>. So we would have to get the current DFG and query it for the mask. There is an example of this in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/machinst/lower.rs#L1268\">machinst/lower.rs</a> file. So extrapolating from that, we would need something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">InstructionData</span>::<span class=\"n\">Shuffle</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">mask</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">state</span><span class=\"p\">.</span><span class=\"n\">get_current_function</span><span class=\"p\">().</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">immediates</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">mask</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<blockquote>\n<p>Also, in the IR the cls instruction doesn't specify any specific integer sizes, but on the AArch64 backend it sign-extends anything less than 32-bit to 32-bit (though this isn't currently implemented at all for x86_64). Should the interpreter mimic this behaviour and sign-extend to 32-bit before counting?</p>\n</blockquote>\n<p>If i'm looking at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L1154\">this</a> correctly, it looks like it zero extends it to 32 bits. But that doesn't look like it would work for i16 and i8 types...</p>\n<p>Building this test case:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"kt\">i8</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i8</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i8</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cls</span><span class=\"p\">.</span><span class=\"kt\">i8</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"mh\">0x00</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">We</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">which</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"></span>\n\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"mh\">0x80</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"o\">%</span><span class=\"n\">cls</span><span class=\"p\">(</span><span class=\"mh\">0xC0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">we</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Yeah, it looks like the aarch64 backend has bugs here.</p>\n<p>The correct thing to do in the interpreter is to just count the bits, and ignore this bug.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/ir/instructions.rs#L324\" style=\"background-image: url(https://opengraph.githubassets.com/8e0ffb37c03bab0521c3937fe1032e944afa9d0126c341ba013330fb9a722b6f/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/ir/instructions.rs#L324\" title=\"wasmtime/instructions.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime\">wasmtime/instructions.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/instructions.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/machinst/lower.rs#L1268\" style=\"background-image: url(https://opengraph.githubassets.com/8e0ffb37c03bab0521c3937fe1032e944afa9d0126c341ba013330fb9a722b6f/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/machinst/lower.rs#L1268\" title=\"wasmtime/lower.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime\">wasmtime/lower.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/lower.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L1154\" style=\"background-image: url(https://opengraph.githubassets.com/8e0ffb37c03bab0521c3937fe1032e944afa9d0126c341ba013330fb9a722b6f/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/6fbddc193161d177af680778ad55fe193c4c878b/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L1154\" title=\"wasmtime/lower_inst.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime\">wasmtime/lower_inst.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/lower_inst.rs at 6fbddc193161d177af680778ad55fe193c4c878b · bytecodealliance/wasmtime</div></div></div>",
        "id": 250757012,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1629977171
    },
    {
        "content": "<p>Filed a bug report for this case: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3248\">https://github.com/bytecodealliance/wasmtime/issues/3248</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3248\" style=\"background-image: url(https://opengraph.githubassets.com/8e930532f051d2dc50d4696e9e8b41d6e4f6b26d212a2fc4918661ac513a62d0/bytecodealliance/wasmtime/issues/3248)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3248\" title=\"Cranelift: cls instruction is not correctly implemented  for `i16` and `i8` in any backend. · Issue #3248 · bytecodealliance/wasmtime\">Cranelift: cls instruction is not correctly implemented  for `i16` and `i8` in any backend. · Issue #3248 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hey, @dheaton-arm reported an interesting implementation detail from the aarch64 backend on the cls instruction. However, further testing shows that this instruction is not correctly implemented in...</div></div></div>",
        "id": 250761423,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1629979773
    },
    {
        "content": "<p><a href=\"https://docs.rs/cranelift-codegen/0.76.0/cranelift_codegen/ir/trait.InstBuilder.html#method.umulhi\">The docs for umulhi</a> seem contradictory as the description says it does not support vector types but the inputs / outputs specify it does. I'm assuming the text is correct and I should ignore the inputs / outputs in this case?</p>",
        "id": 251589370,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1630514039
    },
    {
        "content": "<p>Yes, they are definitly contradictory</p>",
        "id": 251598015,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1630517436
    },
    {
        "content": "<p>I would go with the Inputs/Outputs, it looks like the aarch64 backend has this implemented for vector types but the x64 backend does not</p>",
        "id": 251598100,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1630517470
    },
    {
        "content": "<p>It looks like we don't use these instructions in <a href=\"http://code_translator.rs\">code_translator.rs</a></p>",
        "id": 251599375,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1630517973
    },
    {
        "content": "<p>We may also want to revisit this in the CLIF instruction cleanup. cc: <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span>, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span></p>",
        "id": 251601442,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1630518823
    },
    {
        "content": "<p>For <code>sqmul_round_sat</code>, the docs specify either scalar or vector values are fine, but the parser rejects <code>i16</code> and <code>i32</code> as \"not a valid typevar\". Not sure whether it's the docs or the parser that's wrong...</p>",
        "id": 252440507,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1631098941
    },
    {
        "content": "<p>It looks like that instruction was <a href=\"https://github.com/bytecodealliance/wasmtime/commit/98f1ac789ee2b5ca1a5938e2fe76595672025d50\">added for simd</a>. But I'm not sure if there are plans to use it for scalar values...</p>\n<p>I would add it for SIMD for now, and we can discuss if we want to keep it around for scalar values in the PR. Implementing for scalar shouldn't be too much work after that.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/98f1ac789ee2b5ca1a5938e2fe76595672025d50\" style=\"background-image: url(https://opengraph.githubassets.com/d726a68924077bfc0d0b4a1d70798416f672235f3b54de72d2a1970f0159f2ea/bytecodealliance/wasmtime/commit/98f1ac789ee2b5ca1a5938e2fe76595672025d50)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/98f1ac789ee2b5ca1a5938e2fe76595672025d50\" title=\"Enable the simd_i16x8_q15mulr_sat_s test on AArch64 · bytecodealliance/wasmtime@98f1ac7\">Enable the simd_i16x8_q15mulr_sat_s test on AArch64 · bytecodealliance/wasmtime@98f1ac7</a></div><div class=\"message_embed_description\">Copyright (c) 2021, Arm Limited.</div></div></div>",
        "id": 252443554,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1631100545
    },
    {
        "content": "<p>+1, it's good to implement at least SIMD (or whatever is at parity with what machine backends accept, in general), and we can use this as an opportunity to document where the 'holes' in accepted types are. I'd like for a future where we're as polymorphic as possible -- it's difficult from the CLIF-producer PoV to work around missing corners -- and only reject types where it really doesn't make sense. But that's a long-term goal and not something to worry about today :-)</p>",
        "id": 252490199,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1631118227
    },
    {
        "content": "<p>I added the instruction, and I think I was aiming for the polymorphic as possible future, as <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> said <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, even though Wasm required only the SIMD variant (and only 16-bit elements on top of that).</p>",
        "id": 252492957,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1631119251
    },
    {
        "content": "<p>It looks like I might have made a mistake when defining the type variable - I thought that scalars were included by default.</p>",
        "id": 252494523,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1631119857
    }
]