[
    {
        "content": "<p>I just compared the build performance of cg_clif with cranelift 0.78.0 (which is from before isle, right?) against 0.79.0. The performance difference is within noise.</p>",
        "id": 265193140,
        "sender_full_name": "bjorn3",
        "timestamp": 1639677238
    },
    {
        "content": "<p>That's great, thanks! That that aligns with earlier measurements from fitzgen on Wasmtime</p>",
        "id": 265196011,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639678276
    },
    {
        "content": "<p>On less positive news, it looks like there is a regression: <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/runs/4551314054?check_suite_focus=true#step:11:3420\">https://github.com/bjorn3/rustc_codegen_cranelift/runs/4551314054?check_suite_focus=true#step:11:3420</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/runs/4551314054?check_suite_focus=true#step:11:3420\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/11985a46420fd7512f2e0d0fb39bd2f9687de60e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636164646239386238303864343934366566333635626237383832336466393539313363356237346666643638353562623164353765373165616430353237652f626a6f726e332f72757374635f636f646567656e5f6372616e656c696674)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/runs/4551314054?check_suite_focus=true#step:11:3420\" title=\"Update Cranelift to 0.79.0 · bjorn3/rustc_codegen_cranelift@a1037fa \">Update Cranelift to 0.79.0 · bjorn3/rustc_codegen_cranelift@a1037fa </a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 265196899,
        "sender_full_name": "bjorn3",
        "timestamp": 1639678604
    },
    {
        "content": "<p>Hmm, it's possible that a narrow-value case might have changed in some of the instruction migrations? Our test coverage for this could be better (... thanks for filling in the gaps in the meantime :-/ )</p>",
        "id": 265197146,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639678712
    },
    {
        "content": "<p>if you can reduce it to some CLIF, I can take a look</p>",
        "id": 265197159,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639678726
    },
    {
        "content": "<p>sure, working on it.</p>",
        "id": 265197370,
        "sender_full_name": "bjorn3",
        "timestamp": 1639678823
    },
    {
        "content": "<p>For signed integers the following tests fail:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b0101100</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b0100001</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b1111001</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_count_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">count_zeros</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"cp\">$T</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">.</span><span class=\"n\">count_zeros</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"cp\">$T</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">.</span><span class=\"n\">count_zeros</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"cp\">$T</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_rotate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Rotating these should make no difference</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// We test using 124 bits because to ensure that overlong bit shifts do</span>\n<span class=\"w\">    </span><span class=\"c1\">// not cause undefined behaviour. See #10183.</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">124</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and for unsigned integers the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">A</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b0101100</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">B</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b0100001</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">C</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mb\">0b1111001</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_0</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_1</span>: <span class=\"cp\">$T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">!</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_count_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">count_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"cp\">$T</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">.</span><span class=\"n\">count_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"cp\">$T</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">.</span><span class=\"n\">count_zeros</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"cp\">$T</span>::<span class=\"n\">BITS</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">test_rotate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">).</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">C</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">).</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Rotating these should make no difference</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// We test using 124 bits because to ensure that overlong bit shifts do</span>\n<span class=\"w\">    </span><span class=\"c1\">// not cause undefined behaviour. See #10183.</span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">.</span><span class=\"n\">rotate_left</span><span class=\"p\">(</span><span class=\"mi\">124</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">_1</span><span class=\"p\">.</span><span class=\"n\">rotate_right</span><span class=\"p\">(</span><span class=\"mi\">124</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">_1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Some assertions only fail for 8bit or 16bit integers.</p>",
        "id": 265199723,
        "sender_full_name": "bjorn3",
        "timestamp": 1639679869
    },
    {
        "content": "<p>OK, if you can get it down to a CLIF runtest that fails, it's probably (hopefully) a simple fix in masking or something like that...</p>",
        "id": 265199934,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639679975
    },
    {
        "content": "<p><code>.count_zeros()</code> maps to <code>popcnt</code> on the bitwise inverse of the value. The rotate methods to <code>rotl</code>/<code>rotr</code>.</p>",
        "id": 265200039,
        "sender_full_name": "bjorn3",
        "timestamp": 1639680017
    },
    {
        "content": "<p>I can't find the shift amount masking in the new <code>rotl</code>/<code>rotr</code> implementation anymore. It used to be at <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c1a6a0523dbc59d176f708ea3d04e6edb48480ec/cranelift/codegen/src/isa/x64/lower.rs#L2485-L2488\">https://github.com/bytecodealliance/wasmtime/blob/c1a6a0523dbc59d176f708ea3d04e6edb48480ec/cranelift/codegen/src/isa/x64/lower.rs#L2485-L2488</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c1a6a0523dbc59d176f708ea3d04e6edb48480ec/cranelift/codegen/src/isa/x64/lower.rs#L2485-L2488\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/329463dcd288f22574778787b5b5f967cdc78eb0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636333623133626330393166393032636666383631353031356264303932333537316634663862346633396538396563333437653734346538656534343865352f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c1a6a0523dbc59d176f708ea3d04e6edb48480ec/cranelift/codegen/src/isa/x64/lower.rs#L2485-L2488\" title=\"wasmtime/lower.rs at c1a6a0523dbc59d176f708ea3d04e6edb48480ec · bytecodealliance/wasmtime\">wasmtime/lower.rs at c1a6a0523dbc59d176f708ea3d04e6edb48480ec · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/lower.rs at c1a6a0523dbc59d176f708ea3d04e6edb48480ec · bytecodealliance/wasmtime</div></div></div>",
        "id": 265200858,
        "sender_full_name": "bjorn3",
        "timestamp": 1639680390
    },
    {
        "content": "<p>Hmm, indeed, that seems to have been missed</p>",
        "id": 265201640,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639680736
    },
    {
        "content": "<p>Putting together a fix for this now</p>",
        "id": 265202228,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639680985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> let me know if this fixes the issue for you: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3610\">https://github.com/bytecodealliance/wasmtime/pull/3610</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3610\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c44f92aef99c0c72ca9d1e9e66565d4522638ff5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303531353936323161373235613563626337633837303432316639666431653666356464343432336361313465383337636164363936613137396566353739362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f33363130)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3610\" title=\"Fix some 16- and 8-bit behavior in x64 backend related to rotates. by cfallin · Pull Request #3610 · bytecodealliance/wasmtime\">Fix some 16- and 8-bit behavior in x64 backend related to rotates. by cfallin · Pull Request #3610 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Uncovered by @bjorn3 (thanks!): 8- and 16-bit rotates were not working\nproperly in recent versions of Cranelift with part of the lowering\nmigrated to ISLE.\nThis PR fixes a few issues:\n\n\n8- and 16-b...</div></div></div>",
        "id": 265208672,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639683563
    },
    {
        "content": "<p>I will check it out tomorrow.</p>",
        "id": 265209370,
        "sender_full_name": "bjorn3",
        "timestamp": 1639683867
    },
    {
        "content": "<p><code>&lt;i16&gt;::count_zeros</code> is codegened as</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">00000000000282</span><span class=\"nf\">dd</span> <span class=\"err\">&lt;</span><span class=\"no\">_RNvMs_NtCs1K2K8gQcegq_4core3nums11count_zeros</span><span class=\"err\">&gt;</span><span class=\"p\">:</span>\n   <span class=\"err\">282</span><span class=\"nl\">dd:</span>       <span class=\"err\">55</span>                      <span class=\"nf\">push</span>   <span class=\"nv\">%rbp</span>\n   <span class=\"err\">282</span><span class=\"nl\">de:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">e5</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"nv\">%rbp</span>\n   <span class=\"err\">282</span><span class=\"nl\">e1:</span>       <span class=\"nf\">f7</span> <span class=\"no\">d7</span>                   <span class=\"no\">not</span>    <span class=\"nv\">%edi</span>\n   <span class=\"err\">282</span><span class=\"nl\">e3:</span>       <span class=\"nf\">f3</span> <span class=\"mi\">0</span><span class=\"no\">f</span> <span class=\"no\">b8</span> <span class=\"no\">f7</span>             <span class=\"no\">popcnt</span> <span class=\"nv\">%edi</span><span class=\"p\">,</span><span class=\"nv\">%esi</span>\n   <span class=\"err\">282</span><span class=\"nl\">e7:</span>       <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"no\">b7</span> <span class=\"no\">f6</span>                <span class=\"no\">movzwl</span> <span class=\"nv\">%si</span><span class=\"p\">,</span><span class=\"nv\">%esi</span>\n   <span class=\"err\">282</span><span class=\"nl\">ea:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">f0</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rsi</span><span class=\"p\">,</span><span class=\"nv\">%rax</span>\n   <span class=\"err\">282</span><span class=\"nl\">ed:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">ec</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span>\n   <span class=\"err\">282</span><span class=\"nl\">f0:</span>       <span class=\"err\">5</span><span class=\"nf\">d</span>                      <span class=\"no\">pop</span>    <span class=\"nv\">%rbp</span>\n   <span class=\"err\">282</span><span class=\"nl\">f1:</span>       <span class=\"nf\">c3</span>                      <span class=\"no\">retq</span>\n</code></pre></div>\n<p>The <code>popcnt %edi, %esi</code> is a 32bit popcount, while it should be 16bit. <code>&lt;i8&gt;::count_zeros</code> is codegened as:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">0000000000029</span><span class=\"nf\">ef5</span> <span class=\"err\">&lt;</span><span class=\"no\">_RNvMNtCs1K2K8gQcegq_4core3numa11count_zeros</span><span class=\"err\">&gt;</span><span class=\"p\">:</span>\n   <span class=\"err\">29</span><span class=\"nl\">ef5:</span>       <span class=\"err\">55</span>                      <span class=\"nf\">push</span>   <span class=\"nv\">%rbp</span>\n   <span class=\"err\">29</span><span class=\"nl\">ef6:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">e5</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"nv\">%rbp</span>\n   <span class=\"err\">29</span><span class=\"nl\">ef9:</span>       <span class=\"nf\">f7</span> <span class=\"no\">d7</span>                   <span class=\"no\">not</span>    <span class=\"nv\">%edi</span>\n   <span class=\"err\">29</span><span class=\"nl\">efb:</span>       <span class=\"nf\">f3</span> <span class=\"mi\">0</span><span class=\"no\">f</span> <span class=\"no\">b8</span> <span class=\"no\">f7</span>             <span class=\"no\">popcnt</span> <span class=\"nv\">%edi</span><span class=\"p\">,</span><span class=\"nv\">%esi</span>\n   <span class=\"err\">29</span><span class=\"nl\">eff:</span>       <span class=\"err\">40</span> <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"no\">b6</span> <span class=\"no\">f6</span>             <span class=\"no\">movzbl</span> <span class=\"nv\">%sil</span><span class=\"p\">,</span><span class=\"nv\">%esi</span>\n   <span class=\"err\">29</span><span class=\"nl\">f03:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">f0</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rsi</span><span class=\"p\">,</span><span class=\"nv\">%rax</span>\n   <span class=\"err\">29</span><span class=\"nl\">f06:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">ec</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span>\n   <span class=\"err\">29</span><span class=\"nl\">f09:</span>       <span class=\"err\">5</span><span class=\"nf\">d</span>                      <span class=\"no\">pop</span>    <span class=\"nv\">%rbp</span>\n   <span class=\"err\">29</span><span class=\"nl\">f0a:</span>       <span class=\"nf\">c3</span>                      <span class=\"no\">retq</span>\n</code></pre></div>",
        "id": 265273960,
        "sender_full_name": "bjorn3",
        "timestamp": 1639734521
    },
    {
        "content": "<p>It seems like the popcnt codegen code didn't change beteen cranelift 0.78.0 and 0.79.0 though.</p>",
        "id": 265274339,
        "sender_full_name": "bjorn3",
        "timestamp": 1639734767
    },
    {
        "content": "<p>Looks like before cranelift 0.79.0 the <code>not</code> only applies to 8 or 16bit and the rest of the register happened to be zero by chance:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code><span class=\"err\">00000000000282</span><span class=\"nf\">dd</span> <span class=\"err\">&lt;</span><span class=\"no\">_RNvMs_NtCs1K2K8gQcegq_4core3nums11count_zeros</span><span class=\"err\">&gt;</span><span class=\"p\">:</span>\n   <span class=\"err\">282</span><span class=\"nl\">dd:</span>       <span class=\"err\">55</span>                      <span class=\"nf\">push</span>   <span class=\"nv\">%rbp</span>\n   <span class=\"err\">282</span><span class=\"nl\">de:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">e5</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rsp</span><span class=\"p\">,</span><span class=\"nv\">%rbp</span>\n   <span class=\"err\">282</span><span class=\"nl\">e1:</span>       <span class=\"err\">66</span> <span class=\"nf\">f7</span> <span class=\"no\">d7</span>                <span class=\"no\">not</span>    <span class=\"nv\">%di</span>\n   <span class=\"err\">282</span><span class=\"nl\">e4:</span>       <span class=\"nf\">f3</span> <span class=\"mi\">0</span><span class=\"no\">f</span> <span class=\"no\">b8</span> <span class=\"no\">f7</span>             <span class=\"no\">popcnt</span> <span class=\"nv\">%edi</span><span class=\"p\">,</span><span class=\"nv\">%esi</span>\n   <span class=\"err\">282</span><span class=\"nl\">e8:</span>       <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"no\">b7</span> <span class=\"no\">f6</span>                <span class=\"no\">movzwl</span> <span class=\"nv\">%si</span><span class=\"p\">,</span><span class=\"nv\">%esi</span>\n   <span class=\"err\">282</span><span class=\"nl\">eb:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">f0</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rsi</span><span class=\"p\">,</span><span class=\"nv\">%rax</span>\n   <span class=\"err\">282</span><span class=\"nl\">ee:</span>       <span class=\"err\">48</span> <span class=\"err\">89</span> <span class=\"nf\">ec</span>                <span class=\"no\">mov</span>    <span class=\"nv\">%rbp</span><span class=\"p\">,</span><span class=\"nv\">%rsp</span>\n   <span class=\"err\">282</span><span class=\"nl\">f1:</span>       <span class=\"err\">5</span><span class=\"nf\">d</span>                      <span class=\"no\">pop</span>    <span class=\"nv\">%rbp</span>\n   <span class=\"err\">282</span><span class=\"nl\">f2:</span>       <span class=\"nf\">c3</span>                      <span class=\"no\">retq</span>\n</code></pre></div>",
        "id": 265274660,
        "sender_full_name": "bjorn3",
        "timestamp": 1639734983
    },
    {
        "content": "<p>Hmm, OK. I have limited time today then am off for two weeks, unfortunately, so I don't think I can pick this back up today; can you file an issue for this?</p>",
        "id": 265335162,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639763993
    },
    {
        "content": "<p>Done: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3615\">https://github.com/bytecodealliance/wasmtime/issues/3615</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3615\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3388b435a18b5b1f5b9844530dc8fa31818a4419\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643135373463373436383537333561393136376139323830356264333134353362353465316165656139333831306666623537653965613935346637653234622f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33363135)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3615\" title=\"Cranelift: Miscompilation of popcnt for i8/i16 · Issue #3615 · bytecodealliance/wasmtime\">Cranelift: Miscompilation of popcnt for i8/i16 · Issue #3615 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">.clif Test Case target x86_64 nehalem function u0:9(i16) -&gt; i32 system_v { ; symbol _RNvMs_NtCs1K2K8gQcegq_4core3nums11count_zeros block0(v0: i16): v1 -&gt; v0 jump block1 block1: @0000 v2 = bno...</div></div></div>",
        "id": 265338157,
        "sender_full_name": "bjorn3",
        "timestamp": 1639765093
    }
]