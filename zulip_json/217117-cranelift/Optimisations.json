[
    {
        "content": "<p>This has possibly been asked before, but I have some understanding of how the rewriting rules in isle work for optimisation, but not how other optimisations (specifically LICM, and other code movement opts such as hoisting and sinking) work. Believe that DCE is done inherently with the representation.</p>",
        "id": 479142963,
        "sender_full_name": "Kirp",
        "timestamp": 1730043620
    },
    {
        "content": "<p>My talk at EGRAPHS 2023 covers this a bit (<a href=\"https://cfallin.org/pubs/egraphs2023_aegraphs_slides.pdf\">slides</a>, <a href=\"https://vimeo.com/843540328\">video</a>). The gist of it is that we're forced to recompute code location anyway during elaboration from egraph back to CFG; so we add a notion of \"loop level\" and place operators higher if every operand is available higher, and LICM falls out of that.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://vimeo.com/843540328\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/10bda989f9b6e6131c85dbd5a1a45e888b475b3d/68747470733a2f2f692e76696d656f63646e2e636f6d2f766964656f2f313639353233393433382d353434653235313863303639373336623264343834636237363262643931653535313733653961313663646437656531643165663637366430343133656165302d643f663d77656270&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://vimeo.com/843540328\" title=\"&aelig;graphs: Acyclic E-graphs for Efficient Optimization in a Production Compiler\">&aelig;graphs: Acyclic E-graphs for Efficient Optimization in a Production Compiler</a></div><div class=\"message_embed_description\">This is a re-recording of the talk I gave at EGRAPHS 2023, a workshop attached to PLDI in June 2023. Unfortunately the streaming setup in the room was not working,&hellip;</div></div></div>",
        "id": 479152046,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730051596
    },
    {
        "content": "<p>Thanks, so these are all a function of elaborating the aegraph representation back - guess other loop transforms (unroll / vectorise) would happen there too?</p>",
        "id": 479172376,
        "sender_full_name": "Kirp",
        "timestamp": 1730070294
    },
    {
        "content": "<p>In theory could happen there, yep, though both of those in particular are a little tricky as they require both code-placement / code-duplication logic as well as expression-rewrite logic. I suspect both would be easier once we work out how to have rewrite rules that apply to control flow as well (which is a wide-open problem)</p>",
        "id": 479172891,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730070767
    }
]