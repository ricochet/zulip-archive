[
    {
        "content": "<p>I have functions A and B, and B uses a pointer to A (but does not call it!). How do I need to declare A in B? I generate code for A before B in the same module, which looks like</p>\n<div class=\"codehilite\"><pre><span></span><code>function u0:34(i64, i64) -&gt; i64 system_v {\n    sig0 = (i64) -&gt; i64 system_v\n    fn0 = u0:0 sig0\n\nblock0(v0: i64, v2: i64):\n    v1 = load.i64 v0+8\n    v3 = iadd v1, v2\n    return v3\n}\n</code></pre></div>\n\n\n<p>Now when generating <code>B</code> I use <code>Variable(34)</code> (which is the previous function shown above), but it fails with <code>variable Variable(34) is used but its type has not been declared</code>.</p>",
        "id": 197490560,
        "sender_full_name": "osa1",
        "timestamp": 1589412744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301400\">@osa1</span> You need to use <code>module.declare_func_in_func(a_func_id, &amp;mut b_func)</code> to get a <code>FuncRef</code> to A.</p>",
        "id": 197527456,
        "sender_full_name": "bjorn3",
        "timestamp": 1589447629
    },
    {
        "content": "<p>I'm confused, why do I need a <code>FuncRef</code>? I'm not calling it, I'm just returning it.</p>",
        "id": 197531025,
        "sender_full_name": "osa1",
        "timestamp": 1589449833
    },
    {
        "content": "<p>In that case you can use the <code>func_addr</code> instruction to get the address of the function from the <code>FuncRef</code>.</p>",
        "id": 197531270,
        "sender_full_name": "bjorn3",
        "timestamp": 1589449996
    },
    {
        "content": "<p>What is the <code>iAddr</code> argument for in <code>func_addr</code>?</p>",
        "id": 197531874,
        "sender_full_name": "osa1",
        "timestamp": 1589450381
    },
    {
        "content": "<p>The pointer type. Eg <code>i64</code> on 64bit systems and <code>i32</code> on 32bit systems.</p>",
        "id": 197532717,
        "sender_full_name": "bjorn3",
        "timestamp": 1589450876
    },
    {
        "content": "<p>So if I understand this correctly, I need to get a FuncId for every function in this compilation unit first, and then maintain a map from my variable type to FuncIds, and check, on every use, whether the used variable is a function</p>",
        "id": 197532727,
        "sender_full_name": "osa1",
        "timestamp": 1589450881
    },
    {
        "content": "<p>If it is then I need to first import it (declare_func_in_func) and then get address of it using func_addr</p>",
        "id": 197532784,
        "sender_full_name": "osa1",
        "timestamp": 1589450897
    },
    {
        "content": "<p>In my language I don't do direct calls (maybe later after optimizations)</p>",
        "id": 197532815,
        "sender_full_name": "osa1",
        "timestamp": 1589450926
    },
    {
        "content": "<p>Yes, you need to use <code>declare_func_in_func</code> followed by <code>func_addr</code> to get the address of a function.</p>",
        "id": 197533120,
        "sender_full_name": "bjorn3",
        "timestamp": 1589451144
    },
    {
        "content": "<p>Thank you! Really helpful</p>",
        "id": 197533228,
        "sender_full_name": "osa1",
        "timestamp": 1589451239
    },
    {
        "content": "<p>When building a module with multiple functions do I have to use <a href=\"https://docs.rs/cranelift-codegen/0.63.0/cranelift_codegen/struct.Context.html\">https://docs.rs/cranelift-codegen/0.63.0/cranelift_codegen/struct.Context.html</a> or can I create a <code>FunctionBuilder</code> for every function?</p>",
        "id": 197533899,
        "sender_full_name": "osa1",
        "timestamp": 1589451631
    },
    {
        "content": "<p>So instead of <code>FunctionBuilder::new(&amp;mut context.func, ...);</code> can I do <code>let mut func = Function::with_name_signature(...); let mut builder = FunctionBuilder::new(&amp;mut func, &amp;mut fn_builder_ctx);</code> ?</p>",
        "id": 197534041,
        "sender_full_name": "osa1",
        "timestamp": 1589451706
    },
    {
        "content": "<p>Is the \"entry basic block\" stuff gone in the latest version? Saw that in an older code</p>",
        "id": 197534755,
        "sender_full_name": "osa1",
        "timestamp": 1589452134
    },
    {
        "content": "<p>You can reuse <code>Context</code> for multiple functions if you call <code>.clear()</code> in between. This is not necessary, but improves performance. You can't reuse <code>FunctionBuilder</code>. Everything that is reusable for <code>cranelift-frontend</code> is stored in <code>FunctionBuilderContext</code> instead.</p>",
        "id": 197535270,
        "sender_full_name": "bjorn3",
        "timestamp": 1589452490
    },
    {
        "content": "<p>What do you mean with \"entry basic block\" stuff?</p>",
        "id": 197535300,
        "sender_full_name": "bjorn3",
        "timestamp": 1589452517
    },
    {
        "content": "<p><code>create_ebb</code> and <code>append_ebb_params_for_function_params</code>, they seem to be gone now</p>",
        "id": 197535385,
        "sender_full_name": "osa1",
        "timestamp": 1589452565
    },
    {
        "content": "<p>How do I create an entry basic block and declare function arguments there in the latest version on <a href=\"http://crates.io\">crates.io</a>?</p>",
        "id": 197535398,
        "sender_full_name": "osa1",
        "timestamp": 1589452581
    },
    {
        "content": "<p>If I want the function parameters to be available in all blocks of the function do I need to do `builder.append_block_params_for_function_params(block); for every block?</p>",
        "id": 197536563,
        "sender_full_name": "osa1",
        "timestamp": 1589453446
    },
    {
        "content": "<p><code>create_ebb</code> has been renamed to <code>create_block</code>.</p>",
        "id": 197536759,
        "sender_full_name": "bjorn3",
        "timestamp": 1589453581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Function.20declaration.20confusion/near/197536563\">said</a>:</p>\n<blockquote>\n<p>If I want the function parameters to be available in all blocks of the function do I need to do `builder.append_block_params_for_function_params(block); for every block?</p>\n</blockquote>\n<p>Only do it for the entry block. You can the access the params from all blocks.</p>",
        "id": 197536814,
        "sender_full_name": "bjorn3",
        "timestamp": 1589453610
    },
    {
        "content": "<p>I don't understand how to do that. Since entry block creating is not different than others, how do I specify which block is the entry block?</p>",
        "id": 197536901,
        "sender_full_name": "osa1",
        "timestamp": 1589453649
    },
    {
        "content": "<p>Just use <code>builder.block_params(entry_block)[0]</code> to get the first param.</p>",
        "id": 197536904,
        "sender_full_name": "bjorn3",
        "timestamp": 1589453650
    },
    {
        "content": "<p>The first block inserted is the entry block.</p>",
        "id": 197536935,
        "sender_full_name": "bjorn3",
        "timestamp": 1589453673
    },
    {
        "content": "<p>How do I insert a block?</p>",
        "id": 197536976,
        "sender_full_name": "osa1",
        "timestamp": 1589453708
    },
    {
        "content": "<p>aka the first time you call <code>switch_to_block</code> that block will become the entry block.</p>",
        "id": 197536977,
        "sender_full_name": "bjorn3",
        "timestamp": 1589453709
    },
    {
        "content": "<p>The first block created?</p>",
        "id": 197536989,
        "sender_full_name": "osa1",
        "timestamp": 1589453721
    },
    {
        "content": "<p>Ah</p>",
        "id": 197536993,
        "sender_full_name": "osa1",
        "timestamp": 1589453725
    },
    {
        "content": "<p>I still can't use arguments ...</p>",
        "id": 197537125,
        "sender_full_name": "osa1",
        "timestamp": 1589453820
    },
    {
        "content": "<p><code>variable Variable(12) is used but its type has not been declared</code></p>",
        "id": 197537142,
        "sender_full_name": "osa1",
        "timestamp": 1589453834
    },
    {
        "content": "<p>Hmm</p>",
        "id": 197537247,
        "sender_full_name": "osa1",
        "timestamp": 1589453909
    },
    {
        "content": "<p>How do I get <code>Value</code>s of the arguments after <code>append_block_params_for_function_params</code>?</p>",
        "id": 197537292,
        "sender_full_name": "osa1",
        "timestamp": 1589453957
    },
    {
        "content": "<p>Where does <code>Variable(12)</code> come from?</p>",
        "id": 197537294,
        "sender_full_name": "bjorn3",
        "timestamp": 1589453957
    },
    {
        "content": "<p>Ahh! Found ti!</p>",
        "id": 197537312,
        "sender_full_name": "osa1",
        "timestamp": 1589453976
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span></p>",
        "id": 197537320,
        "sender_full_name": "osa1",
        "timestamp": 1589453982
    },
    {
        "content": "<p>I'll get the values of args using <code>entry_block.block_params()</code>, right?</p>",
        "id": 197537542,
        "sender_full_name": "osa1",
        "timestamp": 1589454127
    },
    {
        "content": "<p>Do I really ahve to invent Variable numbers myself or is there a method in cranelift for that?</p>",
        "id": 197538111,
        "sender_full_name": "osa1",
        "timestamp": 1589454631
    },
    {
        "content": "<p>In other words, if I ahve <code>let x = y</code> in my language, do I have to invent a cranelift <code>Variable</code> for that <code>x</code> myself? Any invariants about the u32 for it? (e.g. should variable u32s be consecutive or can I pick 100 for the first var and 123123 for the second?)</p>",
        "id": 197538588,
        "sender_full_name": "osa1",
        "timestamp": 1589454976
    },
    {
        "content": "<p>What does this mean: <code>assertion failed: func_ctx.is_empty()</code> ?</p>",
        "id": 197540151,
        "sender_full_name": "osa1",
        "timestamp": 1589456171
    },
    {
        "content": "<p>Figured out the <code>func_ctx.is_empty()</code> stuff. Still a bit confused about variables though</p>",
        "id": 197540681,
        "sender_full_name": "osa1",
        "timestamp": 1589456623
    },
    {
        "content": "<p>Given a FuncId is there a way to get the signature of the function?</p>",
        "id": 197541037,
        "sender_full_name": "osa1",
        "timestamp": 1589456874
    },
    {
        "content": "<p>Welp <code>unimplemented type: types::INVALID</code> ...</p>",
        "id": 197541681,
        "sender_full_name": "osa1",
        "timestamp": 1589457264
    },
    {
        "content": "<p>But the good news is I can generate 2 functions before this error <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 197543475,
        "sender_full_name": "osa1",
        "timestamp": 1589458275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Function.20declaration.20confusion/near/197537542\">said</a>:</p>\n<blockquote>\n<p>I'll get the values of args using <code>entry_block.block_params()</code>, right?</p>\n</blockquote>\n<p>yes</p>",
        "id": 197544190,
        "sender_full_name": "bjorn3",
        "timestamp": 1589458741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Function.20declaration.20confusion/near/197538588\">said</a>:</p>\n<blockquote>\n<p>In other words, if I ahve <code>let x = y</code> in my language, do I have to invent a cranelift <code>Variable</code> for that <code>x</code> myself? Any invariants about the u32 for it? (e.g. should variable u32s be consecutive or can I pick 100 for the first var and 123123 for the second?)</p>\n</blockquote>\n<p>yes, you can use arbitrary numbers, but the memory usage is proportional to the largest number you choose I believe.</p>",
        "id": 197544314,
        "sender_full_name": "bjorn3",
        "timestamp": 1589458828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"301400\">osa1</span> <a href=\"#narrow/stream/217117-cranelift/topic/Function.20declaration.20confusion/near/197541037\">said</a>:</p>\n<blockquote>\n<p>Given a FuncId is there a way to get the signature of the function?</p>\n</blockquote>\n<p>I don't think so</p>",
        "id": 197544364,
        "sender_full_name": "bjorn3",
        "timestamp": 1589458873
    },
    {
        "content": "<p>OK back at yak shaving -- <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> do you know what this error means: <code>unimplemented type: types::INVALID</code></p>",
        "id": 197555009,
        "sender_full_name": "osa1",
        "timestamp": 1589463594
    },
    {
        "content": "<p>Happens on <code>seal_block()</code></p>",
        "id": 197555308,
        "sender_full_name": "osa1",
        "timestamp": 1589463709
    },
    {
        "content": "<p>I think I'm not initializing something that I'm supposed to but I don't know what</p>",
        "id": 197555980,
        "sender_full_name": "osa1",
        "timestamp": 1589463909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301400\">@osa1</span> Is there a backtrace?</p>",
        "id": 197560790,
        "sender_full_name": "bjorn3",
        "timestamp": 1589465509
    },
    {
        "content": "<p>Probably here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/0592b5a9956a7f8b51abf79830d3b70521c9aa4d/cranelift/frontend/src/ssa.rs#L206\">https://github.com/bytecodealliance/wasmtime/blob/0592b5a9956a7f8b51abf79830d3b70521c9aa4d/cranelift/frontend/src/ssa.rs#L206</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/0592b5a9956a7f8b51abf79830d3b70521c9aa4d/cranelift/frontend/src/ssa.rs#L206\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/0592b5a9956a7f8b51abf79830d3b70521c9aa4d/cranelift/frontend/src/ssa.rs#L206\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 197561140,
        "sender_full_name": "bjorn3",
        "timestamp": 1589465646
    },
    {
        "content": "<p>Did you call <code>builder.declare_var</code> with the type of the variable before you used it?</p>",
        "id": 197561402,
        "sender_full_name": "bjorn3",
        "timestamp": 1589465762
    },
    {
        "content": "<p>Hmm I think that's the problem, yes. I have some built-in functions (implemented in C), I think I\"m not declaring it currently</p>",
        "id": 197562892,
        "sender_full_name": "osa1",
        "timestamp": 1589466450
    },
    {
        "content": "<p>Hmm I think that's the problem, yes. I have some built-in functions (implemented in C), I think I\"m not declaring it currently</p>",
        "id": 197562893,
        "sender_full_name": "osa1",
        "timestamp": 1589466451
    }
]