[
    {
        "content": "<p>Hello everyone. I am pretty new to most of the things here, and trying to gain some understanding. Let's say I want to link to some OS native external libraries (e.g. kernel32.dll) in order to call some external procedure. I suppose this is supported by most compilers including Cranelift. How should I supply the procedure signatures and calling conventions? Am I able to compile my source code on Linux/MacOS, although my target OS is Windows? Finally, does Cranelift come with out-of-the-box support to any of the OS standard/native libraries? Thank you.</p>",
        "id": 316216539,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1671181899
    },
    {
        "content": "<p>If you are using cranelift-object, calling an external function is a matter of declaring it using <code>declare_function</code> with <code>Linkage::Import</code> and then calling it the same way as you would call a local function. The <code>Signature</code> argument you need to pass to <code>declare_function</code> contains the arguments, return value and the calling convention to use. cranelift-object emits object files you need to link just like with for example a C compiler. Cranelift-object is able to create object files for other OSes than the current one, but you will need a linker capable of linking for the target OS to produce the final executable.</p>",
        "id": 316235105,
        "sender_full_name": "bjorn3",
        "timestamp": 1671187875
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> Thank you for passing by. Excuse my questions if they seem trivial to you. Why don't Cranelift come with such a linker? Would you give an example of one?</p>",
        "id": 316284980,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1671202181
    },
    {
        "content": "<blockquote>\n<p>Why don't Cranelift come with such a linker?</p>\n</blockquote>\n<p>Few compilers come with a linker builtin. Almost all use an external one like ld, lld or mold (on Linux), ld64 (on macOS) or link.exe (on Windows).</p>",
        "id": 316285542,
        "sender_full_name": "bjorn3",
        "timestamp": 1671202340
    },
    {
        "content": "<p>The way compilers generally work is that they compile a source file to an object file and then you pass all object files to a linker to form the final executable or dynamic library.</p>",
        "id": 316285697,
        "sender_full_name": "bjorn3",
        "timestamp": 1671202388
    },
    {
        "content": "<p>Umm.. so I will still need the target environment to link. Is there a fundamental reason why this is the case? Is it that the linker needs the target environment to do its job?</p>",
        "id": 316291497,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1671203963
    },
    {
        "content": "<p>You need a linker that supports the respective object file format of the target: ELF for most Unixes, Mach-O for macOS and COFF/PE for Windows. In addition the linker needs either the dynamic libraries themself or the equivalent of an import library for the respective target to known which symbols are defined in which dynamic library. And finally on all platforms except for Windows you don't actually invoke the linker directly most of the time, but a wrapper like the gcc or clang driver, which knows all configurations necessary to successfully link for a specific target.</p>",
        "id": 316292610,
        "sender_full_name": "bjorn3",
        "timestamp": 1671204262
    },
    {
        "content": "<p>Oh, so does Cranelift actually invoke the target linker at the end?</p>",
        "id": 316295434,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1671204946
    },
    {
        "content": "<p>No, cranelift-object only emits object files, so you will have to invoke the linker yourself.</p>",
        "id": 316296313,
        "sender_full_name": "bjorn3",
        "timestamp": 1671205174
    },
    {
        "content": "<p>It's also worth noting that if you just need to run some code, and not build an executable or library you can use <code>cranelift-jit</code> that does have a simple linker included and can call into other libraries.</p>",
        "id": 316296882,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1671205320
    },
    {
        "content": "<p>Thanks a lot for your kindness. Last one for now: are the object files produced by Cranelift considered target-independent  accepted by all linkers?</p>",
        "id": 316298219,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1671205666
    },
    {
        "content": "<p>At the very least it is specific to a single object file format. Depending on the OS, there may or may not be a tag inside the object file itself that enforces that it is only used on that OS. You also need to make sure the the calling convention you used matches what the OS expects.</p>",
        "id": 316299209,
        "sender_full_name": "bjorn3",
        "timestamp": 1671205944
    },
    {
        "content": "<p>It is technically possible to use object files compiled for one target on another target with the same architecture and object file format, but I wouldn't recommend it unless you know what you are doing.</p>",
        "id": 316299421,
        "sender_full_name": "bjorn3",
        "timestamp": 1671206003
    },
    {
        "content": "<p>Thank you gentlemen for your generosity in knowledge sharing. Much appreciated!</p>",
        "id": 316299859,
        "sender_full_name": "Mohannad Al-Awad",
        "timestamp": 1671206115
    }
]