[
    {
        "content": "<p>I'm trying to write a small JIT for a language that is slightly different than the JIT tutorial. I've gotten a good ways through it, but I'm stuck at this point:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Translated</span>:\n<span class=\"nc\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span>:<span class=\"mi\">0</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">system_v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"n\">block0</span>:\n    <span class=\"nc\">v0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"n\">Error</span>: <span class=\"nc\">Compilation</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"nc\">Verifier</span><span class=\"w\"> </span><span class=\"n\">errors</span><span class=\"w\"></span>\n</code></pre></div>\n<p>from these lines in my JIT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"main\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">eyre</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">define_function</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">eyre</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So now, I'm done with function building -- and I'm heading towards creating a ptr to the machine code, etc.</p>\n<p>Is there any way to figure out what specific part of the IR the verifier is upset by?</p>",
        "id": 285005886,
        "sender_full_name": "McCoy",
        "timestamp": 1654386825
    },
    {
        "content": "<p>Edit: I figured out the error here (an issue with my signature) -- but still curious about info from verifier.</p>",
        "id": 285006179,
        "sender_full_name": "McCoy",
        "timestamp": 1654387271
    },
    {
        "content": "<p>You have to use the <code>cranelift_codegen::pretty_error</code> function for that. It accepts a <code>CodegenError</code> and a <code>Function</code> and then prints something like under the VerifierErrors section at <a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/970\">https://github.com/bjorn3/rustc_codegen_cranelift/issues/970</a> (you need to click on it to expand)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/970\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4f10d914e9b8b61fd9c95326a3640bfb8fd7a1e3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376565636535336531396536623364363333343631393735373434626633623435316332346364343466623064343637326461643761373337356436646330342f626a6f726e332f72757374635f636f646567656e5f6372616e656c6966742f6973737565732f393730)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/issues/970\" title=\"VerifierError on tokio-compat 路 Issue #970 路 bjorn3/rustc_codegen_cranelift\">VerifierError on tokio-compat 路 Issue #970 路 bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">This one looks a bit more complicated. Got entry block parameters (2) must match function signature (1) for tokio-rs/tokio-compat@180076a (master). rustc_codegen_cranelift: 9f602bf VerifierErrors e...</div></div></div>",
        "id": 285029857,
        "sender_full_name": "bjorn3",
        "timestamp": 1654425335
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 285069657,
        "sender_full_name": "McCoy",
        "timestamp": 1654483279
    }
]