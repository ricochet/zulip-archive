[
    {
        "content": "<p>Does Cranelift have anything to make it easier to maintain stacktraces that map back to your source files? Right now in my interpreter I essentially maintain a mapping of instruction indexes to locations in a separate data structure. From what I gather this would require fiddling with dwarf/libunwind? The other option is to insert a bunch of code in places where necessary. This is sort of what Nim does, but apparently this comes with quite a bit of overhead (<a href=\"https://github.com/nim-lang/Nim/issues/12702\">https://github.com/nim-lang/Nim/issues/12702</a>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/nim-lang/Nim/issues/12702\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6badea8a0e96baa3f7f64c5af3a9d1a39ae77572\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306230653538616537616436633136343166393937653530643232353031336235326363663863326239316462343035343133663231613766333531313130642f6e696d2d6c616e672f4e696d2f6973737565732f3132373032)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/nim-lang/Nim/issues/12702\" title=\"stacktrace without `--stackTrace` runtime overhead 路 Issue #12702 路 nim-lang/Nim\">stacktrace without `--stackTrace` runtime overhead 路 Issue #12702 路 nim-lang/Nim</a></div><div class=\"message_embed_description\">Drawbacks of --stackTrace: --stackTrace incurs significant runtime overhead, and in fact {.push stacktrace:off.} is used at several places in nim codebase (eg lib/system/gc.nim). One reason for thi...</div></div></div>",
        "id": 306674079,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1666968722
    },
    {
        "content": "<p>Basically how my setup works now is that every frame stores the method it belongs to, and the method has a mapping of <code>instruction index =&gt; location</code>. Building a stacktrace is then a matter of walking those frames and finding an entry for the current index in each frame. Mind you I only need traces in the event of a panic in my language, they're not used for e.g. exceptions, so maximum performance isn't my main interest</p>",
        "id": 306674406,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1666968805
    },
    {
        "content": "<p>Alternatively perhaps backtrace-rs is an option <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 306681169,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1666970045
    },
    {
        "content": "<p>We have support for emitting DWARF info for frames; Wasmtime used to use this, before it grew its own backtracer</p>",
        "id": 306710724,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1666977801
    },
    {
        "content": "<p>Right now what we do in Wasmtime is turn on the Cranelift option to always use frame pointers; then we can trace the linked list of (fp, return addr) tuples very quickly, and look up the addresses</p>",
        "id": 306710814,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1666977831
    },
    {
        "content": "<p>separately, srclocs get mapped to offsets in the output code and so you can correlate PCs back to whatever source-level info your srclocs represent</p>",
        "id": 306710944,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1666977862
    },
    {
        "content": "<p>Ah thanks, I'll dig around to see if I could do something similar <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 306725929,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1666982607
    }
]