[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> hey so I'm poking around (after yesterday) at more of the stack limit/interrupt stuff, and I was looking to tackle <a href=\"https://github.com/bytecodealliance/wasmtime/issues/900\" title=\"https://github.com/bytecodealliance/wasmtime/issues/900\">#900</a> while I was at it. I'm thinking of mirroring spidermonkey where each relevant function has a prologue which checks the stack limit and traps if we ran out. It looks like there's an <code>ArgumentPurpose::StackLimit</code> parameter which is already in cranelift which is roughly analagous to this, but it seems like it may not be quite right? Does that require that every caller of the function pass in the stack limit? I'd ideally prefer to avoid reserving another argument for our purposes (we already take 2 with the two vmctx arguments)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/900\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/900\" title=\"Improve wasm handling for stack overflow conditions · Issue #900 · bytecodealliance/wasmtime\">Improve wasm handling for stack overflow conditions · Issue #900 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently wasmtime handles stack overflow in wasm code through the use of the segfault signal handler, relying on wasm code to hit the guard page to trigger a segfault which we the longjmp to recov...</div></div></div>",
        "id": 193367729,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586374183
    },
    {
        "content": "<p>and fwiw you seemed active on both <a href=\"https://github.com/bytecodealliance/cranelift/pull/372\" title=\"https://github.com/bytecodealliance/cranelift/pull/372\">https://github.com/bytecodealliance/cranelift/pull/372</a> and <a href=\"https://github.com/bytecodealliance/cranelift/issues/349\" title=\"https://github.com/bytecodealliance/cranelift/issues/349\">https://github.com/bytecodealliance/cranelift/issues/349</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cranelift/pull/372\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cranelift/pull/372\" title=\"Stack Limit as an Argument Purpose by pepyakin · Pull Request #372 · bytecodealliance/cranelift\">Stack Limit as an Argument Purpose by pepyakin · Pull Request #372 · bytecodealliance/cranelift</a></div><div class=\"message_embed_description\">Another approach to close #349</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cranelift/issues/349\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cranelift/issues/349\" title=\"Stack limit checking · Issue #349 · bytecodealliance/cranelift\">Stack limit checking · Issue #349 · bytecodealliance/cranelift</a></div><div class=\"message_embed_description\">Cretonne is currently capable of detecting stack overflow when the stack is allocated with a guard page at the end, and it performs stack probes as needed when allocating large frames. Most popular...</div></div></div>",
        "id": 193367823,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586374234
    },
    {
        "content": "<p>or is there a way we could like synthesize an \"argument\" inside of each function?</p>",
        "id": 193368233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586374458
    },
    {
        "content": "<p>so it's calculated from other arguments</p>",
        "id": 193368247,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586374466
    },
    {
        "content": "<p>right now, you're right, StackLimit is an argument that needs to be passed in</p>",
        "id": 193368477,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586374585
    },
    {
        "content": "<p>bah ok, so this isn't quite what I want then</p>",
        "id": 193368498,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586374597
    },
    {
        "content": "<p>take a look at <code>insert_common_prologue</code> in cranelift/codegen/src/isa/x86/abi.rs</p>",
        "id": 193368614,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586374681
    },
    {
        "content": "<p>You probably want to reuse <code>insert_stack_check</code>, but you just need another way of telling it where to find the limit</p>",
        "id": 193368691,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586374709
    },
    {
        "content": "<p>kk, I'll see if I can whip up something</p>",
        "id": 193368696,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586374711
    },
    {
        "content": "<p><code>error[E0061]: this function takes 12 parameters but 11 parameters were supplied</code></p>",
        "id": 193372013,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586376412
    },
    {
        "content": "<p><em>cry</em></p>",
        "id": 193372016,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586376413
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> so I'm getting <code>can't encode v17 = ifcmp_sp.i32 v16</code> as a panic message which is called from <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/isa/x86/abi.rs#L816\" title=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/isa/x86/abi.rs#L816\">here</a> and panics <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/cursor.rs#L805\" title=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/cursor.rs#L805\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/isa/x86/abi.rs#L816\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/isa/x86/abi.rs#L816\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/cursor.rs#L805\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e29c224f24f5954266a94e4b56d1388ecb07823b/cranelift/codegen/src/cursor.rs#L805\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 193381437,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381723
    },
    {
        "content": "<p>it seems like this previous <code>StackLimit</code> stuff just wasn't ever fully tested before? do you know if that's the case?</p>",
        "id": 193381454,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381737
    },
    {
        "content": "<p>I see a text test or two but I don't know why that doesn't panic but what I'm doing panics (unless something is specific to actually encoding instructions)</p>",
        "id": 193381536,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381765
    },
    {
        "content": "<p>cranelift/filetests/filetests/isa/x86/prologue-epilogue.clif is a test which exercises a stack_limit argument</p>",
        "id": 193381614,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586381821
    },
    {
        "content": "<p>right yeah</p>",
        "id": 193381639,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381836
    },
    {
        "content": "<p>is that testing the actual x86 encoding/emission</p>",
        "id": 193381649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381841
    },
    {
        "content": "<p>which means that I'm just doing something wrong?</p>",
        "id": 193381659,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381846
    },
    {
        "content": "<p>but, I wouldn't be too surprised if it doesn't work if you use it differently</p>",
        "id": 193381665,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586381848
    },
    {
        "content": "<p>hm ok, I know very little about cranelift and all this...</p>",
        "id": 193381697,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381872
    },
    {
        "content": "<p>oh, you probably want to do ifcmp_sp.i64, not i32, on x86-64</p>",
        "id": 193381748,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586381894
    },
    {
        "content": "<p>It probably doesn't know how to encode a 32-bit version of that</p>",
        "id": 193381784,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586381912
    },
    {
        "content": "<p>is there a separate method for that?</p>",
        "id": 193381807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381926
    },
    {
        "content": "<p>oh wait I think I had a type error in the IR</p>",
        "id": 193381834,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381952
    },
    {
        "content": "<p>It's inferred from the operand.</p>",
        "id": 193381840,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586381954
    },
    {
        "content": "<p>yeah that made me realize I was doing a 32-bit load when I wanted a 64-bit one</p>",
        "id": 193381874,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381976
    },
    {
        "content": "<p>which may be why the encoding failed</p>",
        "id": 193381909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381989
    },
    {
        "content": "<p>oh hey!</p>",
        "id": 193381917,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381993
    },
    {
        "content": "<p>now it works!</p>",
        "id": 193381919,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381995
    },
    {
        "content": "<p>sorta at least</p>",
        "id": 193381926,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586381999
    },
    {
        "content": "<p>ok cool thanks</p>",
        "id": 193381954,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382002
    },
    {
        "content": "<p>for being a rubber duck :)</p>",
        "id": 193381976,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382006
    },
    {
        "content": "<p>and pointing out bit-nes</p>",
        "id": 193381981,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> is there a way to dump generated code to stderr?</p>",
        "id": 193382103,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382090
    },
    {
        "content": "<p>or otherwise debug what's happening?</p>",
        "id": 193382108,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382094
    },
    {
        "content": "<p>Not from wasmtime right now.</p>",
        "id": 193382253,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586382184
    },
    {
        "content": "<p>Cranelift has some utilities in cranelift/src/disasm.rs which can use capstone to disassemble the output, but they're not yet wired up in convenient ways</p>",
        "id": 193382278,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586382206
    },
    {
        "content": "<p>outside of clif-util, at least</p>",
        "id": 193382299,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586382232
    },
    {
        "content": "<p>or use lldb :P</p>",
        "id": 193382382,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1586382278
    },
    {
        "content": "<p>that too <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 193382523,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586382385
    },
    {
        "content": "<p>ok no worries, I've now got every single wasm function to immediately trap</p>",
        "id": 193382528,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382389
    },
    {
        "content": "<p>which is good, and it seems to be passing the verifier too</p>",
        "id": 193382537,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586382396
    },
    {
        "content": "<p>Fwiw, Spidermonkey doesn't pass the stack check limit as an argument; stack checks are generated in Cranelift IR directly.</p>",
        "id": 193434095,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1586429701
    }
]