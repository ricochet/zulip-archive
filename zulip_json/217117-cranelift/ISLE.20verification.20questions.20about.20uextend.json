[
    {
        "content": "<p>What are the semantics of <a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri/cranelift/codegen/meta/src/shared/instructions.rs#L3621\">uextend</a>? How does ISLE know how much to extend the input value?</p>\n<p>On a related note, we're currently trying to verify uextend and are having trouble because we don't know the size of <a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri/cranelift/codegen/src/clif.isle#L1470\"><code>Inst</code></a>. Is there a way to enforce a bit width on <code>Inst</code> for some terms? Does it even make sense to think about <code>Inst</code> having a size?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri/cranelift/codegen/meta/src/shared/instructions.rs#L3621\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bdb8a10f482252b7285c86842429e46ed25e481e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643633363164353162363731336337646362643834336236373733626164376532366232643836393331393564363036363866336337653364303335663565622f6176616e686174742f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri/cranelift/codegen/meta/src/shared/instructions.rs#L3621\" title=\"wasmtime/instructions.rs at isle-veri · avanhatt/wasmtime\">wasmtime/instructions.rs at isle-veri · avanhatt/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/instructions.rs at isle-veri · avanhatt/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri/cranelift/codegen/src/clif.isle#L1470\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bdb8a10f482252b7285c86842429e46ed25e481e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643633363164353162363731336337646362643834336236373733626164376532366232643836393331393564363036363866336337653364303335663565622f6176616e686174742f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri/cranelift/codegen/src/clif.isle#L1470\" title=\"wasmtime/clif.isle at isle-veri · avanhatt/wasmtime\">wasmtime/clif.isle at isle-veri · avanhatt/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/clif.isle at isle-veri · avanhatt/wasmtime</div></div></div>",
        "id": 287000064,
        "sender_full_name": "Monica Pardeshi",
        "timestamp": 1655868134
    },
    {
        "content": "<blockquote>\n<p>How does ISLE know how much to extend the input value?</p>\n</blockquote>\n<p>The bit width of the result value and of the input value should determine the extend that is happening. For example, see the usage of the <code>has_type</code> and <code>value_type</code> extractors here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/25a588c35f52a7005d7f455facc15e9e35273497/cranelift/codegen/src/isa/x64/lower.isle#L2150-L2152\">https://github.com/bytecodealliance/wasmtime/blob/25a588c35f52a7005d7f455facc15e9e35273497/cranelift/codegen/src/isa/x64/lower.isle#L2150-L2152</a></p>\n<blockquote>\n<p>Does it even make sense to think about <code>Inst</code> having a size?</p>\n</blockquote>\n<p>Not really. Instead it makes sense to talk about the size of values, and an <code>Inst</code> can produce zero or more values, each of which have an associated size.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/25a588c35f52a7005d7f455facc15e9e35273497/cranelift/codegen/src/isa/x64/lower.isle#L2150-L2152\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c7c99637315315a6d7ef577bbdca7e42a891e7a7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373630343830353538313865393439663963643536633933363965656232393331653738336133616662393730663936653839326464626366316663646339302f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/25a588c35f52a7005d7f455facc15e9e35273497/cranelift/codegen/src/isa/x64/lower.isle#L2150-L2152\" title=\"wasmtime/lower.isle at 25a588c35f52a7005d7f455facc15e9e35273497 · bytecodealliance/wasmtime\">wasmtime/lower.isle at 25a588c35f52a7005d7f455facc15e9e35273497 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/lower.isle at 25a588c35f52a7005d7f455facc15e9e35273497 · bytecodealliance/wasmtime</div></div></div>",
        "id": 287090520,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1655920711
    },
    {
        "content": "<blockquote>\n<p>How does ISLE know how much to extend the input value?</p>\n</blockquote>\n<p>for a rule like <br>\n<code>(rule (lower (has_type (fits_in_64 out) (uextend x @ (value_type in))))\n      (extend x $false (ty_bits in) (ty_bits out)))</code><br>\nare we saying that <code>in</code> could have any width, and we extend it to 8, 16, 32, or 64 bytes?</p>\n<blockquote>\n<p>Does it even make sense to think about Inst having a size?</p>\n</blockquote>\n<p>Ah, yes, that makes more sense. So for certain instructions we should think about constraining the size of <code>Value</code>?</p>",
        "id": 287141763,
        "sender_full_name": "Monica Pardeshi",
        "timestamp": 1655957213
    },
    {
        "content": "<blockquote>\n<p>are we saying that in could have any width, and we extend it to 8, 16, 32, or 64 bytes?</p>\n</blockquote>\n<p>pretty much, although there is a little more in the <code>extend</code> term and also just what is implicitly valid or not for CLIF (dest must be wider than source; checked when the clif validator is enabled)</p>",
        "id": 287349754,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1656086293
    },
    {
        "content": "<blockquote>\n<p>So for certain instructions we should think about constraining the size of Value?</p>\n</blockquote>\n<p>Yes, that sounds right.</p>",
        "id": 287349799,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1656086323
    },
    {
        "content": "<p>We're having some trouble mapping isle types to our internal ir types. Specifically, we want <code>Value</code> to be constrained in different ways depending on which rule it's being used in (in the below example we want <code>Value</code> to be a bv64).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">decl</span><span class=\"w\"> </span><span class=\"n\">extend</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">Reg</span><span class=\"w\"> </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Reg</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">extend</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"w\"> </span><span class=\"n\">signed</span><span class=\"w\"> </span><span class=\"n\">from_bits</span><span class=\"w\"> </span><span class=\"n\">to_bits</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">((</span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">WritableReg</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">temp_writable_reg</span><span class=\"w\"> </span><span class=\"cp\">$I64</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"n\">Unit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">emit</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">MInst</span><span class=\"p\">.</span><span class=\"nb\">Extend</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">rn</span><span class=\"w\"> </span><span class=\"n\">signed</span><span class=\"w\"> </span><span class=\"n\">from_bits</span><span class=\"w\"> </span><span class=\"n\">to_bits</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">dst</span><span class=\"p\">))</span><span class=\"w\"></span>\n\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has_type</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fits_in_64</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uextend</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">))))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">extend</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"cp\">$false</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ty_bits</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In other rules, we don't necessarily want this constraint. Do you have any advice on how to map the same type name to different ir types?</p>",
        "id": 288363864,
        "sender_full_name": "Monica Pardeshi",
        "timestamp": 1656906637
    },
    {
        "content": "<p>Does isle type-checking have any way to differentiate <code>Value</code> in different rules? How does it distinguish a <code>Value</code> that represents a <code>u8</code> from one that represents a <code>u64</code>?</p>",
        "id": 288364575,
        "sender_full_name": "Monica Pardeshi",
        "timestamp": 1656907555
    },
    {
        "content": "<p>hi <span class=\"user-mention\" data-user-id=\"476053\">@Monica Pardeshi</span> -- the short answer is that in ISLE those cases aren't different types; there's an abstraction-levels sort of issue going on here, where the type at the \"compiler implementation\" abstraction level is <code>Value</code> (an SSA value) but the type at the \"IR value\" level is <code>u8</code> or <code>u64</code>. (In other words, type of compiler SSA identifier vs. type of value it identifies.)</p>\n<p>If we want to encode <code>u8</code> vs <code>u64</code> somehow, that gets into dependent-type territory; but I would question: do we really need it?</p>\n<p>In my mind the approach y'all have been aiming for has always been: map <code>Value</code>s to a bitvector big enough for the biggest value; then make assertions about its bits. A <code>u8</code> is stored in the low 8 bits, so we only have assertions about the low 8 bits; the upper bits are undef / \"don't-cares\". One could think of this sort of like having an abstract machine model where <code>Value</code> gets stored in a \"register\" of some width. Does that make sense? Or is there some reason the SMT-solver-level bitvector width has to be narrower?</p>",
        "id": 288366602,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1656910470
    }
]