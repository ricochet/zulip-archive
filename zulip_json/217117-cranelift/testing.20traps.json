[
    {
        "content": "<p>Hey,</p>\n<p>As far as I can tell, there's no current infrastructure set up to allow us to assert that instructions should trap during specific runtests - is this correct, or is there something I'm not aware of?<br>\nIf this is the case, do we have existing plans to introduce such infrastructure, since it currently limits testing instructions to valid inputs only (with no way of identifying cases were an instruction accepts values outside its range incorrectly)? This would be useful for (for example) some of the <code>fcvt*</code> instructions.</p>",
        "id": 294881598,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1661266039
    },
    {
        "content": "<blockquote>\n<p>As far as I can tell, there's no current infrastructure set up to allow us to assert that instructions should trap during specific runtests - is this correct, or is there something I'm not aware of?</p>\n</blockquote>\n<p>I think we only support <code>==</code> and <code>!=</code> in run tests (see: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/418dbc15bd2a5269b338587661387e05fc77b983/cranelift/reader/src/run_command.rs#L40-L50\">https://github.com/bytecodealliance/wasmtime/blob/418dbc15bd2a5269b338587661387e05fc77b983/cranelift/reader/src/run_command.rs#L40-L50</a>)</p>\n<blockquote>\n<p>If this is the case, do we have existing plans to introduce such infrastructure, since it currently limits testing instructions to valid inputs only (with no way of identifying cases were an instruction accepts values outside its range incorrectly)? This would be useful for (for example) some of the fcvt* instructions.</p>\n</blockquote>\n<p>I don't think there are plans for adding this currently, but it would be awesome. I have to add manual tests to the interpreter whenever I need to test a trap (this happened in a <code>sdiv</code> by 0 case).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/418dbc15bd2a5269b338587661387e05fc77b983/cranelift/reader/src/run_command.rs#L40-L50\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d306ba5cf15095192e769b580c4f525b9c063173\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663765393739323432373364313863373161376464383862353238666532326263323534313638313934646363386263373062633736363334653063366531312f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/418dbc15bd2a5269b338587661387e05fc77b983/cranelift/reader/src/run_command.rs#L40-L50\" title=\"wasmtime/run_command.rs at 418dbc15bd2a5269b338587661387e05fc77b983 · bytecodealliance/wasmtime\">wasmtime/run_command.rs at 418dbc15bd2a5269b338587661387e05fc77b983 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 294883056,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661266483
    },
    {
        "content": "<p>Although currently we use the JIT to run runtests, does the jit handle catching traps and trapcodes properly? cc <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span></p>",
        "id": 294887526,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661267211
    },
    {
        "content": "<p>No, it doesn't.</p>",
        "id": 294887580,
        "sender_full_name": "bjorn3",
        "timestamp": 1661267227
    },
    {
        "content": "<p>well, that makes things more difficult</p>",
        "id": 294887660,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1661267254
    },
    {
        "content": "<p>You directly call the jitted code without any wrapper that catches signals or anything.</p>",
        "id": 294887715,
        "sender_full_name": "bjorn3",
        "timestamp": 1661267274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426905\">@Damian Heaton</span> we kind of get reasonable coverage in most trapping cases via the Wasm testing route: the Wasm suite can assert that a call will trap (and is able to do so because it has all of Wasmtime's trap-handling machinery available). So I don't see this as a huge gaping hole that needs to be plugged right away, though of course it would be really nice to be able to test at the CLIF level with runtests as well. If someone were to build something in the cranelift-jit / runtest environment for this I'd be happy to review it</p>",
        "id": 294893024,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1661268896
    },
    {
        "content": "<p>Yeah, if there's a Wasm-to-CLIF lowering for whatever instruction we want to test, we could write a WebAssembly test (<code>*.wast</code>) that asserts a trap and add it to <code>tests/misc_testsuite</code>.</p>",
        "id": 294900522,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1661270996
    }
]