[
    {
        "content": "<p>I got to know cranelift by looking at rustc codebase and I have a basic question here. is cranelift aiming to replace LLVM at some point as to having almost the same features but working a bit faster and being completely in rust?</p>\n<p>I noticed that cranelift mostly is advertised by \"faster\" than llvm, but nothing (that I could find)  mentions the performance of cranelift generated binaries when compared to LLVM.<br>\nSo my question here, will be safe to use cranelift as compiler IR/backend and assume that eventually it will catch up with LLVM both in archs support  and optimizations? (It will be cool to see riscv and aarch64 backend and modular pass manager)</p>",
        "id": 283985232,
        "sender_full_name": "walker",
        "timestamp": 1653556392
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"504552\">@walker</span> , this is a great question, thanks for asking!</p>\n<p>Cranelift aims to be an optimizing compiler, but the best peers to compare to are probably the optimizing tiers of browsers' JIT engines; so V8's TurboFan and SpiderMonkey's IonMonkey.</p>\n<p>LLVM spends a ton of effort (compile time) on optimization, and has engineer-decades of time spent optimizing that; and O(dozens) of people, at least, actively working on it. We're a much much smaller project (~one-ish fulltime person on the compiler core, a few on backends) so we probably won't ever generate code that is <em>completely</em> at parity with LLVM's output. But optimization is very much a \"most of the benefit for a subset of the effort\" kind of problem, and we anticipate that we can get <em>close</em>. We have active efforts to incorporate more optimizations.</p>\n<p>The most recent comparison of Cranelift perf vs LLVM (wasmtime vs WAVM that uses LLVM, specifically) that I'm aware of is in Fig 22 of this paper: <a href=\"https://arxiv.org/pdf/2011.13127.pdf\">https://arxiv.org/pdf/2011.13127.pdf</a>. The orange bar (Wasmtime with Cranelift) is just a hair slower (a few percent?) than V8/TurboFan and maybe ~10% slower (eyeballing the gap) than WAVM with LLVM. We have ongoing efforts to build continuous benchmarking infrastructure; <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> and <span class=\"user-mention\" data-user-id=\"257554\">@Johnnie Birch</span> are driving this with our \"Sightglass\" benchmarking tool.</p>\n<p>Re: architecture support: we actually already support AArch64! (since Apr 2020, at parity with full SIMD since sometime last year) We have three backends: x86-64, aarch64, s390x. We'd also love to have RISC-V (32 and 64), ARM32, x86-32, ppc64, ... it's just a matter of time. Each of these is a few months of fulltime work and then ongoing maintenance and we don't have anyone to spare for that right now.</p>\n<p>One final thing I'll say is that we have a focus on formal verification and safety that IMHO is a bit more explicit/first-class than in LLVM; e.g. we're actively working with some academic folks to formally verify our instruction selector, and our register allocator symbolically verifies its results (if that option is enabled).</p>\n<p>I wrote up a doc describing Cranelift's unique focuses last year, but it was waiting on some other Bytecode Alliance stuff to come together before we release it; cc <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> , it may be a good time to reconsider getting that out!</p>",
        "id": 284027212,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1653582143
    },
    {
        "content": "<p>You may find this interesting, although it doesn't talk about performance: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/compare-llvm.md\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/compare-llvm.md</a></p>\n<blockquote>\n<p>I noticed that cranelift mostly is advertised by \"faster\" than llvm, but nothing (that I could find) mentions the performance of cranelift generated binaries when compared to LLVM.</p>\n</blockquote>\n<p>FWIW, these claims are about the time it takes the compiler to generate code, not claims about the speed of the generated code emitted by the compiler.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/compare-llvm.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/99975bc9e55aab02c2bc9c55095e10e43025cf44\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313430356562366131353064363938306535303335303461376366313539353766353636346131336639616236333434386339653265376339343066346538612f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/compare-llvm.md\" title=\"wasmtime/compare-llvm.md at main · bytecodealliance/wasmtime\">wasmtime/compare-llvm.md at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/compare-llvm.md at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 284028891,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1653582962
    },
    {
        "content": "<p>Ah, there are some outdated bits in that doc; I'll make a note to update it when I get a chance</p>",
        "id": 284029152,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1653583096
    },
    {
        "content": "<p>Re: \"faster\" as compile time -- referring to the same paper above, Fig 18 shows a log-scale plot of compile times for the CoreMark benchmark suite. The orange bar (Wasmtime on Cranelift) is ~10x faster than the purple bar (WAVM on LLVM). Since the version of Cranelift used in that paper, things have gotten a little faster as well (new regalloc)</p>",
        "id": 284030437,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1653583796
    },
    {
        "content": "<p>Alright, thank you so much for the detailed explanation, I am surprised that you are concerned with formal verification right from the start, that is indeed very interesting! To be honest I was planning to use cranelift for some experimental language Higher order logic language design as a codgen back end and hopefully stick with it when my toy language becomes less experimental. and I think I will move forward with it since the performance hit is not much at the time being, and it will be nicer to write additional optimization passes in rust than do it in C++.</p>",
        "id": 284046968,
        "sender_full_name": "walker",
        "timestamp": 1653591759
    },
    {
        "content": "<p>Regarding RISC-V support, there is some work done here: <a href=\"https://github.com/yuyang-ok/wasmtime\">https://github.com/yuyang-ok/wasmtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yuyang-ok/wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2c8e6f3a70655cbc721640593ee6a788ec374fa6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313562386638323336356437616539356633393561353339653632353966373561353361323135353065383664623439343964633135633066326266383063612f797579616e672d6f6b2f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yuyang-ok/wasmtime\" title=\"GitHub - yuyang-ok/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift\">GitHub - yuyang-ok/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - GitHub - yuyang-ok/wasmtime: Standalone JIT-style runtime for WebAssembly, using Cranelift</div></div></div>",
        "id": 284152078,
        "sender_full_name": "Alphyr",
        "timestamp": 1653667410
    }
]