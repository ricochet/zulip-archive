[
    {
        "content": "<p>I know it's a bit strange but I need a non-associative (boolean) <code>or</code> operator, the basic situation I've got set up is this:</p>\n<ul>\n<li>There's two variables, <code>x</code> and <code>x_is_uninit</code></li>\n<li><code>x</code> is some arbitrary boolean that is uninitialized iff <code>x_is_uninit</code>is true</li>\n<li>I want to or these two values together, <code>x_is_uninit | x</code></li>\n<li>However, since <code>x</code> can be uninitialized it would be very bad if the order of operations were swapped</li>\n</ul>\n<p>Again, I know it's mildly ill-advised but I'm just not sure how to approach this well</p>",
        "id": 339154582,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1677776240
    },
    {
        "content": "<p>I'm a little confused by the question. In what sense is <code>x</code> uninitialized, and what would be bad about using the uninitialized value this way? Cranelift doesn't have undefined behavior, so it'll happily compile a bitwise 'or' where the operands are any SSA value, even from a load from memory that you haven't previously stored anything to. And to the extent that we still have booleans at all, they're in the definition of instructions like <code>brif</code>, which treats anything non-zero as \"true\". So if <code>x_is_uninit</code> is non-zero, no matter what the value of <code>x</code> is, combining them with <code>bor</code> will also be non-zero. And if <code>x_is_uninit</code> is zero, then the result will equal <code>x</code>, but in that case it was initialized. So that is the result you wanted, I think?</p>",
        "id": 339170763,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1677780242
    },
    {
        "content": "<p>Like I said, I'm mainly concerned by the associativity of <code>or</code>, if <code>x_is_uninit | x</code> was folded into <code>x | x_is_uninit</code> then that would cause undefined/incorrect/unwanted behavior</p>",
        "id": 339174201,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1677781170
    },
    {
        "content": "<p>I gather you mean commutativity rather than associativity, right? But Cranelift's <code>bor</code> instruction really does produce identical results regardless of which order its operands are in, no matter where those operands came from. I still don't know what you mean by \"uninitialized\" in this context, since Cranelift's instruction semantics don't include any undefined behavior.</p>",
        "id": 339176042,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1677781567
    },
    {
        "content": "<p>Yes my bad, I meant commutativity. I guess you're right though, I need a short-circuiting or operator in order to do this correctly</p>",
        "id": 339179918,
        "sender_full_name": "Chase Wilson",
        "timestamp": 1677782696
    },
    {
        "content": "<p>You certainly can use branches to implement short-circuiting boolean-or, and Cranelift won't re-order those. But I still would love to understand what correctness criteria you're using, because from Cranelift's perspective I don't see any way to get an \"incorrect\" result in the situation you've described.</p>",
        "id": 339183158,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1677783636
    }
]