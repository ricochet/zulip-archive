[
    {
        "content": "<p>Is there currently a way to call a closure from cranelift? The ones I'm thinking of trying wouldn't have closed over any variables, but otherwise would be a first class function.</p>",
        "id": 360606281,
        "sender_full_name": "JT",
        "timestamp": 1684865435
    },
    {
        "content": "<p>Rust closures have an unstable ABI. What you can do however is do <code>Box&lt;Box&lt;dyn FnOnce()&gt;&gt;</code>, turns this into a raw pointer to pass to the cranelift compiled function and then provide an <code>extern \"C\"</code> function which turns the raw pointer back into <code>Box&lt;Box&lt;dyn FnOnce()&gt;&gt;</code> (or <code>&amp;Box&lt;dyn Fn()&gt;</code> if you have a <code>dyn Fn()</code> closure) and does the call. Note that you need double allocation as the layout of <code>Box&lt;dyn FnOnce()&gt;</code> is unstable.</p>",
        "id": 360607424,
        "sender_full_name": "bjorn3",
        "timestamp": 1684865718
    },
    {
        "content": "<p>Correct me if I'm wrong <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> but I think in this case a simpler answer to <span class=\"user-mention\" data-user-id=\"594827\">@JT</span>'s question is that if the closure doesn't capture any variables, then you can use it at a Rust type of <code>fn(...)</code> instead of <code>Fn*(...)</code> and then its representation is just a thin function pointer. You still have to deal with the Rust ABI for function calls being unstable but you shouldn't need to box anything or use trait objects, I think.</p>",
        "id": 360608632,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1684866053
    },
    {
        "content": "<p>Missed the \"wouldn't have closed over any variables\" part.</p>",
        "id": 360609015,
        "sender_full_name": "bjorn3",
        "timestamp": 1684866147
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504918\">Jamey Sharp</span> <a href=\"#narrow/stream/217117-cranelift/topic/Calling.20closures/near/360608632\">said</a>:</p>\n<blockquote>\n<p>Correct me if I'm wrong <span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> but I think in this case a simpler answer to <span class=\"user-mention silent\" data-user-id=\"594827\">JT</span>'s question is that if the closure doesn't capture any variables, then you can use it at a Rust type of <code>fn(...)</code> instead of <code>Fn*(...)</code> and then its representation is just a thin function pointer. You still have to deal with the Rust ABI for function calls being unstable but you shouldn't need to box anything or use trait objects, I think.</p>\n</blockquote>\n<p>Can you fill out what you mean a bit? I can't quite picture how to tie that back to cranelift. Are you saying pass it in as a <code>fn(...)</code> argument and then pass that value to cranelift?</p>",
        "id": 360610584,
        "sender_full_name": "JT",
        "timestamp": 1684866553
    },
    {
        "content": "<p>You still need an <code>extern \"C\"</code> wrapper function for calling the <code>fn(...)</code> I think.</p>",
        "id": 360610749,
        "sender_full_name": "bjorn3",
        "timestamp": 1684866598
    },
    {
        "content": "<p>You did cast the function pointer to a regular pointer or usize and pass it to the compiled function. The compiled function can then call a rust <code>extern \"C\"</code> function and pass this value. The rust function can transmute it back to a function pointer and call it.</p>",
        "id": 360611166,
        "sender_full_name": "bjorn3",
        "timestamp": 1684866694
    },
    {
        "content": "<p>you can do this without unsafe or transmutes I think: <a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=b9871f0855b226fafe1cdc22cf9bd9b8\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2021&amp;gist=b9871f0855b226fafe1cdc22cf9bd9b8</a></p>",
        "id": 360611945,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684866863
    },
    {
        "content": "<p>the Rust syntax for a closure (<code>|...| { ... }</code>) will coerce to a <code>fn(...) -&gt; ...</code> type if it has no captures</p>",
        "id": 360612089,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684866897
    },
    {
        "content": "<p>That's right, Chris, except that calling the <code>fn(...)</code> pointer from Cranelift is more complicated than calling it from Rust, because you can't put an <code>extern \"C\"</code> on the closure.</p>",
        "id": 360612795,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1684867080
    },
    {
        "content": "<p>In Wasmtime we make assumptions about the unstable Rust function-call ABI so that we can call such functions directly, but we also have a large testing infrastructure and some other advantages to give us confidence that new Rust versions haven't broken our usage. (edit: I might be wrong about this? maybe we do have <code>extern \"C\"</code> annotations everywhere we need them)</p>",
        "id": 360613202,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1684867182
    },
    {
        "content": "<p>ah, darn, I hadn't realized this can't take an ABI annotation</p>",
        "id": 360613602,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684867277
    },
    {
        "content": "<p>Thanks for the help :) this gives me a few ways to try</p>",
        "id": 360613718,
        "sender_full_name": "JT",
        "timestamp": 1684867312
    }
]