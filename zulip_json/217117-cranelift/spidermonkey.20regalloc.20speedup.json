[
    {
        "content": "<p>Spidermonkey significantly improved their regalloc performance for large functions: <a href=\"https://spidermonkey.dev/blog/2024/10/16/75x-faster-optimizing-the-ion-compiler-backend.html\">https://spidermonkey.dev/blog/2024/10/16/75x-faster-optimizing-the-ion-compiler-backend.html</a> Is there anything in here that would be useful for regalloc2?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://spidermonkey.dev/blog/2024/10/16/75x-faster-optimizing-the-ion-compiler-backend.html\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/dfae54dddc269c2b4ef22c8b8ff9eabf0d169165/68747470733a2f2f7370696465726d6f6e6b65792e6465762f6173736574732f696d672f747769747465722d6461726b2d6c617267652e706e673f31&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://spidermonkey.dev/blog/2024/10/16/75x-faster-optimizing-the-ion-compiler-backend.html\" title=\"75x faster: optimizing the Ion compiler backend\">75x faster: optimizing the Ion compiler backend</a></div><div class=\"message_embed_description\">In September, machine learning engineers at Mozilla filed a bug report indicating that Firefox was consuming excessive memory and CPU resources while running Microsoft’s ONNX Runtime (a machine learning library) compiled to WebAssembly.</div></div></div>",
        "id": 477370002,
        "sender_full_name": "bjorn3",
        "timestamp": 1729149219
    },
    {
        "content": "<blockquote>\n<p>Semi-NCA (from <em>Linear-Time Algorithms for Dominators and Related Problems</em> by Loukas Georgiadis) is a different algorithm that’s also used by LLVM and the Julia compiler. I prototyped this and was surprised to see how much faster it was: it got our total compilation time down from 14 seconds to less than 8 seconds. For a single-threaded compilation, it reduced the time under <code>ComputeImmediateDominators</code> from 7.1 seconds to 0.15 seconds.</p>\n</blockquote>\n<p>we use the simple-fast algorithm in cranelift, not sure if regalloc2 recomputes dominators again and if so what algorithm it uses, but it would definitely be nice to replace simple-fast with semi-nca or something else that isn't quadratic</p>",
        "id": 477469611,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729178572
    },
    {
        "content": "<p>the first change, switching from linked lists to vectors, regalloc2 has already done, as noted in the post</p>",
        "id": 477469686,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729178592
    },
    {
        "content": "<p>not sure about the sorting bits tho</p>",
        "id": 477469726,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729178604
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9481\">https://github.com/bytecodealliance/wasmtime/issues/9481</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/9481\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/894fc16314918b409afe40de6dfb24c76931de86/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643537313031306362333733336233376265613439623066653336616333386136643138313761313536306539313533373661626563613563613661393662332f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f39343831&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/9481\" title=\"Use a linear time dominators algorithm · Issue #9481 · bytecodealliance/wasmtime\">Use a linear time dominators algorithm · Issue #9481 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Right now we use the classic simple-fast algorithm (A Simple, Fast Dominance Algorithm by Cooper et al) and while this works well most of the time in practice, it has quadratic worst case time. Lin...</div></div></div>",
        "id": 477470563,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729178865
    },
    {
        "content": "<p>some discussion with Jan on mastodon here: <a href=\"https://mastodon.world/@mgaudet@discuss.systems/113318166531502647\">https://mastodon.world/@mgaudet@discuss.systems/113318166531502647</a></p>",
        "id": 477498634,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729188603
    },
    {
        "content": "<p>tl;dr is that RA2 independently came to the same optimizations more or less</p>",
        "id": 477498677,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729188614
    },
    {
        "content": "<p>sparse bitsets (we have our own thing that is adaptive past a threshold), and also avoiding quadratic behavior in move generation by doing half-moves with sorting to match them up</p>",
        "id": 477498724,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729188637
    },
    {
        "content": "<p>RA3 uses a <a href=\"https://github.com/Amanieu/regalloc3/blob/main/src/internal/value_live_ranges.rs\">new algorithm</a> for computing live ranges which is faster than the one used in RA2 and only requires 2 bitsets <em>total</em> (live-in blocks and live-out blocks). This works by first creating the use list for each value and then computing live range for each value one at a time. <br>\n Since live-in/out data is only needed for a single value at a time, we only need O(blocks) bits in the bitset instead of O(blocks*values).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3/blob/main/src/internal/value_live_ranges.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d74eb37490e1f4a84c3f092cebf15b6b74bf171/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616364393235303230393165353233646233613265396532313536376337336363656339303962653430663032376362656562373436356630343362313837302f416d616e6965752f726567616c6c6f6333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3/blob/main/src/internal/value_live_ranges.rs\" title=\"regalloc3/src/internal/value_live_ranges.rs at main · Amanieu/regalloc3\">regalloc3/src/internal/value_live_ranges.rs at main · Amanieu/regalloc3</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div>",
        "id": 477505524,
        "sender_full_name": "Amanieu",
        "timestamp": 1729191336
    },
    {
        "content": "<p>It does use a dense bitset though, so there may still be perf issues with very large functions like the one in ONNX, I'll need to do some testing.</p>",
        "id": 477506848,
        "sender_full_name": "Amanieu",
        "timestamp": 1729191781
    },
    {
        "content": "<p>On the same ONNX wasm blob from that issue, regalloc2 seems to spend 72% of the total regalloc time sorting ranges when merging bundles. That can be improved in 2 ways:</p>\n<ul>\n<li>More thorough phi elimination before regalloc.</li>\n<li>Using a linear-time merge instead of a sort.</li>\n</ul>",
        "id": 477570385,
        "sender_full_name": "Amanieu",
        "timestamp": 1729226273
    }
]