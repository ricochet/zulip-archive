[
    {
        "content": "<p>More pattern matching woes. These rules dont seem to be firing:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mf\">0.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">urem</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">subsume</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm64</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))))</span>\n\n<span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">power</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"mf\">2.</span>\n<span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">simplify</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">urem</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_from_imm64</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">))))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"cp\">$true</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_is_power_of_two</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"p\">))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">imm64</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">u64_sub</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))))</span>\n</code></pre></div>\n<p>These functions are unchanged:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">urem_x_1</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">urem</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">urem_x_pow2</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">urem</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">band</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v4</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and the constructor is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"cp\">#[inline]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">u64_is_power_of_two</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span> <span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">is_power_of_two</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 342596688,
        "sender_full_name": "kmeakin",
        "timestamp": 1679067452
    },
    {
        "content": "<p>Ah, I believe this is due to a limitation in the egraph framework: we cannot rewrite instructions that have side-effects. urem can trap, and so we can't have a rule that rewrites it away, in the general case. Of course this doesn't account for the fact that we should be able to, if the divisor is constant, as here. We talked a bit about this in #5908 and prior linked issue; we have ideas for how to better represent this; but right now, it's expected that the above won't work, sorry :-/</p>",
        "id": 342608691,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679069892
    },
    {
        "content": "<p>That's unfortunate. But I see there is a rewrite for <code>x/1 == x</code> though. Does that rule work?</p>",
        "id": 342617009,
        "sender_full_name": "kmeakin",
        "timestamp": 1679071871
    },
    {
        "content": "<p>I believe it's dead currently, too</p>",
        "id": 342617470,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679072001
    },
    {
        "content": "<p>I see. I'll submit a PR and note that they wont actually get fired yet</p>",
        "id": 342618889,
        "sender_full_name": "kmeakin",
        "timestamp": 1679072381
    },
    {
        "content": "<p>thanks!</p>",
        "id": 342619275,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679072468
    },
    {
        "content": "<p>ah this has interesting implications for porting the magic constant div/rem rewrites from the old simple preopt pass</p>",
        "id": 342627741,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679074673
    },
    {
        "content": "<p>(if you are interested in doing more mid-end rewrites stuff <span class=\"user-mention\" data-user-id=\"600668\">@kmeakin</span>, that could be an interesting project)</p>",
        "id": 342627907,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679074708
    },
    {
        "content": "<p>this is the old simple preopt stuff for some number divided/remaindered by a constant:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/divconst_magic_numbers.rs#L41-L217\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/divconst_magic_numbers.rs#L41-L217</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L206-L243\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L206-L243</a></p>\n</li>\n</ul>\n<p>needs to be ported to ISLE in the mid-end, but to do that we need to be able to rewrite potentially-trapping instructions in ISLE, as discussed upthread</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/divconst_magic_numbers.rs#L41-L217\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6f5a068c87e388dbfb677ac28e79679ccab04b09\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366164393432646133613139613635646465306334356133376164316465336365393137613862666339343232326130346535393266646266346464373961612f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/divconst_magic_numbers.rs#L41-L217\" title=\"wasmtime/divconst_magic_numbers.rs at main · bytecodealliance/wasmtime\">wasmtime/divconst_magic_numbers.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L206-L243\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6f5a068c87e388dbfb677ac28e79679ccab04b09\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366164393432646133613139613635646465306334356133376164316465336365393137613862666339343232326130346535393266646266346464373961612f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/simple_preopt.rs#L206-L243\" title=\"wasmtime/simple_preopt.rs at main · bytecodealliance/wasmtime\">wasmtime/simple_preopt.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 342628708,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679074927
    },
    {
        "content": "<p>I filed an issue for porting these magic constants over to ISLE, since I couldn't find one already on file: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6049\">https://github.com/bytecodealliance/wasmtime/issues/6049</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6049\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/28e940078f11376c0de7cc5454a339691d563838\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323531616633363231383164616662373135343432343364333763323933626634336435383633323039616166356135393931353562333932643230343430332f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36303439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6049\" title=\"Port divide-by-constant magic number optimizations from `simple_preopt` to ISLE mid-end · Issue #6049 · bytecodealliance/wasmtime\">Port divide-by-constant magic number optimizations from `simple_preopt` to ISLE mid-end · Issue #6049 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is the old simple preopt stuff for some number divided/remaindered by a non-power-of-two constant: https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/codegen/src/divconst_magic_n...</div></div></div>",
        "id": 342629683,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679075203
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217117-cranelift/topic/ISLE.20matching.20problems/near/342627907\">said</a>:</p>\n<blockquote>\n<p>(if you are interested in doing more mid-end rewrites stuff <span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span>, that could be an interesting project)</p>\n</blockquote>\n<p>That could be fun</p>",
        "id": 342634625,
        "sender_full_name": "kmeakin",
        "timestamp": 1679076413
    }
]