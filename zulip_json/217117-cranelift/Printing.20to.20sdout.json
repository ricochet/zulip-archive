[
    {
        "content": "<p>Hi all,</p>\n<p>I'm implementing a language in Cranelift. How can I make a compiled function print to stdout/stderr? Thanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 429101467,
        "sender_full_name": "Shane B",
        "timestamp": 1711216864
    },
    {
        "content": "<p>Before you compile your function you need to call <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/struct.Context.html#method.set_disasm\"><code>set_disasm</code></a> with <code>true</code> on the context.<br>\nAfter the function is compiled (so after <code>define_function</code>) you can get the disassembly like so: <code>ctx.compiled_code().unwrap().vcode.as_ref().unwrap()</code>.</p>\n<p>As a side-note, you may want to also disassemble the machine code (<code>ctx.compiled_code().unwrap().code_buffer()</code>) using a normal disassembler like iced or smth since I found that to be more readable from time to time.</p>",
        "id": 429105586,
        "sender_full_name": "T0b1",
        "timestamp": 1711220044
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"563135\">@T0b1</span>  Sorry, maybe I worded the question poorly. I'd like there to be a built-in print function in my language, e.g. <code>print(...)</code> that the user can call to print text to stdout when the code is JIT-compiled/executed. I couldn't find an instruction or any documentation to do this.</p>",
        "id": 429106631,
        "sender_full_name": "Shane B",
        "timestamp": 1711220887
    },
    {
        "content": "<p>If your print function simply take a string pointer or smth like that then you can just link it to an extern \"C\" function defined in your runtime library.<br>\nFor the jit crate this should work like this (just compiled this from some old code, may not be exactly like this):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">extern_fn</span><span class=\"p\">(</span><span class=\"n\">test</span>: <span class=\"kt\">u64</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i64</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"mi\">40</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// when initializing your module</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span>: <span class=\"nc\">JITBuilder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"p\">;</span>\n<span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">symbol</span><span class=\"p\">(</span><span class=\"s\">\"extern_fn\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">extern_fn</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">);</span>\n<span class=\"c1\">// ...</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"nc\">JITModule</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cm\">/* ... */</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Signature</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">CallConv</span>::<span class=\"n\">SystemV</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// linux C callconv</span>\n<span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n<span class=\"n\">sig</span><span class=\"p\">.</span><span class=\"n\">returns</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">AbiParam</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">));</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">extern_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"s\">\"extern_fn\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Import</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"c1\">// when compiling func</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">extern_ref</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_func_in_func</span><span class=\"p\">(</span><span class=\"n\">extern_id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instruction_builder</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">extern_ref</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">ir_value_with_arg</span><span class=\"p\">]);</span>\n<span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">make_inst_results</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">I64</span><span class=\"p\">);</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inst_res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">dfg</span><span class=\"p\">.</span><span class=\"n\">first_result</span><span class=\"p\">(</span><span class=\"n\">inst</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>For the AOT case this should work similarily probably.<br>\nIf your print function uses variable arguments, then it becomes a bit more complicated since cranelift didn't(/doesn't?) support calling vararg functions.</p>",
        "id": 429108705,
        "sender_full_name": "T0b1",
        "timestamp": 1711222658
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"703845\">@Shane B</span> to add a bit more to <span class=\"user-mention\" data-user-id=\"563135\">@T0b1</span>'s answer (thanks) with higher-level background: you can think of Cranelift's IR like a machine-independent assembly language. How would one print to stdout in assembly? There's no built-in machine instruction; likewise there's no built-in Cranelift operator for this. One has to call out to the operating system somehow. Cranelift gives you (i) basic computation, with arithmetic, memory, and control flow, and (ii) the ability to call, including functions that you've provided.</p>\n<p>So for any functionality that isn't \"natively\" present in Cranelift, the usual answer will be to write a library function that provides it; if that library function needs access to the OS, it gets that by being written in another language that has access to the OS (as above here).</p>",
        "id": 429108879,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1711222792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"563135\">@T0b1</span>  <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>  This worked perfectly. Thanks!!</p>",
        "id": 429477036,
        "sender_full_name": "Shane B",
        "timestamp": 1711388992
    },
    {
        "content": "<p>Do I to do anything special if I want to link an external function with cranelift-object instead of jit?</p>",
        "id": 429817723,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711532281
    },
    {
        "content": "<p>And, as an aside, what the <code>name</code> parameter in <code>ObjectBuilder::new</code> is used for?</p>",
        "id": 429822724,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711533778
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> <a href=\"#narrow/stream/217117-cranelift/topic/Printing.20to.20sdout/near/429817723\">said</a>:</p>\n<blockquote>\n<p>Do I to do anything special if I want to link an external function with cranelift-object instead of jit?</p>\n</blockquote>\n<p>Just specify <code>Linkage::Import</code> when declaring the function and make sure to tell the linker to link against whichever library it should be imported from.</p>",
        "id": 429862939,
        "sender_full_name": "bjorn3",
        "timestamp": 1711547276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> <a href=\"#narrow/stream/217117-cranelift/topic/Printing.20to.20sdout/near/429822724\">said</a>:</p>\n<blockquote>\n<p>And, as an aside, what the <code>name</code> parameter in <code>ObjectBuilder::new</code> is used for?</p>\n</blockquote>\n<p>That is the name that will be embedded in the object file. It may be used by the linker for error messages. A C compiler would put the name of the source file here.</p>",
        "id": 429863440,
        "sender_full_name": "bjorn3",
        "timestamp": 1711547404
    },
    {
        "content": "<p>I'm trying to do a similar thing, static AOT compilation against libc, trying to do <code>puts(\"Hello, World\\n\")</code> type of thing.<br>\nI wonder how do I work with constants in that case, e.g. if I want to put \"Hello, World\" string literal in some constant pool.<br>\nShould I worry about this at all? Can I put string literals inline?</p>",
        "id": 430478603,
        "sender_full_name": "Yury Solovyov",
        "timestamp": 1711893365
    },
    {
        "content": "<p>For strings and the like you will have to use <code>module.define_data()</code> just like you have to use for global variables.</p>",
        "id": 430478938,
        "sender_full_name": "bjorn3",
        "timestamp": 1711893686
    },
    {
        "content": "<p>I was looking at jit demo, and I can't quite map these lines to updated or to ObjectModule API, any ideas?<br>\n<a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L108-L111\">https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L108-L111</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L108-L111\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9b00f54157161768369b9a3b9620d2019699c645\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333430333537393361666134316531333436663934653932653836343839643161323039633236306564646632306132343033353533656234636264343238622f62797465636f6465616c6c69616e63652f6372616e656c6966742d6a69742d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L108-L111\" title=\"cranelift-jit-demo/src/jit.rs at e435835efbd7636bca230a3434d1d586587b378b · bytecodealliance/cranelift-jit-demo\">cranelift-jit-demo/src/jit.rs at e435835efbd7636bca230a3434d1d586587b378b · bytecodealliance/cranelift-jit-demo</a></div><div class=\"message_embed_description\">JIT compiler and runtime for a toy language, using Cranelift - bytecodealliance/cranelift-jit-demo</div></div></div>",
        "id": 430487606,
        "sender_full_name": "Yury Solovyov",
        "timestamp": 1711900892
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705601\">Yury Solovyov</span> <a href=\"#narrow/stream/217117-cranelift/topic/Printing.20to.20sdout/near/430487606\">said</a>:</p>\n<blockquote>\n<p>I was looking at jit demo, and I can't quite map these lines to updated or to ObjectModule API, any ideas?<br>\n<a href=\"https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L108-L111\">https://github.com/bytecodealliance/cranelift-jit-demo/blob/e435835efbd7636bca230a3434d1d586587b378b/src/jit.rs#L108-L111</a></p>\n</blockquote>\n<p>Something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">().</span><span class=\"n\">emit</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 430488484,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711901701
    },
    {
        "content": "<p>Then you can write the object to a file and link using whatever linker you have.</p>",
        "id": 430488588,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711901818
    },
    {
        "content": "<p>I've tried putting everything into one scope, just to figure out what should call what, but now I get borrowing issues.<br>\nI'd be happy to work them out on my own, I just need to understand which part I can to separate.<br>\n<a href=\"https://gist.github.com/YurySolovyov/10f0ea326bf8ecb17f4c91768e135faa\">https://gist.github.com/YurySolovyov/10f0ea326bf8ecb17f4c91768e135faa</a></p>\n<p>In pseudo code I'm trying to do something like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">greet</span><span class=\"w\"> </span>: <span class=\"nc\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello, Cranelift!</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">puts</span><span class=\"p\">(</span><span class=\"n\">greet</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>In any case,  here is my latest attempt if anyone can take a look, that would be greatly appreciated</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/YurySolovyov/10f0ea326bf8ecb17f4c91768e135faa\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/91f9baed8f4fc08c462d1a4de5a8c23942d45e97\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/YurySolovyov/10f0ea326bf8ecb17f4c91768e135faa\" title=\"Hello, Cranelift!\">Hello, Cranelift!</a></div><div class=\"message_embed_description\">Hello, Cranelift! GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 430500375,
        "sender_full_name": "Yury Solovyov",
        "timestamp": 1711912700
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"705601\">Yury Solovyov</span> <a href=\"#narrow/stream/217117-cranelift/topic/Printing.20to.20sdout/near/430500375\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://gist.github.com/YurySolovyov/10f0ea326bf8ecb17f4c91768e135faa\">https://gist.github.com/YurySolovyov/10f0ea326bf8ecb17f4c91768e135faa</a></p>\n</blockquote>\n<p><code>module.finish()</code> should be the last thing you do.<br>\nThere's my cranelift codegen in case you want an example <a href=\"https://github.com/JohnDowson/rotth/blob/slate/rotth/src/emit/cranelift2.rs\">https://github.com/JohnDowson/rotth/blob/slate/rotth/src/emit/cranelift2.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/JohnDowson/rotth/blob/slate/rotth/src/emit/cranelift2.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/73c1966b788687659e1eb11b4c296ea0ef59bf50\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323563643165386334353030666566396431623637333566306561336532393337643732326532336230366131343833666264306638613633616462313462362f4a6f686e446f77736f6e2f726f747468)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/JohnDowson/rotth/blob/slate/rotth/src/emit/cranelift2.rs\" title=\"rotth/rotth/src/emit/cranelift2.rs at slate · JohnDowson/rotth\">rotth/rotth/src/emit/cranelift2.rs at slate · JohnDowson/rotth</a></div><div class=\"message_embed_description\">Rotth is a stack based concatenative language highly inspired by Porth - JohnDowson/rotth</div></div></div>",
        "id": 430500626,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711912934
    },
    {
        "content": "<p>Thanks! I'll look into it more.<br>\nIt seems in your case you also have global values in <code>todo!();</code> as well as working with string literals.<br>\nNot sure if my simple example can be made to work with local vars, but I could be wrong.</p>",
        "id": 430501032,
        "sender_full_name": "Yury Solovyov",
        "timestamp": 1711913291
    },
    {
        "content": "<p>Yes, but at least you can look at the order of operations with <code>module</code></p>",
        "id": 430501069,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711913348
    },
    {
        "content": "<p>Yes, that helps, sorry, didn't mean to be harsh.</p>",
        "id": 430501586,
        "sender_full_name": "Yury Solovyov",
        "timestamp": 1711913795
    },
    {
        "content": "<p>No offense taken</p>",
        "id": 430502532,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711914611
    },
    {
        "content": "<p>Okay, I've managed to resolve borrowing issues, and make it build &amp; output some IR. Moving finish() call later helped a lot.</p>",
        "id": 430561251,
        "sender_full_name": "Yury Solovyov",
        "timestamp": 1711960111
    }
]