[
    {
        "content": "<p>For those interested, I opened 2 issues related to what I was talking about in today's meeting:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\">https://github.com/bytecodealliance/wasmtime/issues/6154</a> - the jump threading and <code>v128.load32_splat</code> issue</li>\n<li><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6159\">https://github.com/bytecodealliance/wasmtime/issues/6159</a> - a broader issue about instruction scheduling (I think at least)</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e52384c23e363abee6e95771f6d52282d1fe7141\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303538613131323632393963303961333435313065646439653032343331373737626532653534356464663166626564663438313935633034386137323535622f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36313534)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6154\" title=\"Cranelift, egraphs, jump threading, and missed lowering rules · Issue #6154 · bytecodealliance/wasmtime\">Cranelift, egraphs, jump threading, and missed lowering rules · Issue #6154 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">At a high level this is a pretty simple issue where this module: (module (memory 1) (func (param i32) (result v128) local.get 0 v128.load32_splat ) ) generates this code by default on x86_64: $ car...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6159\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1491a10211a4569051f01c680b37218cb6ec9580\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343535393363643932366132626163643464303061633432393934373839623435656239366266643932316438313834343037633838343031623430363765362f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36313539)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6159\" title=\"Cranelift and suboptimal instruction scheduling · Issue #6159 · bytecodealliance/wasmtime\">Cranelift and suboptimal instruction scheduling · Issue #6159 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I did a bit of work recently to get a build of XNNPACK working with Wasmtime. My original motivation for doing this was that XNNPACK has been used as a benchmark to evaluate a number of changes to ...</div></div></div>",
        "id": 347250584,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1680727565
    }
]