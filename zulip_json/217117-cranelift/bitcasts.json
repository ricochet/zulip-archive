[
    {
        "content": "<p>Hey,</p>\n<p>A few questions about <code>bitcast</code> and <code>raw_bitcast</code>, since they don't seem to match up exactly with how they're described in the docs.</p>\n<p>For <code>bitcast</code>, the docs allow any types which are the same size - but I notice that x86_64 and s390x currently only support <code>F32 &lt;-&gt; I32</code> and <code>F64 &lt;-&gt; I64</code>, which aligns with the <code>reinterpret</code> instructions that <code>bitcast</code> is used for. Would it be best to re-define this to be stricter on types, as the current definition is unclear (given the lack of examples) as to how it works for SIMD values (eg, the verifier currently compares <code>lane_size</code>, which is not suggested by the docs)? Or is this a similar case to <code>sqmul_round_sat</code>, where the IR definition is more polymorphic than the backends actually support, owing to no pressing need for the greater polymorphism, and in fact an <code>i16x8</code> -&gt; <code>i8x16</code> bitcast - which is rejected by the verifier currently - should theoretically be support (as described in the docs)?</p>\n<p>As for <code>raw_bitcast</code>, as far as I can tell this isn't actually \"used\", instead being beneficial for the register allocator: is the existing implementation of this (<code>gen_move</code> on AArch64 and x86_64) of any value, or could this be considered effectively an outright no-op (which seems to be how s390x views it)?</p>",
        "id": 292593717,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1660056828
    },
    {
        "content": "<p>raw_bitcast is used to convert between vectors of different lane sizes.</p>",
        "id": 292594125,
        "sender_full_name": "bjorn3",
        "timestamp": 1660056943
    },
    {
        "content": "<p>Sorry, I meant more as in I don't believe it actually emits any instructions (according to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\">this issue</a>) - it's solely used for Cranelift's internal type system, correct?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c129af85e1db811e7c2380a8f8eee72a41c3c2d7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343733386163663139363439656339363637376230336466383031353533616136643234653066636532653832663062616636363162376431313337666233642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f31313437)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1147\" title=\"Too many raw_bitcasts in SIMD code · Issue #1147 · bytecodealliance/wasmtime\">Too many raw_bitcasts in SIMD code · Issue #1147 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">What is the feature or code improvement you would like to do in Cranelift? During translation from Wasm to CLIF, a combination of Wasm&#39;s v128 type and Cranelift&#39;s current type system forces...</div></div></div>",
        "id": 292594359,
        "sender_full_name": "Damian Heaton",
        "timestamp": 1660057006
    },
    {
        "content": "<p>Indeed. That is the intention.</p>",
        "id": 292595402,
        "sender_full_name": "bjorn3",
        "timestamp": 1660057304
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426905\">@Damian Heaton</span> there was an extensive discussion of raw_bitcast in yesterday's Cranelift meeting following a bunch of thought in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4566\">https://github.com/bytecodealliance/wasmtime/issues/4566</a>. <span class=\"user-mention\" data-user-id=\"268749\">@Ulrich Weigand</span> is proposing much clearer and more explicit semantics for raw_bitcast, motivated initially by endianness questions (but as a result we'll have a much clearer spec)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4566\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/07e48ef4b9a29e26e513d6a45d1b48ec39d1684c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356635333965396139626231346461653765366130346234353139633733613938323434316636663337363734333032363265643330636566643430626163332f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34353636)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4566\" title=\"Vector register endianness causing ABI incompatibility · Issue #4566 · bytecodealliance/wasmtime\">Vector register endianness causing ABI incompatibility · Issue #4566 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, s390x is the only big-endian platform supported by cranelift, which has already caused problems related to memory accesses in the past, since wasmtime defines all data in its memory to b...</div></div></div>",
        "id": 292615028,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660063520
    },
    {
        "content": "<p>re: <code>bitcast</code>, given that <code>raw_bitcast</code> will cover \"reinterpret vector across lane\" cases, I can see it making sense for same-lane-width cases as a straightforward vectorization (i32x4 -&gt; f32x4 for example) but that's it</p>",
        "id": 292615403,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660063657
    },
    {
        "content": "<p>so I think the answer is basically \"we're working on it\" and see above issue :-)</p>",
        "id": 292615436,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1660063667
    }
]