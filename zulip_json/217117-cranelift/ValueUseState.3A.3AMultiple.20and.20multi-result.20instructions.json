[
    {
        "content": "<p>I'm curious to explore some 128-bit stuff a bit and right now I'm looking at input such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">u0</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">(</span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">v10</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"n\">v18</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"w\">    </span><span class=\"n\">v20</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">uextend</span><span class=\"p\">.</span><span class=\"kt\">i128</span><span class=\"w\"> </span><span class=\"n\">v10</span>\n<span class=\"w\">    </span><span class=\"n\">v14</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"n\">v18</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v20</span>\n<span class=\"w\">    </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">isplit</span><span class=\"w\"> </span><span class=\"n\">v14</span>\n<span class=\"w\">    </span><span class=\"n\">jump</span><span class=\"w\"> </span><span class=\"n\">block1</span>\n\n<span class=\"n\">block1</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v16</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>which after <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9136\">https://github.com/bytecodealliance/wasmtime/pull/9136</a> produces:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">   </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">55</span><span class=\"w\">                      </span><span class=\"n\">pushq</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">e5</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">r9</span>\n<span class=\"w\">   </span><span class=\"mi\">7</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"n\">c9</span><span class=\"w\">                </span><span class=\"n\">xorq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">   </span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">f0</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">   </span><span class=\"n\">d</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">4</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\"> </span><span class=\"n\">c8</span><span class=\"w\">                </span><span class=\"n\">addq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">r9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rax</span>\n<span class=\"w\">  </span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">83</span><span class=\"w\"> </span><span class=\"n\">d1</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">             </span><span class=\"n\">adcq</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">48</span><span class=\"w\"> </span><span class=\"mi\">89</span><span class=\"w\"> </span><span class=\"n\">ec</span><span class=\"w\">                </span><span class=\"n\">movq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">rsp</span>\n<span class=\"w\">  </span><span class=\"mi\">17</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"mi\">5</span><span class=\"n\">d</span><span class=\"w\">                      </span><span class=\"n\">popq</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"nc\">c3</span><span class=\"w\">                      </span><span class=\"n\">retq</span>\n</code></pre></div>\n<p>notably what I'm trying to get happen is to sink the <code>movq    (%rdi), %r9</code> into <code>addq    %r9, %rax</code>. Currently the sinking is being prevented by <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L539-L542\">this line</a> but I don't fully understand the comment there. It seems like if this heuristic is needed then it's probably a conservative one because load sinking should be ok in this specific scenario at least. </p>\n<p>Which leads me to my question: could this <code>force_multiple</code> be explained a bit more? Is there an example of how this could go wrong if <code>force_multiple</code> were ignored? (if I set it to <code>false</code> unconditionally no filetests break so I wasn't able to learn more via that). Furthermore is there a way to perhaps make this check less conservative to allow load sinking in the above case?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9136\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/44c4d813ab24f1308ad56060b4912f220aafe8f2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633238326138623463303062643035323866663730666661366163306236643866356634653564666636653766393931313834303264366638623533623365642f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39313336&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9136\" title=\"Implement a few minor optimizations around 128-bit integers by alexcrichton 路 Pull Request #9136 路 bytecodealliance/wasmtime\">Implement a few minor optimizations around 128-bit integers by alexcrichton 路 Pull Request #9136 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit implements a few minor changes for i128 in both the egraph optimizations and lowerings for x64. The optimization pass will now transform iconcat into a uextend or sextend where appropri...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L539-L542\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/94756e259a6e0e4d169e20e7601bc20887d37224/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363435633462323633376132323762663061346535393932666565366563303036616632383761326132333966303836346634613937666662303266383663662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L539-L542\" title=\"wasmtime/cranelift/codegen/src/machinst/lower.rs at 3f5c21bff4babe54f51deceed1bb1d3321b6f2aa 路 bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/machinst/lower.rs at 3f5c21bff4babe54f51deceed1bb1d3321b6f2aa 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 462833578,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723831258
    },
    {
        "content": "<p>blame says it is a fix for <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3953\">https://github.com/bytecodealliance/wasmtime/issues/3953</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3953\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/24a48bea30561eeaa41d1f0d511eab0e6db9b2fe/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383435353361626436303932393536333331626663643263663234626466666134336230396334666535343466323939333033353037393534366637343536312f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33393533&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3953\" title=\"Cranelift: avoid load coalescing when an operand is reused 路 Issue #3953 路 bytecodealliance/wasmtime\">Cranelift: avoid load coalescing when an operand is reused 路 Issue #3953 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In examining #3951 and #3934, the main problem in both cases seems to be that the load coalescing logic cannot detect when a loaded operand may be reused. Because of this, we must manually ensure t...</div></div></div>",
        "id": 462833974,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723831391
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span></p>",
        "id": 462833995,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723831400
    },
    {
        "content": "<p>yep, that; the case you show in CLIF above is a special case where a single instruction is responsible for both of the uses, in theory we could detect that, we'd want to think it through very carefully though</p>",
        "id": 462834174,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831474
    },
    {
        "content": "<p>(nit: not \"heuristic\" but \"invariant\" or \"rule\"; heuristics can be violated without correctness issues)</p>",
        "id": 462834242,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831506
    },
    {
        "content": "<p>hm ok, I still don't really understand what this is doing but sounds like I should assume this can't easily change</p>",
        "id": 462834777,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723831729
    },
    {
        "content": "<p>so the basic idea of the analysis is to prove that an instruction is used only (or at most) once; that's the condition we need to sink it</p>",
        "id": 462834829,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831760
    },
    {
        "content": "<p>(we could do better if we reasoned about location and sunk it to the first of several locations it's used if it dominates all the others, but that's way more complex)</p>",
        "id": 462834858,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831777
    },
    {
        "content": "<p>when there is a single output, this is reasonably straightforward: we do a transitive fixpoint algorithm where we generate a \"Multiple\" at any op that's used multiple times, and propagate that backward</p>",
        "id": 462834902,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831802
    },
    {
        "content": "<p>(because matching/sinking can go arbitrarily high up the tree, we need a transitive notion of \"used more than once\")</p>",
        "id": 462834972,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831826
    },
    {
        "content": "<p>when there are multiple outputs, even if each output is used only once, the op itself is used more than once</p>",
        "id": 462835014,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831845
    },
    {
        "content": "<p>we could refine the lattice more and encode logic for 0+0 -&gt; 0, 0+1 / 1+0 -&gt; 1, 1+1 -&gt; many, 1+many / many+1 -&gt; many</p>",
        "id": 462835067,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831878
    },
    {
        "content": "<p>and then add a special case for 1+1 (if same 1) -&gt; 1</p>",
        "id": 462835081,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831887
    },
    {
        "content": "<p>but that's... a lot of subtlety and I don't have confidence enough in it to do it right now</p>",
        "id": 462835111,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831901
    },
    {
        "content": "<p>hopefully makes more sense?</p>",
        "id": 462835125,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831912
    },
    {
        "content": "<p>One part I don't understand though is why multiple-results matter here. ISLE can't match instructions with multiple results in patterns afaik so we can't possibly go up the tree and somehow duplicate the operands of a multi-result instruction, right?</p>",
        "id": 462835224,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723831933
    },
    {
        "content": "<p>well, when building the analysis we try not to couple current implementation limits such as \"ISLE can't match instructions with multiple results\" with the invariants elsewhere; that could easily lead to very subtle bugs later when we expand its capability, and in any case leads to very hard to reason about invariants</p>",
        "id": 462835333,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723831997
    },
    {
        "content": "<p>the specific case of <code>isplit</code> returning two things and then <code>ret</code> consuming both is a bit of a red herring as it was the first test case I came up with, the actual benchmark I think stores the two results of <code>isplit</code> into memory or just one or something like that</p>",
        "id": 462835349,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832010
    },
    {
        "content": "<p>I think the right fix here, if we want to make the analysis more powerful, is to do as noted above -- recognize the special case</p>",
        "id": 462835350,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832010
    },
    {
        "content": "<p>or alternately, have a notion of \"rooted value\" that stops propagation of multiplicity</p>",
        "id": 462835396,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832034
    },
    {
        "content": "<p>then we need to guarantee that this is never matched through</p>",
        "id": 462835412,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832041
    },
    {
        "content": "<p>the key there would be to have a single source of truth for that notion/kind of instruction and consult it in both places</p>",
        "id": 462835580,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832120
    },
    {
        "content": "<p>I'm still not understanding though because isn't it structurally not possible to match through a multi-result instruction?</p>",
        "id": 462835787,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832228
    },
    {
        "content": "<p>in that aren't we already guaranteed that doesn't happen?</p>",
        "id": 462835807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832237
    },
    {
        "content": "<p>it currently isn't possible, but let's not bake in that assumption, is what I'm saying; it's an implementation limit not something fundamental</p>",
        "id": 462835890,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832281
    },
    {
        "content": "<p>the \"rooted instruction\" notion above is my attempt to reify it as an actual concept we can rely on :-)</p>",
        "id": 462835973,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832306
    },
    {
        "content": "<p>said another way: can we describe accurately what the result of the analysis is?</p>",
        "id": 462836021,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832334
    },
    {
        "content": "<p>ok yeah that makes sense, I'm just trying to affirm my current understanding of the world to understand what you're saying we want to move towards</p>",
        "id": 462836036,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832341
    },
    {
        "content": "<p>e.g. I don't know what you mean by \"rooted instruction\"</p>",
        "id": 462836048,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832346
    },
    {
        "content": "<p>if the answer has to invoke implementation limits and just-so arguments why it won't cause an issue, that's a very bad place to be in</p>",
        "id": 462836061,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832355
    },
    {
        "content": "<p>vs. having a semantic concept and defining things around it</p>",
        "id": 462836085,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832367
    },
    {
        "content": "<p>and it's difficult for me to reason about matching through things when that's currently just a hypothetical for multi-result instructions</p>",
        "id": 462836086,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832368
    },
    {
        "content": "<p>\"rooted instruction\" is a concept that reifies the notion of \"thing that cannot be matched through\"</p>",
        "id": 462836199,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832408
    },
    {
        "content": "<p>rooted because we need to actually codegen it at the root of a matching tree</p>",
        "id": 462836215,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832416
    },
    {
        "content": "<p>once we have that guarantee, semantically, we can define multiplicity in terms of it</p>",
        "id": 462836244,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832430
    },
    {
        "content": "<p>basically my whole thing here is: we need to define multiplicity succinctly and clearly so we can think about it. if our definition includes reasoning about matching/lowering algorithm stuff, we've failed</p>",
        "id": 462836281,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832454
    },
    {
        "content": "<p>(in the sense that, that's a recipe for muddy thinking and further bugs)</p>",
        "id": 462836323,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832480
    },
    {
        "content": "<p>sorry I'm also trying to catch up because it sounds like you're trying to rebut a change I'm proposing but I'm not proposing anything and am trying to better understand what we have today</p>",
        "id": 462836388,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832512
    },
    {
        "content": "<p>basically I'm justifying why we have what we have today against the \"why can't we remove <code>force_multiple</code>\"</p>",
        "id": 462836479,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832546
    },
    {
        "content": "<p>as succinctly as I can put it: multiplicity has been defined (in this analysis) to mean \"is an instruction referenced multiple times, or referenced by another instruction that is referenced multiple times\". The algorithm approximates that in the presence of multiple-output instructions by the use of the <code>force_multiple</code> mechanism</p>",
        "id": 462836733,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832662
    },
    {
        "content": "<p>what I'm then proposing is that we can <em>change</em> that definition to change the answer to your question (\"why can't we remove\" -&gt; \"now we can\") by introducing this notion of rooted instructions</p>",
        "id": 462836795,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832697
    },
    {
        "content": "<p>ok that makes sense to me yeah, thanks!</p>",
        "id": 462837080,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832825
    },
    {
        "content": "<p>cool. happy to review if you want to take a stab at this (I unfortunately don't have the time or mental energy atm to do it myself!)</p>",
        "id": 462837124,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832852
    },
    {
        "content": "<p>is <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L1278\">this function</a>, <code>get_value_as_source_or_const</code>, a suitable \"choke point\" where the concept of a rooted instruction might be able to be inserted?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L1278\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/94756e259a6e0e4d169e20e7601bc20887d37224/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363435633462323633376132323762663061346535393932666565366563303036616632383761326132333966303836346634613937666662303266383663662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L1278\" title=\"wasmtime/cranelift/codegen/src/machinst/lower.rs at 3f5c21bff4babe54f51deceed1bb1d3321b6f2aa 路 bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/machinst/lower.rs at 3f5c21bff4babe54f51deceed1bb1d3321b6f2aa 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 462837135,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832857
    },
    {
        "content": "<p>I see that for side-effecting instructions it <a href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L1332\">already ensures there's only one output</a> but I suspect more would be needed</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L1332\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/94756e259a6e0e4d169e20e7601bc20887d37224/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363435633462323633376132323762663061346535393932666565366563303036616632383761326132333966303836346634613937666662303266383663662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/3f5c21bff4babe54f51deceed1bb1d3321b6f2aa/cranelift/codegen/src/machinst/lower.rs#L1332\" title=\"wasmtime/cranelift/codegen/src/machinst/lower.rs at 3f5c21bff4babe54f51deceed1bb1d3321b6f2aa 路 bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/machinst/lower.rs at 3f5c21bff4babe54f51deceed1bb1d3321b6f2aa 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 462837212,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832883
    },
    {
        "content": "<p>yep, that's indeed where we have all the conditions for \"seeing through\" a use, so let's add conditions there (for pure and impure cases) for \"is rooted\" and avoid seeing it as any more than an opaque value if so</p>",
        "id": 462837326,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723832948
    },
    {
        "content": "<p>how come it would be necessary for the \"pure\" case?</p>",
        "id": 462837381,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723832977
    },
    {
        "content": "<p>oh wait let me try to answer myself</p>",
        "id": 462837433,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833001
    },
    {
        "content": "<p>let's say that you <code>v0 = load ... ; v1, v2 = isplit v0</code> - if you \"look through\" the <code>isplit</code>, despite it being pure, you could \"look through\" a use of <code>v1</code> and <code>v2</code> and possibly generate two loads</p>",
        "id": 462837582,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833041
    },
    {
        "content": "<p>is that right?</p>",
        "id": 462837588,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833044
    },
    {
        "content": "<p>yep exactly</p>",
        "id": 462837607,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833053
    },
    {
        "content": "<p>so we cut things at the isplit, it's \"rooted\" now, it becomes just a single use for the load, and we can't look through it</p>",
        "id": 462837652,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833077
    },
    {
        "content": "<p>(I'm not sure if that addresses your original desire to get more load-sinking; the loads you want sunk are actually single-use and the splits happen as consumers of the things like iadds that consume loads, right?)</p>",
        "id": 462837952,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833233
    },
    {
        "content": "<p>so as perhaps the most simple change, it would perhaps look like:</p>\n<ul>\n<li>remove <code>force_multiple</code></li>\n<li>add logic to <code>get_value_as_source_or_const</code> to return <code>InputSourceInst::None</code> if the instruction has multiple outputs</li>\n</ul>",
        "id": 462837999,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833246
    },
    {
        "content": "<p>yeah what specifically I was seeing was that any operand to <code>isplit</code> would transitively mark all operands as <code>Multiple</code> which thwarted load sinking elsewhere</p>",
        "id": 462838050,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833281
    },
    {
        "content": "<p>the downside of this \"simple\" change though is that if a multi-result instruction has a dead result, e.g. the second return value of <code>isplit</code>, it in theory should allow seeing through the <code>isplit</code> but it doesn't?</p>",
        "id": 462838185,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833362
    },
    {
        "content": "<p>that delta is I think the logical outcome of the concept of \"rooted\" being defined for now as any multi-output; I was going to suggest a more generalized thing but then it would result in silly dead code; as long as we have comments where <code>force_multiple</code> is noting that we explicitly do not look through multi-output insts when matching, and add a comment where we block such seeing-through noting that it is load-bearing</p>",
        "id": 462838257,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833387
    },
    {
        "content": "<p>another alternative is to make the multiplicity analysis smarter: Once + Once -&gt; Multiple, including across multiple inputs, but Once + not-used should result in Once</p>",
        "id": 462838318,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833422
    },
    {
        "content": "<p>s/multiple inputs/multiple outputs/</p>",
        "id": 462838334,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833432
    },
    {
        "content": "<p>removing <code>force_multiple</code> gets that for free though right?</p>",
        "id": 462838377,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833465
    },
    {
        "content": "<p>b/c if you only use one result of <code>isplit</code> the operand only gets a single use?</p>",
        "id": 462838408,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833479
    },
    {
        "content": "<p>hm actually wait I don't think \"just\" removing <code>force_multiple</code> enough, the DFS would have to stop propagating through a multi-result instruction</p>",
        "id": 462838534,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833522
    },
    {
        "content": "<p>b/c otherwise if you use both results of <code>isplit</code> it'll naturally mark the operand as used twice right? (if the only change is to remove <code>force_multiple</code>)</p>",
        "id": 462838576,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833541
    },
    {
        "content": "<p>right, I think we actually need the notion of \"rooted\"; it's actually that we force codegen at that matching root (by not seeing through it) and really do only use the input once as a result</p>",
        "id": 462838625,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833565
    },
    {
        "content": "<p>hm ok I'll try to poke at this and see if I can't bottom this out more</p>",
        "id": 462838876,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723833670
    },
    {
        "content": "<p>happy to talk more in next week's CL meeting too!</p>",
        "id": 462838929,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1723833698
    },
    {
        "content": "<p>I've ended up with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\">https://github.com/bytecodealliance/wasmtime/pull/9137</a> as an attempt of this</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d6963be17dc18a9500a20d75c6b5737093acc9d1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626464653335336165326666383561393638646263343332313735366261653232633762663233646438353234363538373236386430623161623438343732312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39313337&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9137\" title=\" Don't force `Multiple` on multi-result instructions  by alexcrichton 路 Pull Request #9137 路 bytecodealliance/wasmtime\"> Don't force `Multiple` on multi-result instructions  by alexcrichton 路 Pull Request #9137 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit is a result of discussion on Zulip and is\nattempting to fix an issue where some 128-bit instructions aren&#39;t fully\nbenefitting from load sinking on x64. At a high level 128-bit\naddit...</div></div></div>",
        "id": 462855365,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723841748
    }
]