[
    {
        "content": "<p>I have started playing around with approaches to verifying the correctness of ISLE rewrite rules using an SMT solver, and wanted to post some initial notes here for anyone interested. Some written notes live <a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri-notes/cranelift/docs/isle-verification-notes.md\">here</a>. A manually-constructed SMTLIB file for a single rule that rewrites an <code>iadd</code> to a subtract with immediate is <a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri-notes/cranelift/codegen/src/isa/aarch64/veri/manual_imm12_add_sub.smtlib\">here</a>. This file currently hard-codes that the type is b64 and doesn't do anything interesting yet for register reads/writes.</p>\n<p>Some initial open questions:</p>\n<ul>\n<li>For quantifying over bitvector types, will it be easier/faster to discharge separate queries for each possible type, or encode the possible types into a single SMT query?</li>\n<li>Left hand side extractors are specified in the opposite direction from their Rust implementation. For example, conceptually, <code>imm12_from_negated_value</code>  feels like it should take a 64-bit value, negative it, check if it fits in 12 bits, then return the 12-bit value (and this is, after some indirection, what the external Rust implementation does). Instead, the ISLE definition is this: <code>(decl imm12_from_negated_value (Imm12) Value)</code>. A question for verification is whether to specify the contract of these extractors in the direction of the ISLE function signature or the Rust function signature. This also has implications for which variables we quantify over: in this example, all 12-bit values that could be returned, or all 64-bit values that would possibly \"fit\". If we currently consider implementations of extractors in the trusted compute base, the types of bugs these two approaches can find are probably the same.</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri-notes/cranelift/docs/isle-verification-notes.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bdb8a10f482252b7285c86842429e46ed25e481e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643633363164353162363731336337646362643834336236373733626164376532366232643836393331393564363036363866336337653364303335663565622f6176616e686174742f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri-notes/cranelift/docs/isle-verification-notes.md\" title=\"wasmtime/isle-verification-notes.md at isle-veri-notes · avanhatt/wasmtime\">wasmtime/isle-verification-notes.md at isle-veri-notes · avanhatt/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/isle-verification-notes.md at isle-veri-notes · avanhatt/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri-notes/cranelift/codegen/src/isa/aarch64/veri/manual_imm12_add_sub.smtlib\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bdb8a10f482252b7285c86842429e46ed25e481e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643633363164353162363731336337646362643834336236373733626164376532366232643836393331393564363036363866336337653364303335663565622f6176616e686174742f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avanhatt/wasmtime/blob/isle-veri-notes/cranelift/codegen/src/isa/aarch64/veri/manual_imm12_add_sub.smtlib\" title=\"wasmtime/manual_imm12_add_sub.smtlib at isle-veri-notes · avanhatt/wasmtime\">wasmtime/manual_imm12_add_sub.smtlib at isle-veri-notes · avanhatt/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/manual_imm12_add_sub.smtlib at isle-veri-notes · avanhatt/wasmtime</div></div></div>",
        "id": 267455509,
        "sender_full_name": "Alexa VanHattum",
        "timestamp": 1641829603
    },
    {
        "content": "<p>Very cool!</p>\n<blockquote>\n<p>(TODO: is this a rule abort or a dynamic failure?)</p>\n</blockquote>\n<p>This is a dynamic failure, it is an <code>assert</code> that will panic if it fails.</p>\n<blockquote>\n<p>For quantifying over bitvector types, will it be easier/faster to discharge separate queries for each possible type, or encode the possible types into a single SMT query?</p>\n</blockquote>\n<p>I guess I was imagining that we would have a separate query per type, but that is only because I didn't think it would be possible to fold it all together into one query. Does SMTLIB let you say \"this is a bitvector of a dynamic bit width\" and then feed a variable defined elsewhere in the query in as a value's bit width? How would you fold multiple bit-widths into the same query?</p>\n<blockquote>\n<p>A question for verification is whether to specify the contract of these extractors in the direction of the ISLE function signature or the Rust function signature.</p>\n</blockquote>\n<p>As discussed during the cranelift meeting today, I think we would want to specify extractors in the same order as the Rust: from \"return\" type to \"parameter\" types. This is because extractors can extract multiple values (e.g. <code>has_type</code> extracts both a type and an inst from an inst).</p>\n<p>It is also worth noting that terms can have both extractors and constructors: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/fd2636c25afd3af8711ce5eb6ec002d009c59294/cranelift/codegen/src/clif.isle#L102-L104\">https://github.com/bytecodealliance/wasmtime/blob/fd2636c25afd3af8711ce5eb6ec002d009c59294/cranelift/codegen/src/clif.isle#L102-L104</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/fd2636c25afd3af8711ce5eb6ec002d009c59294/cranelift/codegen/src/clif.isle#L102-L104\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/455ae97a0f6a91a339a72444addffee9652647ca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306435333930656565326535663237663630626236353666346630313266656332323966336666326266356136303135333635316630343263353532326135652f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/fd2636c25afd3af8711ce5eb6ec002d009c59294/cranelift/codegen/src/clif.isle#L102-L104\" title=\"wasmtime/clif.isle at fd2636c25afd3af8711ce5eb6ec002d009c59294 · bytecodealliance/wasmtime\">wasmtime/clif.isle at fd2636c25afd3af8711ce5eb6ec002d009c59294 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/clif.isle at fd2636c25afd3af8711ce5eb6ec002d009c59294 · bytecodealliance/wasmtime</div></div></div>",
        "id": 267470997,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1641835630
    },
    {
        "content": "<p>The thing about multiple parameter types is a pretty strong argument… just to state the obvious once again, another argument in favor of \"the Rust direction\" for specifying extractors is that it would (maybe?) create an easier path to someday verifying that the Rust implementations are correct.</p>",
        "id": 267473508,
        "sender_full_name": "Adrian Sampson",
        "timestamp": 1641836708
    },
    {
        "content": "<p>@<strong>sampsyo</strong> just to make sure we're on the same page -- this is a notational question I think? I'm not sure how <code>(decl A (T U) V)</code> vs <code>(decl A (V) (T U))</code> affects whether it's possible to e.g. verify the Rust, but possibly I'm missing some nuance here</p>",
        "id": 267473941,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641836885
    },
    {
        "content": "<p>I meant something about the \"guts\" of the spec rather than the notation itself: taking <span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span>'s <code>imm12_from_negated_value</code> example above, one direction consists of extending (and negating) a 12-bit value, while the other consists of truncating (and negating) a 64-bit value. The idea is that the verifier could either quantify over the 64-bit value in the original CLIF instruction and rely on the \"forward\" spec to obtain the 12-bit value, or it could quantify over the 12-bit value and use the \"backward\" spec to obtain the corresponding original CLIF literal. You can imagine various efficiency &amp; \"trustworthiness\" trade-offs depending on the choice.</p>",
        "id": 267476072,
        "sender_full_name": "Adrian Sampson",
        "timestamp": 1641837612
    },
    {
        "content": "<p>Ah, yes, this makes more sense, thanks!</p>\n<p>At least the intention at the semantic level is for the meaning to be the same in both directions -- I had been thinking of things in a sort of Prolog way, where we would say <code>imm12_from_negated_value(a, b)</code> and this is just a predicate on <code>a</code> and <code>b</code>; one could imagine a translation from that to SMT formulae or whatnot. So I guess I see the ISLE terms as \"directionless\"; a Rust implementation of one direction or the other could then be verified against that (always quantify over the Rust args, get symbolic result, check against predicate). But you all will have more detailed thoughts on the implementation/lowering than me; just wanted to communicate the language-level intent above :-)</p>",
        "id": 267476869,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641837916
    },
    {
        "content": "<p>Right, that directionless/Prolog-esque idea very much came through when reading through ISLE files! It's a really neat idea (and makes for an interesting decision about how to set up the verifier).</p>",
        "id": 267477420,
        "sender_full_name": "Adrian Sampson",
        "timestamp": 1641838187
    },
    {
        "content": "<p>Making good progress on an SMT-condition generator! Here's the output (modulo cleaning up some comments/formatting) for two <code>iadd</code> rules. Currently, this is hard-coding the term semantics rather than the eventual goal of pulling them from annotations. This is also using a fairly high level model for RHS terms, which we'll want to replace soon.</p>\n<p>The overall strategy: we have a symbolic interpreter for <code>Patterns</code> for the LHS of rules that recursively lowers terms to bit vectors, while building up a set of bound SMT variables and assumptions on those variables. Starting with the outer-most instruction pattern, this creates fresh variables for each argument and maps ISLE term indices to bound names. Then a symbolic interpreter for <code>Exprs</code> lowers RHS expressions to bitvector, using the assumption context built from the LHS. </p>\n<p>Currently, we run a separate query for each bit width, so <code>has_type</code> mostly falls out without reasoning about the type itself. In the example below, we run for 32-bit. Eventually, we'll want the RHS to always reason on the appropriate 32-bit or 64-bit BV, even if the query's type is something like i8. </p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"c1\">;; ----------------------------------simple iadd-----------------------------------</span>\n\n<span class=\"c1\">;; Running verification for rule:</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span>\n    <span class=\"p\">(</span><span class=\"nv\">lower</span> <span class=\"p\">(</span><span class=\"nv\">has_type</span> <span class=\"p\">(</span><span class=\"nv\">fits_in_64</span> <span class=\"nv\">ty</span><span class=\"p\">)</span>\n                     <span class=\"p\">(</span><span class=\"nv\">iadd</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"nv\">value_reg</span> <span class=\"p\">(</span><span class=\"nv\">add</span> <span class=\"nv\">ty</span> <span class=\"p\">(</span><span class=\"nv\">put_in_reg</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">put_in_reg</span> <span class=\"nv\">y</span><span class=\"p\">))))</span>\n\n<span class=\"c1\">;; Declaring constants:</span>\n    <span class=\"nv\">ty</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n    <span class=\"nv\">arg_0</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n    <span class=\"nv\">arg_1</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n<span class=\"c1\">;; Adding assumptions:</span>\n    <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv32</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"nv\">ty</span><span class=\"p\">)</span>\n<span class=\"c1\">;; Running query:</span>\n    <span class=\"c1\">;; Query structure: we want `&lt;assumptions&gt; implies &lt;LSH&gt; = &lt;RSH&gt;`</span>\n    <span class=\"c1\">;; Negate the query, unsat implies no counterexamples exist.</span>\n    <span class=\"p\">(</span><span class=\"nb\">not</span>\n        <span class=\"c1\">;; Implication</span>\n        <span class=\"p\">(</span><span class=\"nv\">=&gt;</span>\n            <span class=\"c1\">;; Assumptions</span>\n            <span class=\"p\">(</span><span class=\"nb\">and</span>\n                <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv32</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"nv\">ty</span><span class=\"p\">))</span>\n            <span class=\"c1\">;; LHS = RHS</span>\n            <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">bvadd</span> <span class=\"nv\">arg_0</span> <span class=\"nv\">arg_1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">bvadd</span> <span class=\"nv\">arg_0</span> <span class=\"nv\">arg_1</span><span class=\"p\">))))</span>\n\n<span class=\"c1\">;; Verification succeeded</span>\n<span class=\"c1\">;; ----------------------------------iadd to sub-----------------------------------</span>\n\n<span class=\"c1\">;; Running verification for rule:</span>\n<span class=\"p\">(</span><span class=\"nv\">rule</span>\n    <span class=\"p\">(</span><span class=\"nv\">lower</span> <span class=\"p\">(</span><span class=\"nv\">has_type</span> <span class=\"p\">(</span><span class=\"nv\">fits_in_64</span> <span class=\"nv\">ty</span><span class=\"p\">)</span>\n                     <span class=\"p\">(</span><span class=\"nv\">iadd</span> <span class=\"nv\">x</span> <span class=\"p\">(</span><span class=\"nv\">imm12_from_negated_value</span> <span class=\"nv\">y</span><span class=\"p\">))))</span>\n    <span class=\"p\">(</span><span class=\"nv\">value_reg</span> <span class=\"p\">(</span><span class=\"nv\">sub_imm</span> <span class=\"nv\">ty</span> <span class=\"p\">(</span><span class=\"nv\">put_in_reg</span> <span class=\"nv\">x</span><span class=\"p\">)</span> <span class=\"nv\">y</span><span class=\"p\">)))</span>\n\n<span class=\"c1\">;; Declaring constants:</span>\n    <span class=\"nv\">ty</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n    <span class=\"nv\">arg_0</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n    <span class=\"nv\">arg_1</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span>\n    <span class=\"nv\">arg_imm12_from_negated_value</span> <span class=\"err\">:</span> <span class=\"nv\">BitVector</span><span class=\"p\">(</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"c1\">;; Adding assumptions:</span>\n    <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv32</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"nv\">ty</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">bvand</span> <span class=\"p\">(</span><span class=\"nv\">bvnot</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv4095</span> <span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"nv\">arg_1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv0</span> <span class=\"mi\">32</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"nv\">arg_1</span> <span class=\"p\">(</span><span class=\"nv\">bvneg</span> <span class=\"p\">((</span><span class=\"nv\">_</span> <span class=\"nv\">zero_extend</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"nv\">arg_imm12_from_negated_value</span><span class=\"p\">)))</span>\n<span class=\"c1\">;; Running query:</span>\n    <span class=\"c1\">;; Query structure: we want `&lt;assumptions&gt; implies &lt;LSH&gt; = &lt;RSH&gt;`</span>\n    <span class=\"c1\">;; Negate the query, unsat implies no counterexamples exist.</span>\n    <span class=\"p\">(</span><span class=\"nb\">not</span>\n        <span class=\"c1\">;; Implication</span>\n        <span class=\"p\">(</span><span class=\"nv\">=&gt;</span>\n            <span class=\"c1\">;; Assumptions</span>\n            <span class=\"p\">(</span><span class=\"nb\">and</span>\n                <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv32</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"nv\">ty</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"p\">(</span><span class=\"nv\">bvand</span> <span class=\"p\">(</span><span class=\"nv\">bvnot</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv4096</span> <span class=\"mi\">32</span><span class=\"p\">))</span> <span class=\"nv\">arg_1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nv\">_</span> <span class=\"nv\">bv0</span> <span class=\"mi\">32</span><span class=\"p\">))</span>\n                <span class=\"p\">(</span><span class=\"nb\">=</span> <span class=\"nv\">arg_1</span> <span class=\"p\">(</span><span class=\"nv\">bvneg</span> <span class=\"p\">((</span><span class=\"nv\">_</span> <span class=\"nv\">zero_extend</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"nv\">arg_imm12_from_negated_value</span><span class=\"p\">))))</span>\n            <span class=\"c1\">;; LHS = RHS</span>\n            <span class=\"p\">(</span><span class=\"nb\">=</span>\n                <span class=\"p\">(</span><span class=\"nv\">bvadd</span> <span class=\"nv\">arg_0</span> <span class=\"p\">(</span><span class=\"nv\">bvneg</span> <span class=\"p\">((</span><span class=\"nv\">_</span> <span class=\"nv\">zero_extend</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"nv\">arg_imm12_from_negated_value</span><span class=\"p\">)))</span>\n                <span class=\"p\">(</span><span class=\"nv\">bvsub</span> <span class=\"nv\">arg_0</span> <span class=\"p\">((</span><span class=\"nv\">_</span> <span class=\"nv\">zero_extend</span> <span class=\"mi\">20</span><span class=\"p\">)</span> <span class=\"nv\">arg_imm12_from_negated_value</span><span class=\"p\">)))))</span>\n<span class=\"c1\">;; Verification succeeded</span>\n</code></pre></div>",
        "id": 270741191,
        "sender_full_name": "Alexa VanHattum",
        "timestamp": 1643993320
    },
    {
        "content": "<p>I can try and wrap this up into a neater demo to share on Monday's meeting, if there's interest.</p>",
        "id": 270741243,
        "sender_full_name": "Alexa VanHattum",
        "timestamp": 1643993351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"452638\">Alexa VanHattum</span> <a href=\"#narrow/stream/217117-cranelift/topic/Initial.20ISLE.20verification.20notes/near/270741243\">said</a>:</p>\n<blockquote>\n<p>I can try and wrap this up into a neater demo to share on Monday's meeting, if there's interest.</p>\n</blockquote>\n<p>I would be interested! This looks fantastic!</p>",
        "id": 270747297,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1643996214
    },
    {
        "content": "<blockquote>\n<p>Eventually, we'll want the RHS to always reason on the appropriate 32-bit or 64-bit BV, even if the query's type is something like i8. </p>\n</blockquote>\n<p>Do you mean lowering the RHS to the width of the register classes that it is using to implement the LHS? In x64, for example, we don't differentiate between e.g. <code>rax</code> and <code>eax, even though we will at times emit instructions that just use </code>eax<code>/the lower half of </code>rax<code>. I wonder if it makes sense to represent the full bit width of e.g. </code>rax` even when we are lowering a 32-bit or smaller LHS. This could be a small step towards catching bugs like our CVE where we spilled a 32-bit value and then reloaded it with the wrong kind of extension before using it as the address for a memory access.</p>",
        "id": 270748383,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1643996711
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"452638\">@Alexa VanHattum</span> yes, we'd love to hear more about this at the next meeting! (Please feel free to create a PR to add to the meeting agenda any time; happy to do it now as well if you'd like)</p>\n<p>I'm mostly curious about the longer-term story for integration of semantics models on both ends (CLIF and the target ISA); I imagine that making this generic would also largely take care of the specific questions of types. I would hope that in the eventual design we don't have to pattern-match on <code>has_type</code> or others as a special case, but that it just falls out of the semantics that we understand about each term.</p>\n<p>Another random thought that comes to mind re bitvector widths is that maybe at the SMT-variable level, it would make sense for all bindings to be a bitvector large enough for any value (128 bits currently), but then the specific constraints emitted for terms use only the appropriate bits? This could be a way of avoiding the need to do a kind of type inference in your lowering to SMT, at the cost of a small semantic gap</p>",
        "id": 270754811,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1643999759
    },
    {
        "content": "<p>Great, submitted a PR to add to the agenda!</p>\n<p>Re: the currently-less-generic nature of how we're handling types, we anticipant that types may need to be a special case to facilitate verification scaling. We could, as you say, over-approximate everything as an i128, but doing so might cause us to hit total timeouts in more complicated cases where smaller bitwidths are tractable. But I totally agree that the current handling of <code>has_type</code> is way more of a special case than our goal. </p>\n<p>One open question with respect to the semantics models for CLIF and the target ISA is how to handle rules that write to intermediate ISLE terms not in the target ISA. While we could provide semantics for every intermediate term (for example, the <code>sub_imm</code> term is further rewritten later), it might be nice for symbolic execution to continue across multiple rules. This would let us only provide (initially hand-specified) semantics for starting CLIF terms and final ISA terms. This is part of why we are curious about the depths of the trie for combining ISLE rules.</p>",
        "id": 270766087,
        "sender_full_name": "Alexa VanHattum",
        "timestamp": 1644005176
    },
    {
        "content": "<p>That's a good point, one model could just be to statically elaborate/inline rules from input language to output. At one point I actually had wanted to build the codegen in islec this way; I decided to go instead to a model that actually generates a separate Rust function per intermediate term to keep the code-size expansion down, but I didn't get to a point where I'd be able to actually measure that expansion</p>",
        "id": 270771079,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1644008004
    },
    {
        "content": "<p>one potential complexity is that the language semantics allow, at least in theory, for statically-unbounded recursion (cycles can occur in the callgraph). In practice though we don't use that ability (though I think Ulrich may have in some prototype call-ABI stuff)</p>",
        "id": 270771179,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1644008053
    },
    {
        "content": "<p>In any case, static elaboration and bailing on cycles feels like a good first-pass answer here, and we can solve any scalability problems (maybe by refactoring code, maybe by doing a conditionally-context-sensitive thing or using intermediate invariants) as they come up</p>",
        "id": 270771281,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1644008122
    },
    {
        "content": "<p><a href=\"https://unsat.cs.washington.edu/projects/serval/\">https://unsat.cs.washington.edu/projects/serval/</a> seems relevant. No idea how it compares with the approach currently taken, but it seems to have been used for finding bugs in the linux ebpf jit: <a href=\"https://github.com/uw-unsat/jitterbug\">https://github.com/uw-unsat/jitterbug</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/uw-unsat/jitterbug\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/951ca720f404843852d26a7c31a1a140cb2b6c19\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393335353830356334626433333131636434356662386664343034653262306635346431326530333034623132326237386232663535653764376533313662332f75772d756e7361742f6a6974746572627567)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/uw-unsat/jitterbug\" title=\"GitHub - uw-unsat/jitterbug: Verification of BPF JIT compilers\">GitHub - uw-unsat/jitterbug: Verification of BPF JIT compilers</a></div><div class=\"message_embed_description\">Verification of BPF JIT compilers. Contribute to uw-unsat/jitterbug development by creating an account on GitHub.</div></div></div>",
        "id": 281609231,
        "sender_full_name": "bjorn3",
        "timestamp": 1652030409
    }
]