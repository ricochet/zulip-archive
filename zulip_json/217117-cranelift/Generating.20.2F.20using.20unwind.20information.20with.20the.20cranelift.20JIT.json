[
    {
        "content": "<p>Hi there - I'm currently a little stuck working out how to generate / work with unwind information and the cranelift JIT. From <a href=\"https://fitzgeraldnick.com/2020/08/27/reference-types-in-wasmtime.html\">this</a> blog post by Nick Fitzgerald it seems like doing so is possible,  when I call <a href=\"https://github.com/ZekeMedley/lust/blob/zeke/unwind/lustc/src/gc.rs#L6\">this</a> function from Cranelift code though I don't see Cranelift frames in the backtrace. Is there documentation somewhere about how this is supposed to work or an example of getting unwind information working?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/ZekeMedley/lust/blob/zeke/unwind/lustc/src/gc.rs#L6\" style=\"background-image: url(https://opengraph.githubassets.com/09031b4ca9f7891c079244ada23189fb918680055c8f44ecb4333b6990968f63/ZekeMedley/lust)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/ZekeMedley/lust/blob/zeke/unwind/lustc/src/gc.rs#L6\" title=\"ZekeMedley/lust\">ZekeMedley/lust</a></div><div class=\"message_embed_description\">A lisp compiler and interpreter I've been working on - ZekeMedley/lust</div></div></div>",
        "id": 240864958,
        "sender_full_name": "Zeke Medley",
        "timestamp": 1622489423
    },
    {
        "content": "<p>You need to create and register an unwind table with the stack unwinder.</p>",
        "id": 240870239,
        "sender_full_name": "bjorn3",
        "timestamp": 1622494358
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/40dd3e2b7089b5e96714e064b731f6dbf17c61a9/src/debuginfo/unwind.rs\">https://github.com/bjorn3/rustc_codegen_cranelift/blob/40dd3e2b7089b5e96714e064b731f6dbf17c61a9/src/debuginfo/unwind.rs</a> is a bare bone example. It also handles aot compilation, but never unregisters the unwind table.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/40dd3e2b7089b5e96714e064b731f6dbf17c61a9/src/debuginfo/unwind.rs\" style=\"background-image: url(https://opengraph.githubassets.com/3172e985c020d56d4899f3ec0de28a8886cb0fa326de01f22b511d7b2f245cda/bjorn3/rustc_codegen_cranelift)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/rustc_codegen_cranelift/blob/40dd3e2b7089b5e96714e064b731f6dbf17c61a9/src/debuginfo/unwind.rs\" title=\"bjorn3/rustc_codegen_cranelift\">bjorn3/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to bjorn3/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 240870397,
        "sender_full_name": "bjorn3",
        "timestamp": 1622494495
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/40d546c420c1e6c4909fc80e048dd1854fda1cd6/crates/jit/src/unwind/systemv.rs\">https://github.com/bytecodealliance/wasmtime/blob/40d546c420c1e6c4909fc80e048dd1854fda1cd6/crates/jit/src/unwind/systemv.rs</a> is the wasmtime implementation which does support unregistering.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/40d546c420c1e6c4909fc80e048dd1854fda1cd6/crates/jit/src/unwind/systemv.rs\" style=\"background-image: url(https://opengraph.githubassets.com/6dceb9a85f9018a403ab34f6e8f5c0fabb50ff6b39fe479229fb5523ec2d3b04/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/40d546c420c1e6c4909fc80e048dd1854fda1cd6/crates/jit/src/unwind/systemv.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 240870433,
        "sender_full_name": "bjorn3",
        "timestamp": 1622494561
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372562\">@Zeke Medley</span></p>",
        "id": 240870472,
        "sender_full_name": "bjorn3",
        "timestamp": 1622494569
    },
    {
        "content": "<p>Thanks a bunch for the info <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> . After moving your example code over from <code>rustc_codegen_cranelift</code> into my JIT and calling <code>add_function</code>/<code>register_jit</code> after function definition and <code>jit.finalize_definitions</code> respectively I'm still not seeing Cranelift stack frames in my backtrace. Is there anything specific about how I call <code>Backtrace::new</code> or configure the JIT that I should to be doing here?</p>",
        "id": 242466126,
        "sender_full_name": "Zeke Medley",
        "timestamp": 1623524613
    },
    {
        "content": "<p>More generally here my goal is to be able to walk the call stack at runtime to find live roots for garbage collection. If there is a better way to do that I'd also be open to a different approach.</p>",
        "id": 242466191,
        "sender_full_name": "Zeke Medley",
        "timestamp": 1623524677
    },
    {
        "content": "<p>After __register_frame stack unwinding will work.</p>",
        "id": 242467173,
        "sender_full_name": "bjorn3",
        "timestamp": 1623525836
    },
    {
        "content": "<p>You will separately need to store the stackmap to use during root tracing.</p>",
        "id": 242467216,
        "sender_full_name": "bjorn3",
        "timestamp": 1623525866
    },
    {
        "content": "<p>Interesting - I must be doing something wrong then :) do you know if there is somewhere I can find documentation on how <code>__register_frame</code> works? Googling around didn't yield much</p>",
        "id": 242473129,
        "sender_full_name": "Zeke Medley",
        "timestamp": 1623532736
    },
    {
        "content": "<p>Phew - my issue was that I wasn't registering builtin function. Working as expected now. Thanks so much for the help <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> !</p>",
        "id": 242478095,
        "sender_full_name": "Zeke Medley",
        "timestamp": 1623540355
    },
    {
        "content": "<p>glad it works now</p>",
        "id": 242492475,
        "sender_full_name": "bjorn3",
        "timestamp": 1623563875
    }
]