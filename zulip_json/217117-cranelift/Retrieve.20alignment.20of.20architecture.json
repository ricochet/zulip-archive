[
    {
        "content": "<p>Hi! My colleagues are telling me that I should align my fields in the structs of my language and I should probably listen to them. I can do the alignment myself, but I'd need to know what the alignment should be on a given architecture. Does cranelift expose this information anywhere?</p>",
        "id": 438377637,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1715610766
    },
    {
        "content": "<p>Alignments for various types are not just architecture specific, but also OS specific. Cranelift doesn't have any knowledge about this. <code>TargetFrontendConfig</code> only contains the default calling convention and the pointer size. <code>target_lexicon::CDataModel</code> only contains the sizes for various primitive C types on the given target, not the alignments.</p>",
        "id": 438380804,
        "sender_full_name": "bjorn3",
        "timestamp": 1715611521
    },
    {
        "content": "<p>In rustc_codegen_cranelift I'm getting all this information from rustc itself which parses the LLVM data layout specifications stored in the target spec, but the relevant crate (rustc_target) doesn't compile on stable, so it probably won't be too useful for you.</p>",
        "id": 438381499,
        "sender_full_name": "bjorn3",
        "timestamp": 1715611699
    },
    {
        "content": "<p>rustc also handles a fair part of the calling convention for me. (cranelift doesn't have a way to represent struct arguments, instead expecting that the lowering to primitive types is done by the producer of clif ir)</p>",
        "id": 438381862,
        "sender_full_name": "bjorn3",
        "timestamp": 1715611793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"714260\">@Terts Diepraam</span> a pretty good heuristic to start with in a new design IMHO is \"natural alignment\": align each type to its own size (so u32s are 4-aligned, u64s are 8-aligned, etc). Most platforms/OSes are pretty close to that too, with weirdness occurring primarily around larger types (u128s, SIMD vectors) or unexpectedly smaller than usual alignments</p>",
        "id": 438385996,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715612811
    },
    {
        "content": "<p>Ah I see, that's unfortunate. Is there any interest in porting some of that information from that rust crate over to cranelift? I could maybe work on that with a bit of help, since I might need this anyway.</p>\n<p>Also, I'm curious, what part of alignment is up to the OS?</p>\n<p>Natural alignment is a good start. I'll start out with that! Thanks!</p>",
        "id": 438386410,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1715612929
    },
    {
        "content": "<p>it can be up to the OS in the same sense that calling convention can be -- just a standard set for all programs/libraries to interop (e.g. under Windows the standard calling convention is fastcall and so DLLs and EXEs agree on that interface, whereas SysV is used on Linux). A \"tool historian\" could probably say more about why but my sense is it's a combination of some backward compat (platforms that evolved from smaller word sizes, etc) and arbitrary choices :-)</p>",
        "id": 438387041,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715613121
    },
    {
        "content": "<p>That does raise the point that it's completely up to you on the internal part of your system but one has to be a little careful if you have direct calling (FFI) to functions in e.g. libc or your runtime -- to match the layout expected by the system compiler</p>",
        "id": 438387268,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715613191
    },
    {
        "content": "<p>Right, I guess then mostly what I'm asking about is the FFI-less part, where it's mostly about performance of memory accesses. Nonetheless, good to know that this is something to keep in mind if I start doing FFI.</p>",
        "id": 438387746,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1715613322
    },
    {
        "content": "<p>The natural alignment worked great! At least, my code now runs with the <code>aligned</code> memflags set, so seems to be alright. I could still work on porting rustc_target (in some form) to cranelift if there's demand for that. Just let me know. I could open an issue if we need to discuss this further (where that could live, which parts are relevant etc.).</p>",
        "id": 438562221,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1715688696
    },
    {
        "content": "<p>I've got another question :) I just realized that I hadn't thought about the alignment of the stack slot itself. Looking at the docs[1], I would assume that I would be able to pass the desired alignment to cranelift, but I don't see that option anywhere. But it also says:</p>\n<blockquote>\n<p>For example, the alignment of these stack memory accesses can be inferred from the offsets and stack slot alignments.</p>\n</blockquote>\n<p>Does that mean that it will be aligned automatically?</p>\n<p>1: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#explicit-stack-slots\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#explicit-stack-slots</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#explicit-stack-slots\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1477b1fa693460f3a7a117a323bab7e0a15e468d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653434383331613339643637303966343432383532323366363032303366616638623361353030353461346532393036646438356636326332323065613765372f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md#explicit-stack-slots\" title=\"wasmtime/cranelift/docs/ir.md at main 路 bytecodealliance/wasmtime\">wasmtime/cranelift/docs/ir.md at main 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 439012707,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1715863796
    },
    {
        "content": "<p>Stack slots should be aligned according to natural alignment, I believe</p>",
        "id": 439034583,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870041
    },
    {
        "content": "<p>(And if not in some case, that'd be a Cranelift bug)</p>",
        "id": 439034724,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870070
    },
    {
        "content": "<p>Ah, interesting, they're actually only machine word-aligned: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/91ec9a589cc6c7f031ef4cacdb295331c07b6063/cranelift/codegen/src/machinst/abi.rs#L1181-L1183\">https://github.com/bytecodealliance/wasmtime/blob/91ec9a589cc6c7f031ef4cacdb295331c07b6063/cranelift/codegen/src/machinst/abi.rs#L1181-L1183</a> (so 8 bytes on all our 64-bit targets)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/91ec9a589cc6c7f031ef4cacdb295331c07b6063/cranelift/codegen/src/machinst/abi.rs#L1181-L1183\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bd3ac59888e66674b97ef66f6e9e4935968b8173/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643266363430623033616235396530386438346637353532656665633034383537373164323035313662643335353533666534623836303162613764323433392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/91ec9a589cc6c7f031ef4cacdb295331c07b6063/cranelift/codegen/src/machinst/abi.rs#L1181-L1183\" title=\"wasmtime/cranelift/codegen/src/machinst/abi.rs at 91ec9a589cc6c7f031ef4cacdb295331c07b6063 路 bytecodealliance/wasmtime\">wasmtime/cranelift/codegen/src/machinst/abi.rs at 91ec9a589cc6c7f031ef4cacdb295331c07b6063 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 439035026,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> does this cause problems for cg_clif with 128-bit values?</p>",
        "id": 439035122,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870187
    },
    {
        "content": "<p>we could easily fix this if so</p>",
        "id": 439035161,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870203
    },
    {
        "content": "<p>(or, probably should regardless)</p>",
        "id": 439035216,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870220
    },
    {
        "content": "<p>We've had an issue open for a while to add the capability of supporting stack slot alignment <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">https://github.com/bytecodealliance/wasmtime/issues/6716</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3bbb5d9ba2553ac948aedc8faabf7bda8646fe09/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383731356236333862346634633331303336356138353730366538376538383139373734643538303965346135396564313730366264353733336238303439392f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36373136&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\" title=\"Support specifying stack slot alignments 路 Issue #6716 路 bytecodealliance/wasmtime\">Support specifying stack slot alignments 路 Issue #6716 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature See title. Benefit Correct alignment are necessary to avoid crashes on some architectures and code may depend on correct alignment. In addition rustc checks that the right alignment is used...</div></div></div>",
        "id": 439035414,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1715870276
    },
    {
        "content": "<p>cg_clif gets around this by overallocating stack slots to align the values internally<br>\n<a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/64c73d0b3c4b91fee0e9a840be30e1d6faac7957/src/abi/pass_mode.rs#L187-L195\">https://github.com/rust-lang/rustc_codegen_cranelift/blob/64c73d0b3c4b91fee0e9a840be30e1d6faac7957/src/abi/pass_mode.rs#L187-L195</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/64c73d0b3c4b91fee0e9a840be30e1d6faac7957/src/abi/pass_mode.rs#L187-L195\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/20c8cfbfddc5145933d28f26d7002d9af80b7e55/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323762346435653065643136343231336437383538383734393933653334346339343333353037343833323633633630326538383862613165623434383962322f727573742d6c616e672f72757374635f636f646567656e5f6372616e656c696674&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rustc_codegen_cranelift/blob/64c73d0b3c4b91fee0e9a840be30e1d6faac7957/src/abi/pass_mode.rs#L187-L195\" title=\"rustc_codegen_cranelift/src/abi/pass_mode.rs at 64c73d0b3c4b91fee0e9a840be30e1d6faac7957 路 rust-lang/rustc_codegen_cranelift\">rustc_codegen_cranelift/src/abi/pass_mode.rs at 64c73d0b3c4b91fee0e9a840be30e1d6faac7957 路 rust-lang/rustc_codegen_cranelift</a></div><div class=\"message_embed_description\">Cranelift based backend for rustc. Contribute to rust-lang/rustc_codegen_cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 439035866,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1715870399
    },
    {
        "content": "<p>ah, there we go! so the full idea there is to take alignment as a parameter, but I see no reason not to do natural alignment as a baseline</p>",
        "id": 439035986,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870417
    },
    {
        "content": "<p>which would solve the issue as well I think?</p>",
        "id": 439036024,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870425
    },
    {
        "content": "<p>I think it would solve this particular instance, yes! But there are some other issues open that require for example 32byte alignment. But At least the 16byte would help here I think</p>",
        "id": 439036254,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1715870479
    },
    {
        "content": "<p>(I haven't looked at this in a while, so <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> would probably be better qualified to answer)</p>",
        "id": 439036332,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1715870501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/Retrieve.20alignment.20of.20architecture/near/439035122\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> does this cause problems for cg_clif with 128-bit values?</p>\n</blockquote>\n<p>Yes! I am over allocating and manually aligning to work around this.</p>",
        "id": 439036484,
        "sender_full_name": "bjorn3",
        "timestamp": 1715870529
    },
    {
        "content": "<p>I guess natural alignment would work, but also might not be very precise. If I use a stack slot to create a record with a couple of <code>i8</code> for example, the only alignment that I need is 1 byte right? (Still new to this, please correct me if I'm wrong <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> )</p>",
        "id": 439037201,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1715870714
    },
    {
        "content": "<p>Right, actually I'm just paging this bit of CLIF back in now and seeing the size is arbitrary, not one CLIF type (obviously in hindsight, for aggregates etc)</p>",
        "id": 439037468,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870780
    },
    {
        "content": "<p>so really it does call for an alignment parameter</p>",
        "id": 439037510,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715870789
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8635\">https://github.com/bytecodealliance/wasmtime/pull/8635</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8635\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/daef6e6d5d81cfcc3bd7d767d8ff896e9d6cebc1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326462653939303033386230373436316333643462633866386633653265636533666135663631376162623332353430353466636437356438626634646164322f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38363335&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8635\" title=\"Cranelift: add alignment parameter to stack slots. by cfallin 路 Pull Request #8635 路 bytecodealliance/wasmtime\">Cranelift: add alignment parameter to stack slots. by cfallin 路 Pull Request #8635 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Fixes #6716.\nCurrently, stack slots on the stack are aligned only to a machine-word boundary. This is insufficient for some use-cases: for example, storing SIMD data or structs that require a large...</div></div></div>",
        "id": 439046081,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715872995
    },
    {
        "content": "<p>Hi! It's me again :)</p>\n<p>I've finally hit a case where I need to align stack slots for 128 bit values. Is it correct that this is not (easily) possible yet because of <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\">https://github.com/bytecodealliance/wasmtime/issues/6716</a>? If so, I could try to pick that up.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/aee04f3006a338ecfe968eea86a891d9c16865f2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393835623238333136306133623830366533376461336535623463623263363930653666366633303236376336306339656665323531353039333432343932352f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36373136&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6716\" title=\"Support specifying stack slot alignments 路 Issue #6716 路 bytecodealliance/wasmtime\">Support specifying stack slot alignments 路 Issue #6716 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature See title. Benefit Correct alignment are necessary to avoid crashes on some architectures and code may depend on correct alignment. In addition rustc checks that the right alignment is used...</div></div></div>",
        "id": 470507522,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1726475866
    },
    {
        "content": "<p>I believe it should be correct up to 16-byte (128-bit) alignment; it's limited by the stackframe alignment, as we align the offset from start of stackframe per the user's request but stackframe may not be (e.g.) 64-byte-aligned if that's what the user requests. But both x86-64 and aarch64 16-align stackframes</p>",
        "id": 470636764,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726498470
    },
    {
        "content": "<p>It seems like 16 bit alignment is not working. I have the following CLIF code as a reproduction:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">ss0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">8</span>\n<span class=\"w\">    </span><span class=\"n\">ss1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">explicit_slot</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"o\">=</span><span class=\"mi\">16</span>\n\n<span class=\"n\">block0</span><span class=\"p\">():</span>\n<span class=\"w\">    </span><span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">stack_addr</span><span class=\"p\">.</span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"n\">ss1</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v1</span>\n<span class=\"p\">}</span>\n<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">foo</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>(I don't want to check whether it's zero, just an error message so I can inspect the pointer)</p>\n<p>When I run that with <code>clif-util</code>, I see (for example) that the pointer is 140735794843864, which is 0x7ffc38674aa8 in hex. That's not aligned to 16 bytes right? I might very well be using this wrong, so please correct me if I'm wrong. This is on <code>main</code> by the way, I just pulled with git.</p>\n<p>In my actual application, I give pointers to stack slots to some Rust code, which panics with a message about unaligned data, which is why I'm interested in this in the first place.</p>",
        "id": 471006324,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1726584854
    },
    {
        "content": "<p>hmm, indeed, that address isn't properly aligned... I don't have spare cycles to look at this at the moment but perhaps someone else does, or if you're interested in diving into the ABI code yourself...</p>",
        "id": 471012142,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726586171
    },
    {
        "content": "<p>I dove into it <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> I think this should fix it: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9279\">https://github.com/bytecodealliance/wasmtime/pull/9279</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9279\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e393756f99573a0f067b30fbdba6a63af179e7c0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313765353631303536323266613131343733636230393638393162653630663162363032343763353463613037623666356632383361373139643063383662392f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39323739&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9279\" title=\"Align the start of stackslots instead of the end by tertsdiepraam 路 Pull Request #9279 路 bytecodealliance/wasmtime\">Align the start of stackslots instead of the end by tertsdiepraam 路 Pull Request #9279 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hi! I think that the stackslots weren&#39;t properly aligned, because the padding for the alignment is being added to the end of the slot instead of at the start, meaning that the slot itself isn&amp;#...</div></div></div>",
        "id": 471461166,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1726743929
    },
    {
        "content": "<p>I'm working on a separate fix for larger alignments. Where I truncate <code>rsp</code> to the largest requested alignment. I think that should work for x86_64 since <code>rbp</code> is used to restore the frame there, but on aarch64 (and maybe others) that doesn't seem to be the case, so I'll need some help there. I'll post a draft PR for that in a bit.</p>",
        "id": 471467050,
        "sender_full_name": "Terts Diepraam",
        "timestamp": 1726746260
    },
    {
        "content": "<p>I'll take a look, thanks a ton for diving in to this!</p>\n<p>re: SP alignment on non-x86, I believe we do the \"leaf function\" optimization where if no other calls happen and no stack storage / spill slots need to be allocated, we don't save SP in FP; but I think/suspect that if we have stackslots, that should already be disabled, unless we've further optimized this since I last looked :-)</p>",
        "id": 471514139,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1726760442
    }
]