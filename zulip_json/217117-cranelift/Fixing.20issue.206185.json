[
    {
        "content": "<p>I'm trying to solve <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\">https://github.com/bytecodealliance/wasmtime/issues/6185</a><br>\nI can only reproduce the bug if umax is written as <code>-1</code>. If it is written in hexadecimal (<code>0xFFFF_FFFF</code>), the bug does not reproduce:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>test optimize precise-output\nset opt_level=speed\ntarget x86_64\n\nfunction %icmp_ule_umax(i32) -&gt; i8 {\nblock0(v0: i32):\n    v1 = iconst.i32 0xFFFF_FFFF\n    v2 = icmp ule v0, v1\n    return v2\n}\n\n; function %icmp_ule_umax(i32) -&gt; i8 fast {\n; block0(v0: i32):\n;     v3 = iconst.i8 1\n;     return v3  ; v3 = 1\n; }\n\nfunction %icmp_ule_minus_1(i32) -&gt; i8 {\nblock0(v0: i32):\n    v1 = iconst.i32 -1\n    v2 = icmp ule v0, v1\n    return v2\n}\n\n; function %icmp_ule_minus_1(i32) -&gt; i8 fast {\n; block0(v0: i32):\n;     v1 = iconst.i32 -1\n;     v2 = icmp ule v0, v1  ; v1 = -1\n;     return v2\n; }\n\nfunction %icmp_eq_umax_minus_1(i32) -&gt; i8 {\nblock0(v0: i32):\n    v1 = iconst.i32 -1\n    v2 = iconst.i32 0xFFFF_FFFF\n    v3 = icmp eq v1, v2\n    return v3\n}\n\n; function %icmp_eq_umax_minus_1(i32) -&gt; i8 fast {\n; block0(v0: i32):\n;     v4 = iconst.i8 1\n;     return v4  ; v4 = 1\n; }\n\nfunction %foo(i32) -&gt; i32, i32 {\nblock0(v0: i32):\n    v1 = iconst.i32 -1\n    v2 = iconst.i32 0xFFFF_FFFF\n    return v1, v2\n}\n\n; function %foo(i32) -&gt; i32, i32 fast {\n; block0(v0: i32):\n;     v1 = iconst.i32 -1\n;     v2 = iconst.i32 0xffff_ffff\n;     return v1, v2  ; v1 = -1, v2 = 0xffff_ffff\n; }\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5da4c9c2ab8c30a2bf70c3cc6bd6c96fbf5640a9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326565653233653938363834376163373731633438643365613062333933386461366663313736346530346631663962303865376437626637323931353237632f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36313835)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6185\" title=\"Regression in `i32.le_u` against -1 · Issue #6185 · bytecodealliance/wasmtime\">Regression in `i32.le_u` against -1 · Issue #6185 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Fuzzing has found that this module: (module (func $f (param i32) (result i32) (local i64) local.get 0 i32.const -1 i32.le_u ) (func $s (call $f (i32.const 0)) if return end unreachable ) (start $s)...</div></div></div>",
        "id": 348565645,
        "sender_full_name": "kmeakin",
        "timestamp": 1681248903
    },
    {
        "content": "<p>Are integer constants sign extended during parsing or something?</p>",
        "id": 348565787,
        "sender_full_name": "kmeakin",
        "timestamp": 1681248968
    },
    {
        "content": "<p>Yeah, that's due to a different issue that we need to clean up <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 348565851,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681249011
    },
    {
        "content": "<p>Specifically, <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\">https://github.com/bytecodealliance/wasmtime/issues/5700</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\">https://github.com/bytecodealliance/wasmtime/issues/3059</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fe5f1bb75ac80ea1b8b7d3fc7d8e5764e3cd4774\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306461336631343931313837616465353931376562666439323465373836383536303966383261353939313736383036353166393063393534633433356430302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35373030)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700\" title=\"Cranelift/ISLE: precise semantics for narrow `iconst`s · Issue #5700 · bytecodealliance/wasmtime\">Cranelift/ISLE: precise semantics for narrow `iconst`s · Issue #5700 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature In verification conversations, it’s come up that we don’t have a precise semantics for the underlying u64 when a CLIF iconst has a narrow type (e.g., i8). Should the narrow constant be sign...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/eed80d38705dcfc11d11ef90de5389907b0c4f94\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383237616561353335646535626338386237663539666630396539303666346436383036303564316465323066346564336632353236623864353661363435652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33303539)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3059\" title=\"Validate const value ranges in CLIF Validator · Issue #3059 · bytecodealliance/wasmtime\">Validate const value ranges in CLIF Validator · Issue #3059 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature As discussed in #3056 (comment) we allow const instructions with values that are way too large for their type (i.e. 0xff00 for an i8). We should reject these modules in the CLIF validator. ...</div></div></div>",
        "id": 348566033,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681249094
    },
    {
        "content": "<p>What I find extra confusing is that both constants are considered equal by GVN/cprop (<code>icmp_eq_umax_minus_1</code>) but not by the ISLE pattern matcher (<code>icmp_ule_minus_1</code>)</p>",
        "id": 348566102,
        "sender_full_name": "kmeakin",
        "timestamp": 1681249137
    },
    {
        "content": "<p>I haven't looked closely at those cases. What leads you to think that GVN behaves differently than ISLE on the same constants?</p>",
        "id": 348566337,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681249256
    },
    {
        "content": "<p>This function:</p>\n<div class=\"codehilite\" data-code-language=\"clif\"><pre><span></span><code>function %icmp_eq_umax_minus_1(i32) -&gt; i8 {\nblock0(v0: i32):\n    v1 = iconst.i32 -1\n    v2 = iconst.i32 0xFFFF_FFFF\n    v3 = icmp eq v1, v2\n    return v3\n}\n</code></pre></div>\n<p>is optimized to <code>return 1</code>. Either by GVN recognising that v1 and v2 are the same, and then a rewrite rule for <code>icmp eq x x =&gt; 1</code>. Or by cprop</p>",
        "id": 348566545,
        "sender_full_name": "kmeakin",
        "timestamp": 1681249348
    },
    {
        "content": "<p>Ah, got it. I think that's due to cprop, where I believe the rules specifically zero-extend all constants.</p>",
        "id": 348566642,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681249392
    },
    {
        "content": "<p>So the problem is that <code>-1</code> and <code>0xFFFF_FFFF</code> are represented differently in <code>Imm64</code>?</p>",
        "id": 348567038,
        "sender_full_name": "kmeakin",
        "timestamp": 1681249600
    },
    {
        "content": "<p>Yeah. They shouldn't be, but they are.</p>",
        "id": 348567065,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681249618
    },
    {
        "content": "<p>The parser reads both numbers as an <code>i64</code> (more or less) and stuffs the result into <code>Imm64</code>, without any consideration for the type it's supposed to be constructing.</p>",
        "id": 348567271,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681249711
    },
    {
        "content": "<p>There are several fixes we want to make around this issue:</p>\n<ul>\n<li>Make the CLIF parser zero-extend <code>Imm64</code> according to the type of the <code>iconst</code> instruction.</li>\n<li>Make the CLIF verifier check that the upper bits are zero, in case an ISLE rule or a frontend other than the CLIF parser gets this wrong.</li>\n<li>Make ISLE rules get constant values through a helper that either zero-extends or sign-extends the value according to the <code>iconst</code> instruction's type. The calling rule needs to specify whether it's expecting a signed or unsigned number since we don't distinguish between those in the CLIF type system.</li>\n</ul>",
        "id": 348568005,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681250066
    },
    {
        "content": "<p>Nobody has started working on any of those fixes though; there are always plenty of other things to work on…</p>",
        "id": 348568159,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681250152
    },
    {
        "content": "<p>zero-extending in the parser seems like the simplest solution</p>",
        "id": 348568763,
        "sender_full_name": "kmeakin",
        "timestamp": 1681250415
    },
    {
        "content": "<p>It's good, yeah, but not a complete fix. Still, I'd definitely take that in a PR even without the other fixes.</p>",
        "id": 348568952,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681250492
    },
    {
        "content": "<p>I'll see what I can do</p>",
        "id": 348569173,
        "sender_full_name": "kmeakin",
        "timestamp": 1681250597
    },
    {
        "content": "<p>hmm...Maybe remove <code>Imm64</code> and replace all uses with <code>UImm64</code> and explicit sign-extensions where necessary?</p>",
        "id": 348569973,
        "sender_full_name": "kmeakin",
        "timestamp": 1681250995
    },
    {
        "content": "<p>That's definitely worth considering. I think fitzgen's suggestion at <a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700#issuecomment-1421260557\">https://github.com/bytecodealliance/wasmtime/issues/5700#issuecomment-1421260557</a> is a more comprehensive version of that approach.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/5700#issuecomment-1421260557\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fe5f1bb75ac80ea1b8b7d3fc7d8e5764e3cd4774\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306461336631343931313837616465353931376562666439323465373836383536303966383261353939313736383036353166393063393534633433356430302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f35373030)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/5700#issuecomment-1421260557\" title=\"Cranelift/ISLE: precise semantics for narrow `iconst`s · Issue #5700 · bytecodealliance/wasmtime\">Cranelift/ISLE: precise semantics for narrow `iconst`s · Issue #5700 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature In verification conversations, it’s come up that we don’t have a precise semantics for the underlying u64 when a CLIF iconst has a narrow type (e.g., i8). Should the narrow constant be sign...</div></div></div>",
        "id": 348573687,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681252704
    }
]