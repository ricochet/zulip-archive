[
    {
        "content": "<p>I have some code like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"></span>\n<span class=\"n\">v8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bnot</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This compiles to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"n\">sete</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"></span>\n<span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"></span>\n<span class=\"n\">jnz</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This seems incorrect: if the code snippet starts with <code>rax=0</code>, <code>rdx=0</code>, then it proceeds as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ZF</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">sete</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"o\">=</span><span class=\"mh\">0xfffffffe</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">zf</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">jnz</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">taken</span><span class=\"o\">!</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'd imagine it should generate an <code>and</code> after the <code>not</code>, would would execute as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cmp</span><span class=\"w\"> </span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">ZF</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">sete</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"o\">=</span><span class=\"mh\">0xfffffffe</span><span class=\"w\"></span>\n<span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">eax</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">rax</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">al</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">zf</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"n\">jnz</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">taken</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221260197,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1609376487
    },
    {
        "content": "<p>Or sete eax.</p>",
        "id": 221273017,
        "sender_full_name": "bjorn3",
        "timestamp": 1609396300
    },
    {
        "content": "<p>Fixing this in the instruction selectors is the wrong place.  Better would be for CLIF level rewriting to turn it into</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">v7</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">icmp</span><span class=\"w\"> </span><span class=\"n\">eq</span><span class=\"w\"> </span><span class=\"n\">v5</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v6</span><span class=\"w\"></span>\n<span class=\"n\">v13</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">select</span><span class=\"w\"> </span><span class=\"n\">v7</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v11</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v9</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 221276891,
        "sender_full_name": "Julian Seward",
        "timestamp": 1609403187
    },
    {
        "content": "<p>No, fixing this in the instruction selectors is not the wrong place. This is causing valid clif ir to be miscompiled.</p>",
        "id": 221277984,
        "sender_full_name": "bjorn3",
        "timestamp": 1609404972
    },
    {
        "content": "<p>Clif ir shouldn't need a transformation first to be correctly lowered to vcode. It is fine to do the rewriting you suggested as optimization, but not as mandatory pass.</p>",
        "id": 221278010,
        "sender_full_name": "bjorn3",
        "timestamp": 1609405064
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"372634\">@Nathan Ringo</span> and all -- yes, this is a miscompilation; thanks for reporting it! Agree with @bjorn3 that we need to handle this input properly. A <code>b1</code> has all bits above bit 0 undefined, though, so I think the proper fix is in the <code>select</code> lowering, not the <code>icmp</code> or <code>bnot</code>; e.g. the <code>select</code> could be <code>test al, 1</code> / <code>jnz ... </code></p>",
        "id": 221278751,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1609406147
    },
    {
        "content": "<p>I can get to this first thing next week</p>",
        "id": 221278755,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1609406156
    },
    {
        "content": "<p>And, as an additional note, apologies -- the new-backend code paths outside of <code>i32</code>/<code>i64</code>/<code>f32</code>/<code>f64</code> types are less well-tested, as we've been finding with the cg_clif bringup as well, since we started with the Wasm frontend and mostly have tested with that so far. Hoping to do a full audit of this sort of thing (undefined bits / proper width handling) at some point soon so we're fully robust across all valid CLIF!</p>",
        "id": 221278821,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1609406262
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> oh, sorry.  My bad.  I should have had more coffee before typing ..</p>",
        "id": 221283397,
        "sender_full_name": "Julian Seward",
        "timestamp": 1609412660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> Okay, thanks!</p>",
        "id": 221309072,
        "sender_full_name": "Nathan Ringo",
        "timestamp": 1609440652
    },
    {
        "content": "<p>PR to fix this: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2546\">https://github.com/bytecodealliance/wasmtime/pull/2546</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2546\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2546\" title=\"x64: handle tests of b1 values correctly (only LSB is defined). by cfallin · Pull Request #2546 · bytecodealliance/wasmtime\">x64: handle tests of b1 values correctly (only LSB is defined). by cfallin · Pull Request #2546 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Previously, select and brz/brnz instructions, when given a b1\nboolean argument, would test whether that boolean argument was nonzero,\nrather than whether its LSB was nonzero. Since our invariant fo...</div></div></div>",
        "id": 221601917,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1609808410
    }
]