[
    {
        "content": "<p>Where can I find a simple \"hello world\" Cranelift example, that just builds a simple (adder?) function, JIT compile and calls it? The simplest example I could find is the \"toy language\", which has an entire programming language, parser and extra stuff. Really hard to get started on Cranelift right now. I just need to be able to produce the IR (already learned how, by using FunctionBuilder), and then compile it to a callable Rust function, which mutates a Rust &amp;[u8] buffer. A simple \"hello world\" adder would be immensely helpful to get started.</p>",
        "id": 267101976,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641496678
    },
    {
        "content": "<p>these slides seems to contain such small example: <a href=\"https://www.slideshare.net/RReverser/building-fast-interpreters-in-rust\">https://www.slideshare.net/RReverser/building-fast-interpreters-in-rust</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.slideshare.net/RReverser/building-fast-interpreters-in-rust\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fe5934be08047351bc96126c35663c3eb8f6a331\\/68747470733a2f2f63646e2e736c696465736861726563646e2e636f6d2f73735f7468756d626e61696c732f7275737464736c2d3138313230373133303535392d7468756d626e61696c2d342e6a70673f63623d31353434313838313036)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.slideshare.net/RReverser/building-fast-interpreters-in-rust\" title=\"Building fast interpreters in Rust\">Building fast interpreters in Rust</a></div><div class=\"message_embed_description\">Presentation I gave at a Rust Austin meetup in November 2018 about exploring different approaches for interpreting custom DSLs in Rust with varying speed charaâ€¦</div></div></div>",
        "id": 267102439,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641496952
    },
    {
        "content": "<p>but I can't find the code for it</p>",
        "id": 267102445,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641496955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"469132\">@Victor Maia</span> I'm not aware of any literal \"hello world\" example, but I agree, we should have something like that. <a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\">https://github.com/bytecodealliance/cranelift-jit-demo</a> is the closest to a \"getting started\" example that we have (probably what you are referring to). We're pretty resource-constrained and haven't been able to build up a lot of tutorial documentation unfortunately (docs are a priority for work in 2022, though, assuming other priorities don't get in the way)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cranelift-jit-demo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bd086784b5884884ac95c696759666defba9b0ee\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306264383136653062653465623236336131303835373334633564626265393936366133316361343131353862346461636561316364643538643265313838622f62797465636f6465616c6c69616e63652f6372616e656c6966742d6a69742d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cranelift-jit-demo\" title=\"GitHub - bytecodealliance/cranelift-jit-demo: JIT compiler and runtime for a toy language, using Cranelift\">GitHub - bytecodealliance/cranelift-jit-demo: JIT compiler and runtime for a toy language, using Cranelift</a></div><div class=\"message_embed_description\">JIT compiler and runtime for a toy language, using Cranelift - GitHub - bytecodealliance/cranelift-jit-demo: JIT compiler and runtime for a toy language, using Cranelift</div></div></div>",
        "id": 267102501,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641496988
    },
    {
        "content": "<p>If you do work out a very simple minimal example we'd be happy to take a PR to our docs directory though, to at least help future folks!</p>",
        "id": 267102617,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641497045
    },
    {
        "content": "<p>I see, that is fine. Have been in your shoes.</p>",
        "id": 267102718,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641497120
    },
    {
        "content": "<p>Maybe it would be helpful to link more prominently to the JIT example from the documentation?</p>",
        "id": 267103432,
        "sender_full_name": "Teymour Aldridge",
        "timestamp": 1641497506
    },
    {
        "content": "<p>Problem is, people that code to Cranelift probably already know how parsers, ASTs etc. work, so all the extra stuff get in the way of finding the Cranelift functions I'm interested in. But that is fine, I'll try to dig the JIT example and make a small \"hello world\" that just compiles an adder, and then I'll post it in case anyone else is interested.</p>",
        "id": 267104003,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641497767
    },
    {
        "content": "<p>The <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html\">https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html</a> trait shows what instructions can be built.</p>",
        "id": 267104809,
        "sender_full_name": "Teymour Aldridge",
        "timestamp": 1641498212
    },
    {
        "content": "<p>I guess I was almost there: <a href=\"https://gist.github.com/MaiaVictor/3a1b0a07517574c348c6131fbb7ab6d3\">https://gist.github.com/MaiaVictor/3a1b0a07517574c348c6131fbb7ab6d3</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/3a1b0a07517574c348c6131fbb7ab6d3\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/3a1b0a07517574c348c6131fbb7ab6d3\" title=\"cranelift_error.rs\">cranelift_error.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267113152,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641502617
    },
    {
        "content": "<p>But I got a sad error: <code>thread 'main' panicked at 'PLT is currently only supported on x86_64'</code></p>",
        "id": 267113177,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641502632
    },
    {
        "content": "<p>I guess that means Cranelift doesn't support ARM / Apple M1 yet? :(</p>",
        "id": 267113202,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641502646
    },
    {
        "content": "<p>Cranelift does support aarch64 and M1! But there may be an issue with the particular kind of relocation you're using</p>",
        "id": 267114090,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641503052
    },
    {
        "content": "<p>I unfortunately don't have M1 hardware so I'm not an expert; cc <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> to help (he is in UTC+1 so probably not online at the moment)</p>",
        "id": 267114143,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641503079
    },
    {
        "content": "<p>What's \"relocation\"? The problematic code is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JITBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">cranelift_module</span>::<span class=\"n\">default_libcall_names</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JITModule</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>After googling, I realized there is a way to change flags of JITBuilder, so I'm messing with that to see if I get lucky</p>",
        "id": 267114621,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641503313
    },
    {
        "content": "<p>Relocations are the way in which the runtime edits the code to refer to particular functions that are being called. The PLT (procedure linkage table) is a particular mechanism used by some relocations. Depending on the environment in which Cranelift is used, it will use different relocation types. It seems here that the particular configuration is causing Cranelift to try to use the PLT, which we apparently don't support on aarch64.</p>\n<p>Wasmtime (which uses Cranelift) definitely works on M1, so a good starting point might be to see how it is generating calls and configuring things.  IIRC we end up with Abs8 references (absolute 64-bit addresses) to libcalls, so there is definitely a way to make that work.</p>\n<p>I'm not an expert in the <code>cranelift-jit</code> frontend to Cranelift, and mostly work in the backends, so you'll probably need help from <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> or possibly <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> (who also uses Cranelift outside of Wasmtime). Sorry I can't offer more than that!</p>",
        "id": 267115969,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1641503865
    },
    {
        "content": "<p>I see, that's already immensely helpful input, thank you. I don't think I have the knowledge to go further than that either, sadly.</p>",
        "id": 267116231,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641503997
    },
    {
        "content": "<p>yeah, there is an open issue for making cranelift-jit work on aarch64.</p>",
        "id": 267117566,
        "sender_full_name": "bjorn3",
        "timestamp": 1641504668
    },
    {
        "content": "<p>yep I'm reading it now</p>",
        "id": 267117614,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641504707
    },
    {
        "content": "<p>this is an issue specific to cranelift-jit. wasmtime and afaik aot compilation using cranelift-object are fully supported on aarch64.</p>",
        "id": 267117695,
        "sender_full_name": "bjorn3",
        "timestamp": 1641504740
    },
    {
        "content": "<p>I'm avoiding wasmtime and going directly to Cranelift because I need each % of performance I can get. I noticed wasmtime has some safety memory features that would likely make it slightly slower than a direct compilation. Also in wasmtime I can't apply a wasm function directly to a <code>&amp;mut [u8]</code>, I need to use wasm's linear memory, which in turn would mean I need to update the rest of my functions to also use wasm's linear memory (even though they're not related to JIT). Does that make sense, or am I going in the wrong direction?</p>",
        "id": 267117895,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641504872
    },
    {
        "content": "<p>i am responsible for the cranelift-jit change that caused this issue. it was part of a change i did to allow replacing function definitions.</p>",
        "id": 267117914,
        "sender_full_name": "bjorn3",
        "timestamp": 1641504892
    },
    {
        "content": "<p>That's quite cool actually</p>",
        "id": 267117961,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641504924
    },
    {
        "content": "<p>seems like benmk's solution on that thread solved the issue here, too. but it disables \"PIC\", which I don't know what is.</p>",
        "id": 267118071,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641504974
    },
    {
        "content": "<p>is PIC what allows replacing function definitions?</p>",
        "id": 267118105,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641505003
    },
    {
        "content": "<p>yes. this is not the normal purpose of pic, but I repurposed it in cranelift-jit for replacing function definitions. disabling it is likely slightly faster.</p>",
        "id": 267118294,
        "sender_full_name": "bjorn3",
        "timestamp": 1641505136
    },
    {
        "content": "<p>Any idea what <code>thread 'main' panicked at 'remove_constant_phis: entry block unknown'</code> could mean? I thought the first block was the entry already?</p>",
        "id": 267123836,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508076
    },
    {
        "content": "<p>where I'm at: <a href=\"https://gist.github.com/MaiaVictor/d41ae7af9e9ceaebdd778f27870a4ac4\">https://gist.github.com/MaiaVictor/d41ae7af9e9ceaebdd778f27870a4ac4</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/d41ae7af9e9ceaebdd778f27870a4ac4\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/d41ae7af9e9ceaebdd778f27870a4ac4\" title=\"aa.rs\">aa.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267123902,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508094
    },
    {
        "content": "<p>hmm never mind, seems like codegen already creates a func inside it, which is what I need to use, rather than creating a new one (?)</p>",
        "id": 267124468,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508434
    },
    {
        "content": "<p>the good news is: IT WORKS! yaaaay</p>",
        "id": 267124524,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508448
    },
    {
        "content": "<p>the bad news it is probably mostly wrong</p>",
        "id": 267124530,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508452
    },
    {
        "content": "<p>here is the code: <a href=\"https://gist.github.com/MaiaVictor/6f62947839c485c01751655d156ef35c\">https://gist.github.com/MaiaVictor/6f62947839c485c01751655d156ef35c</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/6f62947839c485c01751655d156ef35c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/6f62947839c485c01751655d156ef35c\" title=\"it_works.rs\">it_works.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267124594,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508491
    },
    {
        "content": "<p>but I'm confused, it seems like <code>add42</code> can only be called once, since it uses the <code>func</code> object in <code>codegen_ctx</code></p>",
        "id": 267124635,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508521
    },
    {
        "content": "<p>should <code>add42</code> instead return a <code>codegen_ctx</code>?</p>",
        "id": 267124668,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508537
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Builds a `f(x) = add(42,x)` function in Cranelift IR</span>\n<span class=\"k\">fn</span> <span class=\"nf\">add42</span><span class=\"p\">(</span><span class=\"n\">jit</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">JIT</span><span class=\"p\">)</span><span class=\"w\"> </span>: <span class=\"nc\">codegen</span>::<span class=\"n\">Context</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>\n<p>like this?</p>",
        "id": 267124696,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508553
    },
    {
        "content": "<p>basically I'm confused about the internal states, what should be kept and what should be created dynamically every time I compile a function</p>",
        "id": 267124785,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508602
    },
    {
        "content": "<p>ideally <code>add42</code> should return <code>CraneliftIR</code>, but since <code>FunctionBuilder::new</code> receives a function, I can't just build the IR separate from an existing/declared function, I guess?</p>",
        "id": 267125166,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641508813
    },
    {
        "content": "<p>The Context is meant to be reused between functions, but after every function you defined you need to call <code>.clear()</code> to clear out all cached state. Basically it is meant to allow reusing allocations between compilation of different functions.</p>",
        "id": 267126820,
        "sender_full_name": "bjorn3",
        "timestamp": 1641509912
    },
    {
        "content": "<p>As for the panic can you show the printed <code>Function</code>?</p>",
        "id": 267126896,
        "sender_full_name": "bjorn3",
        "timestamp": 1641509986
    },
    {
        "content": "<p>I am going to sleep. I will look at any reply tomorrow.</p>",
        "id": 267127085,
        "sender_full_name": "bjorn3",
        "timestamp": 1641510066
    },
    {
        "content": "<p>Thanks, for now I think all is fine. If you could just have a quick look on my code and let me know if you spot any obvious mistake (such as using the static objects incorrectly):</p>\n<p><a href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a\">https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a\" title=\"it_works.rs\">it_works.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267128761,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641511123
    },
    {
        "content": "<p>Specifically, I'm worried that <code>make_adder</code> starts with <code>jit.codegen_ctx.func.signature.params.push</code>, wouldn't that cause the params to accumulate through different functions?</p>",
        "id": 267128923,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641511223
    },
    {
        "content": "<p>Well I have just 2 quick questions if I may:</p>\n<ol>\n<li>How do I use <code>iconst.u64</code> with ins()? <code>builder.ins().iconst(I64, amount)</code> is signed, if I understand correctly</li>\n<li>How do I pass and access arrays to the generated functions? I've spend a while trying to understand the load/store prims, but couldn't get it quite right. This is my best attempt: <a href=\"https://gist.github.com/MaiaVictor/171cf093c49aab67ce0fbffe5dd7898f#file-wrong-rs-L109\">https://gist.github.com/MaiaVictor/171cf093c49aab67ce0fbffe5dd7898f#file-wrong-rs-L109</a> (yes it is obviously wrong but I'm not sure what I'm even looking for)</li>\n</ol>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/171cf093c49aab67ce0fbffe5dd7898f#file-wrong-rs-L109\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/171cf093c49aab67ce0fbffe5dd7898f#file-wrong-rs-L109\" title=\"wrong.rs\">wrong.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267144961,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641523578
    },
    {
        "content": "<p>For 1. it is fine to just cast a u64 to an i64. It will fill the registers with the provided bits without interpreting it in any way. For integers smaller than 64bit the most significant bits in the immediate should be ignored, so it is fine to both sign or zero extend the immediate to 64 bits.</p>",
        "id": 267169889,
        "sender_full_name": "bjorn3",
        "timestamp": 1641549095
    },
    {
        "content": "<p>For 2. you need to multiply the array index by the element size and then add the resulting offset to the array pointer. You can then pass the resulting element pointer to the load instruction.</p>",
        "id": 267169981,
        "sender_full_name": "bjorn3",
        "timestamp": 1641549145
    },
    {
        "content": "<p>To answer <a href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L73\">https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L73</a> FunctionBuilderContext is used to reuse some allocations between two FunctionBuilder's. There is only a perf difference between using a single FunctionBuilderContext and using a new one every time you make a FunctionBuilder. It is cleared automatically by FunctionBuilder::new().</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L73\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L73\" title=\"it_works.rs\">it_works.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267170252,
        "sender_full_name": "bjorn3",
        "timestamp": 1641549367
    },
    {
        "content": "<p>To answer <a href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L118\">https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L118</a> it checks that some cranelift ir invariants are not violated. Violating these could result in crashes during compilation or even to miscompilation. It mainly exists as a debugging tool. Once you are certain that you are always producing correct cranelift ir it is fine to disable it for release builds. (keeping it for debug builds can still be useful)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L118\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/MaiaVictor/682eeca48da1f2d6db77875b331cd88a#file-it_works-rs-L118\" title=\"it_works.rs\">it_works.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 267170461,
        "sender_full_name": "bjorn3",
        "timestamp": 1641549514
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"469132\">@Victor Maia</span> The <a href=\"http://it_works.rs\">it_works.rs</a> code looks fine to me.</p>",
        "id": 267170528,
        "sender_full_name": "bjorn3",
        "timestamp": 1641549581
    },
    {
        "content": "<p>I get it. And got the array code to work now. That is immensely helpful. Thank you so much for taking your time to answer my questions!</p>",
        "id": 267172833,
        "sender_full_name": "Victor Maia",
        "timestamp": 1641551030
    },
    {
        "content": "<p>You're welcome!</p>",
        "id": 267180167,
        "sender_full_name": "bjorn3",
        "timestamp": 1641556170
    },
    {
        "content": "<p>Hi! Cool that you found another way to do it, I unfortunately don't have much insights into the PLT issue on aarch64 <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 267471873,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1641836033
    },
    {
        "content": "<p>Hey last week I started working on my own programming language for the sake of learning how to do it, meaning I'm a complete novice into this world.</p>\n<p>I started by outputting assembly (I'm on a M1 Mac) and then calling <code>as</code> &amp; <code>ld</code> to create the final binary, while trying to make it run in linux as well I went down the rabbit hole of compiler backends and found cranelift.</p>\n<p>Scouring for an updated version of a native binary example led me to nothing but I did find the JIT examples which are good enough for me to get started.</p>\n<p>At this point I have a repo that has a minimal version of what <span class=\"user-mention\" data-user-id=\"469132\">@Victor Maia</span> had but I wanted to extend it to also allow for printing (so think printf/puts) can anyone give me any pointers into how I would go for trying to achieve that?</p>\n<p>My plan is to also extend the example to have a native binary version of the same thing.</p>\n<p>Here is the repo <a href=\"https://github.com/Mike-Neto/cranelift-simple-jit/tree/main\">https://github.com/Mike-Neto/cranelift-simple-jit/tree/main</a> .</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Mike-Neto/cranelift-simple-jit/tree/main\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/50d6aa134e60351b3dd62fc677b02866b94fef6d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333038313435666131633430376132663563633531323933663437646362646561323131346137613037323063303234373638323733346462623130363966642f4d696b652d4e65746f2f6372616e656c6966742d73696d706c652d6a6974&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Mike-Neto/cranelift-simple-jit/tree/main\" title=\"GitHub - Mike-Neto/cranelift-simple-jit\">GitHub - Mike-Neto/cranelift-simple-jit</a></div><div class=\"message_embed_description\">Contribute to Mike-Neto/cranelift-simple-jit development by creating an account on GitHub.</div></div></div>",
        "id": 477796112,
        "sender_full_name": "Mike-Neto",
        "timestamp": 1729335455
    },
    {
        "content": "<p>Usually this is accomplished by linking to the targeted platforms system library (such as glibc on Linux) and then calling those functions with the appropriate calling convention (such as SystemV). </p>\n<p>For that route you'll also need to make sure your language supports the necessary parts to construct the C-compatible data for those function calls. (raw pointer to bytes in the case of <code>puts</code>)</p>\n<p>An alternative is to write a basic standard library in Rust to piggy-back of Rust's platform-agnostic standard library, and then expose those Rust functions to your language by declaring them with <code>extern</code> and compiling the Rust side to a static library.</p>",
        "id": 478020466,
        "sender_full_name": "Floppy",
        "timestamp": 1729507560
    }
]