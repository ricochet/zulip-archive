[
    {
        "content": "<p>In LLVM there are routines to get the bit size of a type while taking padding and what not into account. I'm using this to figure out if a returned structure needs to use a regular return or a struct return.</p>\n<p>Looking at the Cranelift documentation it seems it doesn't offer anything for this (in part because structures aren't really a thing in the IR). Am I correct in this?</p>",
        "id": 409661193,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703291535
    },
    {
        "content": "<p>Implementing this myself isn't too hard, but it would be nice if I don't have to repeat something already done by others <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409661243,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703291561
    },
    {
        "content": "<p>That’s correct, Cranelift has no aggregate types; it’s up to you to compute struct layout and derive pointers appropriately</p>",
        "id": 409664513,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1703292920
    },
    {
        "content": "<p>Gotcha <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 409665020,
        "sender_full_name": "Yorick Peterse",
        "timestamp": 1703293151
    },
    {
        "content": "<p>You could try using <a href=\"https://doc.rust-lang.org/std/alloc/struct.Layout.html#method.extend\">https://doc.rust-lang.org/std/alloc/struct.Layout.html#method.extend</a> for it, but as you say it's not that hard so whether it'd be worth it isn't necessarily obvious.</p>",
        "id": 411070557,
        "sender_full_name": "scottmcm",
        "timestamp": 1704311022
    }
]