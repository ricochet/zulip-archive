[
    {
        "content": "<p>What do arrow statements in CLIF mean?<br>\neg</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">mul_minus_one_commuted</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span>\n<span class=\"n\">block0</span><span class=\"p\">(</span><span class=\"n\">v0</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span>:\n    <span class=\"nc\">v1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iconst</span><span class=\"p\">.</span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"mh\">0xffff_ffff</span><span class=\"w\"> </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">imul</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">v2</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ineg</span><span class=\"w\"> </span><span class=\"n\">v0</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v5</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v3</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">v6</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">v3</span>\n<span class=\"w\">    </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">check</span>: <span class=\"nc\">return</span><span class=\"w\"> </span><span class=\"n\">v3</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 342654316,
        "sender_full_name": "kmeakin",
        "timestamp": 1679082889
    },
    {
        "content": "<p>Those are value aliases, so <code>v5</code> is an alias of <code>v3</code>, and so on.</p>",
        "id": 342655850,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1679083435
    },
    {
        "content": "<p>Ok. But why do the aliases exist in the first place?</p>",
        "id": 342656288,
        "sender_full_name": "kmeakin",
        "timestamp": 1679083600
    },
    {
        "content": "<p>they allow for rewrites without editing all use-sites</p>",
        "id": 342656365,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679083625
    },
    {
        "content": "<p>I see. So at some point a <code>v5</code> and <code>v6</code> were referenced somewhere?</p>",
        "id": 342656674,
        "sender_full_name": "kmeakin",
        "timestamp": 1679083744
    },
    {
        "content": "<p>presumably in intermediate forms in the e-graph, but which were ultimately not selected during extraction</p>",
        "id": 342657575,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1679084116
    },
    {
        "content": "<p>cool</p>",
        "id": 342659439,
        "sender_full_name": "kmeakin",
        "timestamp": 1679084867
    },
    {
        "content": "<p>maybe we could remove dead aliases from IR before its emitted? Would make more concise/readable output</p>",
        "id": 342659606,
        "sender_full_name": "kmeakin",
        "timestamp": 1679084930
    },
    {
        "content": "<p>That would lose information. It is possible to replace an alias with another alias or a regular instruction again.</p>",
        "id": 342660754,
        "sender_full_name": "bjorn3",
        "timestamp": 1679085386
    },
    {
        "content": "<p>yes, it's useful to have a 1:1 dump of the actual IR data structure; if it becomes an issue for readable dumps at various points I suppose we could have simplification passes (DCE would be another useful one when printing) that can run before debug dumps</p>",
        "id": 342662795,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1679086101
    },
    {
        "content": "<p>We do have resolve_aliases to replace all alias uses with their definition and we also don't print unused aliases, so just calling resolve_aliases before printing would be enough to remove all aliases from the output.</p>",
        "id": 342674146,
        "sender_full_name": "bjorn3",
        "timestamp": 1679091645
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"600668\">kmeakin</span> has marked this topic as resolved.</p>",
        "id": 343517372,
        "sender_full_name": "Notification Bot",
        "timestamp": 1679431509
    }
]