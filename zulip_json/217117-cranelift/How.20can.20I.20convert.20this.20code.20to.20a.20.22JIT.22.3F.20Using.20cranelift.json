[
    {
        "content": "<p>Hello everyone, I'm learning to use Cranelift, so I appreciate your patience on this topic. I understand that a JIT, during program \"compilation,\" translates the code into machine code. At certain points, the JIT knows the values and data types it's working with, while a compiler knows data types during compilation but not the exact values. I'm interested in creating a JIT, and at a certain point in my program, I'd like to know the values and data types I'm working with. However, based on the example provided by bytecodealliance on how to make a JIT with Cranelift, it doesn't seem to achieve exactly that.</p>\n<p>I'll be using this example code: <a href=\"https://users.rust-lang.org/t/calling-a-rust-function-from-cranelift/103948\">https://users.rust-lang.org/t/calling-a-rust-function-from-cranelift/103948</a>. In this code, a Rust function is called from Cranelift, and it's perfect for explaining my question. Towards the end of the code, using <code>mem::transmute</code>, the Cranelift-generated code is converted into a function callable from Rust, which executes the Cranelift-generated code. Before that, both the result of the Rust function call and the passed parameters are simple <code>Value</code>s, representing each value but it is not the actual value. What I want to know is, based on the provided code, how could I execute the same Rust function with Cranelift, then obtain the returned value of that function but get the real value, not a <code>Value</code>? So before finishing all the code, get the actual value returned by the function, do whatever with the value and then continue using cranelift. This is how I think a JIT works. If there's anything I'm missing or misunderstanding, I appreciate your help.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://users.rust-lang.org/t/calling-a-rust-function-from-cranelift/103948\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/24a198d4f61f8267000f767f0c08153c080d1f37\\/68747470733a2f2f676c6f62616c2e646973636f757273652d63646e2e636f6d2f627573696e657373352f75706c6f6164732f727573745f6c616e672f6f726967696e616c2f32582f382f383365343139353665636366643637616436666637366631356132633232653538646233316434662e737667)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://users.rust-lang.org/t/calling-a-rust-function-from-cranelift/103948\" title=\"Calling a Rust function from Cranelift\">Calling a Rust function from Cranelift</a></div><div class=\"message_embed_description\">I have been experimenting with Cranelift, This is where I have got to. Mostly I think I understand what is going on. It seems to work as expected. The \"scary\" bit is taking the raw address of rustfunc and then having to declare the parameters and return type to match correctly. It seems there is no way in Rust to automate this (unless I am missing something). I was expecting to have to choose and declare an explicit calling convention, but it seems to work correctly without doing that. The other...</div></div></div>",
        "id": 422134523,
        "sender_full_name": "David flogar",
        "timestamp": 1708295048
    },
    {
        "content": "<p>As far as I known: Cranelift provide rust api to generate IR for function to compile. so the <code>Value</code> is the struct  for generating the  IR of value but not real data. then JIT compile the IR of function to executable code and use <code>mem::transmute</code> convert for other rust function call.</p>",
        "id": 422143040,
        "sender_full_name": "Jeremy Mei(梅杰)",
        "timestamp": 1708303511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691571\">Jeremy Mei(梅杰)</span> <a href=\"#narrow/stream/217117-cranelift/topic/How.20can.20I.20convert.20this.20code.20to.20a.20.22JIT.22.3F.20Using.20cranelift/near/422143040\">said</a>:</p>\n<blockquote>\n<p>As far as I known: Cranelift provide rust api to generate IR for function to compile. so the <code>Value</code> is the struct  for generating the  IR of value but not real data. then JIT compile the IR of function to executable code and use <code>mem::transmute</code> convert for other rust function call.</p>\n</blockquote>\n<p>But then in order to get the real values I have to run <code>mem::transmute</code> to execute simple functions?  Could I see some example code or reference?</p>",
        "id": 422145117,
        "sender_full_name": "David flogar",
        "timestamp": 1708305449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"687754\">@David flogar</span> FYI <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs#L90\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs#L90</a></p>",
        "id": 422148002,
        "sender_full_name": "Jeremy Mei(梅杰)",
        "timestamp": 1708308201
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"687754\">@David flogar</span> FYI <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs#L90\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs#L90</a></p>",
        "id": 422148070,
        "sender_full_name": "Jeremy Mei(梅杰)",
        "timestamp": 1708308251
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691571\">Jeremy Mei(梅杰)</span> <a href=\"#narrow/stream/217117-cranelift/topic/How.20can.20I.20convert.20this.20code.20to.20a.20.22JIT.22.3F.20Using.20cranelift/near/422148002\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"687754\">David flogar</span> FYI <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs#L90\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/jit/examples/jit-minimal.rs#L90</a></p>\n</blockquote>\n<p>Oh, so for every task I want to do I have to call <code>module.get_finalized_function()</code> and then <code>mem::transmute()</code> over and over again? Even though it has many functions?</p>",
        "id": 422148552,
        "sender_full_name": "David flogar",
        "timestamp": 1708308723
    },
    {
        "content": "<p>Sorry if this is a stupid question, I don't have much experience in this topic.</p>",
        "id": 422148596,
        "sender_full_name": "David flogar",
        "timestamp": 1708308746
    },
    {
        "content": "<p>But then I have to compile each function I want just as it is done there, right?</p>",
        "id": 422148652,
        "sender_full_name": "David flogar",
        "timestamp": 1708308810
    }
]