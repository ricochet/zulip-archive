[
    {
        "content": "<p>I'm trying to write a dynamically recompiling emulator like qemu. Qemu jit compiler generates code at the basic block level, not at a subroutine/function level. <br>\nI'm trying to figure out how to do this with cranelift, all the tutorials/examples I see uses a function level generator. Is it possible at all?</p>",
        "id": 476382535,
        "sender_full_name": "Madushan Nishantha",
        "timestamp": 1728651305
    },
    {
        "content": "<p>Unfortunately not in a simple way — Cranelift is a whole-function compiler and that’s a very deeply embedded fundamental design point. However: potentially you could compile blocks as small functions and end with tail calls to the next block; you’ll have a little overhead with prologue/epilogue but maybe not too bad</p>",
        "id": 476404150,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728658215
    },
    {
        "content": "<p>Thank you for the clarification :) <br>\nIt there an easy way to patch out the prologue/epilogue? Qemu also just patch the generated epilogue directly to jump to next basic block after the next block is generated to speed up the emulation.</p>",
        "id": 476405264,
        "sender_full_name": "Madushan Nishantha",
        "timestamp": 1728658582
    },
    {
        "content": "<p>The prologue is necessary to setup stack space and save clobbered registers.</p>",
        "id": 476408737,
        "sender_full_name": "bjorn3",
        "timestamp": 1728659663
    },
    {
        "content": "<p>I'm planning to do that part manually when entering the emulation and exiting it. so having it in each basic block is redundant if I use small functions to represent a basic block.</p>",
        "id": 476409586,
        "sender_full_name": "Madushan Nishantha",
        "timestamp": 1728659914
    },
    {
        "content": "<p>hmm after thinking about it a bit more, I guess I wouldn't know about what registers the generated code is going to clobber. so I will have to keep the prologue and possibly the epilogue.</p>",
        "id": 476410898,
        "sender_full_name": "Madushan Nishantha",
        "timestamp": 1728660317
    },
    {
        "content": "<p>Right, the issue is that they're tightly coupled; Cranelift expects that it can generate a blob of code and you'll execute all of it, and you're violating the interface if you don't (any patching would be ad-hoc and would be liable to break with any Cranelift update at all, or in a corner case you haven't tested)</p>",
        "id": 476434855,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728669410
    },
    {
        "content": "<p>on all non-x86 platforms we skip generating the frame-pointer setup in leaf functions (those with no other calls) with no clobbers or spills; so very small functions in many cases will just be \"&lt;body&gt; ; ret\"</p>",
        "id": 476434958,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728669455
    },
    {
        "content": "<p>on x86 we can do this optimization eventually too, I don't remember what the issue was but probably minor</p>",
        "id": 476434987,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1728669468
    },
    {
        "content": "<p>Okay, I will do some experiments and figure out basic block as a function pattern will work well with my usecase. Thank you again for the help.</p>",
        "id": 476443209,
        "sender_full_name": "Madushan Nishantha",
        "timestamp": 1728673066
    },
    {
        "content": "<blockquote>\n<p>I don't remember what the issue was but probably minor</p>\n</blockquote>\n<p>The last time we discussed this was here:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/8516\">https://github.com/bytecodealliance/wasmtime/pull/8516</a></p>\n<p>We just need to figure out if we are going to emit a call in the function body to know if we can skip the prologue</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8516\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/61efee848fa1a4fc62918cc9ed966783a15a7c37/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363662633835353831343665383239643633363565313533336661343231613532656466393561303761303733333632616537306634643235633361616533622f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38353136&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8516\" title=\"WIP: cranelift: omit function prologue and epilogue on x64 if possible by tertsdiepraam · Pull Request #8516 · bytecodealliance/wasmtime\">WIP: cranelift: omit function prologue and epilogue on x64 if possible by tertsdiepraam · Pull Request #8516 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This makes cranelift omit the function prologue and epilogue on the x64 architecture if possible, like it already does for aarch64.\nHowever, this is not quite right yet, because (if I understand co...</div></div></div>",
        "id": 476453428,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1728678106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"766479\">@Madushan Nishantha</span> You may want to have a look at <a href=\"https://github.com/Amanieu/a-tale-of-binary-translation\">https://github.com/Amanieu/a-tale-of-binary-translation</a> which does just this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/a-tale-of-binary-translation\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/63b543597ba0bc50240f845eec403dbe422f49e7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653334386530613431386236323234646231343163396162643661653131383837626462343731353839396632643637333434393530643732623363643039372f416d616e6965752f612d74616c652d6f662d62696e6172792d7472616e736c6174696f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/a-tale-of-binary-translation\" title=\"GitHub - Amanieu/a-tale-of-binary-translation: Simple RISC-V emulator presented at Rust Nation 2023\">GitHub - Amanieu/a-tale-of-binary-translation: Simple RISC-V emulator presented at Rust Nation 2023</a></div><div class=\"message_embed_description\">Simple RISC-V emulator presented at Rust Nation 2023 - Amanieu/a-tale-of-binary-translation</div></div></div>",
        "id": 476506916,
        "sender_full_name": "Amanieu",
        "timestamp": 1728722545
    },
    {
        "content": "<p>There's more details in the <a href=\"https://www.youtube.com/watch?v=Avp55U2JFcQ\">presentation</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"Avp55U2JFcQ\" href=\"https://www.youtube.com/watch?v=Avp55U2JFcQ\"><img src=\"https://uploads.zulipusercontent.net/0d44eb9e40ec817a5ac4ae91a5df9fac04c1c1af/68747470733a2f2f692e7974696d672e636f6d2f76692f417670353555324a4663512f64656661756c742e6a7067\"></a></div>",
        "id": 476506975,
        "sender_full_name": "Amanieu",
        "timestamp": 1728722631
    },
    {
        "content": "<p>At the time Cranelift didn't support tail calls. Rust still doesn't.</p>",
        "id": 476507033,
        "sender_full_name": "Amanieu",
        "timestamp": 1728722683
    },
    {
        "content": "<p>Nice! thank you. I'll have a look.</p>",
        "id": 476516895,
        "sender_full_name": "Madushan Nishantha",
        "timestamp": 1728732000
    }
]