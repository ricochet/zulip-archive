[
    {
        "content": "<p>If you have a spare moment could you review some of the fixes I pushed as I was running the SIMD spec tests in wasmtime? The reviews should be rather short (&lt;50 lines): <a href=\"https://github.com/bytecodealliance/cranelift/pulls/abrown\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pulls/abrown\">https://github.com/bytecodealliance/cranelift/pulls/abrown</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cranelift/pulls/abrown\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cranelift/pulls/abrown\" target=\"_blank\" title=\"bytecodealliance/cranelift\">bytecodealliance/cranelift</a></div><div class=\"message_embed_description\">Cranelift code generator. Contribute to bytecodealliance/cranelift development by creating an account on GitHub.</div></div></div>",
        "id": 183409009,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1576277409
    },
    {
        "content": "<p>If anyone is interested in AVX-512 support in Cranelift, I just pushed <a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"https://github.com/bytecodealliance/cranelift/pull/1370\">https://github.com/bytecodealliance/cranelift/pull/1370</a> to add the ability to encode instructions using the EVEX format.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cranelift/pull/1370\" target=\"_blank\" title=\"Add initial support for EVEX encodings by abrown · Pull Request #1370 · bytecodealliance/cranelift\">Add initial support for EVEX encodings by abrown · Pull Request #1370 · bytecodealliance/cranelift</a></div><div class=\"message_embed_description\">This has been discussed in issue #1244.\n A short description of what this does, why it is needed: since the Wasm SIMD spec has re-added instructions (e.g. i64x2.mul) that are optimally encoded in V...</div></div></div>",
        "id": 188250886,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1581717307
    },
    {
        "content": "<p>Before <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> comes back online, I am giving anyone interested a heads up of a four PR sequence adding some remaining legalizations for Wasm SIMD instructions. The sequence is: #1765 -&gt; #1820 -&gt; #1821 -&gt; #1822. The blocking issue for me to finish this PRs has been that the spec defines semantics that make it very difficult to lower efficiently on x86. To get around this in the short term, I've added some disabled-by-default flags, <code>assert_no_nans</code> and <code>assert_in_bounds</code>, that allow users to reassure Cranelift that it doesn't need to do the extra work. I'm interested in feedback so please take a look if interested!</p>",
        "id": 199783400,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591292499
    },
    {
        "content": "<p>Tagging some people per <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span>'s comment in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1820\">https://github.com/bytecodealliance/wasmtime/pull/1820</a>: <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1820\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1820\" title=\"Implement fcvt_to_sint_sat (f32x4 -&gt; i32x4) for x86 by abrown · Pull Request #1820 · bytecodealliance/wasmtime\">Implement fcvt_to_sint_sat (f32x4 -&gt; i32x4) for x86 by abrown · Pull Request #1820 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a follow-on to #1765 and should be merged after that PR.\nThe most notable change here is the addition of the ISA-specific flags assert_no_nans and assert_in_bounds which are disabled by def...</div></div></div>",
        "id": 200300668,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591742806
    },
    {
        "content": "<p>If assert_no_nans is set and a NaN happens, it's undefined behavior?</p>",
        "id": 200300836,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591742948
    },
    {
        "content": "<p>Yes</p>",
        "id": 200300865,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591742978
    },
    {
        "content": "<p>So we won't be able to set that for wasm code</p>",
        "id": 200300884,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591742991
    },
    {
        "content": "<p>(I'm writing up a more full explanation... one sec)</p>",
        "id": 200300890,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591742996
    },
    {
        "content": "<p>The idea of adding <code>assert_no_nans</code> (or any other flag that would make runtime guarantees) is a tricky one. With #1820 I added only a first step in that direction by allowing users to assert at runtime that their program will not have NaNs--this allows Cranelift to generate faster code. Of course, this is a hammer approach to a screwdriver problem because it affects, e.g., every f32x4.max in the program. This is bad: 1) the user has to apply the guarantee to the whole program, and 2) the user usually can't make this guarantee since they don't understand all the parts of the code they are running</p>",
        "id": 200301104,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743098
    },
    {
        "content": "<p>I thought of this flag as an experimental thing and not the end solution. The end solution would have to involve programmer guarantees through, e.g., new C attributes like <code>__attribute__((no_nans))</code> which would have to propagate through a Wasm custom section to Cranelift.</p>",
        "id": 200301363,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743202
    },
    {
        "content": "<p>So, it could be set for Wasm code... initially for experimental benchmarking with the hammer flag and eventually through a more fine-grained mechanism</p>",
        "id": 200301463,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743267
    },
    {
        "content": "<p>Does that explain the idea better?</p>",
        "id": 200301630,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743384
    },
    {
        "content": "<p>Ok, so that would be something we'd coordinate with the wasm simd proposal?</p>",
        "id": 200301703,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591743462
    },
    {
        "content": "<p>Eventually... I would like to try out this experimental flag approach with some benchmarks and see if it is worth it to pursue further</p>",
        "id": 200301840,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743557
    },
    {
        "content": "<p>Ah, ok.</p>",
        "id": 200301871,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591743591
    },
    {
        "content": "<p>If it is and there is support from other people, then we could standardize it; if not, we just remove the flags</p>",
        "id": 200301872,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743591
    },
    {
        "content": "<p>So, looking at the code, why is there a <code>band</code> with an all-ones operand?</p>",
        "id": 200302000,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591743640
    },
    {
        "content": "<p>Um... it's been a bit since I looked at it but I thought that had to do with quieting NaNs</p>",
        "id": 200302209,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743815
    },
    {
        "content": "<p>(or it could be a mistake as I was looking at V8 at the time)</p>",
        "id": 200302282,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743857
    },
    {
        "content": "<p>We run with signaling-NaN signaling disabled, so we can probably skip that</p>",
        "id": 200302292,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591743863
    },
    {
        "content": "<p>We = all Cranelift-using wasm engines</p>",
        "id": 200302379,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591743938
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> and can you point me to where that is happening?</p>",
        "id": 200302404,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591743954
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1820/files#diff-f5aa2e18f8d875720c00f30b86cb69d4R1003\">https://github.com/bytecodealliance/wasmtime/pull/1820/files#diff-f5aa2e18f8d875720c00f30b86cb69d4R1003</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1820/files#diff-f5aa2e18f8d875720c00f30b86cb69d4R1003\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/541880?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1820/files#diff-f5aa2e18f8d875720c00f30b86cb69d4R1003\" title=\"Implement fcvt_to_sint_sat (f32x4 -&gt; i32x4) for x86 by abrown · Pull Request #1820 · bytecodealliance/wasmtime\">Implement fcvt_to_sint_sat (f32x4 -&gt; i32x4) for x86 by abrown · Pull Request #1820 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a follow-on to #1765 and should be merged after that PR.\nThe most notable change here is the addition of the ISA-specific flags assert_no_nans and assert_in_bounds which are disabled by def...</div></div></div>",
        "id": 200302503,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591744000
    },
    {
        "content": "<p>No, I mean the FP configuration</p>",
        "id": 200302521,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591744022
    },
    {
        "content": "<p>...if any</p>",
        "id": 200302527,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591744026
    },
    {
        "content": "<p>oh, it's the default mxcsr setting</p>",
        "id": 200302727,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591744178
    },
    {
        "content": "<p>Also, I'm trying to figure out that bxor at the end.  Should that be a band_not?</p>",
        "id": 200303315,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591744646
    },
    {
        "content": "<p>Here's what I referenced in V8: <a href=\"https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028\">https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/113781?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028\" title=\"v8/v8\">v8/v8</a></div><div class=\"message_embed_description\">The official mirror of the V8 Git repository. Contribute to v8/v8 development by creating an account on GitHub.</div></div></div>",
        "id": 200303514,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591744812
    },
    {
        "content": "<p>I documented some of the other instructions better than this one...</p>",
        "id": 200303528,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591744827
    },
    {
        "content": "<p>Need to drop but I'll check back in tomorrow; I'm interested in hearing more opinions on this experimental flag idea... and Dan if you just want to review that PR that would be great!!!</p>",
        "id": 200303812,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591745080
    },
    {
        "content": "<p>oh, I think the cmpeqps in there isn't generating an all-ones</p>",
        "id": 200303963,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591745218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> can you say some more about the difficulties in implementing <code>fcvt_to_sint_sat (f32x4 -&gt; i32x4)</code>efficiently?  What sequence do you have to generate?</p>",
        "id": 200526286,
        "sender_full_name": "Julian Seward",
        "timestamp": 1591870829
    },
    {
        "content": "<p>I can't say I suffered through that sequence much since I followed <a href=\"https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028\">what v8 does</a> (with one misunderstanding about their use of CMPEQPS). I think the bigger problem is that this and <a href=\"https://github.com/WebAssembly/simd/issues?q=is%3Aissue+is%3Aopen+inefficient\">many other instructions</a> have inefficient lowerings on x86 compared to other architectures. I've raised the issues and measured benchmarks and what I have concluded is that to make up for the extra instructions the spec semantics require we need several optimizations (like <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1187\">this one</a>) and something along the lines of the guarantees I proposed in #1820. As noted above the \"experimental flag\" approach is not the best long-term solution but it can reduce the number of instructions emitted for several of the most inefficient instructions.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/113781?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/v8/v8/blob/master/src/compiler/backend/x64/code-generator-x64.cc#L3011-L3028\" title=\"v8/v8\">v8/v8</a></div><div class=\"message_embed_description\">The official mirror of the V8 Git repository. Contribute to v8/v8 development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/simd/issues?q=is%3Aissue+is%3Aopen+inefficient\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/simd/issues?q=is%3Aissue+is%3Aopen+inefficient\" title=\"WebAssembly/simd\">WebAssembly/simd</a></div><div class=\"message_embed_description\">Branch of the spec repo scoped to discussion of SIMD in WebAssembly  - WebAssembly/simd</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1187\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1187\" title=\"Improve bitselect codegen with knowledge of operand origin · Issue #1187 · bytecodealliance/wasmtime\">Improve bitselect codegen with knowledge of operand origin · Issue #1187 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature As discussed in WebAssembly/simd#192, the Wasm SIMD bitselect instruction could be lowered to one of the x86 BLEND* family of instructions instead using 3-4 instructions. Benefit Potentiall...</div></div></div>",
        "id": 200560471,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591889429
    },
    {
        "content": "<p>Re: the flag, i was trying to think briefly in terms of security behaviors. The only case in which it's fine to set the flag is when you're running Cranelift on your own hardware; otherwise, it seems that setting the flag could open the door for correctness issues in the best case, security vulnerabilities in the worst one. So it might not be applicable to the browser use case, for one thing.</p>",
        "id": 200561980,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1591890066
    },
    {
        "content": "<p>I hear the performance improvements it can bring, and from my memories of the wasm spec in general (around max/min), I understand there might be some nice wins from doing this. I would be tempted to have this if we had a clear understanding of what's the worst that can happen when the flag isn't respected, and what we can do for this.</p>",
        "id": 200562478,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1591890258
    },
    {
        "content": "<p>Or considering alternatives; maybe we want some other low-level CLIR instructions that don't have these checks, and the emitter can choose to emit one or the other, or group the unsafe ones in a code sequence guarded by a check that the inputs are not NaNs. (Mostly equivalent to hoisting the NaN checks in one place)</p>",
        "id": 200562625,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1591890331
    },
    {
        "content": "<p>Could the experiments be done without checking in all the code upstream (in wasmtime master)?</p>",
        "id": 200562842,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1591890415
    },
    {
        "content": "<blockquote>\n<p>The only case in which it's fine to set the flag is when you're running Cranelift on your own hardware</p>\n</blockquote>\n<p>I agree with what you said about experimental flags, but I have convinced myself that a per-instruction attribute (the better, long-term solution) set by the programmer (not knowing the runtime hardware) would also be just as safe--I mean, the user is already trusting the programmer to write correct code so they can also trust the programmer to make a per-instruction guarantee</p>\n<blockquote>\n<p>I would be tempted to have this if we had a clear understanding of what's the worst that can happen when the flag isn't respected</p>\n</blockquote>\n<p>I don't think I understand this concern: if the user doesn't apply the flag, the code runs slower; if the user applies the flag, they may have unexpected data (if they assumed a NaN was converted to a zero but then was not).</p>",
        "id": 200568502,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591892837
    },
    {
        "content": "<p>On the alternatives: hoisting doesn't work if the operands of the guaranteed instruction are created inside a loop. And I could just keep all my optimizations local and just test locally but I guess the point of discussing this is to figure out if you all agree that Cranelift should try out this approach, from a philosophical standpoint, first as an experimental flag and possibly later with a per-instruction attribute.</p>",
        "id": 200569137,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591893113
    },
    {
        "content": "<p>(looks like we are all online if and I would be open to discussing on Zoom for a few minutes if that is quicker)</p>",
        "id": 200569459,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591893260
    },
    {
        "content": "<p>I must be honest and say I am not in favour of <code>assert_no_nans</code>.  The effect of it is to make the meaning of CLIR dependent on some external context, where it wasn't before.  \"Under-the-table\" semantics, I think of it as.</p>\n<p>As Dan says, we can't use it for translating wasm.  What would perhaps be better is to wait for v2 of the wasm simd spec, which Lars tells me might have some variants of existing insns that have cheaper to implement on Intel.  Then we'd have a cheaper implementation available exactly for those insns which are currently expensive, without <code>assert_no_nans</code>, and without creating the possibility of tagging arbitrary cranelift insns with a \"cheap semantics please\" flag in cases where that has no meaning.  Specifically, we could add cheap-variant CLIR ops for exactly those which are currently problematic, and for no others.</p>",
        "id": 200570301,
        "sender_full_name": "Julian Seward",
        "timestamp": 1591893686
    },
    {
        "content": "<p>I don't have much confidence in v2 of the spec... my experience so far has been that it is very difficult raise these types of lowering issues and get some type of resolution for x86 (hence looking at \"under-the-table\" semantics <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>). I agree that a solution at the spec level would be best but, in the absence of that, this approach seemed second-best and perhaps even a way to influence the spec, e.g. \"if this flag is necessary to achieve near-native performance, why don't we just add some Wasm SIMD instructions?\"</p>",
        "id": 200572169,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591894427
    },
    {
        "content": "<blockquote>\n<p>As Dan says, we can't use it for translating Wasm</p>\n</blockquote>\n<p>I think you can in certain scenarios (e.g. performance experiments) but by default this flag would be off; users would have to know what they're doing before using something like this.</p>",
        "id": 200572605,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1591894584
    },
    {
        "content": "<p>Ok, to resolve this discussion: I closed #1820 (which had guarantee flags) and re-opened it without flags as <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1876\">https://github.com/bytecodealliance/wasmtime/pull/1876</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1876\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1876\" title=\"Implement fcvt_to_sint_sat (f32x4 -&gt; i32x4) for x86 by abrown · Pull Request #1876 · bytecodealliance/wasmtime\">Implement fcvt_to_sint_sat (f32x4 -&gt; i32x4) for x86 by abrown · Pull Request #1876 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is the same as #1820 without the runtime guarantee flags.</div></div></div>",
        "id": 200731352,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1592000719
    },
    {
        "content": "<p>I tagged <span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span> as the reviewer since you looked at the last one--thanks for the reviews!</p>",
        "id": 200731516,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1592000823
    }
]