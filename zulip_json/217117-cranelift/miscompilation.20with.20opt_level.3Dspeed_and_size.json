[
    {
        "content": "<p>Because LICM has finally been fixed with jump tables, I tried to use it for cg_clif when enabling optimizations. It compiled fine and basic programs work, but simple-raytracer gave a SIGSEGV once and panicks the rest of the time. According to valgrind there are several reads of memory at different locations that is all freed at the same place. I will investigate further today or tomorrow.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Invalid</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x8BF885</span>: <span class=\"nc\">core</span>::<span class=\"kt\">str</span>::<span class=\"n\">validations</span>::<span class=\"n\">run_utf8_validation</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">validations</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">143</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x8BF368</span>: <span class=\"nc\">core</span>::<span class=\"kt\">str</span>::<span class=\"n\">converts</span>::<span class=\"n\">from_utf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">converts</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">86</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6FCCCF</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">os_str_bytes</span>::<span class=\"n\">Slice</span>::<span class=\"n\">to_str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os_str_bytes</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">165</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x6FB6BC</span>: <span class=\"nc\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">os_str</span>::<span class=\"n\">OsStr</span>::<span class=\"n\">to_str</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os_str</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">543</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x28351F</span>: <span class=\"nc\">image</span>::<span class=\"n\">dynimage</span>::<span class=\"n\">save_buffer_impl</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">dynimage</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">787</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x33F3AC</span>: <span class=\"nc\">core</span>::<span class=\"n\">option</span>::<span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span>::<span class=\"n\">and_then</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">option</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">692</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x2828B7</span>: <span class=\"nc\">image</span>::<span class=\"n\">dynimage</span>::<span class=\"n\">save_buffer_impl</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">dynimage</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">786</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x1497E6</span>: <span class=\"nc\">image</span>::<span class=\"n\">dynimage</span>::<span class=\"n\">save_buffer</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">dynimage</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">775</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x148382</span>: <span class=\"nc\">image</span>::<span class=\"n\">buffer</span>::<span class=\"n\">ImageBuffer</span><span class=\"o\">&lt;</span><span class=\"n\">P</span><span class=\"p\">,</span><span class=\"n\">Container</span><span class=\"o\">&gt;</span>::<span class=\"n\">save</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">441</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x147C51</span>: <span class=\"nc\">raytracer</span>::<span class=\"n\">scene</span>::<span class=\"n\">Scene</span>::<span class=\"n\">render</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">scene</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">42</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x143FBF</span>: <span class=\"nc\">main</span>::<span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">138</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x14220B</span>: <span class=\"nc\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">227</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">Address</span><span class=\"w\"> </span><span class=\"mh\">0x4c10067</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mi\">39</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">inside</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"w\"> </span><span class=\"mi\">552</span><span class=\"w\"> </span><span class=\"n\">free</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x48369AB</span>: <span class=\"nc\">free</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vg_replace_malloc</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">530</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4ABB880</span>: <span class=\"nc\">fclose</span><span class=\"o\">@@</span><span class=\"n\">GLIBC_2</span><span class=\"p\">.</span><span class=\"mf\">2.5</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iofclose</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">77</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x48AAE1C</span>: <span class=\"nc\">pthread_getattr_np</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pthread_getattr_np</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">161</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x75D4D1</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">guard</span>::<span class=\"n\">get_stack_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">288</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x75D8A0</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">guard</span>::<span class=\"n\">get_stack_start_aligned</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">305</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x75DA33</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">guard</span>::<span class=\"n\">init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">336</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7465D0</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">37</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x145143</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">65</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x14429C</span>: <span class=\"nc\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">bjorn</span><span class=\"o\">/</span><span class=\"n\">Documenten</span><span class=\"o\">/</span><span class=\"n\">cg_clif3</span><span class=\"o\">/</span><span class=\"n\">simple</span><span class=\"o\">-</span><span class=\"n\">raytracer</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">  </span><span class=\"n\">Block</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">alloc</span><span class=\"o\">'</span><span class=\"na\">d</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mh\">0x483577F</span>: <span class=\"nc\">malloc</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">vg_replace_malloc</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">299</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x4ABC0FA</span>: <span class=\"nc\">__fopen_internal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iofopen</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">65</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x48AACCA</span>: <span class=\"nc\">pthread_getattr_np</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pthread_getattr_np</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">81</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x75D4D1</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">guard</span>::<span class=\"n\">get_stack_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">288</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x75D8A0</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">guard</span>::<span class=\"n\">get_stack_start_aligned</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">305</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x75DA33</span>: <span class=\"nc\">std</span>::<span class=\"n\">sys</span>::<span class=\"n\">unix</span>::<span class=\"n\">thread</span>::<span class=\"n\">guard</span>::<span class=\"n\">init</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">336</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x7465D0</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">37</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x145143</span>: <span class=\"nc\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">65</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">==</span><span class=\"mi\">21057</span><span class=\"o\">==</span><span class=\"w\">    </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"mh\">0x14429C</span>: <span class=\"nc\">main</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">bjorn</span><span class=\"o\">/</span><span class=\"n\">Documenten</span><span class=\"o\">/</span><span class=\"n\">cg_clif3</span><span class=\"o\">/</span><span class=\"n\">simple</span><span class=\"o\">-</span><span class=\"n\">raytracer</span><span class=\"o\">/</span><span class=\"n\">raytracer_cg_clif</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219461997,
        "sender_full_name": "bjorn3",
        "timestamp": 1607601031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> One thing you could do is back out the LICM fix, but leave LICM enabled.  Then there are several possible scenarios:</p>\n<ul>\n<li>simple-raytracer now works (no invalid reads etc): the fix was somehow buggy</li>\n<li>simple-raytracer hits the indirect-jump-not-handled panic: then it needs the fix.  This strikes me as mutually exclusive with the previous possibility.</li>\n<li>simple-raytracer still doesn't work: the fix is OK, and the bug is somewhere else</li>\n</ul>\n<p>I too would like to know whether this fix is really OK, since I'm trying to stabilise a branch of CL to ship in Firefox.</p>",
        "id": 219465517,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607603578
    },
    {
        "content": "<p>Before the LICM fix opt_level=speed and opt_level=speed_and_size would simply panic when compiling. The LICM fix is what makes it possible to enable optimizations at all. I am pretty sure that the LICM fix didn't cause the issue.</p>",
        "id": 219470218,
        "sender_full_name": "bjorn3",
        "timestamp": 1607606439
    },
    {
        "content": "<p>@bjorn3 thanks for this -- eek. In addition to the questions from <span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span> above, it should be possible to instrument the licm pass with println's to work out where it's running; the CLIF for all functions on which LICM did any code motion would be super-helpful for us to debug</p>",
        "id": 219493730,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607616555
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> moin!  But note also, this doesn't actually imply that LICM is buggy.  It's just \"some part of the optimising pipeline\".</p>",
        "id": 219493918,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607616630
    },
    {
        "content": "<p>yep, indeed</p>",
        "id": 219493953,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607616648
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>  another thing to try would be to enable optimizations but explicitly remove LICM</p>",
        "id": 219493987,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607616665
    },
    {
        "content": "<p>then we avoid the panic that hid this before but hopefully expose whatever is causing the issue</p>",
        "id": 219494012,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607616681
    },
    {
        "content": "<p>I normally debug miscompilations by removing code and adding <code>println!()</code> to show where the corruption happens.</p>",
        "id": 219494255,
        "sender_full_name": "bjorn3",
        "timestamp": 1607616758
    },
    {
        "content": "<p>I had wondered from the backtraces if this was some kind of threading problem.  And in particular whether supposedly atomic loads/stores are not being labelled correctly (or some such) by @bjorn3's front end, and hence are getting moved around (GVNd, LICMd) when they shouldn't.</p>",
        "id": 219494367,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607616780
    },
    {
        "content": "<p>I use plain loads/stores protected by a global mutex. I am using an empty <code>MemFlags</code> so GVN and LICM should leave it alone. In addition the mutex lock/unlock should in itself function as a fence as it is a call instruction.</p>",
        "id": 219494990,
        "sender_full_name": "bjorn3",
        "timestamp": 1607616952
    },
    {
        "content": "<p>The <code>pthread_getattr_np</code> call is used by libstd as part of adding a stack guard page. It is done at the start of all threads before passing execution to the user. This includes the main thread.</p>",
        "id": 219495255,
        "sender_full_name": "bjorn3",
        "timestamp": 1607617065
    },
    {
        "content": "<p>This looks to me more like a standard use-after-free (file read tries to read FILE* after fclose), maybe from a control-flow corruption somewhere?</p>",
        "id": 219495410,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607617116
    },
    {
        "content": "<p>I'll build a full Fx with this fix in, so I can test it with really large inputs (eg Google Earth), but per <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>'s comments above, it seems like the fix itself isn't at fault.</p>",
        "id": 219495786,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607617251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> I assume this is on x64; is this the new or old BE?</p>",
        "id": 219495877,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607617290
    },
    {
        "content": "<p>A pointer to the block alloc'd inside libc shouldn't have been passed to user code even when it got corrupted. I think it is more likely that somewhere a pointer is created that just so happens to overlap with the malloc'd block.</p>",
        "id": 219495885,
        "sender_full_name": "bjorn3",
        "timestamp": 1607617293
    },
    {
        "content": "<p>x86_64 with the old backend. The new backend doesn't support 128bit ints yet.</p>",
        "id": 219495943,
        "sender_full_name": "bjorn3",
        "timestamp": 1607617313
    },
    {
        "content": "<p>(tangent, that's on my roadmap and I hope to fix it soon :-) )</p>",
        "id": 219496162,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607617388
    },
    {
        "content": "<p>Reduced to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">path</span>::<span class=\"n\">Path</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"result.png\"</span><span class=\"p\">).</span><span class=\"n\">extension</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">to_str</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"png\"</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This doesn't SIGSEGV anymore but <code>ext</code> becomes <code>None</code> incorrectly.</p>",
        "id": 219581175,
        "sender_full_name": "bjorn3",
        "timestamp": 1607678777
    },
    {
        "content": "<p>Using <code>println!()</code> the extension before the <code>.to_str()</code> call shows as varying garbage bytes.</p>",
        "id": 219581279,
        "sender_full_name": "bjorn3",
        "timestamp": 1607678856
    },
    {
        "content": "<p>Valgrind doesn't trigger anymore though.</p>",
        "id": 219581303,
        "sender_full_name": "bjorn3",
        "timestamp": 1607678873
    },
    {
        "content": "<p>Does V complain even with the <code>println!</code> in place?</p>",
        "id": 219581415,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607678923
    },
    {
        "content": "<p>It doesn't complain with or without <code>println()</code>.</p>",
        "id": 219581551,
        "sender_full_name": "bjorn3",
        "timestamp": 1607679006
    },
    {
        "content": "<p>But you get different garbage bytes on different runs, or are they always the same?</p>",
        "id": 219581752,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607679147
    },
    {
        "content": "<p>Different bytes</p>",
        "id": 219581760,
        "sender_full_name": "bjorn3",
        "timestamp": 1607679158
    },
    {
        "content": "<p><code>Path::new(\"result.png\").as_os_str().as_bytes()</code> doesn't show any corruption. <code>Path::new(\"result.png\").extension().unwrap().as_bytes()</code> does.</p>",
        "id": 219581853,
        "sender_full_name": "bjorn3",
        "timestamp": 1607679227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> as a side thought, can you work around the lack of 128 bit int support in the newBE by just translating it all into 64 bit arithmetic at your level?</p>",
        "id": 219582300,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607679580
    },
    {
        "content": "<p>Just on the basis that then you'd be using the pipeline under active development.</p>",
        "id": 219582403,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607679646
    },
    {
        "content": "<p>That is hard. cg_clif expects that all primitive rust types correspond to cranelift types. I do translate some 128bit operations to 64bit operations, but I really need one rust scalar to correspond to one <code>Value</code>.</p>",
        "id": 219582459,
        "sender_full_name": "bjorn3",
        "timestamp": 1607679690
    },
    {
        "content": "<p>I reduced it to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsStr</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">os</span>::<span class=\"n\">unix</span>::<span class=\"n\">ffi</span>::<span class=\"n\">OsStrExt</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">os_str_as_u8_slice</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">OsStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OsStr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">u8_slice_as_os_str</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">])</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">OsStr</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// SAFETY: see the comment of `os_str_as_u8_slice`</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">OsStr</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">split_file_at_dot</span><span class=\"p\">(</span><span class=\"n\">file</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">OsStr</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">OsStr</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">OsStr</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">os_str_as_u8_slice</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">b\"..\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// The unsafety here stems from converting between &amp;OsStr and &amp;[u8]</span>\n<span class=\"w\">    </span><span class=\"c1\">// and back. This is safe to do because (1) we only look at ASCII</span>\n<span class=\"w\">    </span><span class=\"c1\">// contents of the encoding and (2) new &amp;OsStr values are produced</span>\n<span class=\"w\">    </span><span class=\"c1\">// only from ASCII-bounded slices of existing &amp;OsStr values.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">os_str_as_u8_slice</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">).</span><span class=\"n\">rsplitn</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">b</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"sc\">b'.'</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">before</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">b\"\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">before</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">u8_slice_as_os_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)),</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">u8_slice_as_os_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">OsStr</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"result.png\"</span><span class=\"p\">)).</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">split_file_at_dot</span><span class=\"p\">).</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">b\"png\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>It is very sensitive to changes now.</p>",
        "id": 219582731,
        "sender_full_name": "bjorn3",
        "timestamp": 1607679873
    },
    {
        "content": "<p>Removed all unsafe code and the <code>OsStr</code> dependency:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">b\"\"</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">b\"png\"</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]))).</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">b\"png\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219583245,
        "sender_full_name": "bjorn3",
        "timestamp": 1607680254
    },
    {
        "content": "<p>No <code>unwrap</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ext</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">((</span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">b\"\"</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]),</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">b\"png\"</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]))).</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">)</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">assert_eq</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">ext</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">b\"png\"</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]));</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219583598,
        "sender_full_name": "bjorn3",
        "timestamp": 1607680497
    },
    {
        "content": "<p>I can't find any relevant changes in <code>Map::and_then</code> between unoptimized and optimized. Only <code>icmp</code> + <code>brnz</code> -&gt; <code>ifcmp</code> + <code>brif</code>, folding some pointer arithmetic into memory operations, rex prefix removal and some regalloc changes.</p>",
        "id": 219587035,
        "sender_full_name": "bjorn3",
        "timestamp": 1607682806
    },
    {
        "content": "<p>I noticed that on multiple occasions GVN resulted in worse regalloc as it merges multiple <code>stack_addr</code> instructions which need to be spilled. Still searching for a relevant change.</p>",
        "id": 219589685,
        "sender_full_name": "bjorn3",
        "timestamp": 1607684044
    },
    {
        "content": "<p>I found the optimization pass that causes the problem: <code>shrink_instructions</code>.</p>",
        "id": 219592030,
        "sender_full_name": "bjorn3",
        "timestamp": 1607685058
    },
    {
        "content": "<p>I was trying to diff a normalized disassembly of the correct and miscompiled binaries. I found the following:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-push %rdi</span>\n<span class=\"gi\">+(bad)</span>\n<span class=\"gi\">+stc</span>\n</code></pre></div>",
        "id": 219595564,
        "sender_full_name": "bjorn3",
        "timestamp": 1607687292
    },
    {
        "content": "<p>And a little bit later:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gd\">-dec %ebx</span>\n<span class=\"gi\">+callq *%rsi</span>\n</code></pre></div>",
        "id": 219595582,
        "sender_full_name": "bjorn3",
        "timestamp": 1607687313
    },
    {
        "content": "<p>Are you sure you're disassembling as if it was 64-bit, not 32-bit?  I ask because IIRC, <code>dec %ebx</code> in 32 bit code can be interpreted as a REX prefix in 64-bit code.</p>",
        "id": 219595668,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607687398
    },
    {
        "content": "<p>I use <code>objdump -d</code>.</p>",
        "id": 219595737,
        "sender_full_name": "bjorn3",
        "timestamp": 1607687426
    },
    {
        "content": "<p>Excerpt from <code>_ZN4core6option15Option$LT$T$GT$8and_then17hde19356b2b9e6feeE</code>:</p>\n<div class=\"codehilite\" data-code-language=\"GAS\"><pre><span></span><code>   <span class=\"err\">182</span><span class=\"nl\">c0:</span>       <span class=\"err\">44</span> <span class=\"err\">8</span><span class=\"nf\">b</span> <span class=\"no\">bc</span> <span class=\"mi\">24</span> <span class=\"mi\">3</span><span class=\"no\">c</span> <span class=\"mi\">00</span> <span class=\"mi\">00</span>    <span class=\"no\">mov</span>    <span class=\"mi\">0x3c</span><span class=\"p\">(</span><span class=\"nv\">%rsp</span><span class=\"p\">),</span><span class=\"nv\">%r15d</span>\n   <span class=\"err\">182</span><span class=\"nl\">c7:</span>       <span class=\"err\">00</span>\n   <span class=\"err\">182</span><span class=\"nl\">c8:</span>       <span class=\"err\">41</span> <span class=\"err\">0</span><span class=\"nf\">f</span> <span class=\"no\">b6</span> <span class=\"no\">c7</span>             <span class=\"no\">movzbl</span> <span class=\"nv\">%r15b</span><span class=\"p\">,</span><span class=\"nv\">%eax</span>\n   <span class=\"err\">182</span><span class=\"nl\">cc:</span>       <span class=\"err\">85</span> <span class=\"nf\">c0</span>                   <span class=\"no\">test</span>   <span class=\"nv\">%eax</span><span class=\"p\">,</span><span class=\"nv\">%eax</span>\n   <span class=\"err\">182</span><span class=\"nl\">ce:</span>       <span class=\"err\">74</span> <span class=\"nf\">ce</span>                   <span class=\"no\">je</span>     <span class=\"mh\">1829e</span> <span class=\"p\">&lt;</span><span class=\"no\">_ZN4core6option15Option$LT$T$GT$8and_then17hde19356b2b9e6feeE</span><span class=\"p\">+</span><span class=\"mi\">0xd8</span><span class=\"p\">&gt;</span>\n   <span class=\"err\">182</span><span class=\"nl\">d0:</span>       <span class=\"nf\">eb</span> <span class=\"no\">cc</span>                   <span class=\"no\">jmp</span>    <span class=\"mh\">1829e</span> <span class=\"p\">&lt;</span><span class=\"no\">_ZN4core6option15Option$LT$T$GT$8and_then17hde19356b2b9e6feeE</span><span class=\"p\">+</span><span class=\"mi\">0xd8</span><span class=\"p\">&gt;</span>\n   <span class=\"err\">182</span><span class=\"nl\">d2:</span>       <span class=\"err\">39</span> <span class=\"nf\">ff</span>                   <span class=\"no\">cmp</span>    <span class=\"nv\">%edi</span><span class=\"p\">,</span><span class=\"nv\">%edi</span>\n   <span class=\"err\">182</span><span class=\"nl\">d4:</span>       <span class=\"nf\">ff</span>                      <span class=\"p\">(</span><span class=\"no\">bad</span><span class=\"p\">)</span>\n   <span class=\"err\">182</span><span class=\"nl\">d5:</span>       <span class=\"nf\">ff</span> <span class=\"mi\">5</span><span class=\"no\">c</span> <span class=\"no\">ff</span> <span class=\"no\">ff</span>             <span class=\"no\">lcall</span>  <span class=\"p\">*-</span><span class=\"mi\">0x1</span><span class=\"p\">(</span><span class=\"nv\">%rdi</span><span class=\"p\">,</span><span class=\"nv\">%rdi</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n   <span class=\"err\">182</span><span class=\"nl\">d9:</span>       <span class=\"nf\">ff</span>                      <span class=\"no\">.byte</span> <span class=\"mi\">0xff</span>\n</code></pre></div>",
        "id": 219595795,
        "sender_full_name": "bjorn3",
        "timestamp": 1607687492
    },
    {
        "content": "<p>Err, that is just padding I think.</p>",
        "id": 219596068,
        "sender_full_name": "bjorn3",
        "timestamp": 1607687588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268444\">@Julian Seward</span> <code>xor    %dh,%dh</code> and <code>xor    %sil,%sil</code> zero different registers, right? (the x86 register overlapping is a bit confusing)</p>",
        "id": 219596956,
        "sender_full_name": "bjorn3",
        "timestamp": 1607688108
    },
    {
        "content": "<p>Well, those are different <em>both</em> because they reference different underlying regs (<code>rdx</code> vs <code>rsi</code>) and because they reference different bit indices (<code>15:8</code> vs <code>7:0</code>)</p>",
        "id": 219597142,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607688230
    },
    {
        "content": "<p>I <em>think</em> it's the case that if you add an 0x40 prefix to the first then you get the second.</p>",
        "id": 219597210,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607688251
    },
    {
        "content": "<p>That is to say .. this is one of those few places where a REX prefix of 0x40 isn't redundant.</p>",
        "id": 219597249,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607688281
    },
    {
        "content": "<p>Ok, thanks. It is <code>[RexOp1u_id_z#30,%rsi] v53 = iconst.i8 0</code> before shrinking and <code>[Op1u_id_z#30,%rsi] v53 = iconst.i8 0</code> after. Are there any other exceptions for this recipe where the rex prefix needs to be preserved?</p>",
        "id": 219597510,
        "sender_full_name": "bjorn3",
        "timestamp": 1607688477
    },
    {
        "content": "<p>Pass.  I know close to zero about the oldBE.</p>",
        "id": 219597637,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607688557
    },
    {
        "content": "<p>If anyone can tell you, it might be <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span>.</p>",
        "id": 219597752,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607688630
    },
    {
        "content": "<p>To phrase it differently. Are there any cases other cases where <code>xor</code> needs the <code>rex</code> prefix?</p>",
        "id": 219597757,
        "sender_full_name": "bjorn3",
        "timestamp": 1607688633
    },
    {
        "content": "<p>This isn't specifically about <code>xor</code>.  It relates to any basic integer insn that involves an 8-bit register.</p>",
        "id": 219598012,
        "sender_full_name": "Julian Seward",
        "timestamp": 1607688807
    },
    {
        "content": "<p>I guess I could try to not allow the rex-less version for all 8bit integer operations.</p>",
        "id": 219598273,
        "sender_full_name": "bjorn3",
        "timestamp": 1607688970
    },
    {
        "content": "<p>Opened <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2496\">https://github.com/bytecodealliance/wasmtime/pull/2496</a> with a fix.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2496\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2496\" title=\"Fix iconst.i8 0 miscompilation with opt_level=speed_and_size by bjorn3 · Pull Request #2496 · bytecodealliance/wasmtime\">Fix iconst.i8 0 miscompilation with opt_level=speed_and_size by bjorn3 · Pull Request #2496 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This fixes the cg_clif miscompilation I wrote about at https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/miscompilation.20with.20opt_level.3Dspeed_and_size/near/219461997...</div></div></div>",
        "id": 219626156,
        "sender_full_name": "bjorn3",
        "timestamp": 1607703684
    },
    {
        "content": "<p>Nice find -- thanks for debugging this!</p>",
        "id": 219633252,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1607706858
    }
]