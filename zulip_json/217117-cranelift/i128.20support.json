[
    {
        "content": "<p>I want to extend the <code>cprop.isle</code> rules to cover <code>i128</code>. But <code>iconst.i128</code> isn't supported. Is it not possible to have <code>i128</code> constants in CLIF?</p>",
        "id": 377431654,
        "sender_full_name": "kmeakin",
        "timestamp": 1689974857
    },
    {
        "content": "<p><code>iconst.i128</code> indeed doesn't exist right now. the way to create constants is to do two <code>iconst.i64</code>s and then <code>iconcat</code>, or if the high bits are just sign/zero bits, then <code>iconst.i64</code> followed by an extend</p>",
        "id": 377433888,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689975639
    },
    {
        "content": "<p>there was talk in some issue, I forget which and don't have it on hand at the moment, about creating a <code>const</code> ISLE helper to automatically do this if necessary, or else just use an <code>iconst</code> when possible</p>",
        "id": 377433958,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689975672
    },
    {
        "content": "<p>We had an issue a while back about emitting the <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\">various constants from a single helper</a> which would be really usefull to have, and would probably allow us to enable most of the integer optimizations again</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/38336af53a6724adb6f9109b730c59c781049784\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323234303231353836343663356562616633373563623463363537653638343136636364353465323935623735646632323362363566356239643037306233372f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36303338)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6038\" title=\"cranelift: ISLE wrapper for constructing constants 路 Issue #6038 路 bytecodealliance/wasmtime\">cranelift: ISLE wrapper for constructing constants 路 Issue #6038 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature In our mid-end optimization rules we sometimes need to construct new constants, where the constant's type comes from somewhere in the left-hand side pattern. We should add a helper term tha...</div></div></div>",
        "id": 377434003,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1689975687
    },
    {
        "content": "<p>yes, that one, thanks <span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span></p>",
        "id": 377434056,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689975705
    },
    {
        "content": "<p>To add the reasoning here for completeness: we don't have <code>iconst.i128</code> because <code>InstructionData</code> is currently 16 bytes (128 bits) total, and that has to include the enum discriminant and opcode as well as the payload. We could just create a new enum variant with an <code>i128</code> but the increased size would penalize compile time and memory usage by a measurable amount</p>",
        "id": 377434424,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689975849
    },
    {
        "content": "<p>There was talk last time this came up about creating a side-table; that's the route I'd suggest if anyone tackles this</p>",
        "id": 377434468,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689975873
    },
    {
        "content": "<p>or using the existing constant machinery for vconst</p>",
        "id": 377434493,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689975884
    },
    {
        "content": "<p>Hmm, I could try adding a side-table for <code>i128</code> constants, but I'm not sure where to start</p>",
        "id": 377682642,
        "sender_full_name": "kmeakin",
        "timestamp": 1690060950
    }
]