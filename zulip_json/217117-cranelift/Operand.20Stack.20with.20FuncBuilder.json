[
    {
        "content": "<p>How would you represent this operand stack in cranelift? (Has anybody wrote some JVM-Bytecode -&gt; Cranelift Code)?<br>\n<a href=\"https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.bipush\">https://docs.oracle.com/javase/specs/jvms/se7/html/jvms-6.html#jvms-6.5.bipush</a></p>",
        "id": 290695329,
        "sender_full_name": "Robin Lindner",
        "timestamp": 1658690149
    },
    {
        "content": "<p>If you are trying to emulate a stack machine you can try looking at <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/wasm\">how wasmtime translates wasm to cranelift</a>, which also emulates a stack machine.</p>\n<p>I think they just keep <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/state/func_state.rs#L218-L220\">track of the stack of values</a> at translation time. See <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/code_translator.rs#L923\">here</a> the code for <code>add</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/wasm\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/19e083458fd32a9a3ff2d5b0704173d9a2f7afd9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353037653063646363353239616331613431656137363630636137616335323766386264393765306562643136626562613366643934653431383134663163342f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/wasm\" title=\"wasmtime/cranelift/wasm at main · bytecodealliance/wasmtime\">wasmtime/cranelift/wasm at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/state/func_state.rs#L218-L220\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/19e083458fd32a9a3ff2d5b0704173d9a2f7afd9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353037653063646363353239616331613431656137363630636137616335323766386264393765306562643136626562613366643934653431383134663163342f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/state/func_state.rs#L218-L220\" title=\"wasmtime/func_state.rs at main · bytecodealliance/wasmtime\">wasmtime/func_state.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/code_translator.rs#L923\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/19e083458fd32a9a3ff2d5b0704173d9a2f7afd9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353037653063646363353239616331613431656137363630636137616335323766386264393765306562643136626562613366643934653431383134663163342f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/wasm/src/code_translator.rs#L923\" title=\"wasmtime/code_translator.rs at main · bytecodealliance/wasmtime\">wasmtime/code_translator.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A standalone runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 290695534,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1658690445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"410955\">@Afonso Bordado</span> Thank you. <br>\nNext question: How can I divide two values? FuncInstBuilder does not have idiv</p>",
        "id": 290696786,
        "sender_full_name": "Robin Lindner",
        "timestamp": 1658692297
    },
    {
        "content": "<p>same for and/or</p>",
        "id": 290696850,
        "sender_full_name": "Robin Lindner",
        "timestamp": 1658692369
    },
    {
        "content": "<p>We have two instructions for division <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.sdiv\"><code>sdiv</code></a> which divides two values as if they are signed integers and <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.udiv\"><code>udiv</code></a> which does the same but as if they are unsiged.</p>\n<p>For bools we prefix instructions with a <code>b</code>, so you'll find those instructions as <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.band\"><code>band</code></a> and <a href=\"https://docs.rs/cranelift-codegen/latest/cranelift_codegen/ir/trait.InstBuilder.html#method.bor\"><code>bor</code></a></p>",
        "id": 290698088,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1658694156
    }
]