[
    {
        "content": "<p><a href=\"https://github.com/Amanieu/regalloc3\">regalloc3</a> is a project that I've been working on for the past ~6 months which aims to write a new register allocator to succeed regalloc2. It is currently still a work in progress (notably, live range splitting is not implemented yet) but it is in a state where I would welcome reviews, comments and suggestions.</p>\n<p>From the README, here's a list of API-level changes compared to regalloc2:</p>\n<ul>\n<li>Support for 2^28 (~268M) values (\"vregs\" in regalloc2) per function.</li>\n<li>Support for up to 64 different register classes.</li>\n<li>Support for up to 512 registers.</li>\n<li>Support for compound registers and overlapping registers (e.g. <code>S0</code> / <code>S1</code> / <code>D0</code> on AArch32).</li>\n<li>Support for multi-register groups (e.g. <code>CASP</code> register pairs on AArch64, <code>LD4</code> SIMD vector loads on AArch64).</li>\n<li>Support for rematerialization of constants as an alternative to spilling.</li>\n<li>Support for explicit block frequencies.</li>\n<li>Register descriptions are described by a <code>RegInfo</code> trait.</li>\n<li>Functions and register descriptions can be serialized to a text format and parsed back into memory.</li>\n<li>Faster compilation of multiple functions by preserving and reusing memory allocations across runs.</li>\n<li>Validation functions to check <code>Function</code> and <code>RegInfo</code> implementations.</li>\n</ul>\n<p>It also has several algorithmic level improvements, such as better handling of fixed register constraints and reused registers, a new faster algorithm for computing live ranges and a faster linear scan allocator for spill slot allocation.</p>\n<p>I also have a <a href=\"https://github.com/Amanieu/regalloc2/tree/regalloc3\">branch</a> of regalloc2 which adapts the input function and then passes it on to regalloc3.</p>\n<p>I've used this to benchmark regalloc2 and regalloc3 using wasmtime. Some benchmark results when compiling <code>pulldown-cmark.wasm</code> from sightglass:</p>\n<p><a href=\"/user_uploads/15107/NbGBHE2TcWP1jSC4tUR4o3xO/ra3.png\">ra3.png</a><br>\n<a href=\"/user_uploads/15107/aSr9qKIz385XlFCquM4A1exV/ra2.png\">ra2.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/NbGBHE2TcWP1jSC4tUR4o3xO/ra3.png\" title=\"ra3.png\"><img data-original-dimensions=\"1721x841\" src=\"/user_uploads/thumbnail/15107/NbGBHE2TcWP1jSC4tUR4o3xO/ra3.png/840x560.webp\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/15107/aSr9qKIz385XlFCquM4A1exV/ra2.png\" title=\"ra2.png\"><img data-original-dimensions=\"1840x824\" src=\"/user_uploads/thumbnail/15107/aSr9qKIz385XlFCquM4A1exV/ra2.png/840x560.webp\"></a></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3\" style='background-image: url(\"https://uploads.zulipusercontent.net/8f3099e95f0fd7978d6e0e724beea90e0b6e7e14/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303637653062383064356231313463663864623566383831663665323534386637653833636638333331326134663235396162366430346339643166663635362f416d616e6965752f726567616c6c6f6333\")'></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3\" title=\"GitHub - Amanieu/regalloc3: New register allocator designed as a successor to regalloc2\">GitHub - Amanieu/regalloc3: New register allocator designed as a successor to regalloc2</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc2/tree/regalloc3\" style='background-image: url(\"https://uploads.zulipusercontent.net/d115a60fe3f66457c233ca6f95b488ec278eaaa8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613930313730626161373932643565326166376364343365323564336533636639333266306236643363643036666463633663333736333961643336623066352f416d616e6965752f726567616c6c6f6332\")'></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc2/tree/regalloc3\" title=\"GitHub - Amanieu/regalloc2 at regalloc3\">GitHub - Amanieu/regalloc2 at regalloc3</a></div><div class=\"message_embed_description\">A new register allocator. Contribute to Amanieu/regalloc2 development by creating an account on GitHub.</div></div></div>",
        "id": 454929061,
        "sender_full_name": "Amanieu",
        "timestamp": 1722281561
    },
    {
        "content": "<p>congrats on releasing! looks very cool!</p>\n<blockquote>\n<p>I've used this to benchmark regalloc2 and regalloc3 using wasmtime. Some benchmark results when compiling <code>pulldown-cmark.wasm</code> from sightglass:</p>\n</blockquote>\n<p>do you have the sightglass results as well? the screenshots of the profiler don't tell us the actual speed up/slow down observed for compilation time and execution time vs regalloc2</p>",
        "id": 454945274,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1722286081
    },
    {
        "content": "<p>The total samples gives you an idea of how much time is spent in register allocation. The numbers are relatively stable across runs.</p>",
        "id": 454946733,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286453
    },
    {
        "content": "<p>Hyperfine results:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Summary</span>\n<span class=\"w\">  </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">ra3</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\">  </span><span class=\"o\">../</span><span class=\"n\">sightglass</span><span class=\"o\">/</span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">ran</span>\n<span class=\"w\">    </span><span class=\"mf\">1.03</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">0.03</span><span class=\"w\"> </span><span class=\"n\">times</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">base</span><span class=\"w\"> </span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">parallel</span><span class=\"o\">-</span><span class=\"n\">compilation</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"w\">  </span><span class=\"o\">../</span><span class=\"n\">sightglass</span><span class=\"o\">/</span><span class=\"n\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>",
        "id": 454947108,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286550
    },
    {
        "content": "<p>3% is nothing to sneeze at, nice!</p>",
        "id": 454947349,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1722286611
    },
    {
        "content": "<p>do you have measurements of runtime (quality of generated code) by any chance?</p>",
        "id": 454947402,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1722286622
    },
    {
        "content": "<p>The increase isn't much because regalloc is only 30% of the total runtime.</p>",
        "id": 454947925,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286729
    },
    {
        "content": "<p>The detailed profiles give a better idea of the relative performance of just the allocators.</p>",
        "id": 454948034,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286757
    },
    {
        "content": "<p>Sightglass is giving me strange results though, claiming that regalloc2 is ~20% faster.</p>",
        "id": 454948336,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286825
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">102683574.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">19686025.05</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.16</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.23</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">506461200</span><span class=\"w\"> </span><span class=\"mf\">524084844.50</span><span class=\"w\"> </span><span class=\"mi\">556646895</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">609491400</span><span class=\"w\"> </span><span class=\"mf\">626768418.50</span><span class=\"w\"> </span><span class=\"mi\">666477735</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>",
        "id": 454948393,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286833
    },
    {
        "content": "<p>Execution time isn't great now, but I think that's mostly because I haven't implemented splitting yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">1957518.50</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">254885.40</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.21</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.28</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">7821135</span><span class=\"w\"> </span><span class=\"mf\">7976304.00</span><span class=\"w\"> </span><span class=\"mi\">8446655</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">9711310</span><span class=\"w\"> </span><span class=\"mf\">9933822.50</span><span class=\"w\"> </span><span class=\"mi\">10376345</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>",
        "id": 454948938,
        "sender_full_name": "Amanieu",
        "timestamp": 1722286947
    },
    {
        "content": "<p>can it handle stuff like where there's 128 integer registers and it needs to allocate register ranges starting at any register of size 12, 64, 37, and 3? or does it still rely on O(n^2) listing all possible allocations ahead of time (huge for arbitrary-sized ranges allocated out of 128 registers, 8128 possible afaict)?</p>",
        "id": 454992892,
        "sender_full_name": "Jacob Lifshay",
        "timestamp": 1722304449
    },
    {
        "content": "<p>Your second to last point is interesting as that is something I just implemented for regalloc and saved quite a bit of time(5%) for larger binaries by minimizing heap allocations.</p>",
        "id": 454992899,
        "sender_full_name": "Leaves",
        "timestamp": 1722304453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"315881\">@Jacob Lifshay</span> Yes! Well, almost. At the moment I have a limit of 8 registers per reg group, but that can easily just be bumped up. You can see an example for RISC-V vectors <a href=\"https://github.com/Amanieu/regalloc3/blob/main/example_reginfo/riscv.reginfo\">here</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Amanieu/regalloc3/blob/main/example_reginfo/riscv.reginfo\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5fbf54098ec6a3716d49232a9892ce1ed3ec0f2c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313363613431303331333230323534653738326333643962313364383733626464326530306333363663636233343539623831646335386230613632313364632f416d616e6965752f726567616c6c6f6333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Amanieu/regalloc3/blob/main/example_reginfo/riscv.reginfo\" title=\"regalloc3/example_reginfo/riscv.reginfo at main · Amanieu/regalloc3\">regalloc3/example_reginfo/riscv.reginfo at main · Amanieu/regalloc3</a></div><div class=\"message_embed_description\">New register allocator designed as a successor to regalloc2 - Amanieu/regalloc3</div></div></div>",
        "id": 455043655,
        "sender_full_name": "Amanieu",
        "timestamp": 1722322545
    },
    {
        "content": "<p>You do need to list out all the allocatable combinations, but only once in the register definition which never changes.</p>",
        "id": 455044915,
        "sender_full_name": "Amanieu",
        "timestamp": 1722322837
    },
    {
        "content": "<p>The way register groups work is approximately based on <a href=\"https://llvm.org/devmtg/2016-11/Slides/Braun-DealingWithRegisterHierarchies.pdf\">https://llvm.org/devmtg/2016-11/Slides/Braun-DealingWithRegisterHierarchies.pdf</a></p>",
        "id": 455050729,
        "sender_full_name": "Amanieu",
        "timestamp": 1722324287
    },
    {
        "content": "<p>Wagwan, looks very neat looking forward to use this when it is ready to replace regalloc2 fully</p>",
        "id": 455170901,
        "sender_full_name": "African Hungarian",
        "timestamp": 1722358851
    },
    {
        "content": "<p>Does crane lift produce a pruned ssa? I don’t think so…</p>",
        "id": 455294046,
        "sender_full_name": "Leaves",
        "timestamp": 1722407117
    },
    {
        "content": "<p>So it isn’t trying to remove all truly useless phis</p>",
        "id": 455294067,
        "sender_full_name": "Leaves",
        "timestamp": 1722407126
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 455294945,
        "sender_full_name": "Leaves",
        "timestamp": 1722407463
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 455294993,
        "sender_full_name": "Leaves",
        "timestamp": 1722407498
    },
    {
        "content": "<p>Sorry wrong channel</p>",
        "id": 455295852,
        "sender_full_name": "Leaves",
        "timestamp": 1722407965
    },
    {
        "content": "<p>If you are quick enough you can move messages between topics inside a channel using the move messages option.</p>",
        "id": 455357960,
        "sender_full_name": "bjorn3",
        "timestamp": 1722426598
    },
    {
        "content": "<p>This is very exciting. Once the code base has stabilized I would love to see a design overview like the one for regalloc2.</p>\n<p>One thing I am especially interested in is the handling of spills for Arm (Aarch32/64). Spilling requires additional registers to load the spilled value into and materialize the stack offset. How does regalloc3 deal with this? Are these registers modelled by the allocator or are certain registers set aside for this purpose?</p>",
        "id": 455407030,
        "sender_full_name": "rm",
        "timestamp": 1722440053
    },
    {
        "content": "<p>Not currently, but I have some design notes on how to handle that. It does handle the scratch register for stack-to-stack moves though (like regalloc2 does)</p>",
        "id": 455408662,
        "sender_full_name": "Amanieu",
        "timestamp": 1722440366
    },
    {
        "content": "<p>It's a bit tricky since, if you need to spill to free up a register, you need to ensure that the slot you spill to doesn't need a scratch register to calculate the spillslot address.</p>",
        "id": 455412718,
        "sender_full_name": "Amanieu",
        "timestamp": 1722441089
    },
    {
        "content": "<p>New benchmarks, including a move optimizer post-processing pass that I haven't pushed yet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">9800371.00</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">3117907.67</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.12</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">103712420</span><span class=\"w\"> </span><span class=\"mf\">116994400.95</span><span class=\"w\"> </span><span class=\"mi\">143270540</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">93272620</span><span class=\"w\"> </span><span class=\"mf\">107194029.95</span><span class=\"w\"> </span><span class=\"mi\">133119665</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">400260.70</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">121688.71</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.03</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">9414475</span><span class=\"w\"> </span><span class=\"mf\">9589995.80</span><span class=\"w\"> </span><span class=\"mi\">10502695</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">8977885</span><span class=\"w\"> </span><span class=\"mf\">9189735.10</span><span class=\"w\"> </span><span class=\"mi\">13234935</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>",
        "id": 459910344,
        "sender_full_name": "Amanieu",
        "timestamp": 1723393850
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">21871418.80</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">3220053.20</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.22</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.29</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">97671420</span><span class=\"w\"> </span><span class=\"mf\">108323316.50</span><span class=\"w\"> </span><span class=\"mi\">143930605</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">75466125</span><span class=\"w\"> </span><span class=\"mf\">86451897.70</span><span class=\"w\"> </span><span class=\"mi\">113070615</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">2363113.90</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">590882.98</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.03</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">117038180</span><span class=\"w\"> </span><span class=\"mf\">118659545.20</span><span class=\"w\"> </span><span class=\"mi\">133033110</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">115063375</span><span class=\"w\"> </span><span class=\"mf\">116296431.30</span><span class=\"w\"> </span><span class=\"mi\">122370570</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>",
        "id": 459910383,
        "sender_full_name": "Amanieu",
        "timestamp": 1723393877
    },
    {
        "content": "<p>I disabled the shuffling allocator in wasmtime-bench-api (for both <code>ra3.so</code> and <code>baseline.so</code>) because it was distorting the results: the shuffling allocator is <em>extremely</em> slow.</p>",
        "id": 459910557,
        "sender_full_name": "Amanieu",
        "timestamp": 1723393942
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">compilation</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">104370202.30</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">27034267.63</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.11</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1248169230</span><span class=\"w\"> </span><span class=\"mf\">1331614134.20</span><span class=\"w\"> </span><span class=\"mi\">1492533140</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1172304280</span><span class=\"w\"> </span><span class=\"mf\">1227243931.90</span><span class=\"w\"> </span><span class=\"mi\">1351484785</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">27698273.40</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">5688050.16</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.02</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.03</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1152335590</span><span class=\"w\"> </span><span class=\"mf\">1165996450.50</span><span class=\"w\"> </span><span class=\"mi\">1191607235</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">baseline</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1181614875</span><span class=\"w\"> </span><span class=\"mf\">1193694723.90</span><span class=\"w\"> </span><span class=\"mi\">1232190190</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ra3</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>",
        "id": 459910738,
        "sender_full_name": "Amanieu",
        "timestamp": 1723394095
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> Have you implemented live range splitting?</p>",
        "id": 462226348,
        "sender_full_name": "Leaves",
        "timestamp": 1723590881
    },
    {
        "content": "<p>Additionally, those benchmarks, are they of the allocator itself running, or the emitted code?</p>",
        "id": 462226541,
        "sender_full_name": "Leaves",
        "timestamp": 1723590942
    },
    {
        "content": "<p>Live range splitting is not implemented yet, I'm currently studying the existing heuristics used in different allocators.</p>",
        "id": 462227109,
        "sender_full_name": "Amanieu",
        "timestamp": 1723591084
    },
    {
        "content": "<p>The benchmarks show both <code>execution</code> and <code>compilation</code>.</p>",
        "id": 462227124,
        "sender_full_name": "Amanieu",
        "timestamp": 1723591095
    },
    {
        "content": "<p>Oh wow, nice! Seems like there's still some performance to squeeze out AND you're already meeting the baseline!</p>",
        "id": 462228814,
        "sender_full_name": "Leaves",
        "timestamp": 1723591948
    },
    {
        "content": "<p>Also ~15% of the allocator time is spent converting from the regalloc2 format to the regalloc3 format.</p>",
        "id": 462231221,
        "sender_full_name": "Amanieu",
        "timestamp": 1723593478
    },
    {
        "content": "<p>Hmmm even more enticing. I will watch your progress with great interest.</p>",
        "id": 462241738,
        "sender_full_name": "Leaves",
        "timestamp": 1723600364
    },
    {
        "content": "<p>Any idea why I might be failing the .expect(\"missing allocation\"); in move_resolver.rs:760 when using the regalloc2 translation layer?</p>",
        "id": 462418572,
        "sender_full_name": "Leaves",
        "timestamp": 1723670216
    },
    {
        "content": "<p>Is this with cranelift?</p>",
        "id": 462418747,
        "sender_full_name": "Amanieu",
        "timestamp": 1723670317
    },
    {
        "content": "<p>It is not.</p>",
        "id": 462418839,
        "sender_full_name": "Leaves",
        "timestamp": 1723670377
    },
    {
        "content": "<p>Hmm possibly you are passing invalid input to the register allocator.</p>",
        "id": 462418937,
        "sender_full_name": "Amanieu",
        "timestamp": 1723670441
    },
    {
        "content": "<p>It does complete fine with normal regalloc2.</p>",
        "id": 462419015,
        "sender_full_name": "Leaves",
        "timestamp": 1723670486
    },
    {
        "content": "<p>Is this with a debug build? There is a <code>cfg!(debug_assertions)</code> that validates the input.</p>",
        "id": 462419054,
        "sender_full_name": "Amanieu",
        "timestamp": 1723670512
    },
    {
        "content": "<p>It is release</p>",
        "id": 462419100,
        "sender_full_name": "Leaves",
        "timestamp": 1723670524
    },
    {
        "content": "<p>I'll try debug.</p>",
        "id": 462419111,
        "sender_full_name": "Leaves",
        "timestamp": 1723670534
    },
    {
        "content": "<p>Interesting, it is claiming there are predecessors to the entry block, however I also have an assertion of my own prior to register allocation that makes sure there are not. I will investigate further and let you know what I find.</p>",
        "id": 462419658,
        "sender_full_name": "Leaves",
        "timestamp": 1723670844
    },
    {
        "content": "<p>Ah I see...</p>",
        "id": 462419764,
        "sender_full_name": "Leaves",
        "timestamp": 1723670890
    },
    {
        "content": "<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/aO0wvAI.png\"><img src=\"https://uploads.zulipusercontent.net/a18258c9f81e2bf37643fb68fb58f42aaab69f9a/68747470733a2f2f692e696d6775722e636f6d2f614f30777641492e706e67\"></a></div>",
        "id": 462419768,
        "sender_full_name": "Leaves",
        "timestamp": 1723670892
    },
    {
        "content": "<p>It seems this may be incorrect here? I'll look more.</p>",
        "id": 462419821,
        "sender_full_name": "Leaves",
        "timestamp": 1723670934
    },
    {
        "content": "<p>My cfg is NOT in a RPO so the entry block is NOT block zero.</p>",
        "id": 462419853,
        "sender_full_name": "Leaves",
        "timestamp": 1723670957
    },
    {
        "content": "<p>Ah that might be it. regalloc3 assumes the entry block is block 0.</p>",
        "id": 462419872,
        "sender_full_name": "Amanieu",
        "timestamp": 1723670977
    },
    {
        "content": "<p>Does the translation layer do anything current to rewrite this?</p>",
        "id": 462419903,
        "sender_full_name": "Leaves",
        "timestamp": 1723670993
    },
    {
        "content": "<p>No, it doesn't change the block ordering.</p>",
        "id": 462419961,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671004
    },
    {
        "content": "<p>I suppose it could...</p>",
        "id": 462419983,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671014
    },
    {
        "content": "<p>For now, I'll compute an RPO and feed that in, been meaning to do this for a while anyway.</p>",
        "id": 462420014,
        "sender_full_name": "Leaves",
        "timestamp": 1723671034
    },
    {
        "content": "<p>regalloc3 requires that if block A dominates block B, A must come before B in the block order. Since the entry block dominates everything, it must be the first block.</p>",
        "id": 462420096,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671087
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 462420188,
        "sender_full_name": "Leaves",
        "timestamp": 1723671128
    },
    {
        "content": "<p>Additionally, I'm a bit curious about the omission of <code>branch_blockparams</code> in the <code>Function</code> trait.</p>\n<p>I see the jump params method but why none for conditional branches? Are separate destinations not allowed to have separate parameter lists?</p>",
        "id": 462420276,
        "sender_full_name": "Leaves",
        "timestamp": 1723671192
    },
    {
        "content": "<p>Block parameters are only allowed on blocks with multiple predecessors.</p>",
        "id": 462420391,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671250
    },
    {
        "content": "<p>This makes sense if you think about it: if there is only a single predecessor then you can just use the value from the predecessor directly instead of creating a separate value that is just a copy.</p>",
        "id": 462420445,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671288
    },
    {
        "content": "<p>I agree with that, having trouble wrapping my mind around the implementation. </p>\n<p>If I originally had this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">branch_blockparams</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">block</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Block</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_insn</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Inst</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">succ_idx</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"n\">VReg</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">blocks</span><span class=\"p\">[</span><span class=\"n\">block</span><span class=\"p\">.</span><span class=\"n\">index</span><span class=\"p\">()].</span><span class=\"n\">successor_params</span><span class=\"p\">[</span><span class=\"n\">succ_idx</span><span class=\"p\">]</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>implementation for regalloc2, where is the equivalent or similar requirement in regalloc3?</p>",
        "id": 462420670,
        "sender_full_name": "Leaves",
        "timestamp": 1723671400
    },
    {
        "content": "<p>It's called <code>jump_blockparams</code></p>",
        "id": 462420693,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671421
    },
    {
        "content": "<p>I make a distinction between <code>jump</code> terminators (which can have blockparams but no operands) and <code>branch</code> terminators (which can have operands but no blockparams).</p>",
        "id": 462420763,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671469
    },
    {
        "content": "<p>I see that, but there it is not specified which successor is the target, as is done above with <code>succ_index</code>.</p>",
        "id": 462420826,
        "sender_full_name": "Leaves",
        "timestamp": 1723671495
    },
    {
        "content": "<p>Because there can only be 1 successor if the successor has multiple predecessors.</p>",
        "id": 462421183,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671717
    },
    {
        "content": "<p>Due to the critical edge rule.</p>",
        "id": 462421232,
        "sender_full_name": "Amanieu",
        "timestamp": 1723671723
    },
    {
        "content": "<p>Ah... yes that is true!</p>",
        "id": 462422130,
        "sender_full_name": "Leaves",
        "timestamp": 1723672272
    },
    {
        "content": "<p>Is there a reason terminating instructions cannot have clobbers? I have a call to a non returning function(fastfails on windows) which is the \"terminating instruction\" and ra3 isn't happy about that. I can just put a UD2 or INT3 after it to quiet it down but still what is the rationale behind that requirement?</p>",
        "id": 462429795,
        "sender_full_name": "Leaves",
        "timestamp": 1723676721
    },
    {
        "content": "<p>Specifically this: <code>Terminator with no successors cannot have clobbers</code></p>",
        "id": 462430001,
        "sender_full_name": "Leaves",
        "timestamp": 1723676852
    },
    {
        "content": "<p>Also I love your error printing, very nice!</p>",
        "id": 462430012,
        "sender_full_name": "Leaves",
        "timestamp": 1723676858
    },
    {
        "content": "<p>Because clobbers have no effect in that context: there's nothing after the instruction.</p>",
        "id": 462430212,
        "sender_full_name": "Amanieu",
        "timestamp": 1723676957
    },
    {
        "content": "<p>But it doesn't strictly cause a problem does it?</p>",
        "id": 462430301,
        "sender_full_name": "Leaves",
        "timestamp": 1723676985
    },
    {
        "content": "<p>Well I did want to take advantage of this for some optimizations, but never got around to it.</p>",
        "id": 462430414,
        "sender_full_name": "Amanieu",
        "timestamp": 1723677032
    },
    {
        "content": "<p>It's still on my TODO list.</p>",
        "id": 462430488,
        "sender_full_name": "Amanieu",
        "timestamp": 1723677054
    },
    {
        "content": "<p>Putting a UD2/nop or something will solve it for me so not really a big problem anyway to impose that requirement.</p>",
        "id": 462430494,
        "sender_full_name": "Leaves",
        "timestamp": 1723677058
    },
    {
        "content": "<p>No, the solution is to remove the clobbers since they have no effect.</p>",
        "id": 462430514,
        "sender_full_name": "Amanieu",
        "timestamp": 1723677071
    },
    {
        "content": "<p>But that would require making the call aware that it is \"special\" and doesn't return.</p>",
        "id": 462430573,
        "sender_full_name": "Leaves",
        "timestamp": 1723677118
    },
    {
        "content": "<p>You could always add a check in <code>inst_clobbers</code> to see if this is the last instruction in the block or something.</p>",
        "id": 462430648,
        "sender_full_name": "Amanieu",
        "timestamp": 1723677156
    },
    {
        "content": "<p>I suppose I could also relax the check, but I'm not super comfortable about it.</p>",
        "id": 462430670,
        "sender_full_name": "Amanieu",
        "timestamp": 1723677171
    },
    {
        "content": "<p>Somewhat interesting, there seem to be some unnecessary moves taking place back into spill slots and registers even though they are not used after the move. Here is an example:<br>\n<a href=\"https://i.imgur.com/ecAa5Cp.png\">https://i.imgur.com/ecAa5Cp.png</a><br>\nThe superfluous move of the value in RAX into a stack slot(at 2C0h) which is never again touched(this block is the last in the function) is seen above^</p>\n<div class=\"message_inline_image\"><a href=\"https://i.imgur.com/ecAa5Cp.png\"><img src=\"https://uploads.zulipusercontent.net/c4a66518d4ac6879da8dae6ad32b2a9740fe2427/68747470733a2f2f692e696d6775722e636f6d2f656341613543702e706e67\"></a></div>",
        "id": 462690374,
        "sender_full_name": "Leaves",
        "timestamp": 1723779918
    },
    {
        "content": "<p>That's from the lack of splitting. We are immediately spilling right after the definition of a value.</p>",
        "id": 462731203,
        "sender_full_name": "Amanieu",
        "timestamp": 1723793379
    },
    {
        "content": "<p>However move optimization is able to optimize the reload away but not the spill.</p>",
        "id": 462731430,
        "sender_full_name": "Amanieu",
        "timestamp": 1723793475
    },
    {
        "content": "<p>I should also point out the output there, and I cannot figure it out why exactly(because that single function basic block is quite large) is not semantically equivalent to the regalloc2 output and causes the binary to exit because a conditional branch is taken in a later function that shouldn't be.</p>\n<p>Again though, this is an extreme example, I was compiling chrome.dll on Windows, and this is a very very large function. I'm not going to do much more with it now as I have other things that need tending to, but I can send you the output for regalloc2 and regalloc3 in DMs if you wish to see it yourself, as well as my machine instruction representation that is fed into regalloc.</p>",
        "id": 462818298,
        "sender_full_name": "Leaves",
        "timestamp": 1723824892
    },
    {
        "content": "<p>With <code>debug_assertions</code> enabled it also validates that the result of register allocation is correct.</p>",
        "id": 462827611,
        "sender_full_name": "Amanieu",
        "timestamp": 1723828305
    },
    {
        "content": "<p>You can try a release build with debug assertions enabled if debug builds are too slow.</p>",
        "id": 462827633,
        "sender_full_name": "Amanieu",
        "timestamp": 1723828318
    },
    {
        "content": "<p>Alternatively if you've already narrowed it down to a single function, you can edit the regalloc2 adapter to dump the text representation of the input function in  a way that can be later used with regalloc3-tool:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">log</span><span class=\"p\">::</span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s\">\"Reginfo:</span><span class=\"se\">\\n</span><span class=\"s\">{}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">regalloc3</span><span class=\"p\">::</span><span class=\"n\">debug_utils</span><span class=\"p\">::</span><span class=\"n\">DisplayRegInfo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">reginfo</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"n\">log</span><span class=\"p\">::</span><span class=\"n\">info</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s\">\"Input function:</span><span class=\"se\">\\n</span><span class=\"s\">{}\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">regalloc3</span><span class=\"p\">::</span><span class=\"n\">debug_utils</span><span class=\"p\">::</span><span class=\"n\">DisplayFunction</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">adapter</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">);</span>\n</code></pre></div>",
        "id": 462828068,
        "sender_full_name": "Amanieu",
        "timestamp": 1723828513
    },
    {
        "content": "<p>This is one cool of a project! Is there a todo.txt anywhere? Would love to help</p>",
        "id": 466573949,
        "sender_full_name": "ghostway",
        "timestamp": 1725120634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"598026\">@ghostway</span> I do have an internal todo.txt locally, but it's not really suitable for public consumption. I'm taking a break at the moment to work on other things, but I will get back to regalloc3 soon.</p>",
        "id": 466770017,
        "sender_full_name": "Amanieu",
        "timestamp": 1725230021
    },
    {
        "content": "<p>Hello! While we are not working on RegAlloc me and <span class=\"user-mention\" data-user-id=\"709820\">@Dimitris Aspetakis</span> are working on Instruction Scheduling inside Cranelift.</p>\n<p>We have implemented some heuristics without so much benefit, only on some benchmarks of the XNNPACK. Currently we are implementing another heuristic but we get different results in different machines.</p>\n<p>We are thinking that this is probably cause of the Reg Allocation.<br>\nCan we somehow count the number of spills?</p>",
        "id": 467985501,
        "sender_full_name": "Panagiotis Karouzakis",
        "timestamp": 1725570892
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"709823\">@Panagiotis Karouzakis</span> a very simple (slightly hacky) way to do this is to do a <code>wasmtime compile</code>, then <code>objdump</code> the resulting <code>.cwasm</code> file, and grep with a regular expression that matches loads/stores relative to the stack pointer</p>",
        "id": 467986562,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1725571363
    },
    {
        "content": "<p>something like <code>mov.*(%rsp).*</code> on x86-64, or <code>ldr.*sp.*</code> + <code>str.*sp.*</code> on aarch64</p>",
        "id": 467986680,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1725571401
    },
    {
        "content": "<p>then count lines in the disassembly that match</p>",
        "id": 467986726,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1725571414
    }
]