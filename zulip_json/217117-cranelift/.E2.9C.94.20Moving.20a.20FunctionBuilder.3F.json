[
    {
        "content": "<p>Hi! I am trying to implement a custom compiler based on Cranelift for a custom language, which will support both AOT and JIT modes, and I was wondering if I could get some help. Here's some of the code that's giving me some trouble:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! src/codegen/backend/unify.rs</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">BackendInternal</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new_builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">BackendInternal</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">AotGenerator</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new_builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">internal_new_builder</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">BackendInternal</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">JitGenerator</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new_builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Rc</span><span class=\"o\">&lt;</span><span class=\"n\">RefCell</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">internal_new_builder</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">//! src/codegen/aot.rs</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">AotGenerator</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"p\">(</span><span class=\"k\">crate</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">internal_new_builder</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder_ctx</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RefCell</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Rc</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Here's the full code: <a href=\"https://github.com/RedstoneWizard08/QuickScript\">https://github.com/RedstoneWizard08/QuickScript</a></p>\n<p>The issue is that in the <code>internal_new_builder</code> function, constructing the <code>RefCell</code> throws the error <code>\"lifetime may not live long enough\"</code>. Is there a better way to do this? Please help me. Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/RedstoneWizard08/QuickScript\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/707bf858793a751c6f4882ed622de9fb729e843a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326165346666353034316633623764626166313235613438643130363065333132303934323338636164386637376363383333316366346566343365383637612f52656473746f6e6557697a61726430382f517569636b536372697074)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/RedstoneWizard08/QuickScript\" title=\"GitHub - RedstoneWizard08/QuickScript: A quick programming language with a compiler implemented in Rust. I'm learning about things with this.\">GitHub - RedstoneWizard08/QuickScript: A quick programming language with a compiler implemented in Rust. I'm learning about things with this.</a></div><div class=\"message_embed_description\">A quick programming language with a compiler implemented in Rust. I'm learning about things with this. - RedstoneWizard08/QuickScript</div></div></div>",
        "id": 421790815,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708060211
    },
    {
        "content": "<p>I would like to note that I have tried many different methods, including using <code>&amp;mut</code> references, no <code>Rc</code>s, and even without the <code>RefCell</code>s entirely, and even using <code>Arc</code>. Nothing seems to work.</p>",
        "id": 421790911,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708060274
    },
    {
        "content": "<p>This is more of a Rust-memory-idioms issue than a Cranelift issue specifically, but the main question I have is: what is the intended lifetime relationship?</p>\n<p><code>FunctionBuilder</code> has a lifetime <code>'a</code> that denotes the underlying <code>Function</code>'s lifetime; it holds a borrow of this function body, and doesn't own it. That means there has to be some scope on the stack somewhere that owns a <code>Function</code> (or owns something that owns it, transitively) and the <code>FunctionBuilder</code> must have a lifetime within that.</p>\n<p>The issue here is that <code>AotGenerator</code> is trying to own the <code>Function</code> (inside a <code>FunctionBuilderContext</code>) and the thing that borrows it. That pattern is called a \"self-referential struct\" and <em>is</em> possible in Rust, but not without tricks (there are crates for this that use unsafe code internally).</p>\n<p>I'd recommend unwinding the design a bit, avoiding use of <code>Rc</code>/<code>RefCell</code> (these usually indicate that one is trying to work around lifetimes and make them all dynamic, which doesn't mix well with APIs, like Cranelift's, that use explicit lifetimes and borrows). In general, patterns from GC'd languages like Java/Python/..., or from languages with free-and-dangerous pointers like C/C++, are often a little hard to adopt because they don't fit the strict lifetime nesting regime of safe Rust. A simple workaround would be for you to create the <code>FunctionBuilder</code> in a scope that starts code generation and then pass it as a borrow through params wherever you need it. As a side-benefit, this tends to push toward more functional-style code: it avoids the use of implicit passing through struct members (which at least in my experience, makes more of the plumbing explicit and less error-prone).</p>",
        "id": 421791870,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708060849
    },
    {
        "content": "<p>Okay, I have tried to do this in the past (coming from a Java background as my first language xD), but unfortunately the structure of my code throughout leans towards using structs and traits, and I don't even want the lifetimes. Unfortunately, not being able to \".clone() and ignore\" doesn't work here as the shared state is important, and I don't know what to do.</p>",
        "id": 421792288,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708061119
    },
    {
        "content": "<p>One of the main issues I'm facing is that the way I have organized this to reduce code duplication and allow for expandability in the future is that I use different functions in trait impls to do everything, and they rely on this <code>.builder()</code> method of <code>BackendInternal</code> to use the <code>FunctionBuilder</code> context.</p>",
        "id": 421792419,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708061196
    },
    {
        "content": "<p>I'd also like to mention that I am trying to avoid passing the <code>FunctionBuilder</code> object between the different impls as much as possible. I like having it kept in one place and being accessed as needed.</p>",
        "id": 421792749,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708061387
    },
    {
        "content": "<p>OK, it's hard to say much more without seeing your whole codebase; but again I'd recommend reconsidering the overall object-ownership design. I've found that Rust pushes me strongly away from certain designs, but often when something meets unexpected resistance, it's because there is some hidden tension -- here for example, you have a backend-thing that owns the function, but a function-builder that <em>also</em> owns the function, simultaneously, and that can result all sorts of unexpected bugs where state changes under your feet. (Rust strongly discourages \"shared ownership\" where there are multiple mutable paths to one thing.) So my only real recommendation (or at least the most honest one!) to an issue of \"I prefer designing my software differently\" is \"learn the idiomatic Rust way first\". I know it sounds cliche, sorry; but there's no magic trick to reveal here to solve the problem more easily</p>",
        "id": 421793382,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708061742
    },
    {
        "content": "<p>The whole codebase is here, I'm typing another response right now so I'm gonna get this out quickly first: <a href=\"https://github.com/RedstoneWizard08/QuickScript\">https://github.com/RedstoneWizard08/QuickScript</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/RedstoneWizard08/QuickScript\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/707bf858793a751c6f4882ed622de9fb729e843a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326165346666353034316633623764626166313235613438643130363065333132303934323338636164386637376363383333316366346566343365383637612f52656473746f6e6557697a61726430382f517569636b536372697074)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/RedstoneWizard08/QuickScript\" title=\"GitHub - RedstoneWizard08/QuickScript: A quick programming language with a compiler implemented in Rust. I'm learning about things with this.\">GitHub - RedstoneWizard08/QuickScript: A quick programming language with a compiler implemented in Rust. I'm learning about things with this.</a></div><div class=\"message_embed_description\">A quick programming language with a compiler implemented in Rust. I'm learning about things with this. - RedstoneWizard08/QuickScript</div></div></div>",
        "id": 421793547,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708061821
    },
    {
        "content": "<p>I do know that the object-ownership design is probably a bad move. I just don't know how else to do this in a clean way. I can try to move it into a more function-based system, but to me I think that's less intuitive as I am trying to both build an API that others may be able to use or base code off of, and an API that I can come back to in a few years and quickly figure out what's going on. I guess that maybe I'm just not used to functional programming yet.</p>",
        "id": 421793733,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708061911
    },
    {
        "content": "<p>that's no problem, I just meant it as sort of a reference point if it helped to clarify; the important bit is the \"explicit plumbing\", i.e., passing the borrows around</p>",
        "id": 421793843,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708061981
    },
    {
        "content": "<p>One pattern I have found to help is to gather up a \"context struct\" of arguments that exist (as borrows or owned) during some phase; for example, while compiling a single function</p>",
        "id": 421793919,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708062007
    },
    {
        "content": "<p>So you have some toplevel <code>generate_function</code> that creates the <code>Function</code>, and then you create your <code>JitContext</code> that has a <code>FunctionBuilder</code> inside of it, and the <code>JitContext</code> is passed down the stack</p>",
        "id": 421793976,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708062043
    },
    {
        "content": "<p>the thing that this does that storing an <code>Option&lt;...&gt;</code> borrow in a field on your <code>self</code> struct does not is that it makes the lifetimes explicitly nested: Rust can more easily reason about parameters because, if a borrow is passed into a function, unless explicitly annotated it lasts only for that function</p>",
        "id": 421794039,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708062084
    },
    {
        "content": "<p>Interesting. I think that might be the way to go. I am loosely basing this on the Cranelift JIT example, and that is how they did it, I just didn't think it was as organized.</p>",
        "id": 421794057,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708062094
    },
    {
        "content": "<p>whereas a field on <code>self</code> lasts as long as <code>self</code>, so it's harder to prove to the type system that the borrow goes away before the borrowed thing does</p>",
        "id": 421794067,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708062106
    },
    {
        "content": "<p>(that's the heart of the \"self-referential struct\" problem)</p>",
        "id": 421794083,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708062114
    },
    {
        "content": "<p>Okay, I think I'll give that a shot then.</p>",
        "id": 421794091,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708062121
    },
    {
        "content": "<p>cool, best of luck! and do feel free to ask more here if still stuck :-)</p>",
        "id": 421794162,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708062149
    },
    {
        "content": "<p>Okay! Thanks though!</p>",
        "id": 421794176,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708062157
    },
    {
        "content": "<p>BTW, just to clarify, you meant something like this, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">collections</span>::<span class=\"n\">HashMap</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_frontend</span>::<span class=\"p\">{</span><span class=\"n\">FunctionBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">cranelift_module</span>::<span class=\"n\">DataId</span><span class=\"p\">;</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">CodegenContext</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">locals</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">DataId</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">vars</span>: <span class=\"nc\">HashMap</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Variable</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">builder</span>: <span class=\"nc\">FunctionBuilder</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 421794354,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708062251
    },
    {
        "content": "<p>Okay, now the only issue is this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ctx</span><span class=\"p\">().</span><span class=\"n\">func</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">builder_ctx</span><span class=\"p\">());</span>\n</code></pre></div>\n<p>It says, <code>\"cannot borrow '*self' as mutable more than once at a time\"</code>.</p>",
        "id": 421797477,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708064099
    },
    {
        "content": "<p>omg... no errors... wow! thank you so much!!!</p>",
        "id": 421800839,
        "sender_full_name": "Jacob Sapoznikow",
        "timestamp": 1708066577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"692153\">Jacob Sapoznikow</span> has marked this topic as resolved.</p>",
        "id": 421804615,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708068790
    },
    {
        "content": "<p>cool, glad that worked out!</p>",
        "id": 421886046,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708098784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"689928\">Lee Wei</span> has marked this topic as unresolved.</p>",
        "id": 421970511,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708140546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"689928\">Lee Wei</span> has marked this topic as resolved.</p>",
        "id": 421970519,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708140560
    },
    {
        "content": "<p>Sorry, misclicked the button. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 421970609,
        "sender_full_name": "Lee Wei",
        "timestamp": 1708140665
    }
]