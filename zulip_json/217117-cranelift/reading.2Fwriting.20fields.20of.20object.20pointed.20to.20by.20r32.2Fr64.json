[
    {
        "content": "<p>Would it be better to</p>\n<ol>\n<li>add encodings for <code>load.r64</code> and <code>store.r64</code> and <code>fill_nop.r64</code> etc, or</li>\n<li>to do a <code>raw_bitcast</code> from <code>r64</code> to <code>i64</code> and then use that bitcast'd value as the pointer for subsequent loads/stores?</li>\n</ol>\n<p>Using <code>raw_bitcast</code> is leading to errors like \"error: inst13: v13 is a real GPR value defined by a ghost instruction\", while adding encodings seems like it touches a lot more stuff. I haven't got either approach working yet. I'm also a little wary that approach (2) might mess up stack maps generation.</p>\n<p>Any suggestions as to which is the better approach?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span></p>",
        "id": 201917584,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593042426
    },
    {
        "content": "<p>When we do a load or store, do we keep track of the memory location for stackmaps?</p>",
        "id": 201917696,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593042530
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> can you clarify a bit more? do you mean do we insert safepoints for loads/stores?</p>",
        "id": 201917721,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593042568
    },
    {
        "content": "<p>When we do a store, do we remember the memory location as a root that a GC would want to scan from?</p>",
        "id": 201917795,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593042617
    },
    {
        "content": "<p>the way that stack maps work is we ask the register allocator which variables are live after a safepoint, and filter that set for values which are reference types. If the <code>r64</code> is not used again after the <code>bitcast</code>, the register allocator will presumably believe it to be dead, and we won't include it in stack maps. The results of the bitcast will never be included in stack maps.</p>",
        "id": 201917935,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593042725
    },
    {
        "content": "<p>this is making me think that adding <code>load.r64</code> etc encodings is the most promising course of action</p>",
        "id": 201917968,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593042769
    },
    {
        "content": "<p>Yeah. Also, we use these <code>load.64</code> and <code>store.64</code> for accessing wasm tables, right?</p>",
        "id": 201918022,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593042833
    },
    {
        "content": "<p>and in the future, GC struct fields and so on</p>",
        "id": 201918079,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593042851
    },
    {
        "content": "<p>yeah, that's what I am using them for now</p>",
        "id": 201918117,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593042880
    },
    {
        "content": "<p>where Cranelift itself isn't in charge of identifying the roots; the roots come from the wasm runtime which knows where all the tables are</p>",
        "id": 201918133,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593042891
    },
    {
        "content": "<p>implementing the inline fast path for <code>table.get</code> and <code>table.set</code></p>",
        "id": 201918134,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593042892
    },
    {
        "content": "<p>From the POV of embeddings like SpiderMonkey, they should definitely be separate instructions, I think -- a store of a GC'd pointer sometimes involves other logic (adding to a write buffer during incremental GC in progress, etc) so we want to be able to distinguish that from an i64</p>",
        "id": 201918165,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1593042923
    },
    {
        "content": "<p>yeah, so then adding encodings for <code>load.64</code> and <code>store.r64</code> makes sense to me.</p>",
        "id": 201918173,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593042930
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> great, thanks!</p>\n<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> I have barriers here as well, I am expanding them inline in <code>FuncEnvironment::translate_table_{get,set}</code>. This should work well until sometime in the (fairly distant) future when we want to do barrier coalescing. See <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1146#issuecomment-566790342\">https://github.com/bytecodealliance/wasmtime/issues/1146#issuecomment-566790342</a> for details on the design space of when/where we handle barriers.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1146#issuecomment-566790342\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1146#issuecomment-566790342\" title=\"Load/store R32/R64 types · Issue #1146 · bytecodealliance/wasmtime\">Load/store R32/R64 types · Issue #1146 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Most likely global.set/.get or table.set/.get for reference types will be translated into regular memory load and store instructions. Currently, their implementations are missing at codegen side. T...</div></div></div>",
        "id": 201918429,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593043100
    },
    {
        "content": "<p>oh neat, I'll go do my homework -- thanks :-)</p>",
        "id": 201918455,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1593043142
    },
    {
        "content": "<p>(sorry, wasn't trying to be trite, I just did a Whole Write Up on that subject and might as well link it rather than poorly reproduce it here :-p )</p>",
        "id": 201918588,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593043238
    },
    {
        "content": "<p>No worries, happy to see all of this thought out already; thanks for the pointer!</p>",
        "id": 201919054,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1593043619
    },
    {
        "content": "<p>ok, these changes are part of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\">https://github.com/bytecodealliance/wasmtime/pull/1923</a> and I've flagged you, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, for review (feel free to redirect, if someone else makes more sense)</p>\n<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> if by chance you're interested in what the GC barrier implementation looks like, they're in that PR too (inside the <code>func_environ.rs</code> file)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1923\" title=\"wasmtime: Implement `table.get` and `table.set` by fitzgen · Pull Request #1923 · bytecodealliance/wasmtime\">wasmtime: Implement `table.get` and `table.set` by fitzgen · Pull Request #1923 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">These instructions have fast, inline JIT paths for the common cases, and only\ncall out to host VM functions for the slow paths. This required some changes to\ncranelift-wasm&#39;s FuncEnvironment: i...</div></div></div>",
        "id": 202008676,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593110649
    },
    {
        "content": "<p>Is this PR branched off of the wiggle integration PR? It looks like there are a lot of unrelated commits</p>",
        "id": 202010977,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1593111799
    },
    {
        "content": "<p>I think I may have messed that up by accident, a rebase should make those go away</p>",
        "id": 202011057,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593111841
    },
    {
        "content": "<p>Yeah, just the last commit is relevant. I’ll rebase when I’m done with lunch</p>",
        "id": 202015372,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593114004
    }
]