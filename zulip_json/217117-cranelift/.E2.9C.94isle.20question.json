[
    {
        "content": "<p>The isle DSL is very nice and i like the egraph integration support. i see there is support for mid level ir optimizations. My question is: would it be possible for someone to implement  obfuscation using rewrite rules? Much like llvm ir obfuscation passes?</p>\n<p>I would really love to generate large mixed-boolean-arithmetic expressions with the rewrite rules. However I dont want to have static rewrite rules id like to be able to generate unique sequences on the fly. Any suggestions or tips would be amazing.</p>",
        "id": 431806674,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712516585
    },
    {
        "content": "<p>we don't do it with ISLE, but this is essentially what <code>wasm-mutate</code> does in its \"peephole\" pass:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-mutate/src/mutators/peephole/rules.rs\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-mutate/src/mutators/peephole/rules.rs</a></li>\n<li><a href=\"https://arxiv.org/pdf/2309.07638.pdf\">https://arxiv.org/pdf/2309.07638.pdf</a></li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-mutate/src/mutators/peephole/rules.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8fefa0280a48cb91f6b65b9bad9ea4d600fe707c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323238646136313136643130343731646565346438643533386630633233336664663533633536376236613436633033663261663162633137333034613361302f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-mutate/src/mutators/peephole/rules.rs\" title=\"wasm-tools/crates/wasm-mutate/src/mutators/peephole/rules.rs at main · bytecodealliance/wasm-tools\">wasm-tools/crates/wasm-mutate/src/mutators/peephole/rules.rs at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 432046427,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1712602468
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217117-cranelift/topic/.E2.9C.94isle.20question/near/432046427\">said</a>:</p>\n<blockquote>\n<p>we don't do it with ISLE, but this is essentially what <code>wasm-mutate</code> does in its \"peephole\" pass:</p>\n<ul>\n<li><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-mutate/src/mutators/peephole/rules.rs\">https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wasm-mutate/src/mutators/peephole/rules.rs</a></li>\n<li><a href=\"https://arxiv.org/pdf/2309.07638.pdf\">https://arxiv.org/pdf/2309.07638.pdf</a></li>\n</ul>\n</blockquote>\n<p><a href=\"/user_uploads/15107/gIyni76JNUxgX7P3Q4kdd8XP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/gIyni76JNUxgX7P3Q4kdd8XP/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/gIyni76JNUxgX7P3Q4kdd8XP/image.png\"></a></div><p>So the mutation happens prior to any cranelift ir is created?</p>",
        "id": 432076832,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712614886
    },
    {
        "content": "<p><code>wasm-mutate</code> is a wasm-to-wasm tool, cranelift isn't involved unless you happen to take the resulting wasm and run it through wasmtime</p>",
        "id": 432079459,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1712616369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217117-cranelift/topic/.E2.9C.94isle.20question/near/432079459\">said</a>:</p>\n<blockquote>\n<p><code>wasm-mutate</code> is a wasm-to-wasm tool, cranelift isn't involved unless you happen to take the resulting wasm and run it through wasmtime</p>\n</blockquote>\n<p>ah i see, we are interested in doing term rewriting on the cranelift-ir directly. We are doing binary rewriting of PE files and x86 instructions and have our own little IR at the moment however cranelift-ir looks very attractive to us for obfuscation purposes.</p>",
        "id": 432084172,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712619045
    },
    {
        "content": "<p>Generating new ISLE rules on the fly isn't really possible; the rules are compiled to Rust ahead of time (and in a way that requires seeing all rules together, to properly combine them) and then compiled into Cranelift. You could potentially build a large pool of potential rewrites statically and turn them on/off with \"predicate guards\" (if-let clauses on the ISLE rules calling to an \"is this rule enabled\" helper in Rust)</p>",
        "id": 432584107,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712782684
    },
    {
        "content": "<p>however I'd also slightly discourage using Cranelift for this: you're going to be fighting the optimizer pretty hard to get less-optimal code in; rewrites are fundamentally tied to the egraph pass that also does GVN, and the cost function / extraction will push away from any \"suboptimal\" expression you introduce, and also eclass scope logic (widest scope wins) will mean that, for example, once an expression is rewritten to a constant, no other options can be chosen</p>",
        "id": 432584404,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712782798
    },
    {
        "content": "<p>this seems like the sort of thing where a custom IR is exactly what you want</p>",
        "id": 432584485,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1712782813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/.E2.9C.94isle.20question/near/432584107\">said</a>:</p>\n<blockquote>\n<p>Generating new ISLE rules on the fly isn't really possible; the rules are compiled to Rust ahead of time (and in a way that requires seeing all rules together, to properly combine them) and then compiled into Cranelift. You could potentially build a large pool of potential rewrites statically and turn them on/off with \"predicate guards\" (if-let clauses on the ISLE rules calling to an \"is this rule enabled\" helper in Rust)</p>\n</blockquote>\n<p>Ah i see that will cause us problem. Even if we generated millions of rewrite rules ahead of time we wouldnt be able to recursively apply them right? Or is that determined by the cost function? </p>\n<p>I think we will probably keep the ir and term rewrite system we currently have and just use regalloc2 with our instruction selector.</p>",
        "id": 432590397,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712784891
    },
    {
        "content": "<p>Our goal here is to generate code that the optimizer will not be able to reduce.</p>",
        "id": 432592238,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712785742
    },
    {
        "content": "<p>The fact that once an expression is reduced to a constant cant be rewritten anymore makes total sense for optimization purposes but that will cause us problems as we will want to obliterate constant values and actually make it so that the value will never be represented in memory or a register at runtime (potentially).</p>",
        "id": 432592916,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712786063
    },
    {
        "content": "<p>we plan to rewrite the semantics of the expression which operates on constant values such that the actual constant will never materialize itself in a register or memory. This isnt possible for all constants (you can imagine passing it as an argument to a function) however lots of constants can be \"dematerialized\" like this.</p>\n<p>This is just one of the many things we want to do, i think we will probably just use our term rewrite system though.</p>",
        "id": 432593323,
        "sender_full_name": "CompilerSmith",
        "timestamp": 1712786276
    }
]