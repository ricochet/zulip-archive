[
    {
        "content": "<p>I've been looking out how to improve the aarch64 backend testing and how to do some refactoring in how we describe our instruction and the encoding process. I've now been pointed at the serde crate and it seems like it could be a very useful to do instead of writing raw rust. Has anybody looked into describing instructions, tests, or anything else in the backend using something like JSON?</p>",
        "id": 248218888,
        "sender_full_name": "Sam Parker",
        "timestamp": 1627996639
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421408\">@Sam Parker</span> interesting idea! We could potentially do this, yes; if we have the <code>Decode</code> trait on the <code>Inst</code> then in theory we could build it from JSON. IMHO it's not a huge difference in accessibility to write ~5 lines of rust vs. ~5 lines of JSON for a new instruction encoding test case, so this doesn't seem super-high-priority for me, but maybe others think differently</p>",
        "id": 248252560,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628011791
    },
    {
        "content": "<p>plus there's already the filetest infrastructure: there used to be a <code>test binemit</code> or something like that that we used for checking the encodings of instructions. It could be resurrected if that was more convenient than the Rust unit tests.</p>",
        "id": 248260413,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628015478
    },
    {
        "content": "<p>IMHO, both are at about the same level of ease-of-use</p>",
        "id": 248260484,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628015509
    },
    {
        "content": "<p>I think a good contribution would be to add something to care the encodings of instructions against a separate tool/library (e.g., manually I check many encodings against XED)</p>",
        "id": 248260608,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628015553
    },
    {
        "content": "<p>Yes, +1 to that for sure. When I wrote the initial aarch64 backend I took care to validate against <code>as</code> (all of the instructions' pretty-printed forms were valid <code>as</code> syntax at first) but we never automated that</p>",
        "id": 248260734,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628015611
    },
    {
        "content": "<p>Yes, automation would be my main goal - especially for writing tests. There is VIXL (<a href=\"https://github.com/Linaro/vixl\">https://github.com/Linaro/vixl</a>) which can generate assemblers, and is a simulator, so I would really like to reuse some output from that to get better test coverage in the backend. I think it would be a bonus if we could have a single place to describe register usage for instructions too, so we don't have to implement both get_regs and map_regs.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Linaro/vixl\" style=\"background-image: url(https://opengraph.githubassets.com/4e72a8ae86979fa9634dbb5cbf437508e37f160815fc66f67d34776a3f034183/Linaro/vixl)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Linaro/vixl\" title=\"GitHub - Linaro/vixl: AArch32 and AArch64 Runtime Code Generation Library\">GitHub - Linaro/vixl: AArch32 and AArch64 Runtime Code Generation Library</a></div><div class=\"message_embed_description\">AArch32 and AArch64 Runtime Code Generation Library - GitHub - Linaro/vixl: AArch32 and AArch64 Runtime Code Generation Library</div></div></div>",
        "id": 248314755,
        "sender_full_name": "Sam Parker",
        "timestamp": 1628058172
    },
    {
        "content": "<p>Merging <code>get_regs</code> and <code>map_regs</code> should be possible using a macro I think. Said macro could also directly define the instruction enum and implement the display code.</p>",
        "id": 248357646,
        "sender_full_name": "bjorn3",
        "timestamp": 1628087418
    }
]