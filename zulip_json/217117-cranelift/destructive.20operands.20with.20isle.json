[
    {
        "content": "<p>Hi!<br>\nI'm really struggling to write an ISLE isel pattern for an instruction with a destructive operand. I want one of my input registers to be reused as the output. After wrestling with how to even try to express this in something that compiles, both my attempts fail to tie the input to the register. Has anyone done this before and could point me at an example? cheers!</p>",
        "id": 264024012,
        "sender_full_name": "Sam Parker",
        "timestamp": 1638893742
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"421408\">@Sam Parker</span> -- sorry to hear this is causing difficulties! The system is actually designed to <em>not</em> allow this, in anticipation of SSA-based VCode. The solution is via something we invented called \"move mitosis\". The basic idea is that all instructions have three-operand forms (aarch64 already almost always has that) with a separate destination, and the ISLE lowering can produce arbitrary destinations. If a particular instruction needs to emit a separate pre-move to turn a separate-dest form into a mutate-in-place form, then the \"move mitosis\" trait method can emit that move, and edit <code>self</code> to have src2 == dst or whatnot. Then in emission we assert that. More details in x64/inst/mod.rs (grep <code>mov_mitosis</code>) which pervasively uses this pattern</p>",
        "id": 264033427,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1638896777
    },
    {
        "content": "<p>I wrote some docs on this stuff here: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/isle-integration.md#lowering-rules-are-always-pure-use-ssa\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/isle-integration.md#lowering-rules-are-always-pure-use-ssa</a></p>\n<p>let me know if there are things that doesn't answer for you and we can update it :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/isle-integration.md#lowering-rules-are-always-pure-use-ssa\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/810293d4ac1ef8f145e5d0c7e7213978de0c46d3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343763623939303836363739373833306237633665343966353433323433396532653564643264633134653734336637636431356534313234336538633939652f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/isle-integration.md#lowering-rules-are-always-pure-use-ssa\" title=\"wasmtime/isle-integration.md at main · bytecodealliance/wasmtime\">wasmtime/isle-integration.md at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/isle-integration.md at main · bytecodealliance/wasmtime</div></div></div>",
        "id": 264083392,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1638916357
    },
    {
        "content": "<p>Excellent, thanks both. I had assumed SSA was the issue, it makes sense. Would regalloc2 enable us to express this register constraints more directly?</p>",
        "id": 264129349,
        "sender_full_name": "Sam Parker",
        "timestamp": 1638954983
    },
    {
        "content": "<p>Okay, 'move mitosis will eventually go away completely once we switch over to regalloc2' has answered that one!</p>",
        "id": 264130245,
        "sender_full_name": "Sam Parker",
        "timestamp": 1638955558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217117-cranelift/topic/destructive.20operands.20with.20isle/near/264033427\">said</a>:</p>\n<blockquote>\n<p>... aarch64 already almost always has that...</p>\n</blockquote>\n<p>Unfortunately that is not really the case with the SVE instructions - we frequently need to fit 2 5-bit source vector register fields and a 3-bit predicate register field into a 32-bit instruction, and as a result there is no space left for an explicit destination.</p>",
        "id": 264838067,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1639478380
    },
    {
        "content": "<p>SVE introduces a new <a href=\"https://developer.arm.com/documentation/ddi0602/2021-09/SVE-Instructions/MOVPRFX--predicated---Move-prefix--predicated--?lang=en\">move instruction</a> <a href=\"https://developer.arm.com/documentation/ddi0602/2021-09/SVE-Instructions/MOVPRFX--unpredicated---Move-prefix--unpredicated--?lang=en\">variant</a> called <code>MOVPRFX</code> to ameliorate this - compared to other moves, it has the constraint that it <strong>must</strong> precede an instruction that can be prefixed in that way (usually a destructive operation); on the other hand it provides a very strong microarchitectural hint that it can be fused with the subsequent instruction. It looks like the \"move mitosis\" mechanism will allow us to generate <code>MOVPRFX</code> instructions as needed.</p>",
        "id": 264840185,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1639479603
    },
    {
        "content": "<p>I think our other option is to treat destructive operations as constructive throughout the backend, and then generate an optional prefix at emission time if the register allocator hasn't picked the same destination as the source.</p>",
        "id": 264840483,
        "sender_full_name": "Anton Kirilov",
        "timestamp": 1639479727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300050\">@Anton Kirilov</span> interesting! Yeah I think taking an approach like the x64 backend's here is the right choice, as opposed to always emitting a prefix: the former (\"move mitosis\") lets us hint to the regalloc, eventually with regalloc2 at least, that with the right assignments the move could be elided</p>",
        "id": 264910030,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1639508836
    }
]