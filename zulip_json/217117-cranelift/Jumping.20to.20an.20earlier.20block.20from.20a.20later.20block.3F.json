[
    {
        "content": "<p>In my low-level IR I have this:</p>\n<div class=\"codehilite\"><pre><span></span><code>function #cc_g() -&gt; W\nb0:\n    #an_f: int = 1\n    jump b2\nb1:\n    return f_a\nb2:\n    #cc_h: ??? = #builtin[print_int].0\n    f_a: () = #cc_h(#builtin[print_int], #an_f)\n    jump b1\n</code></pre></div>\n\n\n<p>The mapping of this to cranelift is very direct, blocks map 1-1, so the cranelift function looks like:</p>\n<div class=\"codehilite\"><pre><span></span><code>function u0:0() -&gt; i64 system_v {\n    gv0 = symbol u1:0\n    gv1 = symbol u1:0\n    sig0 = (i64) -&gt; i64 system_v\n    sig1 = (i64, i64) -&gt; i64 system_v\n    fn0 = u0:0 sig0\n\nblock0:\n    v0 = iconst.i64 1\n    jump block2\n</code></pre></div>\n\n\n<p>Now at this point I get a panic while printing the next block, the error message just says \"INVALID encountered\". Any ideas what's wrong here?</p>",
        "id": 198585961,
        "sender_full_name": "osa1",
        "timestamp": 1590331203
    },
    {
        "content": "<p>I'm guessing that use of the variable <code>f_a</code> in <code>b1</code> is not quite correct (because it's declared in the next block), but I'm not sure</p>",
        "id": 198585975,
        "sender_full_name": "osa1",
        "timestamp": 1590331253
    },
    {
        "content": "<p>I noticed you are using <code>declare_var</code> for every assignment: <a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L299\">https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L299</a> If you can assign to the same variable multiple times, you should only call <code>declare_var</code> once. For some reason there is no assertion about this though.</p>\n<p>The problem here is likely that you used <code>use_var</code> before the <code>declare_var</code> call though. This means that during the <code>use_var</code> call Cranelift thinks the type of the variable is <code>INVALID</code>, which is not allowed.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L299\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/448274?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/osa1/mincaml/blob/b8ef0a735cc5a88333f7aebaf89a5be062bebf03/src/codegen.rs#L299\" title=\"osa1/mincaml\">osa1/mincaml</a></div><div class=\"message_embed_description\">A MinCaml compiler implemented in Rust. Contribute to osa1/mincaml development by creating an account on GitHub.</div></div></div>",
        "id": 198586231,
        "sender_full_name": "bjorn3",
        "timestamp": 1590331782
    },
    {
        "content": "<p>You need to call <code>declare_var</code> exactly once for a variable before you use either <code>def_var</code> or <code>use_var</code>.</p>",
        "id": 198586284,
        "sender_full_name": "bjorn3",
        "timestamp": 1590331847
    },
    {
        "content": "<p>The code could use a couple of assertions.</p>",
        "id": 198586290,
        "sender_full_name": "bjorn3",
        "timestamp": 1590331862
    },
    {
        "content": "<blockquote>\n<p>The problem here is likely that you used use_var before the declare_var call though</p>\n</blockquote>\n<p>Ahh, you're probably right.</p>",
        "id": 198586344,
        "sender_full_name": "osa1",
        "timestamp": 1590331943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/Jumping.20to.20an.20earlier.20block.20from.20a.20later.20block.3F/near/198586290\">said</a>:</p>\n<blockquote>\n<p>The code could use a couple of assertions.</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1751\">https://github.com/bytecodealliance/wasmtime/pull/1751</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1751\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1751\" title=\"Add some assertions to cranelift_frontend by bjorn3 路 Pull Request #1751 路 bytecodealliance/wasmtime\">Add some assertions to cranelift_frontend by bjorn3 路 Pull Request #1751 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">cc https://bytecodealliance.zulipchat.com/#narrow/stream/217117-cranelift/topic/Jumping.20to.20an.20earlier.20block.20from.20a.20later.20block.3F/near/198585961\ncc @osa1</div></div></div>",
        "id": 198586432,
        "sender_full_name": "bjorn3",
        "timestamp": 1590332144
    },
    {
        "content": "<p>You were right about declarations -- I fixed the issue. Thanks!</p>",
        "id": 198586496,
        "sender_full_name": "osa1",
        "timestamp": 1590332196
    }
]