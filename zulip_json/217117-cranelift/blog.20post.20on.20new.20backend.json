[
    {
        "content": "<p>Hi all -- I promised some folks a while back that I'd write up the new backend's design in a blog post or three. I've posted part 1 here if anyone is curious: <a href=\"https://cfallin.org/blog/2020/09/18/cranelift-isel-1/\">https://cfallin.org/blog/2020/09/18/cranelift-isel-1/</a></p>",
        "id": 210539388,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600444510
    },
    {
        "content": "<p>(cc <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> ; I know I promised this all the way back in April or so; sorry for the delay :-) )</p>",
        "id": 210539424,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600444527
    },
    {
        "content": "<p>do you have a tweet I can retweet?</p>",
        "id": 210540746,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600445117
    },
    {
        "content": "<p>I don't do twitter (hi it's me stuck in 2006! may change sometime) but please feel free to tweet it!</p>",
        "id": 210540831,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600445151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> The new backend is doing greedy search for isel right? No cost model and dynamic programming correct?</p>",
        "id": 210632470,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600545299
    },
    {
        "content": "<p><a href=\"https://mobile.twitter.com/typesanitizer/status/1307361862325952518\">https://mobile.twitter.com/typesanitizer/status/1307361862325952518</a></p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://mobile.twitter.com/typesanitizer/status/1307361862325952518\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/1206561022250668032/dAhulspB_normal.jpg\"></a><p><a href=\"https://twitter.com/fitzgen\">@fitzgen</a> Is there an explicit cost model for the instructions? If I am understanding correctly, this is doing greedy instruction selection (maximal munch), there's no dynamic programming involved.</p><span>- Varun Gandhi (@typesanitizer)</span></div></div>",
        "id": 210632477,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600545311
    },
    {
        "content": "<p>So nothing like burg and similar things</p>",
        "id": 210632492,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1600545336
    },
    {
        "content": "<p>Yes, exactly, the lowering for a given instruction and its operands is deterministic and maximal. We've had some discussions about heuristics to tune this, e.g. one rule that we tried (but quickly discarded) was to avoid merging operations with &gt; 1 use. It turned out to be better at least for our patterns (on AArch64) to always be greedy, because the operations we're merging tend to be free (e.g. built-in register extends/shifts).</p>",
        "id": 210634046,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600547732
    },
    {
        "content": "<p>(it occurs to me that I should perhaps join tech-twitter someday so as not to rely on middlefolks such as yourself. Thanks for relaying the question!)</p>",
        "id": 210634119,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600547818
    },
    {
        "content": "<p>That's true (re burg).  IMO burg is/was useful for very complex insn sets, most particularly VAX, but in the modern era (arm64, riscv, and to a large extent the subset of x64 that executes fast), it's pretty much irrelevant.</p>",
        "id": 210634195,
        "sender_full_name": "Julian Seward",
        "timestamp": 1600547913
    },
    {
        "content": "<p>Note that the AArch64 built-in shift/extend isn't actually free: it adds an extra cycle of latency to the instruction and reduces the max throughput from 3 to 1 since it needs to use the complex ALU execution unit.</p>",
        "id": 210636249,
        "sender_full_name": "Amanieu",
        "timestamp": 1600550972
    },
    {
        "content": "<p><a href=\"https://developer.arm.com/documentation/swog307215/a/\">source</a> Section 3.4</p>",
        "id": 210636254,
        "sender_full_name": "Amanieu",
        "timestamp": 1600550983
    },
    {
        "content": "<p>So in theory if the result of the shift/extend is used by multiple instructions then you're better off leaving it as a separate instruction.</p>",
        "id": 210636342,
        "sender_full_name": "Amanieu",
        "timestamp": 1600551113
    },
    {
        "content": "<p>Interesting, I hadn't seen this before, thank you!</p>",
        "id": 210636990,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600552121
    },
    {
        "content": "<p>Thinking about this a bit more -- there are implications re: register pressure as well. If we can't spare a temp for the shifted/extended value (and the destination of the add or whatever is also a source, so we can't use it as a temp), then the builtin op saves us. Definitely something to consider more carefully if/when we have a more aggressively-optimized isel mode.</p>",
        "id": 210637095,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600552306
    },
    {
        "content": "<p>Another (more common) case is folding an extend into a load: you really don't want to have to duplicate the load! However I will admit that cases where a value is actually used multiple times are quite rare in practice, so it is possible that this won't matter much in real programs.</p>",
        "id": 210637146,
        "sender_full_name": "Amanieu",
        "timestamp": 1600552374
    },
    {
        "content": "<p>Could the register pressure issue be somewhat alleviated by adding rematerialization support to the register allocator?</p>",
        "id": 210637228,
        "sender_full_name": "Amanieu",
        "timestamp": 1600552560
    },
    {
        "content": "<p>Indeed. Re: loads, we consider those side-effecting now (both because of traps, and because we've punted on the memory-ordering question until we can think more carefully about it) so we won't ever duplicate. But it's certainly a matter to consider once we adapt e.g. x86 to use memory operands directly when it sees add-from-load.</p>",
        "id": 210637282,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600552605
    },
    {
        "content": "<p>Re-mat is something that could help in general, yup; another thing on the list that we haven't gotten to quiet yet...</p>",
        "id": 210637296,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600552642
    },
    {
        "content": "<p>(There are two levels, the first being direct-reload from a spillslot when an ISA supports mem operands; the second is the more general case where we track expressions of pure operators to some depth. Want to get to at least the former, and maybe a simple form of the latter)</p>",
        "id": 210637363,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600552753
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/YBQ1mAElIxfdTJiMeLnXXLUd/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/YBQ1mAElIxfdTJiMeLnXXLUd/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/YBQ1mAElIxfdTJiMeLnXXLUd/image.png\"></a></div><p>Number 12 on HN right now</p>",
        "id": 210731108,
        "sender_full_name": "bjorn3",
        "timestamp": 1600689708
    },
    {
        "content": "<p>I just finished reading the post (I noticed it floating around reddit) and I must say, it's very well done! I very much enjoyed reading it :D</p>",
        "id": 210793895,
        "sender_full_name": "mental",
        "timestamp": 1600719346
    },
    {
        "content": "<p>Happy to hear it! Now I have to live up to this on the followups :-)</p>",
        "id": 210795083,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1600719934
    },
    {
        "content": "<p>Nice work, and an excellent write-up to boot. Thanks :)</p>",
        "id": 212894040,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602295515
    },
    {
        "content": "<p>I bumped into the \"linked lists in Rust\" problem trying to model backend IR, so I appreciate seeing there's a \"better\" way for that too. Still new to Rust but from what I've seen cranelift is a work of art. Nice to see it getting even better <span aria-label=\"heart eyes\" class=\"emoji emoji-1f60d\" role=\"img\" title=\"heart eyes\">:heart_eyes:</span></p>",
        "id": 212894219,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602295889
    },
    {
        "content": "<p>Use-counting is a nice touch as well... wouldn't mind dropping our own fixed-point backend DCE... (though for our stuff the real issue is RA/scheduling)</p>",
        "id": 212894339,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602296123
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 212899664,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1602306583
    },
    {
        "content": "<blockquote>\n<p>Eschewing SSA at this level allows us to avoid the overhead of maintaining its invariants, and maps more closely to the real machine. Lowerings for instructions are allowed to, e.g., use a destination register as a temporary before performing a final write into it. If we required SSA form, we would have to allocate a temporary in this case and rely on the register allocator to coalesce it back to the same register, which adds compile-time overhead</p>\n</blockquote>\n<p>Part of me was hoping to see one of those fancy polynomial-time SSA-based optimal RA algorithms c:</p>",
        "id": 212920913,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602343910
    },
    {
        "content": "<blockquote>\n<p>Furthermore, a greedy allocator that traverses the dominance tree in pre-order always finds an optimal coloring, if there is no aliasing of registers and no pre-colored registers</p>\n</blockquote>\n<p>There's the rub :(</p>",
        "id": 212921319,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602344490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"353026\">@Alyssa Rosenzweig</span> Actually the old cranelift backend <em>does</em> use SSA-based register allocation.</p>",
        "id": 212922636,
        "sender_full_name": "Amanieu",
        "timestamp": 1602346534
    },
    {
        "content": "<p>Eh?</p>",
        "id": 212922645,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602346553
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/codegen/src/regalloc\">https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/codegen/src/regalloc</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/codegen/src/regalloc\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/codegen/src/regalloc\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 212922700,
        "sender_full_name": "Amanieu",
        "timestamp": 1602346604
    },
    {
        "content": "<p>As opposed to use the new backend that uses <a href=\"https://github.com/bytecodealliance/regalloc.rs\">https://github.com/bytecodealliance/regalloc.rs</a> which is not SSA-based.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/regalloc.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/regalloc.rs\" title=\"bytecodealliance/regalloc.rs\">bytecodealliance/regalloc.rs</a></div><div class=\"message_embed_description\">Modular register allocator algorithms. Contribute to bytecodealliance/regalloc.rs development by creating an account on GitHub.</div></div></div>",
        "id": 212922780,
        "sender_full_name": "Amanieu",
        "timestamp": 1602346693
    },
    {
        "content": "<p>Looks like I have some \"light\" reading to do then. Thanks for the links!</p>",
        "id": 212922795,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602346719
    },
    {
        "content": "<p>There's also something to be said about register pressure / spills having more to do with scheduling than RA, for which the literature isn't quite there (at least on the GPU side). But I digress.</p>",
        "id": 212923149,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602347220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span> --Alright, reading through the first link has successfully (re)convinced me to let other people do out-of-SSA and do RA after, thanks</p>",
        "id": 212923974,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602348593
    },
    {
        "content": "<p>I'm curious, what in particular convinced you?</p>",
        "id": 212924027,
        "sender_full_name": "Amanieu",
        "timestamp": 1602348655
    },
    {
        "content": "<p>How many gotchas there are absolutely everywhere for real machines. Something I was prepared for, but underscored seeing a real production implementation.</p>",
        "id": 212924118,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602348840
    },
    {
        "content": "<p>I have a regalloc algorithm implemented in a few hundred lines of C, with excellent support for aliasing and precolouring. It can't claim to be optimal in any sense, but the order-of-magnitude difference in complexity is... noted.</p>",
        "id": 212924200,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602348938
    },
    {
        "content": "<p>(I admit that's an unfair comparison, since out-of-SSA is happening elsewhere with a sufficiently complicated algorithm, and the backend still drives that with its own support code. And liveness analysis is separate since it's used for DCE too. So maybe the gap isn't as aggressive as it looks.)</p>",
        "id": 212924248,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602348982
    },
    {
        "content": "<p>[Maybe the real takeaway is that RA is complicated no matter how you try to hide the complexity... and the cranelift implementations are just more honest about that <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> ]</p>",
        "id": 212924463,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602349271
    },
    {
        "content": "<p>If nothing else - I appreciate seeing how production Rust compilers look like as  I [redacted]</p>",
        "id": 212925363,
        "sender_full_name": "Alyssa Rosenzweig",
        "timestamp": 1602349724
    }
]