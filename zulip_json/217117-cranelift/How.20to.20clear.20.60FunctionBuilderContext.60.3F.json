[
    {
        "content": "<p>Comment on said type states:</p>\n<blockquote>\n<p>In order to reduce memory reallocations when compiling multiple functions, <code>FunctionBuilderContext</code> holds various data structures which are cleared between functions</p>\n</blockquote>\n<p>However, when trying to compile multiple functions using same context, I get a failed assert in <code>FunctionBuilder::new</code>, and searching the docs for appearances of <code>FunctionBuilderContext</code> in function  yields nothing related to clearing it explicitly.</p>",
        "id": 430024904,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711617410
    },
    {
        "content": "<p>You need to call finalize on the FunctionBuilder after you are done generating the clif ir and before you use the clif ir by eg passing it to define_function. Calling finalize will clear the FunctionBuilderContext.</p>",
        "id": 430025499,
        "sender_full_name": "bjorn3",
        "timestamp": 1711617582
    },
    {
        "content": "<p>So order of operations for each function is</p>\n<ul>\n<li>Declare function</li>\n<li>Emit clif</li>\n<li>Define function</li>\n<li>Finalize</li>\n</ul>",
        "id": 430025825,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711617656
    },
    {
        "content": "<p>You need to finalize before defining.</p>",
        "id": 430025922,
        "sender_full_name": "bjorn3",
        "timestamp": 1711617683
    },
    {
        "content": "<p>Oh.<br>\nPerhaps I'll make some documentation pull requests so the future generations don't have to ask so many questions in this chatroom.</p>",
        "id": 430026107,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711617727
    },
    {
        "content": "<p><code>builder.finalize()</code> will make a couple of final fixups to the generated clif ir.</p>",
        "id": 430026129,
        "sender_full_name": "bjorn3",
        "timestamp": 1711617737
    },
    {
        "content": "<p>By the way, something that may be useful to know in the future: You are allowed to declare functions multiple times for as long as you pass identical function signatures. So you can for example unconditionally declare every function you call as Linkage::Import, but only declare it as Linkage::Local/Linkage::Export when you define them. This way you don't have to distinguish between imported and locally defined functions when generating a call.</p>",
        "id": 430026650,
        "sender_full_name": "bjorn3",
        "timestamp": 1711617918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> while you're here, if i'm compiling an executable with multiple functions, am I supposed to pre-declare all functions, or use <code>declare_func_in_func</code>for each call?</p>",
        "id": 430026684,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711617937
    },
    {
        "content": "<p>declare_func_in_func returns an id that is only valid within that specific function. As such you have to call it again on each function where you want to call the target function.</p>",
        "id": 430027467,
        "sender_full_name": "bjorn3",
        "timestamp": 1711618306
    },
    {
        "content": "<p>A bit inconvenient that I can't <code>declare_func_in_func</code> while a FunctionBuilder exist, as both require &amp;mut to func. I guess I'll have to build some sort of dependency graph to handle pre-declaring functions before emitting clif.</p>",
        "id": 430029900,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711619187
    },
    {
        "content": "<p>You can call declare_func_in_func on the <code>func</code> field of the <code>FunctionBuilder</code>. This is the reference to the <code>Function</code> that you are currently building.</p>",
        "id": 430031679,
        "sender_full_name": "bjorn3",
        "timestamp": 1711619815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217117-cranelift/topic/How.20to.20clear.20.60FunctionBuilderContext.60.3F/near/430031679\">said</a>:</p>\n<blockquote>\n<p>You can call declare_func_in_func on the <code>func</code> field of the <code>FunctionBuilder</code>. This is the reference to the <code>Function</code> that you are currently building.</p>\n</blockquote>\n<p>I don't think there's such a function there. There's a <code>declare_imported_user_function</code> but that's all.</p>",
        "id": 430032573,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711620114
    },
    {
        "content": "<p>One more thing. How do I get <code>Value</code>s from a <code>ins().call()</code>? I vaguely remember there was something specifically for this, but skimming the docs I can't find anything that has signature of Inst -&gt; Value/Vec&lt;Value&gt;</p>",
        "id": 430033975,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711620574
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> <a href=\"#narrow/stream/217117-cranelift/topic/How.20to.20clear.20.60FunctionBuilderContext.60.3F/near/430033975\">said</a>:</p>\n<blockquote>\n<p>One more thing. How do I get <code>Value</code>s from a <code>ins().call()</code>? I vaguely remember there was something specifically for this, but skimming the docs I can't find anything that has signature of Inst -&gt; Value/Vec&lt;Value&gt;</p>\n</blockquote>\n<p>It's <a href=\"https://docs.wasmtime.dev/api/cranelift/prelude/struct.FunctionBuilder.html#method.inst_results\">https://docs.wasmtime.dev/api/cranelift/prelude/struct.FunctionBuilder.html#method.inst_results</a></p>",
        "id": 430034153,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711620624
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_b</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend_from_slice</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_b</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Any ideas why this wouldn't append anything to the <code>stack</code> given I've pre-declared all functions?<br>\nMy guess would be, I have to save signatures and manually set <code>ctx.func.signature</code> to a correct one for the function being built</p>",
        "id": 430035723,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711621342
    },
    {
        "content": "<p>Seems like it. Feels ugly though.</p>",
        "id": 430036643,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711621666
    },
    {
        "content": "<blockquote>\n<p>I don't think there's such a function there.</p>\n</blockquote>\n<p>I mean call <code>module.declare_func_in_func</code> except with <code>builder.func</code> as <code>&amp;mut Function</code> argument instead of <code>func</code>.</p>",
        "id": 430037991,
        "sender_full_name": "bjorn3",
        "timestamp": 1711622176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"455945\">Ivan Chinenov</span> <a href=\"#narrow/stream/217117-cranelift/topic/How.20to.20clear.20.60FunctionBuilderContext.60.3F/near/430035723\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">append_block_params_for_function_params</span><span class=\"p\">(</span><span class=\"n\">entry_b</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">stack</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">stack</span><span class=\"p\">.</span><span class=\"n\">extend_from_slice</span><span class=\"p\">(</span><span class=\"n\">builder</span><span class=\"p\">.</span><span class=\"n\">block_params</span><span class=\"p\">(</span><span class=\"n\">entry_b</span><span class=\"p\">));</span>\n</code></pre></div>\n<p>Any ideas why this wouldn't append anything to the <code>stack</code> given I've pre-declared all functions?<br>\nMy guess would be, I have to save signatures and manually set <code>ctx.func.signature</code> to a correct one for the function being built</p>\n</blockquote>\n<p><code>append_block_params_for_function_params</code> is for the function params of the current function, not of the called function. For your use case calling <code>builder.append_block_param()</code> for each function parameter yourself is likely nicer.</p>",
        "id": 430038371,
        "sender_full_name": "bjorn3",
        "timestamp": 1711622329
    },
    {
        "content": "<p>I ended up with structure like this for now</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">path_to_fid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FnvHashMap</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">procs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">make_signature</span><span class=\"p\">();</span>\n\n<span class=\"w\">       </span><span class=\"c1\">// push paramenter types</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">fid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">declare_function</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">to_smolstr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">Linkage</span>::<span class=\"n\">Export</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">sig</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"n\">path_to_fid</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">proc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">procs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">compile_proc</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">path</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">proc</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">path_to_fid</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">builder_ctx</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"k\">fn</span> <span class=\"nf\">compile_proc</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"nc\">ItemPathBuf</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">proc</span>: <span class=\"nc\">CProc</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path_to_fid</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">FnvHashMap</span><span class=\"o\">&lt;</span><span class=\"n\">ItemPathBuf</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">FuncId</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Signature</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">module</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ObjectModule</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">codegen</span>::<span class=\"n\">Context</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">builder_ctx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilderContext</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">ModuleResult</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">clear_context</span><span class=\"p\">(</span><span class=\"n\">ctx</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">fid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">path_to_fid</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">path</span><span class=\"p\">].</span><span class=\"n\">clone</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">signature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">sig</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// build function</span>\n</code></pre></div>",
        "id": 430039895,
        "sender_full_name": "Ivan Chinenov",
        "timestamp": 1711622940
    }
]