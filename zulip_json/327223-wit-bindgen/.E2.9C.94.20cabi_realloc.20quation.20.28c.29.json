[
    {
        "content": "<p>The generated \"c\" code for cabi_realloc looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__weak__</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"cabi_realloc\"</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">cabi_realloc</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">old_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">new_size</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new_size</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">align</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_size</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">abort</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>My instinct was for something more like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__weak__</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"cabi_realloc\"</span><span class=\"p\">)))</span><span class=\"w\"> </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">cabi_realloc</span><span class=\"p\">(</span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">old_size</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">align</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">size_t</span><span class=\"w\"> </span><span class=\"n\">new_size</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">new_size</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">free</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">void</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">realloc</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new_size</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">ret</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">abort</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This would allow the host to cleanup any wasm memory it had previously allocated via calls to cabi_realloc?</p>",
        "id": 372510553,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688547140
    },
    {
        "content": "<p>POSIX realloc doesn't free on size = 0; thats a non-portable glibc behavior. (Which isn't to say that cabi_realloc <em>couldn't</em> adopt that behavior, just probably why it doesn't.)</p>",
        "id": 372601691,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688565430
    },
    {
        "content": "<p>IMO the glibc behavior is more confusing/surprising.</p>",
        "id": 372602430,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688565559
    },
    {
        "content": "<p>I think technically this would be ok, but when the canonical ABI wants to free something it will always do so through <code>cabi_free</code> as opposed to <code>cabi_realloc</code>, so I don't think it's necessary to make the change as well</p>",
        "id": 372604487,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1688565918
    },
    {
        "content": "<p>Ahhh - so the issue is more that my wit generated stubs didn't create an export for <code>cabi_free</code>?</p>\n<p>FWIW I am testing a simple wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">echo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">msg</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And I create several wasm files that implement it (in various languages). </p>\n<p>I am now writing a host which wants to call that function so I:</p>\n<ol>\n<li>call cabi_realloc and copy the string into the wasm memory</li>\n<li>Call the <code>echo</code> function</li>\n<li>Copy the result from the wasm memory into my host memory</li>\n<li>Call <code>cabi_post_echo</code> to free the memory that the result was using</li>\n<li>Call cabi_realloc to \"free\" the memory I allocated in step 1.  </li>\n</ol>\n<p>Had there been a cabi_free exported from the wasm I would / should have called that?</p>\n<p>This is what my exports look like from the c++ guest wasm:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>  (export \"memory\" (memory 0))\n  (export \"cabi_post_echo\" (func 150))\n  (export \"cabi_realloc\" (func 151))\n  (export \"add\" (func 152))\n  (export \"add3\" (func 153))\n  (export \"sub\" (func 154))\n  (export \"echo\" (func 155))\n</code></pre></div>",
        "id": 372608162,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688566539
    },
    {
        "content": "<p>oh sorry I'm thiking about the past where <code>cabi_free</code> was a thing, which it no longer is. In any case though your stub's <code>cabi_post_echo</code> is the \"free\" function, and it's specialized for the <code>echo</code> export</p>",
        "id": 372611486,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1688567089
    },
    {
        "content": "<p>Which is fine for the \"returned\" string - but its not going to clean up the memory I allocated in step 1. ?</p>",
        "id": 372616015,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688567961
    },
    {
        "content": "<p>Memory allocated for params becomes owned by the guest function. e.g. if your guest is Rust it will be wrapped in an owned <code>String</code>.</p>",
        "id": 372620033,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688568676
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> - is that convention documented anywhere?  I had a good look around the wit-bindgen docs and <a href=\"https://github.com/WebAssembly/component-model\">https://github.com/WebAssembly/component-model</a> but didn't spot anything?</p>\n<p>Also if that is the case, should it be taken care of in the generated stub:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">__attribute__</span><span class=\"p\">((</span><span class=\"n\">__export_name__</span><span class=\"p\">(</span><span class=\"s\">\"echo\"</span><span class=\"p\">)))</span>\n<span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">__wasm_export_test_echo</span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">arg0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">test_string_t</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">test_string_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">arg</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">size_t</span><span class=\"p\">)(</span><span class=\"n\">arg0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"w\">  </span><span class=\"n\">test_string_t</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">test_echo</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">arg1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">ret</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"o\">-------</span>-&gt;<span class=\"nc\">free</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"o\">&lt;-------</span>\n<span class=\"w\">  </span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">RET_AREA</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">int32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">).</span><span class=\"n\">len</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">int32_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">int32_t</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret</span><span class=\"p\">).</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Type of thing?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fee8ddfc2ec607fdd23fdae0f9f80602102c11c2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343938653163646439346534303164353333326237363530336563633837303463663036363961326433643361636564666464623438666462323061643435312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model\" title=\"GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model\">GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</div></div></div>",
        "id": 372623555,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688569368
    },
    {
        "content": "<p>I don't know if it is explicitly described anywhere.</p>",
        "id": 372625766,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688569783
    },
    {
        "content": "<p>Generated C would not free parameters because the guest code may want to keep them around. It would be up to the user to free parameters.</p>",
        "id": 372626373,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688569901
    },
    {
        "content": "<p>This sort of thing would typically be documented with the function declaration; I'm not sure how best to document generated C bindings like that.</p>",
        "id": 372627176,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688570049
    },
    {
        "content": "<p>Ok as long as I know what the official intention is I am happy enough to have:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"c1\">//  guests dispose all params as needed</span>\n<span class=\"w\">  </span><span class=\"c1\">//  hosts call cabi_post_XXX to dispose \"results\" as needed</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">echo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">msg</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>(and it solves my initial issue with cabi_realloc not freeing!)</p>",
        "id": 372636764,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688571695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577690\">Gordon Smith</span> has marked this topic as resolved.</p>",
        "id": 372636837,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688571713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span>  - can I assume that the opposite would be true for host functions that are imported into the wasm?  <br>\n(If so then we would still need a cabi_free or equivalent)...</p>",
        "id": 372644098,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688573046
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577690\">Gordon Smith</span> has marked this topic as unresolved.</p>",
        "id": 372646247,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688573442
    },
    {
        "content": "<p>For calling an import I believe the caller is responsible for cleaning up both parameters and results. The difference with imports is that the caller is only touching its own memory, so it doesn't need to call a <code>cabi_realloc</code>.</p>",
        "id": 372652444,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688574792
    },
    {
        "content": "<p>The <em>callee</em> (e.g. the host) may call <code>cabi_realloc</code> to allocate the result</p>",
        "id": 372652708,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688574847
    },
    {
        "content": "<p>If the callee wants access to the parameters after the function returns it has to copy them out of the caller's memory.</p>",
        "id": 372652894,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688574891
    },
    {
        "content": "<p>All that said, I am most familiar with older versions of the ABI so hopefully someone will confirm my answer there <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 372653033,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688574925
    },
    {
        "content": "<p>Getting this written down in a less-formal way (than the canonical ABI's Python definition) so that everyone can understand is a pretty high priority for many of us. <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span></p>",
        "id": 372653420,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688574999
    },
    {
        "content": "<p>agreed! Relatedly, I was just in a meeting where we discussed how specifying some details of the ABI that Component tooling otherwise abstracts away, because we want to enable runtimes to support WASI Preview2+ without requiring the whole component model</p>",
        "id": 372654081,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1688575170
    },
    {
        "content": "<p>Great info - I did spend too much time looking for this info (but did learn a lot on the way).  tldr:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">//  Imports  ---</span>\n<span class=\"w\">  </span><span class=\"c1\">//  guests dispose params as needed</span>\n<span class=\"w\">  </span><span class=\"c1\">//  guests dispose \"results\" as needed</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">dbglog</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">msg</span>: <span class=\"nc\">string</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"c1\">//  Exports ---</span>\n<span class=\"w\">  </span><span class=\"c1\">//  guests dispose params as needed</span>\n<span class=\"w\">  </span><span class=\"c1\">//  hosts call cabi_post_XXX to dispose \"results\" as needed</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">echo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">msg</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span>\n</code></pre></div>",
        "id": 372667540,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1688578003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"577690\">Gordon Smith</span> has marked this topic as resolved.</p>",
        "id": 372667574,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688578011
    },
    {
        "content": "<p>Thanks, I saw a PR that fixed up the imports for threads (moving the ret aret to the stack), so just wondered.  (<a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/326\">https://github.com/bytecodealliance/wit-bindgen/pull/326</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/326\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/73b46b74d99c477bd4300b3557336b7600994a94\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373735343531653863313464616432393063353238333939613365326531353533323833366632303131363731626332336237306461613265663131336462352f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f333236)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/326\" title=\"Move `RET_AREA` variables onto the stack. by sunfishcode · Pull Request #326 · bytecodealliance/wit-bindgen\">Move `RET_AREA` variables onto the stack. by sunfishcode · Pull Request #326 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Move RET_AREA variables out of static memory and onto the stack.\n\n\nThis ensures that the bindings are reentrant, which will be needed when the wasi-threads proposal makes threads available in wasm....</div></div></div>",
        "id": 390624923,
        "sender_full_name": "Scott Waye",
        "timestamp": 1694568124
    }
]