[
    {
        "content": "<p>Hi <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I'm posting here because of a note in <a href=\"https://github.com/bytecodealliance/wit-bindgen\">wit-bindgen</a> suggesting that new users post a message here if they're considering it for a projects. I'm also quite new to zulip in general, so apologies if I'm posting this in the wrong place <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>I'm trying to evaluate various options for a plugin system for a Rust binary we're building at $JOB. Broadly speaking, I'm looking for a way for users to provide code to run on machines that we control (for doing arbitrary modifications to data in a database). If we were just writing a Rust library, we'd expose a function like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Server</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Server</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">add_plugin</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">plugin</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">Foo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Ctx</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Bar</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where <code>Ctx</code> is a type that allows the plugin to do certain operations (such as performing certain database queries). <code>Foo</code> and <code>Bar</code> are just plain-old-data types. In fact, <code>Bar</code> is pretty much identical to <code>serde_json::Value</code>.</p>\n<p>Of course, there are 2 big issues with this for our use case: 1) it forces the plugin author to write Rust (mostly), and 2) it doesn't allow plugins to be loaded at runtime. WASM seems like an obvious choice to fix both problems.</p>\n<p>I'm quite new to WIT/component-model, but from what I'm reading it seem like it does exactly what we're after.</p>\n<p>The main question I have is about the maturity. I'm currently experimenting with <code>wasmtime</code> (though I have no particularly strong feelings about any runtime, happy to switch to another), and I've noticed it has a <code>component-model</code> feature flag. But everything I've seen says that support is \"incomplete\". Does anyone know the rough status? Is it so incomplete as to not be worth trying? Or are there some edge cases that aren't covered? My fallback plan is to just create buffers and pass CBOR encoded data across the WASM boundary, but of course this isn't without overhead. Some advice would be much appreciated.</p>\n<p>Finally, I'm quite interested in seeing WASM components move forward, and am happy to contribute. I'm experienced with Rust, but relatively new to WASM. If there's any work that can be done by someone who fits that description, I'd be happy to help out where possible :)</p>\n<p>Thanks <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1a3997906a4728226f8a250abd3c29560e6ed858\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636132303764653461383265313934393365386334363966313465393065363764373133333731306665396461613132613763303436306434666363343734652f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div>",
        "id": 352502151,
        "sender_full_name": "Cameron M",
        "timestamp": 1682420320
    },
    {
        "content": "<p>Hello and thanks for reaching out! The <code>component-model</code> feature flag of Wasmtime should be relatively robust at this point. I haven't had a chance to go back and update all the documentation to remove the warnings, but you won't be the first to kick the tires and rely on it at least. Support should be complete enough for your use case, although do feel free to file issues if you encounter problems.</p>",
        "id": 352551011,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682432330
    },
    {
        "content": "<p>Use cases such as your and experiences along the lines of \"everything is awful\" from \"everything is fantastic please stabilize\" are both quite useful to us!</p>",
        "id": 352551138,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682432358
    },
    {
        "content": "<p>Thanks <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> I'll be sure to report back with any issues, but so far the experience has been pretty painless</p>",
        "id": 352572764,
        "sender_full_name": "Cameron M",
        "timestamp": 1682436805
    }
]