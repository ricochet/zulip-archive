[
    {
        "content": "<p>Is there a reason that <code>wit-parser</code> doesn't use something like <a href=\"https://docs.rs/peginator/0.4.0/peginator/\">https://docs.rs/peginator/0.4.0/peginator/</a> ? That would make it very explicit precisely what grammar is supported. Currently, there are WIT syntax docs in the component model repo that are not synchronized with what the actual code does.</p>",
        "id": 311853367,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669218708
    },
    {
        "content": "<p>I'm thinking something like having a <code>wit-ast</code> crate which is just the output from <code>peginator</code>.</p>",
        "id": 311853520,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669218757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> ^</p>",
        "id": 311855843,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669219396
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260875\">@Nathaniel McCallum</span>  I'm not sure of any historical reasons for not using a parser generator but w.r.t PEG specifically, in my experience error recovery and/or synchronization is always quite painful.</p>",
        "id": 311863915,
        "sender_full_name": "Brian",
        "timestamp": 1669221839
    },
    {
        "content": "<p>PEGs also tend to be a pretty heavy dependency which won't be ideal to include, especially if at some point  the goal is to expose<code>wit</code> parsing / componentizing as a lightweight component itself.</p>",
        "id": 311864510,
        "sender_full_name": "Brian",
        "timestamp": 1669222005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> Does the difference between dependency and build-dependecy change that equasion?</p>",
        "id": 311865246,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669222256
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260875\">@Nathaniel McCallum</span> That's a good question and probably implementation specific. But the storage cost of PEGs (via packrat memoization) is proportional to the length of the input string. FWIW my experience was mainly with <code>pest</code> and i saw a lot of bloat as result of the generated code.</p>",
        "id": 311868159,
        "sender_full_name": "Brian",
        "timestamp": 1669223160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> packrat memoization is optional for peginator.</p>",
        "id": 311868436,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669223238
    },
    {
        "content": "<p>To be clear, I'm trying to solve a narrow problem which is discontinuity between implementation and documentation.</p>",
        "id": 311868737,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669223336
    },
    {
        "content": "<p>I'm aware there are other considerations.</p>",
        "id": 311868755,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669223342
    },
    {
        "content": "<p>I'm not vying for a specific solution. Only that the discontinuity between impl and docs needs to be solved.</p>",
        "id": 311868837,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669223380
    },
    {
        "content": "<p>I understand. I'm just not entirely convinced that PEGs are the way to address that given the instability of WIT so-far. This sounds like a good topic for the next component tooling meeting next Friday.</p>",
        "id": 311869649,
        "sender_full_name": "Brian",
        "timestamp": 1669223660
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> The instability is precisely the reason why discontinuity between the grammar and implementation needs to be addressed.</p>",
        "id": 311872851,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1669224760
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260875\">@Nathaniel McCallum</span>  <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I have no idea if this is in-bounds for this type of discussion, but here goes:  Any chance that the spec for WIT files (or whatever the ultimate name is for the object definitions) being in friendly format for many languages? I'd probably argue for yacc or Antlr4 but I'm open to just about anything that has a broad array of languages supported.  (see also: <a href=\"https://github.com/rrevenantt/antlr4rust\">https://github.com/rrevenantt/antlr4rust</a>) </p>\n<p>Barring that, what about some type of strategy where the already parsed and checked AST is made visible in other languages?  The strategy that the protoc-* generator(s) use for protobuf is super convenient.  Basically, they define a protobuf object (of course!) that represents an input to the protobuf  compiler.  That object already has all the tricky stuff done like syntax checking, resolving import paths, checking that everything is defined properly, etc.  So, for example, the order that you receive each input to the protobuf compiler as an extension writer is topological so everything is defined before it is used, and so forth.  Writing a new (language) binding for it is quite easy because you just walk around on the already validated objects to pull out the bits that you care about and then output whatever text you want based on that.</p>\n<p>Thoughts?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rrevenantt/antlr4rust\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cb8dc9eef4692f338d0159f4786f4f8c8dd7b517\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363064656633383934306537633837383663343933323763343466666535656635653233656563646164656666313431313630393637663761666136303835642f72726576656e616e74742f616e746c723472757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rrevenantt/antlr4rust\" title=\"GitHub - rrevenantt/antlr4rust: ANTLR4 parser generator runtime for Rust programming laguage\">GitHub - rrevenantt/antlr4rust: ANTLR4 parser generator runtime for Rust programming laguage</a></div><div class=\"message_embed_description\">ANTLR4 parser generator runtime for Rust programming laguage  - GitHub - rrevenantt/antlr4rust: ANTLR4 parser generator runtime for Rust programming laguage</div></div></div>",
        "id": 316981455,
        "sender_full_name": "Ian Smith",
        "timestamp": 1671551570
    },
    {
        "content": "<p>ps. I'm a golang nerd.</p>",
        "id": 316981563,
        "sender_full_name": "Ian Smith",
        "timestamp": 1671551606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552088\">@Ian Smith</span> that's definitely the goal!  The <code>wit-parser</code> crate is intended to be the \"take stuff in and produce a fully-resolved AST\" and right now there's just no definition for taking that AST to something like a JSON blob for consumption elsewhere. Nothing stopping it from being added though.</p>\n<p>For the grammar of WIT I also agree it would be good to draw up a more formal grammar. I don't know how to do that myself though so it'd need to be contributed.</p>",
        "id": 319217041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1672759027
    },
    {
        "content": "<p>I don't know anything about rust, but I know a lot about antlr.  If you want to do a formal grammar via Antlr (or yacc or similar) I can help.  </p>\n<p>Is it currently implemented with a hand coded parser?</p>",
        "id": 319218234,
        "sender_full_name": "Ian Smith",
        "timestamp": 1672759419
    },
    {
        "content": "<p>Yes currently it's hand coded, and that doesn't necessarily have to be replaced, just having a reference would be a good start in something formal</p>",
        "id": 319219400,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1672759761
    },
    {
        "content": "<p>Is the hand coded version stable or is still undergoing a lot of change?</p>",
        "id": 319221918,
        "sender_full_name": "Ian Smith",
        "timestamp": 1672760511
    },
    {
        "content": "<p>Lot of change unfortunately</p>",
        "id": 319222154,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1672760559
    },
    {
        "content": "<p>np, I can hack together something in Antlr pretty fast once you are convinced the parser is in a reasonable state</p>",
        "id": 319222372,
        "sender_full_name": "Ian Smith",
        "timestamp": 1672760633
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552088\">@Ian Smith</span> do you have a work in progress anywhere yet? I'd be interested in helping out or writing tests.</p>",
        "id": 319606616,
        "sender_full_name": "Jarrod Overson",
        "timestamp": 1672931674
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552088\">@Ian Smith</span> would antlr also be useful for making a VS Code extension for improved syntax highlighting?</p>",
        "id": 366630846,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1686864480
    },
    {
        "content": "<p>Also <a href=\"https://crates.io/crates/pest\">https://crates.io/crates/pest</a> is an another PEG parser, appears to be more popularly used and fairly easy to write parsing statements</p>",
        "id": 402857443,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1700301319
    }
]