[
    {
        "content": "<p>Hello everyone,</p>\n<p>I've been trying to use <code>wasm-tools compose</code> to combine WebAsembly Components together, but having some trouble getting <code>config.yml</code> to give me a single instantiation for a shared state.</p>\n<p>Say there's a <code>count</code> that is stored in a common component, with an <code>increment</code> and <code>show</code> component, which are composed together in an <code>aggregate</code> component.</p>\n<p>The idea is to verify that both paths show the same state. Right now with the way I'm composing them, it looks like I have two different instantiations?</p>\n<p><a href=\"/user_uploads/15107/7q1gZMC6dstQq4k2o2m-IVZP/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/7q1gZMC6dstQq4k2o2m-IVZP/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/7q1gZMC6dstQq4k2o2m-IVZP/image.png\"></a></div><p>I've got a r<a href=\"https://github.com/DougAnderson444/compose-example\">eproducable, testable example here</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">search</span><span class=\"o\">-</span><span class=\"n\">paths</span>:\n  <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">was32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span>\n\n<span class=\"n\">dependencies</span>:\n  <span class=\"nc\">increment</span>:<span class=\"nc\">increment</span><span class=\"o\">/</span><span class=\"n\">increase</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">increment</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"o\">/</span><span class=\"n\">display</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">show</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">/</span><span class=\"n\">change</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">/</span><span class=\"n\">current</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"n\">instantiations</span>:\n  <span class=\"nc\">root</span>:\n    <span class=\"nc\">arguments</span>:\n      <span class=\"nc\">increment</span>:<span class=\"nc\">increment</span><span class=\"o\">/</span><span class=\"n\">increase</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">increment</span>\n<span class=\"w\">      </span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"o\">/</span><span class=\"n\">display</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">show</span>\n<span class=\"w\">  </span><span class=\"n\">increment</span>:\n    <span class=\"nc\">arguments</span>:\n      <span class=\"nc\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">/</span><span class=\"n\">change</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">counter</span>\n<span class=\"w\">  </span><span class=\"n\">show</span>:\n    <span class=\"nc\">arguments</span>:\n      <span class=\"nc\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">/</span><span class=\"n\">current</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">counter</span>\n</code></pre></div>\n<p>The Ask: What does the <code>config.yml</code> need to look like in order for there to be just 1 <code>count</code> component instance? I've tried a bunch of combinations but can't seem to get a single instance of the shared state.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/DougAnderson444/compose-example\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/78594914933ede139697eb1eb88252e05499f21a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663231336231333833663761393534306462396237653330373432303335613538616136386662343662633661323362313861613761656531616233633533362f446f7567416e646572736f6e3434342f636f6d706f73652d6578616d706c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/DougAnderson444/compose-example\" title=\"GitHub - DougAnderson444/compose-example: wasm-compose with shared state\">GitHub - DougAnderson444/compose-example: wasm-compose with shared state</a></div><div class=\"message_embed_description\">wasm-compose with shared state. Contribute to DougAnderson444/compose-example development by creating an account on GitHub.</div></div></div>",
        "id": 410514143,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1703914320
    },
    {
        "content": "<p>Note that we get 1 instance with 1 interface (works as expected) but 2 instance with 2 interfaces to the same dependency.</p>\n<p><strong>So I should clarify:</strong> What config do we need in order to get 1 instance from 2 different interfaces from the same <code>.wasm</code> file?</p>",
        "id": 410631900,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1704027007
    },
    {
        "content": "<p>Give this config a try:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">dependencies</span>:\n  <span class=\"nc\">increment</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">increment</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">show</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">show</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"n\">counter</span>: <span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"n\">instantiations</span>:\n  <span class=\"nc\">root</span>:\n    <span class=\"nc\">arguments</span>:\n      <span class=\"nc\">increment</span>:<span class=\"nc\">increment</span><span class=\"o\">/</span><span class=\"n\">increase</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">increment</span>\n<span class=\"w\">      </span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"o\">/</span><span class=\"n\">display</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">show</span>\n<span class=\"w\">  </span><span class=\"n\">increment</span>:\n    <span class=\"nc\">arguments</span>:\n      <span class=\"nc\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">/</span><span class=\"n\">change</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">counter</span>\n<span class=\"w\">  </span><span class=\"n\">show</span>:\n    <span class=\"nc\">arguments</span>:\n      <span class=\"nc\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">/</span><span class=\"n\">current</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span>: <span class=\"nc\">counter</span>\n</code></pre></div>",
        "id": 410651512,
        "sender_full_name": "Peter Huene",
        "timestamp": 1704047156
    },
    {
        "content": "<p>There should be one dependency entry per component wasm so that you don't end up with duplicated components in the composition.</p>",
        "id": 410651685,
        "sender_full_name": "Peter Huene",
        "timestamp": 1704047321
    },
    {
        "content": "<p>Very soon there will be a new language for composing (and virtualizing) components that's actively in development, so the above might look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">counter</span>:<span class=\"nc\">count</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">current</span>: <span class=\"nc\">counter</span><span class=\"p\">.</span><span class=\"n\">current</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">increment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">increment</span>:<span class=\"nc\">increment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">change</span>: <span class=\"nc\">counter</span><span class=\"p\">.</span><span class=\"n\">change</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">aggregate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">aggregate</span>:<span class=\"nc\">aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">display</span>: <span class=\"nc\">shower</span><span class=\"p\">.</span><span class=\"n\">display</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">increase</span>: <span class=\"nc\">increment</span><span class=\"p\">.</span><span class=\"n\">increase</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">aggregate</span><span class=\"p\">.</span><span class=\"n\">controls</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 410651963,
        "sender_full_name": "Peter Huene",
        "timestamp": 1704047689
    },
    {
        "content": "<p>hopefully that makes it much clearer in terms of how many instances there are and how they're wired up (note: the <code>...</code> syntax means \"fill in the blanks with shared imports from the composed component\")</p>",
        "id": 410652011,
        "sender_full_name": "Peter Huene",
        "timestamp": 1704047760
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> ! Since there's a new config language on the way soon, no need to spend precious time on the old one. Looking forward to checking out the new language.</p>",
        "id": 410718705,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1704111430
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>, </p>\n<p>I know the new language is coming, but I thought I'd pass back some feedback I got after I apply that suggested config. It errors with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">compose</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">yml</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">aggregate</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">aggregate</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">increment</span>:<span class=\"nc\">increment</span><span class=\"o\">/</span><span class=\"n\">increase</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"n\">because</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">dependency</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">increment</span>:<span class=\"nc\">increment</span><span class=\"o\">/</span><span class=\"n\">increase</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">found</span>\n\n<span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"o\">/</span><span class=\"n\">display</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">will</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"n\">because</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">dependency</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"o\">/</span><span class=\"n\">display</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">found</span>\n\n<span class=\"n\">error</span>: <span class=\"nc\">no</span><span class=\"w\"> </span><span class=\"n\">dependencies</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">aggregate</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">were</span><span class=\"w\"> </span><span class=\"n\">found</span>\n</code></pre></div>\n<p>I think this has something to do with the naming of the dep handle? It seems to want the name to be the same as the dep itself.</p>\n<p>Reproduction is here: <a href=\"https://github.com/DougAnderson444/compose-example/blob/master/config.yml\">https://github.com/DougAnderson444/compose-example/blob/master/config.yml</a></p>",
        "id": 411972089,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1704818601
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"623045\">@DougAnderson444 | PeerPiper.io</span>.  Sorry for the delayed response!</p>\n<p>When I now clone your repo, switch to a nightly Rust, and do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">build</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">compose</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">yml</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">aggregate</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">t</span>\n</code></pre></div>\n<p>I get a composed component and looking over it, I see instance 10 (counter) being shared between the instances for increment and show.</p>\n<p>I'm not running into the issue you are for some reason.</p>",
        "id": 413044846,
        "sender_full_name": "Peter Huene",
        "timestamp": 1705361836
    },
    {
        "content": "<p>By the way, there's new syntax in <a href=\"https://github.com/peterhuene/wac\">wac</a> that makes the alternative example even easier:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">composed</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">counter</span>:<span class=\"nc\">count</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">shower</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">counter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">increment</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">increment</span>:<span class=\"nc\">increment</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">counter</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">aggregate</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">aggregate</span>:<span class=\"nc\">aggregate</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">shower</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">increment</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">aggregate</span><span class=\"o\">..</span><span class=\"p\">.;</span>\n</code></pre></div>\n<p>The <code>...&lt;instance&gt;</code>syntax in the instantiation arguments \"spreads\" the exports of the instance to any matching instantiation args and the <code>&lt;expr&gt;...</code> syntax in the export statement \"spreads\" the exports of the expression (just <code>aggregate</code> in this case) as exports of the composed component.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/peterhuene/wac\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/707c59c3d55b23be112916c50309cea31d7a4a60\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346636323965393336653464376330643337323762356131316166613138643864356437313563363739663565306432633261616338336261336662306566372f70657465726875656e652f776163)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/peterhuene/wac\" title=\"GitHub - peterhuene/wac: WebAssembly Composition (WAC) tooling\">GitHub - peterhuene/wac: WebAssembly Composition (WAC) tooling</a></div><div class=\"message_embed_description\">WebAssembly Composition (WAC) tooling. Contribute to peterhuene/wac development by creating an account on GitHub.</div></div></div>",
        "id": 413045162,
        "sender_full_name": "Peter Huene",
        "timestamp": 1705362036
    },
    {
        "content": "<p>You'd encode the above with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wac</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">composition</span><span class=\"p\">.</span><span class=\"n\">wac</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">define</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">counter</span>:<span class=\"nc\">count</span><span class=\"o\">=</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">count</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">shower</span>:<span class=\"nc\">show</span><span class=\"o\">=</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">show</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">increment</span>:<span class=\"nc\">increment</span><span class=\"o\">=</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">increment</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">aggregate</span>:<span class=\"nc\">aggregate</span><span class=\"o\">=</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">aggregate</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>",
        "id": 413045559,
        "sender_full_name": "Peter Huene",
        "timestamp": 1705362286
    },
    {
        "content": "<p>in the future where a component registry exists, those <code>-d</code> options would disappear and the tool would just fetch them from the registry (client support already exists in wac, but there's no registry servers available just yet)</p>",
        "id": 413045634,
        "sender_full_name": "Peter Huene",
        "timestamp": 1705362334
    },
    {
        "content": "<blockquote>\n<p>\"It's not you, it's me.\"</p>\n</blockquote>\n<p>I must have had <em>too old</em> of a version of <code>wasm-tools</code> or <code>rust</code>, after updating both, switching to <code>nightly</code>, it compiles and tests pass. This is great! It works!</p>\n<p>Thanks for your help <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>! How long before we use the new <code>wac</code> language?</p>",
        "id": 413210679,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1705428021
    },
    {
        "content": "<p>Also I want to just thank you in general -- this Component Model is so cool, I'm really looking forward to building some neat tech with it!</p>",
        "id": 413210898,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1705428084
    },
    {
        "content": "<blockquote>\n<p>Thanks for your help @Peter Huene! How long before we use the new wac language?</p>\n</blockquote>\n<p>You can use it today if you install it directly from <a href=\"https://github.com/peterhuene/wac\">https://github.com/peterhuene/wac</a>, but I hope on integrating it into <code>wasm-tools compose</code> sooner than later.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/peterhuene/wac\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/edae82ab8c3ca7d7920b3c62dae525f94c71a76d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363231336536396531333536616236633630383665313361636537333030636134316134303633306638336633663433343731313435616131326230623038362f70657465726875656e652f776163)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/peterhuene/wac\" title=\"GitHub - peterhuene/wac: WebAssembly Composition (WAC) tooling\">GitHub - peterhuene/wac: WebAssembly Composition (WAC) tooling</a></div><div class=\"message_embed_description\">WebAssembly Composition (WAC) tooling. Contribute to peterhuene/wac development by creating an account on GitHub.</div></div></div>",
        "id": 413226723,
        "sender_full_name": "Peter Huene",
        "timestamp": 1705434017
    }
]