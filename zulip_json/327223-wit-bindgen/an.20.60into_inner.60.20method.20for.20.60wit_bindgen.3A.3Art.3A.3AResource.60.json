[
    {
        "content": "<p>Is there a fundamental reason why <code>wit_bindgen::rt::Resource&lt;T: RustResource&gt;</code> doesn't have an <code>into_inner</code> method allowing you to drop the resource handle and take back ownership of the <code>T</code> instance?  If not, I'd be happy to make a PR to add it.<br>\nContext: I'm updating <code>wasi-virt</code> to use a more recent WASI snapshot based on resources, and such a method would make my life easier.</p>",
        "id": 401252731,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699572109
    },
    {
        "content": "<p>Nah that seems reasonable to me to add!</p>",
        "id": 401252805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1699572150
    },
    {
        "content": "<p>Hmm, now I'm not sure it's that easy.  If the guest calls into the host to drop the handle, it will call back into the guest to run the <code>dtor</code>, right?  But if it has already moved out of the <code>Box</code> that the handle referred to, the <code>dtor</code> will try to drop the <code>Box</code> it just moved out of.</p>",
        "id": 401253935,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699572944
    },
    {
        "content": "<p>It's like I need some way to say to the host \"drop this handle, but don't call the dtor\".</p>",
        "id": 401254062,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699573023
    },
    {
        "content": "<p>Or else store the <code>T</code> in a <code>Box&lt;Option&lt;T&gt;&gt;</code> and <code>.take()</code> it.</p>",
        "id": 401254192,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699573097
    },
    {
        "content": "<p>Hm true yeah, invoking drop without the destructor is the topic of <a href=\"https://github.com/WebAssembly/component-model/issues/238\">this issue</a>. </p>\n<p>To allow <code>&amp;mut self</code> in methods I've already wanted to replace the representation of <code>Box&lt;T&gt;</code> with <code>Box&lt;RefCell&lt;T&gt;&gt;</code>. Throwing an <code>Option</code> in there I don't think would be too bad</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/238\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ba496df527ac6132e10648e7075451c88dfb8307\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653639323630666638303066656466363863343638393934663365373163366630343034663565636233616537636531393465333239373665303031613631322f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323338)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/238\" title=\"CABI: Add a `resource.consume` method for owned handles 路 Issue #238 路 WebAssembly/component-model\">CABI: Add a `resource.consume` method for owned handles 路 Issue #238 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">Motivation At the moment, there is no way to convert an owned resource handle inside the resource-exporting component back into an owned value of the type that implements the resource. While the sp...</div></div></div>",
        "id": 401257276,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1699574982
    },
    {
        "content": "<p>Yeah, <code>resource.consume</code> would be great.  Meanwhile, I'm pursuing the <code>Option</code> approach and have managed to break a bunch of runtime tests.  Probably something dumb I did, but not obvious yet.</p>",
        "id": 401257481,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699575111
    },
    {
        "content": "<p>If you want to get really nasty we can probably skip the <code>Option</code> with a <code>ptr::read</code> plus a global saying \"hey dtor don't actually do anything\"</p>",
        "id": 401258103,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1699575462
    },
    {
        "content": "<p>I think the <code>Option</code> approach is fine until we have <code>resource.consume</code>.  I think I see why the tests are failing now; I need to update the binding generator to generate <code>*const Option&lt;X&gt;</code> instead of <code>*const X</code>.</p>",
        "id": 401258495,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699575662
    },
    {
        "content": "<p>Got the tests passing; will post a PR once I've verified it does what I need in <code>wasi-virt</code>.</p>",
        "id": 401259301,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699576064
    }
]