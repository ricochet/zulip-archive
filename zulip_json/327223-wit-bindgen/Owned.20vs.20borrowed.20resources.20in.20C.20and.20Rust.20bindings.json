[
    {
        "content": "<p>While implementing the C++ bindings for resources very similar to the Rust bindings I came across an interesting question: </p>\n<p>Why does C use different types for owned and borrowed handles, thus saving on memory and creating type safety for calls while Rust uses a fused type with a bool distinguishing the handle type? I don't think the type is ever changed across the lifetime of the handle object.</p>\n<p>If it is to easily enable borrowing from an owned handle, e.g. to call member functions, I think there <em>might</em> be another way …  wrapping the shared handle type in the owned type and implementing <code>Deref</code> <span aria-label=\"ghost\" class=\"emoji emoji-1f47b\" role=\"img\" title=\"ghost\">:ghost:</span></p>\n<p>I feel getting rid of the <code>if</code> inside the destructor and the added type safety of the interface might be worth considering alternatives to the current implementation.</p>",
        "id": 379760658,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690628419
    },
    {
        "content": "<p>I felt that generating a single type for Rust would result in the most idiomatic code, e.g. <code>MyResource</code> for owned values and <code>&amp;MyResource</code> for borrowed ones.  I agree that it's not ideal from a performance perspective.  I'm not seeing what it lacks in type safety; perhaps you could elaborate on that?  In any case, I'm open to alternatives (especially if someone else implements them <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> ).</p>",
        "id": 380730034,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690901384
    },
    {
        "content": "<p>If I guess correctly it will gladly pass a borrowed resource to a function expecting an owned resource (by value), given that the creating function returned an owned handle pointing to a borrowed resource (owned=false). Which might be not the usual way to design resource interfaces.</p>\n<p>I fully get the single type usability benefit, perhaps I can come up with a viable alternative which also prevents the above described scenario at compile time. I will take a try in the coming days.</p>",
        "id": 380908089,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690953984
    },
    {
        "content": "<p>And I clearly see that good usability gets a bit more tricky if you introduce two types.</p>",
        "id": 380909563,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690954549
    },
    {
        "content": "<p>I took a try at implementing it and wanted to start with a test case, sadly I ran into <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L774\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wit-bindgen/src/lib.rs#L774</a> (wasmtime doesn't support resources on host side yet, issue #6722)</p>\n<p>So I guess I need to replan to use my unfinished C++ host environment and WAMR.</p>",
        "id": 382360906,
        "sender_full_name": "Christof Petig",
        "timestamp": 1691327997
    },
    {
        "content": "<p>Alex was quicker doing this change for Rust <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/643\">https://github.com/bytecodealliance/wit-bindgen/pull/643</a> , thanks a lot!</p>\n<p>I created a resource example implementation with C, C++, Rust guests and a WAMR based C++ host at <a href=\"https://github.com/cpetig/resource-demo/\">https://github.com/cpetig/resource-demo/</a> .</p>\n<p>But now the C binding feels a bit off, the most straightforward way of calling the functions results in double free/drop - and the distinction between owned and borrowed feels awkward compared to the Rust code.<br>\n<a href=\"https://github.com/cpetig/resource-demo/blob/main/guest-c/main.c\">https://github.com/cpetig/resource-demo/blob/main/guest-c/main.c</a></p>\n<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> do you see a good reason to keep both types in the C binding (a typedef might still document the own vs borrow information in the header but still enable calling functions on owned resources more easily).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/643\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/53a05e1b743ec291d2abf7f879648289c6d4cf46\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376662323136383132316666626139346331303764616533323663323665643134336363376437643438663838323661333066616434666264636331316130392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363433)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/643\" title=\"Remove `owned` boolean from Rust resources by alexcrichton · Pull Request #643 · bytecodealliance/wit-bindgen\">Remove `owned` boolean from Rust resources by alexcrichton · Pull Request #643 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">No longer needed now that there's only one destructor function from #642</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/resource-demo/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/40dd84da8ad0ec0c47ae3a56da44f0e3b34060f5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643238376133376561306364623035656132363666383235656538643032623063663362633933643238616332363564633462366434383765373262373836362f6370657469672f7265736f757263652d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/resource-demo/\" title=\"GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments\">GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</a></div><div class=\"message_embed_description\">A demo showing WASM component model resources in various environments - GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</div></div></div>",
        "id": 386116439,
        "sender_full_name": "Christof Petig",
        "timestamp": 1692458698
    },
    {
        "content": "<p>I made the own and borrow types separate to help guard against using one where the other was expected (e.g. calling <code>resource-drop-own</code> with a borrow handle).  Now that there's only one kind of <code>resource-drop</code> function, maybe that's not a factor anymore.</p>",
        "id": 386396723,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692626077
    },
    {
        "content": "<p>As long as there's no chance of own/borrow type errors that would otherwise be caught at compile time, I'm fine with combining the types.</p>",
        "id": 386397196,
        "sender_full_name": "Joel Dice",
        "timestamp": 1692626179
    }
]