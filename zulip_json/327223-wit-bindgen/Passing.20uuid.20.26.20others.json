[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"781530\">ocxide</span> has marked this topic as unresolved.</p>",
        "id": 483354710,
        "sender_full_name": "Notification Bot",
        "timestamp": 1732050992
    },
    {
        "content": "<p>I realize that this \"conversion problem\" is not about passing array-like types but about passing meaningful types.</p>\n<p>Creating a wrapper library that handles the conversion from primitives to UUID, etc would be titanic, specially as my API grows.</p>\n<p>I think I would need a way to tell wit-bindgen how to transform from defined records to meaningful types such as UUID, datetime or any custom type of my own.</p>",
        "id": 483356087,
        "sender_full_name": "ocxide",
        "timestamp": 1732051590
    },
    {
        "content": "<p>Would something like <code>record uuid { upper-half: u64, lower-half: u64 }</code> fit your needs?</p>",
        "id": 483357023,
        "sender_full_name": "Joel Dice",
        "timestamp": 1732052022
    },
    {
        "content": "<p>Not exactly, I would like that wit-bindgen converts from this record \"uuid\" to the actual UUID type from the uuid crate.</p>",
        "id": 483357233,
        "sender_full_name": "ocxide",
        "timestamp": 1732052108
    },
    {
        "content": "<p>Ah, so you're looking for a kind of \"generated <code>From</code> trait implementation\" feature</p>",
        "id": 483357596,
        "sender_full_name": "Joel Dice",
        "timestamp": 1732052170
    },
    {
        "content": "<p>Yes, it would be great</p>",
        "id": 483357831,
        "sender_full_name": "ocxide",
        "timestamp": 1732052229
    },
    {
        "content": "<p>Presumably wit-bindgen would need to have knowledge of the <code>uuid</code> crate (and any others containing types you wanted <code>From</code> impls for) to actually generate something like that.</p>",
        "id": 483358220,
        "sender_full_name": "Joel Dice",
        "timestamp": 1732052411
    },
    {
        "content": "<blockquote>\n<p>Would there be any perf gain by passing the UUID as a tuple?</p>\n</blockquote>\n<p>I think the pragmatic answer here is \"probably not measurably unless you are sending millions (?) of them at a time\"</p>",
        "id": 483358835,
        "sender_full_name": "Lann Martin",
        "timestamp": 1732052707
    },
    {
        "content": "<p>Yes, I think that this conversion could only work with user-defined records as wit-bindgen would have to know whenever I want a custom type from a primitive.</p>\n<p>For example, even if I can express month as a number, in order to transform it to a struct \"Month\" I would need to create a </p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>record month { value: u64 }\n</code></pre></div>\n<p>and then somehow link the wit record to the rust struct.</p>",
        "id": 483358869,
        "sender_full_name": "ocxide",
        "timestamp": 1732052723
    },
    {
        "content": "<p>Is there such thing as custom mappings?</p>",
        "id": 483361843,
        "sender_full_name": "ocxide",
        "timestamp": 1732054016
    },
    {
        "content": "<p>You can use the <code>with</code> option to the <code>bindgen!</code> macro to tell it to use already-generated bindings on a per-interface basis, but there's no way to say e.g. \"use this <code>Uuid</code> type instead of generating a type for the <code>foo:foo/foo#uuid</code> WIT type\".</p>\n<p>It's <code>wit-bindgen</code>'s job to generate code that marshals each type to and from its canonical ABI representation, and it can't do that if it doesn't know the layout of the type ahead of time.  The way it currently has that knowledge is by being the one that generates the type.</p>\n<p>Hypothetically, <code>wit-bindgen</code> could provide one or more traits which take care of that ABI marshaling process, which would allow you to supply your own type to the binding generator as long as it implements those traits.  That's what the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/trait.Lift.html\">Lift</a> and <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/trait.Lower.html\">Lower</a> traits do in Wasmtime's host interface for working with components.  Adding something similar for the guest side seems possible.  <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> did you ever consider something like that?</p>",
        "id": 483371177,
        "sender_full_name": "Joel Dice",
        "timestamp": 1732058291
    },
    {
        "content": "<p>By those traits I think you might refer to something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">FromABI</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ABI</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">from_abi</span><span class=\"p\">(</span><span class=\"n\">abi</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"p\">::</span><span class=\"n\">ABI</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">IntoABI</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"nc\">ABI</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">into_abi</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">Self</span><span class=\"p\">::</span><span class=\"n\">ABI</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This way, wit-bindgen would know any information it needs for transporting data between host and guests.</p>\n<p>That being said, I agree that  telling <code>wit-bindgen</code> to use certain types instead of generating new ones seems to be out of its responsibility and a bit complicated since some rust types generated differ between caller and owner. <br>\nE.g. strings that are represented as <code>&amp;str</code> when calling a function and represented as <code>String</code> when receiving the response.</p>",
        "id": 483390710,
        "sender_full_name": "ocxide",
        "timestamp": 1732067639
    },
    {
        "content": "<p>Still, I need that my API receives and returns these custom types.</p>\n<p>As I said, a solution for this problem would be to create a wrapper library that exposes every function, type, etc generated by <code>wit-bindgen</code> &amp; <code>bindgen!</code> but with conversions from/to my custom types. That sounds like a lot of work and maintenance,  Is there a way to automatically do this? Is there any other method that prevents me from coding a huge glue library?</p>",
        "id": 483391745,
        "sender_full_name": "ocxide",
        "timestamp": 1732068286
    },
    {
        "content": "<p>I’ve been dealing with this by writing a wrapper crate that re-exports the types I don’t need to modify, and defining new ones when I do need to modify things. It hasn’t been a huge burden to do so. As someone who has worked on wit-bindgen as well as its predecessors I find it more straightforward to spend some time writing some glue code (I’ve taken to calling it “chrome” instead) on top of the bindgen and not worrying about generalizing bindgen to do everything for me.</p>",
        "id": 483401703,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1732075095
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 483401971,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1732075272
    },
    {
        "content": "<blockquote>\n<p>@Alex Crichton did you ever consider something like that?</p>\n</blockquote>\n<p>Not yet, but not because I don't think it'd be plausible! One of the tricky parts is using Rust generics to hook up to multiple parameters to a function which has historically been something difficult, but I think it'd be pretty nice to make things more extensible on the Rust side of things</p>",
        "id": 483515463,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732117520
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/channel/327223-wit-bindgen/topic/Passing.20uuid.20.26.20others/near/483401703\">said</a>:</p>\n<blockquote>\n<p>I’ve been dealing with this by writing a wrapper crate that re-exports the types I don’t need to modify, and defining new ones when I do need to modify things.</p>\n</blockquote>\n<p>Do you have any public repo demonstrating this approach that I can review? I am currently experimenting with creating a glue crate as you suggested.</p>\n<p>Specifically, I am using the <code>wit_bindgen::generate!</code> macro within a module of the glue crate and then write the glue functions, types, and traits. However, upon examining the expanded code, it seems this macro is intended to be called at the root of the guest crate.</p>\n<p>The main issue is that the generated <code>export!</code> macro, which expects a struct implementing the auto-generated <code>Guest</code> trait. When I try to forward this macro to the guest crate by re-exporting it, I encounter a limitation: the macro's visibility is restricted to the crate where it is defined, preventing it from being re-exported.</p>\n<p>So the problem is that the <code>wit_bindgen</code> macros seem designed to be executed directly within the guest crate, while my goal is for the glue code to reside in a separate crate since there will be multiple guest crates sharing the same WebAssembly interface.</p>\n<p>How do you address this issue in your glue crate? Any advice or examples would be greatly appreciated. Thanks!</p>",
        "id": 483776630,
        "sender_full_name": "ocxide",
        "timestamp": 1732218306
    },
    {
        "content": "<p>Although I am a bit late to answer, for uuid either a record or a fixed length list <a href=\"https://github.com/WebAssembly/component-model/issues/181\">https://github.com/WebAssembly/component-model/issues/181</a> are best fit, but the second option is not implemented in bindings generators yet, iirc.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/181\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d5747ed2c88743d28d8454af0f77e851ebb926ab/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316132633966323931303661323934613738356335643963383262623131336365323661636233376165306537353339383561336266373564663431396634342f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f313831&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/181\" title=\"Fixed length arrays · Issue #181 · WebAssembly/component-model\">Fixed length arrays · Issue #181 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Rust has fixed length arrays whose type is written as [u8;32] for a 32-byte array. You can achieve this in the current wit specification by doing tuple&lt;u8,u8 ... u8&gt; (with 32 u8s). Could list&lt;u8,32...</div></div></div>",
        "id": 484862857,
        "sender_full_name": "Christof Petig",
        "timestamp": 1732782272
    },
    {
        "content": "<blockquote>\n<p>The main issue is that the generated <code>export!</code> macro, which expects a struct implementing the auto-generated <code>Guest</code> trait. When I try to forward this macro to the guest crate by re-exporting it, I encounter a limitation: the macro's visibility is restricted to the crate where it is defined, preventing it from being re-exported.</p>\n</blockquote>\n<p>I think the best example is: <a href=\"https://github.com/bytecodealliance/wasi-rs\">https://github.com/bytecodealliance/wasi-rs</a></p>\n<p>I like to think the bindings are really low-level and that you will almost always have a thin wrapper  in most language to make them more user-friendly / idiomatic in their respective language.</p>\n<p>Otherwise, I wanted to reference: <a href=\"https://github.com/protocolbuffers/protobuf/issues/2224\">https://github.com/protocolbuffers/protobuf/issues/2224</a> which I've been reading recently, and is about similar requirements in Protobuf <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasi-rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/84927e1a08e12c346e570fbd79de2ee65fde4384/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626530316236646531623633623238343433626166366633623862306361656563343933343238386434313964626563343835386138303362643035376364652f62797465636f6465616c6c69616e63652f776173692d7273&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasi-rs\" title=\"GitHub - bytecodealliance/wasi-rs: Experimental WASI API bindings for Rust\">GitHub - bytecodealliance/wasi-rs: Experimental WASI API bindings for Rust</a></div><div class=\"message_embed_description\">Experimental WASI API bindings for Rust. Contribute to bytecodealliance/wasi-rs development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/protocolbuffers/protobuf/issues/2224\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/503e7f1233ed61564a1df341450abd15acbdc7a3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613736396661666334346630383836336365366166303065386234666230346661623536336439376364646137663938366435353365313535353965646232642f70726f746f636f6c627566666572732f70726f746f6275662f6973737565732f32323234&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/protocolbuffers/protobuf/issues/2224\" title=\"Provide support for UUID type (a.k.a. GUID) · Issue #2224 · protocolbuffers/protobuf\">Provide support for UUID type (a.k.a. GUID) · Issue #2224 · protocolbuffers/protobuf</a></div><div class=\"message_embed_description\">Filing on behalf of a customer: Protobuf lacks Uuid (Guid in .NET) support out of the box. It would have been nice to have a Well-Known Type (like we do with Timestamp to represent Date and Times) ...</div></div></div>",
        "id": 486584497,
        "sender_full_name": "raskyld",
        "timestamp": 1733514708
    },
    {
        "content": "<p>FWIW I do not personally think that UUID encoding should be standardized in this way. In my experience UUIDs are almost always used as opaque string identifiers in their hex-with-hyphens encoding and using a more compact encoding at the ABI will introduce complexity for every target language that seems unlikely to outweigh the (usually very small) benefits. On the flip side, systems that really need compact encoding are more likely to use smaller integer identifiers in the first place. I understand the appeal of leveraging codegen here but this specific feature isn't something I would choose to invest in. (re: the protobuf issue, as it relates here)</p>",
        "id": 486592476,
        "sender_full_name": "Lann Martin",
        "timestamp": 1733518275
    }
]