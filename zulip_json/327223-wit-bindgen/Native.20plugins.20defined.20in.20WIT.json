[
    {
        "content": "<p>I have been using WIT to define language-neutral interfaces between native code for several months now and consider it a worthwhile extension of its use case.</p>\n<p>Typically I just use unmodified guest code compiled to a shared library by the native compiler and restrict the exported symbols to the small set also exported from my wasm component by using a linker script. </p>\n<p>So the binary interface remains identical between wasm and native with two exceptions:</p>\n<ul>\n<li>using <code>s32</code> for string and list addresses only work on 32 bit machines (rare these days)</li>\n<li>the standard naming for function exports is inconvenient on native (<code>test:example/my-interface.[method]my-object.set</code>)</li>\n</ul>\n<p>So I would like to propose to agree on some conventions to make this use case more viable:</p>\n<ul>\n<li>a pointer sized integer type in WIT (e.g. <code>pointer</code>), this would also help with wasm64, e.g. <a href=\"https://github.com/WebAssembly/wasi-libc/pull/444\">https://github.com/WebAssembly/wasi-libc/pull/444</a> </li>\n<li>bindgen should prefer <code>intptr_t</code>/ <code>size_t</code>(C) or <del><code>* const c_void</code></del>/<code>usize</code> (Rust has known issues with CHERI where these two differ in size) for string and list lowering, this has zero effect on wasm32 and prepares for wasm64</li>\n<li>consistently replace the non-alphanumerical parts of the symbol in the <strong>non-wasm32-target case</strong> with either <code>_</code> (C bindgen), 0xNN (wasm2c) or XNN (w2c2), Rust guest bindgen sadly just discards the module name</li>\n</ul>\n<p>I wil glady provide patches for bindgen (or even the standards docs) if we can agree on a convention here.</p>\n<p>Of course there is no host bindgen compatible with this at the moment, I added a <code>--direct</code> flag to C++ bindgen which will target this use case, but Rust and C would be other interesting host languages. </p>\n<p>PS: At runtime we were able to transparently choose between native compiled plugins, wasm2c AoT compiled wasm or wamr interpreted wasm, by just pointing to a different .so with the same interface.</p>\n<p>PPS: Ways to natively express components composed of multiple core modules (likely each its shared object) will require future design work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/pull/444\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4a76d691799a649d18741ced39733b5d35482104\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343932346332653861373830393839333132383238613566623138366232393362663363646432623239393666656633323735636339636636623937653633632f576562417373656d626c792f776173692d6c6962632f70756c6c2f343434)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/pull/444\" title=\"Support wasm64 by trcrsired · Pull Request #444 · WebAssembly/wasi-libc\">Support wasm64 by trcrsired · Pull Request #444 · WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">I need to make changes to the \"c_header.rs\" file because there are numerous instances where \"size_t\" is mistakenly identified as \"uint32_t,\" which is incompatible with wasm64.</div></div></div>",
        "id": 420787710,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707559546
    },
    {
        "content": "<p>I just found <code>idxtype</code> in the memory64 proposal, so that might be a good type name proposal for wit as well. (I think CHERI compatibility is not high-priority for WIT at the moment)</p>",
        "id": 420790519,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707562427
    },
    {
        "content": "<p>I think it's reasonable to start out at least by using <code>size_t</code> or <code>usize</code> as such for pointer-sized things rather than a 32-bit integer. I'd be wary to generalize too much further into a full-on native plugin system, however. There's a number of semantics about components which do not map well to \"there's only a symbol with an implicit ABI\" such as:</p>\n<ul>\n<li>Canonical options don't map well, such as per-function realloc functions, so everything assumes C's <code>realloc</code> most likely.</li>\n<li>Canonical options such as string encodings don't have anywhere to go, so everything assumes one encoding most likely.</li>\n<li>Naturally there's only one memory address space, but with components there are multiple.</li>\n<li>Resources require nontrivial logic to handle them going between components</li>\n<li>The CanonicalABI.md specification mandates that values are copied between memories, such as <code>list&lt;T&gt;</code>, which requires runtime coordination to achieve this.</li>\n</ul>\n<p>I wouldn't say that WIT/components are a perfect fit for a native plugin system. While WIT and such can be adapted and I realize that it's an attractive target the design trajectory of WIT/components is to be for components/wasm/etc and not to take into account native plugins as well. That brings up a whole host of questions, as you're running into here.</p>\n<p>Overall I want to definitely acknowledge how using WIT for a native plugin system is attractive, and I also want to agree that the changes you're suggesting are definitely welcome insofar as they're furthering hypothetical 64-bit support in the future. I do want to avoid going \"too far\" though, but what that means depends on context. In that sense I'm happy to review changes as they come, for example using pointer-sized types I think is reasonable.</p>",
        "id": 421071444,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707754134
    },
    {
        "content": "<p>Relatedly, I've been exploring the idea of using source-language pointer types in the bindings, such as <code>*mut c_void</code> for the Rust bindings, in order to represent <a href=\"https://github.com/rust-lang/rfcs/pull/3559\">provenance</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rfcs/pull/3559\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/22a2325a1e0fd8f01dede6066f1427db97aff151\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633961306162323136653639666162396337333636663162353361616336373736643437353436303233313162336364616433383635626563313963336664352f727573742d6c616e672f726663732f70756c6c2f33353539)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rfcs/pull/3559\" title=\"RFC: Rust Has Provenance by RalfJung · Pull Request #3559 · rust-lang/rfcs\">RFC: Rust Has Provenance by RalfJung · Pull Request #3559 · rust-lang/rfcs</a></div><div class=\"message_embed_description\">Pointers (this includes values of reference type) in Rust have two components.\n\nThe pointer's \"address\" says where in memory the pointer is currently pointing.\nThe pointer's \"provenance\" says where...</div></div></div>",
        "id": 421077620,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1707755791
    },
    {
        "content": "<p>I also agree that'd be a good idea to switch to!</p>",
        "id": 421079546,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707756352
    },
    {
        "content": "<p>The canonical options and compose layout (if I understand correctly this information is stored outside the core module and not specified in WIT but in e.g. wac) could map to a surrounding shared object doing the copying/conversion between imported .so's - so the mechanism could apply to native components as well, and the glue .so could be auto-generated from the same information.</p>\n<p>But this would be a far future goal for native plugins.</p>\n<p>Do you have any preference on the naming? Is <code>idxtype</code> indead the best name candidate for a new WIT primvaltype? I tend towards the shorter but still unambiguous XNN encoding for names, e.g. <code>testX3AexampleX2FmyX2DinterfaceX2EX5BmethodX5DmyX2DobjectX2Eset</code>, perhaps <code>-</code> should be mapped to <code>_</code> instead of <code>X2D</code>.</p>",
        "id": 421151414,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707781709
    },
    {
        "content": "<p>or more visually creative <code>testBexampleZmy_interfaceOCmethodJmy_objectOset</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  (leveraging that WIT symbols are all lowercase)</p>",
        "id": 421152026,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707782092
    },
    {
        "content": "<p>Oh I'm not sure we need a new type in WIT, instead just updates to the lifting and lowering to use a pointer sized abstraction based on the type of memory. WIT itself doesn't deal with pointers ever at the type layer, just at the ABI layer.</p>\n<p>For naming we will need to be somewhat careful to reserve a namespace for intrinaics and such like those used for resources. Otherwise though I'm hesitant to make this \"too standard\" given my thoughts about so just about anything seems fine</p>",
        "id": 421152291,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707782260
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Native.20plugins.20defined.20in.20WIT/near/421152291\">said</a>:</p>\n<blockquote>\n<p>Oh I'm not sure we need a new type in WIT, instead just updates to the lifting and lowering to use a pointer sized abstraction based on the type of memory. WIT itself doesn't deal with pointers ever at the type layer, just at the ABI layer.</p>\n</blockquote>\n<p>You are right, I have only seen the need in two non standard use cases: </p>\n<p>Wasi thread spawn <a href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#api-walk-through\">https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#api-walk-through</a> (mapping this to wasm64 failed exactly at lacking this datatype) and when emulating returning an object via reference (I will add the zulip discussion link later). </p>\n<p>The second case is very common for not-in-depth-adapted-to-wit APIs which are more common with native interfaces.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#api-walk-through\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c85ac1a7fecb8c5fe790b806302a340124415fe1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663534663363663132396362623962653839373661636335303733313261363336303866373130396634356661626461383961633366303437313561373737642f576562417373656d626c792f776173692d74687265616473)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-threads?tab=readme-ov-file#api-walk-through\" title=\"GitHub - WebAssembly/wasi-threads\">GitHub - WebAssembly/wasi-threads</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-threads development by creating an account on GitHub.</div></div></div>",
        "id": 421184165,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707806291
    },
    {
        "content": "<p><a href=\"#narrow/stream/217126-wasmtime/topic/Component.20Model.3A.20Passing.20Large.20Buffers\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/Component.20Model.3A.20Passing.20Large.20Buffers</a></p>",
        "id": 421184474,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707806526
    },
    {
        "content": "<p>Ah yeah for threads that's definitely going to be a \"werid\" one and it basically can't be modelled in WIT. Streams are sort of similar where building up streams is difficult to model in WIT which is why it needs native support in the component model.</p>\n<p>To expand a bit on why I'm hesitant to add a new type to WIT, that means adding it to the component model as well. WIT can't be its own IDL in isolation but it's very closely tied to the component model, and at that abstraction layer the meaning of a pointer-sized integer type doesn't mean much (e.g. a component could have multiple modules all with different sizes of memories inside of it)</p>",
        "id": 421268741,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707838565
    },
    {
        "content": "<p>I just took a closer look at the iceoryx2 API, e.g. see the use of sample at <a href=\"https://github.com/eclipse-iceoryx/iceoryx2?tab=readme-ov-file#publish-subscribe\">https://github.com/eclipse-iceoryx/iceoryx2?tab=readme-ov-file#publish-subscribe</a>, which is very similar to my use case, basically a resource object provides temporary (writable) access to a memory buffer, which is sent or released by dropping (or passing ownership over to a send method) of the resource.</p>\n<p>So being able to (exclusively) borrow a list&lt;u8&gt; from a resource method would solve the need for pointers for me, the lifetime would be tied to the resource (handle). Of course the host would have to do the majority of the work to make this zero copy communication reality, I suspect that multi memory will be next on my implementation list.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/eclipse-iceoryx/iceoryx2?tab=readme-ov-file#publish-subscribe\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/54f33dc146016279c1ce62d90097a1c0e15955d6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393934373363343731333735376334353261636333656132663166373830613664306661373361306131343135306530376337346634613562643536333463632f65636c697073652d6963656f7279782f6963656f72797832)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/eclipse-iceoryx/iceoryx2?tab=readme-ov-file#publish-subscribe\" title=\"GitHub - eclipse-iceoryx/iceoryx2: Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust\">GitHub - eclipse-iceoryx/iceoryx2: Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust</a></div><div class=\"message_embed_description\">Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust - eclipse-iceoryx/iceoryx2</div></div></div>",
        "id": 421274131,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707839950
    },
    {
        "content": "<p>Is there a built in type for maps? I'm currently using a list of tuples instead.</p>",
        "id": 421344742,
        "sender_full_name": "Kyle Gray",
        "timestamp": 1707868094
    },
    {
        "content": "<p>There is not, currently, and a list of tuples is indeed a common substitute.</p>",
        "id": 421344846,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1707868175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"691446\">Kyle Gray</span> has marked this topic as resolved.</p>",
        "id": 421345080,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707868326
    },
    {
        "content": "<p>I don't think this thread had a conclusion on how to map buffer borrowing to wit.</p>",
        "id": 421378346,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707892007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590366\">Christof Petig</span> has marked this topic as unresolved.</p>",
        "id": 421378405,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707892041
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> I just found your work adding Pointer types to WasmType. It looks really promising.</p>\n<p>Also I saw some usage of usize in Rust wit-bindgen (guest based resource code) and first thought that it might be related, but looking into the git log I guess this hasn't changed, yet.</p>\n<p>Getting Rust guest code compatible with compiling to native has jumped up a bit in my priority list, but I just found that my understanding of guest resource handling was wrong: The host maintains the address to id list using <a href=\"http://canon.new/rep/drop\">canon.new/rep/drop</a> and passes the rep (likely an object address) as the first parameter to methods, if I am not mistaken. Until today I thought that the host would pass the guest provided integer id as the first argument and the guest would have to look up the rep/address in its list.</p>\n<p>For the naming of native symbols I have settled on <code>fooX3AfooX2FrecordsX23tuple_arg</code>, so the symbols are visibly as well as reversibly encoded. For guest imported functions I use <code>X00</code>as the separator between module and name.</p>",
        "id": 422905822,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708636524
    },
    {
        "content": "<p>I started using the pointer types in wit-bindgen and I see that it is a larger effort to make all languages support 64 bit compatible pointer types (I mostly stubbed other languages for now).</p>\n<p>But I also used it to create an initial working prototype of calling native plugins defined in WIT (C++ guest+host for now because I know this generator best and hand-patching the limitations of the generator was most easy). It uses the strings.wit interface from the codegen tests and exercises both directions (the last one fails in valgrind, to be investigated).</p>\n<p>Nevertheless if you want to take a look: <a href=\"https://github.com/cpetig/wit-bindgen/tree/wasm64/crates/cpp/tests/native_strings\">https://github.com/cpetig/wit-bindgen/tree/wasm64/crates/cpp/tests/native_strings</a> . It already contains the bindgen generated but for now hand-patched sources.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">objdump</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"n\">libstrings</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">libstrings</span><span class=\"p\">.</span><span class=\"n\">so</span>:     <span class=\"nc\">file</span><span class=\"w\"> </span><span class=\"n\">format</span><span class=\"w\"> </span><span class=\"n\">elf64</span><span class=\"o\">-</span><span class=\"n\">x86</span><span class=\"o\">-</span><span class=\"mi\">64</span>\n\n<span class=\"n\">DYNAMIC</span><span class=\"w\"> </span><span class=\"n\">SYMBOL</span><span class=\"w\"> </span><span class=\"n\">TABLE</span>:\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">D</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">fooX3AfooX2FstringsX00b</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GLIBC_2</span><span class=\"p\">.</span><span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">__cxa_finalize</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">D</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">fooX3AfooX2FstringsX00a</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GLIBC_2</span><span class=\"p\">.</span><span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">abort</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">D</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">fooX3AfooX2FstringsX00c</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GLIBC_2</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\">  </span><span class=\"n\">__stack_chk_fail</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GLIBC_2</span><span class=\"p\">.</span><span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">free</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GLIBC_2</span><span class=\"p\">.</span><span class=\"mf\">2.5</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">realloc</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">CXXABI_1</span><span class=\"p\">.</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">__gxx_personality_v0</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">D</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">_ITM_deregisterTMCloneTable</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">      </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">GCC_3</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\">    </span><span class=\"n\">_Unwind_Resume</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">D</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">__gmon_start__</span>\n<span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">D</span><span class=\"w\">  </span><span class=\"o\">*</span><span class=\"n\">UND</span><span class=\"o\">*</span><span class=\"w\">  </span><span class=\"mi\">0000000000000000</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">_ITM_registerTMCloneTable</span>\n<span class=\"mi\">00000000000014</span><span class=\"n\">f6</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\">    </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">  </span><span class=\"mi\">00000000000000</span><span class=\"n\">b1</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">fooX3AfooX2FstringsX23b</span>\n<span class=\"mi\">00000000000015</span><span class=\"n\">a7</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">  </span><span class=\"mi\">0000000000000040</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">cabi_post_fooX3AfooX2FstringsX23b</span>\n<span class=\"mi\">00000000000011</span><span class=\"n\">f9</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">  </span><span class=\"mi\">0000000000000052</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">cabi_realloc</span>\n<span class=\"mf\">00000000000015e7</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\">    </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">  </span><span class=\"mi\">000000000000017</span><span class=\"n\">d</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">fooX3AfooX2FstringsX23c</span>\n<span class=\"mi\">0000000000001764</span><span class=\"w\">  </span><span class=\"n\">w</span><span class=\"w\">   </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">  </span><span class=\"mi\">0000000000000040</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">cabi_post_fooX3AfooX2FstringsX23c</span>\n<span class=\"mi\">000000000000144</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"n\">g</span><span class=\"w\">    </span><span class=\"n\">DF</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"w\">  </span><span class=\"mi\">00000000000000</span><span class=\"n\">aa</span><span class=\"w\">  </span><span class=\"n\">Base</span><span class=\"w\">        </span><span class=\"n\">fooX3AfooX2FstringsX23a</span>\n</code></pre></div>",
        "id": 423294514,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708897880
    },
    {
        "content": "<p>PS: Issues 8 to 13 in that repository track the remaining code generation mistakes for this PoC.</p>",
        "id": 423296466,
        "sender_full_name": "Christof Petig",
        "timestamp": 1708899740
    },
    {
        "content": "<p>Update: I was able to implement the same interface in a Rust shared object (guest), but it still depends on several future bindgen patches (string length offset and ret_area size) to work correctly. For now I hand-corrected the generated code and then it works well.</p>",
        "id": 425412435,
        "sender_full_name": "Christof Petig",
        "timestamp": 1709852989
    },
    {
        "content": "<p>Update: The string code is now working flawlessly without hand patching, with a Rust guest and a C++ \"host\".</p>\n<p>But I encountered a strange problem: With</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">foo</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">resources</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"n\">add</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"n\">create</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">r</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">borrows</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"nc\">borrow</span><span class=\"o\">&lt;</span><span class=\"n\">r</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">consume</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"nc\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">resources</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">resources</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>the Rust guest function <code>consume</code> expects to receive the index instead of the rep, while jco passes the rep (as I would expect). Am I correct that this is a bug in the Rust code generator?</p>\n<p>I tried fixing it but quickly found that passing the resource R to the consume function isn't right - because it no longer has an index on the host side, so it can no longer be an <code>_rt::Resource&lt;R&gt;</code>. So passing the bare user defined object to the trait function <code>consume</code> seems like the most reasonable way.</p>\n<p>Also do I assume right that a function consuming a type doesn't need to call <code>[resource-drop]</code>on the index afterwards?</p>",
        "id": 426903896,
        "sender_full_name": "Christof Petig",
        "timestamp": 1710606406
    },
    {
        "content": "<p>This is my current assumption about the correct way to fix the Rust code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">cpp</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">native_resources</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">the_world</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">cpp</span><span class=\"o\">/</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">native_resources</span><span class=\"o\">/</span><span class=\"n\">rust</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">the_world</span><span class=\"p\">.</span><span class=\"n\">rs</span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">294</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">294</span><span class=\"p\">,</span><span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">exports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"cp\">#[doc(hidden)]</span>\n<span class=\"w\"> </span><span class=\"cp\">#[allow(non_snake_case)]</span>\n<span class=\"o\">-</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_export_consume_cabi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Guest</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"kt\">i32</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"cp\">#[cfg(target_arch=</span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">)]</span>\n<span class=\"o\">-</span><span class=\"n\">_rt</span>::<span class=\"n\">run_ctors_once</span><span class=\"p\">();</span><span class=\"n\">T</span>::<span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">R</span>::<span class=\"n\">from_handle</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">));</span>\n<span class=\"o\">+</span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">_export_consume_cabi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Guest</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"cp\">#[cfg(target_arch=</span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">)]</span>\n<span class=\"o\">+</span><span class=\"n\">_rt</span>::<span class=\"n\">run_ctors_once</span><span class=\"p\">();</span><span class=\"n\">T</span>::<span class=\"n\">consume</span><span class=\"p\">(</span><span class=\"n\">_rt</span>::<span class=\"nb\">Box</span>::<span class=\"o\">&lt;</span><span class=\"n\">_RRep</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>::<span class=\"n\">R</span><span class=\"o\">&gt;&gt;</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">.</span><span class=\"n\">cast</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">());</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">   </span><span class=\"k\">type</span> <span class=\"nc\">R</span>: <span class=\"nc\">GuestR</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">create</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">R</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"k\">fn</span> <span class=\"nf\">borrows</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"nc\">RBorrow</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,);</span>\n<span class=\"o\">-</span><span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">consume</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"nc\">R</span><span class=\"p\">,);</span>\n<span class=\"o\">+</span><span class=\"w\">  </span><span class=\"k\">fn</span> <span class=\"nf\">consume</span><span class=\"p\">(</span><span class=\"n\">o</span>: <span class=\"nc\">Self</span>::<span class=\"n\">R</span><span class=\"p\">,);</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\"> </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">GuestR</span>: <span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"p\">{</span>\n\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">366</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">366</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"fm\">macro_rules!</span><span class=\"w\"> </span><span class=\"n\">__export_foo_foo_resources_cabi</span><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"p\">}</span>\n<span class=\"w\">     </span><span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, export_name = </span><span class=\"s\">\"foo:foo/resources#consume\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">     </span><span class=\"cp\">#[cfg_attr(not(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">), no_mangle)]</span>\n<span class=\"o\">-</span><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fooX3AfooX2FresourcesX23consume</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"kt\">i32</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"o\">+</span><span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">fooX3AfooX2FresourcesX23consume</span><span class=\"p\">(</span><span class=\"n\">arg0</span>: <span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">       </span><span class=\"cp\">$($path_to_types</span><span class=\"p\">)</span><span class=\"o\">*</span>::<span class=\"n\">_export_consume_cabi</span>::<span class=\"o\">&lt;</span><span class=\"cp\">$ty</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"p\">)</span>\n<span class=\"w\">     </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 426904202,
        "sender_full_name": "Christof Petig",
        "timestamp": 1710606638
    },
    {
        "content": "<p>No in that case it's intentional that <code>consume</code> takes an index, it's only borrows-of-exported-resources that receive a pointer</p>",
        "id": 427499641,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710772592
    },
    {
        "content": "<p>It all started with a question by a co-worker: \"Could shared-everything components directly link together without a host-side connection?\"</p>\n<p>My first reaction was negation, but then I gave it more thoughts. Some minutes later I answered \"it might be possible with a modified ABI\".</p>\n<p>So I selected a more symmetrical calling convention, taking the argument encoding from guest imported calls and the result encoding from guest exported calls (both don't pass ownership but just provide a view into the memory). For resources I selected the guest imported flavor. Applying this to both imported and exported interfaces made the ABI symmetric and directly link-able. This way a module only reads from its communication partner's memory, never frees it or writes to it. A new host runtime could even use this modified ABI to connect shared-nothing modules.</p>\n<p>The API to the guest language is unchanged. Using future caller provided buffer APIs could eliminate another (local) heap allocation.</p>\n<p>I feel for shared everything uses like native plugins and highly optimized embedded this could be a viable simpler alternative, but it clearly is a new incompatible ABI. You can find my experiments at <a href=\"https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_strings\">https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_strings</a> and <a href=\"https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_resources\">https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_resources</a>.</p>\n<p>PS: Of course if more than one module offers an interface you need to rename/prefix it (see the <code>a_</code> prefix in the strings example)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_strings\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/57ec59b4d416d3cbf730ec88ef48c4912f8e533e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623264396466643033643262303061336163396463306265653639623063306661363234386561313336353331353038346664343965316465373063353637392f6370657469672f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_strings\" title=\"wit-bindgen/crates/cpp/tests/meshless_strings at main · cpetig/wit-bindgen\">wit-bindgen/crates/cpp/tests/meshless_strings at main · cpetig/wit-bindgen</a></div><div class=\"message_embed_description\">A (C++) language binding generator for WebAssembly interface types - cpetig/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_resources\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/57ec59b4d416d3cbf730ec88ef48c4912f8e533e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623264396466643033643262303061336163396463306265653639623063306661363234386561313336353331353038346664343965316465373063353637392f6370657469672f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen/tree/main/crates/cpp/tests/meshless_resources\" title=\"wit-bindgen/crates/cpp/tests/meshless_resources at main · cpetig/wit-bindgen\">wit-bindgen/crates/cpp/tests/meshless_resources at main · cpetig/wit-bindgen</a></div><div class=\"message_embed_description\">A (C++) language binding generator for WebAssembly interface types - cpetig/wit-bindgen</div></div></div>",
        "id": 447003081,
        "sender_full_name": "Christof Petig",
        "timestamp": 1719351539
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590366\">Christof Petig</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Native.20plugins.20defined.20in.20WIT/near/447003081\">said</a>:</p>\n<blockquote>\n<p>I feel for shared everything uses like native plugins and highly optimized embedded this could be a viable simpler alternative, but it clearly is a new incompatible ABI.</p>\n</blockquote>\n<p>Said co-worker asked whether it would be feasible to use usize for resource ids and thus get rid of the (need for the) conversion table. It worked out fine and the code generation for C++ is finished, Rust is next on my list.</p>\n<p>The most interesting property is that the distinction between host and guest vanishes and also that you can directly link several components into a single binary. The API is still unchanged, but the type asymmetry between calling methods and being called hurts the developer experience.</p>\n<p>Thus I closely follow the caller provided buffers proposal which would remove the need to allocate buffers inside the callee from the caller, which is the root cause for the asymmetric API.</p>\n<p>Asynchronous ABI additions (wasi 0.3) is another area we will need to investigate into.</p>\n<p>Please keep in mind that this is simply a different ABI encoding, you can bridge between those two and also use the symmetrical ABI with shared nothing or wasm, given a runtime which knows how to decode it. </p>\n<p>Side note: Using this ABI with wasm would require cabi_realloc to also free if the new size is zero and cloning resource handles isn't yet standardized, thus clone() for result types can't be autogenerated.</p>",
        "id": 451148720,
        "sender_full_name": "Christof Petig",
        "timestamp": 1720863051
    }
]