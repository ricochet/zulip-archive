[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> is <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/870\">https://github.com/bytecodealliance/wit-bindgen/pull/870</a> only blocked on a wasm-tools release?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/870\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6bd5f986baee987f8ae26618b4bedac40bebc0db\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313661393933373331363465373565383766663033353533626661343564323838313465633163666361653635323631643730313631383733626438306630642f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f383730)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/870\" title=\"Preserve pointer provenance in the Rust backend. by sunfishcode · Pull Request #870 · bytecodealliance/wit-bindgen\">Preserve pointer provenance in the Rust backend. by sunfishcode · Pull Request #870 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Use the new Pointer and Length types in the Rust backend to emit code that uses *mut c_void and usize instead of i32 when working with pointers and array lengths.\nTo represent PointerOrI64, use a M...</div></div></div>",
        "id": 423689049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709065195
    },
    {
        "content": "<p>Yes; I've tested it with a local dependency.</p>",
        "id": 423689155,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709065234
    },
    {
        "content": "<p>Could I perhaps recruit you as a guinea pig to do a wasm-tools release without me?</p>",
        "id": 423689186,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709065249
    },
    {
        "content": "<p>Sure</p>",
        "id": 423689206,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709065256
    },
    {
        "content": "<p>in the theory that the recent changes should make it much simpler</p>",
        "id": 423689207,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709065257
    },
    {
        "content": "<p>ok then in the hopes that it can be done without me I'm going to say \"alright it's on you now\" and do nothing else</p>",
        "id": 423689250,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709065274
    },
    {
        "content": "<p>or at least try to do nothing else :)</p>",
        "id": 423689266,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709065280
    },
    {
        "content": "<p>Ok, I'll give it a try!</p>",
        "id": 423689323,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709065300
    },
    {
        "content": "<p>Ok, we have <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1427\">https://github.com/bytecodealliance/wasm-tools/pull/1427</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1427\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ffd2d9f9c9256adade1624baecce39cbde44bbd6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316633326430323639393061383335323635333639333239303930623935386363383937623930336663643331643132336663313665346562316633306533662f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31343237)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1427\" title=\"Release wasm-tools 1.201.0 by github-actions[bot] · Pull Request #1427 · bytecodealliance/wasm-tools\">Release wasm-tools 1.201.0 by github-actions[bot] · Pull Request #1427 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This is an automated pull request from CI to release\nwasm-tools 1.201.0 when merged. The commit\nmessage for this PR has a marker that is detected by CI to create\ntags and publish crate artifacts.\nW...</div></div></div>",
        "id": 423689879,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709065533
    },
    {
        "content": "<p>I'm contractually obliged to have no comment</p>",
        "id": 423689915,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709065551
    },
    {
        "content": "<p>it is a little silly to think about the number of times CI runs on exactly the same codebase</p>",
        "id": 423692832,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709066670
    },
    {
        "content": "<p>it's ok we just say \"that's not my problem for today\"</p>",
        "id": 423692923,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709066704
    },
    {
        "content": "<p>oh totally, just musing</p>",
        "id": 423692955,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709066718
    },
    {
        "content": "<p>I'd like to set up something Wasmtime-like where PRs only run a subset of CI, but it was kind of hard to do that in wasmtime</p>",
        "id": 423692963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709066723
    },
    {
        "content": "<p>in infra in rust I was always convinced that 90% of rust/crate downloads are from CI</p>",
        "id": 423693046,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709066759
    },
    {
        "content": "<p>probably from like the same set of machines that are all used on github actions</p>",
        "id": 423693101,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709066766
    },
    {
        "content": "<p>and we're done!</p>",
        "id": 423694140,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709067185
    },
    {
        "content": "<p>huzzah it worked!</p>",
        "id": 423694256,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709067235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> congratulations, this was very fast!</p>\n<p>In the same time I was only able to get to a working prototype of the c++ binding on 64bit with lots of open codegen issues I hand-patched around. Now I need to clean it up to get closer to releasable state.</p>\n<p>But this PoC was only possible leveraging your ground work in wasm tools. <span aria-label=\"bouquet\" class=\"emoji emoji-1f490\" role=\"img\" title=\"bouquet\">:bouquet:</span></p>",
        "id": 423755412,
        "sender_full_name": "Christof Petig",
        "timestamp": 1709102391
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> I hit <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/a0c7383542183d0d9bb60d370477961f8118224a/crates/core/src/abi.rs#L1925\">this panic</a> when testing if Wasmtime worked with <code>wit-bindgen</code> main now that this provenance work has landed. I think there's some missing bitcasts in there.</p>\n<p>I started to write a test for <code>tests/codegen/*.wit</code> and got as far as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">test</span>:<span class=\"nc\">variants</span><span class=\"o\">-</span><span class=\"n\">unioning</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">f1</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">v1</span><span class=\"p\">);</span>\n\n<span class=\"w\">  </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">v2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">a</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">b</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">f2</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">v2</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>but I fear that this rabbit hole may be a bit deeper than I imagined. Would you be up for filling out that test and the panics there?</p>",
        "id": 423891080,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149651
    },
    {
        "content": "<p>basically I think more conversions need to be handled in the into-and-out-of pointer/length cases</p>",
        "id": 423891151,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149680
    },
    {
        "content": "<p>Ah, ok. Yeah, I'll write more tests for variants and implement them.</p>",
        "id": 423891301,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709149730
    },
    {
        "content": "<p>ok cool, thanks!</p>",
        "id": 423891334,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149747
    },
    {
        "content": "<p>all of these cases are already handled by <code>join</code> in <code>wasm-tools</code> so no need to touch things there, I think it's basically more of those join cases that need to be reflected in the bitcasts</p>",
        "id": 423891398,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149778
    },
    {
        "content": "<p>Cool, should be straightforward then</p>",
        "id": 423891512,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709149807
    },
    {
        "content": "<p>we can theoretically generate these tests with <code>wasm-tools wit-smith</code> and then use that to fuzz the bindings generators</p>",
        "id": 423891723,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149889
    },
    {
        "content": "<p>but honestly I'm afraid of the volume of bugs when hooking up bindings generators to the fuzzer</p>",
        "id": 423891755,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149903
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/872\">https://github.com/bytecodealliance/wit-bindgen/pull/872</a> is up. It's straightforward, but there are getting to be a lot of bitcasts. I'm thinking about whether to remove the Bitcast enum and just have each backend match on the (to, from) pair itself.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/872\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d4551ceb1fd8e1b3e2c64f995e9db2ed5432f4f3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356361346265393963393763666261376237376330616131663932613664316564323165666466353463303165303833633434643035313265656631393532342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f383732)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/872\" title=\"Implement more `Bitcast` conversions. by sunfishcode · Pull Request #872 · bytecodealliance/wit-bindgen\">Implement more `Bitcast` conversions. by sunfishcode · Pull Request #872 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Implement Bitcast conversions between more combinations of f32, f64, pointer, and length types.</div></div></div>",
        "id": 423900465,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709153349
    },
    {
        "content": "<p>(following up on the PR)</p>",
        "id": 423902414,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709154077
    }
]