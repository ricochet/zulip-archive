[
    {
        "content": "<p>Been playing around with js-component-tools to interact with wasm components.  The js that is produced from transpilation seems to be making an attempt to import from packages that I don't believe I have access to.  Is there a way that one is able to access these imports?  Here are the import statements that appear to be problematic.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering3Callee</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">exit</span><span class=\"o\">'</span><span class=\"p\">;</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">dropInputStream</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering0Callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dropOutputStream</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering1Callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering5Callee</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">io</span><span class=\"o\">'</span><span class=\"p\">;</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering4Callee</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">print</span><span class=\"o\">'</span><span class=\"p\">;</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering8Callee</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">stderr</span><span class=\"o\">'</span><span class=\"p\">;</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">close</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering2Callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">writeViaStream</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering6Callee</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">appendViaStream</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">lowering7Callee</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">filesystem</span><span class=\"o\">'</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 326491423,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1675820781
    },
    {
        "content": "<p>I believe the CLI should have various options to map these to different imports or local files, but I don't know the names of the options off-hand myself</p>",
        "id": 326595744,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1675865189
    },
    {
        "content": "<p>Thanks!  I'll try looking into that</p>",
        "id": 326629489,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1675873264
    },
    {
        "content": "<p>So I see how to use the cli options to map to local files and things... but are there recommended implementations of these things to point to locally from this js setting?</p>",
        "id": 326847915,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1675957331
    },
    {
        "content": "<p>You can find a shim (that implements the most basic functionality) for this here: <a href=\"https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim\">https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/80d0a3505d935e43e896e4a90948ef9df89277e8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306261626135383862313630616332326432306133633664633939616131353762346433333761663531656231383366623138383161636339303232356639342f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim\" title=\"jco/packages/preview2-shim at main · bytecodealliance/jco\">jco/packages/preview2-shim at main · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - jco/packages/preview2-shim at main · bytecodealliance/jco</div></div></div>",
        "id": 329274300,
        "sender_full_name": "Eduardo Rodrigues",
        "timestamp": 1677007790
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506572\">@Eduardo Rodrigues</span> Thanks!  great to know.  Will have to tinker a bit with providing the shim implementations to the transpiled js now</p>",
        "id": 329485631,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1677086437
    },
    {
        "content": "<p>After some more experimentation, I noticed that when using the mapping flag to point to the local shim, that the import paths seem to be relative to the transpiled js file.  Found the easiest way to make things work was to copy/paste the shim into the generated js, so as to avoid referencing file paths outside of the generated code.  Would it be helpful to include the shim in the transpilation output? Or to make the possibility configurable?</p>",
        "id": 329488299,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1677087091
    },
    {
        "content": "<p>If it's helpful, I could open a PR</p>",
        "id": 329488810,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1677087238
    },
    {
        "content": "<p>I agree is a little bit annoying, but we probably need to wait for more implementation coverage as well as stabilization of the WASI preview2 definition.</p>",
        "id": 329588642,
        "sender_full_name": "Eduardo Rodrigues",
        "timestamp": 1677100939
    }
]