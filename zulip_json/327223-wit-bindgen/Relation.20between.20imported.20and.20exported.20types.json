[
    {
        "content": "<p>Greetings! I’m learning about WIT and trying to implement a guest binding generator for Kotlin. Could somebody help me figure out how non-builtin types that come from imported and exported interfaces should relate to each other in the generated source code?</p>\n<p>For example, in <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/ef2fd05ad36c0d0ee66cfc542a2f1c2e6b308f1a/tests/codegen/records.wit\">tests/codegen/records.wit</a>, there is an interface containing records, and it is both imported and exported from the world. Rust and Java guest bindings generate separate types (structs and classes) for imported and exported records. I’m assuming that users of the bindings would need to convert between “imported” and “exported” record types, even though they came from the same WIT interface.</p>\n<p>It seems that types that are deeply composed of primitives don’t care if they are copyed from the host or created inside the component, and can be merged. But I can’t yet wrap my head around adding resource types to the mix. Resource types sometimes are created externally (for example, using the imported <code>constructor</code> method). Sometimes they need to be created internally when the constructor function is exported. Does anybody have thoughts on unifying resource types in bindings for statically typed languages?</p>\n<p>Or should imported and exported WIT interfaces be treated as completely separate things/namespaces in bindings, requiring users to convert between different flavors of the same WIT type manually?</p>",
        "id": 412534131,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1705062051
    },
    {
        "content": "<p>Value types (i.e. all the WIT types <em>except</em> resources) are structurally typed, so binding generators can do whatever is appropriate for the target language.</p>",
        "id": 412570491,
        "sender_full_name": "Lann Martin",
        "timestamp": 1705074559
    },
    {
        "content": "<p>Resource types are always unique, even between two instances of the same component</p>",
        "id": 412570716,
        "sender_full_name": "Lann Martin",
        "timestamp": 1705074625
    },
    {
        "content": "<p>Aha good questions! So from a mental-model perspective, structurally equivalent types are the same regardless whether they're exported or imported, except for resources. So yes if you import and export the same record it should be possible to use a single type in the guest language to represent that type. There's some minor trickiness where the memory management is often different, for example a string passed to an exported function is passed as an owned buffer of memory but a string passed to an import is just a ptr/len. For now though current bindings generators generate separate types for simplicity to not break resources but could also have an optimization to \"unify\" types where possible.</p>\n<p>For resources as Lann mentioned they're always different types. So if the same WIT type is both exported and imported that actually generates two unique types for the component, one for the import and one for the export. That means that structs containing those resources would be distinct for example since their primitive components would be different.</p>\n<p>So to answer your questions::</p>\n<blockquote>\n<p>Does anybody have thoughts on unifying resource types in bindings for statically typed languages?</p>\n</blockquote>\n<p>Currently this can't be done due to the nature of the component model where an imported/exported resource creates distinct types. This is reflected into languages with different static capabilities, patterns, representations, etc.</p>\n<blockquote>\n<p>Or should imported and exported WIT interfaces be treated as completely separate things/namespaces in bindings, requiring users to convert between different flavors of the same WIT type manually?</p>\n</blockquote>\n<p>Yes and no. Resources need to be distinct, and types built from those resources. Types that don't have distinct components, though, like records-of-strings, can be the same across both imports and exports.</p>\n<hr>\n<p>Also FWIW both importing and exporting an interface is a bit of an esoteric thing to do in practice at the moment, so it's ok if a bindings generator doesn't fully handle it</p>",
        "id": 412571418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705074863
    },
    {
        "content": "<p>also on that last bit that's why current bindings generators don't go out of their way to generate \"nice\" bindings right now because it's a chunk of work and doesn't seem too beneficial for anyone at this time</p>",
        "id": 412571510,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705074888
    },
    {
        "content": "<p>Imported and exported versions of a resource must be separate types, despite the fact that they share a single <code>TypeId</code> in <code>wit-parser</code>'s <code>Resolve</code>, meaning you have to keep track of whether you're generating code for imports or exports in order to determine which version of the resource is relevant.  See the Rust, C, or Go binding generators for examples.</p>",
        "id": 412571796,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705074999
    },
    {
        "content": "<p>Or, as a temporary measure, you could just detect if a resource is both imported and exported and raise an error in that case, which is what an early version of the C generator did</p>",
        "id": 412572405,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705075201
    },
    {
        "content": "<p>Thanks everyone! Am I understanding it correctly that there is no way to express a \"passthrough\" of a resource between imports and exports without wrapping it with another one?</p>\n<p>Given this, it seems a bit problematic to have a default automatic \"unification\" of generated nominal types,  considering that a small change of adding an optional resource handle type in a WIT package could cause a lot of generated types to split.</p>",
        "id": 412582602,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1705078222
    },
    {
        "content": "<blockquote>\n<p>Am I understanding it correctly that there is no way to express a \"passthrough\" of a resource between imports and exports without wrapping it with another one?</p>\n</blockquote>\n<p>Could you give an example of what you mean?</p>",
        "id": 412585981,
        "sender_full_name": "Lann Martin",
        "timestamp": 1705079311
    },
    {
        "content": "<p>An exported function can refer to imported resource types, so that's no problem.  You just can't import and export the same resource and try to unify them -- they're two different types implemented by two different components (or the host) and only share an interface -- the implementations could be completely unrelated.</p>",
        "id": 412589168,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705080441
    },
    {
        "content": "<p>Yes, I meant is referring  to imported resource types in exported functions. What would it look like in WIT? <br>\nHow to determine whether resource type is imported or exported (or both?) ?</p>",
        "id": 412616127,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1705091599
    },
    {
        "content": "<p>The world you are generating for will contain some set of <code>export</code>ed and/or <code>import</code>ed interfaces. If a resource is defined in a <em>directly</em> exported interface then <em>that</em> resource type is owned by the target guest. If a resource is defined in an imported interface (or an interface <code>use</code>ed by an exported interface) then the target guest will be borrowing a different resource (handle).</p>",
        "id": 412616715,
        "sender_full_name": "Lann Martin",
        "timestamp": 1705091877
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">foo</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.{</span><span class=\"n\">r</span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"n\">foo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nc\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 412617145,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705092064
    },
    {
        "content": "<p>As long as <code>w</code> doesn't try to export <code>x</code>, the <code>r</code> used in <code>y</code> will be imported by the component.</p>",
        "id": 412617181,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705092090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and I have discussed making this more explicit in a future version of WIT, and possibly allowing you to refer to both an imported and exported versions of a resource in the same interface.</p>",
        "id": 412617322,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705092143
    },
    {
        "content": "<p>It is a bit confusing since the import of <code>x</code> is implicit from <code>use</code>ing it in exported interface <code>y</code> (right? <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span>)</p>",
        "id": 412617430,
        "sender_full_name": "Lann Martin",
        "timestamp": 1705092186
    },
    {
        "content": "<p>Yeah, I needed many conversations with Alex before I understood it :)</p>",
        "id": 412617530,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705092227
    },
    {
        "content": "<p>Which is why I'd love to make it more explicit</p>",
        "id": 412617542,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705092234
    },
    {
        "content": "<p><del>Your example (on its own) wouldn't be a useful world right? There would be no way to get an instance of <code>r</code>?</del> nvm, the caller of <code>foo</code> could import something that exports <code>x</code> or even export it itself</p>",
        "id": 412617878,
        "sender_full_name": "Lann Martin",
        "timestamp": 1705092364
    },
    {
        "content": "<p>It is a bit confusing, happy hear it was discussed :)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Relation.20between.20imported.20and.20exported.20types/near/412617181\">said</a>:</p>\n<blockquote>\n<p>As long as <code>w</code> doesn't try to export <code>x</code>, the <code>r</code> used in <code>y</code> will be imported by the component.</p>\n</blockquote>\n<p>How would <code>w</code> exporting <code>x</code> should change the exportness of <code>r</code> used in exported <code>y</code>?  I tried testing this with Rust, but got this error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">exports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(clippy::all)]</span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"k\">super</span>::<span class=\"k\">super</span>::<span class=\"k\">super</span>::<span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 412691440,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1705137309
    },
    {
        "content": "<p>Also there is a syntax for resources declared directly in worlds <code>world w { resource r; }</code>. Experimenting with it, I see that it imported. I would be happy if someone confirm its semantics here, WIT spec document is very light on explaining this one.</p>",
        "id": 412691960,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1705137743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Relation.20between.20imported.20and.20exported.20types/near/412617530\">said</a>:</p>\n<blockquote>\n<p>Yeah, I needed many conversations with Alex before I understood it :)</p>\n</blockquote>\n<p>someone's going to make a mint just writing that bit up.....</p>",
        "id": 413000799,
        "sender_full_name": "Ralph",
        "timestamp": 1705338322
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587245\">Slava Kuzmich</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Relation.20between.20imported.20and.20exported.20types/near/412691440\">said</a>:</p>\n<blockquote>\n<p>It is a bit confusing, happy hear it was discussed :)</p>\n<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Relation.20between.20imported.20and.20exported.20types/near/412617181\">said</a>:</p>\n<blockquote>\n<p>As long as <code>w</code> doesn't try to export <code>x</code>, the <code>r</code> used in <code>y</code> will be imported by the component.</p>\n</blockquote>\n<p>How would <code>w</code> exporting <code>x</code> should change the exportness of <code>r</code> used in exported <code>y</code>?  I tried testing this with Rust, but got this error:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">exports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[allow(clippy::all)]</span>\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">super</span>::<span class=\"k\">super</span>::<span class=\"k\">super</span>::<span class=\"k\">super</span>::<span class=\"n\">ERROR</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">;</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Here's what I did:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// foo.wit</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">foo</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.{</span><span class=\"n\">r</span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"n\">foo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">r</span>: <span class=\"nc\">r</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// Note that I've added this, which makes the `use x.{r};` in `y` refer to the exported version of `r`</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then I generated the bindings using <code>wit-bindgen rust --stubs foo.wit</code>.  If you look at the output of that command and compare it to what you get if you omit the <code>export x;</code> above, you'll see that the one with the <code>export x;</code> uses an exported version of <code>r</code>, while the other one uses an imported version of <code>r</code>.</p>",
        "id": 413186406,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705420672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Relation.20between.20imported.20and.20exported.20types/near/413000799\">said</a>:</p>\n<blockquote>\n<p>someone's going to make a mint just writing that bit up.....</p>\n</blockquote>\n<p>Where does that mint come from, I wonder?</p>",
        "id": 416764872,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1705666157
    },
    {
        "content": "<p>damn, now you want a business model for <em>sharing knowledge</em>.... I hate that.</p>",
        "id": 416765637,
        "sender_full_name": "Ralph",
        "timestamp": 1705666488
    },
    {
        "content": "<p>business model: share knowledge and collect the commissions they pay you when they train AI on your content</p>",
        "id": 416772475,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1705669156
    },
    {
        "content": "<p>Dan is not helping</p>",
        "id": 416785565,
        "sender_full_name": "Ralph",
        "timestamp": 1705673364
    },
    {
        "content": "<p>but he is feeling perky</p>",
        "id": 416785585,
        "sender_full_name": "Ralph",
        "timestamp": 1705673373
    }
]