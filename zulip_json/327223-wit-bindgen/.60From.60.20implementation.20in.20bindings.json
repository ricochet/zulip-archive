[
    {
        "content": "<p><a href=\"#narrow/stream/206238-general/topic/cargo.20component.20param.20vs.20result/near/342360176\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/cargo.20component.20param.20vs.20result/near/342360176</a><br>\nI asked a question over in general pertaining to <code>cargo component</code>, and realized later that this is probably the place for it.</p>",
        "id": 342401404,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678993753
    },
    {
        "content": "<p>Essentially wondering if it makes sense to add a <code>From</code> trait to convert between <code>TypeParam</code> and <code>TypeResult</code> types in bindings that are generated, so that return types of one wit import can be passed to another</p>",
        "id": 342401837,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678993914
    },
    {
        "content": "<p><code>Cow</code>s were brought up as another solution</p>",
        "id": 342401944,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1678993934
    },
    {
        "content": "<p>^ In particular, unifying <code>*Param</code> and <code>*Result</code> by using <code>Cow</code>s for heap-allocated fields</p>",
        "id": 342402847,
        "sender_full_name": "Lann Martin",
        "timestamp": 1678994238
    },
    {
        "content": "<p>Another option here would be <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/535\">https://github.com/bytecodealliance/wit-bindgen/issues/535</a>, which I think would be reasonable to turn on by default, which is to always generate APIs with owned types and only optionally generate the <code>*Param</code> and <code>*Result</code> structures</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/535\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/250a2c552b353ad3ca5e4bd8487d715ea2830d10\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363334393261643736393935656462303934343263666430343636616163306237663031643962653633363634366433336661353264376234303061336364342f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f353335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/535\" title=\"Offer option to disable generation/use of borrowed types for Rust 路 Issue #535 路 bytecodealliance/wit-bindgen\">Offer option to disable generation/use of borrowed types for Rust 路 Issue #535 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">G&#39;day again! Under certain scenarios, wit-bindgen (and Wasmtime, which uses similar machinery) will use borrowed types instead of owned types for arrays and strings. This works fine when it&amp;#39...</div></div></div>",
        "id": 342414462,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1678997990
    },
    {
        "content": "<p>I'm not sure that anyone really wants the <code>*Param</code> and <code>*Result</code> stuff anyway, it's just how I implemented it originally because I assumed we'd want it for performance but in the end it's so confusing I don't think it's worth it</p>",
        "id": 342414597,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1678998027
    },
    {
        "content": "<p>ah yeah, looks like that would take care of it too</p>",
        "id": 342574455,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1679062696
    },
    {
        "content": "<p>I permit myself to link the topic where I struggle with the same topic <a href=\"#narrow/stream/327223-wit-bindgen/topic/.5Brust.5D.20param.20and.20result.20structs\">https://bytecodealliance.zulipchat.com/#narrow/stream/327223-wit-bindgen/topic/.5Brust.5D.20param.20and.20result.20structs</a></p>",
        "id": 342810872,
        "sender_full_name": "bachrc",
        "timestamp": 1679157118
    },
    {
        "content": "<p>Actually, it is pretty hard to just give a Vec as a parameter. The <code>Param</code> works for inlining a parameter, but when you need to give a list of objects, and give it as a parameter... this is a lifetimes hell</p>",
        "id": 342812519,
        "sender_full_name": "bachrc",
        "timestamp": 1679157815
    }
]