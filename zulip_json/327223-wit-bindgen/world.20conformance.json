[
    {
        "content": "<p>Is there any tooling for checking whether a component conforms to a given world definition? It would be nice if the host could check this pre-instantiation for better error messaging.</p>",
        "id": 354678021,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682858718
    },
    {
        "content": "<p><code>wasmtime::component::Linker::instantiate_pre</code> should check imports, but not exports</p>",
        "id": 354870646,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682946197
    },
    {
        "content": "<p>I suppose you could build a dummy component that imports your world, link it to your target component, then import-check <em>that</em></p>",
        "id": 354875671,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682947279
    },
    {
        "content": "<p>If this is specifically for the host embedding I think it'd be reasonable to add logic along these lines to the <code>Host::instantiate_pre</code> method that's generated for each world. In addition to the import checking of <code>instantiate_pre</code> it could additionally verify that all the exports are present and have the expected types.</p>",
        "id": 354901424,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682953710
    },
    {
        "content": "<p>I'll note though that the degree of type reflection required for that isn't currently implemented in Wasmtime, but I don't think there's any major blockers to doing so, it's largely a matter of minor design and mostly elbow grease (IIRC)</p>",
        "id": 354901581,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682953746
    },
    {
        "content": "<p>It looks like the <code>Host::instantiate_pre</code> methods somewhat confusingly are for instantiating <code>InstancePre</code>s, not creating them</p>",
        "id": 354903068,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682954135
    },
    {
        "content": "<p>err...@rylev is that what you're looking for? An explicit type-check <em>when</em> instantiating or <em>without needing to instantiate</em>?</p>",
        "id": 354903365,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682954215
    },
    {
        "content": "<p>I may have projected the feature <em>I</em> want onto your request <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 354903493,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682954248
    },
    {
        "content": "<p>oh oops right</p>",
        "id": 354905955,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682954801
    },
    {
        "content": "<p>we could add a different method for doing the typecheck-without-instantiating part in any case, and I don't think that it otherwise exists today in Wasmtime</p>",
        "id": 354906075,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682954833
    },
    {
        "content": "<p>Correct, this would explicitly be pre-instantiation. There is generally a large amount of time for before instantiation that runtimes and wrapper tooling has to check that the binary in question will be able to run.</p>",
        "id": 354983450,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682977926
    },
    {
        "content": "<p>Do we need wasmtime to do this? Is this not something that can be checked statically and thus might be more appropriate in wasm-tools?</p>",
        "id": 354983658,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1682978043
    },
    {
        "content": "<p>I assume the point was that wasmtime has to do all the type-checking work anyway as part of instantiation, so exposing ways to do it separately is useful. In the non-components API we've found it's useful to allow embedders to front-load that work and do it once, then skip the type-checking during instantiation after that. So a similar API for components would make sense. But having a standalone command-line type-checker sounds to me like something useful as well.</p>",
        "id": 354987958,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1682980064
    },
    {
        "content": "<blockquote>\n<p>Do we need wasmtime to do this? Is this not something that can be checked statically and thus might be more appropriate in wasm-tools?</p>\n</blockquote>\n<p>Currently, yes. The idea I think is given a <code>wasmtime::component::Component</code> an embedder can test \"does this have the signature I want\". That can also be done at the <code>wasmparser</code> level using today's APIs but adding type-reflection to components is always something I wanted to get to at some point (e.g. along the lines of the <code>wasmtime::Module::{imports,exports}</code> methods which allow you to inspect, without instantiating, the types involved)</p>",
        "id": 354993157,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682982934
    },
    {
        "content": "<p>I do agree with Jamey though and a possible <code>wasm-tools component implements foo.wit foo.wasm</code> could also work</p>",
        "id": 354993183,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682982958
    },
    {
        "content": "<p>(or something like that)</p>",
        "id": 354993221,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682982963
    },
    {
        "content": "<p>I would expect that in the fullness of time people would want to know ahead of time, meaning that although wasmtime should check, the more important systemic thing would be for people to check as part of understanding what is and is not expected to run properly.</p>",
        "id": 355286944,
        "sender_full_name": "Ralph",
        "timestamp": 1683072281
    },
    {
        "content": "<p>Talked to <span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> about this. We're going to create an issue and maybe see if we can work on a tool.</p>",
        "id": 355448182,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1683121540
    },
    {
        "content": "<p>We were thinking about possibly trying to do this at the wit level</p>",
        "id": 355448379,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1683121570
    },
    {
        "content": "<p>Created an issue track: <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1011\">https://github.com/bytecodealliance/wasm-tools/issues/1011</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1011\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/db75ef8fd7298007d2d520fc70b72cf362cacc8e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353466376238366532356233623837653335653431336665323464326661613435373635666633366539363463343638363838323864393831613066346434302f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31303131)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1011\" title=\"Support for verifying whether a component conforms to a world 路 Issue #1011 路 bytecodealliance/wasm-tools\">Support for verifying whether a component conforms to a world 路 Issue #1011 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Opening this issue to track: Context: https://bytecodealliance.zulipchat.com/#narrow/stream/327223-wit-bindgen/topic/world.20conformance/near/354678021 In the thread linked above, it was suggested ...</div></div></div>",
        "id": 355450545,
        "sender_full_name": "Brian",
        "timestamp": 1683122011
    }
]