[
    {
        "content": "<p>HI,  I have a problem with initialising the dotnet runtime at the call to the first exported function.  To initialize the runtime we call <code>_initialize</code> which ultimately tries to allocate the stack and calls into our implementation of <code>cabi_realloc</code> which is managed code, and needs the runtime initialized, and things fail.  The stakc for this looks like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">10</span>: <span class=\"mh\">0xdd6ebb</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">csharp_wasm_wit_many_arguments_Intrinsics__cabi_realloc</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">csharp</span><span class=\"err\">\\</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"err\">\\</span><span class=\"n\">many_arguments</span><span class=\"err\">\\</span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">many</span><span class=\"o\">-</span><span class=\"n\">arguments</span><span class=\"err\">\\</span><span class=\"n\">ManyArguments</span><span class=\"p\">.</span><span class=\"n\">cs</span>:<span class=\"mi\">44</span>\n<span class=\"w\">   </span><span class=\"mi\">11</span>: <span class=\"mh\">0x13a37e0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">allocate_stack</span>\n<span class=\"w\">   </span><span class=\"mi\">12</span>: <span class=\"mh\">0x139fd2f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">fd_prestat_get</span>\n<span class=\"w\">   </span><span class=\"mi\">13</span>: <span class=\"mh\">0x13a5569</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">shim</span><span class=\"o\">!</span><span class=\"n\">adapt</span><span class=\"o\">-</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"o\">-</span><span class=\"n\">fd_prestat_get</span>\n<span class=\"w\">   </span><span class=\"mi\">14</span>: <span class=\"mh\">0xf7593f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasi_fd_prestat_get</span>\n<span class=\"w\">   </span><span class=\"mi\">15</span>: <span class=\"mh\">0xf787e9</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasilibc_populate_preopens</span>\n<span class=\"w\">   </span><span class=\"mi\">16</span>: <span class=\"mh\">0xc6ea</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasm_call_ctors</span>\n<span class=\"w\">   </span><span class=\"mi\">17</span>: <span class=\"mh\">0xc788</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_initialize</span>\n<span class=\"w\">   </span><span class=\"mi\">18</span>: <span class=\"mh\">0x196c3</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">InitializeRuntime</span><span class=\"p\">()</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"o\">/</span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">nativeaot</span><span class=\"o\">/</span><span class=\"n\">Bootstrap</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">197</span>:<span class=\"mi\">9</span>\n<span class=\"w\">   </span><span class=\"mi\">19</span>: <span class=\"mh\">0x1b379</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Thread</span>::<span class=\"n\">EnsureRuntimeInitialized</span><span class=\"p\">()</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"o\">/</span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">nativeaot</span><span class=\"o\">/</span><span class=\"n\">Runtime</span><span class=\"o\">/</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">1220</span>:<span class=\"mi\">13</span>\n<span class=\"w\">   </span><span class=\"mi\">20</span>: <span class=\"mh\">0x1b172</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Thread</span>::<span class=\"n\">ReversePInvokeAttachOrTrapThread</span><span class=\"p\">(</span><span class=\"n\">ReversePInvokeFrame</span><span class=\"o\">*</span><span class=\"p\">)</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"o\">/</span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">nativeaot</span><span class=\"o\">/</span><span class=\"n\">Runtime</span><span class=\"o\">/</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">1182</span>:<span class=\"mi\">13</span>\n<span class=\"w\">   </span><span class=\"mi\">21</span>: <span class=\"mh\">0x1b5d5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">RhpReversePInvokeAttachOrTrapThread2</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"o\">/</span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">nativeaot</span><span class=\"o\">/</span><span class=\"n\">Runtime</span><span class=\"o\">/</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">1318</span>:<span class=\"mi\">28</span>\n<span class=\"w\">   </span><span class=\"mi\">22</span>: <span class=\"mh\">0x1b83d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">RhpReversePInvoke</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">artifacts</span><span class=\"o\">/</span><span class=\"n\">obj</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">Debug</span><span class=\"o\">/</span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">coreclr</span><span class=\"o\">/</span><span class=\"n\">nativeaot</span><span class=\"o\">/</span><span class=\"n\">Runtime</span><span class=\"o\">/</span><span class=\"n\">thread</span><span class=\"p\">.</span><span class=\"n\">cpp</span>:<span class=\"mi\">1332</span>:<span class=\"mi\">5</span>\n<span class=\"w\">   </span><span class=\"mi\">23</span>: <span class=\"mh\">0xdd6b6b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">csharp_wasm_wit_many_arguments_exports_ManyArgumentsWorld__wasmExportManyArguments</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"o\">-</span><span class=\"n\">csharp</span><span class=\"err\">\\</span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"err\">\\</span><span class=\"n\">many_arguments</span><span class=\"err\">\\</span><span class=\"n\">csharp</span><span class=\"o\">-</span><span class=\"n\">many</span><span class=\"o\">-</span><span class=\"n\">arguments</span><span class=\"err\">\\</span><span class=\"n\">ManyArguments</span><span class=\"p\">.</span><span class=\"n\">cs</span>:<span class=\"mi\">34</span>\n</code></pre></div>\n<p>Below frame 10 it goes ont to assert in the dotnet runtime.  I saw <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/919\">https://github.com/bytecodealliance/wasm-tools/pull/919</a> which looks like it solves a related problem, but is there anything that I can configure to have allocate_stack not use <code>cabi_realloc</code> ?  Seems that an adapter withouth <code>allocation_state</code> would work, but I guess I shouldn't be creating my own adapters?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/919\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2f98f1c3fc0f1fc3b45927cc241ad323083df8bc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336134393239326162633838316230303539303863663137313435366534326563663433343337363539376430653734666537393730353961393734333261372f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f393139)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/919\" title=\"wit-component: lazily allocate adapter stack when appropriate by dicej · Pull Request #919 · bytecodealliance/wasm-tools\">wit-component: lazily allocate adapter stack when appropriate by dicej · Pull Request #919 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Previously, I modified wit-component to use the main module cabi_realloc export to allocate the adapter stack when present. However,\nbytecodealliance/preview2-prototyping#78 pointed out that this c...</div></div></div>",
        "id": 392622933,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695429850
    },
    {
        "content": "<p>Componentization via wit-component has <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/9affab2262766b10ce0a2480677a5ac6c279faf5/crates/wit-component/src/gc.rs#L67-L69\">logic</a> for using <code>memory.grow</code> to allocate a stack instead of calling <code>cabi_realloc</code>, but that's only conditionally used if the main module doesn't define <code>cabi_realloc</code>. For your use case though it seems like adding a flag to <code>wasm-tools component new</code> (or the equivalent thereof) to force stack-allocation-via-stack-growth may be the way to go?</p>",
        "id": 393033132,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695653099
    },
    {
        "content": "<p>That sounds like it would work for me.  If <code>allocate_stack</code> could be delayed until after <code>__wasm_call_ctors</code> that may also work, but may not be possible?</p>",
        "id": 393091112,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695669442
    },
    {
        "content": "<p>I could of course move the <code>cabi_realloc</code> to umanaged (c/c++) code, but that would complicate the build and it would be nice to keep it all in managed code.</p>",
        "id": 393091397,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695669530
    },
    {
        "content": "<p>Moving it after is mostly a function of the ctors, if the ctors can avoid calling WASI functions then that'll work, but I think one of the ctors is invoking a WASI function which triggers allocation of the stack</p>",
        "id": 393091833,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695669662
    },
    {
        "content": "<p>in that I think it's already as lazy as can be</p>",
        "id": 393091884,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695669686
    },
    {
        "content": "<p>but I suspect that avoiding WASI functions may be pretty difficult</p>",
        "id": 393091915,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695669694
    },
    {
        "content": "<p>I havn't created a PR in wasm-tools or wit-component to date.  Would you see this option as being in the wit-component <code>EncodingState</code>  ?  Just so I can start on the right foot.</p>",
        "id": 393129485,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695684553
    },
    {
        "content": "<p>Seems reasonable to me yeah! There's a whole bunch of structs involved there.</p>",
        "id": 393132876,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695687040
    },
    {
        "content": "<p>I'd start at <code>ComponentEncoder</code> and work your way down to where that decision is made</p>",
        "id": 393132888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695687056
    },
    {
        "content": "<p>although <code>EncodingState</code> I think can reach <code>ComponentEncoder</code> already</p>",
        "id": 393132901,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695687066
    },
    {
        "content": "<p>Thanks, I'll close this thread as I think I have enough to go on.</p>",
        "id": 393588289,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695860093
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 393588300,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695860100
    },
    {
        "content": "<p>I implemented this but I hit another problem, when executing the class ctors,  there is this stack snippet</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">State</span>::<span class=\"n\">new</span>::<span class=\"n\">h7ba8d3029d40ab1e</span>\n<span class=\"w\">   </span><span class=\"mi\">12</span>: <span class=\"mh\">0x1b204a8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">State</span>::<span class=\"n\">ptr</span>::<span class=\"n\">hca605544a6643e5c</span>\n<span class=\"w\">   </span><span class=\"mi\">13</span>: <span class=\"mh\">0x1b20f28</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">environ_sizes_get</span>\n<span class=\"w\">   </span><span class=\"mi\">14</span>: <span class=\"mh\">0x1b2b597</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">shim</span><span class=\"o\">!</span><span class=\"n\">adapt</span><span class=\"o\">-</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"o\">-</span><span class=\"n\">environ_sizes_get</span>\n</code></pre></div>\n<p>which also calls into <code>cabi_realloc</code>.  I think I read somewhere there was some effort to remove the class ctors, but as things stand I see the solution for the c# runtime as providing an unmanaged implementation of <code>cabi_realloc</code>either in the AOT compiler or via an LLVM file (<code>.ll</code>)</p>",
        "id": 394927439,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696459729
    },
    {
        "content": "<p>hm so that should be fixable, the memory acquired there should be possible to acquire with <code>memory.grow</code> like the stack is. I suspect that the fix I suggested may not be complete. Would you be up to filing an issue about this? I can help poke at this tomorrow and see if the previous fix I suggested was wrong</p>",
        "id": 394928159,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696460267
    },
    {
        "content": "<p>if you've got a wasm I can play around with that would also be extra helpful for experimenting</p>",
        "id": 394928172,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696460278
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/i8xdfusc3njWwIXxDHzaMEaz/csharp-wasm.component.zip\">csharp-wasm.component.zip</a><br>\nThis is the component that I'm using for the many-arguments runtime test</p>",
        "id": 394932009,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696463144
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1234\">https://github.com/bytecodealliance/wasm-tools/issues/1234</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1234\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/91554e71a60c7764906bd404bb3c102aba37afde\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666163613835613833343464333032636332623164646236323666616535343737653837313263373262633337343765663535323365633965643934616664372f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31323334)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1234\" title=\"Wasm components: implementing cabi_reallock in managed dotnet code presents a problem · Issue #1234 · bytecodealliance/wasm-tools\">Wasm components: implementing cabi_reallock in managed dotnet code presents a problem · Issue #1234 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Due to cabi_realloc being used from class constructors at initialization, there is a chicken and egg problem when initialising the dotnet runtime. If cabi_realloc is implemented in managed code, th...</div></div></div>",
        "id": 394932658,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696463717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> if I get this stack trace:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ManyArgumentsWorldImpl</span><span class=\"p\">.</span><span class=\"n\">ManyArguments</span>\n<span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">/</span><span class=\"n\">libs</span><span class=\"o\">/</span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Native</span><span class=\"o\">/</span><span class=\"n\">pal_process_wasi</span><span class=\"p\">.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">78</span><span class=\"p\">)</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">Not</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">)</span>\n<span class=\"n\">Assertion</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">false</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"s\">\"assert_msg failed\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">C</span>:<span class=\"o\">/</span><span class=\"n\">github</span><span class=\"o\">/</span><span class=\"n\">runtimelab</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">native</span><span class=\"o\">/</span><span class=\"n\">libs</span><span class=\"o\">/</span><span class=\"n\">System</span><span class=\"p\">.</span><span class=\"n\">Native</span><span class=\"o\">/</span><span class=\"n\">pal_process_wasi</span><span class=\"p\">.</span><span class=\"n\">c</span>: <span class=\"nc\">SystemNative_SysLog</span>: <span class=\"mi\">78</span><span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">csharp2</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>: <span class=\"mh\">0x10b960a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">abort</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>: <span class=\"mh\">0x10ba848</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__assert_fail</span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>: <span class=\"mh\">0x10b132f</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">SystemNative_SysLog</span>\n<span class=\"w\">           </span><span class=\"mi\">3</span>: <span class=\"mh\">0x8db9f0</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_Interop_Sys___SysLog_g____PInvoke_128_0</span>\n<span class=\"w\">           </span><span class=\"mi\">4</span>: <span class=\"mh\">0x70377b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_Interop_Sys__SysLog</span>\n<span class=\"w\">           </span><span class=\"mi\">5</span>: <span class=\"mh\">0xa6ca33</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_DebugProvider__WriteToDebugger</span>\n<span class=\"w\">           </span><span class=\"mi\">6</span>: <span class=\"mh\">0x515506</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_DebugProvider__WriteCore</span>\n<span class=\"w\">           </span><span class=\"mi\">7</span>: <span class=\"mh\">0xc17cca</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_DebugProvider__Write</span>\n<span class=\"w\">           </span><span class=\"mi\">8</span>: <span class=\"mh\">0xf757cf</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__VirtualCall_S_P_CoreLib_System_Diagnostics_DebugProvider__Write</span>\n<span class=\"w\">           </span><span class=\"mi\">9</span>: <span class=\"mh\">0x344efc</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_DebugProvider__WriteLine</span>\n<span class=\"w\">          </span><span class=\"mi\">10</span>: <span class=\"mh\">0xf757fd</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__VirtualCall_S_P_CoreLib_System_Diagnostics_DebugProvider__WriteLine</span>\n<span class=\"w\">          </span><span class=\"mi\">11</span>: <span class=\"mh\">0xdc0354</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_DebugProvider__WriteAssert</span>\n<span class=\"w\">          </span><span class=\"mi\">12</span>: <span class=\"mh\">0x12f74b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_DebugProvider__Fail</span>\n<span class=\"w\">          </span><span class=\"mi\">13</span>: <span class=\"mh\">0xf757a1</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__VirtualCall_S_P_CoreLib_System_Diagnostics_DebugProvider__Fail</span>\n<span class=\"w\">          </span><span class=\"mi\">14</span>: <span class=\"mh\">0xa5c7f6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_Debug__Fail_0</span>\n<span class=\"w\">          </span><span class=\"mi\">15</span>: <span class=\"mh\">0x33c2d6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_Debug__Assert_2</span>\n<span class=\"w\">          </span><span class=\"mi\">16</span>: <span class=\"mh\">0xa4d6b5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">S_P_CoreLib_System_Diagnostics_Debug__Assert</span>\n<span class=\"w\">          </span><span class=\"mi\">17</span>: <span class=\"mh\">0x1202fd</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">csharp_wasm_ManyArgumentsWorldImpl__ManyArguments</span>\n<span class=\"w\">          </span><span class=\"mi\">18</span>: <span class=\"mh\">0xdb58ee</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">csharp_wasm_wit_many_arguments_exports_ManyArgumentsWorld__wasmExportManyArguments</span>\n<span class=\"w\">       </span><span class=\"n\">note</span>: <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">show</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">debugging</span><span class=\"w\"> </span><span class=\"n\">information</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<p>does that look like progress?</p>",
        "id": 395059571,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696517102
    },
    {
        "content": "<p>That was via a component that was generated with this patch to <code>wasm-tools</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wit-component/src/gc.rs b/crates/wit-component/src/gc.rs</span>\n<span class=\"gh\">index c4e1dff6..f433b09f 100644</span>\n<span class=\"gd\">--- a/crates/wit-component/src/gc.rs</span>\n<span class=\"gi\">+++ b/crates/wit-component/src/gc.rs</span>\n<span class=\"gu\">@@ -52,7 +52,7 @@ pub fn run&lt;T&gt;(</span>\n<span class=\"w\"> </span>    }\n<span class=\"w\"> </span>    assert!(!module.exports.is_empty());\n<span class=\"w\"> </span>    module.liveness()?;\n<span class=\"gd\">-    module.encode(main_module_realloc)</span>\n<span class=\"gi\">+    module.encode(None)</span>\n<span class=\"w\"> </span>}\n\n<span class=\"w\"> </span>fn always_keep(name: &amp;str) -&gt; bool {\n</code></pre></div>",
        "id": 395059832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696517168
    },
    {
        "content": "<p>before that I was getting the same stack trace you mentioned in the issue from last night</p>",
        "id": 395060029,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696517232
    },
    {
        "content": "<p>Yes, that looks like it fails on an assert in the actual test which means it has passed the intialization :-)</p>",
        "id": 395061022,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696517535
    },
    {
        "content": "<p>But i can try that patch locally, where it should pass the test.  Give me a couple of hours and I'll update here.</p>",
        "id": 395061276,
        "sender_full_name": "Scott Waye",
        "timestamp": 1696517631
    },
    {
        "content": "<p>ok cool, in that case I think using <code>main_module_realloc</code> vs \"always pass <code>None</code>\" there would be a good flag to add to <code>wasm-tools component new</code></p>",
        "id": 395061450,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696517687
    }
]