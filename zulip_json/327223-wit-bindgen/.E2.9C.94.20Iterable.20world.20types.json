[
    {
        "content": "<p>Hi all, I've recently been working on tools for analyzing type information in wasm components and came across the following use case.  <a href=\"https://github.com/bytecodealliance/jco/blob/main/crates/js-component-bindgen-component/wit/js-component-bindgen.wit\">This</a> component used in the jco toolchain doesn't import or export interfaces, but rather directly defines the functions it exports as well as the types those functions use.</p>\n<p>After acting on the binary with <code>wit-parser</code>, looking at the <code>World</code> <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/main/crates/wit-parser/src/lib.rs#L251\">here</a> that is available on the output <code>Resolve</code>, it seems that the only type info captured are the ones that are imported and exported.  Would a PR be welcome that adds types defined directly in a world to the struct, assuming I haven't missed some mechanism currently available for doing just that?</p>",
        "id": 412996605,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1705337361
    },
    {
        "content": "<p>Ah nvm looks like the inlined types are just available on the <code>imports</code> field... Should render this unnecessary.</p>",
        "id": 413007372,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1705341017
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486181\">Daniel Macovei</span> has marked this topic as resolved.</p>",
        "id": 413007382,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705341022
    }
]