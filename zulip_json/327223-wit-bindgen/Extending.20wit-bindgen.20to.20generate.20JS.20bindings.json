[
    {
        "content": "<p>I'm working in a project to run WASM and JS on IOT devices. We want to use WASM components in our project, but our WASM runtime has no component model support. We tried JCO but it doesn't work on our project, because our WASM API dose not support cross module imports, but JCO often generates multiple modules even if there's only one input component. </p>\n<p>Since the only way to create a compnent now is creating a core module with wit-bindgen and clang, and convert this core module to a component. There's nothing special with this core module except it uses components' ABI.  As a workaround in a transition stage, we want to run this core module directly on our runtime, instead of converting it to a component and transpiring it back to core module with JCO.</p>\n<p>So I want to extend wit-bindgen to generate JS bindings for this core module from a WIT file. This may sound weird, but the same mechanism that wit-bindgen use to generate ABI bridge is suitable for generating JS bindings to a core module. The README of wit-bindegn suggests me to reach out the authors here. So I'm here to get some further information.</p>\n<p>THANKS.</p>",
        "id": 377623129,
        "sender_full_name": "foobat",
        "timestamp": 1690038074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> could give you some insights as he's the author of jco.</p>",
        "id": 378297662,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1690242542
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634724\">@foobat</span>  it may be possible for JCO to convert the internal adapter Wasm modules into JS, and this is something we may need to explore for other reasons</p>",
        "id": 378574901,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1690310675
    },
    {
        "content": "<p>if so, it sounds like that might enable your use case, provided the component does not use component composition internally</p>",
        "id": 378575005,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1690310706
    },
    {
        "content": "<p>that said, a lot of interesting components just do use composition anyway, so there would still be quite a strong restriction on the environment</p>",
        "id": 378575073,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1690310724
    },
    {
        "content": "<p>if you are interested in that overall direction, we definitely need help updating JCO to convert the internal \"core adapters\" into JS</p>",
        "id": 378575261,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1690310769
    },
    {
        "content": "<p>that sounds very similar to the work you're interested in, so we could pick it up on github if you're keen - <a href=\"https://github.com/bytecodealliance/jco/issues/116\">https://github.com/bytecodealliance/jco/issues/116</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/issues/116\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/431ab1fa898f6fa180bcbe726834bd4fd312b210\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616337313833353163636234343462323166323664653032623130333564643765346530383866363933346461633632363036343239633665336530313633382f62797465636f6465616c6c69616e63652f6a636f2f6973737565732f313136)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/issues/116\" title=\"Adapter conversion to JS 路 Issue #116 路 bytecodealliance/jco\">Adapter conversion to JS 路 Issue #116 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">If we had the capability to convert adapter core modules that only do transcoding (eg in #79) and other simple binding attachment operations into the associated JS code, this would unblock some com...</div></div></div>",
        "id": 378576114,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1690310975
    }
]