[
    {
        "content": "<p>Is there any plan for managing dependency name conflicts? It seems that if you have two transitive dependencies that both define an interface with the same name they cannot be used in the same world.</p>",
        "id": 351162453,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681942729
    },
    {
        "content": "<p>(I'm looking at <em>you</em> <code>wasi-http.types</code> <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 351162497,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681942758
    },
    {
        "content": "<p>It's definitely intended that this is not a longstanding issue, but it's known that the <code>deps</code> folder organization currently suffers from this. Fully fixing that will require more in-depth integration with a registry or a better scheme for storing packages which can be referred to by other packages, and improving that has largely been \"on hold\" until the registry story is more advanced.</p>\n<p>Conflicting interfaces, though, in theory shouldn't cause an issue, so you may be running into a bug? Are you able to share a reproduction?</p>",
        "id": 351163532,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681943306
    },
    {
        "content": "<p>This fails under <code>cargo component build</code> complaining about duplicate unmergable <code>types</code> interfaces: <a href=\"https://github.com/lann/wasi-http-experiment\">https://github.com/lann/wasi-http-experiment</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasi-http-experiment\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e7b7562b33990ae855fe962430a12b408d3b1caa\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333633376138303231623236666137333166663363303961323163623138366332643332353832356266653235366163633366623261336566333631616134632f6c616e6e2f776173692d687474702d6578706572696d656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasi-http-experiment\" title=\"GitHub - lann/wasi-http-experiment\">GitHub - lann/wasi-http-experiment</a></div><div class=\"message_embed_description\">Contribute to lann/wasi-http-experiment development by creating an account on GitHub.</div></div></div>",
        "id": 351164807,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681943976
    },
    {
        "content": "<p>In this particular case it's because the preview2 adapter includes an older version of wasi-http with an incompatible <code>types</code> interface, but that version is in <code>http/</code> (in the adapter repo) while my copy is in <code>wasi-http/</code></p>",
        "id": 351165008,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681944083
    },
    {
        "content": "<p>ok I'll try to dig into this tomorrow to see if I can confirm whether or not this is a bug or whether it's intended to \"work later\"</p>",
        "id": 351168848,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681946399
    },
    {
        "content": "<p>I can work around the problem by renaming the interface in my local copy to e.g. <code>types2</code>, but it's awkward to need to patch a dependency like that</p>",
        "id": 351169918,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681947178
    },
    {
        "content": "<p>yeah you definitely shouldn't have to do that, and if the need is here today then we'll need to fix this in the tooling sooner rather than later</p>",
        "id": 351172605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1681949355
    },
    {
        "content": "<p>Ok I've dug a bit more into this now. Everything is working as expected currently, but that doesn't mean everything is in a great shape. Some thoughts I have poring over this are:</p>\n<ol>\n<li>You can get everything working today by in your local <code>wit/world.wit</code> adding <code>import my-types: wasi-http.types.types</code> to your world. This is basically explicitly giving your interface named <code>types</code> a different name than the adapter's <code>http.types.types</code>.</li>\n<li>The adapter probably shouldn't have information about http since it doesn't even use it. This is an artifact of the preview2-prototyping repository being a central place for WASI right now, which I think will get \"fixed\" in the future.</li>\n<li>My guess is that the <code>wasi-http</code> package you're using should be the same as the adapter's <code>http</code> package, but the name differences are preventing unioning these two (e.g. different names are, today, creating different URLs). This should work, however, if the package names agree and the contents are the same.</li>\n</ol>\n<p>Overall what's happening here, assuming that this is a use case where you're not actually shooting for the same <code>http</code> package, is that worlds are encapsulating a contract between the guest and the host about \"here's what names we'll be using to import/export things\" and something has to be done about name clashes. I'm not sure this is something that we can automatically handle since the component needs to do something and the host needs to be expecting the same thing. That's where the explicit disambiguation I mentioned above is a way to fix this by switching from the default \"name after the interface\" logic. That being said the <code>types</code> interface should probably be called something like <code>wasi-types</code> or <code>wasi-http-types</code> to be a little less \"generic\".</p>\n<p>I'm not confident this won't cause a lot of issues down the road though. I'm not sure of a better solution off the top of my head, however, other than renaming interfaces. At least changing the names of interfaces won't cause issues ergonomically because most of them are <code>default interface ...</code> so the name isn't even mentioned in WIT, only in the component.</p>",
        "id": 351412178,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682018880
    },
    {
        "content": "<blockquote>\n<p>My guess is that the wasi-http package you're using should be the same as the adapter's http package, but the name differences are preventing unioning these two (e.g. different names are, today, creating different URLs). This should work, however, if the package names agree and the contents are the same.</p>\n</blockquote>\n<p>They aren't the same. The adapter repo has an old version of wasi-http which is a couple of weeks old and incompatible with the wasi-http repo's current contents.</p>",
        "id": 351413650,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682019400
    },
    {
        "content": "<p>oh sure yeah, but they're intended to be the same right?</p>",
        "id": 351413997,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682019516
    },
    {
        "content": "<p>Ah yeah, they're different versions of the same things</p>",
        "id": 351414068,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682019541
    },
    {
        "content": "<p>if they're sync'd up I think that things should work</p>",
        "id": 351414114,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682019555
    },
    {
        "content": "<p>or at least it's intended that everything works at that point</p>",
        "id": 351414131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682019561
    },
    {
        "content": "<p>where they'd naturally get unified into one</p>",
        "id": 351414149,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682019567
    },
    {
        "content": "<p>am I right in thinking that this means that every transitively imported interface name is part of one namespace?</p>",
        "id": 351414967,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682019853
    },
    {
        "content": "<p>at least if any of its types are exposed to the world?</p>",
        "id": 351415018,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682019874
    },
    {
        "content": "<p>currently, yes, because components have a flat list of imports</p>",
        "id": 351415616,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020096
    },
    {
        "content": "<p>one thing we can do though is control those names as we see fit to have less likelihood of collisions</p>",
        "id": 351415669,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020125
    },
    {
        "content": "<p>and most of the naming doesn't need to get surfaced in the tooling itself or to developers in theory</p>",
        "id": 351415690,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020135
    },
    {
        "content": "<p>It seems that practically all common interfaces would need to be prefixed with a namespace to avoid conflicts</p>",
        "id": 351416310,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682020379
    },
    {
        "content": "<p>if that is going to be the case long-term we should start updating interfaces sooner than later</p>",
        "id": 351416415,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682020421
    },
    {
        "content": "<p>yeah the long-term picture isn't super clear to me, these sorts of details are really only sort of crystallizing in the last few weeks so it's only now really possible to reason about what the concrete problems are and what solutions we'll want to shape up</p>",
        "id": 351416655,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020501
    },
    {
        "content": "<p>we could alternatively employ an entirely different model of translating WIT to wasm which sidesteps this problem</p>",
        "id": 351416795,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020556
    },
    {
        "content": "<p>not that I know what such a model would be, though</p>",
        "id": 351416858,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020568
    },
    {
        "content": "<p>It is a bit of a shame to have a foundation of the component model which doesn't really have these problems per se but a system is layered on top which has these problems</p>",
        "id": 351417379,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020751
    },
    {
        "content": "<p>If you're up for it I think it'd be good to start an issue on the component-model repository about this</p>",
        "id": 351417620,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020812
    },
    {
        "content": "<p>one upside is that this may be a relatively isolated problem, basically the issue of \"how is a world and it's transitive deps elaborated\" which might be akin to \"add one or two new features to worlds\" as opposed to 'redesign lots of different things from scratch'</p>",
        "id": 351417887,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682020894
    },
    {
        "content": "<p>This seems like essentially the same discussion: <a href=\"https://github.com/WebAssembly/component-model/issues/177\">https://github.com/WebAssembly/component-model/issues/177</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/177\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7e7e6a896fa582908d13e617d9f2ac9f58f4cd95\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663339373261633937613666306238333564653634353335323335363365303230653431303038363833333166333535376636626337333233343764613838302f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f313737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/177\" title=\"Namespacing for Worlds · Issue #177 · WebAssembly/component-model\">Namespacing for Worlds · Issue #177 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">My understanding is that right now there is a single namespace in the context with WIT. That can cause some confusion as you can see in this discussion here. For the case of wasi:http/outgoing-hand...</div></div></div>",
        "id": 351418044,
        "sender_full_name": "Lann Martin",
        "timestamp": 1682020935
    },
    {
        "content": "<p>perhaps yeah! I'd have to reread later</p>",
        "id": 351418496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1682021121
    }
]