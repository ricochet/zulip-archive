[
    {
        "content": "<p>I've recently started encountering a compilation with some of my components:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">rust</span><span class=\"o\">-</span><span class=\"n\">lld</span>: <span class=\"nc\">error</span>: <span class=\"nc\">duplicate</span><span class=\"w\"> </span><span class=\"n\">symbol</span>: <span class=\"nc\">cabi_realloc</span>\n<span class=\"w\">          </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Volumes</span><span class=\"o\">/</span><span class=\"n\">workplace</span><span class=\"o\">/</span><span class=\"n\">smithy</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">libwit_bindgen</span><span class=\"o\">-</span><span class=\"n\">e0be62897f1f39ee</span><span class=\"p\">.</span><span class=\"n\">rlib</span><span class=\"p\">(</span><span class=\"n\">wit_bindgen</span><span class=\"o\">-</span><span class=\"n\">e0be62897f1f39ee</span><span class=\"p\">.</span><span class=\"n\">wit_bindgen</span><span class=\"p\">.</span><span class=\"mi\">772</span><span class=\"n\">b3d7561ccd03a</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">)</span>\n<span class=\"w\">          </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Volumes</span><span class=\"o\">/</span><span class=\"n\">workplace</span><span class=\"o\">/</span><span class=\"n\">smithy</span><span class=\"o\">-</span><span class=\"n\">rs</span><span class=\"o\">/</span><span class=\"n\">tools</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">libwit_bindgen</span><span class=\"o\">-</span><span class=\"mi\">51</span><span class=\"n\">f815a7b68edcc4</span><span class=\"p\">.</span><span class=\"n\">rlib</span><span class=\"p\">(</span><span class=\"n\">wit_bindgen</span><span class=\"o\">-</span><span class=\"mi\">51</span><span class=\"n\">f815a7b68edcc4</span><span class=\"p\">.</span><span class=\"n\">wit_bindgen</span><span class=\"p\">.</span><span class=\"n\">d59611476daebe1f</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Through testing this seems to happen whenever I change my local version of <code>wit-bindgen</code> to anything other than <code>0.16.0</code>. I am also using the <code>wasi::http</code> bindings from the <code>wasi</code> crate, and those bindings seem to be generated with <code>wit-bindgen</code> 16 so I think that is likely the cause of the conflicting symbols whenever I change my version.</p>\n<p>Is the guidance that I should pin my <code>wit-bindgen</code> version to whatever the <code>wasi</code> crate uses, or is there another way of solving the duplicated symbol issue?</p>\n<p>Note: this is happening fairly deep in a repo I'm working on at the moment, I will try to pull out a minimal repro soon.</p>",
        "id": 422068264,
        "sender_full_name": "Landon James",
        "timestamp": 1708233673
    },
    {
        "content": "<p>This looks like you might be including two versions of wit-bindgen in the final binary. That's probably something we should fix at the wit-bindgen layer to support that, but in the near-term the best fix is probably to ensure everything is using the same version of wit-bindgen</p>",
        "id": 422118129,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708280733
    },
    {
        "content": "<p>Gotcha, thankfully <code>wasi</code> is my only other <code>wit-bindgen</code> using dependency at the moment, so it is pretty easy to coordinate. I managed to get up a <a href=\"https://github.com/landonxjames/wit-bindgen-symbol-repro\">repro</a> and created an <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/849\">issue</a> to track this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/landonxjames/wit-bindgen-symbol-repro\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a9601bddf9fa39bbc8f1e43e9d32d4639425c184\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393535643034363831353532323939333737343061376432373765333730333261616430313462636334383466646364616262633962343037363963323961322f6c616e646f6e786a616d65732f7769742d62696e6467656e2d73796d626f6c2d726570726f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/landonxjames/wit-bindgen-symbol-repro\" title=\"GitHub - landonxjames/wit-bindgen-symbol-repro: Minimal repro of a compilation issue for wit-bindgen\">GitHub - landonxjames/wit-bindgen-symbol-repro: Minimal repro of a compilation issue for wit-bindgen</a></div><div class=\"message_embed_description\">Minimal repro of a compilation issue for wit-bindgen - landonxjames/wit-bindgen-symbol-repro</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/849\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a3f85c83aca2cbb72a44acf006885be75302731a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613266336566633362386334613663646166623063623363653035323137363237666238373036363432666531613031616539666533623664303037633132312f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f383439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/849\" title=\"Compilation error when multiple versions of `wit-bindgen` present in project 路 Issue #849 路 bytecodealliance/wit-bindgen\">Compilation error when multiple versions of `wit-bindgen` present in project 路 Issue #849 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">When there are multiple versions of wit-bindgen present in a project compilation fails with an error like: = note: rust-lld: error: duplicate symbol: cabi_realloc &gt;&gt;&gt; defined in /Volumes/workplace/...</div></div></div>",
        "id": 422148812,
        "sender_full_name": "Landon James",
        "timestamp": 1708308955
    },
    {
        "content": "<p>Thanks for the issues here.</p>\n<p>The \"best\" way I can think of solving this is to switch the <code>cabi_realloc</code> symbol to a weak symbol. That way it's ok to have multiple definitions and they'll all be largely the same so it doesn't matter which one the linker ends up picking. The bad part about this is that there's no way to define a weak symbol in stable Rust. </p>\n<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> you wouldn't happen to have any tricks to defining a weak symbol in stable Rust would you? (or anyone else?)</p>",
        "id": 422479116,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454407
    },
    {
        "content": "<p>This is definitely going to be something I want to solve because I don't want to have to update the <code>wasi</code> crate every time <code>wit-bindgen</code> updates</p>",
        "id": 422479171,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454432
    },
    {
        "content": "<p>No, last I looked into it the weak symbol attributes were nightly-only.</p>",
        "id": 422479179,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708454434
    },
    {
        "content": "<p>one idea I had was to use <code>global_asm!</code> perhaps with various directives there</p>",
        "id": 422479246,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454469
    },
    {
        "content": "<p>but I'm not sure how stable that would be since I don't think LLVM provides strict stability guarantees about that layer of assembly</p>",
        "id": 422479270,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454485
    },
    {
        "content": "<p>especially for a somewhat niche target like wasm</p>",
        "id": 422479288,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454492
    },
    {
        "content": "<p>hm maybe I'll try going that route for now and see how it pans out, looks like the directive is <code>.weak</code></p>",
        "id": 422479451,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454556
    },
    {
        "content": "<p>We could make weak symbols using <code>.weak</code> inside a <code>global_asm!</code>. (edit: ah, you beat me too it)</p>",
        "id": 422479456,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708454557
    },
    {
        "content": "<p>bah <code>global_asm!</code> isn't available on wasm targets</p>",
        "id": 422479574,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454613
    },
    {
        "content": "<p>I suppose we could do the same object-file-hackery that the adapter used to do</p>",
        "id": 422479651,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454644
    },
    {
        "content": "<p>(still does?)</p>",
        "id": 422479688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454648
    },
    {
        "content": "<p>oof that's a lot to hardcode though</p>",
        "id": 422479909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454730
    },
    {
        "content": "<p>How hard would it be to give <code>cabi_realloc</code> a mangled name?</p>",
        "id": 422480035,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708454767
    },
    {
        "content": "<p>we could relatively easily do something like <code>cabi_realloc_wit_bindgen_0_18_0</code> or something like that</p>",
        "id": 422480294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454882
    },
    {
        "content": "<p>another attempt would be to have <code>cabi_realloc.c</code> in the repo and check in a precompiled <code>libcabi_realloc.a</code> which is distributed to <a href=\"http://crates.io\">crates.io</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 422480413,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454922
    },
    {
        "content": "<p>but that would go straight to <code>malloc</code> which bypasses Rust's allocator stuff which at least causes wit-bindgen tests to fail</p>",
        "id": 422480451,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454942
    },
    {
        "content": "<p>since they rely on that to count allocations</p>",
        "id": 422480457,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454946
    },
    {
        "content": "<p>we could also move all this logic into <code>wasm-tools component new</code> and pick any function that starts with <code>cabi_realloc</code> to be the allocator, but that doesn't feel great</p>",
        "id": 422480543,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708454977
    },
    {
        "content": "<p>If we could mangle the name though are you thinking we'd have C refer to that?</p>",
        "id": 422480594,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455000
    },
    {
        "content": "<p>I think so? Like ,<code>cabi_realloc_wit_bindgen_0_18_0</code> is manageable levels of ugly.</p>",
        "id": 422480765,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708455053
    },
    {
        "content": "<p>we'd have to recomiple the <code>*.c</code> file per-version</p>",
        "id": 422480884,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455098
    },
    {
        "content": "<p>which isn't the end of the world</p>",
        "id": 422480898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455105
    },
    {
        "content": "<p>I suppose with the shiny new release process we could even automate this</p>",
        "id": 422480956,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455123
    },
    {
        "content": "<p>Is there a context where we have a C compiler that could compile <code>cabi_realloc</code>? Because we can make weak symbols from C.</p>",
        "id": 422481053,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708455156
    },
    {
        "content": "<p>in CI for <code>wit-bindgen</code> itself for sure, but not when users get the <code>wit-bindgen</code> from <a href=\"http://crates.io\">crates.io</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 422481208,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455218
    },
    {
        "content": "<p>so I'm thinking we could add a <code>*.c</code> file and verify in CI that there's a checked in <code>*.a</code> file which \"matches\"</p>",
        "id": 422481314,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455245
    },
    {
        "content": "<p>and then PRs to do a release automatically recompile and make a commit with the new version</p>",
        "id": 422481347,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455259
    },
    {
        "content": "<p>so that way we use C to define a weak <code>cabi_realloc</code> and that refers to a  version-specific symbol</p>",
        "id": 422481379,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455272
    },
    {
        "content": "<p>convoluted, but could work</p>",
        "id": 422481389,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455278
    },
    {
        "content": "<p>Yeah</p>",
        "id": 422481411,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708455285
    },
    {
        "content": "<p>How evil would it be to smuggle a <code>.weak</code> inside a non-global <code>asm!</code> inside the body of <code>cabi_realloc</code>?</p>",
        "id": 422481503,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708455322
    },
    {
        "content": "<p>even <code>asm!</code> isn't reachable :(</p>",
        "id": 422481567,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455348
    },
    {
        "content": "<p>Ah, I didn't realize we didn't have <code>asm</code></p>",
        "id": 422481762,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708455409
    },
    {
        "content": "<p>oh I was using the wrong path, <code>asm!</code> and <code>global_asm!</code> are reachable but both flagged as unstable</p>",
        "id": 422481764,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455409
    },
    {
        "content": "<p>I was doing <code>core::arch::wasm32::asm!</code> instead of <code>core::arch::asm!</code></p>",
        "id": 422481805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708455426
    },
    {
        "content": "<p>Ok <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/851\">https://github.com/bytecodealliance/wit-bindgen/pull/851</a> is my attempt at all this</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/851\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c8b342ebf2ea50ba02834ef7931289ff42952932\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396463343462656565313635333965303666313661306631376666333461623432653166373464323933376165653465356337663639646564316234646330622f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f383531)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/851\" title=\"rust: Define `cabi_realloc` as a weak symbol by alexcrichton 路 Pull Request #851 路 bytecodealliance/wit-bindgen\">rust: Define `cabi_realloc` as a weak symbol by alexcrichton 路 Pull Request #851 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This commit updates the wit-bindgen Rust crate to define the cabi_realloc symbol as a weak symbol. This is not easy because Rust does not offer a stable means by which to do this. Despite this thro...</div></div></div>",
        "id": 422498050,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708461920
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> question for you, which I have no idea if you'll know the answer to this:</p>\n<p>For wasi-sdk using the precompiled binaries from CI I'm seeing <code>!1 = !{!\"clang version 16.0.0\"}</code> in LLVM IR. For wasi-sdk's precompiled binaries on macOS I'm seeing <code>!1 = !{!\"clang version 16.0.0 (https://github.com/llvm/llvm-project 08d094a0e457360ad8b94b017d2dc277e697ca76)\"}</code> in the IR. This means that a macOS host and a Linux host produce a different \"producers\" section in the output. You wouldn't happen to know off the top of your head why that is would you?</p>",
        "id": 422502800,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708463741
    },
    {
        "content": "<p>Wow, no, I don't know. My guess is some build system logic to distinguish between \"official builds\" and custom builds, but I don't know what that logic is looking at.</p>",
        "id": 422503090,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708463836
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> might perhaps know?</p>",
        "id": 422503118,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1708463854
    },
    {
        "content": "<p>I need to track that down, figure out how to get clang to not emit it, or strip it myself</p>",
        "id": 422503438,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708463992
    }
]