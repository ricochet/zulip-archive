[
    {
        "content": "<p>I'm defining a factory resource (i.e. <code>resource object {}, resource factory { create: func() -&gt; object; }</code>for a javascript class.  I am importing, and defining the class in an external js file (i,e. <code>class Factory { create() }</code> and using <code>--map</code> to map it into bindgen.  The problem is that when I extend the factory js and register the factory, later when rust uses the factory, the base/super class factory function is called, and not the extended class function.  The issue is that the codegen is calling the superclass prototype directly instead of the class instance function.  i.e. - <code>Factory.prototype.create.call(rsc0);</code>.  If I hot patch the generated js I can work around this, but the question is, what is the right way to do this, and does wit even support the concept of a trait/protocol for me to do what I'm trying to do.</p>",
        "id": 423885417,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709147508
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span></p>",
        "id": 423891616,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709149846
    },
    {
        "content": "<p>Thanks for the ping <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> we can make this work by calling whatever instance method is defined, allowing JS-defined resources to behave more like JS classes and to have method variations per reference passed. This asks the next question - should static methods also be subclassed? So instead of <code>Class.staticMethod</code> we call <code>obj.constructor.staticMethod</code>? Perhaps. Constructors of course can only come from the defined resource. This seems a little magical but it could work. Would be curious to get feedback from others on this... Alex?</p>",
        "id": 423932795,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709170263
    },
    {
        "content": "<p>Basically do we want to allow for JS-defined resources that the following works:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">MyClass</span><span class=\"p\">();</span>\n<span class=\"nx\">witFunction</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n<span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">myMethod</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'new method'</span><span class=\"p\">);</span>\n<span class=\"nx\">witFunction</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>where <code>myMethod</code> is a wit resource method being updated to the monkey patched version in the above</p>",
        "id": 423932943,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709170373
    },
    {
        "content": "<p>And so on the Rust side I assume then that it would still appear as a concrete object of the base/parent resource just with the functionality of the extended/overridden functions?  Rather than being just a trait?  I guess espectially if the constructor cannot be overridden, it would be cool if 'imported' and mapped resources were generated as traits.<br>\nAlso, would this allow for 'exported' resources to be extended as well?</p>",
        "id": 424033022,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709217502
    },
    {
        "content": "<p>Oh I won't pretend to know much about JS idioms, so I don't know what's best/expected/etc here</p>",
        "id": 424055401,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709223322
    },
    {
        "content": "<p>one issue with the dynamic dispatch mechanism here is that it will work for methods, but not static methods</p>",
        "id": 424097018,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709236627
    },
    {
        "content": "<p>because we don't have a resource parameter in static methods to pick up the constructor from</p>",
        "id": 424097062,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709236639
    },
    {
        "content": "<p>so subclass static methods and constructors don't get used</p>",
        "id": 424097115,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709236659
    },
    {
        "content": "<p>but perhaps that's not so bad? I'm still not sure how I feel about that inconsistency though</p>",
        "id": 424097154,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709236670
    },
    {
        "content": "<p>posted <a href=\"https://github.com/bytecodealliance/jco/pull/390\">https://github.com/bytecodealliance/jco/pull/390</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/390\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7c2dd1b3bc17110a6e84157457de13c6c73ce602\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366665306130396664626336303034393034663231323730623434323464613435633736363038643737346266656666613663333533636535636235396461302f62797465636f6465616c6c69616e63652f6a636f2f70756c6c2f333930)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/390\" title=\"feat: JS resource method dynamic dispatch by guybedford 路 Pull Request #390 路 bytecodealliance/jco\">feat: JS resource method dynamic dispatch by guybedford 路 Pull Request #390 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">This updates the resource method calls for JS-defined resources to use resource.method(arg) instead of ResourceClass.prototype.method.call(resource, arg) allowing more flexibility in dynamic subcla...</div></div></div>",
        "id": 424097739,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709236855
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> !</p>",
        "id": 424107433,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709240468
    }
]