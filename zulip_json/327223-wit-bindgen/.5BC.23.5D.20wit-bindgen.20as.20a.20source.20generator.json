[
    {
        "content": "<p>Straight up generating the C# code as it is now is obviously a good first step, but I would love wit-bindgen to be more integrated with the .NET ecosystem and I believe that (incremental) source generators might be a direction worth exploring. A source generator would create a dev experience more similar to the <code>bindgen!</code> macros in Rust where feedback about WIT files can be communicated directly through Roslyn.  </p>\n<p>It is still early, but I would love to hack a bit on this idea to see if it is possible and practical. I need a little bit of help to get started though. So I have a few questions:</p>\n<p><strong>1. Has there already been thinking/work done with using c# source generators for WIT files?</strong><br>\n<strong>2. Could we reuse/integrate existing tooling such as <code>wit-parser</code> or even <code>wit-bindgen</code> directly? </strong> It might be a bit wasteful to implement a WIT parser in c# itself, but as far as I can see the existing tools don't <code>extern</code> their interface so creating direct bindings seems out of the question for now. </p>\n<p>Any further thoughts, ideas, or directions are welcome :)</p>",
        "id": 421264208,
        "sender_full_name": "Jesse Wellenberg (Yeseh)",
        "timestamp": 1707837301
    },
    {
        "content": "<p>There has been some work done on generating Go bindings from Go via a JSON-serialized form of parsed WIT: <a href=\"https://github.com/ydnar/wasm-tools-go\">https://github.com/ydnar/wasm-tools-go</a> which <span class=\"user-mention\" data-user-id=\"639636\">@Randy Reddig</span> may be able to give insight on</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/ydnar/wasm-tools-go\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d069573d3ca00352404fc3ae824d8d49f5f639f5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643863643735363433616538386262306161303334666535376166323633623932366431393032623639346530646138663166643963656338643437373934332f79646e61722f7761736d2d746f6f6c732d676f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/ydnar/wasm-tools-go\" title=\"GitHub - ydnar/wasm-tools-go: WebAssembly + WASI tools for Go\">GitHub - ydnar/wasm-tools-go: WebAssembly + WASI tools for Go</a></div><div class=\"message_embed_description\">WebAssembly + WASI tools for Go. Contribute to ydnar/wasm-tools-go development by creating an account on GitHub.</div></div></div>",
        "id": 421267410,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707838216
    },
    {
        "content": "<p>That serialization isn't very friendly though; it is basically a dump of wit-parser's internal representation.</p>",
        "id": 421267610,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707838271
    },
    {
        "content": "<p>I have personally always liked the idea of a WIT interface for bindings generation so that generators could be written in any language, compiled to wasm, and executed by wit-bindgen as a harness, but I also haven't done any real work to make that dream a reality <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 421268027,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707838391
    },
    {
        "content": "<p>The JSON representation isn’t simple, but it works well enough to recreate the original WIT syntax, and generate Go</p>",
        "id": 421268332,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1707838472
    },
    {
        "content": "<p>The Go implementation might be a good place to start if you want to do a C# implementation</p>",
        "id": 421268525,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1707838521
    },
    {
        "content": "<p>I’m contemplating running wasm-tools inside Go as a Wasm module to generate the JSON from WIT implicitly</p>",
        "id": 421268756,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1707838568
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/.5BC.23.5D.20wit-bindgen.20as.20a.20source.20generator/near/421268027\">said</a>:</p>\n<blockquote>\n<p>I have personally always liked the idea of a WIT interface for bindings generation so that generators could be written in any language, compiled to wasm, and executed by wit-bindgen as a harness, but I also haven't done any real work to make that dream a reality <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n</blockquote>\n<p>I have had that thought as well haha.</p>\n<p>Thanks for the directions, will give that go implementation a look.</p>",
        "id": 421282485,
        "sender_full_name": "Jesse Wellenberg (Yeseh)",
        "timestamp": 1707842243
    },
    {
        "content": "<p>C# source generators for WIT if it involves call outs to processes, e.g. wit-bindgen is not allowed, it was discussed here <a href=\"https://github.com/dotnet/runtimelab/issues/2377\">https://github.com/dotnet/runtimelab/issues/2377</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/issues/2377\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/53690852e92d3d9e2a42e863ed395955299df866\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373062336338613463333033333238353866623166396437346236326233663432303565373537636364623264323736323137626561626264376636336163322f646f746e65742f72756e74696d656c61622f6973737565732f32333737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/issues/2377\" title=\"NativeAOT-LLVM: Question: Interest in wit-bindgen for c# · Issue #2377 · dotnet/runtimelab\">NativeAOT-LLVM: Question: Interest in wit-bindgen for c# · Issue #2377 · dotnet/runtimelab</a></div><div class=\"message_embed_description\">Hi, Some time back in the ByteAlliance zulip chat there was mention of some interest from Microsoft in helping with the c# bindings for wit-bindgen https://bytecodealliance.zulipchat.com/#narrow/st...</div></div></div>",
        "id": 423304972,
        "sender_full_name": "Scott Waye",
        "timestamp": 1708908068
    },
    {
        "content": "<p>As a small step forward, wit-bindgen-go can now exec wasm-tools to perform the WIT to JSON conversion under the hood: <a href=\"https://github.com/ydnar/wasm-tools-go/pull/51\">https://github.com/ydnar/wasm-tools-go/pull/51</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/ydnar/wasm-tools-go/pull/51\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c55b634a21fb6a698108d46ac401a75f0a836cca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316466356230323266633364376165326638373536623830633862306630343233303337393262323364386662653933663636306530656564626233643065642f79646e61722f7761736d2d746f6f6c732d676f2f70756c6c2f3531)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/ydnar/wasm-tools-go/pull/51\" title=\"wit: shell out to wasm-tools to load WIT files directly by ydnar · Pull Request #51 · ydnar/wasm-tools-go\">wit: shell out to wasm-tools to load WIT files directly by ydnar · Pull Request #51 · ydnar/wasm-tools-go</a></div><div class=\"message_embed_description\">wit: add LoadJSON and LoadWIT functions\ncmd/wit-bindgen-go\n.github/workflows/test: setup wasm-tools\nREADME: update with additional context</div></div></div>",
        "id": 423307573,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1708910658
    }
]