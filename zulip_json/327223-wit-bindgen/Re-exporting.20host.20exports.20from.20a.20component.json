[
    {
        "content": "<p>Hey everyone!</p>\n<p>I have sort of a niche use case, and I'm trying to build a component, which would essentially re-export the host exports (i.e. the component itself would export the <code>wasi:cli/imports</code> world etc.)</p>\n<p>Unfortunately, I hit:</p>\n<blockquote>\n<p>interface transitively depends on an interface in incompatible ways</p>\n</blockquote>\n<p>in Rust bindgen version 0.30 with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">repro</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">@</span><span class=\"mf\">0.2.1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.1</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've summed up by observations here: <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1043\">https://github.com/bytecodealliance/wit-bindgen/issues/1043</a> and added a repro here: <a href=\"https://github.com/rvolosatovs/wit-bindgen-export-bug-repro\">https://github.com/rvolosatovs/wit-bindgen-export-bug-repro</a></p>\n<p>Curious is anyone has an idea of what might be going wrong here and if there's some way to fix it apart from manually implementing exports in the component?</p>\n<p>Looks like perhaps I'm hitting an instance of <a href=\"https://github.com/WebAssembly/component-model/issues/208\">https://github.com/WebAssembly/component-model/issues/208</a> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1043\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d8153580bd7b484b03a377bc8b99aca89da9fe4c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636265613661313937613664656661336261636137656262396661306564313166373833393864613962626133616137656534396665663162326136313066362f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f31303433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/1043\" title=\"Rust: `interface transitively depends on an interface in incompatible ways` · Issue #1043 · bytecodealliance/wit-bindgen\">Rust: `interface transitively depends on an interface in incompatible ways` · Issue #1043 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Given following WIT: package repro:component@0.1.0; world component { export wasi:io/poll@0.2.1; export wasi:http/types@0.2.1; } And following lib.rs: mod bindings { use super::Component; wit_bindg...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rvolosatovs/wit-bindgen-export-bug-repro\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6da1222a455fa67a4fbdbb4962f1d01fab47c6c2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396461636139343438323664613563616562663236373134663166373035633030396430366164643066333938663036366338396639633963613764613731642f72766f6c6f7361746f76732f7769742d62696e6467656e2d6578706f72742d6275672d726570726f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rvolosatovs/wit-bindgen-export-bug-repro\" title=\"GitHub - rvolosatovs/wit-bindgen-export-bug-repro\">GitHub - rvolosatovs/wit-bindgen-export-bug-repro</a></div><div class=\"message_embed_description\">Contribute to rvolosatovs/wit-bindgen-export-bug-repro development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/208\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7f0fc2304d2567f932795fe1e9cc9ed96b423f01/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353639646633646139353162306137626637383166313862633264306238303334323635643638646666313033316132303239333566616334316163666636662f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323038&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/208\" title=\"Resolving transitive dependencies of WIT exports · Issue #208 · WebAssembly/component-model\">Resolving transitive dependencies of WIT exports · Issue #208 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">One of the subtelties of imports and exports in WIT is that they both need to somehow resolve their transitive dependencies. For example this world: package foo:bar interface foo { type t = u32 } i...</div></div></div>",
        "id": 465999362,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1724934043
    },
    {
        "content": "<p>interestingly, this seems to work for wasi-virt: <a href=\"https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/wit/virt.wit#L5-L45\">https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/wit/virt.wit#L5-L45</a> <a href=\"https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/virtual-adapter/src/lib.rs#L9-L13\">https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/virtual-adapter/src/lib.rs#L9-L13</a></p>\n<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/wit/virt.wit#L5-L45\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/209b82cd078e092c67a30dfbdc1554568fae7fce/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353563633865373138653235396136363063633038386639316633643736653663623931653133666437363530363361643064633934393132316361386438662f62797465636f6465616c6c69616e63652f574153492d56697274&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/wit/virt.wit#L5-L45\" title=\"WASI-Virt/wit/virt.wit at c4512614d0bbe50044b93577099232c1701b06e2 · bytecodealliance/WASI-Virt\">WASI-Virt/wit/virt.wit at c4512614d0bbe50044b93577099232c1701b06e2 · bytecodealliance/WASI-Virt</a></div><div class=\"message_embed_description\">Virtual implementations of WASI APIs. Contribute to bytecodealliance/WASI-Virt development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/virtual-adapter/src/lib.rs#L9-L13\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/209b82cd078e092c67a30dfbdc1554568fae7fce/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353563633865373138653235396136363063633038386639316633643736653663623931653133666437363530363361643064633934393132316361386438662f62797465636f6465616c6c69616e63652f574153492d56697274&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt/blob/c4512614d0bbe50044b93577099232c1701b06e2/virtual-adapter/src/lib.rs#L9-L13\" title=\"WASI-Virt/virtual-adapter/src/lib.rs at c4512614d0bbe50044b93577099232c1701b06e2 · bytecodealliance/WASI-Virt\">WASI-Virt/virtual-adapter/src/lib.rs at c4512614d0bbe50044b93577099232c1701b06e2 · bytecodealliance/WASI-Virt</a></div><div class=\"message_embed_description\">Virtual implementations of WASI APIs. Contribute to bytecodealliance/WASI-Virt development by creating an account on GitHub.</div></div></div>",
        "id": 466002972,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1724934929
    },
    {
        "content": "<p>The fix for this is to basically export more things. The problem is that the transitive dependencies of <code>wasi:http/types</code> are imported. What ends up happening though is that <code>wasi:io/poll</code> is both an import and an export in that case, but various types are wired up to the wrong places. What you're describing in theory could work but probably won't work the way you'd like it to.</p>",
        "id": 466098800,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724960378
    },
    {
        "content": "<p>In any case the interim solution is to export more interfaces so the transitive dependencies of <code>wasi:http/types</code> are all exports as opposed to becoming implicitly imports</p>",
        "id": 466098856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724960395
    },
    {
        "content": "<p>Thanks! I'll try that out</p>",
        "id": 466263764,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1725022903
    }
]