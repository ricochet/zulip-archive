[
    {
        "content": "<p>I have a <strong><em>world.wit</em></strong> comprising function as well as <strong>type</strong> definitions. Futhermore, there is a corresponding <strong>component</strong> which I would like to use from a Rust host. There are no problems in calling the functions but somehow the host does not recognize the types, e.g. the following does not compile:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface decoding {\n\n  record test {\n    t1: u32,\n  }\n\n  record r {\n    a: u32,\n    b: string,\n  }\n  // [..]\n}\n\ndefault world decoder {\n  export exports: self.decoding\n}\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Cargo.toml:  wasmtime = { version = \"8\", features = [\"component-model\"] }</span>\n<span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"world\"</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"s\">\"../app/wit/world.wit\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span>::<span class=\"p\">{</span><span class=\"n\">R</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Test</span><span class=\"p\">};</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">27</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>use<span class=\"w\"> </span>exports::<span class=\"o\">{</span>R,<span class=\"w\"> </span>Test<span class=\"o\">}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">               </span>^<span class=\"w\">  </span>^^^^<span class=\"w\"> </span>no<span class=\"w\"> </span><span class=\"sb\">`</span>Test<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">               </span><span class=\"p\">|</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">               </span>no<span class=\"w\"> </span><span class=\"sb\">`</span>R<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">               </span>help:<span class=\"w\"> </span>a<span class=\"w\"> </span>similar<span class=\"w\"> </span>name<span class=\"w\"> </span>exists<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>module:<span class=\"w\"> </span><span class=\"sb\">`</span>_<span class=\"sb\">`</span>\n</code></pre></div>\n<p>Is my expectation right that the host should be able to recognize and use types defined in a <strong><em>.wit</em></strong>?<br>\nIs there any obvious error or anything specific I have to consider in order to make the host recognize the types from my <strong>.wit</strong>?</p>",
        "id": 367660024,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687184758
    },
    {
        "content": "<p>see the out-of-line example here <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds</a><br>\nI think it should work if you just remove your <code>self.</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4087eca3bdbac60a1889b87b7a94689164d2b414\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643931336266333539366564326534656137303336616331623339353966623464623766353636373735616162323066316238373766373830663164353436312f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-worlds\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/design/mvp/WIT.md at main · WebAssembly/component-model</div></div></div>",
        "id": 367662423,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1687185193
    },
    {
        "content": "<p>mmhh.. removal of <code>self.</code>, like,</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>default world decoder {\n  export exports: decoding\n}\n</code></pre></div>\n<p>results in</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>expected<span class=\"w\"> </span><span class=\"s1\">'.'</span>,<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"s1\">'}'</span>\n<span class=\"w\">            </span>--&gt;<span class=\"w\"> </span>../app/wit/world.wit:45:1\n<span class=\"w\">             </span><span class=\"p\">|</span>\n<span class=\"w\">          </span><span class=\"m\">45</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span><span class=\"o\">}</span>\n<span class=\"w\">             </span><span class=\"p\">|</span><span class=\"w\"> </span>^\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>decoder/src/lib.rs:23:1\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">23</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wasmtime::component::bindgen!<span class=\"o\">(</span><span class=\"s2\">\"world\"</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"s2\">\"../app/wit/world.wit\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 367667931,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687186272
    },
    {
        "content": "<p>ah no, sorry, your export should be in the form of <code>export decoding</code>, if you want to rename that you need something like <code>use decoding as exports; export exports</code> according to the documentation I linked</p>",
        "id": 367669092,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1687186521
    },
    {
        "content": "<p>Thank you for your feedback. Unfortunately, I cannot positively reproduce your suggestions. I am aware of the provided documentation, though. When I try to craft a <a href=\"https://github.com/Finfalter/componenthost\">minimal working example</a> I observe that even the snippets from the documentation do not seem to pass.</p>\n<p>[Disclaimer: updated dependency to wasmtime 9]</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Finfalter/componenthost\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/66d8f03bc2f94fdb66c3592c461403527169361f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316430356466376437346630386434653639623163626566386539336139313432626164303666306464666533653135643634356236653032356263313232642f46696e66616c7465722f636f6d706f6e656e74686f7374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Finfalter/componenthost\" title=\"GitHub - Finfalter/componenthost: Minimal example of wasmtime about generating the wit for a component\">GitHub - Finfalter/componenthost: Minimal example of wasmtime about generating the wit for a component</a></div><div class=\"message_embed_description\">Minimal example of wasmtime about generating the wit for a component - GitHub - Finfalter/componenthost: Minimal example of wasmtime about generating the wit for a component</div></div></div>",
        "id": 367832030,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687247588
    },
    {
        "content": "<p>The syntax has changed to the new form a few weeks ago and the example you look at might still be outdated. The new wit-bindgen for sure does neither accept nor need self.</p>",
        "id": 367838312,
        "sender_full_name": "Christof Petig",
        "timestamp": 1687248982
    },
    {
        "content": "<p>Sorry that I have to contradict. The following compiles:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface decoding {\n  record test {\n    t1: u32,\n  }\n}\n\ndefault world decoder {\n  export exports: self.decoding\n}\n</code></pre></div>\n<p>With the (only) dependency in Cargo.toml:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"9.0.4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"component-model\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Everything else, I do not even get compiling. Helas, given example does not recognize the record.</p>",
        "id": 367847903,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687251019
    },
    {
        "content": "<p>Having said that I wonder if we may talk about different things: <code>wasmtime</code> vs. <code>wit-bindgen</code>? <br>\nWhen implementing the guest/component implementation, I use <code>wit-bindgen = \"0.6.0\"</code> but in order to deal with the component from the Rust host I have a dependency to <code>wasmtime</code> as mentioned above. Is it supposed to be done differently?</p>\n<p><span aria-label=\"face with peeking eye\" class=\"emoji emoji-1fae3\" role=\"img\" title=\"face with peeking eye\">:face_with_peeking_eye:</span> should have posted in channel <strong>wasmtime</strong> then, didn't I?</p>",
        "id": 367849696,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687251394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595146\">Christoph Brewing</span> has marked this topic as resolved.</p>",
        "id": 369703583,
        "sender_full_name": "Notification Bot",
        "timestamp": 1687786231
    }
]