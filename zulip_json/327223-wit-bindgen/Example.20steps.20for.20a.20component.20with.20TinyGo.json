[
    {
        "content": "<p>Hey. Following along the instructions at <a href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-tinygo\">https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-tinygo</a></p>\n<p>I'm not sure how to tinygo build if my-component.go is using package main, because then I can't access the wit-bindgen generated Go types in the package matching the interface name in my wit file. I'm using wit-bindgen to generate in the same directory as my-component.go, even though the example uses a subdirectory called gen. Am I supposed to generate the subpackage and install it in $GOPATH and resolve with a full repository/module url?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-tinygo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ea3b94af8d16079aa0b69d30dae0644345d945db\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366635363166326630636438363738383239616533356461653130643063366534336362383462363763393737313263643665303430653363373964346536642f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-tinygo\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 428438399,
        "sender_full_name": "adam",
        "timestamp": 1711163878
    },
    {
        "content": "<p>Got it working by treating it like a separate Go package. Derp.</p>",
        "id": 428441556,
        "sender_full_name": "adam",
        "timestamp": 1711166576
    },
    {
        "content": "<p>Weâ€™re working on pure Go bindings for TinyGo: <a href=\"https://github.com/ydnar/wasm-tools-go\">https://github.com/ydnar/wasm-tools-go</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/ydnar/wasm-tools-go\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0cbb3e8525726261c2ba1737fcfbe95a36164850\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316662363332376262313233336530306461396434303730313030613563323539613066386231633964626464383561386261383137333639666338626136622f79646e61722f7761736d2d746f6f6c732d676f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/ydnar/wasm-tools-go\" title=\"GitHub - ydnar/wasm-tools-go: WebAssembly + Component Model tools for Go\">GitHub - ydnar/wasm-tools-go: WebAssembly + Component Model tools for Go</a></div><div class=\"message_embed_description\">WebAssembly + Component Model tools for Go. Contribute to ydnar/wasm-tools-go development by creating an account on GitHub.</div></div></div>",
        "id": 429168323,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711266775
    },
    {
        "content": "<p>Currently it can generate Go bindings for imports, but not (yet) exports. It maps WIT types to their equivalent Go types where possible (e.g. enum-&gt;constants, records-&gt;structs, resources-&gt;handle types with methods).</p>",
        "id": 429168669,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711266926
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"639636\">@Randy Reddig</span> , I was trying out this binding generator, and ran into a issue. it is quite possible that it is due to WIP support for exports in wasm-tools-go, in which case I apologize to waste your time in advance:</p>\n<p>foo.wit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">greet</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>from running <code>wasm-tools component wit ./foo-wit -j &gt; wit.json</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"s\">\"name\"</span>: <span class=\"s\">\"foo\"</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"s\">\"types\"</span>: <span class=\"p\">{},</span>\n<span class=\"w\">      </span><span class=\"s\">\"functions\"</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"greet\"</span>: <span class=\"p\">{</span>\n<span class=\"w\">          </span><span class=\"s\">\"name\"</span>: <span class=\"s\">\"greet\"</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"s\">\"kind\"</span>: <span class=\"s\">\"freestanding\"</span><span class=\"p\">,</span>\n<span class=\"w\">          </span><span class=\"s\">\"params\"</span>: <span class=\"p\">[],</span>\n<span class=\"w\">          </span><span class=\"s\">\"results\"</span>: <span class=\"p\">[</span>\n<span class=\"w\">            </span><span class=\"p\">{</span>\n<span class=\"w\">              </span><span class=\"s\">\"type\"</span>: <span class=\"s\">\"string\"</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">          </span><span class=\"p\">]</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">      </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"s\">\"package\"</span>: <span class=\"mi\">7</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Then on trying to build using tinygo (using branch from here: <a href=\"https://github.com/dgryski/tinygo/tree/dgryski/wasi-preview-2\">https://github.com/dgryski/tinygo/tree/dgryski/wasi-preview-2</a>):</p>\n<p><code>tinygo build -target=wasip2 -wit-package ./foo-wit -wit-world foo-namespace:pkg/foo-world -o main.wasm -x -work main.go</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">decode</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">exported</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">foo</span><span class=\"o\">-</span><span class=\"n\">namespace</span>:<span class=\"nc\">pkg</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"o\">@</span><span class=\"mf\">2.0.0</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">greet</span><span class=\"err\">`</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[]</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[</span><span class=\"n\">I32</span><span class=\"p\">]</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">I32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">I32</span><span class=\"p\">]</span><span class=\"w\"> </span>-&gt; <span class=\"p\">[]</span><span class=\"err\">`</span>\n<span class=\"n\">error</span>: <span class=\"nc\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">exit</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>On trying to use <code>wasm-tools</code> to check the intermediary wasm file:</p>\n<p>from running: <code>wasm-tools mutate /var/folders/5r/6y6fr12x1dq6qnt74zn4_1wm0000gn/T/tinygo226195887/main -t | grep -i greet | head -1</code>:</p>\n<p>(Notice the <code>param i32 i32</code>, I was expecting it to be something like <code>(param i32) (result i32)</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$foo</span><span class=\"o\">-</span><span class=\"n\">namespace</span>:<span class=\"nc\">pkg</span><span class=\"o\">/</span><span class=\"n\">foo</span><span class=\"o\">@</span><span class=\"mf\">2.0.0</span>#<span class=\"n\">greet</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">259</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The repo where I was trying this out is here: <a href=\"https://github.com/rajatjindal/foo-wasip2\">https://github.com/rajatjindal/foo-wasip2</a></p>\n<p>is it possibly by any chance to workaround this prob or should I wait for <code>wasm-tools-go</code> to have complete exports support.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dgryski/tinygo/tree/dgryski/wasi-preview-2\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/61cf0681afd9e3e8ccb559564a271685f6bd1115\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653761366537333731353630346438346261343164656435623835666164623165376435363133373138383534336261616466646330393165623034343364312f64677279736b692f74696e79676f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dgryski/tinygo/tree/dgryski/wasi-preview-2\" title=\"GitHub - dgryski/tinygo at dgryski/wasi-preview-2\">GitHub - dgryski/tinygo at dgryski/wasi-preview-2</a></div><div class=\"message_embed_description\">Go compiler for small places. Microcontrollers, WebAssembly, and command-line tools. Based on LLVM. - GitHub - dgryski/tinygo at dgryski/wasi-preview-2</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rajatjindal/foo-wasip2\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5ed104c3cf5d7030254811046b9a79960c94c8a1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633134333062363836323931323464363239636261663462333030383932353839646437376663363036636535323337623730656163613437303563656334622f72616a61746a696e64616c2f666f6f2d776173697032)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rajatjindal/foo-wasip2\" title=\"GitHub - rajatjindal/foo-wasip2\">GitHub - rajatjindal/foo-wasip2</a></div><div class=\"message_embed_description\">Contribute to rajatjindal/foo-wasip2 development by creating an account on GitHub.</div></div></div>",
        "id": 430613061,
        "sender_full_name": "Rajat Jindal",
        "timestamp": 1711985745
    },
    {
        "content": "<p>Exports arenâ€™t working yet</p>",
        "id": 430622180,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711988662
    },
    {
        "content": "<p>You can write them by hand with //export in TinyGo</p>",
        "id": 430622181,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711988662
    },
    {
        "content": "<p>with the fully-qualified namespace:package/interface#function name</p>",
        "id": 430622182,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1711988662
    },
    {
        "content": "<p>thank you for your reply. I did try that, but still got same error (tried with both with <code>init</code> and without it):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Impl</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"p\">{}</span>\n\n<span class=\"c1\">//export foo-namespace:pkg/foo@2.0.0#greet</span>\n<span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Impl</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Greet</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"hello from greet\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Impl</span><span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 430623279,
        "sender_full_name": "Rajat Jindal",
        "timestamp": 1711988975
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"703445\">adam</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Example.20steps.20for.20a.20component.20with.20TinyGo/near/428438399\">said</a>:</p>\n<blockquote>\n<p>Hey. Following along the instructions at <a href=\"https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-tinygo\">https://github.com/bytecodealliance/wit-bindgen?tab=readme-ov-file#guest-tinygo</a></p>\n<p>I'm not sure how to tinygo build if my-component.go is using package main, because then I can't access the wit-bindgen generated Go types in the package matching the interface name in my wit file. I'm using wit-bindgen to generate in the same directory as my-component.go, even though the example uses a subdirectory called gen. Am I supposed to generate the subpackage and install it in $GOPATH and resolve with a full repository/module url?</p>\n</blockquote>\n<p>In the latest release of <code>wit-bindgen-cli</code>, I've included a flag to rename the package name of generated Go code to an user provided one. Hope that helps</p>\n<p>e.g. </p>\n<p><code>wit-bindgen tiny-go wasi-http/wit --world proxy --rename-package=test</code></p>",
        "id": 431184034,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1712181606
    },
    {
        "content": "<p>I made some modification to the README and updated the example code: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/921\">https://github.com/bytecodealliance/wit-bindgen/pull/921</a></p>\n<p>Hopefully it should clarify things a bit :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/921\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3d13899b7e0b6d73b3960ad04cc72cca605a6b85\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363365333937626630353339386566636234386164383438363161653463643862383663656533303638356363666131633131326466393162346561633731312f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f393231)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/921\" title=\"docs: make the Go section of the readme clearer by Mossaka Â· Pull Request #921 Â· bytecodealliance/wit-bindgen\">docs: make the Go section of the readme clearer by Mossaka Â· Pull Request #921 Â· bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">adds a command to initialize the Go directory and repalces Pirnt to HostPrint in the eample code.</div></div></div>",
        "id": 431187682,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1712183110
    },
    {
        "content": "<p>I think in my case I didn't have a valid golang module. Do you know why components compiled with TinyGo are 10-12 times smaller than compiled Rust components? Also, if I compiled a golang function with TinyGo that just adds two numbers, why does it need to have all the WASI imports in the component for a full fledge application?</p>\n<p>A single line fn that just uses s32 and mod operator has all these imports. Filesystem and Stdio seem unnecessary.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">streams</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stdout</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stderr</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">clocks</span><span class=\"o\">/</span><span class=\"n\">wall</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">filesystem</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">filesystem</span><span class=\"o\">/</span><span class=\"n\">preopens</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">odd</span><span class=\"o\">-</span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">even</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">number</span>: <span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 431189516,
        "sender_full_name": "adam",
        "timestamp": 1712183948
    },
    {
        "content": "<p>Youâ€™ve got it partially right. The function signature of the export needs to match whatâ€™s in the WIT.</p>\n<p>Are you using <code>wit-bindgen</code> or <code>wit-bindgen-go</code>?</p>\n<p><span class=\"user-mention silent\" data-user-id=\"646597\">Rajat Jindal</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Example.20steps.20for.20a.20component.20with.20TinyGo/near/430623279\">said</a>:</p>\n<blockquote>\n<p>thank you for your reply. I did try that, but still got same error (tried with both with <code>init</code> and without it):</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>\n\n<span class=\"k\">type</span> <span class=\"nc\">Impl</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"p\">{}</span>\n\n<span class=\"c1\">//export foo-namespace:pkg/foo@2.0.0#greet</span>\n<span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">Impl</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">Greet</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"hello from greet\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">func</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Impl</span><span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 431189794,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1712184070
    },
    {
        "content": "<blockquote>\n<p>Are you using <code>wit-bindgen</code> or <code>wit-bindgen-go</code>?</p>\n</blockquote>\n<p>I am trying out wit-bindgen-go</p>",
        "id": 431239049,
        "sender_full_name": "Rajat Jindal",
        "timestamp": 1712214797
    },
    {
        "content": "<p>thank you for the pointer. i was able to fix that by changing def to:</p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kn\">package</span><span class=\"w\"> </span><span class=\"nx\">foo</span>\n\n<span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">init</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">instance</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nx\">Impl</span><span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">type</span><span class=\"w\"> </span><span class=\"nx\">Impl</span><span class=\"w\"> </span><span class=\"kd\">struct</span><span class=\"p\">{}</span>\n\n<span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"nx\">Impl</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"nx\">Greet</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"hello from greet\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">//export foo-namespace:pkg/foo@2.0.0#greet</span>\n<span class=\"kd\">func</span><span class=\"w\"> </span><span class=\"nx\">GreetExported</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"kt\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"o\">:=</span><span class=\"w\"> </span><span class=\"nx\">instance</span><span class=\"p\">.</span><span class=\"nx\">Greet</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"nx\">x</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>this atleast get post the <code>export error</code> i was getting earlier.</p>",
        "id": 431279734,
        "sender_full_name": "Rajat Jindal",
        "timestamp": 1712226610
    },
    {
        "content": "<p>I tried implementing the export bindings for response-outparam (for inbound-http), but that seemed quite involved. I will try it again over the weekend.</p>",
        "id": 431360124,
        "sender_full_name": "Rajat Jindal",
        "timestamp": 1712249463
    }
]