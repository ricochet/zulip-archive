[
    {
        "content": "<p>So I (finally) got an end to end build working with a c++ guest and a JS host.</p>\n<p>Q1 I am coming from emcc and am used to thinking of my wasm file like a DLL or SO file, should I be using wasi_snapshot_preview1.command.wasm or wasi_snapshot_preview1.reactor.wasm?<br>\nQ2 When building the c++ code, how do I control which wasi features to enable (or disable)?  Initially I want to create a wasm component with no WASI support, to match what I had in my emcc + IDL build (so I can compare the two built wasm files in a browser and NodeJS) at which point I can start introducing some simple WASI support.<br>\nQ3 Has anyone thought about creating a vcpkg triplet for wasi-sdk as an optional replacement for the \"wasm32-emscripten\" triplet?</p>\n<p>(Thx in advance)</p>",
        "id": 347485453,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1680803721
    },
    {
        "content": "<p>as to your first question, commands have stdin, stdout, stderr and a main function while reactors can export any interface, so reactors are most close to SO libs</p>",
        "id": 347487338,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1680804297
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"550770\">Ramon Klass</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/wasi_snapshot_preview1.2Ewasm.20question/near/347487338\">said</a>:</p>\n<blockquote>\n<p>as to your first question, commands have stdin, stdout, stderr and a main function while reactors can export any interface, so reactors are most close to SO libs</p>\n</blockquote>\n<p>Thanks - I switched to use that, added <code>-mexec-model=reactor</code> to my CXX_FLAGS and was able to remove my \"main\" function.<br>\nI should be in a good position to start adding some interfaces to my wit file now...</p>",
        "id": 347490823,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1680805428
    }
]