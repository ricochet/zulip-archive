[
    {
        "content": "<p>Hi,</p>\n<p>I have a question about when a <code>post-return</code> is needed, especially for the case of a struct.</p>\n<p>Suppose I have the following WIT:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>world app {\n  record point {\n    x: u32,\n    y: u32,\n  }\n  export add: func(a: point, b: point) -&gt; point;\n}\n</code></pre></div>\n<p>It seems that since it's returning a struct containing two fields, a return pointer is needed. However, the <code>guest_export_needs_post_return</code> decided that it does not need <code>post-return</code> since neither the field inside the struct needs one. So my question is, who is responsible for freeing this area? Because I didn't see a <code>cabi_realloc</code> call in the transpiled js, either.</p>\n<p>Thanks.</p>",
        "id": 459986994,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1723435136
    },
    {
        "content": "<p>The <code>guest_export_needs_post_return</code> function is mostly a heuristic and it's not required to be used. The post-return feature is always optional. Rust for example allocates this return area in static memory so it doesn't need a dynamic allocation, but other languages can customize as needed.</p>",
        "id": 460094536,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723473085
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Return.20area.20for.20struct/near/460094536\">said</a>:</p>\n<blockquote>\n<p>The <code>guest_export_needs_post_return</code> function is mostly a heuristic and it's not required to be used. The post-return feature is always optional. Rust for example allocates this return area in static memory so it doesn't need a dynamic allocation, but other languages can customize as needed.</p>\n</blockquote>\n<p>I see. But is there a size there will be big enough? For example, if there's a struct containing 100 fields with u64?</p>",
        "id": 462019845,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1723525252
    },
    {
        "content": "<p>Also I tried to add post-return function, and this is what I got with the transpiled JS:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">arg0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">arg1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">v0_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">v0_1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">arg0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">v1_0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">v1_1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">arg1</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">exports0</span><span class=\"p\">.</span><span class=\"nx\">add</span><span class=\"p\">(</span><span class=\"nx\">toUint32</span><span class=\"p\">(</span><span class=\"nx\">v0_0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">toUint32</span><span class=\"p\">(</span><span class=\"nx\">v0_1</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">toUint32</span><span class=\"p\">(</span><span class=\"nx\">v1_0</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"nx\">toUint32</span><span class=\"p\">(</span><span class=\"nx\">v1_1</span><span class=\"p\">));</span>\n<span class=\"w\">  </span><span class=\"nx\">postReturn0</span><span class=\"p\">(</span><span class=\"nx\">ret</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">dataView</span><span class=\"p\">(</span><span class=\"nx\">memory0</span><span class=\"p\">).</span><span class=\"nx\">getInt32</span><span class=\"p\">(</span><span class=\"nx\">ret</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"nx\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">dataView</span><span class=\"p\">(</span><span class=\"nx\">memory0</span><span class=\"p\">).</span><span class=\"nx\">getInt32</span><span class=\"p\">(</span><span class=\"nx\">ret</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">4</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">};</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I wonder who's responsible for freeing the <code>point</code>?</p>\n<p>I mean, if the post return is called before the dataView is accessed?</p>",
        "id": 462022211,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1723526076
    },
    {
        "content": "<p>The return area is allocated per-function IIRC and is appropriately sized to that function. Either that or it's a maximal size for a set of functions, I forget which. Regardless though you would have to make sure it's big enough yeah.</p>",
        "id": 462172097,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723570300
    },
    {
        "content": "<blockquote>\n<p>I mean, if the post return is called before the dataView is accessed?</p>\n</blockquote>\n<p>ah yes postReturn0 would have to be called after the return value is constructed</p>",
        "id": 462172124,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723570312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Return.20area.20for.20struct/near/462172124\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I mean, if the post return is called before the dataView is accessed?</p>\n</blockquote>\n<p>ah yes postReturn0 would have to be called after the return value is constructed</p>\n</blockquote>\n<p>I created an issue about this: <a href=\"https://github.com/bytecodealliance/jco/issues/484\">https://github.com/bytecodealliance/jco/issues/484</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/issues/484\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2ca6983a1936b4e9b60f34f272188f3597c586a1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336534633939373932363532626330313634623961333131346561643938343131373233313333386465396634383762623238333465356363363332376536332f62797465636f6465616c6c69616e63652f6a636f2f6973737565732f343834&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/issues/484\" title=\"transpile calls `postReturn` before retrieving data 路 Issue #484 路 bytecodealliance/jco\">transpile calls `postReturn` before retrieving data 路 Issue #484 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">Observation inside echo.component.js: function run() { const ret = exports0.run(); postReturn0(ret); // &lt;- Here, the post return is called before the data gets constructed return { x: dataView(memo...</div></div></div>",
        "id": 462241659,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1723600312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Return.20area.20for.20struct/near/462172097\">said</a>:</p>\n<blockquote>\n<p>The return area is allocated per-function IIRC and is appropriately sized to that function. Either that or it's a maximal size for a set of functions, I forget which. Regardless though you would have to make sure it's big enough yeah.</p>\n</blockquote>\n<p>I see what you mean. I suppose that's also what teavm-java has done. I'll see what I can do on my side.</p>",
        "id": 462241818,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1723600441
    },
    {
        "content": "<p>I may be wrong, but from what I see, the <code>abi::Generator.post_return</code> doesn't seem to deallocate the pointer of the return area either.</p>\n<p>I think this ought to be pointed out in the documentation that the return area is not expected to be allocated/deallocated dynamically for exportation.</p>",
        "id": 462246089,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1723602443
    },
    {
        "content": "<p>whether or not it's allocated dynamically is up to the guest, the component model doesn't prescribe that it either is or isn't. In Rust at least the area is statically allocated so post-return is cleaning up the return values rather than the area itself. There's no reason it couldn't be dynamically allocated though</p>",
        "id": 462360053,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1723646427
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"678748\">Zihang Ye</span> has marked this topic as resolved.</p>",
        "id": 462450298,
        "sender_full_name": "Notification Bot",
        "timestamp": 1723687250
    }
]