[
    {
        "content": "<p>From <a href=\"https://github.com/WebAssembly/component-model/issues/295\">https://github.com/WebAssembly/component-model/issues/295</a><br>\n_might also be a question for seasoned Rustaceans from cargo-component. im just a beginner._</p>\n<p>If I want to turn this very simple Rust package <a href=\"https://docs.rs/unicode-math-class/latest/unicode_math_class/\">https://docs.rs/unicode-math-class/latest/unicode_math_class/</a> into a WebAssembly component using <a href=\"https://github.com/bytecodealliance/cargo-component\">https://github.com/bytecodealliance/cargo-component</a>, what should I call the package, world, and interface?</p>\n<p>For instance in the example Rust package, there's these levels of hierarchy:</p>\n<ul>\n<li>package: unicode-math-class on <a href=\"http://crates.io\">crates.io</a></li>\n<li>crate: unicode_math_class is the singular lib crate in the package. Rust supports N bin + 1 lib crate per package which maps well-ish to multiple worlds?</li>\n<li>modules: there's no submodules like <code>serde::de</code> so it's just the root module.</li>\n<li>items: the MathClass enum, REVISION constant, and 'class()' function.</li>\n</ul>\n<p>In my brain those map _relatively_ cleanly onto the package/world/interface model like so:</p>\n<ul>\n<li>package: <code>jcbhmr:unicode-math-class</code> from my username + Rust package name. Sorta Docker-like two-part names.</li>\n<li>world: <del><code>unicode_math_class</code></del> from lib crate name -- <code>unicode-math-class</code> due to no underscores</li>\n<li>interface: since I need to put the <code>enum math-class {}</code> inside an interface... but the <code>MathClass</code> is in the root module... What should I do? Is there a naming convention like <code>interface crate { ... }</code>? Or <code>mod</code>, <code>root</code>, <code>module</code>, <code>iface</code>, <code>exports</code>, <code>main</code>, <code>lib</code>, <code>it</code>, <code>default</code>, or something else? Single metacharacters like <code>$</code>,<code>_</code>,<code>-</code> aren't allowed <span aria-label=\"cry\" class=\"emoji emoji-1f622\" role=\"img\" title=\"cry\">:cry:</span>. If it had any sub-modules I guess those would map well to <code>serde::de</code> =&gt; <code>world serde {}; interface de {}</code>.</li>\n</ul>\n<p>&lt;details&gt;&lt;summary&gt;WIT snippet of that&lt;/summary&gt;</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package jcbhmr:unicode-math-class;\n\nworld unicode-math-class {\n  // Can't export enum without a wrapping interface! What do you call the interface tho?\n  export x: interface {\n    enum math-class { ... }\n    // No consts; compromise with getter func.\n    revision: func() -&gt; u8;\n    // No char type; compromise with string.\n    class: func(c: string) -&gt; math-class;\n  }\n}\n</code></pre></div>\n<p>&lt;/details&gt;</p>\n<p>Is there a better way? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<p>I'm looking for the convention. Or just some general \"well here's what I do\" ideas. I'm having decision paralysis and I'd like to get some other opinions besides my own biased one.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/295\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/159caf584e221c0b3fb30140845f5d2271378445\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643934643430653239393731613130346136353364633636636233353931643462343863323466616362336339353762323633313832643339653333353861372f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323935)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/295\" title=\"What's the naming/conceptual convention around WIT packages, worlds, and interfaces? Are there parallels in other languages? 路 Issue #295 路 WebAssembly/component-model\">What's the naming/conceptual convention around WIT packages, worlds, and interfaces? Are there parallels in other languages? 路 Issue #295 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">Here's a concrete example: If I want to turn this very simple Rust package https://docs.rs/unicode-math-class/latest/unicode_math_class/ into a WebAssembly component using https://github.com/byteco...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f0b6efd42780327f6706901ed0264a493acec846\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316131356264323231346236613163333933663662343865356563373864666337656535316636653536333261623164333064666232303933613634343130382f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 416451611,
        "sender_full_name": "Jacob Hummer",
        "timestamp": 1705528379
    }
]