[
    {
        "content": "<p>When designing a WIT based API for a publisher subscriber scheme at AUTOSAR we came across the problem how to model single producer multiple consumer (with zero copy).<br>\nWhile I perfectly understand that full zero copy needs support from the host side, being able to express that the result of a host call has a specific structure (potentially containing lists and strings) but shouldn't be freed by the guest would help a lot. Basically returning a <code>borrow&lt;record-type&gt;</code> would be my preferred solution. <br>\nI can work around this by returning pointers or opaque resources but then I lose the easy language interoperability provided by WIT.</p>",
        "id": 379740418,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690623734
    },
    {
        "content": "<p>I think the closest you will get will be approximating records with resource getters/setters</p>",
        "id": 379828228,
        "sender_full_name": "Lann Martin",
        "timestamp": 1690643810
    },
    {
        "content": "<p>You could potentially roll your own via multi-memories, but as you say that would require some host work and you'd be on your own for safety</p>",
        "id": 379829183,
        "sender_full_name": "Lann Martin",
        "timestamp": 1690644014
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/borrowing.20records.3F.20.28shared.20data.29/near/379828228\">said</a>:</p>\n<blockquote>\n<p>I think the closest you will get will be approximating records with resource getters/setters</p>\n</blockquote>\n<p>But then to avoid creating copies I would need to repeat the procedure for any lists/strings returned from the getter, wouldn't I. <br>\n[I have seen the stringref proposal which seems to solve a similar problem]</p>",
        "id": 379892007,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690665774
    },
    {
        "content": "<p>This is a neat idea, and I talked about it with a few people last fall at CN Wasm Day. I think it would be a useful tool to have (if we could figure out what the resource API for each value type should be) but even if we did decide to do something like this it would be a while before we could get started on it because we only have so many resources working on the Component Model and we need to focus on things like building up resources and finalizing/implementing the structured concurrency model.</p>",
        "id": 380421127,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690822168
    },
    {
        "content": "<p>I originally proposed it with the hope of reducing/avoiding copying the arguments passed to Wasm User-Defined Functions in SQL databases.</p>",
        "id": 380421782,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690822276
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/borrowing.20records.3F.20.28shared.20data.29/near/380421127\">said</a>:</p>\n<blockquote>\n<p>This is a neat idea, and I talked about it with a few people last fall at CN Wasm Day. I think it would be a useful tool to have (if we could figure out what the resource API for each value type should be) but even if we did decide to do something like this it would be a while before we could get started on it because we only have so many resources working on the Component Model and we need to focus on things like building up resources and finalizing/implementing the structured concurrency model.</p>\n</blockquote>\n<p>I can already start supporting it for c++ and Rust if we agree that it is the right direction, I would guess that a read only reference would be the right api and the abi would be identical to the owned case without the transfer of ownership (aka freeing of the list, string, etc after use)</p>",
        "id": 380506086,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690841660
    },
    {
        "content": "<p>And likely just implementing it in the ABI code might already cover some more languages.</p>",
        "id": 380565379,
        "sender_full_name": "Christof Petig",
        "timestamp": 1690869062
    },
    {
        "content": "<p>Borrowed value types would require Component Model and Canonical ABI specification that would need to be discussed and implemented there first.</p>",
        "id": 380745180,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690903666
    },
    {
        "content": "<p>I also only talked about it with a few people, so it's far from having a consensus emerge that its the right way to go.</p>",
        "id": 380745664,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690903723
    }
]