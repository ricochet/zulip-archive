[
    {
        "content": "<p>Any wasm file, whether it's before <code>component embed</code> or after gets an exit code 0 and no output with <code>wasm-tools validate component asdf.wasm --features component-model</code>.</p>\n<p>The same wasm file thrown at <code>wasm-tools component targets asdf.wit asdf.wasm</code> (or asdf.embed.wasm) gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">encoded</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"n\">header</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0xc</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>When I use asdf.component.wasm (after <code>component embed</code> and <code>component new --adapt</code>) then I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code>#<span class=\"w\">  </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">targets</span><span class=\"w\"> </span><span class=\"o\">../</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">asdf</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">asdf</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">validate</span><span class=\"w\"> </span><span class=\"n\">encoded</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">library</span><span class=\"err\">`</span>\n<span class=\"w\">       </span><span class=\"n\">missing</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x1a0cd</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Should <code>validate component</code> fail a validation check before certain wasm-tools steps or will it always be valid component wasm, even without the metadata and embed, if it's compiled against a WIT?</p>",
        "id": 428442264,
        "sender_full_name": "adam",
        "timestamp": 1711167126
    },
    {
        "content": "<p>The WASM component build is working, validate doesn't error or warn, yet I get <code>Invalid input WebAssembly code at offset 4: unknown binary version</code> when running the component from wasmtime-go.</p>\n<p>Anyone have eyes for where I went wrong with my simian kludging together of my first WASM program? I'm happy to contribute to docs and guides in gratitude.</p>\n<p><a href=\"https://github.com/eighty4/learn-wasm-components\">https://github.com/eighty4/learn-wasm-components</a><br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/906\">https://github.com/bytecodealliance/wit-bindgen/issues/906</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/eighty4/learn-wasm-components\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/92cb84cc8e027763c4c02d632873514ff202fc98\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396431656466343130323836626435633361336336346230663834653338326532623330633062633936646537656233663230306534326461326261323633632f656967687479342f6c6561726e2d7761736d2d636f6d706f6e656e7473)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/eighty4/learn-wasm-components\" title=\"GitHub - eighty4/learn-wasm-components\">GitHub - eighty4/learn-wasm-components</a></div><div class=\"message_embed_description\">Contribute to eighty4/learn-wasm-components development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/906\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8eb282e15244a554c0dff52c0e195b28c2b06f04\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343065326135386264373132613035346465643266356238666232386433643635666234366664373666356432616136333234363963306137373661366137612f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f393036)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/906\" title=\"Hosting WASM component error `Invalid input WebAssembly code at offset 4: unknown binary version` 路 Issue #906 路 bytecodealliance/wit-bindgen\">Hosting WASM component error `Invalid input WebAssembly code at offset 4: unknown binary version` 路 Issue #906 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">I followed the creating a component instructions on this project's README.md to the best of my ability. I have this error from wasmtime-go when calling wasmtime.NewModuleFromFile: failed to parse W...</div></div></div>",
        "id": 429108192,
        "sender_full_name": "adam",
        "timestamp": 1711222170
    },
    {
        "content": "<p>Only the Rust API supports components at the moment, as there currently is no C API for the component model for the other languages to bind to</p>",
        "id": 429132820,
        "sender_full_name": "Peter Huene",
        "timestamp": 1711241855
    },
    {
        "content": "<p><code>Module</code> only supports a WebAssembly module, not a component</p>",
        "id": 429132830,
        "sender_full_name": "Peter Huene",
        "timestamp": 1711241870
    },
    {
        "content": "<p>the error message is a horrible one that needs to be fixed</p>",
        "id": 429132834,
        "sender_full_name": "Peter Huene",
        "timestamp": 1711241876
    },
    {
        "content": "<p>fixed in wasm-tools, that is; it knows it's a component</p>",
        "id": 429133007,
        "sender_full_name": "Peter Huene",
        "timestamp": 1711242007
    },
    {
        "content": "<p>Are there commands with wasm-tools where I could inspect a wasm file kinda the way you can dump info about elf headers with a binary?</p>",
        "id": 429232481,
        "sender_full_name": "adam",
        "timestamp": 1711303288
    },
    {
        "content": "<p>I was worried this would be the case because wasmtime-go hasn't been updated in over a year.</p>\n<p>If Rust is the only platform that runs components, does that mean there's no way with another golang runtime to run a function compiled to WASM? A module means it's just a program that can be run and you have to manually map binary data in and out of the function?</p>\n<p>I was waiting for the component model for years so I actually don't know how the OG method works that folks have used for consumer facing products like the Envoy and Istio plugin APIs.</p>",
        "id": 429232603,
        "sender_full_name": "adam",
        "timestamp": 1711303411
    },
    {
        "content": "<p>AFAIK the component model is a cross-language agreement on how to pass data between WASM instances or an instance and the host, so a golang runtime would just have to implement that to run components. It just so happens that the bleeding edge of WASM runtimes is in Rust. The \"OG method\" is to define the data layout yourself. WIT is designed to generate code in the host and client languages to handle that instead of doing it manually.</p>",
        "id": 429238399,
        "sender_full_name": "Tarek Sander",
        "timestamp": 1711307867
    },
    {
        "content": "<p>The component runtimes I know of are Wasmtime (the Rust API), JS (via Node via jco), and Python (via wasmtime-py and bindings like jco). I can confirm that wasmtime-go, while we're still updating it, does not have support for components. Wasmtime's C API does not have support for components yet either.</p>",
        "id": 429430278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711378814
    },
    {
        "content": "<p>I made an assumption that if wasmtime-go was using C bindings, they would be C bindings of the Rust library.</p>",
        "id": 429439655,
        "sender_full_name": "adam",
        "timestamp": 1711380685
    },
    {
        "content": "<p>Yes wasmtime-go is using the C API of Wasmtime, not the Rust API</p>",
        "id": 429441303,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711381009
    }
]