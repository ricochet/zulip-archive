[
    {
        "content": "<p>Hi,</p>\n<p>i'm having difficulty troubleshooting the following case:</p>\n<p>i have a simple WIT definition shared between a basic guest and a basic host.</p>\n<p>WIT:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>default world demo {\n  record polarity-scores {\n    positive: float64,\n    negative: float64,\n    neutral: float64,\n    compound: float64\n  }\n\n  export sentiment: func(input:list&lt;string&gt;) -&gt; list&lt;polarity-scores&gt;\n}\n</code></pre></div>\n<p>the guest code compiles successfully:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span>: <span class=\"s\">\"demo\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"./wit\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">DemoImpl</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Demo</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">DemoImpl</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">sentiment</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Polarityscores</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">lazy_static</span>::<span class=\"n\">lazy_static</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">ANALYZER</span>: <span class=\"nc\">vader_sentiment</span>::<span class=\"n\">SentimentIntensityAnalyzer</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">                </span><span class=\"n\">vader_sentiment</span>::<span class=\"n\">SentimentIntensityAnalyzer</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"n\">input</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">scores</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ANALYZER</span><span class=\"p\">.</span><span class=\"n\">polarity_scores</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">as_str</span><span class=\"p\">());</span>\n<span class=\"w\">                </span><span class=\"n\">Polarityscores</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"n\">positive</span>: <span class=\"nc\">scores</span><span class=\"p\">[</span><span class=\"s\">\"pos\"</span><span class=\"p\">],</span>\n<span class=\"w\">                    </span><span class=\"n\">negative</span>: <span class=\"nc\">scores</span><span class=\"p\">[</span><span class=\"s\">\"neg\"</span><span class=\"p\">],</span>\n<span class=\"w\">                    </span><span class=\"n\">neutral</span>: <span class=\"nc\">scores</span><span class=\"p\">[</span><span class=\"s\">\"neu\"</span><span class=\"p\">],</span>\n<span class=\"w\">                    </span><span class=\"n\">compound</span>: <span class=\"nc\">scores</span><span class=\"p\">[</span><span class=\"s\">\"compound\"</span><span class=\"p\">],</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">})</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">collect</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export_demo</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">DemoImpl</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>and the host code compiles successfully:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">host</span>::<span class=\"p\">{</span><span class=\"n\">add_to_linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">stopwatch</span>::<span class=\"n\">Stopwatch</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi_cap_std_sync</span>::<span class=\"n\">WasiCtxBuilder</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasmBacktraceDetails</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span>: <span class=\"s\">\"demo\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../guest/wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">async</span>: <span class=\"nc\">true</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"cp\">#[tokio::main]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"starting\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"&lt;...&gt;/guest.wasm\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cache_config_load_default</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_backtrace_details</span><span class=\"p\">(</span><span class=\"n\">WasmBacktraceDetails</span>::<span class=\"n\">Enable</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stopwatch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Stopwatch</span>::<span class=\"n\">start_new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"calling Component::from_file()\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"> </span><span class=\"c1\">// &lt;--- this fails :-(</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"completed Component::from_file() in {} millis\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">stopwatch</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">().</span><span class=\"n\">as_millis</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">comments</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"s\">\"I love rust!\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"ham is not a good sandwich\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"do you think we should go to the store today?\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"meetings are the favorite part of my day\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"bob is your uncle\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"I really hate the beach on a rainy day...\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"hello bob! you are looking great today!\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">occurrences</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">with_capacity</span><span class=\"p\">(</span><span class=\"n\">occurrences</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">comments</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">occurrences</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">comment</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">comments</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">iterations</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_i</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"n\">iterations</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stopwatch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Stopwatch</span>::<span class=\"n\">start_new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">inherit_stdin</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">inherit_stdout</span><span class=\"p\">()</span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">_demo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Demo</span>::<span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"nb\">String</span><span class=\"p\">],),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">PolarityScores</span><span class=\"o\">&gt;</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">WasiCtx</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"s\">\"sentiment\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">,)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">as_slice</span><span class=\"p\">(),)).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"sentiment(): processed {} values in {} millis\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">input1</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">stopwatch</span><span class=\"p\">.</span><span class=\"n\">elapsed</span><span class=\"p\">().</span><span class=\"n\">as_millis</span><span class=\"p\">(),</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">enumerate</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"input: '{}', output: '{:?}'\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input1</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">stopwatch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.0.7\"</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1.0.69\"</span>\n<span class=\"n\">tokio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1.25\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"full\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wasmtime\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"component-model\"</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">'release-6.0.0'</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/preview2-prototyping\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wasi-cap-std-sync</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/preview2-prototyping\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>however when running the host it fails to load the component with the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>thread 'main' panicked at 'index out of bounds: the len is 9 but the index is 9', &lt;...&gt;\\.cargo\\git\\checkouts\\wasmtime-41807828cb3a7a7e\\f3dfad2\\crates\\environ\\src\\component\\types.rs:425:9\n</code></pre></div>\n<p>if i change the exported function (including guest implementation) to return a simple type (e.g. <code>float64</code> instead of the record <code>polarity-scores</code>) everything works as expected.</p>\n<p>any ideas why my record definition is causing issues?</p>",
        "id": 329318880,
        "sender_full_name": "yonil",
        "timestamp": 1677025324
    },
    {
        "content": "<p><a href=\"#narrow/stream/206238-general/topic/Guest.20missing.20imports/near/329245992\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Guest.20missing.20imports/near/329245992</a></p>\n<p>I think this is a case of incomplete and buggy, the prototyping repo is really only intended for people who want to dig in the code and implement all the missing parts, it's not ready for end use</p>",
        "id": 329319963,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1677025893
    },
    {
        "content": "<p>I think you're running into a bug fixed in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5777\">https://github.com/bytecodealliance/wasmtime/pull/5777</a>, can you try the <code>main</code> branch of Wasmtime?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5777\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/67dc7251e1e35ab624bbacc688f79979b84ef1bb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366632383435303939613731366232313230306236393438353430393862663536646132626565333130333431363161306663333833653334323639306539662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35373737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5777\" title=\"Improve type imports into components by alexcrichton · Pull Request #5777 · bytecodealliance/wasmtime\">Improve type imports into components by alexcrichton · Pull Request #5777 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit fixes a panic related to type imports where an import of a type didn't correctly declare the new type index on the Wasmtime side of things. Additionally this plumbs more support through...</div></div></div>",
        "id": 329322332,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677027198
    },
    {
        "content": "<p>This is actually not possible to get wasmtime from main, and pulling host on the prototype :(</p>",
        "id": 329322708,
        "sender_full_name": "bachrc",
        "timestamp": 1677027396
    },
    {
        "content": "<p>yep, it'll require editing code as opposed to using everything as-is</p>",
        "id": 329322783,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677027440
    },
    {
        "content": "<p>for my current needs, i can workaround this by using basic types instead of a <code>record</code>.<br>\nlooking forward to leveraging the fix you mentioned in the future </p>\n<p>(BTW - is there any estimated timeline or plan you can link to, for getting the officially released <code>wit-bindgen</code>&amp; <code>wasmtime</code> crates in <a href=\"http://crates.io\">crates.io</a>, with this scenario being functional?)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 329329378,
        "sender_full_name": "yonil",
        "timestamp": 1677032195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/.5Brust.5D.20wasmtime.20.26.20custom.20wit.20type.20.28record.29/near/329322783\">said</a>:</p>\n<blockquote>\n<p>yep, it'll require editing code as opposed to using everything as-is</p>\n</blockquote>\n<p>Are you talking about forking yhe repo? Because for now, to make a WASI Component work, there is no other way than to import the host from preview prototyping?</p>",
        "id": 329491998,
        "sender_full_name": "bachrc",
        "timestamp": 1677088036
    },
    {
        "content": "<p>you can depend on a local checkout and edit around in there, you only need a fork at the point where you might want to make a PR with your changes</p>",
        "id": 329496992,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1677089439
    }
]