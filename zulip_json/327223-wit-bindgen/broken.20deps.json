[
    {
        "content": "<p>If there are any wit-bindgen repo maintainers around, <code>main</code> is currently broken due to incompatible deps: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/698\">https://github.com/bytecodealliance/wit-bindgen/pull/698</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/698\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c6e7fc51e877c6f20ee29560933b2747a1c13aa5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383765616266343532346635633339343934376139346538626163636631663535346465643866306264643338633130636465636235376330643437316638302f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363938)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/698\" title=\"chore: bump workspace dependencies to make wit-bindgen compile by morenol · Pull Request #698 · bytecodealliance/wit-bindgen\">chore: bump workspace dependencies to make wit-bindgen compile by morenol · Pull Request #698 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Fixes #697</div></div></div>",
        "id": 396351967,
        "sender_full_name": "Lann Martin",
        "timestamp": 1697139055
    },
    {
        "content": "<p>merged</p>",
        "id": 396354412,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697140104
    },
    {
        "content": "<p>One more tweak needed, apparently: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/700\">https://github.com/bytecodealliance/wit-bindgen/pull/700</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/700\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0e160a02515f38b4d9a31d2c8522155b79d4e8df\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343132323135393932633065623135626461396433303033306561643532376565653462313364353866393466343537646338333039623864306533633634312f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f373030)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/700\" title=\"chore: update `wasm-metadata` dep by dicej · Pull Request #700 · bytecodealliance/wit-bindgen\">chore: update `wasm-metadata` dep by dicej · Pull Request #700 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This is a follow-up to #698 to make all the versions line up, given that wit-component 0.14.6 depends on wasm-metadata 0.10.8.</div></div></div>",
        "id": 396358506,
        "sender_full_name": "Joel Dice",
        "timestamp": 1697141982
    },
    {
        "content": "<p>Merged</p>",
        "id": 396380750,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697152932
    },
    {
        "content": "<p>Should it be surprising to us that these incompatible versions made it through CI?</p>",
        "id": 396894468,
        "sender_full_name": "Lann Martin",
        "timestamp": 1697460185
    },
    {
        "content": "<p>Unfortunately no it's not surprising because the wasm-tools repo itself was always \"self consistent\" since everything is tested against itself. The problem is that the wit-component released bumped its dependency on wit-parser from 0.11 to 0.12, and so downstream applications that used wit-component 0.14 and wit-parser 0.11, the prior latest, all of a sudden would no longer compile due to the version mismatch in wit-parser. Effectively downstream applications had no way of depending on the latest correctly.</p>\n<p>One possible way to catch this on CI would be to have automatic validation that a minor version bump is indeed a minor bump, but I'm not sure if such tooling in Rust has progressed to that point.</p>",
        "id": 396905815,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697463687
    },
    {
        "content": "<p>Right, but I'm thinking about <code>wit-bindgen</code>'s CI. Based on <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/697\">https://github.com/bytecodealliance/wit-bindgen/issues/697</a> it appears that <code>wit-bindgen-rust</code> became unbuildable when the wit-component dep was bumped.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/697\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8840b17a04be0e54a76097affca36a1023f1c1e5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303735383461323862393435396632323165303133313664333766363934316165343730396538653834663830333466663565306234386531623336373839642f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f363937)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/697\" title=\"`wit-bindgen-rust` failing to compile · Issue #697 · bytecodealliance/wit-bindgen\">`wit-bindgen-rust` failing to compile · Issue #697 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">Beginning this morning wit-bindgen-rust is failing to compile for me. This happens when my only dependency is wit-bindgen and it happens with both version 0.11.0 and 0.12.0 of that crate. Seems lik...</div></div></div>",
        "id": 396913347,
        "sender_full_name": "Lann Martin",
        "timestamp": 1697465852
    },
    {
        "content": "<p>oh <code>wit-bindgen</code> would have caught it I think if there were a PR or something, but this is a publication of <code>wit-component</code> that broke preexisting <code>wit-bindgen</code> so I'm not sure there's much that could be done about that</p>",
        "id": 396916732,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697466764
    },
    {
        "content": "<p>ah thanks; I had been under the vague impression that the breakage was caused by a dep change in wit-bindgen, but that makes sense</p>",
        "id": 396917516,
        "sender_full_name": "Lann Martin",
        "timestamp": 1697466996
    },
    {
        "content": "<p>Would it be worth it to write some E2E tests that run from places like <code>wit-component</code> -- I'd love to take this on if so.</p>\n<p>The simplest version, adding tests to <code>wit-component</code> (since that's where things actually broke) that build it locally and use it in concert with downstream stuff. We could limit these tests to release PRs only (or even PRs with semver minor changes).</p>\n<p>A slightly more complex version of this would be creating an <code>e2e-tests</code>/<code>ecosystem-tests</code>/<code>ecosystem-stability</code> repo that is triggerable from other actions -- some upstream dep can provide a version/git SHA/etc and be compiled in/used from a supported use case/build process.</p>\n<p>I personally like the second approach (I could also create it without much upstreaming initially until the prototype is ready/complete), because I think it would be a good place to point people for examples and a (possibly generated!) support matrix.</p>",
        "id": 397197981,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1697586676
    },
    {
        "content": "<p>I believe <span class=\"user-mention\" data-user-id=\"477605\">@Kyle Brown</span> has been working on some sort of similar test suite.</p>",
        "id": 397304279,
        "sender_full_name": "Lann Martin",
        "timestamp": 1697632953
    },
    {
        "content": "<p>I think it'd be reasonable to have such tests, yeah, but I'm not sure how they would be integrated in to the release process for wasm-tools</p>",
        "id": 397328453,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697640036
    },
    {
        "content": "<p>I've done some design and prototyping for a Guest Language test suite but haven't had time to work on it lately. The design document can be found here: <a href=\"https://hackmd.io/qeVkBYYWQ1C1uiKYk-HzZw\">https://hackmd.io/qeVkBYYWQ1C1uiKYk-HzZw</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/qeVkBYYWQ1C1uiKYk-HzZw\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/qeVkBYYWQ1C1uiKYk-HzZw\" title=\"Guest Language Test Suite - HackMD\">Guest Language Test Suite - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 397360298,
        "sender_full_name": "Robin Brown",
        "timestamp": 1697651647
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"477605\">@Kyle Brown</span>! Taking a look at what you have, I think it's <em>slightly</em> different from what I want to build -- I want tests that are guest language independent -- basically testing the <em>tooling</em> that is being produced. It's less of a conformance suite (forgive me if I misread your intent there!) and more of a have-a-machine-make-sure-everything-works repo, along with a place we can point new people for setups that work (ex. <em>exactly</em> which adapter version, with exactly which release of <code>wasmtime</code>, etc.)</p>\n<p>Likely these tests will have a very large matrix, so we can know which combinations of versions of which tooling work together, essentially. </p>\n<p>The way I'm envisioning it is that it's a repo with as much up-to-date information as possible on what works together, possibly automatically updated, <em>and</em> other repos could <a href=\"https://docs.github.com/en/actions/using-workflows/triggering-a-workflow\">trigger workflows on it</a> to test downstream usability.</p>\n<p>Alternativley, the primary output of the crate might even be a Github Action, that's callable from other projects -- but the basic point is to start from near nothing (as a downstream user with) and use the tooling in the ecosystem at various versions.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://docs.github.com/en/actions/using-workflows/triggering-a-workflow\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9584cd39a683b9a4afc1c82dcfd92b6f7dc45189\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f6f70656e5f67726170682f6769746875622d6c6f676f2e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://docs.github.com/en/actions/using-workflows/triggering-a-workflow\" title=\"Triggering a workflow - GitHub Docs\">Triggering a workflow - GitHub Docs</a></div><div class=\"message_embed_description\">How to automatically trigger GitHub Actions workflows</div></div></div>",
        "id": 397457921,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1697704844
    },
    {
        "content": "<p>It's probably easier to show rather than tell, so I'll try to put something together and show that</p>",
        "id": 397458400,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1697705014
    },
    {
        "content": "<p>ah yeah if you've got a proof-of-concept that'd be great to look at!</p>",
        "id": 397531531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697729855
    }
]