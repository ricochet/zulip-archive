[
    {
        "content": "<p>Hello, are there any up-to-date tutorials on how to use wit-bindgen with Rust? If I understand correctly, wit-bindgen itself is \"outdated\" in favor of the component model, and the component model is using the .wit format for protocol definition.</p>\n<p>I want to make a plugin in Rust, and then load and execute it also in Rust using Wasmtime. I tried <a href=\"https://blog.mediosz.club/2022/11/17/how-to-use-wit-bindgen/\">this tutorial</a> (see <a href=\"https://github.com/kajacx/wasm-playground/tree/version-1-does-not-match-3\">repo here</a>) but loading the module as a component gives this error:</p>\n<p>Error: decoding custom section component-type:testwasi</p>\n<p>Caused by:<br>\n    component-type version 1 does not match supported version 3</p>\n<p>The tutorial is using a file called \"wasi_snapshot_preview1.wasm\" to convert from a wit-bindgen wasm module to a component module, so I am assuming I need \"wasi_snapshot_preview3.wasm\" instead, but I have no idea where to find it.</p>\n<p>Thanks for any help.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kajacx/wasm-playground/tree/version-1-does-not-match-3\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b4537c76ff72a9a422892ba16537c87a11a28fe3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353735333536656563356263346461623263373336633165636533353633373436393863646231613937353133393430343338646632353131363165376364632f6b616a6163782f7761736d2d706c617967726f756e64)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kajacx/wasm-playground/tree/version-1-does-not-match-3\" title=\"GitHub - kajacx/wasm-playground at version-1-does-not-match-3\">GitHub - kajacx/wasm-playground at version-1-does-not-match-3</a></div><div class=\"message_embed_description\">Various projects related to WASM, each in it's own branch, so that I don't have 50 repositories. - GitHub - kajacx/wasm-playground at version-1-does-not-match-3</div></div></div>",
        "id": 370104152,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687879016
    },
    {
        "content": "<p>wit-bindgen isn't necessarily \"outdated\" because it's still in use. What is happening is that it's being used inside of other tools instead of being used directly more these days. For example, if you want to build a Rust component, you can use <code>cargo-component</code> to get a better component authoring experience in Rust. When you're trying to use components from a language like Rust, you'll probably want to use the <code>wasmtime-component-macro</code>crate which is very nice if a bit under-documented at the moment.</p>",
        "id": 370108057,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687879647
    },
    {
        "content": "<p>I've recently updated my template compiler project to the latest release and the tests include a couple minimal use cases of the component macro as a reference point: <a href=\"https://github.com/Kylebrown9/template-compiler/blob/main/tests/website.rs\">https://github.com/Kylebrown9/template-compiler/blob/main/tests/website.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Kylebrown9/template-compiler/blob/main/tests/website.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/aef9139b1296024948ca696c63bc01f3be887dd5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653166633763613164303266616561346236336435333036326466626132643763396632396234353432633237626436633264626135316339626662666634612f4b796c6562726f776e392f74656d706c6174652d636f6d70696c6572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Kylebrown9/template-compiler/blob/main/tests/website.rs\" title=\"template-compiler/tests/website.rs at main · Kylebrown9/template-compiler\">template-compiler/tests/website.rs at main · Kylebrown9/template-compiler</a></div><div class=\"message_embed_description\">Contribute to Kylebrown9/template-compiler development by creating an account on GitHub.</div></div></div>",
        "id": 370108811,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687879755
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Make.20and.20run.20a.20wit-bindgen.20component.20in.20Rust/near/370108811\">said</a>:</p>\n<blockquote>\n<p>I've recently updated my template compiler project to the latest release and the tests include a couple minimal use cases of the component macro as a reference point: <a href=\"https://github.com/Kylebrown9/template-compiler/blob/main/tests/website.rs\">https://github.com/Kylebrown9/template-compiler/blob/main/tests/website.rs</a></p>\n</blockquote>\n<p>Thanks, it's always good to see a minimal, but full (including all dependencies) working example, but I don't think your template compiler is what I am looking for.</p>\n<p>I want to have a protocol defined in a .wit file (or any other file, if need be), and implement that protocol in a Rust plugin, and then call that implementation from a Rust runtime.</p>\n<p>The <a href=\"https://github.com/bytecodealliance/cargo-component\">Cargo component</a> command still seems to be using the \"preview1\" version of the coversion from WASM module to WASM component, so I don't think that would help me.</p>\n<p>I guess I can try <a href=\"https://lib.rs/crates/wasmtime-component-macro\">https://lib.rs/crates/wasmtime-component-macro</a> and see if it generates a host that requires the \"preview1\" version, or I can try <a href=\"https://crates.io/crates/wasmtime-wit-bindgen\">https://crates.io/crates/wasmtime-wit-bindgen</a> to see if it will work without using the component model, which would honestly be better for me.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/62ddb2ebd8694a5fdbd268c6f0a6c0977891908e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386666663639363139653234306531643735393366313137363435316461303463386664353033343031323637333864653266323634633535653334643636662f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 370132248,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687883798
    },
    {
        "content": "<p>I wasn't suggesting you use the template compiler, just that the test I wrote for its output shows how to get and use bindings for a component in wasmtime.</p>",
        "id": 370134945,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687884263
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Make.20and.20run.20a.20wit-bindgen.20component.20in.20Rust/near/370134945\">said</a>:</p>\n<blockquote>\n<p>I wasn't suggesting you use the template compiler, just that the test I wrote for its output shows how to get and use bindings for a component in wasmtime.</p>\n</blockquote>\n<p>In your test you call \"config.wasm_component_model(true);\" - but when I look in the C API for 10.0.1 that method doesn't exist (and I am not even sure where it comes from) - is that a bug or is there a repo for the C-API that needs to be updated?</p>",
        "id": 370140750,
        "sender_full_name": "Gordon Smith",
        "timestamp": 1687885326
    },
    {
        "content": "<p>The function comes from here: <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_component_model\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.wasm_component_model</a><br>\nI can't speak to how it works in the C API, I haven't tested it.</p>",
        "id": 370142339,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687885626
    },
    {
        "content": "<p>Per <a href=\"#narrow/stream/327223-wit-bindgen/topic/understanding.20status.20of.20resources/near/369729391\">https://bytecodealliance.zulipchat.com/#narrow/stream/327223-wit-bindgen/topic/understanding.20status.20of.20resources/near/369729391</a>, component support has not yet been added to the Wasmtime C API.</p>",
        "id": 370143561,
        "sender_full_name": "Joel Dice",
        "timestamp": 1687885858
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Make.20and.20run.20a.20wit-bindgen.20component.20in.20Rust/near/370132248\">said</a>:</p>\n<blockquote>\n<p>I want to have a protocol defined in a .wit file (or any other file, if need be), and implement that protocol in a Rust plugin, and then call that implementation from a Rust runtime.</p>\n</blockquote>\n<p>Perhaps <a href=\"https://github.com/cpetig/component-model-demo\">https://github.com/cpetig/component-model-demo</a> fits that description.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/component-model-demo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/911a472f5784b6dbdb3ed9c6b17565f6f4cc8bfc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643830646663643765666530613262303534336235353930373032663163656339363065623631653338366663626437643662353933336431353433316162632f6370657469672f636f6d706f6e656e742d6d6f64656c2d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/component-model-demo\" title=\"GitHub - cpetig/component-model-demo: This repository demonstrate how to use component model with wasmtime.\">GitHub - cpetig/component-model-demo: This repository demonstrate how to use component model with wasmtime.</a></div><div class=\"message_embed_description\">This repository demonstrate how to use component model with wasmtime. - GitHub - cpetig/component-model-demo: This repository demonstrate how to use component model with wasmtime.</div></div></div>",
        "id": 370147559,
        "sender_full_name": "Christof Petig",
        "timestamp": 1687886665
    },
    {
        "content": "<p>I just updated this example to work with this week's wasmtime version</p>",
        "id": 370151008,
        "sender_full_name": "Christof Petig",
        "timestamp": 1687887328
    },
    {
        "content": "<p>I'm not sure what exactly Cargo component isn't doing that you need, but if it has a problem you should file an issue and someone can take a look at it. The goal is for users not to need to write their own logic using <code>ComponentEncoder</code> to make a component.</p>",
        "id": 370152423,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687887602
    },
    {
        "content": "<p>Thanks everyone, I will have a look at it tomorrow.</p>",
        "id": 370172604,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687891811
    },
    {
        "content": "<p>Hopefully, I do no hijack this post but let me try to resume this from my point of view:<br>\nUntil recently, after having compiled for <code>wasm32-unknown-unknown</code> when doing</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>./app.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>component.wasm<span class=\"w\"> </span>--adapt<span class=\"w\"> </span>./wasi_snapshot_preview1.reactor.wasm\n</code></pre></div>\n<p>I got a new component. After having updated to <code>wit-bindgen = \"0.7.0\"</code>, however, I get a </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"w\"> </span>component-type<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"w\"> </span>does<span class=\"w\"> </span>not<span class=\"w\"> </span>match<span class=\"w\"> </span>supported<span class=\"w\"> </span>version<span class=\"w\"> </span><span class=\"m\">2</span>\n</code></pre></div>\n<p>My assumption is that I have to use a different/updated adapter now. Is that assumption correct? If yes, what is the current adapter to use?</p>",
        "id": 370315559,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687938813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590366\">Christof Petig</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Make.20and.20run.20a.20wit-bindgen.20component.20in.20Rust/near/370147559\">said</a>:</p>\n<blockquote>\n<p>Perhaps <a href=\"https://github.com/cpetig/component-model-demo\">https://github.com/cpetig/component-model-demo</a> fits that description.</p>\n</blockquote>\n<p>Yes, that works. After I removed the \"wasi_snapshot_preview1.wasm\" adapter, it works using the wasm32-unknown-unknown target. Thanks.</p>",
        "id": 370384538,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687950723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Make.20and.20run.20a.20wit-bindgen.20component.20in.20Rust/near/370134945\">said</a>:</p>\n<blockquote>\n<p>I wasn't suggesting you use the template compiler, just that the test I wrote for its output shows how to get and use bindings for a component in wasmtime.</p>\n</blockquote>\n<p>Hello, I took a look at your tests, it seems you are loading the component with a custom <a href=\"https://github.com/Kylebrown9/template-compiler/blob/main/src/gen/component.rs#L14\">gen_component</a> function that looks very scary.</p>\n<p>Thankfully, I don't have to do that, both options described in the newer <a href=\"https://github.com/cpetig/component-model-demo/tree/main\">component model demo repo</a> work fine. But thanks for the effort.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Kylebrown9/template-compiler/blob/main/src/gen/component.rs#L14\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8d9c423154aa14adb3c2ef4d2e465c6cc45ab4f1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323835623736386561616536383133343832386164626138316239313031363363376433656266636530343265373236373130353263666264376563653832382f4b796c6562726f776e392f74656d706c6174652d636f6d70696c6572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Kylebrown9/template-compiler/blob/main/src/gen/component.rs#L14\" title=\"template-compiler/src/gen/component.rs at main · Kylebrown9/template-compiler\">template-compiler/src/gen/component.rs at main · Kylebrown9/template-compiler</a></div><div class=\"message_embed_description\">Contribute to Kylebrown9/template-compiler development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/component-model-demo/tree/main\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/911a472f5784b6dbdb3ed9c6b17565f6f4cc8bfc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643830646663643765666530613262303534336235353930373032663163656339363065623631653338366663626437643662353933336431353433316162632f6370657469672f636f6d706f6e656e742d6d6f64656c2d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/component-model-demo/tree/main\" title=\"GitHub - cpetig/component-model-demo: This repository demonstrate how to use component model with wasmtime.\">GitHub - cpetig/component-model-demo: This repository demonstrate how to use component model with wasmtime.</a></div><div class=\"message_embed_description\">This repository demonstrate how to use component model with wasmtime. - GitHub - cpetig/component-model-demo: This repository demonstrate how to use component model with wasmtime.</div></div></div>",
        "id": 370386545,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687951098
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Make.20and.20run.20a.20wit-bindgen.20component.20in.20Rust/near/370152423\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what exactly Cargo component isn't doing that you need, but if it has a problem you should file an issue and someone can take a look at it. The goal is for users not to need to write their own logic using <code>ComponentEncoder</code> to make a component.</p>\n</blockquote>\n<p>I do not know how to install or use cargo component. Using the install script from <a href=\"https://github.com/bytecodealliance/cargo-component\">this website</a> gives as error: Could not find <code>protoc</code> installation and this build crate cannot proceed without this knowledge.</p>\n<p>\"wasm-tools component\" works fine, so I don't need to suffer through making cagro component work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/62ddb2ebd8694a5fdbd268c6f0a6c0977891908e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386666663639363139653234306531643735393366313137363435316461303463386664353033343031323637333864653266323634633535653334643636662f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 370434831,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687959688
    },
    {
        "content": "<p>Feel free to ignore that example, but the <code>gen_component</code> is just where I make my component binary. If you already have a component binary and are trying to just use it in Wasmtime then it's the lines after that matter.</p>",
        "id": 370448015,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687961862
    },
    {
        "content": "<p><code>protoc</code>, the protobuf compiler is an installation dependency as stated in the <a href=\"https://github.com/bytecodealliance/cargo-component#requirements\">requirements</a>. If you install it, that error should go away.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component#requirements\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/62ddb2ebd8694a5fdbd268c6f0a6c0977891908e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386666663639363139653234306531643735393366313137363435316461303463386664353033343031323637333864653266323634633535653334643636662f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component#requirements\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 370448273,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687961899
    },
    {
        "content": "<p>We're also looking into ways to not depend on users installing<code>protoc</code> which look promising.</p>",
        "id": 370481022,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687967084
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal</span> has marked this topic as resolved.</p>",
        "id": 371394868,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688199266
    }
]