[
    {
        "content": "<p>I had a running real-world application based on Rust/WASM. Let's call it a <strong>decoder</strong>. Before I fell into the black (summer) hole, everything was fine, compiling, executing ... </p>\n<p>I was working on <code>wasmtime = { version = \"10\", features = [\"component-model\"] }</code> and <code>wit-bindgen = \"0.9\"</code>. </p>\n<p>Now, after an upgrade to <code>wasmtime = { version = \"13\", features = [\"component-model\"] }</code> and <code>wit-bindgen = \"0.12\"</code> I get compilation errors. My <strong>world.wit</strong> looks like </p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package decoder:api\n\ninterface decode {\n  [..]\n}\n\nworld decoder {\n  export decode\n}\n</code></pre></div>\n<p>I try to <code>use</code> it like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">exports</span>::<span class=\"n\">decoder</span>::<span class=\"n\">api</span>::<span class=\"n\">decode</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"c1\">// [..]</span>\n<span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"s\">\"wit/world.wit\"</span><span class=\"p\">);</span>\n<span class=\"c1\">// [..]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Decoder</span><span class=\"p\">;</span>\n<span class=\"n\">export_decoder</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Decoder</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>The errors are </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>no<span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span><span class=\"w\"> </span>map<span class=\"w\"> </span>provided<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>configuration<span class=\"w\"> </span>but<span class=\"w\"> </span>key<span class=\"w\"> </span>is<span class=\"w\"> </span>required<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"sb\">`</span>decoder:api/decode<span class=\"sb\">`</span>\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/lib.rs:25:1\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">25</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>wit_bindgen::generate!<span class=\"o\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"s2\">\"wit/world.wit\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\"> </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span>this<span class=\"w\"> </span>error<span class=\"w\"> </span>originates<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>macro<span class=\"w\"> </span><span class=\"sb\">`</span>wit_bindgen::generate<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">in</span><span class=\"w\"> </span>Nightly<span class=\"w\"> </span>builds,<span class=\"w\"> </span>run<span class=\"w\"> </span>with<span class=\"w\"> </span>-Z<span class=\"w\"> </span>macro-backtrace<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>more<span class=\"w\"> </span>info<span class=\"o\">)</span>\n\nerror<span class=\"o\">[</span>E0433<span class=\"o\">]</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve:<span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>crate<span class=\"w\"> </span>root\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/lib.rs:23:12\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">23</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>use<span class=\"w\"> </span>crate::exports::decoder::api::decode::<span class=\"o\">{</span>DecodeReturn,<span class=\"w\"> </span>SignalHandle<span class=\"o\">}</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">            </span>^^^^^^^<span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>crate<span class=\"w\"> </span>root\n\nerror:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>find<span class=\"w\"> </span>macro<span class=\"w\"> </span><span class=\"sb\">`</span>export_decoder<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/lib.rs:47:1\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">47</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>export_decoder!<span class=\"o\">(</span>Decoder<span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\"> </span>^^^^^^^^^^^^^^\n\nerror<span class=\"o\">[</span>E0433<span class=\"o\">]</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve:<span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>crate<span class=\"w\"> </span>root\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>src/lib.rs:59:13\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">59</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>impl<span class=\"w\"> </span>crate::exports::decoder::api::decode::Decode<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>Decoder<span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">             </span>^^^^^^^<span class=\"w\"> </span>could<span class=\"w\"> </span>not<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"sb\">`</span>exports<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>crate<span class=\"w\"> </span>root\n</code></pre></div>\n<p>I guess, it does not take much to get it compiling again. However, I do not understand what to change. <br>\nAlso, in order to avoid this kind of question in the future, is there any place I can have a look in the docs?</p>\n<p>Thanks a lot for any hint!</p>",
        "id": 394829809,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1696422584
    },
    {
        "content": "<p>The syntax for <code>generate!</code> has changed in the meantime. It looks like the errors you're seeing are from a Rust guest compiled to WebAssembly, so I'd recommending looking at the <a href=\"https://component-model.bytecodealliance.org/language-support/rust.html\">documentation for Rust support</a> for more guidance</p>",
        "id": 394853223,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696429650
    },
    {
        "content": "<p>So I tried the first two examples after having installed <strong>cargo component</strong>:</p>\n<ol>\n<li><a href=\"https://component-model.bytecodealliance.org/language-support/rust.html#building-a-component-with-cargo-component\">Building a Component with cargo component</a></li>\n<li><a href=\"https://component-model.bytecodealliance.org/language-support/rust.html#exporting-an-interface-with-cargo-component\">Exporting an interface with cargo component</a></li>\n</ol>\n<p>The first compiles as described. The second one is more relevant for me since me too, I try to export an interface. However, it yields the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>cargo<span class=\"w\"> </span>component<span class=\"w\"> </span>build<span class=\"w\"> </span>--release\n<span class=\"w\">    </span>Encoding<span class=\"w\"> </span>target<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>add<span class=\"w\"> </span><span class=\"o\">(</span>add/target/bindings/add/target.wasm<span class=\"o\">)</span>\n<span class=\"w\">   </span>Compiling<span class=\"w\"> </span>add<span class=\"w\"> </span>v0.1.0<span class=\"w\"> </span>add<span class=\"o\">)</span>\nerror<span class=\"o\">[</span>E0432<span class=\"o\">]</span>:<span class=\"w\"> </span>unresolved<span class=\"w\"> </span>import<span class=\"w\"> </span><span class=\"sb\">`</span>super<span class=\"sb\">`</span>\n<span class=\"w\"> </span>--&gt;<span class=\"w\"> </span>src/lib.rs:3:1\n<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>cargo_component_bindings::generate!<span class=\"o\">()</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<span class=\"w\"> </span>no<span class=\"w\"> </span><span class=\"sb\">`</span>Component<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>root\n<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span>this<span class=\"w\"> </span>error<span class=\"w\"> </span>originates<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>macro<span class=\"w\"> </span><span class=\"sb\">`</span>cargo_component_bindings::generate<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"k\">in</span><span class=\"w\"> </span>Nightly<span class=\"w\"> </span>builds,<span class=\"w\"> </span>run<span class=\"w\"> </span>with<span class=\"w\"> </span>-Z<span class=\"w\"> </span>macro-backtrace<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>more<span class=\"w\"> </span>info<span class=\"o\">)</span>\nhelp:<span class=\"w\"> </span>consider<span class=\"w\"> </span>importing<span class=\"w\"> </span>this<span class=\"w\"> </span>enum<span class=\"w\"> </span>instead\n<span class=\"w\">  </span><span class=\"p\">|</span>\n<span class=\"m\">3</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\"> </span>std::path::Component<span class=\"w\"> </span>as<span class=\"w\"> </span>_GuestImpl<span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\"> </span>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n</code></pre></div>\n<p>For the second example I have reused the project from the first example, just replaced <strong>world.wit</strong> and <strong>lib.rs</strong>. <br>\nIs it meant to work this way?</p>",
        "id": 394905282,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1696448250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"595146\">@Christoph Brewing</span> <code>cargo_component_bindings::generate!</code> assumes the implementation to be at <code>super::Component</code> (relative to bindings module generated by the macro).  However, you can override it using the <code>implementor</code> argument to the macro; see <a href=\"https://github.com/bytecodealliance/cargo-component/issues/149\">https://github.com/bytecodealliance/cargo-component/issues/149</a> for an example!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/issues/149\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bfe3eb5c22e257ff2572106cf01c68f82fd62271\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623231623861306261376234383363303837656363323564636132653534643163383739303662353463313236613737313038366131623732343937323337312f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f6973737565732f313439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/issues/149\" title=\"`cargo_component_bindings::generate!()` requires component implementation in the same mod · Issue #149 · bytecodealliance/cargo-component\">`cargo_component_bindings::generate!()` requires component implementation in the same mod · Issue #149 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">Everything works as long as interface implementation and component implementation are in the same mod cargo_component_bindings::generate!(); use bindings::exports::my_world::run; struct Component{}...</div></div></div>",
        "id": 394906114,
        "sender_full_name": "Brian",
        "timestamp": 1696448620
    },
    {
        "content": "<p>Thanks! The combination of hints made it work for me.</p>",
        "id": 394988067,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1696493951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595146\">Christoph Brewing</span> has marked this topic as resolved.</p>",
        "id": 394988086,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696493958
    }
]