[
    {
        "content": "<p>I'm trying to pass a Rust struct (exported) to a javascript class (imported) but I'm running into the message: \"interface transitively depends on an interface in incompatible ways\".  Is it possible to do this?</p>",
        "id": 425000838,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709696965
    },
    {
        "content": "<p>You're hitting <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/a178c9bea591bbcd7608cf0de6f9662eb50f4e40/crates/wit-parser/src/resolve.rs#L1754-L1774\">this error</a> which more-or-less means that the imports/exports into the world aren't resolvable, and you probably need to export more things.</p>\n<p>For example if interface A depends on B depends on C and you export only A and C the fix is to also export B</p>",
        "id": 425112916,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709738572
    },
    {
        "content": "<p>(sorry it's known the error message is particularly bad in this case)</p>",
        "id": 425112946,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709738583
    },
    {
        "content": "<p>So in this example, is the issue that wit-bindgen wants <code>interface b</code> exported?  I want <code>interface b</code> to be extended in JS and passed to Rust, but also pass a separate Rust export:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kr\">package</span><span class=\"w\"> </span><span class=\"nx\">test</span><span class=\"o\">:</span><span class=\"nx\">pack</span><span class=\"p\">;</span>\n\n<span class=\"kr\">interface</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">use</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">.{</span><span class=\"nx\">factory</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"nx\">resource</span><span class=\"w\"> </span><span class=\"nx\">bbuilder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kr\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"nx\">register</span><span class=\"o\">-</span><span class=\"nx\">bfactory</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"p\">(</span><span class=\"nx\">bfactory</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">factory</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"nx\">build</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">use</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"p\">.{</span><span class=\"nx\">c</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"nx\">resource</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nx\">resource</span><span class=\"w\"> </span><span class=\"nx\">factory</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">b</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">-&gt;</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kr\">interface</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">resource</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nx\">c</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">func</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">world</span><span class=\"w\"> </span><span class=\"nx\">pack</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 425119528,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709740228
    },
    {
        "content": "<p>yes you'll need to export b in addition to a/c</p>",
        "id": 425120904,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709740611
    },
    {
        "content": "<p>and that'll fix that error</p>",
        "id": 425120935,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709740616
    },
    {
        "content": "<p>So the issue, is that when I export b, but need to send a JS extended b.Factory by extending an external JS implementation by calling jco with <code>--map</code>, then register-bfactory errors due to my extended b.Factory <code>Not a valid \"Factory\" resource.</code></p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s2\">\"/out_dir/jcotest.js\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s2\">\"/packb.js\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">B</span><span class=\"w\"> </span><span class=\"k\">extends</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">B</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nx\">b</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Bfactory</span><span class=\"w\"> </span><span class=\"k\">extends</span><span class=\"w\"> </span><span class=\"nx\">b</span><span class=\"p\">.</span><span class=\"nx\">Factory</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kr\">constructor</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">super</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"nx\">b</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Creating B\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">out</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">c</span><span class=\"p\">.</span><span class=\"nx\">c</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"C - \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">out</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">B</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">bFactory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Bfactory</span><span class=\"p\">();</span>\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">bBuilder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">a</span><span class=\"p\">.</span><span class=\"nx\">Bbuilder</span><span class=\"p\">();</span>\n<span class=\"nx\">bBuilder</span><span class=\"p\">.</span><span class=\"nx\">registerBfactory</span><span class=\"p\">(</span><span class=\"nx\">bFactory</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"registered factories\"</span><span class=\"p\">);</span>\n<span class=\"nx\">bBuilder</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 425122899,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709741131
    },
    {
        "content": "<p>It seems like it's looking for an instance of b.Factory that was exported, and defined in the generated jcotest.js, not the imported b.Factory defined in packb.js</p>",
        "id": 425123265,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709741232
    },
    {
        "content": "<p>for that I might tag in <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> who might know the JS/jco bits better than I</p>",
        "id": 425124865,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709741641
    },
    {
        "content": "<p>And to add more context, this is related to the other question I raised that <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> merged a resolution for.  In my case, I would also be happy to export all three interfaces and merely extend an exported type (b.Factory), but I also seep the not a resource error there.</p>",
        "id": 425125866,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709741869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695682\">@Jeremy Slater</span> this should work - the check that is being done by the function is just a <code>arg instanceof Factory</code>, which will be true for subclasses. So the issue is that you must export <code>Factory</code> to the component to import to begin with I think, perhaps it's undefined or something? The component must be able to import the base class itself (not an instance) to be able to do the <code>instanceof</code> check.</p>",
        "id": 425157933,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709751680
    },
    {
        "content": "<p>I'm not seeing a simple instanceof in the codegen, it's looking up the resourceHandleSymbol:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"w\"> </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">rep3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">arg1</span><span class=\"p\">[</span><span class=\"nx\">resourceHandleSymbol</span><span class=\"p\">];</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">rep3</span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"ne\">Error</span><span class=\"p\">(</span><span class=\"s1\">'Resource error: \"Factory\" lifetime expired.'</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">rep3</span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"kc\">undefined</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">throw</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"ne\">Error</span><span class=\"p\">(</span><span class=\"s1\">'Resource error: Not a valid \"Factory\" resource.'</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This seems like an effect because i'm exporting <em>and</em> importing and it's expecting it to be a wasm compiled Rust struct?</p>",
        "id": 425209953,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709775348
    },
    {
        "content": "<p>In fact if it just shuffle the wit around and remove <code>c</code> from being consumed by <code>b</code>, then I can get away without the export of <code>b</code> and yes in fact the codegen does a simple <code>arg1 instanceof Factory</code>.</p>",
        "id": 425210563,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709775757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"695682\">@Jeremy Slater</span> the imported Bfactory and exported Bfactory resources are completely different resource types, and are not interchangeable - if a function expects the exported resource type, you must pass the exported resource type not the imported resource type</p>",
        "id": 425212199,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709776653
    },
    {
        "content": "<p>Sure, that's what I figured was the issue, so this leaves two questions; if I import and export <code>b</code>, can I specify that I want to use the imported <code>b</code> and not the exported <code>b</code>?  If not, then can I not export <code>b</code> but still pass an exported resource to the imported <code>b</code>?</p>",
        "id": 425327102,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709823886
    },
    {
        "content": "<blockquote>\n<p>if I import and export b, can I specify that I want to use the imported b and not the exported b</p>\n</blockquote>\n<p>The way to do this in WIT I believe is via <code>use imported-interface.{foo as bar};</code> to disambiguate them by name even though they have the same name. Also <a href=\"https://github.com/WebAssembly/component-model/pull/308\">https://github.com/WebAssembly/component-model/pull/308</a> may be related here.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/308\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1f01bd1c0eadc9b9109c1e555919d0a260b294db\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633566313132653331636439613966303031373266336265643664663261663366316631393534663737313465346637633035363064636466343938313531322f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f333038)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/308\" title=\"Split 'use' inside worlds into 'use import' and 'use export' by lukewagner · Pull Request #308 · WebAssembly/component-model\">Split 'use' inside worlds into 'use import' and 'use export' by lukewagner · Pull Request #308 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This PR proposes to change how use works inside WIT worlds, based on some initial discussion in wit-bindgen/#822.\nCurrently, use can be used with the same syntax in both interfaces and worlds.  For...</div></div></div>",
        "id": 425345478,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1709828568
    },
    {
        "content": "<p>I'm not sure that even that PR inherently addresses what seems to be my issue.  I think I'm having trouble explaining the issue.  Basically wit has a problem if an exported func takes an argument of an imported resource that has a func taking an argument of an exported resource.  wit can handle either direction of dependencies, exported with imported resource or exported with imported resource, but once it's a chain of export - import - export it breaks.  It doesn't appear that import use is going to resolve this chaining problem.  In my case I don't actually want to export <code>b</code>, it's entirely imported.</p>",
        "id": 425390681,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709843898
    },
    {
        "content": "<p>Possibly related: <a href=\"https://github.com/WebAssembly/component-model/issues/272\">https://github.com/WebAssembly/component-model/issues/272</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/272\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0e2efb319ede1f4b91f4f5a2ea0419b56f842e93\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383735373339646335306634393465336130336161343935626163343366616461613862393838383365323732346132303631666439383635333139356436662f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323732)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/272\" title=\"Question: Why is it not possible to refer to exported types in imports? · Issue #272 · WebAssembly/component-model\">Question: Why is it not possible to refer to exported types in imports? · Issue #272 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">The Component Model does not currently allow you to refer to exported types in imports, which feels asymmetric given that one can easily refer to imported types in exports. This becomes a practical...</div></div></div>",
        "id": 425399277,
        "sender_full_name": "Joel Dice",
        "timestamp": 1709847385
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  for pointing that out, it certainly seems like that's related, although I can always have an export use an import <strong>and</strong> an import use an export, just not an export using an import using an export.  I can loophole around this by getting the export on the js side and passing it to my js imported object like this:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">interfacea</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">interfacec</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s2\">\"/out_dir/jcotest.js\"</span><span class=\"p\">;</span>\n<span class=\"k\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">interfaceb</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s2\">\"/packb.js\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Resourceb</span><span class=\"w\"> </span><span class=\"k\">extends</span><span class=\"w\"> </span><span class=\"nx\">interfaceb</span><span class=\"p\">.</span><span class=\"nx\">Resourceb</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kr\">constructor</span><span class=\"p\">(</span><span class=\"nx\">resourcec</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">super</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resourcec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">resourcec</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"nx\">funcb</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">this</span><span class=\"p\">.</span><span class=\"nx\">resourcec</span><span class=\"p\">.</span><span class=\"nx\">funcc</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"funcb - \"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">result</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">result</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Factoryb</span><span class=\"w\"> </span><span class=\"k\">extends</span><span class=\"w\"> </span><span class=\"nx\">interfaceb</span><span class=\"p\">.</span><span class=\"nx\">Factoryb</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nx\">create</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Creating B\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">resourcec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">builderb</span><span class=\"p\">.</span><span class=\"nx\">resourcec</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Resourceb</span><span class=\"p\">(</span><span class=\"nx\">resourcec</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">factoryb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Factoryb</span><span class=\"p\">();</span>\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">builderb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">interfacea</span><span class=\"p\">.</span><span class=\"nx\">Buildera</span><span class=\"p\">();</span>\n<span class=\"nx\">builderb</span><span class=\"p\">.</span><span class=\"nx\">registerFactoryb</span><span class=\"p\">(</span><span class=\"nx\">factoryb</span><span class=\"p\">);</span>\n<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"registered factories\"</span><span class=\"p\">);</span>\n<span class=\"kd\">var</span><span class=\"w\"> </span><span class=\"nx\">bb</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">builderb</span><span class=\"p\">.</span><span class=\"nx\">build</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>This definitely has some code smell, but am I really hitting a limit of wit-bindgen and therefor this is the (only) way to do this?</p>",
        "id": 425536210,
        "sender_full_name": "Jeremy Slater",
        "timestamp": 1709910271
    }
]