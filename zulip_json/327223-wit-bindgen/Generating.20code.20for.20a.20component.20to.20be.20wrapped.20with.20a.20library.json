[
    {
        "content": "<p>At the moment I can't use wit-bindgen to generate types and traits for a library and then provide a more ergonomic wrapper for Rust at least.</p>\n<p>The goal is to provide a library  api like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Library</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// This type is effectively thunks which may manage some internal state and call into the trait implementation of T.</span>\n<span class=\"k\">struct</span> <span class=\"nc\">LibraryImpl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">Library</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">GuestWhatever</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">LibraryImpl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>And the user would implement the trait and use a macro to generate the component entrypoints, delegating the implementation to <code>LibraryImpl</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">Implementation</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Library</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Implementation</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"c1\">// This macro effectively would tell wit-bindgen to generate entrypoints targeting LibraryImpl&lt;Implementation&gt;.</span>\n<span class=\"n\">library_crate</span>::<span class=\"n\">implement</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Implementation</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>At the moment this type of API would be blocked on two things:</p>\n<ol>\n<li>The generate macro needs to allow generics</li>\n<li>The generate macro needs to split generation of types and entrypoints.</li>\n</ol>\n<p>Any other thoughts on what might be needed for this?</p>",
        "id": 396168691,
        "sender_full_name": "i509VCB",
        "timestamp": 1697060451
    },
    {
        "content": "<p>For use case, I plan to provide a wgpu context implementation that you can ask for that is constructed for you and delegates via the component model to the runtime. (Instead of using the raw wit-bindgen generated types which won't work with the wgpu ecosystem)</p>",
        "id": 396168912,
        "sender_full_name": "i509VCB",
        "timestamp": 1697060578
    }
]