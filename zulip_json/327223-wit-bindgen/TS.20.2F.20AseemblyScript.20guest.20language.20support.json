[
    {
        "content": "<p>Hello. I wanted to ask if TypeScript (well, AssemblyScript) has WIT bindgen support on the plugin (guest) side, when I want to compile my TS code into a WASM module and use WIT bindgen to communicate with the host.</p>\n<p>I could work on a pull request if need be.</p>",
        "id": 362866603,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685649228
    },
    {
        "content": "<p>At this point the path of least resistance for running TypeScript is probably to compile to JavaScript and use <a href=\"https://github.com/bytecodealliance/jco\">https://github.com/bytecodealliance/jco</a> <code>componentize</code> to generate a component.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/774f4331ca6bffa05a7176a2313a995ab765b4c1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663733646438353832666631333761643732313231376365313261626433346334333462303633663632366637643134613136623136393835316362373137302f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</div></div></div>",
        "id": 362872279,
        "sender_full_name": "Lann Martin",
        "timestamp": 1685650959
    },
    {
        "content": "<p>My expectation is that this will become rapidly easier over the summer. I note someone just posted <a href=\"https://betterprogramming.pub/share-rust-types-with-typescript-for-webassembly-a91381e00b4c\">https://betterprogramming.pub/share-rust-types-with-typescript-for-webassembly-a91381e00b4c</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://betterprogramming.pub/share-rust-types-with-typescript-for-webassembly-a91381e00b4c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/eafc7287ff571891dee1a5dc24558a2312a94ea2\\/68747470733a2f2f6d69726f2e6d656469756d2e636f6d2f76322f726573697a653a6669743a313230302f312a5a546b5644383279467165335f476458455f335a37512e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://betterprogramming.pub/share-rust-types-with-typescript-for-webassembly-a91381e00b4c\" title=\"Share Rust Types With TypeScript for WebAssembly\">Share Rust Types With TypeScript for WebAssembly</a></div><div class=\"message_embed_description\">Discover the most seamless developer experience with Rust and WebAssembly. This is the fastest way to auto-generate TypeScript definitions…</div></div></div>",
        "id": 362993371,
        "sender_full_name": "Ralph",
        "timestamp": 1685700455
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> , I have followed this tutorial: <a href=\"https://github.com/bytecodealliance/componentize-js/blob/main/EXAMPLE.md\">https://github.com/bytecodealliance/componentize-js/blob/main/EXAMPLE.md</a> and on one hand, it works, but on the other hand, it has a big problem.</p>\n<p>The \"componentize\" JS script does absolutely no checking on whether the functions defined in the .wit file are acutally implemented in the JS file. It just hapilly creates the WASM file. When I later call the exported function, I get a runtime error.</p>\n<p>This is horrible. Can I generate a typescript definition from the wai file? Just to be clear, there is a typescript types file describing the build module and how to use it, but I see no types file for when you are writing the modules - which functions you need to implement to meet the wai definition.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-js/blob/main/EXAMPLE.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e74f3d965d6a0ef754f13f52849ea576644e7fbb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363461636161363566316336376264626635643832643566343563333631633734346339613164653135653033383039353535316638323139333566376238632f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d6a73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-js/blob/main/EXAMPLE.md\" title=\"componentize-js/EXAMPLE.md at main · bytecodealliance/componentize-js\">componentize-js/EXAMPLE.md at main · bytecodealliance/componentize-js</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-js development by creating an account on GitHub.</div></div></div>",
        "id": 362993589,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685700506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> Thanks, but that's for wasm_bindgen. That's not what I want, I am looking for a way to implement a wit format in TypeScript (or Assembly Script) and compile that to a wit-compatible WASM module.</p>",
        "id": 362994288,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685700685
    },
    {
        "content": "<p>you should discuss componentize-js and jco with <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> who can answer your questions more directly I think..... are you expecting an <em>implementation</em> of the component to be generated? Do I understand you correctly?</p>",
        "id": 362995132,
        "sender_full_name": "Ralph",
        "timestamp": 1685700898
    },
    {
        "content": "<p>as it is, there are experiments all around looking at TS--&gt;JS--&gt;components ongoing, I know that....</p>",
        "id": 362995324,
        "sender_full_name": "Ralph",
        "timestamp": 1685700941
    },
    {
        "content": "<p><em>are you expecting an implementation of the component to be generated?</em> The TS types for the implementation, yes. For example, if the protocol specifies a method \"hello_abc(): string\", I am expecting a TS type definition that would require me for implement this method with that signature. An interface would probably be a best fit.</p>",
        "id": 362995893,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685701055
    },
    {
        "content": "<p>For example, when using wit bindgen for TS host, I get an interface for the imported method that I need to implement with correct TS types.</p>",
        "id": 362996327,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685701139
    },
    {
        "content": "<p>Example: protocol-host.wai:<br>\nadd-one-to-all: func(numbers: list&lt;u8&gt;) -&gt; list&lt;u8&gt;</p>\n<p>Running command:<br>\nwasmer run wasmer/wai-bindgen-cli --dir . -- js --export ./protocol-host.wai</p>\n<p>Generates:<br>\nexport function addProtocolHostToImports(imports: any, obj: ProtocolHost, get_export: (name: string) =&gt; WebAssembly.ExportValue): void;<br>\nexport interface ProtocolHost {<br>\n  addOneToAll(numbers: Uint8Array): Uint8Array;<br>\n}</p>\n<p>So I get the interface I need to implement, and the method to \"plug\" the imports into the runtime. I am looking for the same thing, but for the plugin (guest).</p>",
        "id": 362997377,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685701348
    },
    {
        "content": "<p>Of course, for the guest, there would only be the interface to implement. But the tutorial I followed generated no such TS types for the guest implementation.</p>",
        "id": 362999913,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685701896
    },
    {
        "content": "<p>I would open an issue at <a href=\"https://github.com/bytecodealliance/jco/issues\">https://github.com/bytecodealliance/jco/issues</a>; if TS guest type gen isn't already done/planned I'm sure it would be an appreciated contribution</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/issues\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/774f4331ca6bffa05a7176a2313a995ab765b4c1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663733646438353832666631333761643732313231376365313261626433346334333462303633663632366637643134613136623136393835316362373137302f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/issues\" title=\"Issues · bytecodealliance/jco\">Issues · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - Issues · bytecodealliance/jco</div></div></div>",
        "id": 363030417,
        "sender_full_name": "Lann Martin",
        "timestamp": 1685708669
    },
    {
        "content": "<p>jco automatically generates typescript types, yes, they're in the output folder of transpilation</p>",
        "id": 363078865,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1685718098
    },
    {
        "content": "<p>So to generate guest TS defs it looks like you have to <code>componentize</code>, then <code>transpile</code> that generated component? Seems to work for me for a simple example; maybe that could be streamlined as a <code>jco bindgen &lt;wit&gt; -o types/</code> to simplify the guest-only workflow?</p>",
        "id": 363086689,
        "sender_full_name": "Lann Martin",
        "timestamp": 1685719628
    },
    {
        "content": "<p>For example, <code>componentize-py</code> has a <code>bindings</code> subcommand for just generating guest bindings and nothing else.</p>",
        "id": 363087445,
        "sender_full_name": "Joel Dice",
        "timestamp": 1685719769
    },
    {
        "content": "<p>From what I remember, the TS type bindings for a TS guest do generate, but only on the consuming side for a TS host.</p>\n<p>For example, you get a type definition on what the module will provide and what methods you can call on it, but I didn't see any type definition for <em>me</em> to fulfill when I was writing the plug-in code in TypeScript.</p>\n<p>I will provide more details when I get to a computer tomorrow.</p>",
        "id": 363152549,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685735945
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\">$ </span><span class=\"nb\">cd</span><span class=\"w\"> </span>jco/test/fixtures/componentize\n<span class=\"gp\">$ </span>cat<span class=\"w\"> </span>source.wit\n<span class=\"go\">default world test {</span>\n<span class=\"go\">  export hello: func() -&gt; string</span>\n<span class=\"go\">}</span>\n<span class=\"gp\">$ </span>npx<span class=\"w\"> </span>jco<span class=\"w\"> </span>componentize<span class=\"w\"> </span>source.js<span class=\"w\"> </span>-w<span class=\"w\"> </span>source.wit<span class=\"w\"> </span>-o<span class=\"w\"> </span>component.wasm\n<span class=\"go\">...</span>\n<span class=\"gp\">$ </span>npx<span class=\"w\"> </span>jco<span class=\"w\"> </span>transpile<span class=\"w\"> </span>component.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>types\n<span class=\"go\">...</span>\n<span class=\"gp\">$ </span>cat<span class=\"w\"> </span>types/component.d.ts\n<span class=\"go\">...</span>\n<span class=\"go\">import { Preopens as PreopensImports } from './imports/preopens';</span>\n<span class=\"go\">import { Exit as ExitImports } from './imports/exit';</span>\n<span class=\"go\">export function hello(): string;</span>\n</code></pre></div>",
        "id": 363160817,
        "sender_full_name": "Lann Martin",
        "timestamp": 1685738557
    },
    {
        "content": "<p>That seems like the right <em>sort</em> of thing, but I guess my Typescript is pretty rusty; I'm not sure if that can be usefully adapted for guest type checking</p>",
        "id": 363162346,
        "sender_full_name": "Lann Martin",
        "timestamp": 1685739001
    },
    {
        "content": "<p>Yes, I was using the \"componentize\" command followed by \"transpile\", like in your example <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span>. But the resulting file isn't exactly what I need. The <code>export function hello(): string;</code> line is better than nothing, but it would require some wild regexes to turn in into an interface. And also there is the issue of properly exporting the methods from the interface implementation.</p>\n<p>Again, I am comparing it to how wai bindgen works in Rust, but the current solution (manage type signatures manually with no compile error and absolutely no build error, only a runtime error after you actually try to run your module) is just horrible.</p>\n<p>I can try and work on a PR perhaps, but currently I have other tasks to do before focusing on supporting more guest languages.</p>",
        "id": 363297793,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1685796239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal</span> thanks for the suggestions, I've created <a href=\"https://github.com/bytecodealliance/componentize-js/issues/30\">https://github.com/bytecodealliance/componentize-js/issues/30</a> to track improving the experience here, hoping to get some updates to that soon</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-js/issues/30\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ac833fb40668eae35cfbc71c5f434ad64ad4affb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316136353465366231396330393735376635313036613532633732373431363664333137616133393561316562343661316634663032356138346666326437392f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d6a732f6973737565732f3330)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-js/issues/30\" title=\"Wizer-time bindings checks · Issue #30 · bytecodealliance/componentize-js\">Wizer-time bindings checks · Issue #30 · bytecodealliance/componentize-js</a></div><div class=\"message_embed_description\">In the recent bindgen updates, import checks at Wizer time were removed, these should be added back. In addition we should extend these checks to the exports shape as well. Relatively simple work, ...</div></div></div>",
        "id": 363405999,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1685842745
    }
]