[
    {
        "content": "<p>I am struggling to model something in WIT and not sure if I am missing something or if what I want to do is currently not supported by the model.</p>\n<p>What I want is a container <code>resource</code> that takes ownership of a child <code>resource</code> (which could be one of several types of resources) and then can pass a reference to the child <code>resource</code>. I am modeling this with <code>variant</code> types like so:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package component:%variant;\n\ninterface test {\n    resource foo-child {\n        constructor();\n    }\n\n    resource bar-child {\n        constructor();\n    }\n\n    variant children {\n        foo(foo-child),\n        bar(bar-child),\n        none\n    }\n\n    variant borrowed-children {\n        foo(borrow&lt;foo-child&gt;),\n        bar(borrow&lt;bar-child&gt;),\n        none\n    }\n\n    resource container {\n        constructor(child: children);\n        get-child: func() -&gt; borrowed-children;\n    }\n}\n\nworld example {\n    export test;\n}\n</code></pre></div>\n<p>But <code>wit-bindgen</code> fails to build with this error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>$<span class=\"w\"> </span>cargo<span class=\"w\"> </span>component<span class=\"w\"> </span>build<span class=\"w\"> </span>--release\n<span class=\"w\">  </span>Generating<span class=\"w\"> </span>bindings<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>variant<span class=\"w\"> </span><span class=\"o\">(</span>src/bindings.rs<span class=\"o\">)</span>\nthread<span class=\"w\"> </span><span class=\"s1\">'main'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span>/Users/lnj/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wit-bindgen-rust-0.21.0/src/interface.rs:889:17:\nassertion<span class=\"w\"> </span>failed:<span class=\"w\"> </span>mode.lifetime.is_none<span class=\"o\">()</span>\nnote:<span class=\"w\"> </span>run<span class=\"w\"> </span>with<span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"nv\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"sb\">`</span><span class=\"w\"> </span>environment<span class=\"w\"> </span>variable<span class=\"w\"> </span>to<span class=\"w\"> </span>display<span class=\"w\"> </span>a<span class=\"w\"> </span>backtrace\n</code></pre></div>\n<p>The above WIT does work when removing references to the <code>variant borrowed-children</code>, so it seems to be an issue with using <code>borrow&lt;resource&gt;</code> in an unsupported way. </p>\n<p>Just curious if there is a way to model this in WIT currently? I think the answer is that I would have to return the <code>borrow&lt;resource&gt;</code> directly from the <code>get-child</code> function which is difficult since I would like my container to be able to hold multiple types of resources.</p>",
        "id": 430127892,
        "sender_full_name": "Landon James",
        "timestamp": 1711646835
    },
    {
        "content": "<p>I don't know the answer to your question, but it looks like you are a couple of releases behind the latest for <code>wit-bindgen</code>. Could you try upgrading to make sure this isn't a fixed bug?</p>",
        "id": 430128652,
        "sender_full_name": "Lann Martin",
        "timestamp": 1711647052
    },
    {
        "content": "<p>I do not believe I can, at least directly, since I am using the latest version of <code>cargo-component</code> and <code>wit-bindgen</code> is a transitive dependency of that. I can try to quickly rewrite the rust implementing the WIT using <code>wit-bindgen</code> directly though.</p>",
        "id": 430129292,
        "sender_full_name": "Landon James",
        "timestamp": 1711647215
    },
    {
        "content": "<p><code>cargo-component</code> also has upgraded dependencies on <code>main</code> if you wanted to try that instead</p>",
        "id": 430129677,
        "sender_full_name": "Lann Martin",
        "timestamp": 1711647319
    },
    {
        "content": "<p>Per <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1469\">https://github.com/bytecodealliance/wasm-tools/pull/1469</a>, I don't believe it is possible to return a <code>borrow&lt;_&gt;</code> from a function in the Component Model, so I don't think <code>container.get-child</code> can work.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1469\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/57ab78b01d73a768571de5b4a87eed2ba50d5ab1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393834643562316132626634396536316335616535656635656661376538376361386335383861656638336264306532666130303531396138313731623735632f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31343639)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1469\" title=\" Disallow returns-of-borrows in WIT  by alexcrichton 路 Pull Request #1469 路 bytecodealliance/wasm-tools\"> Disallow returns-of-borrows in WIT  by alexcrichton 路 Pull Request #1469 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Currently in the component model it's not valid to have a function that\nreturns a borrow resource. In WIT, however, there's no protection\ncurrently against this until a component is actually made. ...</div></div></div>",
        "id": 430129938,
        "sender_full_name": "Joel Dice",
        "timestamp": 1711647390
    },
    {
        "content": "<p>(We'll have better error diagnostics for such cases once that PR is merged, at least.)</p>",
        "id": 430130168,
        "sender_full_name": "Joel Dice",
        "timestamp": 1711647453
    },
    {
        "content": "<p>Ahh ok, well back to the drawing board for how to model this then, thanks for the pointer!</p>",
        "id": 430131531,
        "sender_full_name": "Landon James",
        "timestamp": 1711647891
    }
]