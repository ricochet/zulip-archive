[
    {
        "content": "<p>Since my <a href=\"#narrow/stream/327223-wit-bindgen/topic/How.20to.20work.20with.20resources.20on.20the.20host.3F\">last post</a> was pretty toxic, let me start over.</p>\n<p>I am having trouble using resources. I have made a minimal reproducible example <a href=\"https://github.com/kajacx/wasm-playground/tree/resources-roundtrip\">here</a>, but for the sake of convenience, I'll add the important files here:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>protocol.wit</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>package example:protocol;\n\ninterface companies {\n  resource company {\n    constructor(name: string, max-salary: u32);\n    get-name: func() -&gt; string;\n    get-max-salary: func() -&gt; u32;\n  }\n}\n\ninterface host-fns {\n  use employees.{employee};\n  use companies.{company};\n\n  employee-roundtrip: func(employee: employee) -&gt; employee;\n  company-roundtrip: func(company: company) -&gt; company;\n}\n\ninterface employees {\n  resource employee {\n    constructor(name: string, min-salary: u32);\n    get-name: func() -&gt; string;\n    get-min-salary: func() -&gt; u32;\n  }\n}\n\ninterface guest-fns {\n  use employees.{employee};\n  use companies.{company};\n\n  employee-roundtrip: func(employee: employee) -&gt; employee;\n  company-roundtrip: func(company: company) -&gt; company;\n}\n\nworld resources {\n  import companies;\n  import host-fns;\n\n  export employees;\n  export guest-fns;\n}\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Guest code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../protocol.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span>: <span class=\"s\">\"resources\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">with</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// Throws error: unused mapping</span>\n<span class=\"w\">        </span><span class=\"c1\">//\"example:protocol/employees/employee\": MyEmployee</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">companies</span>::<span class=\"n\">Company</span><span class=\"p\">;</span>\n\n<span class=\"c1\">// This has wrong function signature, but can call host</span>\n<span class=\"c1\">// use example::protocol::employees::Employee;</span>\n\n<span class=\"c1\">// This works for the function signature, but cannot call host</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span>::<span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">Employee</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">MyEmployees</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">exports</span>::<span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyEmployees</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">type</span> <span class=\"nc\">Employee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MyEmployee</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyEmployee</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">min_salary</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">exports</span>::<span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">GuestEmployee</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyEmployee</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min_salary</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min_salary</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_min_salary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">min_salary</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">exports</span>::<span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">guest_fns</span>::<span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyEmployees</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">company_roundtrip</span><span class=\"p\">(</span><span class=\"n\">company</span>: <span class=\"nc\">Company</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Company</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">company</span><span class=\"p\">.</span><span class=\"n\">get_name</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">host_fns</span>::<span class=\"n\">company_roundtrip</span><span class=\"p\">(</span><span class=\"n\">company</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Host call wants example::protocol::employees::Employee</span>\n<span class=\"w\">    </span><span class=\"c1\">// But this function signature wants</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">employee_roundtrip</span><span class=\"p\">(</span><span class=\"n\">employee</span>: <span class=\"nc\">Employee</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Employee</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"cp\">#[allow(unused, unreachable_code)]</span>\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">employee</span>: <span class=\"nc\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">Employee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">todo!</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"n\">get_name</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">employee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">host_fns</span>::<span class=\"n\">employee_roundtrip</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">employee</span><span class=\"p\">.</span><span class=\"n\">get</span>::<span class=\"o\">&lt;</span><span class=\"n\">MyEmployee</span><span class=\"o\">&gt;</span><span class=\"p\">().</span><span class=\"n\">name</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"n\">employee</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// TODO: this unfortunately doesn't work</span>\n<span class=\"w\">        </span><span class=\"c1\">// example::protocol::host_fns::employee_roundtrip(employee)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">MyEmployees</span><span class=\"p\">);</span>\n</code></pre></div>\n</div></div>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n<p>Host code</p>\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Resource</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceAny</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"../protocol.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">world</span>: <span class=\"s\">\"resources\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">with</span>: <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"example:protocol/companies/company\"</span>: <span class=\"nc\">MyCompany</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">Employee</span><span class=\"p\">;</span>\n\n<span class=\"cp\">#[derive(Default, Clone)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyCompany</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">max_salary</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[derive(Default)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resources</span>: <span class=\"nc\">ResourceTable</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">companies</span>::<span class=\"n\">HostCompany</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_salary</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MyCompany</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">MyCompany</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_salary</span><span class=\"w\"> </span><span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MyCompany</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_max_salary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">self_</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MyCompany</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">max_salary</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rep</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MyCompany</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">host_fns</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">company_roundtrip</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">company</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MyCompany</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MyCompany</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Name: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">company</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">company</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">employee_roundtrip</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">employee</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// TODO: how to get employee name here?</span>\n<span class=\"w\">        </span><span class=\"c1\">// println!(\"Name: {}\", self.resources.get(&amp;employee).unwrap().???);</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">employee</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">companies</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">HostEmployee</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_name</span>: <span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_min_salary</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_self_</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_min_salary</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">_self_</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_rep</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Employee</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">example</span>::<span class=\"n\">protocol</span>::<span class=\"n\">employees</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Starting...\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">State</span>::<span class=\"n\">default</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"../guest/target/wasm32-unknown-unknown/debug/guest.wasm\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component_bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"n\">Resources</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">state</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">my_world</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Resources</span>::<span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">employees</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_world</span><span class=\"p\">.</span><span class=\"n\">example_protocol_employees</span><span class=\"p\">().</span><span class=\"n\">employee</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">employee</span>: <span class=\"nc\">ResourceAny</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">employees</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_constructor</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Mike\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"mi\">50_000</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"Employee name: {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">employees</span><span class=\"p\">.</span><span class=\"n\">call_get_name</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">employee</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_world</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">example_protocol_guest_fns</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_employee_roundtrip</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">employee</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"Employee name after roundtrip: {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">employees</span><span class=\"p\">.</span><span class=\"n\">call_get_name</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">company</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">store</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">resources</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">MyCompany</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">name</span>: <span class=\"s\">\"Company1\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">max_salary</span>: <span class=\"mi\">30_000</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"Company name: {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">company</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">name</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">my_world</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">example_protocol_guest_fns</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_company_roundtrip</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">company</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"Company name after roundabout: {}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">result</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">name</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// \"Must\" manually drop returned company, dropping the Resource handle does not delete the company from the table</span>\n<span class=\"w\">    </span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">resources</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"All done.\"</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div></div>\n<p>The main problem is that there seem to be two \"Employee\" resources both on guest and on host. On the guest, there is <code>example::protocol::employees::Employee</code> and <code>exports::example::protocol::employees::Employee</code>. The exported roundtrip method (the one we need to implement on the guest) uses the second type, while the imported roundtrip method (the one that is provided to us by the host) uses the first one.</p>\n<p>I think this is happening because I use the <code>employee</code> resource type in the <code>host_fns</code> imported interface, but I don't know how to work with these 2 different types or if it is possible to convert one into the other.</p>\n<p>On the host, there are also two \"employee\" resources: there is <code>exports::example::protocol::employees::GuestEmployee</code>, obtained with <code>my_world.example_protocol_employees().employee()</code>. This seems to be the \"correct\" guest resource, as using it works without running into the <code>todo!()</code> panics in the host Employee implementaion (see later).</p>\n<p>And then there is <code>example::protocol::employees::HostEmployee</code>. It looks like wit bindgen thinks there is a <code>employee</code> resource that the host should implement, but that's not what I wanted. Maybe I have some problem in the wit file?</p>\n<p>Finally, In the <code>employee_roundtrip</code> imported method on the host, I don't know how to work with that resource. How do I get the name, for example? It seems like it is the host employee \"fake\" resource, but Employee should be a guest resource.</p>\n<p>The <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-resource\">wit format</a> page doesn't talk about the difference between host and guest resource, nor how to use them. <a href=\"https://github.com/cpetig/resource-demo\">This example</a> by Christof Petig intentially uses the same resource as both host and a guest resource, and it doesn't have any methods that use either the host or the guest resource.</p>\n<p>So in the end I am lost and don't know how to proceed. Is there a way I can change the wit file for example, so that I still have a employee guest resource (method implementation provided by the guest), a company host resource (method implementation provided by the host) and both roundtrip methods for both resources both on guest and host (with the guest roundtrip method calling the host one)?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kajacx/wasm-playground/tree/resources-roundtrip\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9ef639bfacc02dabb21db1efb6fae70fe49dcb80/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643636376166343637336165623738643535396363393332343231376463353833376533343762613164316138326132623937343762666263306262353930332f6b616a6163782f7761736d2d706c617967726f756e64&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kajacx/wasm-playground/tree/resources-roundtrip\" title=\"GitHub - kajacx/wasm-playground at resources-roundtrip\">GitHub - kajacx/wasm-playground at resources-roundtrip</a></div><div class=\"message_embed_description\">Various projects related to WASM, each in it's own branch, so that I don't have 50 repositories. - GitHub - kajacx/wasm-playground at resources-roundtrip</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-resource\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/21ab1b9e6af1548ccabd7d204dcbdf87908d28e2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396138653939313536366335633838313936313834646331623964353039653434363561393439633561643537316235653236366538326238356133613537622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#item-resource\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/resource-demo\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7b49ab67b89307701c87c860189bc780c357fe29/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396639376166363734396630353465636334376563383136306435656233393965613533633538323235373732353233303733316539353961613461376664322f6370657469672f7265736f757263652d64656d6f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/resource-demo\" title=\"GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments\">GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</a></div><div class=\"message_embed_description\">A demo showing WASM component model resources in various environments - cpetig/resource-demo</div></div></div>",
        "id": 436877106,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1714740736
    },
    {
        "content": "<p>I think the problem may be the duplication of <code>host-fns</code> and <code>guest-fns</code>.  A single interface is meant to support both the import and export sides depending on the world being targeted. If the world exports an interface, the guest will be expected to implement that  interface. If the world imports an interface, an implementation will be provided to the guest. Wasmtime's host bindings generation is special in that it inverts this import/export relationship, but it still uses the same single WIT interface as the guest.</p>",
        "id": 436881689,
        "sender_full_name": "Lann Martin",
        "timestamp": 1714742286
    },
    {
        "content": "<p>The key thing to notice here is that the <code>resources</code> world both imports and exports the <code>employees</code> interface.  It imports it implicitly by importing <code>host-fns</code> which <code>use</code>s <code>employees.{employee}</code> (which causes <code>employees</code> to be imported as well), and it exports it explicitly.</p>\n<p>The result is that the component refers to two entirely <em>different</em> resource types which happen to share the same name and interface: the imported version of <code>employee</code> and the exported version of <code>employee</code>.  Those two types are completely independent of each other as far as the component model is concerned, and the bindings generated by the host and guest bindings generators reflect that.  Any conversions you might want to do between the two types would need to be done manually.</p>\n<p>From what you wrote, I believe your intention was to only have a single type: the exported version of <code>employee</code>, and refer to it via both imported and exported interfaces.  That is unfortunately not possible; see <a href=\"https://github.com/WebAssembly/component-model/issues/272\">https://github.com/WebAssembly/component-model/issues/272</a> for details.  You are allowed to reference an imported resource type from either imports or exports, but you can only reference an exported resource type from other exports.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/272\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0e2efb319ede1f4b91f4f5a2ea0419b56f842e93/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383735373339646335306634393465336130336161343935626163343366616461613862393838383365323732346132303631666439383635333139356436662f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323732&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/272\" title=\"Question: Why is it not possible to refer to exported types in imports? · Issue #272 · WebAssembly/component-model\">Question: Why is it not possible to refer to exported types in imports? · Issue #272 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">The Component Model does not currently allow you to refer to exported types in imports, which feels asymmetric given that one can easily refer to imported types in exports. This becomes a practical...</div></div></div>",
        "id": 436881912,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714742364
    },
    {
        "content": "<p>So the host can never use an exported Resource in any of it's (imported) functions?</p>",
        "id": 436884267,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1714743085
    },
    {
        "content": "<p>Not directly, no.  You could work around the issue by maintaining a table of objects in the guest and referring to them by e.g. <code>u32</code> indexes in any imports, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">ersatz</span><span class=\"o\">-</span><span class=\"n\">employees</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">employee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"o\">-</span><span class=\"n\">employee</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">name</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">min</span><span class=\"o\">-</span><span class=\"n\">salary</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"n\">employee</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">name</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">employee</span>: <span class=\"nc\">employee</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">employee</span><span class=\"o\">-</span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">min</span><span class=\"o\">-</span><span class=\"n\">salary</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">employee</span>: <span class=\"nc\">employee</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 436885319,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714743433
    },
    {
        "content": "<p>Then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">fns</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">ersatz</span><span class=\"o\">-</span><span class=\"n\">employees</span><span class=\"p\">.{</span><span class=\"n\">employee</span><span class=\"p\">};</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">companies</span><span class=\"p\">.{</span><span class=\"n\">company</span><span class=\"p\">};</span>\n\n<span class=\"w\">  </span><span class=\"n\">employee</span><span class=\"o\">-</span><span class=\"n\">roundtrip</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">employee</span>: <span class=\"nc\">employee</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">employee</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">company</span><span class=\"o\">-</span><span class=\"n\">roundtrip</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">company</span>: <span class=\"nc\">company</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">company</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 436885717,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714743567
    },
    {
        "content": "<p>Since, in that scenario, <code>employee</code> is just a <code>u32</code>, there's no circularity, and thus only a single representation of the type that can be used in both imports and exports.</p>",
        "id": 436885948,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714743638
    },
    {
        "content": "<p>It's not an ideal solution, obviously.  I'd be interested if anyone has ideas for improving on it, given that I expect this will be a very common paper cut for folks.</p>",
        "id": 436886830,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714743944
    },
    {
        "content": "<p>I guess that could work. The host still cannot get the name of the resource in the imported function, because it would be re-entering the component?</p>\n<p>Now when I think about it, it makes sense that the host cannot \"handle\" guest resources in imported functions, because any work with them would involve re-entering the component, which is a fundamental problem that cannot be fixed with a better host implementation.</p>\n<p>You could (in theory) handle opaque handles to guest resources in imported host functions (which is effectively what the \"u32\" workaround does), but I guess re-implementing large portions of the host runtime isn't worth the effort.</p>",
        "id": 436887131,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1714744021
    },
    {
        "content": "<p>My understanding is that this is currently the case, but that the next preview may or may not address the \"one shared type\" scenario. <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> is that your understanding as well?</p>",
        "id": 436893045,
        "sender_full_name": "Ralph",
        "timestamp": 1714745760
    },
    {
        "content": "<p>I'm not aware of any plans to allow referring to exported resource types in imported interfaces for the next preview or ever, nor any any plans to make the pattern I described above more type-safe or ergonomic.  Maybe it was on the list <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> presented at the plumbers conference and I missed it?</p>",
        "id": 436893925,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714746056
    },
    {
        "content": "<p>Now when I think about it some more, I'm not sure if re-entering a component (calling an exported function from an imported function) is actually bad. Even when you have a mutable reference going in the guest while you call the exported function, it shouldn't be possible to read that data from the re-entrant code because of the type system. Or maybe there are other problems with re-entering that I don't see?</p>",
        "id": 436895744,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1714746648
    },
    {
        "content": "<p><del>AFAIK, calling an exported function from an imported function is <em>not</em> prohibited.</del>  My understanding is that the potential circularity we're concerned with here is at the static, type system level rather than the runtime level.</p>",
        "id": 436896104,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714746772
    },
    {
        "content": "<p>oh, maybe they <em>are</em> prohibited: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#component-invariants\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#component-invariants</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#component-invariants\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/21ab1b9e6af1548ccabd7d204dcbdf87908d28e2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396138653939313536366335633838313936313834646331623964353039653434363561393439633561643537316235653236366538326238356133613537622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md#component-invariants\" title=\"component-model/design/mvp/Explainer.md at main · WebAssembly/component-model\">component-model/design/mvp/Explainer.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 436896442,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714746903
    },
    {
        "content": "<p>In that case, using guest resources in host imported function should (in theory) be fine. The host could just call the resource's methods, re-entering the guest component.</p>\n<p>I will admit I did not really understand what the github issue was about, it looked like it concerned connecting many components together, but that is not my use case, I just want one component with exported and imported functions.</p>\n<p>EDIT: never mind, re-entering is prohibited, as explained in the link above.</p>",
        "id": 436896591,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1714746955
    },
    {
        "content": "<p>Any interface defined in the component model needs to be valid both for interacting with the host and with other components, hence some of the restrictions.</p>",
        "id": 436896798,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714747031
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal (kajacx)</span> has marked this topic as resolved.</p>",
        "id": 436897197,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714747122
    },
    {
        "content": "<p>Note that the rules about reentrance are expected to be loosened with the introduction of async lifts and lowers (which is what I'm currently working on).  I'm not sure if that will directly help with your use case or not yet, but possibly.</p>",
        "id": 436898632,
        "sender_full_name": "Joel Dice",
        "timestamp": 1714747391
    }
]