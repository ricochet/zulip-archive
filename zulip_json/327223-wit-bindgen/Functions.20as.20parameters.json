[
    {
        "content": "<p>In the component model, Is it possible for a host to <strong>pass a function-handle</strong> to the guest in order to let the guest call that specific function?</p>\n<p>My point is that I would like to avoid exposing the function explicitly in the <code>.wit</code> file. Ideally, the <code>.wit</code> would expose the signature/type of the function which may be called.  However, browsing <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-types\">The wit format</a>, I think, this is not possible. </p>\n<p>Can anyone confirm my assumption?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-types\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/dbfd89e6bb0e757e4160c322d0d6b2281b572beb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353461323563346564666566303266373739353736616461386238633132303735323262643432313963343637343332316438393031353732616564636164382f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#wit-types\" title=\"component-model/WIT.md at main · WebAssembly/component-model\">component-model/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/WIT.md at main · WebAssembly/component-model</div></div></div>",
        "id": 358996367,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1684333081
    },
    {
        "content": "<p>That's correct, functions-as-values are not possible in the component model type language</p>",
        "id": 358996634,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684333134
    },
    {
        "content": "<p>There are some planned features which will be able to do something very similar though. When integrated-async <code>stream</code>s are added, reading from a stream in one component that's being written to in another will have the effective behavior the reader calling a callback in the writer. And when component-imports are added, they'll provide an instantiation-time way to pass in code for a component to run.</p>",
        "id": 359032915,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1684342422
    }
]