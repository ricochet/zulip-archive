[
    {
        "content": "<p>It seems like resources defined in <code>wit</code> files cannot return an error, or any value?<br>\nI tried:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">id</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>However it isn't valid syntax since it wants an <code>;</code> immediately after the <code>)</code>.</p>\n<p>I'm assuming this was initially intentional, however is there a good reason for having this restriction where constructors cannot fail?<br>\nI'm not sure how to model it so that it can fail, unless I did something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">agg</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">init</span><span class=\"p\">(</span><span class=\"n\">id</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But the rust code would just be <code>Default::default()</code> for the constructor, and the init would set the ID string?<br>\nIt's a little messy and it would be much more convenient if I could just return the error directly from the constructor.</p>",
        "id": 405291864,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701413715
    },
    {
        "content": "<p>not all languages support fallible constructors, and we want to provide the ability to create good bindings for all languages, including those.</p>\n<p>What you can do instead is add a static function that can internally call the constructor, but returns a result:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource agg {\n    constructor();\n    from_id: static func(id: string) -&gt; result&lt;agg, string&gt;;\n}\n</code></pre></div>",
        "id": 405373268,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1701440244
    },
    {
        "content": "<p>Note that if you only want a resource to be produced via the static function you shouldn't define <code>constructor();</code> at all; it is only for exporting infallible constructors.</p>",
        "id": 405377210,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701441700
    },
    {
        "content": "<p>ah okay, that solves it entirely I guess! Thanks a lot</p>",
        "id": 405377374,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701441746
    }
]