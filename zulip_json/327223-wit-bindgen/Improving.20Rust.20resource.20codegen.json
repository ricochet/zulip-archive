[
    {
        "content": "<p>The codegen for resources in Rust isn't really ideal and feels far from idiomatic. I was wondering if anyone has done any thinking of how we might improve this. </p>\n<p>I've recently had to interact with the resource heavy <code>wasi-http</code> and wrote some wrappers to provide more ergonomic bindings. Perhaps this could be an inspiration for where we might go?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Fields</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">GuestFields</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">ResourceAny</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">Fields</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">new</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nc\">VirtualizedApp</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"bp\">Self</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">wasi_http_types</span><span class=\"p\">().</span><span class=\"n\">fields</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_constructor</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"bp\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">append</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">String</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">value</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">HeaderError</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_append</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">entries</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"k\">super</span><span class=\"p\">::</span><span class=\"n\">StoreData</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_entries</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The biggest questions, and the reason why bindings aren't yet ergonomic, is that you typically need to keep track of four things when using a particular resource:</p>\n<ul>\n<li>An <code>Instance</code></li>\n<li>A <code>Store</code></li>\n<li>The <code>Guest</code> for a particular resource type</li>\n<li>A <code>ResourceAny</code> handle to a particular resource </li>\n</ul>\n<p><code>Guest</code>s tend to be paramterized on some lifetime, so one could imagine parameterizing a resource type over borrows to an <code>Instance</code>, <code>Store</code>, and <code>Guest</code> but this obviously limits the user to only using the resource for the lifetime of that borrow. </p>\n<p>My wrappers typically do this for everything but the <code>Store</code> which is instead passed in for every method call:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">OutgoingBody</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nc\">VirtualizedApp</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">guest</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">bindings</span><span class=\"p\">::</span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"n\">GuestOutgoingBody</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">ResourceAny</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">OutgoingBody</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">write</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">anyhow</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">OutputStream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">guest</span><span class=\"p\">.</span><span class=\"n\">call_write</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">resource</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(())),</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">OutputStream</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">instance</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">resource</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">stream</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Would appreciate any thoughts. Depending on the conversation here, I'd be happy to write up an issue and if we can come to an agreement on what the improvement should look like, perhaps even do the implementation.</p>",
        "id": 444724825,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1718378882
    },
    {
        "content": "<p>Just to clarify, you're talking about wasmtime's bindgen, not wit-bindgen itself, right?</p>",
        "id": 444726034,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718379201
    },
    {
        "content": "<p>ah yes, sorry - I should have posted in <a class=\"stream\" data-stream-id=\"217126\" href=\"/#narrow/stream/217126-wasmtime\">#wasmtime</a> <span aria-label=\"embarrassed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"embarrassed\">:embarrassed:</span></p>",
        "id": 444726142,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1718379234
    },
    {
        "content": "<p>The initial implementation of resources was where I basically wanted everything to work as opposed to everything working well. We were under a fair amount of pressure to get everything working as opposed to everything working well, hence the current status where the bindings basically give up and don't do anything fancy. That being said I think it'd be great to improve bindings. The trickiness is always in handling the free-form nature of WIT where bindings need to be uniformly handled across all possible WIT interfaces, not just a few specific shapes. Even <code>wasi:http</code> doesn't exercise all the various possibilities of where a resource could show up.</p>\n<p>Even with that though there's no reason we can't have improvements still which don't necessarily apply to all shapes of APIs. I don't really know how to balance this though because everyone seems to expect that <code>bindgen!</code> generates a \"perfect\" API which is the most ergonomic, but that's an extremely difficult task to take on for all possible WIT documents.</p>",
        "id": 444727067,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718379488
    },
    {
        "content": "<p>My personal opinion is that the ergonomics of guest bindings matters more than the ergonomics of host bindings, based on the assumption that the latter will be used by a much smaller pool of developers who may need fine-grained control and deeper domain knowledge to match the \"super host powers\" they've been entrusted with, and it seems natural that the bindings should reflect that.  It's analogous to user space programming vs. kernel programming.  The latter is often more difficult and complicated, but for good reasons.</p>",
        "id": 444747137,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718384377
    },
    {
        "content": "<p>(None of which is to say we shouldn't improve the host bindings where appropriate)</p>",
        "id": 444748047,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718384603
    },
    {
        "content": "<p>All good points. I'm raising this issue because the bindings <em>feel</em> more complicated to me than they necessarily have to. My hand made wrappers around them improve usability quite a bit, and they <em>feel</em> quite mechanical. That all being said, I'm certainly not discounting the possibility that automating these wrappers is not actually possible and we've reached the point at which the generated code is as ergonomic as we can get it. It just doesn't feel that way to me yet. I'll spend some time thinking about this and seeing if I see any way for improvement.</p>",
        "id": 445086067,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1718614875
    }
]