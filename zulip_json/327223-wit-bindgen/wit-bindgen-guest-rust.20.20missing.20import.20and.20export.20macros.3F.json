[
    {
        "content": "<p>what happened with the import and export macros? The readme still refers to them but they're gone from current git main</p>",
        "id": 307608695,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667419388
    },
    {
        "content": "<p>They're changing appearance as part of the move to support Worlds. Part of what this is needed for is that if you generate bindings for multiple interfaces that use the same time, you want the bindings to use the same type too, so they need to be linked with each other.</p>",
        "id": 307609821,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667419821
    },
    {
        "content": "<p>Things are still evolving, but the new syntax looks like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen_guest_rust</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">import</span>: <span class=\"s\">\"interface.wit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 307609907,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667419859
    },
    {
        "content": "<p>Ah, also <code>export</code> is currently called <code>default</code> in this syntax, which is non-obvious.</p>",
        "id": 307610767,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667420181
    },
    {
        "content": "<p>seems you can't call the macro several times in the same file anymore (I want to import host functions and export guest functions)</p>",
        "id": 307610908,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667420247
    },
    {
        "content": "<p>but that's what worlds would be for I guess?</p>",
        "id": 307610941,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667420262
    },
    {
        "content": "<p>Yeah, at least in typical usage, you list all your imports and exports in a single macro invocation, and it generates unified bindings for all of them at once.</p>",
        "id": 307611575,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667420490
    },
    {
        "content": "<p>what's the syntax for multiple parameters to generate? just generate!({...}, {...})?</p>",
        "id": 307611677,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667420530
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen_guest_rust</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">import</span>: <span class=\"s\">\"red.wit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">import</span>: <span class=\"s\">\"green.wit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">import</span>: <span class=\"s\">\"blue.wit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 307611815,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667420586
    },
    {
        "content": "<p>example with import and export:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen_guest_rust</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">import</span>: <span class=\"s\">\"../exports/host.wit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">export</span>: <span class=\"s\">\"../exports/guest.wit\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">name</span>: <span class=\"s\">\"foo\"</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>seems to work, what did you mean with default?</p>",
        "id": 307612572,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667420865
    },
    {
        "content": "<p>Ah, possibly I'm behind the times here :-)</p>",
        "id": 307612913,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1667420980
    },
    {
        "content": "<p>thanks for your help, this looks promising :)</p>",
        "id": 307613558,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667421207
    },
    {
        "content": "<p>Update: export: takes the export name from the wit filename while default: uses the provided name as name for the export</p>",
        "id": 307614625,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667421668
    },
    {
        "content": "<p>so you apparently can have several imports, several exports and one default export</p>",
        "id": 307614688,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667421696
    },
    {
        "content": "<p>That's correct; the macro is migrating to a \"world\" view of generation, where what the component expects for its imports and exports is described as a single unit; so there's only one macro call for all the code generation. eventually this mechanism will allow the code generated to share type definitions (e.g. <code>a.wit</code> and <code>b.wit</code> make use of types coming from <code>c.wit</code>; the same generated types would appear in both <code>a</code> and <code>b</code> signatures)</p>",
        "id": 307615954,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422156
    },
    {
        "content": "<p>eventually the <code>generate!</code> macro will consume the world definition instead of having to specify imports and exports yourself, just the world the component targets</p>",
        "id": 307616164,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422254
    },
    {
        "content": "<p>oh dan said all this earlier (whoops <span aria-label=\"flushed\" class=\"emoji emoji-1f633\" role=\"img\" title=\"flushed\">:flushed:</span>) didn't scroll back</p>",
        "id": 307616515,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422429
    },
    {
        "content": "<p>regarding the \"default\" export, it's the interface which will be directly exported by the component in the end, so if you export <code>foo</code>, you get an instance export named <code>foo</code> with the component's <code>foo</code> implementation exported from that instance; if you \"default\" export <code>foo</code>, the functions of <code>foo</code> are exported directly instead of via an instance</p>",
        "id": 307616884,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422597
    },
    {
        "content": "<p>what does the export_foo! macro that is being generated do? (assuming name: \"foo\")</p>",
        "id": 307617100,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667422685
    },
    {
        "content": "<p>it exports functions from the resulting core wasm module (before it gets compotentized) that adhere to the component model's canonical ABI; those exports call your user code via the traits the given type implements</p>",
        "id": 307617225,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422747
    },
    {
        "content": "<p>it's a way of informing the bindings what code to call for exported functions</p>",
        "id": 307617279,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422776
    },
    {
        "content": "<p>so I need to impl foo::Foo for SomeStruct and export_foo!(SomeStruct) if I want those functions to be called? (guessing purely from \"the compiler said it would run and macro expand looks sensible)</p>",
        "id": 307617419,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667422828
    },
    {
        "content": "<p>that's right</p>",
        "id": 307617446,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422842
    },
    {
        "content": "<p><code>foo</code> is the name of the world, i believe, in this case</p>",
        "id": 307617495,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422863
    },
    {
        "content": "<p>as there's one export macro per <code>generate!</code> iirc</p>",
        "id": 307617546,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422888
    },
    {
        "content": "<p>yes it's the name provided to generate! which probably would be the world name</p>",
        "id": 307617548,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1667422888
    },
    {
        "content": "<p>so it exports all of the exports of the world</p>",
        "id": 307617598,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667422905
    },
    {
        "content": "<p>for what it's worth, the <code>cargo component</code> tooling renames it to simply <code>export!</code> as the \"world\" it uses is based off of things in your <code>Cargo.toml</code></p>",
        "id": 307618298,
        "sender_full_name": "Peter Huene",
        "timestamp": 1667423166
    }
]