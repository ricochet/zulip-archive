[
    {
        "content": "<p>I have a Rust guest lib compiling to <code>wasm32-unknown-unknown</code> and have written a wit world with its dependencies. I export the world in my lib with <code>export_foo!(Foo)</code> at the top level using bindings generated by <code>wit-bindgen guest rust</code>.</p>\n<p>One of the interfaces that I import needs to be used by a third-party dependency fairly deep in my dependency tree, so I'd prefer not to patch every crate along the chain to pass that dependency through function calls. I want to patch just the dependency that needs the import, but looking at the generated bindings some of the items seem like they will conflict at link time if I reference the bindings module both in the top-level in my lib and in this deep dependency. In particular this item:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[link_section = </span><span class=\"s\">\"component-type:foo\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">__WIT_BINDGEN_COMPONENT_TYPE</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So what I'd like is a way to generate just the imports of the bindings, which looks like it's fine to reference in multiple places in my dependency tree. It looks like this isn't possible in <code>wit-bindgen</code> at the moment, but should it be? Or is another workaround possible?</p>",
        "id": 324087784,
        "sender_full_name": "Alex Helfet",
        "timestamp": 1674835199
    },
    {
        "content": "<p>I ended up generating a different world for the third-party dependency and patching it to use an imported component without exporting anything. Here's the code if anyone is interested: <a href=\"https://github.com/fluffysquirrels/pass-rs\">https://github.com/fluffysquirrels/pass-rs</a> .</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fluffysquirrels/pass-rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/930d6fcc4829c0c099670a61ee5bc2b8a0fd125e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633339613965646239623635353238633834393936613836613862333138346661316562623334343535613965346262306365666131303732613635323232662f666c75666679737175697272656c732f706173732d7273)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fluffysquirrels/pass-rs\" title=\"GitHub - fluffysquirrels/pass-rs: A password manager like `pass` implemented in Rust\">GitHub - fluffysquirrels/pass-rs: A password manager like `pass` implemented in Rust</a></div><div class=\"message_embed_description\">A password manager like `pass` implemented in Rust - GitHub - fluffysquirrels/pass-rs: A password manager like `pass` implemented in Rust</div></div></div>",
        "id": 324339436,
        "sender_full_name": "Alex Helfet",
        "timestamp": 1674933327
    }
]