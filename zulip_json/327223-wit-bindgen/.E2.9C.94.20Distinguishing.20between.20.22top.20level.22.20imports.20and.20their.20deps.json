[
    {
        "content": "<p>Hey all, thanks for all the amazing progress on the ecosystem lately -- it's been moving at <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span> pace.</p>\n<p>I've got a quite uninteresting question about <code>wit-bindgen</code> and in particular <code>wit-parser</code>'s <code>Resolve</code>.</p>\n<p>Is it possible to distinguish between interfaces from top level world imports and their deps?</p>\n<p>Here's an example -- if I have the following world:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">kv</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">keyvalue</span><span class=\"o\">/</span><span class=\"n\">readwrite</span>\n\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The long and short of it is that I'd like to be able to tell that which specific interface (in this case <code>readwrite</code>) was the \"top level\" import of the world.</p>\n<p>When I use <code>wit-parser</code>, I get a hierarchy that looks like this (excuse the crude listing):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">====&gt;</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">kv</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pkg</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"o\">====&gt;</span><span class=\"w\"> </span><span class=\"n\">interface</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"poll\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PKG</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">====&gt;</span><span class=\"w\"> </span><span class=\"n\">interface</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"streams\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PKG</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">====&gt;</span><span class=\"w\"> </span><span class=\"n\">interface</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"wasi-cloud-error\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PKG</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">====&gt;</span><span class=\"w\"> </span><span class=\"n\">interface</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"types\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PKG</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">})</span>\n<span class=\"o\">====&gt;</span><span class=\"w\"> </span><span class=\"n\">interface</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"readwrite\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">PKG</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"p\">})</span>\n</code></pre></div>\n<p><code>types</code> and <code>wasi-cloud-error</code> get pulled in because of the <code>use</code> in <code>wasi:keyvalue/readwrite</code>,  but they show up (as far as I can tell) just as if they were also <code>import</code>ed.</p>\n<p>AFAIK this is how the resolution of a <code>use</code>is <em>supposed</em> to  work (there's no bug, per say) -- but I was wondering if there's something I'm missing that could tell me the difference between something that was <em>explicitly</em> directly <code>import</code>ed, and something brought in via a <code>use</code>. </p>\n<p>The \"ideal\" answer would be to be able to tell that <code>readwrite</code> was the interface actually <code>import</code>ed at the world level, and the rest came in as a result of resolution.</p>\n<p>How I can think to do it now is to go through the imports at that layer and try to piece together  which types come from which interfaces</p>",
        "id": 391802488,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695085666
    },
    {
        "content": "<p>Here's the in-code <code>wit-parser</code> struct for the <code>Interface</code> for <code>readwrite</code> in the example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">name</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"readwrite\"</span><span class=\"p\">),</span>\n<span class=\"w\">  </span><span class=\"n\">docs</span>: <span class=\"nc\">Docs</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">contents</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"A keyvalue interface that provides simple read and write operations.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"n\">types</span>: <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s\">\"bucket\"</span>: <span class=\"nc\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"s\">\"error\"</span>: <span class=\"nc\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">29</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"s\">\"incoming-value\"</span>: <span class=\"nc\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">30</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"s\">\"key\"</span>: <span class=\"nc\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"s\">\"outgoing-value\"</span>: <span class=\"nc\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">32</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">},</span>\n<span class=\"w\">  </span><span class=\"n\">functions</span>: <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s\">\"get\"</span>: <span class=\"nc\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">docs</span>: <span class=\"nc\">Docs</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">contents</span>: <span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"s\">\"Get the value associated with the key in the bucket. It returns a incoming-value</span><span class=\"se\">\\n</span><span class=\"s\">that can be consumed to get the value.</span><span class=\"se\">\\n\\n</span><span class=\"s\">If the key does not exist in the bucket, it returns an error.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">},</span>\n<span class=\"w\">      </span><span class=\"n\">name</span>: <span class=\"s\">\"get\"</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">kind</span>: <span class=\"nc\">Freestanding</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">params</span>: <span class=\"p\">[(</span><span class=\"s\">\"bucket\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"p\">})),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s\">\"key\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">31</span><span class=\"w\"> </span><span class=\"p\">}))],</span>\n<span class=\"w\">      </span><span class=\"n\">results</span>: <span class=\"nc\">Anon</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"p\">(</span><span class=\"n\">Id</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">idx</span>: <span class=\"mi\">33</span><span class=\"w\"> </span><span class=\"p\">}))</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"s\">\"set\"</span>: <span class=\"nc\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"s\">\"delete\"</span>: <span class=\"nc\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"s\">\"exists\"</span>: <span class=\"nc\">Function</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>From what I can tell there's no way to know that <code>\"bucket\"</code> inside <code>readwrite</code> came in via the <code>use</code> below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">readwrite</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">bucket</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">incoming</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">outgoing</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">get</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">bucket</span>: <span class=\"nc\">bucket</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"nc\">key</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">incoming</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n\n<span class=\"w\">        </span><span class=\"o\">....</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 391803269,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695086022
    },
    {
        "content": "<p>I believe the <code>TypeDef</code> for the type should have a <code>owner</code> field (<a href=\"https://docs.rs/wit-parser/latest/wit_parser/struct.TypeDef.html#structfield.owner\">https://docs.rs/wit-parser/latest/wit_parser/struct.TypeDef.html#structfield.owner</a>)</p>",
        "id": 391829003,
        "sender_full_name": "Peter Huene",
        "timestamp": 1695099661
    },
    {
        "content": "<p>so you'd look up the type in the types arena on the <code>Resolve</code></p>",
        "id": 391829032,
        "sender_full_name": "Peter Huene",
        "timestamp": 1695099678
    },
    {
        "content": "<p>Thanks for the hint <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> , will poke around and see what I can find!</p>",
        "id": 391913778,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695130427
    },
    {
        "content": "<p>Ahh so that's not <em>quite</em> what I want -- I'm actually more concerned with the <em>interfaces</em>, not the types basically I'd like to know that <code>kv</code> imported <code>readwrite</code>. </p>\n<p>It's unclear to me at least if/how knowing that <code>Bucket</code> came from <code>types</code> would help me figure that out...</p>\n<p>It's like <code>World</code> should have a <code>imports</code> and a <code>resolved</code> member -- attempting to resolve the <code>readwrite</code> import would then lead to <code>WorldItem</code>s being added to <code>resolved</code> (not <code>imports</code> directly), so in the end <code>types</code> would never end up in <code>imports</code>.</p>\n<p>I'm not sure if what I'm asking for is desirable for any other use case but mine though.</p>",
        "id": 391917985,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695131669
    },
    {
        "content": "<p>I assume the same thing would happen with <code>exports</code> -- if an <code>export</code> included some <code>use</code>, the pulled in interfaces would end up under <code>World#exports</code> (rather than some <code>resolved</code> member if it existed)</p>",
        "id": 391918396,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695131802
    },
    {
        "content": "<p>Currently there's not actually a way to do what you want to do, only listing written-down imports/exports. The motivation behind this is sort of twofold. One is that there's no way to express this in the component model, e.g. in the binary format it's just required that everything is there and there's no concept of what was written down. Two is that code generators and processors of WIT in theory shouldn't distinguish whether it was written down or not since all the transitive imports are regardless required.</p>\n<p>Not to say this couldn't be at least partially implemented. It'd be easy enough to add a flag that's true when parsing and false when added via resolve. That wouldn't be preserved through the binary format though.</p>\n<p>Could you expand a bit on what your intended use case for this is?</p>",
        "id": 391925383,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695133817
    },
    {
        "content": "<blockquote>\n<p>Currently there's not actually a way to do what you want to do, only listing written-down imports/exports. The motivation behind this is sort of twofold. One is that there's no way to express this in the component model, e.g. in the binary format it's just required that everything is there and there's no concept of what was written down. Two is that code generators and processors of WIT in theory shouldn't distinguish whether it was written down or not since all the transitive imports are regardless required.</p>\n</blockquote>\n<p>This makes sense, thanks for explaining and confirming -- I get the decision made this way/the motivation. </p>\n<blockquote>\n<p>Not to say this couldn't be at least partially implemented. It'd be easy enough to add a flag that's true when parsing and false when added via resolve. That wouldn't be preserved through the binary format though.</p>\n</blockquote>\n<p>Yeah this would be great, being able to know when something was resolved in would be nice... but I also maybe don't think it's worth the trouble.</p>\n<blockquote>\n<p>Could you expand a bit on what your intended use case for this is?</p>\n</blockquote>\n<p>What I'm working on is some code that turns each top level interface into an asynchronous remote interaction ( a receive or send of a message) -- so taking something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">get</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">bucket</span>: <span class=\"nc\">bucket</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">key</span>: <span class=\"nc\">key</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">incoming</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n</code></pre></div>\n<p>And turning it into </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Serialize, Deserialize)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">GetInvocation</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">bucket</span>: <span class=\"nc\">Bucket</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"n\">key</span>: <span class=\"nc\">Key</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[async_trait]</span>\n<span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">RemoteReadWrite</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">....</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">invocation</span>: <span class=\"nc\">GetInvocation</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The idea is to go from top level world specification automatically to an object that is trained to perform the contract remotely.</p>\n<p>To avoid getting too into the weeds, this is functionality that's meant to enhance the way wasmCloud does providers (we take messages that come in off of a NATS lattice).</p>\n<p>The good news is that this is working at this point (it works with simple contracts), but when I pulled in <code>wasi:keyvalue</code> (which is a bit more complex than one might make), the automation started doing the above for things that <em>don't make sense</em> (like functions that manipulate <code>incoming-value</code>, etc)</p>",
        "id": 391933353,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695135887
    },
    {
        "content": "<p>So my current solution which is a bit janky is to have the user <em>specify</em> which interfaces they want this sort of... extra codegen to happen for (because in the general case, there's no way to know exactly which interfaces <em>should</em> be exposed, for sure, even if I was able to pin down the \"top level\" ones).</p>\n<p>If you're curious, what my franken-bindgen invocation ends up looking like is something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmcloud_provider_wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"c1\">// Impl Struct</span>\n<span class=\"w\">    </span><span class=\"n\">KeyvalueProvider</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// WIT Namespace &amp; package</span>\n<span class=\"w\">    </span><span class=\"s\">\"wasi:keyvalue\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// Interfaces that should be exposed on the lattice</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">     </span><span class=\"s\">\"wasi:keyvalue/readwrite\"</span><span class=\"p\">,</span>\n<span class=\"w\">     </span><span class=\"s\">\"wasi:keyvalue/atomic\"</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"s\">\"test-bindgen-kv-memory\"</span>\n<span class=\"p\">);</span>\n</code></pre></div>",
        "id": 391933779,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695136023
    },
    {
        "content": "<p>ok thanks for the extra context!</p>\n<p>For this though I think that the solution you've got already might be the way to go</p>",
        "id": 391959553,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143895
    },
    {
        "content": "<p>looking a bit further into the future, with registry integration many interfaces are in theory going to be distributed as WIT-encoded-as-wasm which loses the \"top level\" concept since that's not representable in the binary format</p>",
        "id": 391959623,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143923
    },
    {
        "content": "<p>so in that sense while it would be possible to implement what I mentioned above today once you transitioned to registry-based tooling it would no longer work</p>",
        "id": 391959670,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143945
    },
    {
        "content": "<p>Thank you for taking the time to look at it <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, hopefully the description wasn't too hard to follow. </p>\n<blockquote>\n<p>looking a bit further into the future, with registry integration many interfaces are in theory going to be distributed as WIT-encoded-as-wasm which loses the \"top level\" concept since that's not representable in the binary format</p>\n</blockquote>\n<p>Yeah the binary format not representing it is certainly gives me pause for the other solution idea...</p>\n<blockquote>\n<p>so in that sense while it would be possible to implement what I mentioned above today once you transitioned to registry-based tooling it would no longer work</p>\n</blockquote>\n<p>Yeah this makes sense -- I got the code compiling yesterday (diff timezone) so I've proved out the specification method now, it looks like the way to go that should have less breakage in the future.</p>\n<p>Thanks so much for the help</p>",
        "id": 392018052,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1695170662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> has marked this topic as resolved.</p>",
        "id": 392018059,
        "sender_full_name": "Notification Bot",
        "timestamp": 1695170666
    }
]