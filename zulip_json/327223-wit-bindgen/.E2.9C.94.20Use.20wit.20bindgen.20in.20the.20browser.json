[
    {
        "content": "<p>Hello, is it possible to use wit bindgen in the browser? This is actually two questions:</p>\n<p>1) Is it possible to load and use WASM components that use the component model in the browser?<br>\n2) Is it possible to load and use \"normal\" WASM modules that use wit bidgen (but aren't using the component model) in the browser AND is it possible to load and use these modules (again, not using component model, only wit bindgen) in wasmtime and get wit-bindings?</p>\n<p>The reason I ask is that I have a video game in Rust and I want to load mods using WASM modules. I also want to run the game on the web.</p>\n<p>If I use the component model, then it's probably not going to work on the web, since I didn't find any way to get a WASM component to load and run on the web.</p>\n<p>If, on the other hand, I use just wit bindgen without the component model, then I do not know how to load and tun the module from wasmtime, since the only tutorials on how to use wit bindgen I could find use the component model when used with wasmtime host.</p>",
        "id": 370442916,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687961021
    },
    {
        "content": "<blockquote>\n<p>Is it possible to load and use WASM components that use the component model in the browser?</p>\n</blockquote>\n<p>For this you'll want to check out the <a href=\"https://github.com/bytecodealliance/jco\"><code>jco</code> project</a></p>\n<blockquote>\n<p>Is it possible to load and use \"normal\" WASM modules that use wit bidgen (but aren't using the component model) in the browser AND is it possible to load and use these modules (again, not using component model, only wit bindgen) in wasmtime and get wit-bindings?</p>\n</blockquote>\n<p>Sort of and sort of not. Today this is technically possible as native compilers are outtping core wasm modules which are then wrapped up into components. There's, strictly speaking, nothing stopping you from taking that core wasm module and running it in a browser and then alternatively also taking the component and running it in Wasmtime. </p>\n<p>I say \"sort of not\" though because this isn't really a supported workflow and will likely have a lot of gotchas and surprises and isn't how things are supposed to work. Instead a component is intended to be the \"source of truth\" and tooling like <code>jco</code> enables running that in a browser.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b2a4e198f075aa4e3889665a8351852b0b01e08b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333732643664383065393462383663343861653537303965313865626462396436343662623234326361383665383365386431373833643664636266353733302f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</div></div></div>",
        "id": 370474999,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687966162
    },
    {
        "content": "<p>Ok, I guess I will not be able to avoid the component model. But I am having trouble with making jco work. I have a wasm component that I created from a wasm module that was using wit bindgen using this command:</p>\n<p>wasm-tools component new plugin_rust.wasm -o component.wasm</p>\n<p>This component.wasm file is working correctly in wasmtime runtime. But when I pass it to jco, like this:</p>\n<p>jco transpile component.wasm -o out-dir</p>\n<p>I get an error:</p>\n<p>(jco transpile) ComponentError: failed to extract interface information from component</p>\n<p>Caused by:<br>\n    unknown component version: 0xd (at offset 0x0)</p>\n<p>Any help?</p>",
        "id": 370516533,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687973466
    },
    {
        "content": "<p>This likely means that <code>jco</code> is still on version <code>0xc</code> and doesn't know about the component model version you produced.</p>",
        "id": 370517400,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687973631
    },
    {
        "content": "<p>Although, that appears to have landed.</p>",
        "id": 370517650,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687973677
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/jco/pull/86\">https://github.com/bytecodealliance/jco/pull/86</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/86\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/93e760431c0e6c90f221d6f06845245a847f1bd0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386639343064323732636563623738303733343632393431353865353334373837636564623235303239303136356435643562636665663730666330383133652f62797465636f6465616c6c69616e63652f6a636f2f70756c6c2f3836)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/86\" title=\"deps: latest toolchain by guybedford 路 Pull Request #86 路 bytecodealliance/jco\">deps: latest toolchain by guybedford 路 Pull Request #86 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">Upgrades to 0xd of the component model featuring the latest WIT syntax.\nSome careful handling was required to adapt the new namespacing model. Specifically along the lines as outlined for the ESM i...</div></div></div>",
        "id": 370517656,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687973678
    },
    {
        "content": "<p>Are you using the latest version of jco?</p>",
        "id": 370517889,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687973721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477605\">Kyle Brown</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Use.20wit.20bindgen.20in.20the.20browser/near/370517889\">said</a>:</p>\n<blockquote>\n<p>Are you using the latest version of jco?</p>\n</blockquote>\n<p>I have version 0.7.0. How do i upgrade to a newer version?</p>",
        "id": 370524801,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687975073
    },
    {
        "content": "<p>Never mind, I got the new version, but now I have another error. My wit file looks like this:</p>\n<p>package example:protocol</p>\n<p>world my-world {<br>\n  import print: func(msg: string)</p>\n<p>export run: func()<br>\n}</p>\n<p>And the first line of the generated component.js file is trying to import the print function:</p>\n<p>import import print from 'print';</p>\n<p>And it results in an error:</p>\n<p>Uncaught SyntaxError: import is an invalid identifier</p>\n<p>Can I generate proper TS bindings that would require me to provide the imported \"print\" function?</p>\n<p>The current exported TS bindings only have the exported run function:</p>\n<p>export function run(): void;</p>",
        "id": 370527980,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687975700
    },
    {
        "content": "<p>It may be the case that jco hasn't upgraded from 0xc to 0xd, although <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> would know for sure</p>",
        "id": 370528807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687975857
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal</span> if you want to provide the \"print\" function you can use the <code>--instantiation</code> flag option</p>",
        "id": 370528908,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1687975876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> the PR I link above says that it has</p>",
        "id": 370532550,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687976480
    },
    {
        "content": "<p>oh oops sorry missed that</p>",
        "id": 370532963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687976550
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553681\">Guy Bedford</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Use.20wit.20bindgen.20in.20the.20browser/near/370528908\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal</span> if you want to provide the \"print\" function you can use the <code>--instantiation</code> flag option</p>\n</blockquote>\n<p>Ok, that mostly works, but there are few problems.</p>\n<p>First, the \"print\" function is named \"default\" for some reason in the generated bindings:</p>\n<p>export interface ImportObject {<br>\n  default(msg: string): void,<br>\n}</p>\n<p>Second, there is a syntax error when getting this imported function, in the generated \"component.js\" file:</p>\n<p>const const print = imports.default;</p>\n<p>Removing the extra \"const\" makes it work correctly. I'm assuming I should create a bug issue on jco's github?</p>",
        "id": 370537027,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1687977189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal</span> that would be great if you could post a bug, I'll look into it further</p>",
        "id": 370539801,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1687977765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal</span> I've released <a href=\"mailto:jco@0.9.3\">jco@0.9.3</a> which should fix your issues</p>",
        "id": 370560326,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1687982224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553681\">Guy Bedford</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/Use.20wit.20bindgen.20in.20the.20browser/near/370560326\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal</span> I've released <a href=\"mailto:jco@0.9.3\">jco@0.9.3</a> which should fix your issues</p>\n</blockquote>\n<p>Yes, the \"double const\" issue is resolved, many thanks. The \"import\" function is still named \"default\" in the import object, but changing that would be a breaking change.</p>",
        "id": 370731319,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1688036311
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal</span> has marked this topic as resolved.</p>",
        "id": 371394851,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688199262
    },
    {
        "content": "<p>Hello <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span>, I think there are more problems when you have more than one import. I have created a new issue on github: <a href=\"https://github.com/bytecodealliance/jco/issues/103\">https://github.com/bytecodealliance/jco/issues/103</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/issues/103\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b0ffa3ba52c7fd133bdddd0d9bec2a43e80526c0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383961656632653735383161343164393666303964656232313039643033623032366432663834336639356533333534306266613534663631623630363336612f62797465636f6465616c6c69616e63652f6a636f2f6973737565732f313033)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/issues/103\" title=\"Broken import bindings in generated component 路 Issue #103 路 bytecodealliance/jco\">Broken import bindings in generated component 路 Issue #103 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">When wrapping a component with jco transpile so that it can run on the web, the generated import functions are wrong, and the generated ts bindings are also wrong. See this repo at the jco-wrong-im...</div></div></div>",
        "id": 371742818,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1688308406
    }
]