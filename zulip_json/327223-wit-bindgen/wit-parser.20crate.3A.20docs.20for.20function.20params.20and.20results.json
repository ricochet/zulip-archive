[
    {
        "content": "<p>I’m working on the Go bindings for wit-bindgen (wit-bindgen-go), which consumes the JSON output of <code>wasm-tools comonent wit -j ...</code>.</p>\n<p>I noticed that it’s convention to document function parameters (and sometimes results), but those docs aren’t represented in the params data structure in the wit-parser crate.</p>\n<p>Was this intentional? Would folks be interested in a PR that adds docs to function params in the wit-parser crate?</p>",
        "id": 418344789,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706299886
    },
    {
        "content": "<p>For example, <code>wasi:io/streams.input-stream#read</code>: <a href=\"https://github.com/WebAssembly/wasi-io/blob/324be895965666805cb1c622ed4f071b9e3cbd65/wit/streams.wit#L59C1-L63C1\">https://github.com/WebAssembly/wasi-io/blob/324be895965666805cb1c622ed4f071b9e3cbd65/wit/streams.wit#L59C1-L63C1</a></p>",
        "id": 418344928,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706299933
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"n\">read</span>: <span class=\"nc\">func</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"sd\">/// The maximum number of bytes to read</span>\n<span class=\"w\">            </span><span class=\"n\">len</span>: <span class=\"kt\">u64</span>\n        <span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 418344943,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706299943
    },
    {
        "content": "<p>I’d like to be able to faithfully represent the docs on the <code>len</code> param in the generated Go code.</p>",
        "id": 418344997,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706299978
    },
    {
        "content": "<p>Seems reasonable to me, though we've also discussed putting argument docs in some structured docstring annotation</p>",
        "id": 418352734,
        "sender_full_name": "Lann Martin",
        "timestamp": 1706304016
    },
    {
        "content": "<p>Here’s an example I generated by hand from the WIT: <a href=\"https://github.com/ydnar/wasm-tools-go/blob/ca95a32c1bd7a53e64cddf6ca262f85ccfece45c/wasi/filesystem/types/types.wit.go#L583-L592\">https://github.com/ydnar/wasm-tools-go/blob/ca95a32c1bd7a53e64cddf6ca262f85ccfece45c/wasi/filesystem/types/types.wit.go#L583-L592</a></p>",
        "id": 418353642,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706304541
    },
    {
        "content": "<p>The WIT docs conventions map reasonably well to Go doc conventions, including Markdown footer links</p>",
        "id": 418353691,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1706304572
    },
    {
        "content": "<p>I like the idea of using these kinds of inline docs for arguments. As Lann said, we've <a href=\"https://github.com/WebAssembly/component-model/issues/256\">discussed</a> using structured doc comments for argument documentation, so we'd have to figure out if/how to make the combination work. I.e., do we want to make them mutually exclusive? If not, does one shadow the other? Or do they get concatenated?</p>\n<p>None of this seems prohibitive at all, of course!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/256\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/01c7ad832b29a6efe296726fbb327544f3e10eeb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666439613833653332326563616361333938646264396535636462643734323234353064646530363537343862393765323232333837633533306135653562322f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f323536)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/256\" title=\"wit: Reserve doc-comment &quot;annotation&quot; syntax · Issue #256 · WebAssembly/component-model\">wit: Reserve doc-comment \"annotation\" syntax · Issue #256 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">In order to allow for future strict parsing of doc comment annotations, we could reserve a pattern for annotations now (without necessarily defining any valid annotations). One common approach is @...</div></div></div>",
        "id": 418416137,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1706360471
    }
]