[
    {
        "content": "<p>re: <a href=\"#narrow/stream/206238-general/topic/WIT.20.28bindgen.29.20versioning\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/WIT.20.28bindgen.29.20versioning</a></p>\n<p>Is the wit directory structure still serving us well? It seems like most of the \"real\" definitions end up needing to be in <code>deps/</code> for reuse anyway which makes the naming a bit confusing.</p>\n<p>Brainstorming: I wonder if it would make sense to change the file layout rules in this backward compatible way: any directory under the \"wit root\" that contains one or more <code>.wit</code>s is a package. That would allow for a new simpler convention of e.g. <code>wit/&lt;package&gt;/</code> or <code>wit/&lt;package&gt;@&lt;version&gt;/</code> (for repos that store multiple versions)</p>",
        "id": 424689660,
        "sender_full_name": "Lann Martin",
        "timestamp": 1709568187
    },
    {
        "content": "<p>I suppose some things would still require a default package but maybe as an incremental improvement that could be pushed out to an error closer to code that actually depends on it.</p>",
        "id": 424691256,
        "sender_full_name": "Lann Martin",
        "timestamp": 1709568586
    },
    {
        "content": "<p>I think that'd be reasonable yeah, I think it's also reasonable to parse <code>deps</code> even without a \"root\" package. The hope was that this <code>deps</code> format wouldn't last very long as a better tool to manage things would manifest, but that hasn't happened , so I think it'd be reasonable to work on making the file format better</p>",
        "id": 424699254,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709570548
    },
    {
        "content": "<p>(and as part of making it better it'd probably also be good to document it somewhere...)</p>",
        "id": 424699298,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709570564
    },
    {
        "content": "<p>I'll also note <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1433\">https://github.com/bytecodealliance/wasm-tools/issues/1433</a> here which points out <a href=\"https://github.com/WebAssembly/WASI/tree/main/preview2\">https://github.com/WebAssembly/WASI/tree/main/preview2</a> can't be parsed natively by <code>wit-parser</code> right now</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1433\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c31ad2e707ed7c50fa026f59808be367eabe8dfc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373436353533633233373733643762346334356563366437653565353563633739386463306139663039323565323064316132616164646663636332366538312f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31343333)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1433\" title=\"wit-parser: parse multiple packages and automatically resolve · Issue #1433 · bytecodealliance/wasm-tools\">wit-parser: parse multiple packages and automatically resolve · Issue #1433 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">The Resolve type doesn't seem to have a suitable function to resolve such a folder: https://github.com/WebAssembly/WASI/tree/main/preview2. Directly parsing the directory of a single package will r...</div></div></div>",
        "id": 424707286,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709572851
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1461\">https://github.com/bytecodealliance/wasm-tools/issues/1461</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1461\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/94d2727c2ef6bbc170807f17bd01ab326ad29a1a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623531623537363932373034653464636466643132343738376662346134313335313733326136346663333034333935636439376430376630313863306537632f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31343631)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1461\" title=\"Relax WIT directory structure · Issue #1461 · bytecodealliance/wasm-tools\">Relax WIT directory structure · Issue #1461 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Zulip context: https://bytecodealliance.zulipchat.com/#narrow/stream/327223-wit-bindgen/topic/WIT.20directory.20structure Currently, most WIT tooling expects a specific directory layout, typically ...</div></div></div>",
        "id": 427777743,
        "sender_full_name": "Lann Martin",
        "timestamp": 1710869603
    },
    {
        "content": "<p>I'm running into an issue with this as well. I had all of my wit files (mostly one interface per file) in a single <code>wit/</code> directory all listed as the same package <code>foo:runtime</code>. To clean this up I moved most of the interfaces to a <code>wit/deps/events/*.wit</code> and gave them their own package name <code>foo:events</code>. But then trying to reference those interfaces from interfaces that are still in the original package results in an error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">merge</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">my</span><span class=\"o\">/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">project</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"err\">`</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">package</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span>\n<span class=\"w\">            </span><span class=\"o\">-</span>-&gt; <span class=\"o\">/</span><span class=\"n\">my</span><span class=\"o\">/</span><span class=\"n\">workspace</span><span class=\"o\">/</span><span class=\"n\">project</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">events</span><span class=\"p\">.</span><span class=\"n\">wit</span>:<span class=\"mi\">6</span>:<span class=\"mi\">7</span>\n<span class=\"w\">             </span><span class=\"o\">|</span>\n<span class=\"w\">           </span><span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">events</span><span class=\"o\">/</span><span class=\"n\">some</span><span class=\"o\">-</span><span class=\"n\">event</span><span class=\"p\">.{</span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">event</span><span class=\"o\">-</span><span class=\"n\">container</span><span class=\"p\">};</span>\n</code></pre></div>\n<p>I'm wondering is the package in <code>wit/deps/</code> needs a <code>world</code> or something else for it to be valid and findable by a package under <code>wit/</code>?</p>",
        "id": 433440247,
        "sender_full_name": "Landon James",
        "timestamp": 1713241811
    },
    {
        "content": "<p>I think what you are describing ought to work. Are you able to post the files publicly somewhere?</p>",
        "id": 433514796,
        "sender_full_name": "Lann Martin",
        "timestamp": 1713271690
    },
    {
        "content": "<p>Are you using <code>cargo-component</code> by any chance? If so you'll need to specify where the dependencies live as <code>cargo-component</code> doesn't follow the <code>deps</code> directory convention.</p>",
        "id": 433519754,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1713273237
    },
    {
        "content": "<p>Ahh yes I am using <code>cargo-component</code> and that is good to know! Does that mean I can also get around having to nest them in <code>wit/deps/</code> at all? I was only going for that because it seemed like the only way to make it work, but it would be much nicer if I could nest them in <code>wit/somethingDescriptive/</code>.</p>",
        "id": 433555074,
        "sender_full_name": "Landon James",
        "timestamp": 1713282669
    },
    {
        "content": "<p>for <code>cargo-component</code>, dependencies can be located at any path (or from a component registry such as <a href=\"https://wa.dev\">https://wa.dev</a>). use <code>cargo component add --target --path &lt;path-to-dir&gt; foo:events</code> to add a target dependency to your <code>Cargo.toml</code></p>",
        "id": 433555621,
        "sender_full_name": "Peter Huene",
        "timestamp": 1713282813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> this is actually a good point to ask - is there a reason that cargo-component doesn't conform to the deps convention? I know it's not specified, but it does seem to be something that tooling is converging on (including <a href=\"https://github.com/bytecodealliance/cargo-component/pull/265\">this PR</a> for the <code>wit</code> CLI)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/pull/265\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/904bd036da092fad139510a5b1f197846d899ec5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643139306234643236363233323736306561383862323762646463316362386566363337313030646366376262393266306539663863636564643139343863332f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f70756c6c2f323635)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/pull/265\" title=\"Implement `wit pull` by lann · Pull Request #265 · bytecodealliance/cargo-component\">Implement `wit pull` by lann · Pull Request #265 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">This implements a wit pull subcommand which can be used to update local e.g. wit/deps/*.wit from a registry.\n$ wit pull wasi:io --create-dirs\n   Resolving package wasi:io\n  Downloaded release wasi:...</div></div></div>",
        "id": 433570752,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1713287468
    },
    {
        "content": "<p>The <code>deps</code> convention is internal to <code>wit-parser</code> and doesn't allow <code>cargo-component</code> to merge in dependencies that may not be on the file system (such as wit packages downloaded from the registry). <code>cargo-component</code> also doesn't like the \"use whatever is on disk\" approach given the otherwise explicitness of dependencies specified in <code>Cargo.toml</code></p>",
        "id": 433571087,
        "sender_full_name": "Peter Huene",
        "timestamp": 1713287585
    },
    {
        "content": "<p>in a \"real\" ecosystem, there wouldn't be a \"deps\" folder, just perhaps a location to vendor registry packages; i view the <code>deps</code> folder as something to get the tooling off the ground, not where the ecosystem should be trending towards</p>",
        "id": 433571320,
        "sender_full_name": "Peter Huene",
        "timestamp": 1713287664
    },
    {
        "content": "<p>honestly, the fact that we're not yet at the point where a registry is central to our tooling experience is one of the greatest frustrations i've had in this space and definitely a contributor to me NOPEing out</p>",
        "id": 433571981,
        "sender_full_name": "Peter Huene",
        "timestamp": 1713287946
    }
]