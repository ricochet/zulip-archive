[
    {
        "content": "<p>Hi all, I'd like to actually <em>extend</em> the functionality performed by <code>wit-bindgen</code> -- i.e. manipulating the output of <code>wit-bindgen</code>.</p>\n<p>Since Rust does not have eagerly-evaluated macros (at the end-user level anyway), this means that to actually get this to work (as far as I was able to try, a tt-muncher macro does not solve this), I need to actually get the <code>TokenStream</code>s from <code>generate</code>.  </p>\n<p>Rust also prevents you from using the function that represents proc macro functionality, so it seems like a another crate &amp; re-export is necessary (I've seen some tricks here like <code>use crate::*</code> but they didn't work for me)</p>\n<p>Would a patch to make the actual token transformation code and relevant structs like <code>Config</code> public be reasonable? I'd like to contribute that if so</p>",
        "id": 381632206,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1691106925
    },
    {
        "content": "<p>As an example for a concrete use-case -- injecting derived traits is a good one (<code>::serde::Deserialize</code>/<code>::serde::Serialize</code>) -- it becomes possible to write a macro that does <code>wit-bindgen</code> (without re-implementing parsing opts/doing wit-bindgen) <em>and</em> arbitrary extra functionality.</p>\n<p>Another use case which is similar is writing an attribute macro that works <em>with</em> <code>wit-bindgen</code> -- I haven't tried this yet but I imagine something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[my_wit_bindgen_customization(SomeArg)]</span>\n<span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"some-package\"</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>In that way you could imagine generalizing lots of kinds of modifications/layers on top of the code generated by <code>wit-bindgen</code></p>",
        "id": 381632414,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1691107056
    },
    {
        "content": "<p>I think it would be reasonable to make more things public, yeah, although I also think it's fine to add more features to the macro itself to avoid a second wrapper macro. Either way works</p>",
        "id": 381708744,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1691134137
    },
    {
        "content": "<p>It is indeed possible to manipulate the outgoing (and even the incoming) <code>TokenStream</code> of the macro, but it's kind of wonky. I am actually doing just that <a href=\"https://github.com/kajacx/wasm-bridge/blob/master/crates/wasm-bridge-macros/src/lib.rs#L36\">here</a>, but it requires \"forking\" the entire <code>wasmtime-component-macro</code> crate.</p>\n<p>The best solution would be to split the wasmtime macro crate into two, so this would become slightly less painful to do.</p>\n<p>Another solution that I am using is defining custom types and mappings between these custom types and the wit types. This has the advantage that I can derive any traits I want and implement any additional functions I want as well.</p>\n<p>Adding \"custom wrappers\" to the bindgen macro is possible, but it would just make the macro more complicated, it would make the code using the macro more complicated, and it would most likely not cover all use cases anyway. I think time would be better spent on supporting more guest languages.</p>",
        "id": 381717852,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1691135643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/extending.20wit-bindgen.20functionality/near/381708744\">said</a>:</p>\n<blockquote>\n<p>I think it would be reasonable to make more things public, yeah, although I also think it's fine to add more features to the macro itself to avoid a second wrapper macro. Either way works</p>\n</blockquote>\n<p>Thanks for the feedback Alex -- so I think in a general case like <code>Serialize</code>/<code>Deserialize</code> it makes sense to upstream (kind of like the <code>ownership</code> option, I dug around there a bunch trying to see if something like this existed), but there's definitely a case for stuff that shouldn't be upstreamed either (project-specific stuff)...</p>\n<p>I'd like to pursue both so I'll try and get an official issue &amp; PR up.</p>",
        "id": 381858228,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1691157327
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"621586\">Karel Hrkal (kajacx)</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/extending.20wit-bindgen.20functionality/near/381717852\">said</a>:</p>\n<blockquote>\n<p>It is indeed possible to manipulate the outgoing (and even the incoming) <code>TokenStream</code> of the macro, but it's kind of wonky. I am actually doing just that <a href=\"https://github.com/kajacx/wasm-bridge/blob/master/crates/wasm-bridge-macros/src/lib.rs#L36\">here</a>, but it requires \"forking\" the entire <code>wasmtime-component-macro</code> crate.</p>\n<p>The best solution would be to split the wasmtime macro crate into two, so this would become slightly less painful to do.</p>\n<p>Another solution that I am using is defining custom types and mappings between these custom types and the wit types. This has the advantage that I can derive any traits I want and implement any additional functions I want as well.</p>\n<p>Adding \"custom wrappers\" to the bindgen macro is possible, but it would just make the macro more complicated, it would make the code using the macro more complicated, and it would most likely not cover all use cases anyway. I think time would be better spent on supporting more guest languages.</p>\n</blockquote>\n<p>Thanks for the input! I agree with the approach here.</p>\n<p>Concretely I was figuring that the simplest way would be to have some sort of <code>wit-bindgen-rust-macro-utils</code> (<code>-core</code>? <code>-common</code>?) and a re-export of the token-manipulating functions in there (and some other stuff) under <code>wit-bindgen-rust-macro</code>. </p>\n<p>Defining custom types is definitely the easiest way (i.e. you could use serde's remote deriving features), but that's a slightly separate goal -- I really want to maintain how hands-off <code>wit-bindgen</code> is for the user, and minimize the differences &amp; code the user has to write.</p>\n<p>I agree that adding custom wrappers to the macro definitely makes it more complicated, but I'd like for it to <em>be an option at least</em> -- don't think it would take much work to make it possible, and after that we'll see what the community comes up with. I'm also comfortable making the issue + PR myself as to not burden the team -- much more important work to be done (and my hack is working for me anyway).</p>",
        "id": 381860040,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1691157602
    },
    {
        "content": "<p>Just a quick update on this, I made an issue here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6881\">https://github.com/bytecodealliance/wasmtime/issues/6881</a></p>\n<p>If anyone has some input that would be a great place to put it -- including if you think it isn't necessary/it's fine to do the sort of partial vendoring.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6881\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5eed7352a69d68d5d97ead97eca574f9fa336197\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383530653566386133636465616235616665356630636266643130623535363031346334383133343138646665646238373735646439646337323230323762662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36383831)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6881\" title=\"Externally reusable proc macro exports transformation 路 Issue #6881 路 bytecodealliance/wasmtime\">Externally reusable proc macro exports transformation 路 Issue #6881 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Feature I'd like to be able to reuse and modify the output of macros like wit-bindgen::generate and wasmtime::component::bindgen Benefit Users will be able to build on the code generated by *bindge...</div></div></div>",
        "id": 386612877,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1692712053
    }
]