[
    {
        "content": "<p>Is this valid wit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">oint</span><span class=\"o\">-</span><span class=\"n\">arg</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">s32</span><span class=\"o\">&gt;</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>I.e. an option without a <code>type</code> ?</p>",
        "id": 412858577,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705277602
    },
    {
        "content": "<p>If so, for the codgen, would it be typical to create an implicit <code>type</code> for it?</p>",
        "id": 412858811,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705277723
    },
    {
        "content": "<p>I think it is, at least the c codegen does it</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">typedef</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kt\">bool</span><span class=\"w\"> </span><span class=\"n\">is_some</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">int32_t</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"p\">;</span>\n<span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">my_world_option_s32_t</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 412858979,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705277809
    },
    {
        "content": "<p>I guess I'm just curious why the c and go codegen have logic for anonymous types but not the others.</p>",
        "id": 412880020,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705289318
    },
    {
        "content": "<p><a href=\"#narrow/stream/327223-wit-bindgen/topic/options.20without.20types.3F/near/412880020\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"327223\" href=\"/#narrow/stream/327223-wit-bindgen/topic/Relation.20between.20imported.20and.20exported.20types\">#wit-bindgen &gt; Relation between imported and exported types</a> by <span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span>.</p>",
        "id": 412880049,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705289350
    },
    {
        "content": "<p><code>option</code> is one of the <a href=\"https://component-model.bytecodealliance.org/design/wit.html#built-in-types\">built-in WIT types</a> and can be used without attaching a name. As for bindings for statically typed languages:</p>\n<ul>\n<li>Some languages have option type built-in.</li>\n<li>Some languages with the concept of \"nullability\" in type system, and can express shallow options.</li>\n<li>Some languages with generics/templates can define option once, and reuse it for all WIT options.</li>\n<li>Otherwise, you can create a new option type for each payload type, like was shown in your C example.</li>\n</ul>",
        "id": 412896529,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1705302122
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 412948407,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705322295
    }
]