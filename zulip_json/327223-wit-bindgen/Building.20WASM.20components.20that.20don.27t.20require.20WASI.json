[
    {
        "content": "<p>Hi, this is somewhat related to <a href=\"#narrow/stream/327223-wit-bindgen/topic/Possible.20linker.20error.20with.20wit-bindgen\">my previous thread</a>, but feels different enough to warrant it's own thread.</p>\n<p>I'm trying to build a WASM component that exposes a very simple interface:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">myapp</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"o\">-</span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">func</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">string</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"o\">-</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">thing</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"nc\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm building the WASM binary with Rust + <code>wasm-tools component new ... --adapt wasi_snapshot_preview1.wasm</code>.</p>\n<p>The issue is, this then creates a component that expects the WASI functions to be present, which they are not in my Host. Currently, I'm getting errors when I try to load the module saying things like <code>drop-input-stream has the wrong type, expected func found nothing</code>. My understanding is that this is a function defined in WASI, and this error message is basically saying:</p>\n<ul>\n<li>this WASM component expects the host to provide a function called <code>drop-input-stream</code></li>\n<li>the host doesn't provide such a function</li>\n</ul>\n<p>Is there any way to build a WASM component in such a way that it doesn't try to link against WASI functions?</p>",
        "id": 357175471,
        "sender_full_name": "Cameron M",
        "timestamp": 1683700383
    },
    {
        "content": "<p>I was working on this issue with Cameron, and it does look odd.<br>\nSpecifically the WASI standard says \"The WebAssembly System Interface is not a monolithic standard system interface, but is instead a modular collection of standardized APIs. None of the APIs are required to be implemented to have a compliant runtime. Instead, host environments can choose which APIs make sense for their use cases.\"</p>\n<p>So, it seems strange that without explicitly defining particular WASI interfaces to be used that the wasm binary is being forced to use stdin/stdout, which in turn pulls in the streaming and fs API's.  In addition to environment.</p>\n<p>A wit dump of the resulting file shows this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">streams</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>\n\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>\n\n<span class=\"w\">  </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"nb\">drop</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">write</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n\n<span class=\"w\">  </span><span class=\"n\">blocking</span><span class=\"o\">-</span><span class=\"n\">write</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buf</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"kt\">u64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stream</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n\n<span class=\"w\">  </span><span class=\"nb\">drop</span><span class=\"o\">-</span><span class=\"n\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">filesystem</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">streams</span><span class=\"p\">.{</span><span class=\"n\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">descriptor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u32</span>\n\n<span class=\"w\">  </span><span class=\"k\">type</span> <span class=\"nc\">filesize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">u64</span>\n\n<span class=\"w\">  </span><span class=\"k\">enum</span> <span class=\"nc\">descriptor</span><span class=\"o\">-</span><span class=\"k\">type</span> <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">unknown</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">block</span><span class=\"o\">-</span><span class=\"n\">device</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">character</span><span class=\"o\">-</span><span class=\"n\">device</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">directory</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">fifo</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">symbolic</span><span class=\"o\">-</span><span class=\"n\">link</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">regular</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">socket</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"k\">enum</span> <span class=\"nc\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">access</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">would</span><span class=\"o\">-</span><span class=\"n\">block</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">already</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">bad</span><span class=\"o\">-</span><span class=\"n\">descriptor</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">busy</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">deadlock</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">quota</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">exist</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">too</span><span class=\"o\">-</span><span class=\"n\">large</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">illegal</span><span class=\"o\">-</span><span class=\"n\">byte</span><span class=\"o\">-</span><span class=\"n\">sequence</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">progress</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">interrupted</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">invalid</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">io</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">too</span><span class=\"o\">-</span><span class=\"n\">many</span><span class=\"o\">-</span><span class=\"n\">links</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">message</span><span class=\"o\">-</span><span class=\"n\">size</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">too</span><span class=\"o\">-</span><span class=\"n\">long</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">device</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">entry</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">lock</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">insufficient</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">insufficient</span><span class=\"o\">-</span><span class=\"n\">space</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">directory</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">empty</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">recoverable</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">unsupported</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">tty</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">no</span><span class=\"o\">-</span><span class=\"n\">such</span><span class=\"o\">-</span><span class=\"n\">device</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">overflow</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">not</span><span class=\"o\">-</span><span class=\"n\">permitted</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">pipe</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">read</span><span class=\"o\">-</span><span class=\"n\">only</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">invalid</span><span class=\"o\">-</span><span class=\"n\">seek</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">text</span><span class=\"o\">-</span><span class=\"n\">file</span><span class=\"o\">-</span><span class=\"n\">busy</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">cross</span><span class=\"o\">-</span><span class=\"n\">device</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">write</span><span class=\"o\">-</span><span class=\"n\">via</span><span class=\"o\">-</span><span class=\"n\">stream</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span>: <span class=\"nc\">filesize</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span>\n\n<span class=\"w\">  </span><span class=\"n\">append</span><span class=\"o\">-</span><span class=\"n\">via</span><span class=\"o\">-</span><span class=\"n\">stream</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">descriptor</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span>\n\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"k\">type</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">descriptor</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">descriptor</span><span class=\"o\">-</span><span class=\"k\">type</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"o\">&gt;</span>\n\n<span class=\"w\">  </span><span class=\"nb\">drop</span><span class=\"o\">-</span><span class=\"n\">descriptor</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">this</span>: <span class=\"nc\">descriptor</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">environment</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">preopens</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">streams</span><span class=\"p\">.{</span><span class=\"n\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">filesystem</span><span class=\"p\">.{</span><span class=\"n\">descriptor</span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">stdio</span><span class=\"o\">-</span><span class=\"n\">preopens</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">stdin</span>: <span class=\"nc\">input</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">stdout</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">stderr</span>: <span class=\"nc\">output</span><span class=\"o\">-</span><span class=\"n\">stream</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">stdio</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">stdio</span><span class=\"o\">-</span><span class=\"n\">preopens</span>\n\n<span class=\"w\">  </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">directories</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">descriptor</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">exit</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">status</span>: <span class=\"nc\">result</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">streams</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">streams</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">filesystem</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">filesystem</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">environment</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">environment</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">preopens</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">preopens</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">exit</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">exit</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"o\">-</span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">func</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">string</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"kt\">u64</span><span class=\"p\">,</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"o\">-</span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">thing</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">data</span>: <span class=\"nc\">foo</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 357188058,
        "sender_full_name": "Steven Johnson",
        "timestamp": 1683704030
    },
    {
        "content": "<p>i believe the issue is with the adapt parameter that you are passing. if you are specifying a WASI adapter, it will expect the default interfaces to be available</p>",
        "id": 357206288,
        "sender_full_name": "Eduardo Rodrigues",
        "timestamp": 1683707990
    },
    {
        "content": "<p>In the other thread, I was recommended to check out <a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a> and add it on the host side. My understanding is that this provides those interfaces on the host side, but I'm not certain. Do you know of any resources/examples that show how to do this?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f49e293356239d4d2f6fd02f2f9c0b64a09be0dc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366334626633323938663039623831646436613961613137663437363833326638613865326339646134646234363435353731646161336236353237633037612f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping\" title=\"GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.\">GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 func...</div></div></div>",
        "id": 357206811,
        "sender_full_name": "Cameron M",
        "timestamp": 1683708103
    },
    {
        "content": "<p>sorry I forgot to answer yesterday, I think your component needs the whole wasi spec because you adapt the whole snapshot_preview1 polyfill, but I'm not entirely sure if that's correct. My own code is still using preview2, but looking at <a href=\"https://github.com/bytecodealliance/componentize-js/tree/main/example\">https://github.com/bytecodealliance/componentize-js/tree/main/example</a> it seems to not be needed anymore.<br>\nthat componentize-js example comes with a rust host that can run the example component, I used it as a reference to get my host to work</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-js/tree/main/example\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1f8db264737724584499e79ad1d2d0327febf066\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626131386462613336663464336338616336326131363063343262356339646134353833393564656565386566613133383039383332633736343839656664372f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d6a73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-js/tree/main/example\" title=\"componentize-js/example at main · bytecodealliance/componentize-js\">componentize-js/example at main · bytecodealliance/componentize-js</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-js development by creating an account on GitHub.</div></div></div>",
        "id": 357257743,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1683718725
    },
    {
        "content": "<p>I think it boils down to \"you need to use wasmtime from git or wait for the next release\" since the wasi host is now in wasmtime but there was no release since</p>",
        "id": 357262340,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1683719664
    },
    {
        "content": "<p>This sounds related to this topic so will post here, sorry if I am hijacking.  If you don't <code>--adapt ....</code>  Are you still required to import the wasi interface?  It seems so because otherwise <code>wasm-tools component new</code> gives an error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">PS</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">rustimpl</span><span class=\"err\">\\</span><span class=\"n\">rustimpl</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">rustimpl</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">encode</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">module</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"err\">`</span>\n<span class=\"n\">PS</span><span class=\"w\"> </span><span class=\"n\">C</span>:<span class=\"err\">\\</span><span class=\"n\">github</span><span class=\"err\">\\</span><span class=\"n\">rustimpl</span><span class=\"err\">\\</span><span class=\"n\">rustimpl</span><span class=\"o\">&gt;</span>\n</code></pre></div>",
        "id": 359292092,
        "sender_full_name": "Scott Waye",
        "timestamp": 1684372806
    },
    {
        "content": "<p>My wit</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">floats</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">float32</span><span class=\"o\">-</span><span class=\"n\">param</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">float32</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">float64</span><span class=\"o\">-</span><span class=\"n\">param</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">float64</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">float32</span><span class=\"o\">-</span><span class=\"n\">result</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">float32</span>\n<span class=\"w\">  </span><span class=\"n\">float64</span><span class=\"o\">-</span><span class=\"n\">result</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">float64</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">imports</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">floats</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">exports</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">floats</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 359292433,
        "sender_full_name": "Scott Waye",
        "timestamp": 1684373044
    },
    {
        "content": "<p>I have the same question. <a href=\"#narrow/stream/206238-general/topic/.E2.9C.94.20Unable.20to.20bind.20vanilla.20Rust.20host.2Fguess.20component/near/358751939\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/.E2.9C.94.20Unable.20to.20bind.20vanilla.20Rust.20host.2Fguess.20component/near/358751939</a></p>\n<p>If there is a way to not import the wasi interface, I would also like to know.</p>",
        "id": 359306556,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1684384785
    },
    {
        "content": "<p>I guess I need to build with a different target, i.e. not <code>wasm32-wasi</code>, if there is one.  Alternatively, how do you import that interface in rust.  Is it in the wit, or the rust?  Sorry I'm .net really, just trying the tools for rust&lt;-&gt;c#</p>",
        "id": 359386403,
        "sender_full_name": "Scott Waye",
        "timestamp": 1684414033
    },
    {
        "content": "<p>No worries, Scott. I am in the same boat <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> </p>\n<p>I don't know if there is another target but, I used the adapter (look at the tags/releases) <a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a> to build the component and then, on the Host side, not the guest (module), I imported the wasi-common crate from the same repo:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//github.com/bytecodealliance/preview2-prototyping wasi-common</span>\n</code></pre></div>\n<p>And then loaded the module via:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_backtrace_details</span><span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">WasmBacktraceDetails</span>::<span class=\"n\">Enable</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">info_</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Loading Component on Engine\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">bytes</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">info_</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"Creating Linker\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>::<span class=\"n\">streams</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>::<span class=\"n\">filesystem</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>::<span class=\"n\">environment</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>::<span class=\"n\">preopens</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>::<span class=\"n\">exit</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/07b097e7fb24b6f6e095bcdbb28ea5569069a8c3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366532626562623961653132313235373037616262306135616239316638626430626564386463313566343232336666303132623762633161643535636439372f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping\" title=\"GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.\">GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 func...</div></div></div>",
        "id": 359477623,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1684437151
    },
    {
        "content": "<p>I used this as an example <a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/5be99d645c177198b9f5e4d76561669796f7b379/host/tests/reactor.rs#L57-L75\">https://github.com/bytecodealliance/preview2-prototyping/blob/5be99d645c177198b9f5e4d76561669796f7b379/host/tests/reactor.rs#L57-L75</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/5be99d645c177198b9f5e4d76561669796f7b379/host/tests/reactor.rs#L57-L75\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/07b097e7fb24b6f6e095bcdbb28ea5569069a8c3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366532626562623961653132313235373037616262306135616239316638626430626564386463313566343232336666303132623762633161643535636439372f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping/blob/5be99d645c177198b9f5e4d76561669796f7b379/host/tests/reactor.rs#L57-L75\" title=\"preview2-prototyping/reactor.rs at 5be99d645c177198b9f5e4d76561669796f7b379 · bytecodealliance/preview2-prototyping\">preview2-prototyping/reactor.rs at 5be99d645c177198b9f5e4d76561669796f7b379 · bytecodealliance/preview2-prototyping</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - preview2-prototyping/reactor.rs at 5be99d645c177198b9f5e4d76561669796f7b379 · bytecodealliance/preview2-prototyping</div></div></div>",
        "id": 359477770,
        "sender_full_name": "Salim Afiune Maya",
        "timestamp": 1684437208
    },
    {
        "content": "<p>The <code>wasm32-unknown-unknown</code> target will forego the WASI imports (so <code>cargo build --target wasm32-unknown-unknown</code> or <code>cargo component build --target wasm32-unknown-unknown</code> if using <code>cargo-component</code>).</p>\n<p>That said, it's still best to target WASI from your components and enable preview2 in the host (which is just about to land into Wasmtime itself with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6391\">this PR</a>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/6391\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bd8a312fd6ef547d3b6b66e92d57c17f1a8f872\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336436323462376264383532613465356239646630653333613637373231306338666538343962316432626461663830353163303533643035653965333334332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f36333931)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6391\" title=\"Land preview2-prototyping's Wasi Preview 2 implementation into wasmtime by pchickey · Pull Request #6391 · bytecodealliance/wasmtime\">Land preview2-prototyping's Wasi Preview 2 implementation into wasmtime by pchickey · Pull Request #6391 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Third task in #6370\nThis PR lands preview2-prototyping's Wasi Preview 2 implementation inside wasmtime_wasi::preview2.\npython3 ~/Downloads/git-filter-repo.py --path host --path wasi-common --path t...</div></div></div>",
        "id": 359488988,
        "sender_full_name": "Peter Huene",
        "timestamp": 1684441160
    },
    {
        "content": "<p>Thanks for the target and the link.  Look forward to trying preview2</p>",
        "id": 359492413,
        "sender_full_name": "Scott Waye",
        "timestamp": 1684442282
    },
    {
        "content": "<p>What's the latest way to do this linker? I see the <code>preview2-prototyping</code> repo is deprecating... is the replacement ready to use as of now? I'm still getting the <code>drop-input-stream</code> error no matter what I do. Would love if someone could share an end to end hello world from component to host!</p>",
        "id": 364423144,
        "sender_full_name": "DougAnderson444 | PeerPiper.io",
        "timestamp": 1686187274
    },
    {
        "content": "<p><a href=\"#narrow/stream/219900-wasi/topic/preview2.20in.20wasmtime.2010.2E0.20release/near/364067517\">https://bytecodealliance.zulipchat.com/#narrow/stream/219900-wasi/topic/preview2.20in.20wasmtime.2010.2E0.20release/near/364067517</a></p>\n<p>I think what Pat said means wasmtime repo from git should work right now but wasmtime 10.0 that comes out in 1.5 weeks will likely also not work out of the box</p>",
        "id": 364536350,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1686225551
    }
]