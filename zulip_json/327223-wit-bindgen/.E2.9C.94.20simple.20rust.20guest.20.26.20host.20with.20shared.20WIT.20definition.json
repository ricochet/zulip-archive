[
    {
        "content": "<p>Hi,</p>\n<p>I'm struggling with making a very basic guest &amp; host setup with a shared WIT definition work smoothly.<br>\nI've based my code mostly on the content of <a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/tests\">https://github.com/bytecodealliance/wit-bindgen/tree/main/tests</a>, specifically the \"smoke\" test.<br>\neverything compiles successfully, however during runtime of the host I get the following error message, when using <code>cargo run</code> for the host:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Error: import `wasi-stderr` has the wrong type\n\nCaused by:\n    0: instance export `print` has the wrong type\n    1: expected func found nothing\n</code></pre></div>\n<p>Hopefully, someone would be able to point out what I'm doing wrong.</p>\n<p><strong>WIT (smoke.wit):</strong></p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>interface imports {\n  thunk: func()\n}\n\ndefault world smoke {\n  import imports: self.imports\n\n  export thunk: func()\n}\n</code></pre></div>\n<p><strong>guest Cargo.toml:</strong></p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"guest\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wit-bindgen\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"cdylib\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<p><strong>guest lib.rs:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"smoke\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Exports</span><span class=\"p\">;</span>\n\n<span class=\"n\">export_smoke</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Exports</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Smoke</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Exports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">thunk</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">imports</span>::<span class=\"n\">thunk</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>i'm building the guest component using the following commands:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>cargo build --target wasm-wasi32\n\nwasm-tools component new &lt;...&gt;/guest.wasm -o &lt;...&gt;/guest.wasm\" --adapt &lt;...&gt;/wasi_snapshot_preview1.wasm\"\n</code></pre></div>\n<p><strong>host Cargo.toml:</strong></p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"host\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">'https://github.com/bytecodealliance/wasmtime'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">'component-model'</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wit-bindgen\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1.0.69\"</span>\n</code></pre></div>\n<p><strong>host main.rs:</strong></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">error</span>::<span class=\"n\">Error</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"p\">{</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n\n<span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"smoke\"</span><span class=\"p\">);</span>\n\n<span class=\"cp\">#[derive(Default)]</span>\n<span class=\"k\">struct</span> <span class=\"nc\">Wasi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">T</span><span class=\"p\">);</span>\n\n<span class=\"cp\">#[derive(Default)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyImports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">hit</span>: <span class=\"kt\">bool</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">imports</span>::<span class=\"n\">Imports</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyImports</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">thunk</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">hit</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">true</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"in the host\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"&lt;...&gt;/guest.wasm\"</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">run</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">wasm</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">linker</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Smoke</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">x</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"o\">|</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Smoke</span>::<span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">run_test</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">U</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">wasm</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">add_to_linker</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">Wasi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">instantiate</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Wasi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">Wasi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">test</span>: <span class=\"nc\">fn</span><span class=\"p\">(</span><span class=\"n\">U</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">Wasi</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span>\n<span class=\"k\">where</span>\n<span class=\"w\">    </span><span class=\"n\">T</span>: <span class=\"nb\">Default</span><span class=\"p\">,</span>\n<span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">cache_config_load_default</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_backtrace_details</span><span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">WasmBacktraceDetails</span>::<span class=\"n\">Enable</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Wasi</span>::<span class=\"n\">default</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exports</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"testing {wasm:?}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">exports</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">run_test</span><span class=\"p\">(</span><span class=\"n\">exports</span>: <span class=\"nc\">Smoke</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">store</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"k\">crate</span>::<span class=\"n\">Wasi</span><span class=\"o\">&lt;</span><span class=\"n\">MyImports</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">exports</span><span class=\"p\">.</span><span class=\"n\">call_thunk</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">().</span><span class=\"mf\">0.</span><span class=\"n\">hit</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/tests\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3094375e3b4966431a146d5eabc67127850f0f24\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613061626163396635653630656338313738656364336636306531303932316261303930626238633138653538653839353761393739333636643065613064362f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/tree/main/tests\" title=\"wit-bindgen/tests at main · bytecodealliance/wit-bindgen\">wit-bindgen/tests at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/tests at main · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 328340799,
        "sender_full_name": "yonil",
        "timestamp": 1676583382
    },
    {
        "content": "<p>The error is saying that \"wasi-stderr\" has the wrong type. </p>\n<p>When you compile your guest program to <code>wasm32-wasi</code> targeted Wasm component, the component will import some WASI functions. To see what functions are imported, you can do <code>wasm-tools component wit guest.wasm</code> where <code>guest.wasm</code> is the output of <code>wasm-tools component new</code>. </p>\n<p>The command will print a WIT file that has all the WASi imports and you are able to see what's the function signature in <code>wasi-stderr</code> interface. My guess is that it looks like </p>\n<div class=\"codehilite\" data-code-language=\"Go\"><pre><span></span><code><span class=\"kd\">interface</span><span class=\"w\"> </span><span class=\"nx\">wasi</span><span class=\"o\">-</span><span class=\"nx\">stderr</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"nx\">print</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kd\">func</span><span class=\"p\">(</span><span class=\"nx\">message</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Once you were able to verify that, the missing part is in your host implementation. Your host should meet the requirements of the guest by implementing all the <code>imports</code> of the WIT file. Specifically you need to implement functions in <code>wasi-stderr</code>in the host and added them to the <code>Linker</code>.</p>",
        "id": 328356506,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1676590190
    },
    {
        "content": "<p>This is all is too much, I'd recommend using <code>WasiCtxBuilder</code> from wasi-common in <a href=\"https://github.com/bytecodealliance/preview2-prototyping/tree/main/wasi-common\">preview2-prototyping</a> repo.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping/tree/main/wasi-common\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3628ab460b823e99679bd6d16027dcf4c529e88e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643161633031393231313262633765313932613837393963373235303062623937646432303733356363656463336561313036366635356538353133396233332f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping/tree/main/wasi-common\" title=\"preview2-prototyping/wasi-common at main · bytecodealliance/preview2-prototyping\">preview2-prototyping/wasi-common at main · bytecodealliance/preview2-prototyping</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - preview2-prototyping/wasi-common at main · bytecodealliance/preview2-prototyping</div></div></div>",
        "id": 328356694,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1676590253
    },
    {
        "content": "<p>Here is an example repo of how you can use preview2-prototyping <code>host</code> implementation <a href=\"https://github.com/Mossaka/wit-bindgen-go-template/blob/main/Cargo.toml#L16-L23\">https://github.com/Mossaka/wit-bindgen-go-template/blob/main/Cargo.toml#L16-L23</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Mossaka/wit-bindgen-go-template/blob/main/Cargo.toml#L16-L23\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/788cc2b25246917ec453c351134a978d4d474c48\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653136363664393337656634623436666265616537333232323461373335656230316132353638366531306131333234666561343936333636623532393033352f4d6f7373616b612f7769742d62696e6467656e2d676f2d74656d706c617465)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Mossaka/wit-bindgen-go-template/blob/main/Cargo.toml#L16-L23\" title=\"wit-bindgen-go-template/Cargo.toml at main · Mossaka/wit-bindgen-go-template\">wit-bindgen-go-template/Cargo.toml at main · Mossaka/wit-bindgen-go-template</a></div><div class=\"message_embed_description\">This template will help you start writing a wasm component in TinyGo / Go! - wit-bindgen-go-template/Cargo.toml at main · Mossaka/wit-bindgen-go-template</div></div></div>",
        "id": 328356865,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1676590326
    },
    {
        "content": "<p>Thank you very much <span class=\"user-mention\" data-user-id=\"487764\">@Mossaka (Joe)</span> , these references have helped resolve my issue.</p>",
        "id": 328360375,
        "sender_full_name": "yonil",
        "timestamp": 1676592150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"487764\">Mossaka (Joe)</span> has marked this topic as resolved.</p>",
        "id": 328362137,
        "sender_full_name": "Notification Bot",
        "timestamp": 1676593059
    }
]