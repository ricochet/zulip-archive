[
    {
        "content": "<p>This is a question related to implementing a Component Model bindings generator (specially wit-bindgen-go):</p>\n<p>Let’s say you have an interface that defines a resource type “fd” and a world that both imports <em>and</em> exports that interface, and a second exported interface “utils” that contains functions that accept an fd argument.</p>\n<p>Which fd type does utils actually use? Is the CM spec ambiguous or is there a heuristic? Should the choice be represented in the wit-parser Resolve struct?</p>",
        "id": 433052266,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713019065
    },
    {
        "content": "<p>For imported functions, this is easy—use the imported fd type.</p>",
        "id": 433052512,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713019262
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639636\">Randy Reddig</span> has marked this topic as resolved.</p>",
        "id": 433060362,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713026257
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"639636\">Randy Reddig</span> has marked this topic as unresolved.</p>",
        "id": 433060366,
        "sender_full_name": "Notification Bot",
        "timestamp": 1713026261
    },
    {
        "content": "<p>What ends up happening here is a bit subtle and it's generally related to WIT conventions. The CM itself has no ambiguity, the problem arises when WIT is mapped back to the component model. To answer your question the cases are:</p>\n<ul>\n<li>If <code>utils</code> is imported, then it uses the imported <code>fd</code></li>\n<li>If <code>utils</code> is exported, and <code>fd</code> is not exported, then it uses an imported <code>fd</code> </li>\n<li>If <code>utils</code> is exported, and <code>fd</code> is exported, then it will use the exported <code>fd</code></li>\n</ul>",
        "id": 433061150,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713027122
    },
    {
        "content": "<p>there's also implicit insertion of interfaces to handle here too, for example <code>wasm-tools component wit ./my-wit</code> will show the \"elaborated\" version of a world. For example if you do <code>export utils;</code> that'll implicitly insert <code>import fd;</code>. If you have <code>export fd; export utils;</code>, however, then no implicit insertion happens and <code>utils</code> uses the exported <code>fd</code>.</p>",
        "id": 433061212,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713027183
    },
    {
        "content": "<p>Interesting, thanks. Is (or was) it the intention to allow WIT to express explicitly which <code>fd</code> to use?</p>",
        "id": 433061387,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713027372
    },
    {
        "content": "<p>Would it make sense for this logic to live in the <code>wit-parser</code> crate, so the <code>Resolve</code> structure can express whether a type is imported or exported?</p>",
        "id": 433061434,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713027429
    },
    {
        "content": "<p>Thinking about this a little more: if a component exports a type, but there is no exported <code>constructor</code> nor any exported functions that return that type, then is the type actually exported?</p>",
        "id": 433061728,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713027678
    },
    {
        "content": "<p>(I was down this rabbit hole thinking about structural types like <code>record</code> that might include an exported <code>resource</code>. Resolving those types would have a similar challenge, e.g. which <code>fd</code> to use.)</p>",
        "id": 433061953,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713027853
    },
    {
        "content": "<p>Yes the intention is to eventuall enable WIT to describe this all more explicitly as a sort of \"power user\" syntax, there's related discussion on <a href=\"https://github.com/WebAssembly/component-model/pull/308\">https://github.com/WebAssembly/component-model/pull/308</a> and I think one or two other locations too.</p>\n<blockquote>\n<p>Would it make sense for this logic to live in the wit-parser crate, so the Resolve structure can express whether a type is imported or exported?</p>\n</blockquote>\n<p>Definitely! In retrospect this is a major design flaw of wit-parser today. The interface <code>fd</code> is mistakenly represented as a single interface in <code>Resolve</code> when in fact it should be duplicated for when it's both imported-and-exported.</p>\n<blockquote>\n<p>if a component exports a type, but there is no exported <code>constructor</code> nor any exported functions that return that type, then is the type actually exported?</p>\n</blockquote>\n<p>I think this only comes up with <code>resource</code>s since all other types are \"nominal\" and can be constructed at any time. In such a situation as you describe the type isn't useful since no one can create it, but it's still an exported type and can participate in type-checking and such.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/pull/308\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3909533059c4e2e96788fe892a93bf5ac0a14897\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663236333139333635346264636262613937633433393938633265626237653736613537306134366461313032386561393934373235393036396232346635352f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f70756c6c2f333038)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/pull/308\" title=\"Split 'use' inside worlds into 'use import' and 'use export' by lukewagner · Pull Request #308 · WebAssembly/component-model\">Split 'use' inside worlds into 'use import' and 'use export' by lukewagner · Pull Request #308 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">This PR proposes to change how use works inside WIT worlds, based on some initial discussion in wit-bindgen/#822.\nCurrently, use can be used with the same syntax in both interfaces and worlds.  For...</div></div></div>",
        "id": 433062902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713028879
    },
    {
        "content": "<p>I was wondering if it would be possible to fix this discrepancy with resource types by making them duck-typed, and adding a new <code>canon</code> function that resolves a duck-typed <code>resource</code> to a locally-defined resource type.</p>",
        "id": 433064882,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713030370
    },
    {
        "content": "<p>While it might fix this particular issue, I believe that duck-typed resources would erode many guarantees you currently get with resources and perhaps create a lot of other conundrums, so I don't think it's quite so simple</p>",
        "id": 433064979,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713030471
    },
    {
        "content": "<p>I could be wrong though! That's probably best discussed in an issue</p>",
        "id": 433064991,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713030479
    },
    {
        "content": "<p>OK!</p>",
        "id": 433065039,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713030493
    },
    {
        "content": "<p>I’ve been thinking about duck-typed resources as a way to resolve the ambiguity between WIT/CM for <code>resource</code> types or any type that includes <code>resource</code></p>",
        "id": 433065060,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713030526
    },
    {
        "content": "<blockquote>\n<p>Definitely! In retrospect this is a major design flaw of wit-parser today. The interface <code>fd</code> is mistakenly represented as a single interface in <code>Resolve</code> when in fact it should be duplicated for when it's both imported-and-exported.</p>\n</blockquote>\n<p>Where would it make sense for the <code>wit-parser</code> crate to represent the imported vs exported attribute? At the type (and function) level, or at the <code>interface</code> level?</p>\n<p>It seems like this could be a backwards-compatible change to <code>wit-parser</code>, in the sense that it would potentially duplicate interfaces/types/functions, with an additional attribute to signal whether they’re imported or exported?</p>",
        "id": 433379676,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713212566
    },
    {
        "content": "<p>I think this would be best represented at the interface level right now since that's the unit of import/export, and yeah I agree it should largely be backwards-compatible and would end up probably deleting more code downstream of wit-parser than would need to be added to wit-parser</p>",
        "id": 433380363,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713212809
    },
    {
        "content": "<p>To simplify the carrying of state, could we also add the attribute to <code>TypeDef</code> and <code>Function</code>?</p>",
        "id": 433380984,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713213029
    },
    {
        "content": "<p>I think that'd be reasonable yeah</p>",
        "id": 433381340,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713213166
    },
    {
        "content": "<p>I can file an issue on <code>wasm-tools</code> repo describing this. That work?</p>",
        "id": 433381412,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713213201
    },
    {
        "content": "<p>I’d implement it, but I don’t feel confident enough in my Rust chops</p>",
        "id": 433381475,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713213228
    },
    {
        "content": "<p>mind opening an issue to start off? I've been meaning to track this for awhile</p>",
        "id": 433381761,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1713213327
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\">https://github.com/bytecodealliance/wasm-tools/issues/1497</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bc368fc1c27257acac084d66d4bf8d63cbbd825f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326663333334383439396433626465393665313565633130373364303066633931353238623461393834323965383131383864323865363533613933613266302f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31343937)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\" title=\"proposal: wit-parser: create distinct imported and exported TypeDefs, Functions, and Interfaces in a Resolve · Issue #1497 · bytecodealliance/wasm-tools\">proposal: wit-parser: create distinct imported and exported TypeDefs, Functions, and Interfaces in a Resolve · Issue #1497 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">We propose to move logic from wit-bindgen into the wit-parser crate that determines whether an interface, type, or function in a Resolve structure is either imported or exported, and label those st...</div></div></div>",
        "id": 433406665,
        "sender_full_name": "Randy Reddig",
        "timestamp": 1713223782
    },
    {
        "content": "<p>Circuling back to this issue:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"o\">-</span><span class=\"k\">use</span><span class=\"o\">-</span><span class=\"n\">from</span><span class=\"o\">-</span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">.{</span><span class=\"n\">fd</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">f</span>: <span class=\"nc\">fd</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>it seems strange to me taht the WIT parser resolve to import the entirety of interface <code>a</code> even though we only specify <code>a.{fd}</code>.</p>",
        "id": 438414852,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1715621899
    },
    {
        "content": "<p>In an actual component that exports <code>b</code> it should only import the parts of <code>a</code> it actually needs, but at the WIT layer (e.g. <code>Resolve</code>) there's no way to represent a partial interface so the only option is to have an import for the whole interface</p>",
        "id": 438415417,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622124
    },
    {
        "content": "<p>Thanks, that makes sense, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> . I'd like to stress the proposal that adds attribute to <code>TypeDef</code> and <code>Function</code> more. Imo, adding <code>direction</code> to <code>Interface</code> is suffice to differentiate what type to use in exported functions. Is there any particular reason for adding <code>direction</code> to Function and Types?</p>",
        "id": 438427114,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1715626462
    },
    {
        "content": "<p>Sorry I'm not sure I quite understand, can you clarify what you mean about <code>direction</code> and the \"adds attribute\" part?</p>",
        "id": 438427598,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715626652
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/327223-wit-bindgen/topic/When.20to.20use.20imported.20types.20versus.20exported.20types.3F/near/438427598\">said</a>:</p>\n<blockquote>\n<p>Sorry I'm not sure I quite understand, can you clarify what you mean about <code>direction</code> and the \"adds attribute\" part?</p>\n</blockquote>\n<p>Oh sorry, yes I can clarify. I was referring to <a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\">this issue</a> where it proposes to add an attribute to the <code>Interface</code>, <code>Function</code>, and <code>TypeDef</code> structs to indicate whether it is imported or exported. I assumed the name of that attribute to be <code>direction</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5e704ac210ce630fd0c9cb693b2660d43b0bb1ab/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353634623531353763323333323435663438333462653934336233626339303461666638393137343731626531343736363234646430653330346131343431322f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f6973737565732f31343937&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/issues/1497\" title=\"proposal: wit-parser: create distinct imported and exported TypeDefs, Functions, and Interfaces in a Resolve · Issue #1497 · bytecodealliance/wasm-tools\">proposal: wit-parser: create distinct imported and exported TypeDefs, Functions, and Interfaces in a Resolve · Issue #1497 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">We propose to move logic from wit-bindgen into the wit-parser crate that determines whether an interface, type, or function in a Resolve structure is either imported or exported, and label those st...</div></div></div>",
        "id": 438430953,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1715627938
    },
    {
        "content": "<p>ah ok yeah no definitely makes sense to add still!</p>",
        "id": 438432963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715628681
    }
]