[
    {
        "content": "<p>Hi, I'm using the latest <code>main</code> branch of <code>wit-bindgen</code> to try the new resource type. I created the wit file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">bar</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">record</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">y</span>: <span class=\"kt\">u32</span>\n  <span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">bar</span>: <span class=\"nc\">x</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But when I used <code>wit_bindgen::generate!</code> to generate the bindings, it gave the error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>export parameter required for `world` ...\n</code></pre></div>\n<p>The error does not happen on 0.9. Is there anything changed in the syntax? (I've checked the component-model proposal but didn't find changes related to this).</p>",
        "id": 380190430,
        "sender_full_name": "James",
        "timestamp": 1690779412
    },
    {
        "content": "<p><a href=\"#narrow/stream/223391-wasm/topic/wit-bindgen.20and.20wizer.20mapdir/near/378970179\">https://bytecodealliance.zulipchat.com/#narrow/stream/223391-wasm/topic/wit-bindgen.20and.20wizer.20mapdir/near/378970179</a></p>",
        "id": 380225790,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690789615
    },
    {
        "content": "<p>the bindgen macro has changed on main, you now have to specify the struct that will impl the trait in the macro call so that more boilerplate can be generated, this is needed for resources</p>",
        "id": 380226238,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690789709
    },
    {
        "content": "<p>but that message confused me too, \"export required\" could be more verbose to tell you that the bindgen macro call is missing info, not the wit file</p>",
        "id": 380227104,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690789874
    },
    {
        "content": "<p>Thanks for the info. So I think all the types exported must have a struct specified in the macro. But how does <code>wit-bindgen</code> decide which types/resources are exported?</p>\n<p>If I have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">bar</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">call</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"n\">types</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then <code>wit-bindgen</code> generates <code>callback</code> as a trait which I can implement. But<br>\nwhen I change it to</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">bar</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">call</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">plugin</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">callback</span><span class=\"p\">}</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"o\">-</span><span class=\"n\">types</span>\n\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"o\">-</span><span class=\"n\">callback</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">callback</span>: <span class=\"nc\">callback</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">func</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then <code>wit-bindgen</code> somehow assumes that <code>callback</code> is a type import from the host. Is this intended?</p>",
        "id": 380931119,
        "sender_full_name": "James",
        "timestamp": 1690961584
    }
]