[
    {
        "content": "<p>Heya; a common issue I've run into when using <code>cargo-component</code> is that there is no convenient way to pass flags to wasmtime. For example when building a <code>wasi:http/proxy</code>-based application, I want it to work with <code>wasmtime serve</code> rather than <code>wasmtime run</code>.</p>\n<p>Or when building a TCP-based application, I want it to be able to be able to open sockets or listen for connections. But right now there is no way to configure that.</p>\n<p>My intuition here is that we would want some kind of \"capabilities\" entry in <code>Cargo.toml</code> which explains which capabilities the runtime needs to provide. And wasmtime is able to expose that. But before I go and propose any specific design or do anything in that direction, I wanted to check whether this is something people had thought of before?</p>",
        "id": 467889701,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725548461
    },
    {
        "content": "<p>I've thought about it in the context of writing wasi http proxy components that could work on both Spin and <code>wasmtime serve</code>. Spin did its own thing here in large part because there is no standardized way to represent these capabilities.</p>",
        "id": 467890458,
        "sender_full_name": "Lann Martin",
        "timestamp": 1725548616
    },
    {
        "content": "<p>Not sure I follow here. Running the component is separate from building it, which is what cargo component does. The \"capabilities\" needed can be figured out from the world. But I figure I am missing something</p>",
        "id": 467921854,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1725555427
    },
    {
        "content": "<p>cargo component also runs it via e.g. <code>cargo component run</code>. Take for example <a href=\"https://docs.rs/wstd/latest/wstd/#examples\">this tcp example</a> - if you try to use that in your Rust project an run it with <code>cargo component run</code>, it will always error.</p>",
        "id": 467923320,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725555746
    },
    {
        "content": "<p>Ew...I just found out we have that and that it is ugly (example from the test below):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo_component</span><span class=\"p\">([</span><span class=\"s\">\"run\"</span><span class=\"p\">])</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"CARGO_TARGET_WASM32_WASIP1_RUNNER\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"s\">\"wasmtime --env APP_NAME=CargoComponent -C cache=no -W component-model -S preview2 -S cli\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I think I would prefer our own custom <code>run</code> command instead where we could embed wasmtime. It is pretty easy to figure out what you need to provide to the component by inspecting the world, so if <code>cargo component run</code> sees <code>wasi:http/incoming-handler</code> it could automatically serve for you. However, I still hesitate to add this functionality. I know that in practice it could be really nice, but you can then only support things that are available in wasmtime. That means no custom interfaces (which almost everyone does when they start doing anything for real with wasmCloud for example), and only support for interfaces that are in wasmtime. So that means no blobstore/messaging/etc until those land in wasmtime or we put them directly into cargo component</p>",
        "id": 467925751,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1725556267
    },
    {
        "content": "<p>Re: whether we should have this - from a Rust programmer's perspective having <code>cargo component</code> Just Work is pretty important for the overall user experience.</p>\n<p>Our goal should be for library authors to be able to treat WASI 0.2 as just another target to support - no different than macOS, Windows, or Linux. And that means having access to e.g. <code>cargo test</code> and <code>cargo run</code> that work without extra hassle.</p>",
        "id": 468188263,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725628814
    },
    {
        "content": "<p>That's mostly scoped around making sure <code>wasi:cli/command</code> Just Works out of the box.</p>",
        "id": 468188568,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725628903
    },
    {
        "content": "<p>I just think that many people will be using a lot more than wasi:cli and wasi:http so any story needs to support slotting in custom things</p>",
        "id": 468227925,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1725638876
    },
    {
        "content": "<p>I agree with the goal though</p>",
        "id": 468228086,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1725638901
    }
]