[
    {
        "content": "<p>Hey all, I'm using cargo component v0.15.0, and I can't seem to tell it to ignore the registry setting. My commands for a basic usage:</p>\n<ul>\n<li><code>wkg oci pull ghcr.io/webassembly/wasi/http:0.2.0</code></li>\n<li><code>wasm-tools component wit webassembly_wasi_http.wasm --out-dir wit</code></li>\n<li><code>cargo component new --proxy hello-wasi-http --lib -t wasi:http/proxy</code></li>\n</ul>",
        "id": 456889776,
        "sender_full_name": "Ralph",
        "timestamp": 1722959237
    },
    {
        "content": "<p>now, with the last command I receive the following:</p>",
        "id": 456889799,
        "sender_full_name": "Ralph",
        "timestamp": 1722959247
    },
    {
        "content": "<p><code>error: a default component registry has not been set</code></p>",
        "id": 456889858,
        "sender_full_name": "Ralph",
        "timestamp": 1722959267
    },
    {
        "content": "<p>the help doesn't really specify whether registry <em>means</em> the registry you'll pull from  (the future embedded usage of <code>wkg</code> for exmaple) or where I'm going to PUSH the resulting component. So I look in the repo (<a href=\"https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md\">https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md</a>) it says, \"The <code>registry</code> field is optional and defaults to <code>default</code> (see the <code>[package.metadata.component.registries]</code> table below).`</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e56bca898b5fda35eb5b60c3b5f45a4be1478cfb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666332363338336363383833353062626233326166666531353533326537633166343430666339356462653836306563666562623432616635393336366339622f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/blob/main/docs/design/registries.md\" title=\"cargo-component/docs/design/registries.md at main · bytecodealliance/cargo-component\">cargo-component/docs/design/registries.md at main · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - bytecodealliance/cargo-component</div></div></div>",
        "id": 456890660,
        "sender_full_name": "Ralph",
        "timestamp": 1722959460
    },
    {
        "content": "<p>there's an extensive discussion below, but if I'm going to specify <code>--registry</code> is this supposed to be pointing at <code>ghcr.io/webassembly/wasi/http:0.2.0</code> ????</p>",
        "id": 456890813,
        "sender_full_name": "Ralph",
        "timestamp": 1722959507
    },
    {
        "content": "<p>trying to tie the current implementation together with a straightforward workflow.</p>",
        "id": 456890918,
        "sender_full_name": "Ralph",
        "timestamp": 1722959529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> Yeah this is still a work in progress. We are close to getting done with adding pulling from a registry: <a href=\"https://github.com/bytecodealliance/cargo-component/pull/322\">https://github.com/bytecodealliance/cargo-component/pull/322</a></p>\n<p>There will still be some follow ups after that but we're getting there</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/pull/322\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/bf9079440900f3c19a66b1fcba5071ab87264e62/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306234323764303963666339316165653230383638323165396266353235353539343064303038653531613336386538353766653331393933653933303739322f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f70756c6c2f333232&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/pull/322\" title=\"feat(*)!: Uses wasm-pkg-client for loading dependencies by thomastaylor312 · Pull Request #322 · bytecodealliance/cargo-component\">feat(*)!: Uses wasm-pkg-client for loading dependencies by thomastaylor312 · Pull Request #322 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">This is a fairly large PR because this dependency is used everywhere. cargo component now uses the new wasm-pkg-tools toolchain to load deps, which means that both OCI and Warg are supported. This ...</div></div></div>",
        "id": 456932432,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1722971018
    },
    {
        "content": "<p>Our goal is to have a mirror setup from <a href=\"http://wasi.dev\">wasi.dev</a> pointing to <a href=\"http://ghcr.io/webassembly/wasi\">ghcr.io/webassembly/wasi</a> packages.</p>\n<p>While the OCI workflow is baking, you can set packages like: <a href=\"https://github.com/sunfishcode/hello-wasi-http/blob/main/Cargo.toml#L20-L27\">https://github.com/sunfishcode/hello-wasi-http/blob/main/Cargo.toml#L20-L27</a>. A while back it changed from using a wit dir to this syntax.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://wasi.dev\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a77cb0033d0be81de32b5ce14de4493c66910aa4/68747470733a2f2f776173692e6465762f696d672f646f63757361757275732d736f6369616c2d636172642e6a7067&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://wasi.dev\" title=\"Introduction | WASI.dev\">Introduction | WASI.dev</a></div><div class=\"message_embed_description\">The WebAssembly System Interface (WASI) is a group of standard API specifications for software compiled to the W3C WebAssembly (Wasm) standard. WASI is designed to provide a secure standard interface for applications that can be compiled to Wasm from any language, and that may run anywhere&mdash;from browsers to clouds to embedded devices.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/hello-wasi-http/blob/main/Cargo.toml#L20-L27\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/437fb4c68f9662978485e89d42b9ded26a6c0aa3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313832303534396366303264626462383139646566663466396134363862636562396136313633353739386233633232336266383237383364323161323834662f73756e66697368636f64652f68656c6c6f2d776173692d68747470&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/hello-wasi-http/blob/main/Cargo.toml#L20-L27\" title=\"hello-wasi-http/Cargo.toml at main · sunfishcode/hello-wasi-http\">hello-wasi-http/Cargo.toml at main · sunfishcode/hello-wasi-http</a></div><div class=\"message_embed_description\">Contribute to sunfishcode/hello-wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 456987891,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1722995424
    },
    {
        "content": "<p>OK, so I still have a problem and would love to walk it through with someone if they have ten minutes</p>",
        "id": 457060783,
        "sender_full_name": "Ralph",
        "timestamp": 1723022344
    },
    {
        "content": "<p>I do <code>cargo component new --lib --proxy hello-wasi-http</code> and that gets me a simple buildable version of hello but that is NOT wasi components yet.</p>",
        "id": 457060943,
        "sender_full_name": "Ralph",
        "timestamp": 1723022390
    },
    {
        "content": "<p>so I then download the oci package, and use wasm-tools to generate a directory that comes out like this, <em>flatter</em> than before and in Dan's example: <a href=\"https://github.com/squillace/ralph-messed-up/tree/main/wit\">https://github.com/squillace/ralph-messed-up/tree/main/wit</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/squillace/ralph-messed-up/tree/main/wit\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/77bd53298f25cfd07c738b69396f69eb225d62c4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643963646137666236353865363833346435663432346161353431366336323438643036643430393533313438336339316430616136383331346137613736622f737175696c6c6163652f72616c70682d6d65737365642d7570&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/squillace/ralph-messed-up/tree/main/wit\" title=\"ralph-messed-up/wit at main · squillace/ralph-messed-up\">ralph-messed-up/wit at main · squillace/ralph-messed-up</a></div><div class=\"message_embed_description\">Contribute to squillace/ralph-messed-up development by creating an account on GitHub.</div></div></div>",
        "id": 457061218,
        "sender_full_name": "Ralph",
        "timestamp": 1723022465
    },
    {
        "content": "<p>note there's no <em>directory</em> for wit/deps/clocks in this format, so I either have to munge the dir OR I can modify the paths in toml, right?</p>",
        "id": 457061321,
        "sender_full_name": "Ralph",
        "timestamp": 1723022501
    },
    {
        "content": "<p>the following paths clearly should NOT work in this environment:</p>",
        "id": 457061422,
        "sender_full_name": "Ralph",
        "timestamp": 1723022525
    },
    {
        "content": "<p>[package.metadata.component.dependencies]<br>\n\"wasi:clocks\" = { path = \"wit/deps/clocks\" }<br>\n\"wasi:io\" = { path = \"wit/deps/io\" }<br>\n\"wasi:random\" = { path = \"wit/deps/random\" }<br>\n\"wasi:cli\" = { path = \"wit/deps/cli\" }</p>",
        "id": 457061427,
        "sender_full_name": "Ralph",
        "timestamp": 1723022526
    },
    {
        "content": "<p>so I go to munge the wit into something that looks like dan's: </p>\n<ul>\n<li>wit<ul>\n<li>deps<ul>\n<li>cli/clocks, etc. and THEN the .wit files</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>",
        "id": 457061656,
        "sender_full_name": "Ralph",
        "timestamp": 1723022594
    },
    {
        "content": "<p>no go</p>",
        "id": 457061668,
        "sender_full_name": "Ralph",
        "timestamp": 1723022597
    },
    {
        "content": "<p>cargo component build version 0.15.0 and 0.14.0 do not locate the files so far as I can see.</p>",
        "id": 457061747,
        "sender_full_name": "Ralph",
        "timestamp": 1723022626
    },
    {
        "content": "<p>so if this SHOULD work, and it should, then there's something wrong with my machine (entirely possible, detritus is a thing) and I'd like to figure that out.</p>",
        "id": 457061927,
        "sender_full_name": "Ralph",
        "timestamp": 1723022683
    },
    {
        "content": "<p>cargo 1.80.0 (376290515 2024-07-16)<br>\ncargo-component-component 0.14.0 (wasi:95fee6f) or cargo-component-component 0.15.0 (which apparently has no commit in its version string)<br>\nwkg 0.4.1<br>\nwhat else? It sure seems that somehow the resolution pathing in cargo component's resolution is off, or I'm getting some version crossed.</p>",
        "id": 457064136,
        "sender_full_name": "Ralph",
        "timestamp": 1723023379
    },
    {
        "content": "<p><a href=\"https://github.com/squillace/ralph-messed-up/blob/main/Cargo.toml#L23\">https://github.com/squillace/ralph-messed-up/blob/main/Cargo.toml#L23</a>    </p>\n<p>Should be...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">package</span><span class=\"p\">.</span><span class=\"n\">metadata</span><span class=\"p\">.</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">dependencies</span><span class=\"p\">]</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/squillace/ralph-messed-up/blob/main/Cargo.toml#L23\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/77bd53298f25cfd07c738b69396f69eb225d62c4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643963646137666236353865363833346435663432346161353431366336323438643036643430393533313438336339316430616136383331346137613736622f737175696c6c6163652f72616c70682d6d65737365642d7570&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/squillace/ralph-messed-up/blob/main/Cargo.toml#L23\" title=\"ralph-messed-up/Cargo.toml at main · squillace/ralph-messed-up\">ralph-messed-up/Cargo.toml at main · squillace/ralph-messed-up</a></div><div class=\"message_embed_description\">Contribute to squillace/ralph-messed-up development by creating an account on GitHub.</div></div></div>",
        "id": 457516002,
        "sender_full_name": "Brian",
        "timestamp": 1723152399
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> ! That was it.<code>cargo component</code> v0.15.0 creates <code>[package.metadata.component.dependencies]</code> -- missing the infix <code>target</code></p>",
        "id": 460042947,
        "sender_full_name": "Ralph",
        "timestamp": 1723456047
    },
    {
        "content": "<p>rather, the <code>cargo component new --lib</code> command with that version creates the older toml section name.</p>",
        "id": 460043154,
        "sender_full_name": "Ralph",
        "timestamp": 1723456083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"280224\">Taylor Thomas</span> <a href=\"#narrow/stream/407292-cargo-component/topic/no.20registry.20an.20option.3F/near/456932432\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> Yeah this is still a work in progress. We are close to getting done with adding pulling from a registry: <a href=\"https://github.com/bytecodealliance/cargo-component/pull/322\">https://github.com/bytecodealliance/cargo-component/pull/322</a></p>\n<p>There will still be some follow ups after that but we're getting there</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span>  does this PR also fix the \"cargo component new --lib` toml section name? Not critical if it doesn't; I'll file an issue if not.</p>",
        "id": 460043571,
        "sender_full_name": "Ralph",
        "timestamp": 1723456166
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/ulv1zuR4D2oqEA9ynH-MlPcV/image-4.png\">image-4.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/ulv1zuR4D2oqEA9ynH-MlPcV/image-4.png\" title=\"image-4.png\"><img data-original-dimensions=\"2940x1770\" src=\"/user_uploads/thumbnail/15107/ulv1zuR4D2oqEA9ynH-MlPcV/image-4.png/840x560.webp\"></a></div>",
        "id": 460072448,
        "sender_full_name": "Ralph",
        "timestamp": 1723465658
    },
    {
        "content": "<p>No it doesn't fix that issue</p>",
        "id": 462241637,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1723600287
    }
]