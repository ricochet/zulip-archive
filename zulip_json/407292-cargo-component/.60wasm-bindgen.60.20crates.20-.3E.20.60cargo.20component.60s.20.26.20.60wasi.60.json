[
    {
        "content": "<p>I am looking for a tutorial (or even just some basic examples) on componentizing / refactoring existing crates targeting a web browser using <code>wasm-bindgen</code> and <code>web_sys</code>. I would assume this would include creation or generation of a <code>wit</code> interface that likely must include <code>wasi</code> in some way and (for now) <a class=\"stream\" data-stream-id=\"409526\" href=\"/#narrow/stream/409526-jco\">#jco</a> to be usable in a browser. </p>\n<p>Is there such content yet? If not, I would be interested in helping craft such a demo around wasi 0.2.0 with plans to update for async for this: <a href=\"https://github.com/rustwasm/wasm-bindgen/tree/main/examples/fetch\">https://github.com/rustwasm/wasm-bindgen/tree/main/examples/fetch</a></p>",
        "id": 427219255,
        "sender_full_name": "Nuke ðŸŒ„",
        "timestamp": 1710708932
    },
    {
        "content": "<p>Am I right to say that the wasi interface could (and likely should) totally abstract all effects, so your guest would be essentially functional outside the fully composed component, with a message or event driven design that calls in/out of wasi to do this?</p>",
        "id": 427221335,
        "sender_full_name": "Nuke ðŸŒ„",
        "timestamp": 1710709492
    },
    {
        "content": "<p>As it stands in the existing example for <code>fetch</code> the whole thing is of course encapsulated in <code>run</code> but I would think a component-minded implementation would brake that logic up a bit more. In the contrast with a <code>cargo component</code> based project, I would want some more clean and granular  interfaces defined...</p>",
        "id": 427226439,
        "sender_full_name": "Nuke ðŸŒ„",
        "timestamp": 1710710830
    },
    {
        "content": "<p>For a component <code>fetch</code> tutorial I would start with <code>cargo component new --lib</code> and  have the user-facing  export  a <code>fetch: func(...) -&gt; ...</code>  and form the request in a distinct component that <code>import wasi:http/...</code> to manage the (async eventually) <code>GET</code>. The intermediate component would have a distinct <code>mod</code> that would have  functional core logic that is wrapped minimal in the lib to <code>impl Gest for ...</code>. Perhaps a few intermediate components that <code>import wasi:http</code> and are composed into a higher level component that imports them and exports a higher-level method using both. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> </p>\n<p>Ideally that paves the way to an example of \"write once, run with any wasi runtime... or  at least any runtime that can provide <code>import wasi:http</code>\". Bonus: this could enable exposing the core intermediate (and optionally pure functional) logic to be depended on in other rust crates that might not target wasm/wasi at all.</p>",
        "id": 427227806,
        "sender_full_name": "Nuke ðŸŒ„",
        "timestamp": 1710711185
    }
]