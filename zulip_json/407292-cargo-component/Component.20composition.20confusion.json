[
    {
        "content": "<p>Hello! <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>\n<p>I'm trying to create components using <code>cargo-component</code>, compose them using <code>wasm-compose</code> (<code>wasm-tools compose</code>), and then run them using the <code>wasmtime</code> crate.</p>\n<p>I have two components produced using <code>cargo-component</code>, both of which use some WASI interfaces.</p>\n<ul>\n<li><code>job-server</code></li>\n<li><code>job-worker</code></li>\n</ul>\n<p>The <code>job-server</code> component runs inside wasmtime just fine, so I've at least managed to point it to the WASI <code>.wit</code> files I lifted from the <code>wasmtime</code> properly...</p>\n<p>For now I'm just trying to compose a <code>job-worker-composed</code> component that contains the <code>job-server</code> internally. Eventually I intend to be able to swap in middleware to, e.g., connect to a remote job server, and then one to decide between local or remote job server at runtime.</p>\n<p>I'm currently stuck trying to understand this error message from <code>wasm-compose</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">streams</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">instantiation</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">jeffparsons</span>:<span class=\"nc\">job</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"o\">/</span><span class=\"n\">job</span><span class=\"o\">-</span><span class=\"n\">server</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">conflicts</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">imported</span><span class=\"w\"> </span><span class=\"n\">instantiation</span><span class=\"w\"> </span><span class=\"n\">argument</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"cp\">$input</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>I've had a look at the code that produces this error message but I'm still failing to understand what I've done wrong.</p>\n<p>I'm invoking <code>wasm-compose</code> like so:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">compose</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"n\">components</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">yml</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">output</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"o\">/</span><span class=\"n\">components</span><span class=\"o\">/</span><span class=\"n\">job</span><span class=\"o\">-</span><span class=\"n\">worker</span><span class=\"o\">-</span><span class=\"n\">composed</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">components</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">job_worker</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">verbose</span>\n</code></pre></div>\n<p>I've attached copies of (what I think are) the relevant files. Can anybody point me in the right direction? I suspect I might have misunderstood several different things along the way.</p>\n<p>Thanks in advance for any help! <span aria-label=\"sparkling heart\" class=\"emoji emoji-1f496\" role=\"img\" title=\"sparkling heart\">:sparkling_heart:</span></p>\n<p><a href=\"/user_uploads/15107/lyVyAhTnpOt3U5BaK_-uIKPU/Cargo.toml\">components/job-server/Cargo.toml</a><br>\n<a href=\"/user_uploads/15107/5y5zzjfuqi7jkZDj3eyKuXoy/world.wit\">components/job-server/world.wit</a><br>\n<a href=\"/user_uploads/15107/n_VKDj4h8X1SNMdDmkbzrFgL/Cargo.toml\">components/job-worker/Cargo.toml</a><br>\n<a href=\"/user_uploads/15107/_LZcsjcVWBZ0OsijOyx8FIyb/world.wit\">components/job-worker/world.wit</a><br>\n<a href=\"/user_uploads/15107/qGxwzR5wYdShcgF7mFajd28B/config.yml\">components/config.yml</a></p>\n<p><strong>EDIT:</strong></p>\n<p>Forgot some that might be relevant. Let's see if Zulip will accept uploading wasm blobs...:</p>\n<p><a href=\"/user_uploads/15107/nY5ckEHzTCtqMLL30e11QdXr/job_server.wasm\">components/target/wasm32-wasi/debug/job_server.wasm</a><br>\n<a href=\"/user_uploads/15107/FwmQV1Ti3a9Fh3B3g8SBZXln/job_worker.wasm\">components/target/wasm32-wasi/debug/job_worker.wasm</a><br>\n<a href=\"/user_uploads/15107/_7SihuWaSyd6pP6R7ulR8loc/wasm-compose-output\">wasm-compose output</a></p>",
        "id": 396244085,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1697100793
    },
    {
        "content": "<p>to confirm, the <code>wasi_snapshot_preview1.wasm</code> adapter you're using matches the WASI definitions from <code>wit/deps</code> from both projects (and all those wit files are the same)?</p>",
        "id": 396327052,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697129034
    },
    {
        "content": "<p>if so, wasm-compose might not be handling the resource-based WASI definitions well yet (it was written long before resources were a thing)</p>",
        "id": 396327282,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697129128
    },
    {
        "content": "<p>the <code>wasi:io/streams</code> types appear to be identical, judging from the wasms</p>",
        "id": 396327881,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697129324
    },
    {
        "content": "<p>so i think the problem stems from <code>types_compatible</code>, where i believe it'll always return false for resources coming from two different instance types, despite the intention of merging the two instance types together</p>",
        "id": 396328750,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697129626
    },
    {
        "content": "<p>i'm fairly confident that's the issue here</p>",
        "id": 396329050,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697129740
    },
    {
        "content": "<p>and other than implementing its own compatibility check that doesn't rely on <code>is_subtype_of</code> from <code>wasmparser</code>, i don't know of an easy fix for <code>wasm-compose</code></p>",
        "id": 396329246,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697129810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> currently we use a symmetric <code>is_subtype_of</code> check for <code>wasm-compose</code>'s <code>types_compatible</code> logic, which returns false when we compare identical instance types (that have a resource type) from two different components as obviously the resource ids will not match; but for the purpose of this check, we don't care that they don't match as we're going to be merging the two definitions together into a single instance type. thoughts on what we should do here?</p>",
        "id": 396330750,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697130342
    },
    {
        "content": "<p>actually, before we discuss that further, let me confirm that's the issue</p>",
        "id": 396332841,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697131126
    },
    {
        "content": "<p><code>resource types are not the same</code></p>",
        "id": 396333316,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697131294
    },
    {
        "content": "<p>assuming we do get past the type check, encoding of resources isn't implemented in wasm-compose anyway</p>",
        "id": 396334403,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697131727
    },
    {
        "content": "<p>it feels like the subtype check of <code>ComponentEntityType::Type</code> should succeed if both the lhs and rhs were <code>(type (sub resource))</code>, at least</p>",
        "id": 396336359,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697132465
    },
    {
        "content": "<p>unfortunately that won't solve the problem as <code>own</code> and <code>borrow</code> checks will also return false</p>",
        "id": 396338474,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697133331
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470250\">@Jeff Parsons</span> all of the above is to say it's not a problem on your end; there's work to do in <code>wasm-compose</code> to support resources, which we need to implement soon as the resources-based WASI will land in Wasmtime 14</p>",
        "id": 396340014,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697133927
    },
    {
        "content": "<p>my current fix idea is to maintain a \"resource equivalence map\"  (i.e. any exported resources with the same name from instance types of the same name) in <code>wasm-compose</code> which could be passed into the subtype check and consulted in addition to strait-up resource id equivalence</p>",
        "id": 396341119,
        "sender_full_name": "Peter Huene",
        "timestamp": 1697134397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253989\">Peter Huene</span> <a href=\"#narrow/stream/407292-cargo-component/topic/Component.20composition.20confusion/near/396327052\">said</a>:</p>\n<blockquote>\n<p>to confirm, the <code>wasi_snapshot_preview1.wasm</code> adapter you're using matches the WASI definitions from <code>wit/deps</code> from both projects (and all those wit files are the same)?</p>\n</blockquote>\n<p>Yep, they are all based on / pilfered from the Wasmtime 14.0 release branch.</p>\n<p>I have to confess I'd forgotten that I was \"living in the future\" by working off the 14 release branch, so I probably shouldn't have expected other tools to work seamlessly. This all makes perfect sense to me, now. Thanks so much for the detailed reply!</p>\n<p>Next time I will try minimal reproductions of my issue based on actually released versions before bothering y'all. <span aria-label=\"man bowing\" class=\"emoji emoji-1f647-200d-2642\" role=\"img\" title=\"man bowing\">:man_bowing:</span></p>",
        "id": 396389641,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1697157825
    },
    {
        "content": "<p>I would agree with the conclusion here is that resources effectively aren't supported in wasm compose and that's what needs to be fixed. Fixing this will require changes in wasmparsers API most likely to expose the necessary functions with maps for resources as you're thinking. </p>\n<p>Deep in wasmparser there's an open_instance_type function which is more or less what's needed here. The resource bits a very tricky so it's one where we will definitely want to reuse what's already in wasmparser (probably with refactored API entry points). One other idea is that a context is built and maintained throughout type checking which internally handles maps of resources and such. This is an underbaked idea though and probably requires more thought</p>",
        "id": 396428315,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697175710
    },
    {
        "content": "<p>FYI With the release of wasmtime 14.0.0 I'm now hitting this same issue with trying to build a component.  Any ideas on a timeframe for a fix for this ?</p>",
        "id": 398059909,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1698058771
    },
    {
        "content": "<p>I'm working on a subset (passing handles across a component boundary when both sides import the same resource) of the problem now, and hope to have something usable this week.</p>",
        "id": 398088873,
        "sender_full_name": "Joel Dice",
        "timestamp": 1698068803
    },
    {
        "content": "<p>Great thanks Joel</p>",
        "id": 398098046,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1698071395
    },
    {
        "content": "<p>Just opened a draft PR which covers the case I described above: <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1261\">https://github.com/bytecodealliance/wasm-tools/pull/1261</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1261\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/76d9e0101d0393134f3969ffcd97015a77664e74\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636566386565663130303837646162643465393963313038363365666630373138373334383461636336643663636564663535353730353938616439653161662f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31323631)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1261\" title=\"first draft of resource support for `wasm-compose` by dicej · Pull Request #1261 · bytecodealliance/wasm-tools\">first draft of resource support for `wasm-compose` by dicej · Pull Request #1261 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This aims to support the specific case of passing handles to imported resource types across component boundaries.  It does not include any support for guest-exported resources (as would be required...</div></div></div>",
        "id": 398346634,
        "sender_full_name": "Joel Dice",
        "timestamp": 1698174891
    },
    {
        "content": "<p>I just tested out the jus released  0.4.14 version of the wasm-compose crate and everything works great. Thanks Joel</p>",
        "id": 402713358,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1700232334
    }
]