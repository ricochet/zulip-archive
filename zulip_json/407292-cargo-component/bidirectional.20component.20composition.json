[
    {
        "content": "<p>Hey <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> I am exploring component composition following the component model docs, using <code>cargo component</code> and <code>wasm-tools compose</code>. While the tutorial (calculator component consumes an adder component) matches my understanding, I'm struggling to do the same when both components import from and export to the other respectively. Example:</p>\n<p><code>interface.wit</code></p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface a-to-b {\n    foo-AB: func() -&gt; u32;\n}\n\ninterface b-to-a {\n    foo-BA: func() -&gt; u32;\n}\n\ninterface a-ext {\n    entry: func() -&gt; u32;\n}\n\nworld A {\n    import b-to-a;\n    export a-to-b;\n    export a-ext;\n}\n\nworld B {\n    import a-to-b;\n    export b-to-a;\n}\n</code></pre></div>\n<p>with simple implementations</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// implementation of A.entry</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">entry</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo_ba</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"c1\">// implementation of A.foo-ab</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo_ab</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"mi\">42</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"c1\">// implementation of B.foo-ba</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">foo_ba</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">foo_ab</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>compiled with <code>cargo component build --release</code>, composed with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">compose</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">composed</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>I expected a component which exports only <code>a-ext</code> (with <code>entry</code> returning 42) and no imports. However, the resulting components interface is</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">interface</span>:<span class=\"nc\">api</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">interface</span>:<span class=\"nc\">api</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">interface</span>:<span class=\"nc\">api</span><span class=\"o\">/</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"n\">ext</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What am I missing?</p>",
        "id": 411010539,
        "sender_full_name": "Leon Thomm",
        "timestamp": 1704286925
    },
    {
        "content": "<p><code>wasm-compose</code> does not currently support circular dependencies, so what you're trying to do is not (yet) possible.  In theory, <code>wasm-compose</code> could be modified to support such things using e.g. a synthesized module with indirect function calls to \"break\" the cycle, but nobody has started working on that AFAIK.</p>",
        "id": 411042494,
        "sender_full_name": "Joel Dice",
        "timestamp": 1704299361
    }
]