[
    {
        "content": "<p>I just filed <a href=\"https://github.com/bytecodealliance/cargo-component/issues/236\">#236</a> - not sure if I'm possibly holding it wrong? If there's anything I could do to help fix this please let me know - I wouldn't mind having an issue I could fix to contribute to <code>cargo-component</code>!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/issues/236\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2fe17e2fe034d9171090edf6c8b60204460184f2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383562373831373365633230313762343139613030343233363462323362396465393761346233646437366165363563383665346230303264346265323533332f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f6973737565732f323336)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/issues/236\" title=\"&quot;hello world&quot; example with the `wasi` crate doesn't work · Issue #236 · bytecodealliance/cargo-component\">\"hello world\" example with the `wasi` crate doesn't work · Issue #236 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">Repro If we run the following commands to build the wasi crate: cargo install cargo-component git clone https://github.com/bytecodealliance/wasi cd wasi cargo component build --example hello-world ...</div></div></div>",
        "id": 423424883,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1708962411
    },
    {
        "content": "<p>I've added some context to the issue; there is a bug relating to building examples and <code>cargo-component</code>'s bindings doesn't appear compatible with the latest wit-bindgen due to some breaking changes in runtime types; i can do a release of <code>cargo-component</code> to update it.</p>",
        "id": 423441317,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708966608
    },
    {
        "content": "<p>I believe I ran into the same (or very similar issue) where <code>cargo component new</code> gave me a project which depended on wit-bindgen 0.19.1 which would fail to compile since the bindings were generated by 0.18. Shouldn't the version generated for the Cargo.toml be matched with the version used by <code>cargo-component</code>?</p>",
        "id": 423459238,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1708972223
    },
    {
        "content": "<p>generally it doesn't have to, as changes to the runtime types/functions are less frequently than the bindings generation</p>",
        "id": 423462838,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708973586
    },
    {
        "content": "<p>if we were to fix it so that this doesn't happen again, i'd love to move in the direction of not having a user's <code>Cargo.toml</code> reference <code>wit-bindgen</code> at all</p>",
        "id": 423462877,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708973609
    },
    {
        "content": "<p>I wrote up some <a href=\"https://github.com/bytecodealliance/cargo-component/issues/236#issuecomment-1964912200\">longer form thoughts</a> but I agree that <code>wit-bindgen</code> should not have to match in <code>cargo component</code> as that'll create a lot of usability headaches (like this) in the future</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component/issues/236#issuecomment-1964912200\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6bb453cb2ad4abfc95043464288b182299eb3bb0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383265373465343961623363643331333534393938356135306135393333626133653839306236373330373538393866376562393662383163613837323037332f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e742f6973737565732f323336)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component/issues/236#issuecomment-1964912200\" title=\"&quot;hello world&quot; example with the `wasi` crate doesn't work · Issue #236 · bytecodealliance/cargo-component\">\"hello world\" example with the `wasi` crate doesn't work · Issue #236 · bytecodealliance/cargo-component</a></div><div class=\"message_embed_description\">Repro If we run the following commands to build the wasi crate: cargo install cargo-component git clone https://github.com/bytecodealliance/wasi cd wasi cargo component build --example hello-world ...</div></div></div>",
        "id": 423463011,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708973653
    },
    {
        "content": "<p>removing the <code>wit-bindgen</code> dep entirely might be kind of hard though</p>",
        "id": 423463038,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708973664
    },
    {
        "content": "<p>it would also prevent such problems where users use the <code>wit-bindgen rust</code> CLI and reference a mismatched <code>wit-bindgen</code> in their <code>Cargo.toml</code></p>",
        "id": 423463045,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708973669
    },
    {
        "content": "<p>if we could define <code>cabi_realloc</code> in a reasonable way I think we could delete the crate entirely</p>",
        "id": 423463124,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708973702
    },
    {
        "content": "<p>modulo <code>bitflags!</code> I suppose</p>",
        "id": 423463140,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708973707
    },
    {
        "content": "<p>in the mean time, i'll update the <code>wit-bindgen</code> dependency of <code>cargo-component</code>, fix componentization to not require <code>[package.metadata.component]</code> (i.e. key off of the custom section), and fix examples (and other target crate-types) not being treated as bins when they should be for the purpose of adapter selection</p>",
        "id": 423463827,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708973933
    },
    {
        "content": "<p>you know maybe this can be the <code>wasm32-wasip2</code> target in Rust</p>",
        "id": 423464046,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708974023
    },
    {
        "content": "<p>it's got <code>cabi_realloc</code> built-in for us</p>",
        "id": 423464057,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708974027
    },
    {
        "content": "<p>then <code>wit-bindgen</code> doesn't have to do anything</p>",
        "id": 423464071,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708974032
    },
    {
        "content": "<p>ok yeah I'm gonna go change <code>wit-bindgen</code> to rely on nothing from the crate but macro things and <code>cabi_realloc</code></p>",
        "id": 423464236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708974094
    },
    {
        "content": "<p>hmm; the logic for componentization should be either 1) the <code>[package.metadata.component]</code> section is present, as the module might not have a component type in the case of default \"bin\" components that don't use bindings and expect a preview1 command adapter for <code>fn main</code> or 2) the module has a <code>component-type</code> CS</p>",
        "id": 423464956,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708974340
    },
    {
        "content": "<p>that sounds reasonable to me yeah</p>",
        "id": 423465108,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708974384
    },
    {
        "content": "<p>although the custom section only needs to have <code>component-type</code> as a prefix</p>",
        "id": 423465139,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708974394
    },
    {
        "content": "<p>right</p>",
        "id": 423465153,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708974403
    },
    {
        "content": "<p>it seems that the default bin project does include empty bindings with an \"empty\" component type, so it works even without a <code>[package.metadata.component]</code> section, so never mind</p>",
        "id": 423465629,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708974573
    },
    {
        "content": "<p>just the custom section presence should work</p>",
        "id": 423465645,
        "sender_full_name": "Peter Huene",
        "timestamp": 1708974582
    },
    {
        "content": "<p>oh nice</p>",
        "id": 423467620,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708975270
    },
    {
        "content": "<p>I've implemented <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/868\">https://github.com/bytecodealliance/wit-bindgen/pull/868</a> for everything except <code>cabi_realloc</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/868\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bf593053975c02ea0a78f22a69d64319b88e087d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653163343433666235343534353233656637633338363636613663313336383032656139363062666664663834343061623865376636363431306638333638332f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f383638)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/868\" title=\"Move most of the `wit-bindgen` crate into generated code by alexcrichton · Pull Request #868 · bytecodealliance/wit-bindgen\">Move most of the `wit-bindgen` crate into generated code by alexcrichton · Pull Request #868 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This PR is borne out of discussion on bytecodealliance/cargo-component#236 where the conclusion was that it'd be best if the generated code that wit-bindgen emits is largely standalone and doesn't ...</div></div></div>",
        "id": 423481868,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708980953
    },
    {
        "content": "<p>Now that a new version of <code>cargo-component</code> has been published; does that also mean that we need to publish a new version of the <code>wasi</code> crate with the updated bindings?</p>",
        "id": 424918160,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709658618
    },
    {
        "content": "<p>I was just trying out the new release of <code>cargo-component</code>, and am getting this error:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Error: failed to run main module `/Users/yosh/Code/wasm-http-tools/target/wasm32-wasi/debug/examples/main.wasm`\n\nCaused by:\n    0: import `wasi:http/types@0.2.0` has the wrong type\n    1: instance export `fields` has the wrong type\n    2: expected resource found nothing\n</code></pre></div>\n<p>This looks like WIT imports, but all my imports are going through the <code>wasi</code> crate. So I suspect it's probably something there?</p>",
        "id": 424918487,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709658724
    },
    {
        "content": "<p>Oh lol, now seeing <a href=\"https://github.com/bytecodealliance/wasi/pull/80\">https://github.com/bytecodealliance/wasi/pull/80</a> is up</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasi/pull/80\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5240aff58c77f8207b8a5177f481f0a2befaf242\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373435316463636432623132306233346463353630353635323366653266643762366434323336353231323937396163613934663763333562643037656237302f62797465636f6465616c6c69616e63652f776173692f70756c6c2f3830)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasi/pull/80\" title=\"Update to wit-bindgen 0.20.0 by alexcrichton · Pull Request #80 · bytecodealliance/wasi\">Update to wit-bindgen 0.20.0 by alexcrichton · Pull Request #80 · bytecodealliance/wasi</a></div><div class=\"message_embed_description\">This commit updates the bindings generator to 0.20.0 and refactors the existing support for exporting macros to use the new features of 0.20.0 as well. The macros crate feature is now no longer req...</div></div></div>",
        "id": 424918767,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709658817
    },
    {
        "content": "<p>Yeah okay, that would make sense!</p>",
        "id": 424918783,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709658823
    },
    {
        "content": "<p>Is that error perhaps a missing <code>-S http</code> flag to <code>wasmtime run</code>?</p>",
        "id": 424919981,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709659206
    },
    {
        "content": "<p>(by default the CLI doesn't give access to wasi-http)</p>",
        "id": 424920002,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709659214
    },
    {
        "content": "<p>oh lol, yeah that would probably do it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 424920017,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659224
    },
    {
        "content": "<p>I definitely forgot the flag</p>",
        "id": 424920026,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659227
    },
    {
        "content": "<p>Oh strange, if I do:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>component<span class=\"w\"> </span>run<span class=\"w\"> </span>--example<span class=\"w\"> </span>main<span class=\"w\"> </span>--<span class=\"w\"> </span>-S<span class=\"w\"> </span><span class=\"nv\">http</span><span class=\"o\">=</span>y\n</code></pre></div>\n<p>I still get the same error</p>",
        "id": 424920552,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659412
    },
    {
        "content": "<p>I mean; now that I'm realizing we still need to bump the <code>wasi</code> crate to the latest <code>wasm-bindgen</code> output it makes sense to me that it fails</p>",
        "id": 424920632,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659439
    },
    {
        "content": "<p>Curious how it's that error though</p>",
        "id": 424920683,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659445
    },
    {
        "content": "<p>I don't know whether that command passes the <code>-S</code> flag to wasmtime or the wasm binary itself, but I would guess the latter</p>",
        "id": 424920773,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709659488
    },
    {
        "content": "<p>(others might know for sure though)</p>",
        "id": 424920785,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709659493
    },
    {
        "content": "<p>In theory wasi I don't think should need an update, but I haven't checked on that in a bit</p>",
        "id": 424920871,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709659536
    },
    {
        "content": "<p>In another example, this compiled correctly for me:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>component<span class=\"w\"> </span>run<span class=\"w\"> </span>--<span class=\"w\"> </span>-S<span class=\"w\"> </span><span class=\"nv\">nn</span><span class=\"o\">=</span>y<span class=\"w\">  </span><span class=\"c1\"># Run our app</span>\n</code></pre></div>\n<p>maybe there's something different when paired with <code>--example</code> ?</p>",
        "id": 424920923,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659556
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/407292-cargo-component/topic/wasi.20crate.20.22hello.20world.22.20not.20working/near/424920871\">said</a>:</p>\n<blockquote>\n<p>In theory wasi I don't think should need an update, but I haven't checked on that in a bit</p>\n</blockquote>\n<p>oh I see!</p>",
        "id": 424921061,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659593
    },
    {
        "content": "<p>haha, yeah don't worry about debugging this right now over Zulip</p>",
        "id": 424921085,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659601
    },
    {
        "content": "<p>I'll spend a bit more time poking at it to see what is causing the failure</p>",
        "id": 424921129,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659618
    },
    {
        "content": "<p>If I can't figure it out I'll bring back something more detailed</p>",
        "id": 424921210,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659640
    },
    {
        "content": "<p>(appreciate the help though!)</p>",
        "id": 424921237,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1709659652
    },
    {
        "content": "<p>The args passed after <code>--</code> are for the guest program and not the runner.  You may use <code>CARGO_TARGET_WASM32_WASI_RUNNER</code> to set the runner to use or <code>target.wasm32-wasi.runner</code> in <code>.cargo/config.toml</code></p>",
        "id": 424929072,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709662176
    },
    {
        "content": "<p>although it appears we may not be respecting <code>CARGO_TARGET_WASM32_WASI_RUNNER</code> like we should be</p>",
        "id": 424929183,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709662205
    },
    {
        "content": "<p><code>.cargo/config.toml</code> should work though</p>",
        "id": 424929221,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709662218
    },
    {
        "content": "<p>oh never mind, the <code>cargo-config</code> crate handles sourcing from the environment variable for us</p>",
        "id": 424929377,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709662270
    },
    {
        "content": "<p>both should work</p>",
        "id": 424929391,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709662273
    },
    {
        "content": "<p>if you set <code>CARGO_COMPONENT_LOG=debug</code>, you'll see output for the runner it ends up spawning</p>",
        "id": 424930413,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709662644
    }
]