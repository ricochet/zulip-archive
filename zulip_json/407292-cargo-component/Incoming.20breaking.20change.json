[
    {
        "content": "<p>Just a heads up that I will be publishing 0.9.0 of <code>cargo-component</code> shortly, which will include a breaking change introduced with <code>wit-bindgen</code> 0.20.0.</p>\n<p>It was decided that we'd return to using a generated <code>export!</code> macro that accepts the name of the type implementing the world (typically <code>Component</code> in <code>cargo-component</code> projects).</p>\n<p>This was done for good reason: now the generated code does not refer to any user-defined types directly and it also moves naming the implementing types out of  <code>Cargo.toml</code> into type-checked Rust source.</p>\n<p>Besides adding this macro invocation to your <code>cargo-component</code> projects, there are additional steps to take if you're implementing worlds that export resources: a trait-associated type now names the type implementing the resource.</p>\n<p>I'll have detailed instructions in the release notes.</p>",
        "id": 424313112,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709321483
    },
    {
        "content": "<p>Apologies again for the whiplash here on generated bindings and effort in <code>cargo component</code> to adapt to this, but my hope is that this is well worth the change!</p>",
        "id": 424315357,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709322436
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> now that we have most of what was in the <code>rt</code> module of <code>wit-bindgen</code> now generated, do you think it might be possible to refactor the <code>realloc</code> feature out as a separate crate that we could reexport from <code>wit-bindgen</code> (and also perhaps the reexport of <code>bitflags</code>), like a <code>wit-bindgen-rt</code> crate?</p>\n<p>The reason I ask is that currently <code>cargo-component</code> user projects add a <code>wit-bindgen</code> dependency with <code>no-default-features</code> and <code>features = [\"realloc\"]</code>; this happens via an implicit <code>cargo add</code>  when <code>cargo component new</code> is run.</p>\n<p>However, if a user specifies the dependency at the workspace level, <code>cargo add</code> refuses to add it at a workspace member level because of <code>no-default-features</code> (despite being set the same).</p>\n<p>If we had a crate that exported everything we needed for \"runtime\" that we could activate without feature flags, I think that would probably be a better DX; <code>cargo-component</code> would just add a dependency to the \"rt\" crate and not <code>wit-bindgen</code> at all (we still have <code>Opts::runtime_path</code> that <code>cargo-component</code> can use to switch it to <code>wit_bindgen_rt</code> or whatever in the bindings).</p>",
        "id": 424317184,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709323179
    },
    {
        "content": "<p>I like that idea yeah, I can work on adding that <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 424318050,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709323519
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/876\">https://github.com/bytecodealliance/wit-bindgen/pull/876</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/876\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9dede0e76dcbeb84e1dc602a9e9b0b363d40a3ca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333533373631333139353236646261386638353032626533383232366236346231313137636432346534336633636666303734366634333961336239346532612f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f383736)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/876\" title=\"Move `cabi_realloc` to a `wit-bindgen-rt` crate by alexcrichton 路 Pull Request #876 路 bytecodealliance/wit-bindgen\">Move `cabi_realloc` to a `wit-bindgen-rt` crate by alexcrichton 路 Pull Request #876 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This commit extracts out a wit-bindgen-rt crate which unconditionally provides the cabi_realloc function. This'll exist for cargo component to add a dependency on and otherwise the wit-bindgen crat...</div></div></div>",
        "id": 424320716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709324784
    },
    {
        "content": "<p>One last thing: would it be possible to kick off a publish job to get 0.20.0 of <code>wit-bindgen-rt</code> on <a href=\"http://crates.io\">crates.io</a>? While it won't be used (reexported) from <code>wit-bindgen</code> until 0.21.0, a 0.20.0 of <code>wit-bindgen-rt</code> would allow me to switch <code>cargo component new</code> over to it as part of this breaking change release</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://crates.io\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/75f8c66509c680a2345cca9b6adaf7e2cdb6f41b\\/68747470733a2f2f6372617465732e696f2f6173736574732f6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://crates.io\" title=\"crates.io: Rust Package Registry\">crates.io: Rust Package Registry</a></div></div></div>",
        "id": 424325547,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709327112
    },
    {
        "content": "<p>oh I was thinking I could do 0.20.1</p>",
        "id": 424325838,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709327271
    },
    {
        "content": "<p>oh that's also great!</p>",
        "id": 424325853,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709327279
    },
    {
        "content": "<p>thanks, Alex!</p>",
        "id": 424325919,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709327295
    },
    {
        "content": "<p>oh no, that won't work</p>",
        "id": 424325930,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709327300
    },
    {
        "content": "<p>I changed something in <code>Opts</code> that's breaking</p>",
        "id": 424325940,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709327305
    },
    {
        "content": "<p>doh</p>",
        "id": 424325966,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709327321
    },
    {
        "content": "<p>yeah though I can sneak in a publish manually for this</p>",
        "id": 424325996,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709327338
    },
    {
        "content": "<p>that'd be sufficient for <code>cargo-component</code> at least, appreciate it!</p>",
        "id": 424326028,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709327354
    },
    {
        "content": "<p>can do <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 424326093,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709327386
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> hm this may not actually work, the generated code isn't prepared to access <code>wit-bindgen-rt</code> directly actually</p>",
        "id": 424329580,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329017
    },
    {
        "content": "<p>e.g. the generated code is calling <code>wit_bindgen::rt::maybe_link_cabi_realloc()</code></p>",
        "id": 424329600,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329029
    },
    {
        "content": "<p>even via the <code>runtime_path</code> and <code>bitflags_path</code> <code>Opts</code>?</p>",
        "id": 424329614,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709329036
    },
    {
        "content": "<p>so we'll need to add a <code>wit_bindgen_rt_path: \"...\"</code> to the opts</p>",
        "id": 424329619,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329039
    },
    {
        "content": "<p>oh hm</p>",
        "id": 424329624,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329043
    },
    {
        "content": "<p>no you're right <code>runtime_path</code> should work</p>",
        "id": 424329642,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329051
    },
    {
        "content": "<p>I should probably rename that for 0.21.0 to <code>wit_bindgen_rt_path</code></p>",
        "id": 424329662,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329064
    },
    {
        "content": "<p>ok yeah no <code>runtime_path</code> will work for 0.20, disregard me</p>",
        "id": 424329788,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329123
    },
    {
        "content": "<p>Ok I have published</p>",
        "id": 424330086,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329275
    },
    {
        "content": "<p>actually wait</p>",
        "id": 424330245,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329338
    },
    {
        "content": "<p>I think that wit-bindgen 0.20.0 and wit-bindgen-rt 0.20.0 may conflict with each other</p>",
        "id": 424330262,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329349
    },
    {
        "content": "<p>since they both have a symbol of the same name</p>",
        "id": 424330272,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329353
    },
    {
        "content": "<p><code>cargo-component</code> projects will only link in the latter tho, right?</p>",
        "id": 424330341,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709329389
    },
    {
        "content": "<p>the issue stems from a workspace-level dep on wit-bindgen though, right?</p>",
        "id": 424330370,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329408
    },
    {
        "content": "<p>so while by default cargo-component would use wit-bindgen-rt that may not be the case for all users</p>",
        "id": 424330399,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329425
    },
    {
        "content": "<p>oh yeah, they'll have to fix the workspace dep as part of the breaking changes in this release</p>",
        "id": 424330402,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709329429
    },
    {
        "content": "<p>ah ok</p>",
        "id": 424330415,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329435
    },
    {
        "content": "<p>I can also just make 0.21.0 if that's easier</p>",
        "id": 424330424,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329440
    },
    {
        "content": "<p>it's just new projects they create will get it</p>",
        "id": 424330426,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709329441
    },
    {
        "content": "<p>they'll have to manually update; they shouldn't be referencing both</p>",
        "id": 424330485,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709329451
    },
    {
        "content": "<p>ok sounds reasonable</p>",
        "id": 424330497,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709329456
    },
    {
        "content": "<p>i'll document what folks need to do to get things up-and-running again; i just wanted to batch these changes together in a single release</p>",
        "id": 424330773,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709329608
    },
    {
        "content": "<p>changes look good, no more feature-flagged <code>wit-bindgen</code> dep <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 424331695,
        "sender_full_name": "Peter Huene",
        "timestamp": 1709330088
    }
]