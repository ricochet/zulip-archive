[
    {
        "content": "<p>Hello everyone, I am trying to contribute to <a href=\"https://www.leptos.dev\">Leptos</a> to make it capable of compiling the server side down to a WebAssembly Component.</p>\n<p>I had sparkles <span aria-label=\"sparkles\" class=\"emoji emoji-2728\" role=\"img\" title=\"sparkles\">:sparkles:</span>  of happiness when I saw the commit <a href=\"https://github.com/rust-lang/rust/pull/126967/commits/2a3e22bf04b41c6116cb1e29ab7d8daeed8e63db\">promoting <code>wasm32-wasip2</code> target to Tier 2</a> landing in 1.81, and then learned about the <a href=\"https://rust-lang.zulipchat.com/#narrow/stream/241545-t-release/topic/1.2E81.2E0/near/467923833\">hard truth</a> <span aria-label=\"tear\" class=\"emoji emoji-1f972\" role=\"img\" title=\"tear\">:tear:</span> </p>\n<p>So If I want to do that, for now, I need to target <code>wasm32-wasip1</code> (so the toolchain comes with <code>wasm-ld</code>, IIUC) and then do the \"componentisation\".</p>\n<p>My question may be a really stupid one since I am not familiar with cargo plugin systems, but can two cargo plugin integrates?</p>\n<p>Basically, cargo leptos allows users to have a single codebase but compile two artifacts (one for the client side, one for the server), it seems to do so by spawning the cargo binary: <a href=\"https://github.com/leptos-rs/cargo-leptos/blob/main/src/compile/server.rs#L29\">https://github.com/leptos-rs/cargo-leptos/blob/main/src/compile/server.rs#L29</a></p>\n<p>I feel like I have two choice:</p>\n<ul>\n<li>Reimplement what <code>cargo component</code> does in <code>cargo leptos</code>,</li>\n<li>Make <code>cargo leptos</code> calls <code>cargo component</code> (i.e. a plugin spawning a cargo plugin)</li>\n</ul>\n<p>The second approach seems the simpler but I don't know if it's \"Idiomatic\", do you have any recommendations? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/pull/126967/commits/2a3e22bf04b41c6116cb1e29ab7d8daeed8e63db\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7203ed7b00d42dcfb19ebb9b603cc070fb2809ae/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f36343939363f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/pull/126967/commits/2a3e22bf04b41c6116cb1e29ab7d8daeed8e63db\" title=\"Promote the `wasm32-wasip2` target to Tier 2 by alexcrichton · Pull Request #126967 · rust-lang/rust\">Promote the `wasm32-wasip2` target to Tier 2 by alexcrichton · Pull Request #126967 · rust-lang/rust</a></div><div class=\"message_embed_description\">This commit promotes the wasm32-wasip2 Rust target to tier 2 as proposed in rust-lang/compiler-team#760. There are two major changes in this PR:\n\nThe dist-various-2 container, which already produce...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://rust-lang.zulipchat.com/#narrow/stream/241545-t-release/topic/1.2E81.2E0/near/467923833\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/62a5be7c4dbb3d51af34a64dfbc026434727b1f6/68747470733a2f2f617661746172732e7a756c69702e636f6d2f343731352f7265616c6d2f69636f6e2e706e673f76657273696f6e3d32&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_description\">If this message does not go away, try reloading the page.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/leptos-rs/cargo-leptos/blob/main/src/compile/server.rs#L29\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/74136edf173abe1fbeccea0c3cb44fa849e87faa/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353130353335656538633834303432373362636434316363653261333639306665323532633836333136326661303334346561623734616531643238363862632f6c6570746f732d72732f636172676f2d6c6570746f73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/leptos-rs/cargo-leptos/blob/main/src/compile/server.rs#L29\" title=\"cargo-leptos/src/compile/server.rs at main · leptos-rs/cargo-leptos\">cargo-leptos/src/compile/server.rs at main · leptos-rs/cargo-leptos</a></div><div class=\"message_embed_description\">Build tool for Leptos (Rust). Contribute to leptos-rs/cargo-leptos development by creating an account on GitHub.</div></div></div>",
        "id": 471969852,
        "sender_full_name": "raskyld",
        "timestamp": 1726948374
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"723701\">raskyld</span> <a href=\"#narrow/stream/407292-cargo-component/topic/Integration.20of.20.60cargo-component.60.20and.20.60cargo-leptos.60/near/471969852\">said</a>:</p>\n<blockquote>\n<p>I feel like I have two choice:</p>\n<ul>\n<li>Reimplement what <code>cargo component</code> does in <code>cargo leptos</code>,</li>\n<li>Make <code>cargo leptos</code> calls <code>cargo component</code> (i.e. a plugin spawning a cargo plugin)</li>\n</ul>\n</blockquote>\n<p>The second is probably what I would start with. The commands in <code>cargo</code> are fairly stable, and since <code>cargo component</code> largely mirrors the API it probably also stay reasonably stable.</p>",
        "id": 472196631,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1727089498
    },
    {
        "content": "<p>If <code>cargo-component</code> is installed and available from your path, then yeah you should just be able to call it from a command.</p>",
        "id": 472197434,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1727089683
    },
    {
        "content": "<p>Though I guess: another option could be to use the <code>wasm32-wasip2</code> target on beta by doing something <a href=\"https://github.com/yoshuawuyts/cargo-task-wasm/blob/a9f347d65ae74c9ae84330f62b720ad04e11d768/src/main.rs#L92-L100\">like this</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/yoshuawuyts/cargo-task-wasm/blob/a9f347d65ae74c9ae84330f62b720ad04e11d768/src/main.rs#L92-L100\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6298ec5d053ab6eca78b0af4bf134bee73919df8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343931653161346162306463653239386266343162343261623064633865343064633930373462623661643139333732643532376233353763653235333431632f796f7368756177757974732f636172676f2d7461736b2d7761736d&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/yoshuawuyts/cargo-task-wasm/blob/a9f347d65ae74c9ae84330f62b720ad04e11d768/src/main.rs#L92-L100\" title=\"cargo-task-wasm/src/main.rs at a9f347d65ae74c9ae84330f62b720ad04e11d768 · yoshuawuyts/cargo-task-wasm\">cargo-task-wasm/src/main.rs at a9f347d65ae74c9ae84330f62b720ad04e11d768 · yoshuawuyts/cargo-task-wasm</a></div><div class=\"message_embed_description\">A sandboxed local task runner for Rust. Contribute to yoshuawuyts/cargo-task-wasm development by creating an account on GitHub.</div></div></div>",
        "id": 472197726,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1727089760
    },
    {
        "content": "<p>Rust 1.82 should be released in ~3 weeks, so depending on your needs that might potentially be the smoothest transition?</p>",
        "id": 472198037,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1727089838
    },
    {
        "content": "<p>Though I don't know whether you just want to compile for WASI 0.2, or whether you also need any other functionality from <code>cargo-component</code>. Using the beta toolchain directly with Cargo probably works best if you don't need any of the other <code>cargo-component</code> functionality.</p>",
        "id": 472198414,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1727089925
    },
    {
        "content": "<p>Thanks a lot for the answer!<br>\nI went with using <code>cargo-component</code> with the requirements that it should be in the users' PATH for now (it's just a PoC anyway).</p>",
        "id": 472325028,
        "sender_full_name": "raskyld",
        "timestamp": 1727123225
    }
]