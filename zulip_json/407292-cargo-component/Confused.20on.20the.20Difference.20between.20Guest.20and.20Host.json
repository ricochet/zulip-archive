[
    {
        "content": "<p>I see that <code>cargo component new --lib some</code> will provide some kind of template, but <a href=\"https://github.com/bytecodealliance/wit-bindgen\">https://github.com/bytecodealliance/wit-bindgen</a> seems to have a very different approach. So which one should I use for component model? and what's the difference between Guest and Host</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c54d5e84c8f2a41b49cb4e9f3f2f03f604820c34/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653638623139393262303637626439623166616239643537356362313337636137346636626361306262653537613239353562643433313430363539656466392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div>",
        "id": 442041935,
        "sender_full_name": "chaosprint",
        "timestamp": 1717327681
    },
    {
        "content": "<p>cargo component new and wit-bindgen::generate! produce the same code, wit-bindgen is older and cargo component fits better into the future workflow when compilers can directly output wasip2 and later. I still use wit-bindgen everywhere, but I'm not sure myself if that is meant to stay forever, someone deeper involved may know</p>\n<p>about Guest and Host, Guest is the component side, it has to implement the exports and may call the imports<br>\nHost is the other side, it needs to implement (or provide) the imports your component expects and it may call the exports of your component</p>\n<p>parts of the host may be implemented as other components, but from the viewpoint of your component, Guest is what the component needs to implement and host is the one who will call into the component and also provide the expected imports</p>",
        "id": 442230396,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1717415508
    }
]