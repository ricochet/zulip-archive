[
    {
        "content": "<p>In the wasmtime meeting yesterday we dove a bit into pulley and some theoretical optimizations. One thing <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> you mentioned was reducing the number of loads per instruction where currently the load-per-instruction-operand might be overly punishing us by saturating load/store ports in a cpu</p>\n<p>I was thinking about that last night and this morning I implemented a strategy where whenever we decode an instruction the decoder unconditionally loads a pointer's worth of bytes (e.g. 8 bytes on x64). Operands are then decoded from that via bit shifts. If the instruction is longer than 8 bytes it'll continue to load more afterwards. Basically I didn't change the pulley bytecode format at all, but I optimized the loads such that on average, on x64, there's only a single 64-bit load per instruction.</p>\n<p>For the tail-call interpreter loop this meant that at the end of an instruction handler you'd load 64-bits for the next instruction. The low 8 bits are used for a dynamic dispatch and the upper 56 bits are passed in a register to the next opcode. The next opcode then uses these 56 bits to decode the operands.</p>\n<p>I've confirmed looking at the disassembly of the tail-call interpreter that everything looks as expected. There's bit-twiddling where I'd expect, no extra overhead from the abstractions I'm using, and there's only a single load at the end of most handlers of data for the next instruction.</p>\n<p>So despite all this, the performance has relatively mixed results. For example this is a performance comparison of the \"mach loop\" interpreter with this load-64-bits trick vs the previous commit on <code>main</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">42746797.10</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">4341093.72</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.06</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.07</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">645100214</span><span class=\"w\"> </span><span class=\"mf\">648469690.10</span><span class=\"w\"> </span><span class=\"mi\">653317578</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">687997108</span><span class=\"w\"> </span><span class=\"mf\">691216487.20</span><span class=\"w\"> </span><span class=\"mi\">698783018</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">899905066.70</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">26179495.28</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.05</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.05</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">20179755580</span><span class=\"w\"> </span><span class=\"mf\">20198967934.80</span><span class=\"w\"> </span><span class=\"mi\">20236773749</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">19278160035</span><span class=\"w\"> </span><span class=\"mf\">19299062868.10</span><span class=\"w\"> </span><span class=\"mi\">19355235070</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">3095623.30</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">2128376.59</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.01</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.07</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">81785649</span><span class=\"w\"> </span><span class=\"mf\">83368590.70</span><span class=\"w\"> </span><span class=\"mi\">87006738</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">79519941</span><span class=\"w\"> </span><span class=\"mf\">80272967.40</span><span class=\"w\"> </span><span class=\"mi\">84093446</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<p>and this is a performance comparison of the tail-call-based interpreter loop:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">bz2</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">85980346.40</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">4256370.91</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.08</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.09</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">979172509</span><span class=\"w\"> </span><span class=\"mf\">982182980.40</span><span class=\"w\"> </span><span class=\"mi\">991260483</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">1067376846</span><span class=\"w\"> </span><span class=\"mf\">1068163326.80</span><span class=\"w\"> </span><span class=\"mi\">1071737075</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">pulldown</span><span class=\"o\">-</span><span class=\"n\">cmark</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">6865385.20</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">2141737.48</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.05</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.09</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">100417359</span><span class=\"w\"> </span><span class=\"mf\">101239118.00</span><span class=\"w\"> </span><span class=\"mi\">106632440</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">107581286</span><span class=\"w\"> </span><span class=\"mf\">108104503.20</span><span class=\"w\"> </span><span class=\"mi\">111904624</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span>\n\n<span class=\"n\">execution</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">cycles</span><span class=\"w\"> </span><span class=\"p\">::</span><span class=\"w\"> </span><span class=\"nc\">benchmarks</span><span class=\"o\">/</span><span class=\"n\">spidermonkey</span><span class=\"o\">/</span><span class=\"n\">benchmark</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n\n<span class=\"w\">  </span><span class=\"err\">Δ</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">741291892.60</span><span class=\"w\"> </span><span class=\"err\">±</span><span class=\"w\"> </span><span class=\"mf\">11310370.33</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">confidence</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">99</span><span class=\"o\">%</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"mf\">1.03</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"mf\">1.04</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">faster</span><span class=\"w\"> </span><span class=\"n\">than</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span><span class=\"o\">!</span>\n\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">20890036242</span><span class=\"w\"> </span><span class=\"mf\">20898157837.90</span><span class=\"w\"> </span><span class=\"mi\">20915333190</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span>\n<span class=\"w\">  </span><span class=\"p\">[</span><span class=\"mi\">21632673509</span><span class=\"w\"> </span><span class=\"mf\">21639449730.50</span><span class=\"w\"> </span><span class=\"mi\">21660859731</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">pulley</span><span class=\"o\">-</span><span class=\"n\">less</span><span class=\"o\">-</span><span class=\"n\">instruction</span><span class=\"o\">-</span><span class=\"n\">loads</span><span class=\"o\">-</span><span class=\"n\">tai</span><span class=\"p\">.</span><span class=\"n\">so</span>\n</code></pre></div>\n<p>the tl;dr; here being that this is a universal loss for the tail-call-dispatch interpreter loop and for the \"mach loop\" dispatch it's not always a win.</p>\n<p>I wanted to confirm though, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> is this the sort of optimization you were imagining?</p>",
        "id": 494416348,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737138478
    },
    {
        "content": "<p>As an example, this is the disassembly of <code>xmov</code> after the optimization I applied</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">0000000001</span><span class=\"n\">ffb110</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">pulley_interpreter</span><span class=\"p\">::</span><span class=\"n\">interp</span><span class=\"p\">::</span><span class=\"n\">tail_loop</span><span class=\"p\">::</span><span class=\"n\">xmov</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"w\">  </span><span class=\"nc\">push</span><span class=\"w\">   </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rsp</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"w\">  </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">edx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\">                      </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"n\">our</span><span class=\"w\"> </span><span class=\"n\">own</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"n\">shr</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x5</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"n\">and</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0xf8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span>\n<span class=\"w\">  </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"mh\">0x200</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">tricks</span><span class=\"o\">/</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"w\"> </span><span class=\"n\">indexed</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">eax</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">and</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x1f</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">edx</span>\n<span class=\"w\">  </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mh\">0x200</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rdi</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\">        </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">tricks</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"n\">dst</span><span class=\"w\"> </span><span class=\"n\">register</span><span class=\"w\"> </span><span class=\"n\">indexed</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">edx</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"n\">mov</span><span class=\"w\">    </span><span class=\"o\">-</span><span class=\"mh\">0x5</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rsi</span><span class=\"p\">),</span><span class=\"o\">%</span><span class=\"n\">rdx</span><span class=\"w\">                </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">next</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">add</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x3</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rsi</span>\n<span class=\"w\">  </span><span class=\"n\">movzbl</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"n\">dl</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">eax</span><span class=\"w\">                       </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">extract</span><span class=\"w\"> </span><span class=\"n\">opcode</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">dispatch</span><span class=\"w\"> </span><span class=\"n\">on</span>\n<span class=\"w\">  </span><span class=\"n\">shr</span><span class=\"w\">    </span><span class=\"cp\">$</span><span class=\"mh\">0x8</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rdx</span>\n<span class=\"w\">  </span><span class=\"n\">lea</span><span class=\"w\">    </span><span class=\"n\">pulley_interpreter</span><span class=\"p\">::</span><span class=\"n\">interp</span><span class=\"p\">::</span><span class=\"n\">tail_loop</span><span class=\"p\">::</span><span class=\"n\">OPCODE_HANDLER_TABLE</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rcx</span>\n<span class=\"w\">  </span><span class=\"n\">pop</span><span class=\"w\">    </span><span class=\"o\">%</span><span class=\"n\">rbp</span>\n<span class=\"err\">→</span><span class=\"w\"> </span><span class=\"n\">jmp</span><span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"o\">%</span><span class=\"n\">rcx</span><span class=\"p\">,</span><span class=\"o\">%</span><span class=\"n\">rax</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\">                 </span><span class=\"p\">;;</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">dispatch</span>\n</code></pre></div>",
        "id": 494416815,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737138626
    },
    {
        "content": "<p>basically yeah that's it; so this data point shows that the loads aren't the bottleneck -- interesting!</p>",
        "id": 494418492,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737139307
    },
    {
        "content": "<p>at this point looking at uarch perf counters to see what is the bottleneck seems worthwhile; but honestly the biggest lever is probably reducing opcode count with macro-ops, exactly as you've been doing...</p>",
        "id": 494418615,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737139346
    },
    {
        "content": "<p>alas, well I might try to land this work behind a #[cfg] since it might end up helping in the future</p>",
        "id": 494418709,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737139391
    },
    {
        "content": "<p>oh, one more optimization I didn't mention yesterday: there's the concept of a \"threaded interpreter\" (name predates threads-as-parallelism-primitives) where you build a table of function pointers as a translation of the bytecode; that would replace the movzbl/shr/lea/jmp dispatching through the opcode table with probably an <code>add $8, %ptr; jmp *(%ptr)</code>. a little tricky to do control flow (have to translate the dests to indices in the handler-func-table) but possible. I'd check how much time is spent on the last 5 instructions first before pursuing of course</p>",
        "id": 494419281,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737139597
    },
    {
        "content": "<p>so sort of like a relocation pass after we've loaded the bytecode?</p>",
        "id": 494419422,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737139650
    },
    {
        "content": "<p>yeah, I suppose you would want to build the whole thing as a side-table computation after loading bytecode, since it depends on runtime func-pointer values</p>",
        "id": 494419557,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737139690
    },
    {
        "content": "<p>apparently vtune says:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Microarchitecture</span><span class=\"w\"> </span><span class=\"n\">Usage</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Pipeline</span><span class=\"w\"> </span><span class=\"n\">Slots</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">You</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"n\">efficiency</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">platform</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">too</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Possible</span><span class=\"w\"> </span><span class=\"n\">cause</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">memory</span><span class=\"w\"> </span><span class=\"n\">stalls</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">starvation</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"n\">misprediction</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">long</span><span class=\"w\"> </span><span class=\"n\">latency</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Next</span><span class=\"w\"> </span><span class=\"n\">steps</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Run</span><span class=\"w\"> </span><span class=\"n\">Microarchitecture</span><span class=\"w\"> </span><span class=\"n\">Exploration</span><span class=\"w\"> </span><span class=\"n\">analysis</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">identify</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">cause</span>\n<span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">low</span><span class=\"w\"> </span><span class=\"n\">microarchitecture</span><span class=\"w\"> </span><span class=\"n\">usage</span><span class=\"w\"> </span><span class=\"n\">efficiency</span><span class=\"p\">.</span>\n<span class=\"w\"> </span><span class=\"o\">|</span>\n<span class=\"w\">    </span><span class=\"n\">Performance</span><span class=\"o\">-</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">P</span><span class=\"o\">-</span><span class=\"n\">core</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">Retiring</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Pipeline</span><span class=\"w\"> </span><span class=\"n\">Slots</span>\n<span class=\"w\">        </span><span class=\"n\">Front</span><span class=\"o\">-</span><span class=\"n\">End</span><span class=\"w\"> </span><span class=\"n\">Bound</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">0.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Pipeline</span><span class=\"w\"> </span><span class=\"n\">Slots</span>\n<span class=\"w\">        </span><span class=\"n\">Bad</span><span class=\"w\"> </span><span class=\"n\">Speculation</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mf\">100.0</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">Pipeline</span><span class=\"w\"> </span><span class=\"n\">Slots</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"w\"> </span><span class=\"n\">significant</span><span class=\"w\"> </span><span class=\"n\">proportion</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">pipeline</span><span class=\"w\"> </span><span class=\"n\">slots</span><span class=\"w\"> </span><span class=\"n\">containing</span><span class=\"w\"> </span><span class=\"n\">useful</span><span class=\"w\"> </span><span class=\"n\">work</span><span class=\"w\"> </span><span class=\"n\">are</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">being</span><span class=\"w\"> </span><span class=\"n\">cancelled</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">This</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">mispredicting</span><span class=\"w\"> </span><span class=\"n\">branches</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">by</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">machine</span><span class=\"w\"> </span><span class=\"n\">clears</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">metric</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">may</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">highlighted</span><span class=\"w\"> </span><span class=\"n\">due</span><span class=\"w\"> </span><span class=\"n\">to</span>\n<span class=\"w\">         </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">Branch</span><span class=\"w\"> </span><span class=\"n\">Resteers</span><span class=\"w\"> </span><span class=\"n\">issue</span><span class=\"p\">.</span>\n<span class=\"w\">         </span><span class=\"o\">|</span>\n</code></pre></div>",
        "id": 494421013,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737140222
    },
    {
        "content": "<p>\"you are using 0.0% of your CPU, try harder\"</p>",
        "id": 494422497,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737140701
    },
    {
        "content": "<p>mispredicts from the indirect predictor don't surprise me but 100% is very weird.</p>",
        "id": 494422547,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737140717
    },
    {
        "content": "<p>Spectre mitigations turning off indirect predictor entirely?</p>",
        "id": 494422589,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737140738
    },
    {
        "content": "<p>(I'd try <code>perf</code> too, fwiw)</p>",
        "id": 494422631,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737140755
    },
    {
        "content": "<p>this is the uarch-exploration report I think <a href=\"https://gist.github.com/alexcrichton/75eca31603706054fb2dcc83a7c0b5be\">https://gist.github.com/alexcrichton/75eca31603706054fb2dcc83a7c0b5be</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/alexcrichton/75eca31603706054fb2dcc83a7c0b5be\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/91f9baed8f4fc08c462d1a4de5a8c23942d45e97/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/alexcrichton/75eca31603706054fb2dcc83a7c0b5be\" title=\"foo.txt\">foo.txt</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 494422638,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737140759
    },
    {
        "content": "<p>but I can't really make heads or tails of this</p>",
        "id": 494422703,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737140766
    },
    {
        "content": "<p>I've only ever really done perf sampling, is there like a general \"perf show me a uarch summary\" command?</p>",
        "id": 494422784,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737140801
    },
    {
        "content": "<p><code>perf list</code> shows all the events, then <code>perf stat -e EVENT ...</code> to count it (multiple <code>-e</code> supported, I usually do cycles, instructions, and whatever events of interest)</p>",
        "id": 494422876,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737140841
    },
    {
        "content": "<p>heh <code>perf list</code> has 6500 events</p>",
        "id": 494422945,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737140875
    },
    {
        "content": "<p>go Intel perf counter team! 10k is close, you can do it</p>",
        "id": 494423037,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737140898
    },
    {
        "content": "<p>the summary above doesn't tell me too much but does have some high-level data points: issue port utilization is low, so we're not bottlenecked on, say, too many ALU instructions; L1 stalls 16% of the time; running out of the DSB (predecoded cache) most of the time so not an L1i / too much code issue</p>",
        "id": 494423363,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141028
    },
    {
        "content": "<p>main thing is that IPC is &gt; 2, so this is really a \"too many instructions\" kind of issue I think</p>",
        "id": 494423405,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141045
    },
    {
        "content": "<p>in other words, main remedy is fewer bytecode ops, since each bytecode op body is pretty minimal</p>",
        "id": 494423429,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141057
    },
    {
        "content": "<p>hm ok that makes sense to me yeah</p>",
        "id": 494423495,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141079
    },
    {
        "content": "<p>with <code>perf stat</code> I got:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">     </span><span class=\"o\">&lt;</span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">counted</span><span class=\"o\">&gt;</span><span class=\"w\">      </span><span class=\"n\">cpu_atom</span><span class=\"o\">/</span><span class=\"n\">br_misp_retired</span><span class=\"p\">.</span><span class=\"n\">all_branches</span><span class=\"o\">/</span><span class=\"w\">                                        </span><span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">       </span><span class=\"mi\">202</span><span class=\"p\">,</span><span class=\"mi\">601</span><span class=\"p\">,</span><span class=\"mi\">699</span><span class=\"w\">      </span><span class=\"n\">cpu_core</span><span class=\"o\">/</span><span class=\"n\">br_misp_retired</span><span class=\"p\">.</span><span class=\"n\">all_branches</span><span class=\"o\">/</span>\n<span class=\"w\">     </span><span class=\"o\">&lt;</span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">counted</span><span class=\"o\">&gt;</span><span class=\"w\">      </span><span class=\"n\">cpu_atom</span><span class=\"o\">/</span><span class=\"n\">br_inst_retired</span><span class=\"p\">.</span><span class=\"n\">all_branches</span><span class=\"o\">/</span><span class=\"w\">                                        </span><span class=\"p\">(</span><span class=\"mf\">0.00</span><span class=\"o\">%</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"mi\">21</span><span class=\"p\">,</span><span class=\"mi\">691</span><span class=\"p\">,</span><span class=\"mi\">599</span><span class=\"p\">,</span><span class=\"mi\">697</span><span class=\"w\">      </span><span class=\"n\">cpu_core</span><span class=\"o\">/</span><span class=\"n\">br_inst_retired</span><span class=\"p\">.</span><span class=\"n\">all_branches</span><span class=\"o\">/</span>\n</code></pre></div>",
        "id": 494423541,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141097
    },
    {
        "content": "<p>which doesn't look like ~90% misprediction rate</p>",
        "id": 494423568,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141109
    },
    {
        "content": "<p>I suppose 10% mispredict is a high enough rate to consume 90% of pipeline slots</p>",
        "id": 494423680,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141151
    },
    {
        "content": "<p>10 MPKI (misses per thousand instructions) is somewhat high when one has giant instruction windows of today but doesn't scream \"major problem\" to me</p>",
        "id": 494423685,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141154
    },
    {
        "content": "<p>right, I think it's about as good as one can hope for: not pathological (every indirect missing for some reason), predictor is doing its job, it's just hard to predict a bunch of indirects in sequence</p>",
        "id": 494423790,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141213
    },
    {
        "content": "<p>can wasm switch to an opcode-per-program</p>",
        "id": 494423835,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141236
    },
    {
        "content": "<p>like can my wasm module just be one opcode</p>",
        "id": 494423846,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141242
    },
    {
        "content": "<p><code>(func $fib (param i32) (result i32) fib</code></p>",
        "id": 494423913,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141253
    },
    {
        "content": "<p>pulley op <code>serve_http_request_using_program1.wasm</code></p>",
        "id": 494423919,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141255
    },
    {
        "content": "<p>in any case fun exploration!</p>",
        "id": 494423977,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737141284
    },
    {
        "content": "<p>yeah, good to confirm nothing too wonky going on</p>",
        "id": 494424058,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1737141320
    },
    {
        "content": "<p>Have you done the <code>perf</code> instrumentation on <code>switch</code> or <code>tail-call</code> based dispatch? Would be kinda interesting to know if they differ with respect to branch mispredictions. At least in theory <code>tail-call</code> dispatch should be simpler for a branch predictor to predict. 90% branch hit rate is low but also kinda normal for an interpreter.</p>",
        "id": 494441011,
        "sender_full_name": "Robin Freyler",
        "timestamp": 1737148359
    },
    {
        "content": "<p>not yet, no, but so far most of benchmarking hasn't shown either as a clear winner, sometimes one is faster and sometimes the other is</p>",
        "id": 494443130,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737149269
    },
    {
        "content": "<p>which might just mean that something else is the bigger bottleneck right now</p>",
        "id": 494443150,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737149279
    }
]