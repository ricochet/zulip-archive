[
    {
        "content": "<p>When a host export function calls a guest import, the guest import can then call the same or a different host export.</p>\n<p>The host export function has access to the <code>Caller&lt;T&gt;</code>, which contains a normal <code>&amp;mut T</code> inside. When the guest function is called, causing the host code to subsequently enter a host export a new <code>Caller&lt;T&gt;</code> will be available.</p>\n<p>These two callers will exist simultaneously in the call stack, and alias <code>&amp;mut T</code>.</p>\n<p>What I wonder is how it is possible, and how the MIR stacked borrows tags are upheld. I know that mutable reborrowing can solve some of these problems, but I suspect that this is not the case here and there is unsafe code going on to reconstruct a valid enough mutable reference without provenance before the call from the guest side, while a reference to the store and user data already exists higher up the call stack with a JIT block inbetween.</p>\n<p>Here is a link to an example of this reentrant call and access to <code>Caller</code>: <a href=\"https://github.com/ten3roberts/wasmtime-example/blob/daef67392558456415ddd880f76f231378c8618a/src/main.rs#L18-L37\">https://github.com/ten3roberts/wasmtime-example/blob/daef67392558456415ddd880f76f231378c8618a/src/main.rs#L18-L37</a></p>",
        "id": 403415097,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1700582629
    },
    {
        "content": "<p>The guest code isn't rust so yes there is certainly some <code>unsafe</code> code at the guest/host boundaries (as with any FFI).</p>",
        "id": 403425324,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700585960
    },
    {
        "content": "<p>The way I think about this is that it's the same as  passing <code>&amp;mut T</code> as an argument a to functions in Rust. You can have multiple frames on the stack which all refer to the same <code>&amp;mut T</code>, but the key is that each frame knows that the frame beneath it also has access.</p>\n<p>For example calling wasm requires giving the entire <code>Store&lt;T&gt;</code> (e.g. the entire <code>T</code>) via mutable borrow back to Wasmtime. When Wasmtime calls the host Rust code it can give back the <code>Store&lt;T&gt;</code> borrow through <code>Caller&lt;T&gt;</code></p>",
        "id": 403439713,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700591166
    },
    {
        "content": "<p>while it hasn't been proven out the intention is that Wasmtime's API could theoretically be implemented entirely with safe code</p>",
        "id": 403439772,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700591194
    }
]