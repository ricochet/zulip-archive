[
    {
        "content": "<p>I have a WASM binary that receives a url to download and a file path to store the downloaded data to. It also only has access to both these resources and otherwise is fully sandboxed.</p>\n<p>My program needs to download a large amount of files (100,000) and I want to make this as fast as possible. In pure Rust, I have used <code>futures::stream</code> and <code>buffered_unordered</code> to do the downloading in parallel. </p>\n<p>Can I do the same using my WASM binary? Instead of using a Rust HTTP library, I want to instantiate my WASM binary and run it for a given URL. What is the best way to reduce overall overhead? </p>\n<p>Since each instantiated and running module has different permissions, it seems that I have to re-link them every single time. Which seems to be a big overhead performance-wise.</p>\n<p>My current Rust code is based on this blogpost: <a href=\"https://patshaughnessy.net/2020/1/20/downloading-100000-files-using-async-rust\">https://patshaughnessy.net/2020/1/20/downloading-100000-files-using-async-rust</a></p>",
        "id": 416565312,
        "sender_full_name": "mainrs",
        "timestamp": 1705582491
    },
    {
        "content": "<p>For parallel execution, you'll need to instantiate the component multiple times and invoke each instance in a separate thread (or Tokio task).  For concurrent execution, <code>buffer_undordered</code> works just fine, as this example illustrates: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/bin/api_proxy_streaming.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/test-programs/src/bin/api_proxy_streaming.rs</a></p>",
        "id": 416582360,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705588076
    },
    {
        "content": "<p>side note: you can instantiate_pre the component which greatly reduces the overhead when running multiple instances of the same component</p>",
        "id": 416583513,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1705588433
    },
    {
        "content": "<p>Thanks for the replies!</p>\n<p>I am confused about the usage together with Preview2 of WASI though. Since that requires me to create a new store for each module and thus each module has to get instantiated again (AFAIK).</p>\n<p><a href=\"https://docs.wasmtime.dev/examples-rust-wasi.html#async-example\">https://docs.wasmtime.dev/examples-rust-wasi.html#async-example</a></p>",
        "id": 416585555,
        "sender_full_name": "mainrs",
        "timestamp": 1705589008
    },
    {
        "content": "<p>the instantiate_pre methods all return an InstancePre object, InstancePre executes as much as possible, you only add a store for each instance you want, the main cpu intensive part of instantiating only needs to be done once</p>",
        "id": 416587820,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1705589695
    },
    {
        "content": "<p><a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Linker.html#method.instantiate_pre\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.Linker.html#method.instantiate_pre</a></p>",
        "id": 416588026,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1705589760
    },
    {
        "content": "<p>Besides using <code>instantiate_pre</code>, you can also reuse instances (and their stores) for multiple invocations.  I.e. you only need to create as many instances as you have cores, and then you can invoke exports on those instances as many times as you like, passing as much work (i.e. as many URLs) as you like to each invocation.</p>",
        "id": 416603634,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705594231
    }
]