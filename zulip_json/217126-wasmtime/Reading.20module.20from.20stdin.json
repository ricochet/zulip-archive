[
    {
        "content": "<p>Hi, I tried some bash tricks to execute piped webassembly binaries with wasmtime-cli 1.0.1:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span><span class=\"w\"></span>\n<span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">fd</span><span class=\"o\">/</span><span class=\"mi\">63</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">fd</span><span class=\"o\">/</span><span class=\"mi\">63</span><span class=\"err\">`</span>: <span class=\"nc\">input</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"n\">aren</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">utf</span><span class=\"o\">-</span><span class=\"mi\">8</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This happened because wasmtime CLI's run command opens and closes the module file before executing. It reads a 4-byte header to determine whether the module is precompiled or not. This is fine on regular files, but on piped file(or streams?) this pre-read 4 bytes will be lost so wasmtime seems to fail parsing the rest of the module. (see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/e63771f2d921cdce440620dbf38bd3e186747b1e/src/commands/run.rs#L420\">https://github.com/bytecodealliance/wasmtime/blob/e63771f2d921cdce440620dbf38bd3e186747b1e/src/commands/run.rs#L420</a> , and thanks to my friend for pointing it out ;D)<br>\nThe same happens on <code>wasmtime /dev/stdin</code>.</p>\n<p>Anyway, quite hack-ish, but this succeedes to run:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">dev</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">printf</span><span class=\"w\"> </span><span class=\"s\">\"0000\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">hello</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"o\">!</span><span class=\"w\"></span>\n</code></pre></div>\n<p>because I supplied  the extra bytes to be discarded for the header check.</p>\n<p>I know this hack should be discouraged as it breaks compatibility at all, so I want to implement a feature on wasmtime CLI about treating<code>-</code> as a stdin,  e.g. <code>curl -sSf https://example.com/hello.wasm | wasmtime -</code> or <code>wasmtime run -</code>.</p>\n<p>I look forward to this feature be very useful, as the widespread unix tool installation pattern <code>curl {url} | bash -</code> is considered bad in the view of security, AFAIK, and wasmtime can provide an extra sandboxing layer for this.</p>\n<p>Does it make sense to wasmtime devs? Opinions appreciated. Thanks in advance.<br>\n(I searched wasmtime issue tracker with stdin/standard keyword but couldn't find any relevant issues. Please understand if someone already got this <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/e63771f2d921cdce440620dbf38bd3e186747b1e/src/commands/run.rs#L420\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b91ff0e18256c206a77b735bd36cff86ef9a2584\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363761336634643834306334346265623736626564663864613339656663373363346361616462613861356563636363393963313632303832353238653664662f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/e63771f2d921cdce440620dbf38bd3e186747b1e/src/commands/run.rs#L420\" title=\"wasmtime/run.rs at e63771f2d921cdce440620dbf38bd3e186747b1e · bytecodealliance/wasmtime\">wasmtime/run.rs at e63771f2d921cdce440620dbf38bd3e186747b1e · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 302484255,
        "sender_full_name": "Nam Junghyun",
        "timestamp": 1664984026
    },
    {
        "content": "<blockquote>\n<p>so I want to implement a feature on wasmtime CLI about treating- as a stdin</p>\n</blockquote>\n<p>makes sense to me</p>",
        "id": 302486490,
        "sender_full_name": "bjorn3",
        "timestamp": 1664984615
    },
    {
        "content": "<blockquote>\n<p>so I want to implement a feature on wasmtime CLI about treating- as a stdin</p>\n</blockquote>\n<p>makes sense to me</p>",
        "id": 302486520,
        "sender_full_name": "bjorn3",
        "timestamp": 1664984622
    },
    {
        "content": "<p>When running from the CLI, Wasmtime connects the host-process stdin to the wasm instance stdin. In this case, would we pass an empty string as stdin to the wasm instance?</p>",
        "id": 302486931,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1664984746
    },
    {
        "content": "<p>I don't think special-casing \"-\" is the most important part here. I'd prefer to avoid having wasmtime-cli open the input module twice, which would mean that /dev/stdin and /dev/fd/* would just work. At that point, special treatment for a filename of \"-\" would be a nice convenience.<br>\nI think the way to do this is to open the given path using <code>MmapVec</code> if <code>allow_precompiled</code> is true, but if that flag isn't provided or mmap fails, then read the file into a buffer. After that, operate only on <code>&amp;[u8]</code>: check the buffer for the ELF header; if present and <code>allow_precompiled</code>, then pass the buffer to <code>Module::deserialize</code>; otherwise pass the buffer to <code>Module::new</code>.<br>\n<span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, I think the answer is yes: if we've read stdin up to EOF, then the guest would immediately see EOF.</p>",
        "id": 302512858,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1664992475
    },
    {
        "content": "<blockquote>\n<p>I don't think special-casing \"-\" is the most important part here. (...)</p>\n</blockquote>\n<p>I agree on that. Will try to follow your guidance to implement this. As you pointed out, should I create two separate PRs, each for buffering(not to open-close-reopen) and <code>-</code> sugar?</p>\n<blockquote>\n<p>if we've read stdin up to EOF, then the guest would immediately see EOF.</p>\n</blockquote>\n<p>IIUC this would make installation tools with prompts (like <a href=\"http://sh.rustup.rs\">sh.rustup.rs</a>) painful to use  with <code>wasmtime -</code> as they'll get EOF without getting any user feedback .<br>\nBriefly read <code>rustup-init.sh</code> and the workaround seems like directly reading from <code>/dev/tty</code>, but as wasmtime denies file access unless explicitly allowed, there could be three options:</p>\n<ol>\n<li>Do nothing; programs targeting WASI and Wasmtime should handle stdin EOF case and try falling back to <code>/dev/tty</code>, and users should explicitly allow access to <code>/dev/tty</code> like <code>curl &lt;url&gt; | wasmtime - --dir /dev/tty</code>, which could be a little bit annoying for most users(but they would understand this is for the sake of security I think).</li>\n<li>Only add implicit <code>--dir /dev/tty</code> for <code>-</code> inputs, which is less vigilant approach on security perspective (a flag like --no-allow-implicit-tty` may be added)</li>\n<li>Automatically redirect <code>/dev/tty</code> to stdin for <code>-</code> inputs, which would be most aggressive approach but would allow exsiting WASI binaries run with piped inputs seamlessly.</li>\n</ol>\n<p>Of course this may considered a separate topic/feature to no-module-reopening  and <code>-</code> \"sugar\"s.</p>\n<p>I brought some part of the <code>rustup-init.sh</code> code for reference here. <code>$need_tty</code> is set to \"yes\" by default and disabled only if user wants to skip with an additional flag:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>    <span class=\"k\">if</span> <span class=\"o\">[</span> <span class=\"s2\">\"</span><span class=\"nv\">$need_tty</span><span class=\"s2\">\"</span> <span class=\"o\">=</span> <span class=\"s2\">\"yes\"</span> <span class=\"o\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">[</span> ! -t <span class=\"m\">0</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n        <span class=\"c1\"># The installer is going to want to ask for confirmation by</span>\n        <span class=\"c1\"># reading stdin.  This script was piped into `sh` though and</span>\n        <span class=\"c1\"># doesn't have stdin to pass to its children. Instead we're going</span>\n        <span class=\"c1\"># to explicitly connect /dev/tty to the installer's stdin.</span>\n        <span class=\"k\">if</span> <span class=\"o\">[</span> ! -t <span class=\"m\">1</span> <span class=\"o\">]</span><span class=\"p\">;</span> <span class=\"k\">then</span>\n            err <span class=\"s2\">\"Unable to run interactively. Run with -y to accept defaults, --help for additional options\"</span>\n        <span class=\"k\">fi</span>\n\n        ignore <span class=\"s2\">\"</span><span class=\"nv\">$_file</span><span class=\"s2\">\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$@</span><span class=\"s2\">\"</span> &lt; /dev/tty\n</code></pre></div>",
        "id": 302580751,
        "sender_full_name": "Nam Junghyun",
        "timestamp": 1665029713
    },
    {
        "content": "<p>I implemented this feature on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5035\">https://github.com/bytecodealliance/wasmtime/pull/5035</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5035\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/af511c5fb0295f370358880ea41a41c8611e1a4d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363562303263636236663936383765643533386637303837653462396263346662343237313861306530396638646438373239326435303133393066643738382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35303335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5035\" title=\"Run piped modules by cr0sh · Pull Request #5035 · bytecodealliance/wasmtime\">Run piped modules by cr0sh · Pull Request #5035 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is not discussed in the issue tracker, but on this Zulip thread.\nPreviously load_module opened a file on path to check if the module is precompiled, then closes before constructing the Module ...</div></div></div>",
        "id": 303119349,
        "sender_full_name": "Nam Junghyun",
        "timestamp": 1665313848
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"551563\">Nam Junghyun</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Reading.20module.20from.20stdin/near/302580751\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>if we've read stdin up to EOF, then the guest would immediately see EOF.</p>\n</blockquote>\n<p>IIUC this would make installation tools with prompts (like <a href=\"http://sh.rustup.rs\">sh.rustup.rs</a>) painful to use  with <code>wasmtime -</code> as they'll get EOF without getting any user feedback .<br>\nBriefly read <code>rustup-init.sh</code> and the workaround seems like directly reading from <code>/dev/tty</code>...</p>\n</blockquote>\n<p>Another option is to change the idiom. On bash, something like <code>wasmtime &lt;(curl url)</code> implicitly creates a pipe and binds it to a filename that's substituted into the command. Then the guest's stdin remains connected to the TTY.</p>",
        "id": 305899862,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1666639926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"504918\">Jamey Sharp</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Reading.20module.20from.20stdin/near/305899862\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"551563\">Nam Junghyun</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Reading.20module.20from.20stdin/near/302580751\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>if we've read stdin up to EOF, then the guest would immediately see EOF.</p>\n</blockquote>\n<p>IIUC this would make installation tools with prompts (like <a href=\"http://sh.rustup.rs\">sh.rustup.rs</a>) painful to use  with <code>wasmtime -</code> as they'll get EOF without getting any user feedback .<br>\nBriefly read <code>rustup-init.sh</code> and the workaround seems like directly reading from <code>/dev/tty</code>...</p>\n</blockquote>\n<p>Another option is to change the idiom. On bash, something like <code>wasmtime &lt;(curl url)</code> implicitly creates a pipe and binds it to a filename that's substituted into the command. Then the guest's stdin remains connected to the TTY.</p>\n</blockquote>\n<p>This seems to be a good alternative. Thanks!</p>",
        "id": 306253362,
        "sender_full_name": "Nam Junghyun",
        "timestamp": 1666794673
    },
    {
        "content": "<p>Some updates:</p>\n<ul>\n<li>I'm following <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> 's mentoring about moving the ELF header magic of the wasmtime CLI into the wasmtime crate. This will introduce a new method on <code>Module</code> named tentatively <code>from_trusted_file</code>.</li>\n<li>Current branch is a bit outdated so I rebased and dropped some commits about actual implementations (leaving added tests remained) to follow the guidance of <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span>. </li>\n<li>I would like to close this PR and topic when the re-implementation is complete and create a new PR so we can focus on the new API thing not the fifo'd module thing.</li>\n</ul>",
        "id": 310949240,
        "sender_full_name": "Nam Junghyun",
        "timestamp": 1668818920
    },
    {
        "content": "<p>Sounds like a reasonable plan. Let us know if you have any questions!</p>",
        "id": 310950707,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1668819805
    }
]