[
    {
        "content": "<p>Hi everyone <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span>. I came here to share the Wasmtime Ruby gem I've been working on for a little while.</p>\n<p><a href=\"https://github.com/dtcristo/wasmtime-ruby\" title=\"https://github.com/dtcristo/wasmtime-ruby\">https://github.com/dtcristo/wasmtime-ruby</a></p>\n<p>It's quite primitive at the moment, but I hope to wrap more of the Wasmtime API over time. I will aim to keep the Ruby API as close to the Wasmtime API as possible just like <code>wasmtime-py</code>.</p>\n<p>I'm using the Rust embedding API directly, rather than the C API. Not sure if this is the best approach, but I'm not super comfortable with C and would rather write Rust :). But it works and the Rust support for Ruby native extensions seems good enough. I've opted for shipping pre-compiled binaries (just Linux and macOS right now) in the gem so users don't need Rust to use it.</p>\n<p>I'm pretty excited for Interface Types support to drop and I'm following <a href=\"https://github.com/bytecodealliance/wasmtime/issues/677\" title=\"https://github.com/bytecodealliance/wasmtime/issues/677\">the issue</a> closely. Supporting this will be important.</p>\n<p>I'm keen for any feedback.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dtcristo/wasmtime-ruby\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/1206028?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dtcristo/wasmtime-ruby\" title=\"dtcristo/wasmtime-ruby\">dtcristo/wasmtime-ruby</a></div><div class=\"message_embed_description\">Wasmtime WebAssembly runtime in Ruby. Contribute to dtcristo/wasmtime-ruby development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/677\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/677\" title=\"Support for Interface Types in wasmtime API 路 Issue #677 路 bytecodealliance/wasmtime\">Support for Interface Types in wasmtime API 路 Issue #677 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I&#39;d like to open this as a sort of meta-issue about supporting WebAssembly Interface Types in the wasmtime crate and API. The current support via the crates/interface-types crate for the purpos...</div></div></div>",
        "id": 196849756,
        "sender_full_name": "David Cristofaro",
        "timestamp": 1588900964
    },
    {
        "content": "<p>Also, if you folks like it and once it gets more feature complete and has docs. I'd be happy to eventually migrate it to the <code>bytecodealliance</code> org. I've chosen the <code>Apache-2.0 WITH LLVM-exception</code> license for compatibility.</p>",
        "id": 196850578,
        "sender_full_name": "David Cristofaro",
        "timestamp": 1588902151
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"298677\">@David Cristofaro</span> nice! At the very least we should definitely add to the wasmtime README once you feel the bindings are ready</p>",
        "id": 196906321,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588950193
    },
    {
        "content": "<p>Hey team! I have a small function that manipulates strings in AssemblyScript, successfully built into a .wasm release package that I'm trying to call with Ruby.</p>\n<p>However, using wasmtime-rb has been a little problematic for me. I want to pass a Ruby string in, and get a Ruby string out.</p>\n<p>For getting the Ruby string out, I understood I need to read the instance memory bytes in the UTF-16 encoding, and whatever I return from the function I can read fine. However, I'm struggling with setting up the input correctly.</p>\n<p>I tried to allocate my string to the instance memory (successfully), and run the function with a number pointing to the memory location (successfully) - but inside of the function it reports the AssemblyScript string as empty.</p>\n<p>Here's the AssemblyScript:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">testString</span><span class=\"p\">(</span><span class=\"nx\">inputString</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"p\">)</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">string</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"sb\">`Str length: </span><span class=\"si\">${</span><span class=\"nx\">inputString</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"si\">}</span><span class=\"sb\">, string: &gt;&gt;</span><span class=\"si\">${</span><span class=\"nx\">inputString</span><span class=\"si\">}</span><span class=\"sb\">&lt;&lt;`</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And here's how I try to call it with Ruby:</p>\n<div class=\"codehilite\" data-code-language=\"Ruby\"><pre><span></span><code><span class=\"nb\">require</span><span class=\"w\"> </span><span class=\"s1\">'wasmtime'</span>\n\n<span class=\"c1\"># Helper function to read a null-terminated string from WASM memory</span>\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">read_string</span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[]</span>\n<span class=\"w\">  </span><span class=\"kp\">loop</span><span class=\"w\"> </span><span class=\"k\">do</span>\n<span class=\"w\">    </span><span class=\"n\">byte1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">byte2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"k\">break</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">byte1</span><span class=\"o\">.</span><span class=\"n\">nil?</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">byte2</span><span class=\"o\">.</span><span class=\"n\">nil?</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">byte1</span><span class=\"o\">.</span><span class=\"n\">bytes</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"n\">byte2</span><span class=\"o\">.</span><span class=\"n\">bytes</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">byte1</span><span class=\"o\">.</span><span class=\"n\">bytes</span><span class=\"o\">.</span><span class=\"n\">first</span>\n<span class=\"w\">    </span><span class=\"n\">bytes</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"n\">byte2</span><span class=\"o\">.</span><span class=\"n\">bytes</span><span class=\"o\">.</span><span class=\"n\">first</span>\n<span class=\"w\">    </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"w\">  </span><span class=\"k\">end</span>\n<span class=\"w\">  </span><span class=\"n\">bytes</span><span class=\"o\">.</span><span class=\"n\">pack</span><span class=\"p\">(</span><span class=\"s1\">'C*'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">force_encoding</span><span class=\"p\">(</span><span class=\"s1\">'UTF-16LE'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s1\">'UTF-8'</span><span class=\"p\">)</span>\n<span class=\"k\">end</span>\n\n<span class=\"c1\"># Load the WebAssembly module bytes</span>\n<span class=\"n\">wasm_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">File</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s1\">'build/release.wasm'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">mode</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create an engine and store</span>\n<span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Wasmtime</span><span class=\"o\">::</span><span class=\"no\">Engine</span><span class=\"o\">.</span><span class=\"n\">new</span>\n<span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Wasmtime</span><span class=\"o\">::</span><span class=\"no\">Store</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compile the module</span>\n<span class=\"n\">mod</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Wasmtime</span><span class=\"o\">::</span><span class=\"no\">Module</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasm_bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Instantiate the module with the imports</span>\n<span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"no\">Wasmtime</span><span class=\"o\">::</span><span class=\"no\">Instance</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mod</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">[]</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Access the exported memory</span>\n<span class=\"n\">instance_memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s1\">'memory'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">to_memory</span>\n\n<span class=\"c1\"># Access the exported 'testString' function</span>\n<span class=\"c1\"># TODO: https://docs.wasmtime.dev/api/wasmtime/struct.ExternRef.html probably need to define the ExternRef to correctly work with host strings, which is what I want here?</span>\n<span class=\"n\">test_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">exports</span><span class=\"o\">[</span><span class=\"s1\">'testString'</span><span class=\"o\">].</span><span class=\"n\">to_func</span>\n\n<span class=\"n\">input_string</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"Hello, Wasm!\"</span>\n<span class=\"c1\"># Write the string to WASM memory</span>\n<span class=\"c1\"># TODO: no idea which pointer is a good pointer; 0x00 didn't work, 0x1000 didn't work</span>\n<span class=\"n\">string_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x30</span>\n<span class=\"n\">instance_memory</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">string_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input_string</span><span class=\"p\">)</span>\n\n<span class=\"nb\">p</span><span class=\"w\"> </span><span class=\"s2\">\"Calling testString(</span><span class=\"si\">#{</span><span class=\"n\">string_ptr</span><span class=\"si\">}</span><span class=\"s2\">, </span><span class=\"si\">#{</span><span class=\"n\">input_string</span><span class=\"o\">.</span><span class=\"n\">bytesize</span><span class=\"si\">}</span><span class=\"s2\">)\"</span>\n<span class=\"n\">result_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">test_string</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">string_ptr</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read the result string from WASM memory</span>\n<span class=\"nb\">p</span><span class=\"w\"> </span><span class=\"s2\">\"Result pointer: </span><span class=\"si\">#{</span><span class=\"n\">result_ptr</span><span class=\"si\">}</span><span class=\"s2\">, reading from memory\"</span>\n<span class=\"nb\">p</span><span class=\"w\"> </span><span class=\"n\">read_string</span><span class=\"p\">(</span><span class=\"n\">instance_memory</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_ptr</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I tried using custom memory instances too but that also didn't help.  I read through the wasmtime-rb examples multiple times but still don't get how to pass in the string (or, probably any other more complex object) correctly.</p>\n<p>Any tips appreciated! Thank you</p>",
        "id": 474957623,
        "sender_full_name": "Tomas Hromada",
        "timestamp": 1728114649
    },
    {
        "content": "<p>Are you familiar with <a href=\"https://www.assemblyscript.org/runtime.html#memory-layout\">the memory layout used by classes in AssemblyScript</a>? Also are you calling a function within the Wasm instance to allocate the memory? The code sample above looks to me like it's using an arbitrary index in linear memory.</p>",
        "id": 475365565,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1728326381
    }
]