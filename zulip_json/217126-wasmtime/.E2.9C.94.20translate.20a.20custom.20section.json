[
    {
        "content": "<p>I have added a custom section in my module using below code:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"c1\">#[link_section = \"my-data\"]</span>\n    <span class=\"n\">pub</span> <span class=\"n\">static</span> <span class=\"n\">FIRST</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">u8</span><span class=\"p\">;</span> <span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello, World!\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Also, in translate_payload function in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/097d1087e02e5e4b6a03289aae760948ae55de69/crates/environ/src/module_environ.rs#L181\">module_environ</a> module, I've added the below code to translate the custom header. </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code> <span class=\"n\">Payload</span><span class=\"p\">::</span><span class=\"n\">CustomSection</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">\"my-data\"</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n               <span class=\"n\">let</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">NameSectionReader</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">(),</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">data_offset</span><span class=\"p\">())</span>\n                <span class=\"o\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n                <span class=\"o\">.</span><span class=\"n\">and_then</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">s</span><span class=\"o\">|</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name_section</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">));</span>\n                <span class=\"n\">println</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s2\">\"read custom section error {:?}\"</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">);</span>\n                 <span class=\"k\">if</span> <span class=\"n\">let</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">result</span> <span class=\"p\">{</span>\n                    <span class=\"n\">log</span><span class=\"p\">::</span><span class=\"n\">warn</span><span class=\"err\">!</span><span class=\"p\">(</span><span class=\"s2\">\"failed to parse name section {:?}\"</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">);</span>\n            <span class=\"p\">}</span>\n</code></pre></div>\n<p>However, I got the bellow error and couldn't fix it.</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">error</span> <span class=\"n\">Err</span><span class=\"p\">(</span><span class=\"n\">InvalidWebAssembly</span> <span class=\"p\">{</span> <span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"s2\">\"name entry extends past end of the code section\"</span><span class=\"p\">,</span> <span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"mi\">1124882</span> <span class=\"p\">})</span>\n</code></pre></div>\n<p>Can you please help me how I can parse this new header?<br>\n Because I need to get the custom data during this step and change it.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/097d1087e02e5e4b6a03289aae760948ae55de69/crates/environ/src/module_environ.rs#L181\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9bc608ef983f19dab7e8e9810f307c2c532fb145\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333430303837303439653230663632376538383761333033643862666237306534666536393938633432633366396531386634386662376538623666643662312f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/097d1087e02e5e4b6a03289aae760948ae55de69/crates/environ/src/module_environ.rs#L181\" title=\"wasmtime/module_environ.rs at 097d1087e02e5e4b6a03289aae760948ae55de69 路 bytecodealliance/wasmtime\">wasmtime/module_environ.rs at 097d1087e02e5e4b6a03289aae760948ae55de69 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 305947476,
        "sender_full_name": "julia",
        "timestamp": 1666666512
    },
    {
        "content": "<p>I'm pretty sure the data you wrote is put directly in the custom section, so simply look at <code>s.data()</code> without doing anything with the NameSectionReader parser <a href=\"http://fot.name\">fot.name</a> sections.</p>",
        "id": 305971725,
        "sender_full_name": "bjorn3",
        "timestamp": 1666683284
    },
    {
        "content": "<p>Thanks, but how can I change it? my goal is to change this data when module is compiling and loading into the memory.<br>\nIs it possible to do that?</p>",
        "id": 306060427,
        "sender_full_name": "julia",
        "timestamp": 1666713497
    },
    {
        "content": "<p>Custom sections are not loaded at runtime. If you want to change the size of the data you are out of luck unless you ship the unlinked wasm files and then when you want to change the data change the wasm file containing the data and link everything again. If you don't need to change the data, you can use <code>#[no_mangle]</code> and then get the address of the data by loading the value of the exported global with the same name as the static and then change the data segment at this address (make sure to account for the fact that a data segment can specify a non-zero load address)</p>",
        "id": 306103827,
        "sender_full_name": "bjorn3",
        "timestamp": 1666725186
    },
    {
        "content": "<p>I only want to change the content not the size of data ( like Hello --&gt;Secret). <br>\nIs it possible to apply this changes right after loading data from binary file in from_binary <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b61e6783094996b2fa62d7132c6a068b30437ad7/crates/wasmtime/src/module.rs#L283\">function</a> ? I applied this change, but it didn't work, the final data which is shown during execution is still <strong>Hello</strong>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/b61e6783094996b2fa62d7132c6a068b30437ad7/crates/wasmtime/src/module.rs#L283\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7c66b161e1b1a1b50720c2f7b21d5850d493b662\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326534663865643632323839306362303934626631363234353933303935633033356262343733396135646464623332396239396231653162303461656666652f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/b61e6783094996b2fa62d7132c6a068b30437ad7/crates/wasmtime/src/module.rs#L283\" title=\"wasmtime/module.rs at b61e6783094996b2fa62d7132c6a068b30437ad7 路 bytecodealliance/wasmtime\">wasmtime/module.rs at b61e6783094996b2fa62d7132c6a068b30437ad7 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 306107006,
        "sender_full_name": "julia",
        "timestamp": 1666726435
    },
    {
        "content": "<p>yes, one could load the bytes of the module into memory, use a parser like the <code>wasmparser</code> crate to discover where the section resides in memory, mutate it as you describe (which shouldn't change how the module validates), and then load the module from the slice using <code>from_binary</code> if desired.</p>",
        "id": 306117929,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666730360
    },
    {
        "content": "<p>Note that the data in the custom section is otherwise ignored by wasmtime, so I'm not sure what that would accomplish</p>",
        "id": 306118225,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666730481
    },
    {
        "content": "<p>if you're using a data segment instead of a custom section, you could also locate and mutate it before <code>from_binary</code> (provided you don't change the size or offset) which would have an observable effect within the guest program</p>",
        "id": 306118544,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666730626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> Thanks for your reply.<br>\nThis <a href=\"https://users.rust-lang.org/t/variable-annotation/83147\">link</a> is the real issue that I have.  I have asked and they gave me this offer.<br>\n I want to annotate a string in my rust code, and change it during loading time.  However,  I changed the value before calling <strong> from_binary</strong> but It didn't work.  Do you know what is the reason? <br>\nWhat did you mean about this  sentence <strong>the custom section is otherwise ignored by wasmtime</strong>? Do you mean it put the data into data section? </p>\n<p>If I sue data section, is there any automate way to locate the data in the data segment with annotation it in the high-level code?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://users.rust-lang.org/t/variable-annotation/83147\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/24a198d4f61f8267000f767f0c08153c080d1f37\\/68747470733a2f2f676c6f62616c2e646973636f757273652d63646e2e636f6d2f627573696e657373352f75706c6f6164732f727573745f6c616e672f6f726967696e616c2f32582f382f383365343139353665636366643637616436666637366631356132633232653538646233316434662e737667)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://users.rust-lang.org/t/variable-annotation/83147\" title=\"Variable annotation\">Variable annotation</a></div><div class=\"message_embed_description\">I want to annotate some strings (mark them with specific name) in Rust code and compile the code to wasm code using wasm32-wasi target option. I need to know the offsets that show where they store in the data section.  I know that clang has annotation capability like the below code:  __attribute__((annotate(\"fff\"))) void foo() {}  Is there similar solution which gives me the capability to extract the offsets using annotation?  Thanks.</div></div></div>",
        "id": 306120408,
        "sender_full_name": "julia",
        "timestamp": 1666731426
    },
    {
        "content": "<p>the data in a custom section not otherwise known to wasmtime ahead of time (i.e. the name or debug sections) are simply skipped over when parsing the module and aren't loaded into memory, so they have no impact on a guest program's execution</p>",
        "id": 306120845,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666731607
    },
    {
        "content": "<p>if the data is in the data section, you need a mechanism to locate it, so i don't know if you can put the address of the string in a custom section easily (haven't tried)</p>",
        "id": 306120953,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666731650
    },
    {
        "content": "<p>Sorry I got confused. You said wasmtime skips the data in a custom section. If it does that, why can I use this data in my code (like printing the value of string)?</p>\n<p>I have checked the wat format of wasm module, I could find the string in .rodata section. <br>\nHowever, I examined the bytes slice which contains the loaded bytes, the offset of my data showed it put in the custom section.</p>",
        "id": 306123876,
        "sender_full_name": "julia",
        "timestamp": 1666732583
    },
    {
        "content": "<p>i'd have to see your guest program, but if you're printing a string in a guest program, it must be in linear memory; for a static string to be initialized, the initial value must be in a data segment from a data section (in wat, a <code>(data ...)</code> expression)</p>",
        "id": 306124360,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666732698
    },
    {
        "content": "<p>custom sections (should) never have any influence on the guest program execution and should be strippable with no observable change in behavior</p>",
        "id": 306124516,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666732743
    },
    {
        "content": "<p>so i suspect in your setup you have two copies of the \"hello world\" string data: one in a data section which is what gets put in linear memory and one in a custom section</p>",
        "id": 306124575,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666732760
    },
    {
        "content": "<p>and your modification to the copy in the custom section has no effect</p>",
        "id": 306124644,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666732782
    },
    {
        "content": "<p>I use spin and this is my simple code that returns string in the body. </p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">use</span> <span class=\"n\">anyhow</span><span class=\"p\">::</span><span class=\"n\">Result</span><span class=\"p\">;</span>\n<span class=\"n\">use</span> <span class=\"n\">std</span><span class=\"p\">::</span><span class=\"nb\">str</span><span class=\"p\">::</span><span class=\"n\">from_utf8</span><span class=\"p\">;</span>\n<span class=\"n\">use</span> <span class=\"n\">spin_sdk</span><span class=\"p\">::{</span>\n    <span class=\"n\">http</span><span class=\"p\">::{</span><span class=\"n\">Request</span><span class=\"p\">,</span> <span class=\"n\">Response</span><span class=\"p\">},</span>\n    <span class=\"n\">http_component</span><span class=\"p\">,</span>\n<span class=\"p\">};</span>\n\n<span class=\"o\">///</span> <span class=\"n\">A</span> <span class=\"n\">simple</span> <span class=\"n\">Spin</span> <span class=\"n\">HTTP</span> <span class=\"n\">component</span><span class=\"o\">.</span>\n<span class=\"c1\">#[http_component]</span>\n<span class=\"n\">fn</span> <span class=\"n\">hello_world</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">:</span> <span class=\"n\">Request</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Response</span><span class=\"o\">&gt;</span> <span class=\"p\">{</span>\n    <span class=\"c1\">#[link_section = \"my-data\"]</span>\n    <span class=\"n\">pub</span> <span class=\"n\">static</span> <span class=\"n\">FIRST</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">u8</span><span class=\"p\">;</span> <span class=\"mi\">13</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"o\">*</span><span class=\"sa\">b</span><span class=\"s2\">\"Hello, World!\"</span><span class=\"p\">;</span>\n\n\n    <span class=\"n\">Ok</span><span class=\"p\">(</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">Response</span><span class=\"p\">::</span><span class=\"n\">builder</span><span class=\"p\">()</span>\n        <span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">header</span><span class=\"p\">(</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span>  <span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n        <span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">(</span><span class=\"n\">Some</span><span class=\"p\">(</span><span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">FIRST</span><span class=\"p\">)</span><span class=\"err\">?</span><span class=\"o\">.</span><span class=\"n\">into</span><span class=\"p\">()))</span><span class=\"err\">?</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 306125046,
        "sender_full_name": "julia",
        "timestamp": 1666732888
    },
    {
        "content": "<p>I examined the <strong>bytes</strong> slice, there are only on copy of <strong>Hello, World!</strong> in it. I know that it is weird but mad me also confused.</p>",
        "id": 306125479,
        "sender_full_name": "julia",
        "timestamp": 1666733001
    },
    {
        "content": "<p>yeah, it should have two copies: one from the data section (the same as if you omitted the <code>#[link_section]</code> directive) and then another copy in the custom section that the linker splatted the  same bytes</p>",
        "id": 306125835,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666733097
    },
    {
        "content": "<p>for runtime behavior, only the former is respected</p>",
        "id": 306126001,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666733143
    },
    {
        "content": "<p>makes sense, but why there are only one Hello, World!  in the bytes buffer? in the same offset with custom section.</p>",
        "id": 306126392,
        "sender_full_name": "julia",
        "timestamp": 1666733235
    },
    {
        "content": "<p>the <code>#[link_section]</code> directive on the static has no impact on how its data ends up in the data section</p>",
        "id": 306126677,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666733308
    },
    {
        "content": "<p>it may be worth stepping back to discuss what you're trying to do, then figure out whether a custom section is the best way to do it. it sounds to me like you want to have a wasm module providing an HTTP component, where the runtime environment that loads the wasm module can push some data into it before it starts handing HTTP requests off. is that right?</p>",
        "id": 306126768,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1666733336
    },
    {
        "content": "<p>a simple (naive) way to make what you want work would be to prefix the string with something easily identifiable so that you could just look through every data segment for the prefix (note: data segments may be disjoint, but probably aren't in your case) and then change the postfix bytes to what you want (the guest program would have to skip the prefix bytes); then feed the modified module in memory to Wasmtime</p>",
        "id": 306126993,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666733401
    },
    {
        "content": "<p>unfortunately rust prohibits casting a pointer in a constant expression, so i don't think you'll get data into a custom section that helps locate the relevant bytes faster</p>",
        "id": 306127780,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666733594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span>  This is a simple example only. as I mentioned before, I want to annotate some data in high-level and change it during load time. it is important to me to do that Because the previous version should not be presented in the memory during the execution. I need the address of annotated string in the buffer.</p>",
        "id": 306127929,
        "sender_full_name": "julia",
        "timestamp": 1666733634
    },
    {
        "content": "<p>so far it sounds to me like you just need the data to be a wasm export, so its offset in linear memory is stored somewhere that you can read it out of the binary</p>",
        "id": 306128343,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1666733734
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> thanks for the nice idea!<br>\n<span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> You're right, Thanks!</p>",
        "id": 306128848,
        "sender_full_name": "julia",
        "timestamp": 1666733868
    },
    {
        "content": "<p>indeed, one could have a function export that returns the offset in linear memory for the host to write the bytes to, then call that and modify the guest's linear memory before anything else that depends on the data is called</p>",
        "id": 306128935,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666733886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>, does it need to be a _function_ export? isn't a global export okay? I'm not clear on this part of the wasm spec.<br>\n<span class=\"user-mention\" data-user-id=\"525366\">@julia</span>, if you can wait to overwrite memory until the module is instantiated (but still before you call any functions exported from the module), then I think you should be able to do that using only existing wasmtime APIs. if you want to write out a new .wasm file with the modified data, I suspect it's a little more tedious, but certainly feasible</p>",
        "id": 306129410,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1666734020
    },
    {
        "content": "<p>yeah that'd work better, need to slap an export directive on the static</p>",
        "id": 306129550,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734063
    },
    {
        "content": "<p>jamey's suggestion should work great for your use case</p>",
        "id": 306129724,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734118
    },
    {
        "content": "<p>if you slap <code>#[export_name = \"foo\"]</code> on your static there, you'll see a global with the address exported</p>",
        "id": 306129845,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734145
    },
    {
        "content": "<p>which actually you could just statically read if you want to, don't have to use the export</p>",
        "id": 306129905,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734162
    },
    {
        "content": "<p>now that i think about it</p>",
        "id": 306129925,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734168
    },
    {
        "content": "<p>so can still modify the module before compilation, just need to parse the exports, find the expected export for the index of the global, find the global and look at its initial value</p>",
        "id": 306130081,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734217
    },
    {
        "content": "<p>once you know the string offset in linear memory, then you need to find the data segment(s) that initializes that offset and mutate the segment bytes (at the relative offset) before loading the module in Wasmtime; should be relatively straightforward to accomplish with <code>wasmparser</code></p>",
        "id": 306131704,
        "sender_full_name": "Peter Huene",
        "timestamp": 1666734648
    },
    {
        "content": "<p>Thanks a lot!<br>\nI should read more to get the details of the idea and understand where I can apply the changes to modify the data.</p>",
        "id": 306134032,
        "sender_full_name": "julia",
        "timestamp": 1666735660
    },
    {
        "content": "<p>I wanted to say thank you, I implemented the idea using wasmparser functions and modified the module before compilation. Thanks a lot!</p>",
        "id": 306582172,
        "sender_full_name": "julia",
        "timestamp": 1666932164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"525366\">julia</span> has marked this topic as resolved.</p>",
        "id": 306582180,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666932170
    }
]