[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>: I think I saw one of you comment on an issue similar to this one but I can't find it... Using the Wasmtime API, I call a <code>_start</code> function that is Wasm-ified from a C function with signature <code>int main()</code>.</p>",
        "id": 219258871,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607459650
    },
    {
        "content": "<p>If I use<code>instance.get_func(\"_start\").get0::&lt;()&gt;()</code> (error-checking removed) I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">execute</span>: <span class=\"nc\">Exited</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>:  <span class=\"mh\">0x268</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_Exit</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x2bf</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">exit</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x245</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219258919,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607459673
    },
    {
        "content": "<p>If I use <code>instance.get_func(\"_start\").get0::&lt;i32&gt;()</code> I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">execute</span>: <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"k\">type</span>\n\n<span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Type</span><span class=\"w\"> </span><span class=\"n\">mismatch</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">got</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 219259170,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607459795
    },
    {
        "content": "<p>In the Wasm file, the <code>_start</code> function has <code>(type (;2;) (func))</code></p>",
        "id": 219259234,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607459835
    },
    {
        "content": "<p>How should I reliably handle the C-style exits? I'm guessing the first option is the type-correct way to go but how do I retrieve the exit code?</p>",
        "id": 219259444,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607459942
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> You can use <code>(import \"wasi_snapshot_preview1\" \"proc_exit\" (func $__wasi_proc_exit (param i32)))</code>, and call it, to have the program exit with a specific value.</p>",
        "id": 219259875,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1607460153
    },
    {
        "content": "<p>I would prefer to not have to do anything special on the C side or during the compilation to Wasm... is that possible?</p>",
        "id": 219259999,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607460227
    },
    {
        "content": "<p>If you use WASI libc, it'll handle that for you</p>",
        "id": 219260080,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1607460260
    },
    {
        "content": "<p>Ok, I can switch over to using wasi-sdk... then I can just <code>return 0;</code> from the <code>int main()</code> function, right? Do I need to call the <code>_start</code> function differently in Wasmtime?</p>",
        "id": 219260426,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607460455
    },
    {
        "content": "<p>Or better, what is the canonical way of calling the command-style, default function of a Wasm module?</p>",
        "id": 219260525,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607460489
    },
    {
        "content": "<p>Right, return 0 from main, or call <code>exit(0)</code>, either works.</p>",
        "id": 219260560,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1607460512
    },
    {
        "content": "<p>I would simply do what Wasmtime's <code>run</code> command currently does, which is check for an exit trap: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/run.rs#L167-L175\">https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/run.rs#L167-L175</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/run.rs#L167-L175\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/run.rs#L167-L175\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 219260563,
        "sender_full_name": "Peter Huene",
        "timestamp": 1607460514
    },
    {
        "content": "<p>which is the trap you're getting from the first snippet of yours above</p>",
        "id": 219260592,
        "sender_full_name": "Peter Huene",
        "timestamp": 1607460534
    },
    {
        "content": "<p>Ah, right! Ok, let me try that</p>",
        "id": 219260802,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607460633
    },
    {
        "content": "<p>There was this related discussion earlier: <a href=\"#narrow/stream/206238-general/topic/Behavior.20differences.20between.20wasmtime.20runtime.20and.20library/near/216390905\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Behavior.20differences.20between.20wasmtime.20runtime.20and.20library/near/216390905</a></p>",
        "id": 219260831,
        "sender_full_name": "Peter Huene",
        "timestamp": 1607460650
    },
    {
        "content": "<p>Which I just realized I left Till hanging :)</p>",
        "id": 219260884,
        "sender_full_name": "Peter Huene",
        "timestamp": 1607460689
    },
    {
        "content": "<p>Thanks for the link, that is the conversation that I read a while back but couldn't place (I thought it was in a GitHub issue perhaps)</p>",
        "id": 219266413,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1607463534
    }
]