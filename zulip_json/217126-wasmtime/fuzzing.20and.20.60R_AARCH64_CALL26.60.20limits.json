[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421408\">@Sam Parker</span> or <span class=\"user-mention\" data-user-id=\"300050\">@Anton Kirilov</span> I've got a question for y'all as our resident arm64-experts. When I build wasmtime's fuzzers myself on AArch64 I occasionally see linker errors that look like:</p>",
        "id": 273826379,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646235911
    },
    {
        "content": "<p>er, sorry, early send</p>",
        "id": 273826399,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646235920
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">          </span><span class=\"n\">compile_maybe_invalid</span><span class=\"p\">.</span><span class=\"n\">e9aef4b8</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mi\">0</span>:<span class=\"p\">(.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">symbol_nmae</span><span class=\"o\">+</span><span class=\"mh\">0x6c</span><span class=\"p\">)</span>: <span class=\"nc\">relocation</span><span class=\"w\"> </span><span class=\"n\">truncated</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">fit</span>: <span class=\"nc\">R_AARCH64_CALL26</span><span class=\"w\"> </span><span class=\"n\">against</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">__sanitizer_cov_trace_const_cmp4</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">text</span><span class=\"p\">.</span><span class=\"n\">__sanitizer_cov_trace_const_cmp4</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">libfoo</span><span class=\"p\">.</span><span class=\"n\">rlib</span><span class=\"p\">(</span><span class=\"n\">FuzzerTracePC</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273826477,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646235955
    },
    {
        "content": "<p>basically: <code>relocation truncated to fit: R_AARCH64_CALL26</code> </p>\n<p>I was wondering, do y'all know how to get around this? Is there a linker option to say \"please insert some sort of trampoline to get me all the way there\" or something like that?</p>",
        "id": 273826589,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646235985
    },
    {
        "content": "<p>note that this is the native linker, so not actually related to wasmtime itself, only the fact that our fuzz outputs are apparently quite large (I'm independently trying to go figure out why they're so large as well)</p>",
        "id": 273826654,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646236014
    },
    {
        "content": "<p>What optimisation level is being used and have you tried using an optimization level (-Os) to reduce code size? If it's a static build you can also try passing -mcmodel=large to the compiler.</p>",
        "id": 273831243,
        "sender_full_name": "Sam Parker",
        "timestamp": 1646237443
    },
    {
        "content": "<p>this is an optimized fuzzed build and I haven't tried <code>-Copt-level=s</code> yet (this is all mostly rust code)</p>",
        "id": 273832837,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238056
    },
    {
        "content": "<p>I tried <code>-Ccode-model=large</code> but it printed out lots of warnings from llvm about the tls model not being supported</p>",
        "id": 273832854,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238068
    },
    {
        "content": "<p>something about ELF TLS only being supported with a \"small\" code model or a \"local-exec\" tls model, but when forcing the tls model to \"local-exec\" it printed the same warnings</p>",
        "id": 273832914,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238096
    },
    {
        "content": "<p>specifically:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">LLVM</span><span class=\"w\"> </span><span class=\"n\">ERROR</span>: <span class=\"nc\">ELF</span><span class=\"w\"> </span><span class=\"n\">TLS</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">small</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"w\"> </span><span class=\"n\">TLS</span><span class=\"w\"> </span><span class=\"n\">model</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273833028,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238126
    },
    {
        "content": "<p>and that's with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">RUSTFLAGS</span><span class=\"o\">='-</span><span class=\"n\">Ccode</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">large</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Ztls</span><span class=\"o\">-</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">local</span><span class=\"o\">-</span><span class=\"n\">exec</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">CARGO_TARGET_DIR</span><span class=\"o\">=</span><span class=\"n\">large</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273833082,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238148
    },
    {
        "content": "<p>I built binutils 2.38 and it appears to not work out-of-the-box at least</p>",
        "id": 273833234,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238213
    },
    {
        "content": "<p>oh also for the \"large\" code model it may not be supported in Rust for one reason or another (or I don't know what I'm doing), if I <code>rustc foo.rs -C code-model=large</code> for <code>fn main() {}</code> and nothing else it prints:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">acrichto</span><span class=\"o\">/</span><span class=\"n\">root</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">ld</span>: <span class=\"nc\">foo</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">938</span><span class=\"n\">a9993</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span>: <span class=\"nc\">relocation</span><span class=\"w\"> </span><span class=\"n\">R_AARCH64_MOVW_UABS_G0_NC</span><span class=\"w\"> </span><span class=\"n\">against</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">making</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">recompile</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">fPIC</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">acrichto</span><span class=\"o\">/</span><span class=\"n\">root</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">ld</span>: <span class=\"nc\">foo</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">938</span><span class=\"n\">a9993</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">1.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span>: <span class=\"nc\">relocation</span><span class=\"w\"> </span><span class=\"n\">R_AARCH64_MOVW_UABS_G0_NC</span><span class=\"w\"> </span><span class=\"n\">against</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">symbol</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">making</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"w\"> </span><span class=\"n\">object</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">recompile</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">fPIC</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">938</span><span class=\"n\">a9993</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span>:<span class=\"p\">(.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rel</span><span class=\"p\">.</span><span class=\"n\">ro</span><span class=\"o\">..</span><span class=\"n\">L__unnamed_1</span><span class=\"o\">+</span><span class=\"mh\">0x0</span><span class=\"p\">)</span>: <span class=\"nc\">dangerous</span><span class=\"w\"> </span><span class=\"n\">relocation</span>: <span class=\"nc\">unsupported</span><span class=\"w\"> </span><span class=\"n\">relocation</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">938</span><span class=\"n\">a9993</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span>:<span class=\"p\">(.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rel</span><span class=\"p\">.</span><span class=\"n\">ro</span><span class=\"o\">..</span><span class=\"n\">L__unnamed_1</span><span class=\"o\">+</span><span class=\"mh\">0x18</span><span class=\"p\">)</span>: <span class=\"nc\">dangerous</span><span class=\"w\"> </span><span class=\"n\">relocation</span>: <span class=\"nc\">unsupported</span><span class=\"w\"> </span><span class=\"n\">relocation</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">938</span><span class=\"n\">a9993</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span>:<span class=\"p\">(.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rel</span><span class=\"p\">.</span><span class=\"n\">ro</span><span class=\"o\">..</span><span class=\"n\">L__unnamed_1</span><span class=\"o\">+</span><span class=\"mh\">0x20</span><span class=\"p\">)</span>: <span class=\"nc\">dangerous</span><span class=\"w\"> </span><span class=\"n\">relocation</span>: <span class=\"nc\">unsupported</span><span class=\"w\"> </span><span class=\"n\">relocation</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"n\">foo</span><span class=\"p\">.</span><span class=\"mi\">938</span><span class=\"n\">a9993</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span>:<span class=\"p\">(.</span><span class=\"n\">data</span><span class=\"p\">.</span><span class=\"n\">rel</span><span class=\"p\">.</span><span class=\"n\">ro</span><span class=\"o\">..</span><span class=\"n\">L__unnamed_1</span><span class=\"o\">+</span><span class=\"mh\">0x28</span><span class=\"p\">)</span>: <span class=\"nc\">dangerous</span><span class=\"w\"> </span><span class=\"n\">relocation</span>: <span class=\"nc\">unsupported</span><span class=\"w\"> </span><span class=\"n\">relocation</span><span class=\"w\"></span>\n<span class=\"w\">          </span><span class=\"n\">collect2</span>: <span class=\"nc\">error</span>: <span class=\"nc\">ld</span><span class=\"w\"> </span><span class=\"n\">returned</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">status</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 273833391,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238264
    },
    {
        "content": "<p>I'm trying to figure out what's so darned big but  I can't figure out a good way to determine that</p>",
        "id": 273833458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238290
    },
    {
        "content": "<p>this hasn't been a persistent problem in the past but  now I can't build the fuzzers at all on aarch64 unfortunately</p>",
        "id": 273833632,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238362
    },
    {
        "content": "<p>ok looks like <code>-Copt-level=s</code> at least works for me for now, and wow the fuzzers are ~300mb apiece...</p>",
        "id": 273834333,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646238621
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3872\">https://github.com/bytecodealliance/wasmtime/pull/3872</a> should probably also help with the size of cranelift itself</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3872\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c41b0f4b6cde6dd1454ecf0bb8a1fec3ac75a3da\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656666366236303466353735396333626533306531633666616334313262303635636137396633663839653130343230383230353532323633326663376561362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f33383732)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3872\" title=\"Remove `all-arch` from `cranelift-interpreter` by alexcrichton · Pull Request #3872 · bytecodealliance/wasmtime\">Remove `all-arch` from `cranelift-interpreter` by alexcrichton · Pull Request #3872 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">I frequently notice that the fuzz build of cranelift-codegen takes an\nextremely long time and recently realized that one issue is that when\nfuzzers are built we enable all of the backends in cranel...</div></div></div>",
        "id": 273839712,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646240447
    },
    {
        "content": "<p>alas no still too large to link with default settings...</p>",
        "id": 273841491,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646241084
    },
    {
        "content": "<p>Ok more investigation and thinking has revealed that <code>cargo fuzz</code> by default passes <code>-Clink-dead-code</code> to rustc. The <code>cargo fuzz</code> command also has <code>--strip-dead-code</code> as a parmeter, and when I pass that then all the fuzzers link locally because the binaries are ~100MB smaller.</p>\n<p>It sounds, though, like there's no AArch64 linker option or thing like that to get this to \"just work\". I probably need to pass <code>--strip-dead-code</code> when I build the fuzzers myself.</p>\n<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> question for you as you ostensibly maintain <code>cargo-fuzz</code> -- back in <a href=\"https://github.com/rust-fuzz/cargo-fuzz/commit/86b4889e3e0f6faac8433659bcac08c4b32097c0\">https://github.com/rust-fuzz/cargo-fuzz/commit/86b4889e3e0f6faac8433659bcac08c4b32097c0</a> it was claimed that dead code caused fuzzers to print errors, but in <a href=\"https://github.com/rust-fuzz/cargo-fuzz/pull/260\">https://github.com/rust-fuzz/cargo-fuzz/pull/260</a> an option was added to strip dead code and running locally that appears to work ok to me at least. Do you know if something about libfuzzer changed in the meantime, and if so if the \"strip dead code\" option could be turned on by default?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-fuzz/cargo-fuzz/commit/86b4889e3e0f6faac8433659bcac08c4b32097c0\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/dad8275848b2e86f9ab1493b2aca2b5c5d62bc81\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636365643938336566346633656663346462346433386462346361636530366461323765653139383462343965663231383532633337323437373035343936382f727573742d66757a7a2f636172676f2d66757a7a2f636f6d6d69742f38366234383839653365306636666161633834333336353962636163303863346233323039376330)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-fuzz/cargo-fuzz/commit/86b4889e3e0f6faac8433659bcac08c4b32097c0\" title=\"Disable dead stripping · rust-fuzz/cargo-fuzz@86b4889\">Disable dead stripping · rust-fuzz/cargo-fuzz@86b4889</a></div><div class=\"message_embed_description\">Without it, some optimized targets would fail to launch with the\nfollowing error:\n\nERROR: The size of coverage PC tables does not match the\nnumber of instrumented PCs. This might be a compiler bug,...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-fuzz/cargo-fuzz/pull/260\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c8b5c49a5b0563a8a306c2cbb7c5944cc107a265\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316162356364643638666635663564613531663335396138663832363137326331326230353362323731383963373861663531336663383037303565356161352f727573742d66757a7a2f636172676f2d66757a7a2f70756c6c2f323630)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-fuzz/cargo-fuzz/pull/260\" title=\"Allow stripping of dead code by paholg · Pull Request #260 · rust-fuzz/cargo-fuzz\">Allow stripping of dead code by paholg · Pull Request #260 · rust-fuzz/cargo-fuzz</a></div><div class=\"message_embed_description\">The -Clink-dead-code flag was added to fix an error with certain\ntargets.\nHowever, it can also cause problems.\nExample: You depend on crate A which links to library B. A includes an\nunused referenc...</div></div></div>",
        "id": 273858356,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646247297
    },
    {
        "content": "<p>one other thing that came up is that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3836\">https://github.com/bytecodealliance/wasmtime/pull/3836</a> is the \"cause\" for why I can't build the fuzzers on aarch64 any more. AFAIK <code>wasm-mutate</code> is a pretty hefty library, especially when fuzzing, but it's only being linked because dead code is linked. Otherwise that should only affect the one fuzz target</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3836\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e2f423eb37d36c991740063a30368cb02b1a74ec\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323535643066373636346531353437646438646563373134306237303866643933363239313134353961303565663164323162303635656137386561393331662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f33383336)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3836\" title=\"`wasm-mutate` fuzz targets by fitzgen · Pull Request #3836 · bytecodealliance/wasmtime\">`wasm-mutate` fuzz targets by fitzgen · Pull Request #3836 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">There's definitely more to be done here but I think this is a good starting point.\nThe big open question for the future in my mind is how this will integrate with the way we heavily rely on swarm t...</div></div></div>",
        "id": 273858597,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646247376
    },
    {
        "content": "<p>Yeah I don't know the details. <code>libFuzzer</code> is always a mess of linker errors if you look at it the wrong way, unfortunately :(</p>",
        "id": 273866469,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1646250626
    },
    {
        "content": "<p>On a whim I attempted to use some different linkers here. I happened to be testing a <code>cargo fuzz build --dev</code> build which has actually never worked for me before on arm64, but the timings I get are:</p>\n<ul>\n<li>bfd (2.38) - fails after 113s</li>\n<li>gold (2.38) - fails after 15s</li>\n<li>lld - suceeds after 3s</li>\n</ul>\n<p>I... may just switch to using LLD on this machine as a result</p>",
        "id": 273875938,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1646254790
    },
    {
        "content": "<p>Wow, that's quite the difference!</p>",
        "id": 273970156,
        "sender_full_name": "Sam Parker",
        "timestamp": 1646313311
    }
]