[
    {
        "content": "<p>Hey everyone, we are trying to write a compiler in Rust and are trying to generate WASM out of it. I tried using binaryen_sys crate, but it is unsafe, and also not very friendly API for writing Rust code again. binaryen, the Rust wrapper's docs:</p>\n<blockquote>\n<p>Binaryen bindings for Rust. They _used to provide bindings for IR-construction part_ of the API, but now this crate is more focused on tools provided by Binaryen ...</p>\n</blockquote>\n<p>What are my options?</p>\n<p>TIA,</p>",
        "id": 359669868,
        "sender_full_name": "Amit Upadhyay",
        "timestamp": 1684504763
    },
    {
        "content": "<p>I too would be interested in hearing what are the happiest paths for building a compiler that targets wasm only, be it rust or some other language.</p>",
        "id": 359684603,
        "sender_full_name": "Michael Ball",
        "timestamp": 1684507671
    },
    {
        "content": "<p><a href=\"https://github.com/cfallin/waffle\">https://github.com/cfallin/waffle</a> and <a href=\"https://github.com/rustwasm/walrus\">https://github.com/rustwasm/walrus</a> are other options. Walrus closely mirrors wasm, while Waffle allows you to write code in SSA form with unstructured control flow and then converts it to stack manipulation and structured control flow when emitting the wasm module. I don't have any experience with either crates though.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cfallin/waffle\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b51f7df25260cc0dda8eac354a20cec79b730937\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636339353837633166316464653632623962353064303466653439386535366566336165623731356266353933323761386137653463316664373661616130332f6366616c6c696e2f776166666c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cfallin/waffle\" title=\"GitHub - cfallin/waffle\">GitHub - cfallin/waffle</a></div><div class=\"message_embed_description\">Contribute to cfallin/waffle development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/walrus\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/574e1f96f782029910fa60b9f945244953632ff0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373761333536336361363236663666646235323061623833633530383833613738653264336166396465663663373930646138333134633834366565623266612f727573747761736d2f77616c727573)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/walrus\" title=\"GitHub - rustwasm/walrus: Walrus is a WebAssembly transformation library 🌊🐘\">GitHub - rustwasm/walrus: Walrus is a WebAssembly transformation library 🌊🐘</a></div><div class=\"message_embed_description\">Walrus is a WebAssembly transformation library 🌊🐘. Contribute to rustwasm/walrus development by creating an account on GitHub.</div></div></div>",
        "id": 359686043,
        "sender_full_name": "bjorn3",
        "timestamp": 1684507953
    },
    {
        "content": "<p>Cool, waffle seems to be using <a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-encoder\">https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-encoder</a>, so that's another option.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-encoder\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3d3a933ec66a29f359fac5ebde71fd9e4e62e54f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663136396362336666663233386237343435313861376637393432613133363339656635313931373734613737313938333365323235303161346231386637642f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/crates/wasm-encoder\" title=\"wasm-tools/crates/wasm-encoder at main · bytecodealliance/wasm-tools\">wasm-tools/crates/wasm-encoder at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 359712102,
        "sender_full_name": "Amit Upadhyay",
        "timestamp": 1684513730
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552053\">@Amit Upadhyay</span> indeed, I had exactly the same frustrations (no good Wasm backend in Rust) and so I wrote waffle; the use-case I had was a roundtrip transform (Wasm to IR back to Wasm) but it's totally usable for just IR-&gt;Wasm for codegen as well</p>",
        "id": 359712585,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684513836
    },
    {
        "content": "<p>wasm_encoder is much lower level, you'd have to reason about control flow and the value stack and such at the Wasm level; waffle provides a standard SSA IR</p>",
        "id": 359712676,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684513862
    },
    {
        "content": "<p>waffle is very much a \"wrote it quickly to serve another project\" kind of project, so the API isn't too polished yet, but I'm happy to have a collaborator on that front (e.g. creating a nice builder API on top of the raw IR) if you want :-)</p>",
        "id": 359712856,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684513907
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>. So far I have been prototyping what code in my language (<a href=\"http://fastn.com\">fastn.com</a>) would look like what WAT code, and I started naively taking a stab at creating my own wasm Ast and \"printer\" (<a href=\"https://github.com/fastn-stack/fastn/pull/927/files#diff-e12d760b0365562008fca782bd3bb0a4640321d58b3000ecc47e5d16ffaf6a6c\">https://github.com/fastn-stack/fastn/pull/927/files#diff-e12d760b0365562008fca782bd3bb0a4640321d58b3000ecc47e5d16ffaf6a6c</a>). </p>\n<p>Let me read some code. Do you have any quick sample code like <a href=\"https://github.com/rustwasm/walrus/blob/master/examples/build-wasm-from-scratch.rs\">https://github.com/rustwasm/walrus/blob/master/examples/build-wasm-from-scratch.rs</a> for waffle?</p>\n<p>Also is there a better resource than Wikipedia article if I want to understand what is SSA IR? I am very new to all this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://fastn.com\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8823b3ed2647208d1754340b0f79d3da02500c7a\\/68747470733a2f2f666173746e2e636f6d2f2d2f666173746e2e636f6d2f696d616765732f666173746e2d646f742d636f6d2d6f672d696d6167652e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://fastn.com\" title=\"fastn | The Beginner-Friendly Full-Stack Framework\">fastn | The Beginner-Friendly Full-Stack Framework</a></div><div class=\"message_embed_description\">Design, develop, and deploy stunning websites and web apps effortlessly. Easy-to-learn full-stack framework. No coding knowledge required. Start now!</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fastn-stack/fastn/pull/927/files#diff-e12d760b0365562008fca782bd3bb0a4640321d58b3000ecc47e5d16ffaf6a6c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/322948df6c9f1bb8c5595f69e0ccce6035d8ac75\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f35383636323f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fastn-stack/fastn/pull/927/files#diff-e12d760b0365562008fca782bd3bb0a4640321d58b3000ecc47e5d16ffaf6a6c\" title=\"wasm to dom by amitu · Pull Request #927 · fastn-stack/fastn\">wasm to dom by amitu · Pull Request #927 · fastn-stack/fastn</a></div><div class=\"message_embed_description\">🚧 (Alpha stage software) fastn - Full-stack Web Development Made Easy 🚧 - wasm to dom by amitu · Pull Request #927 · fastn-stack/fastn</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/walrus/blob/master/examples/build-wasm-from-scratch.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/574e1f96f782029910fa60b9f945244953632ff0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373761333536336361363236663666646235323061623833633530383833613738653264336166396465663663373930646138333134633834366565623266612f727573747761736d2f77616c727573)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/walrus/blob/master/examples/build-wasm-from-scratch.rs\" title=\"walrus/build-wasm-from-scratch.rs at master · rustwasm/walrus\">walrus/build-wasm-from-scratch.rs at master · rustwasm/walrus</a></div><div class=\"message_embed_description\">Walrus is a WebAssembly transformation library 🌊🐘. Contribute to rustwasm/walrus development by creating an account on GitHub.</div></div></div>",
        "id": 359714028,
        "sender_full_name": "Amit Upadhyay",
        "timestamp": 1684514186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552053\">@Amit Upadhyay</span>  unfortunately no, I don't have any sample code, I haven't had the time to build out documentation of that sort</p>",
        "id": 359714338,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684514262
    },
    {
        "content": "<p>for IRs in general, this is a good reference: <a href=\"https://pfalcon.github.io/ssabook/latest/book.pdf\">https://pfalcon.github.io/ssabook/latest/book.pdf</a></p>",
        "id": 359714540,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684514301
    },
    {
        "content": "<p>(thanks to <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> for linking that for me the other day, and he may have other thoughts too)</p>",
        "id": 359714620,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684514317
    },
    {
        "content": "<p>if you're already producing output at a Wasm level (as WATs or as an AST or otherwise) then something like Waffle isn't really necessary; but if you start to want to e.g. optimize the output in any way, or do transforms on it (CPS or asyncify in the future, or ...) then having a \"real IR\" is quite useful</p>",
        "id": 359714949,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1684514398
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"552053\">@Amit Upadhyay</span>, do you have any experience with functional programming (e.g. Haskell, Ocaml, Clojure, etc)? it's not at all necessary, but if you <em>do</em>, that can be a helpful way to think of SSA. you're never allowed to re-assign a new value to the same variable name, so if you need to run some block of code multiple times with different values, you have to do something like a function call (or more precisely a tail call) to that block with each set of values as arguments. beyond that constraint, the other important thing to understand if you aren't already familiar with it is the \"control-flow graph\" (CFG) style of IR, because SSA form is a specialization of a CFG.</p>",
        "id": 359753017,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1684525099
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span>  I do, used Elm a lot. Used Scheme during by engineering days as well. I have not studied compilers academically, nor computer science for that matter. Am Mechanical Engineer by education. So this is all quite new to me. </p>\n<p>We are working on <a href=\"http://fastn.com\">fastn.com</a>. Specifically we are trying to add native support. Currently fastn compiles to HTML/CSS/JS, we are thinking of instead compiling to WASM, and so we can render fastn powered UI both in browsers, and in terminal / native (without web rendering, using wgpu and custom rendering code).</p>\n<p>We used to compile functions and components written in our language to JS, and now we are trying to experiment with compiling to WASM instead. The function part is relatively simpler, the function stuff we support is as yet quite rudimentary, no closures, no concurrent access, no async etc, so transpiling functions and component definitions, we have handle on.</p>\n<p>The part where we are struggling with is memory management. Transliping to JS meant we do not have to worry about it, all our variables are in JS space, and can be garbage collected. But with wasm, we have no garbage collector. Which means we have to memory management, but we do not want to export Rust like explicit management. We want garbage collector benefits.</p>\n<p>But building a full garbage collector is a bit too much for us to do right now. So we are experimenting with a reference counting based approach. Even reference counting means some of the aspects of memory management we have to expose to end users, which we do not want to do. So have some up with a sort of reference tracking like approach, which seems to allow circular references.</p>\n<p>Currently we are in drawing board stage, creating excalidraw drawings etc to see if it works.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://fastn.com\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8823b3ed2647208d1754340b0f79d3da02500c7a\\/68747470733a2f2f666173746e2e636f6d2f2d2f666173746e2e636f6d2f696d616765732f666173746e2d646f742d636f6d2d6f672d696d6167652e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://fastn.com\" title=\"fastn | The Beginner-Friendly Full-Stack Framework\">fastn | The Beginner-Friendly Full-Stack Framework</a></div><div class=\"message_embed_description\">Design, develop, and deploy stunning websites and web apps effortlessly. Easy-to-learn full-stack framework. No coding knowledge required. Start now!</div></div></div>",
        "id": 360108579,
        "sender_full_name": "Amit Upadhyay",
        "timestamp": 1684695728
    },
    {
        "content": "<p>There is a WebAssembly proposal for native garbage collection support which will probably be implemented in Wasmtime in the not too far future: <a href=\"https://github.com/WebAssembly/gc\">https://github.com/WebAssembly/gc</a>, <a href=\"https://github.com/bytecodealliance/rfcs/pull/31\">https://github.com/bytecodealliance/rfcs/pull/31</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/gc\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2a843a8b5020318da448cf48c272edcb248044a1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383039376566393334323964663730313565373434663164376539343030323862323162313539356665393364353030353635626563363636373231393162322f576562417373656d626c792f6763)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/gc\" title=\"GitHub - WebAssembly/gc: Branch of the spec repo scoped to discussion of GC integration in WebAssembly\">GitHub - WebAssembly/gc: Branch of the spec repo scoped to discussion of GC integration in WebAssembly</a></div><div class=\"message_embed_description\">Branch of the spec repo scoped to discussion of GC integration in WebAssembly - GitHub - WebAssembly/gc: Branch of the spec repo scoped to discussion of GC integration in WebAssembly</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rfcs/pull/31\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a3f5a4239f255d24ea566a62dc5e96848a8c12d2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316364303533373066616636306234326136363563643564323531306233373731346331363836393664303037393038633335303364393239396437343466332f62797465636f6465616c6c69616e63652f726663732f70756c6c2f3331)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rfcs/pull/31\" title=\"Implement Wasm GC in Wasmtime by fitzgen · Pull Request #31 · bytecodealliance/rfcs\">Implement Wasm GC in Wasmtime by fitzgen · Pull Request #31 · bytecodealliance/rfcs</a></div><div class=\"message_embed_description\">Implement support for the WebAssembly garbage collection proposal in Wasmtime. Allow plugging different collectors into Wasmtime to support the requirements of different Wasmtime embeddings running...</div></div></div>",
        "id": 360126755,
        "sender_full_name": "bjorn3",
        "timestamp": 1684707019
    }
]