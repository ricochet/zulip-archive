[
    {
        "content": "<p>Hey! I'm in the process of starting to implement wasi bindings in my wasm project, and am hitting an issue: as I'm going to be in an async world (using wasmtime-async), I'd like to basically wrap all filesystem calls in <code>unblock</code>.<br>\nHowever, I can't figure out a way to do that. I remember a while ago searching (or being told?) that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\">https://github.com/bytecodealliance/wasmtime/pull/1600</a> would allow that, but it seems that this only did it for stdio, and not for preopened dirs in particular (files can be virtual-based but AFAIU dirs must be explored at context-build time).<br>\nIs this me missing something, or an oversight that I should try to write a PR for, adding a <code>preopened_handle</code> that takes as an argument any <code>T: Handle</code> like <code>stdin</code> &amp; co.?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1600\" title=\"Allow different Handles to act as stdio by kubkon · Pull Request #1600 · bytecodealliance/wasmtime\">Allow different Handles to act as stdio by kubkon · Pull Request #1600 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">There have been requests to allow more than just raw OS handles to act as stdio in wasi-common (see #939). This PR makes this possible by loosening the requirement of the WasiCtxBuilder to accept a...</div></div></div>",
        "id": 222251724,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610327578
    },
    {
        "content": "<p>Well, I've just sent <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2569\">https://github.com/bytecodealliance/wasmtime/pull/2569</a> implementing what I want, I'll just start using my fork until someone comments on the PR, though I'd love it if it was approved out of the box :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2569\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2569\" title=\"wasi-common: add preopened_handle, to be able to open any handle by Ekleog · Pull Request #2569 · bytecodealliance/wasmtime\">wasi-common: add preopened_handle, to be able to open any handle by Ekleog · Pull Request #2569 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a follow-up to #1600 ; that also makes it possible to write custom Handles for directories. For my specific case, it is so as to be able to have a wasmtime-async-compatible WASI.\nI&#39;ve r...</div></div></div>",
        "id": 222375918,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610410082
    },
    {
        "content": "<p>Hey, I guess this is the message I missed. sorry!</p>",
        "id": 222469375,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474028
    },
    {
        "content": "<p>zulip is sometimes confusing.</p>",
        "id": 222469395,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474038
    },
    {
        "content": "<p>Anyway, after I land the wasi-c2 rewrite, my next big thing is making it all work with async</p>",
        "id": 222469492,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474063
    },
    {
        "content": "<p>lucet has async support built-in right now, and <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> has an RFC and PR to add async to natively wasmtime.</p>",
        "id": 222469631,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474113
    },
    {
        "content": "<p>one of our constraints is that we dont want all users of wasi-common (which is, effectively, all users of wasmtime at the moment) to take a dep on <code>tokio</code> (or <code>async-std</code>). so one trick we need is to factor it so that using an async runtime is optional.</p>",
        "id": 222469725,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474154
    },
    {
        "content": "<p>my rough plan is that i'll use the <code>async-trait</code> proc macro to make the <code>WasiFile</code> and <code>WasiDir</code> traits have async methods. this will probably mean in-lining the parts of the <code>system-interface::FileIoExt</code> that we actually consume into <code>WasiFile</code> and other code motion.</p>",
        "id": 222470288,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474365
    },
    {
        "content": "<p>and then, we'll have an impl of those traits for the cap-std types that is 100% synchronous/blocking. when you use this purely synchronous mode we'll assert that the future is ready and unwrap it at each import function call site (not 100% sure how this will be shaped yet). and then, we'll provide a separate trait that impls those traits on top of tokio.</p>",
        "id": 222470626,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474498
    },
    {
        "content": "<p>see also <a href=\"https://github.com/bytecodealliance/cap-std/tree/main/cap-async-std\">https://github.com/bytecodealliance/cap-std/tree/main/cap-async-std</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cap-std/tree/main/cap-async-std\" style=\"background-image: url(https://repository-images.githubusercontent.com/275013363/5b1c4000-c848-11ea-8edb-877395f68065)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cap-std/tree/main/cap-async-std\" title=\"bytecodealliance/cap-std\">bytecodealliance/cap-std</a></div><div class=\"message_embed_description\">Capability-oriented version of the Rust standard library - bytecodealliance/cap-std</div></div></div>",
        "id": 222470887,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474613
    },
    {
        "content": "<p>hopefully this explanation of my plans helps and makes sense. its not 100% figured out yet. but long story short, we'll make it possible to use async inside all methods of the file and dir traits, which should make it reasonable to start implementing them using e.g. network file system protocols or whatever you like</p>",
        "id": 222471230,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474774
    },
    {
        "content": "<p>alex's async work is here: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2434\">https://github.com/bytecodealliance/wasmtime/pull/2434</a> <a href=\"https://github.com/bytecodealliance/rfcs/pull/2\">https://github.com/bytecodealliance/rfcs/pull/2</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2434\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2434\" title=\"Implement support for `async` functions in Wasmtime by alexcrichton · Pull Request #2434 · bytecodealliance/wasmtime\">Implement support for `async` functions in Wasmtime by alexcrichton · Pull Request #2434 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is an implementation of RFC 2 in Wasmtime which is to support\nasync-defined host functions. At a high level support is added by\nexecuting WebAssembly code that might invoke an asynchronous hos...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/rfcs/pull/2\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/rfcs/pull/2\" title=\"RFC: Add `async` support to wasmtime by alexcrichton · Pull Request #2 · bytecodealliance/rfcs\">RFC: Add `async` support to wasmtime by alexcrichton · Pull Request #2 · bytecodealliance/rfcs</a></div><div class=\"message_embed_description\">This RFC proposes adding native support to the wasmtime crate for\nimported functions which are async. Additionally it provides APIs to\ncall wasm functions as an async function.\nrendered</div></div></div>",
        "id": 222471408,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474882
    },
    {
        "content": "<p>we appreciate your feedback on everything, please let us know what you think of these plans</p>",
        "id": 222471568,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610474948
    },
    {
        "content": "<p>These plans look awesome, and thank you for asking about my opinion! I had seen <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>'s RFC and am putting great hope in them, though I'm a tiny bit scared about the futures not being Send IIRC (not sure it could be fixed though, IIRC wasmtime-async futures are Send but it's very possible that I missed a place where it ought to be restricted... and I haven't integrated them in my production code yet so maybe I'll find out that outside of toy examples they aren't).<br>\nFor wasi, there's a thing I'm wondering: is the overhead of allocating a future per wasi call OK for the blocking option? I'd think probably yes, but if no it'd I think make sense to have a separate preopen_dir_async or similar, that'd use WasiDirAsync, and still provide the WasiDir blocking possibility.<br>\nDoes that make sense?</p>",
        "id": 222497572,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610487143
    },
    {
        "content": "<p>(For zulip being hard I can only concur, this is the only zulip I'm using and it's very different from other chat apps)</p>",
        "id": 222497685,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610487197
    },
    {
        "content": "<p>Hmm, what's the current state of the wasi-c2 rewrite? I'm trying to use it to preopen a dir and failing to, but OTOH I wonder whether I should investigate more or whether it's still too much WIP for the time being and such behavior is expected (anyway, I've submitted a few usability improvements as PR#2577 :))</p>",
        "id": 222534183,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610514215
    },
    {
        "content": "<p>thanks for the PR, i'm taking a look now. i have a file called TEST_FAILURES in wasi-c2 that i try to keep up to date on whats missing. basically, the scheduler is still wip, and a few weird things related to symlink following and fnctl-equivelant are not working, but otherwise it should do everything it needs to do. missing functionality as far as the ctx builder and so on is just because i never got around to it, so thank you for contributing that :)</p>",
        "id": 222622267,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610561510
    },
    {
        "content": "<p>at the moment we are assuming that allocating a pin&lt;box&lt;future&gt;&gt; for every call is acceptable. if we wanted to make a WasiDir / WasiDirAsync split, we'd have to duplicate all of the code that calls those async methods, which would mean copy-pasting the contents of src/snapshots/preview_1.rs, essentially, with the async variant just having <code>async</code> prefixed on fns <code>.await</code> postfixed on calls. i want to avoid that if possible.</p>",
        "id": 222622600,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610561665
    },
    {
        "content": "<p>if someone comes along with a synchronous use case where that really is a perf bottleneck we can try to find a better solution, but for now the most demanding case we have performance-wise is the async embedding (fastly's compute@edge product)</p>",
        "id": 222623093,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1610561907
    },
    {
        "content": "<p>Then the plan sounds great to me! Thank you :D FWIW once Alex Crichton's async PR lands, I might be interested in porting WASI to async (though it'll quite possibly be very little work) :)</p>",
        "id": 222666552,
        "sender_full_name": "Léo Gaspard",
        "timestamp": 1610583837
    }
]