[
    {
        "content": "<p>Does <code>cranelift</code>/<code>wasmtime</code> perform any degree of inlining for <code>call</code> instructions?</p>",
        "id": 261821319,
        "sender_full_name": "Gabor Greif",
        "timestamp": 1637171376
    },
    {
        "content": "<p>No, it does not. It depends on the generator of the input clir ir or wasm (eg llvm) to do inlining. Every function is compiled individually and possibly in parallel.</p>",
        "id": 261823375,
        "sender_full_name": "bjorn3",
        "timestamp": 1637172138
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268007\">@Gabor Greif</span></p>",
        "id": 261823417,
        "sender_full_name": "bjorn3",
        "timestamp": 1637172161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268007\">@Gabor Greif</span> adding an inliner to our Cranelift middle-end is something I want to do eventually; it'll become more important especially with module linking and interface types in Wasm, and likely really useful for other frontends as well; we just need to sit down and do the work</p>",
        "id": 261832922,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1637176139
    },
    {
        "content": "<p>It could be a performance gain to inline very short single basic blocks or short conditional/comparison code followed by an <code>if</code> when one of the alternatives is very short. <code>get x; get y; cmp; if; &lt;long&gt; else const 1</code>-type of code. The <code>&lt;long&gt;</code> could then be extracted into a new function and <code>call</code>-ed.</p>",
        "id": 261845950,
        "sender_full_name": "Gabor Greif",
        "timestamp": 1637181789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/inlining/near/261832922\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"268007\">Gabor Greif</span> adding an inliner to our Cranelift middle-end is something I want to do eventually; it'll become more important especially with module linking and interface types in Wasm, and likely really useful for other frontends as well; we just need to sit down and do the work</p>\n</blockquote>\n<p>we have to be careful how we do this, of course, because most small wasm functions within a module would have already been inlined by LLVM if it were profitable to do so, and so the remaining ones are things that were marked cold/noinline but which those attributes aren't present in the Wasm anymore</p>\n<p>that said, I agree we will want cross-module inlining, but we just have to be careful in our implementation</p>",
        "id": 261848748,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1637182983
    },
    {
        "content": "<p>Yes, for sure, the heuristic will be somewhat special. Might be worth studying what SpiderMonkey does for intra-module inlining (e.g. if they just prohibit it, or have a heuristic that's more conservative, or...); I don't remember off the top of my head</p>",
        "id": 261849057,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1637183123
    },
    {
        "content": "<p>Ah, yes, when the <code>call</code>-site is already in an <code>if</code>, that's a tell-tale sign that the <code>call</code> might be on a cold path. Also: not every Wasm module comes from LLVM :-) In Motoko, e.g., I don't want to inline too much (even for hot code) because it may distort (i.e. worsen) the instruction count metrics. Space is precious and cycles as well. I am in the process of running benchmarks to gauge the effect.</p>",
        "id": 261849850,
        "sender_full_name": "Gabor Greif",
        "timestamp": 1637183496
    }
]