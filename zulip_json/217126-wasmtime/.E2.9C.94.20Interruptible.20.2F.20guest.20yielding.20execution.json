[
    {
        "content": "<p>Hi there! I'm experimenting with building a scripting environment with Wasmtime / wit-bindgen and (currently) a Rust guest. For the guest, I'd like to provide an asynchronous environment, like Lua coroutines, so that something like this is possible:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">on_player_main_action</span><span class=\"p\">(</span><span class=\"n\">id</span>: <span class=\"nc\">EntityId</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"o\">..</span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">entity_play_sound</span><span class=\"p\">(</span><span class=\"n\">id</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Shoot\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">sleep_seconds</span><span class=\"p\">(</span><span class=\"mf\">0.4</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've currently implemented this by modifying the guest's memory to provide it with information about the event when an event occurs, and then I (want to) resume execution of the wasm until all events have been processed.</p>\n<p>To do this, I've set up my own (very basic) async runtime that does something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">futures</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Pin</span><span class=\"o\">&lt;</span><span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[];</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">waker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">Waker</span>::<span class=\"n\">from_raw</span><span class=\"p\">(</span><span class=\"n\">RawWaker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">std</span>::<span class=\"n\">ptr</span>::<span class=\"n\">null</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">RAW_WAKER</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">loop</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">EVENT_REACTOR</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">reactor</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">futures</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"cm\">/* process event */</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">futures</span><span class=\"p\">.</span><span class=\"n\">retain_mut</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">f</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">from_waker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">waker</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I have three questions regarding this:<br>\n0) Will this actually work? Can I have the client manage its own async loop, yield when it's done with all of its events, and have the host resume execution of the loop each time I have an event?<br>\n1) How can I make the guest loop yield after it's done processing the events? I've tried <code>wasi::sched_yield()</code>, but that doesn't seem to do anything, but I'm not sure if that's because...<br>\n2) How do I actually resume execution of the <code>run</code> function after it yields? Calling it with <code>.call</code> results it in never terminating, and I've not tried <code>.call_async</code> yet as I haven't set up the machinery for polling / making all of the calls asynchronous.</p>\n<p>Any help y'all can provide would be much appreciated!</p>",
        "id": 290420438,
        "sender_full_name": "Philpax",
        "timestamp": 1658430518
    },
    {
        "content": "<p>I don't have all the answers at the moment, but I do have two quick observations:</p>\n<ul>\n<li>Indeed, <code>sched_yield</code> is about thread/process yielding and not about async yielding, so it isn't going to help here.</li>\n<li>I recommend reading <a href=\"https://docs.google.com/presentation/d/1MNVOZ8hdofO3tI0szg_i-Yoy0N2QPU2C--LzVuoGSlE/edit#slide=id.p\">this presentation</a> to learn about the broader plan for async.</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://docs.google.com/presentation/d/1MNVOZ8hdofO3tI0szg_i-Yoy0N2QPU2C--LzVuoGSlE/edit#slide=id.p\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4b3aaf3dc2f1d61cbdaa0905cbfd9db670d4a137\\/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f4963465f747759337847613166674a4c6f374f6b30662d58674c2d6e64463270784950706d503879504e2d4e6c525a5f7948574c554679505f356437433576683834614c33624f536775665867673d77313230302d683633302d70)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://docs.google.com/presentation/d/1MNVOZ8hdofO3tI0szg_i-Yoy0N2QPU2C--LzVuoGSlE/edit#slide=id.p\" title=\"async proposal\">async proposal</a></div><div class=\"message_embed_description\">Component Model async support proposal WebAssembly CG May/June, 2022</div></div></div>",
        "id": 290420967,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1658430799
    },
    {
        "content": "<p>Ah, thank you! Appreciate the clarification on <code>sched_yield</code> (could potentially bodge something with epoch interruption?) and the link to the proposal, I'll have to give that a good read over and get familiar with it.</p>",
        "id": 290421792,
        "sender_full_name": "Philpax",
        "timestamp": 1658431185
    },
    {
        "content": "<p>Yeah, in theory an engine could bodge <code>sched_yield</code> into serving this purpose, but I don't believe any engines do that today, and <a href=\"https://github.com/WebAssembly/stack-switching\">stack switching</a> is expected to be what they'll do in the future.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/stack-switching\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/10d695787c879276bf59627e2887a7dd4810b8a6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306166613263383435393236333563363561643064323563653935663234343136626464633337636231373538653232653537653364323531393836393762662f576562417373656d626c792f737461636b2d737769746368696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/stack-switching\" title=\"GitHub - WebAssembly/stack-switching: A repository for the stack switching proposal.\">GitHub - WebAssembly/stack-switching: A repository for the stack switching proposal.</a></div><div class=\"message_embed_description\">A repository for the stack switching proposal. Contribute to WebAssembly/stack-switching development by creating an account on GitHub.</div></div></div>",
        "id": 290422431,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1658431515
    },
    {
        "content": "<p>Hmm, I just realised that I don't necessarily need a resumable <code>run</code> if I rearrange my guest-side glue code so that the host calls a function each time to process the events. I'll have to play around with that soon <span aria-label=\"fingers crossed\" class=\"emoji emoji-1f91e\" role=\"img\" title=\"fingers crossed\">:fingers_crossed:</span></p>",
        "id": 290423260,
        "sender_full_name": "Philpax",
        "timestamp": 1658431922
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"515290\">Philpax</span> has marked this topic as resolved.</p>",
        "id": 290547159,
        "sender_full_name": "Notification Bot",
        "timestamp": 1658513111
    }
]