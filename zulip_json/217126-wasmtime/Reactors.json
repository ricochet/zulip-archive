[
    {
        "content": "<p>I was trying to do a relatively simple change (make linked <code>get_default</code>) to bail if _start or the default export aren't found instead of returning a method that does nothing:  <a href=\"https://github.com/bytecodealliance/wasmtime/blob/d8d4bf81b260ea18f56475fbde96b6662a365cf8/crates/wasmtime/src/linker.rs#L1062\">https://github.com/bytecodealliance/wasmtime/blob/d8d4bf81b260ea18f56475fbde96b6662a365cf8/crates/wasmtime/src/linker.rs#L1062</a></p>\n<p>I was basically trying to finish up this long forgotten <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1927\">PR i had</a></p>\n<p>Changing that last line in <code>linker::get_default</code> with a bail like in that PR makes some reactor tests fail. E.g. this one:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[test]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">minimal_reactor</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">build_wasm</span><span class=\"p\">(</span><span class=\"s\">\"tests/wasm/minimal-reactor.wat\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">run_wasmtime</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">path</span><span class=\"p\">().</span><span class=\"n\">to_str</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"--disable-cache\"</span><span class=\"p\">])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">assert_eq!</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Adding a <code>_start</code> function to <code>minimal-reactor.wat</code> gets a complaint that it can't be both a command and a reactor.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_initialize\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Result:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"/var/folders/7y/bhkyc0053yb8cbd2swfz956wzsf2bs/T/.tmppNMSQK\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">Program</span><span class=\"w\"> </span><span class=\"n\">cannot</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">both</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Command</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">Reactor</span><span class=\"w\"></span>\n</code></pre></div>\n<p>So it turns out that's not the right way to patch the <code>.wat</code> file, but it somehow expects some export in there.<br>\nThis passes the test but looks suspicious (e.g. I wouldn't know how to generate this from a compiled program: e.g. rust), without manually editing the .wat file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_initialize\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Any advice on where I can read about reactors and how they are supposed to work?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/d8d4bf81b260ea18f56475fbde96b6662a365cf8/crates/wasmtime/src/linker.rs#L1062\" style=\"background-image: url(https://opengraph.githubassets.com/98ad9fffa2b53f48b7d304f2ade9d093cf5666a7d008786338f42c560ba70f4b/bytecodealliance/wasmtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/d8d4bf81b260ea18f56475fbde96b6662a365cf8/crates/wasmtime/src/linker.rs#L1062\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1927\" style=\"background-image: url(https://opengraph.githubassets.com/cba6347f26517d0fe19c9976343502fd5e13ac922875db7bc9d79b559f0a7a46/bytecodealliance/wasmtime/pull/1927)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1927\" title=\"Do not return a no-op function if default function isn't found by AlexEne 路 Pull Request #1927 路 bytecodealliance/wasmtime\">Do not return a no-op function if default function isn't found by AlexEne 路 Pull Request #1927 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR changes the linker.get_default() deafult return value. It removes the return of a no-op function as this is rarely what users of the method would want. I have replaced it with an error that...</div></div></div>",
        "id": 243904618,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1624621597
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 243904891,
        "sender_full_name": "bjorn3",
        "timestamp": 1624621768
    },
    {
        "content": "<p>But if I add a <code>_start</code> function to the minimal reactor, the test fails as it says it can't be both a command and a reactor</p>",
        "id": 243904999,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1624621811
    },
    {
        "content": "<p>not sure what the fix would be.</p>",
        "id": 243905108,
        "sender_full_name": "bjorn3",
        "timestamp": 1624621879
    },
    {
        "content": "<p>I'll see if other maintainers have an opinion about this. <br>\nI wanted to fix the PR above but it's unclear to me what correct is <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>.<br>\nRight now, <code>get_default</code> is slightly confusing as it returns a newly created method if no suitable function is found when asking for a function from the module (probably not the caller's intent).<br>\nAt the same time, in the reactor system there are some assumptions that the linker works like that in wasmtime. (and that <code>_start</code> should not be present in reactors).</p>\n<p>That said, the only slightly more serious issue I see is if someone brings their reactors to WASMTime from another VM ecosystem, they may not work, but it's really unclear what correct is here <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 243916993,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1624628625
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> might know best how to fix this, but I suspect that the minimal reactor wants to keep working and it'd either be handled differently by the CLI or the <code>get_default</code> function would continue doing what it does for reactors or something like that</p>",
        "id": 243920950,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1624630316
    },
    {
        "content": "<p>What documentation there is for reactors is here: <a href=\"https://github.com/WebAssembly/WASI/blob/main/design/application-abi.md#current-unstable-abi\">https://github.com/WebAssembly/WASI/blob/main/design/application-abi.md#current-unstable-abi</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/blob/main/design/application-abi.md#current-unstable-abi\" style=\"background-image: url(https://opengraph.githubassets.com/d63e75bf5ff0449939a5bef62eb7b5cfca4bd65e4010c0261a7c8f6dce599d54/WebAssembly/WASI)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/blob/main/design/application-abi.md#current-unstable-abi\" title=\"WebAssembly/WASI\">WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div>",
        "id": 243939305,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1624638598
    },
    {
        "content": "<p>It hasn't been well developed yet, because in trying to figure out how reactors should work, we realized that what we really needed was for module linking etc. to subsume them.</p>",
        "id": 243939439,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1624638651
    },
    {
        "content": "<p>Module linking is on its way to doing that now, but not all the pieces are in place yet. So reactors are what we have for now.</p>",
        "id": 243939711,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1624638812
    },
    {
        "content": "<p>If we want <code>get_default</code> to fail, I think what we'll need to do is make the wasmtime CLI gracefully handle <code>get_default</code> failing -- that <code>minimal_reactor</code> test case works by invoking the wasmtime CLI.</p>",
        "id": 243941094,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1624639558
    },
    {
        "content": "<p>It may just be a matter of changing the <code>get_default</code> call in src/commands/run.rs to do handle the failure case</p>",
        "id": 243941190,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1624639590
    }
]