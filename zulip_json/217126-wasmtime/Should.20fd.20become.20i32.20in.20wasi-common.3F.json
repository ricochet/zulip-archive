[
    {
        "content": "<p>Currently it is defined as u32 in wasmtime: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/v9.0.0/crates/wasi-common/src/table.rs#L16\">https://github.com/bytecodealliance/wasmtime/blob/v9.0.0/crates/wasi-common/src/table.rs#L16</a>, but in wasi, the raw fd is i32 <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/os/wasi/io/raw.rs#L20\">https://github.com/rust-lang/rust/blob/master/library/std/src/os/wasi/io/raw.rs#L20</a>. I wonder if there's a reason behind this mismatch, and should we lean to one instead of having both? Thanks.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/v9.0.0/crates/wasi-common/src/table.rs#L16\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a93c070a8724236c3116ce1ed8b2a35d2e60a377\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383234346334353862346566393733383266333766343737393230356232353030393964386263366462323230613263616437383965333831666365376464622f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/v9.0.0/crates/wasi-common/src/table.rs#L16\" title=\"wasmtime/table.rs at v9.0.0 · bytecodealliance/wasmtime\">wasmtime/table.rs at v9.0.0 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/os/wasi/io/raw.rs#L20\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ef2fae2b76483582eb74cf7edf33c9ab46539e9f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666439363366666663633838363431346137633837663732623032363061623430663731356439636132323930313161626132303266313937376165333564662f727573742d6c616e672f72757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/os/wasi/io/raw.rs#L20\" title=\"rust/raw.rs at master · rust-lang/rust\">rust/raw.rs at master · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust/raw.rs at master · rust-lang/rust</div></div></div>",
        "id": 365694871,
        "sender_full_name": "anb",
        "timestamp": 1686609534
    },
    {
        "content": "<p>On the Wasm side of things, <code>u32</code> makes slightly more sense because it's an index into a table, it's never negative, and in theory there's no fundamental problem with having <code>1&lt;&lt;31</code> handles live at a time.</p>",
        "id": 365695076,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1686609605
    },
    {
        "content": "<p>On the C ABI side of things, <code>i32</code> makes slightly more sense because it's the type that corresponds to the C <code>int</code> type, which is what Unix uses for file descriptors, and thus what a lot of existing code is expecting.</p>",
        "id": 365695160,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1686609642
    },
    {
        "content": "<p>Rust's <code>std::os::wasi</code> follows the C ABI side of things, because existing Rust code may be similarly expecting it to be <code>i32</code>.</p>",
        "id": 365695377,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1686609730
    },
    {
        "content": "<p>In fact, I think on the Rust side <code>RawFd</code> used to be <code>u32</code>, but we changed it to <code>i32</code> for better compatibility.</p>",
        "id": 365695536,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1686609797
    },
    {
        "content": "<p>It doesn't look good to cast u32 to i32 from host calls, but using a negative fd in wasi should \"just work\" I guess, unless some lib has the assumption you mentioned. I guess the only issue is, without multiple return value(well, having std recompiled is not always an option), it's going to be tricky for host functions to return a fd or an err.</p>",
        "id": 365696332,
        "sender_full_name": "anb",
        "timestamp": 1686610104
    },
    {
        "content": "<p>WASI interfaces have never used <code>-1</code> to indicate an invalid file descriptor. In Preview1 witx they use <code>(result $error (expected $fd (error $errno)))</code> which lowers to a <code>__wasi_fd_t *retptr0</code> outparam.</p>",
        "id": 365709329,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1686616900
    },
    {
        "content": "<p>In Preview2, they use a <code>result</code> as well.</p>",
        "id": 365709413,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1686616924
    }
]