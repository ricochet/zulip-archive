[
    {
        "content": "<p>Hey <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span><br>\nThere is an issue with the emitted code, and I can't find what needs to change to make it work. It would help if I could run the output step by step and display registers, stack etc. Is it possible with lldb ? How can I add a breakpoint ?<br>\nThanks <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 464050076,
        "sender_full_name": "Vulcain",
        "timestamp": 1724245387
    },
    {
        "content": "<p>components or wasi p1?</p>",
        "id": 464052839,
        "sender_full_name": "Ralph",
        "timestamp": 1724245844
    },
    {
        "content": "<p>if components: <a href=\"https://hachyderm.io/@squillace/112989210932769282\">https://hachyderm.io/@squillace/112989210932769282</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hachyderm.io/@squillace/112989210932769282\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ebaf5362fc53977980fb320f009a668d878e91e0/68747470733a2f2f6d656469612e68616368796465726d2e696f2f6d656469615f6174746163686d656e74732f66696c65732f3131322f3938392f3231302f3339362f3631392f3639382f736d616c6c2f333637636162613766663562613231612e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hachyderm.io/@squillace/112989210932769282\" title=\"squillace (@squillace@hachyderm.io)\">squillace (@squillace@hachyderm.io)</a></div><div class=\"message_embed_description\">Attached: 1 video\n\nBack in March at #wasmio, @anfibiacreativa@mastodon.social and I showed a WIDE array of #webassembly debugging in #vscode: https://www.youtube.com/watch?v=sofGOtwGWu8. \n\nBut, you'll note: the debugger couldn't navigate #webassemblycomponent files. Now it can!</div></div></div>",
        "id": 464052976,
        "sender_full_name": "Ralph",
        "timestamp": 1724245871
    },
    {
        "content": "<p>wasi p1</p>",
        "id": 464052990,
        "sender_full_name": "Vulcain",
        "timestamp": 1724245877
    },
    {
        "content": "<p>then that works even better:</p>",
        "id": 464053022,
        "sender_full_name": "Ralph",
        "timestamp": 1724245889
    },
    {
        "content": "<p>whether in vscode or not, the magic invocation is <a href=\"https://github.com/squillace/hello-wasi-http/blob/ff567823aed4451142f31bd0a90b196d576fabf7/.vscode/launch.json#L11-L17\">https://github.com/squillace/hello-wasi-http/blob/ff567823aed4451142f31bd0a90b196d576fabf7/.vscode/launch.json#L11-L17</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/squillace/hello-wasi-http/blob/ff567823aed4451142f31bd0a90b196d576fabf7/.vscode/launch.json#L11-L17\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6fe258761e5fe0922e275c6c143d3fa953d46dcd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303435613235626561626666633932393531346635323836313262643132653531353631653661356265643430393264366666353439383164653333626661312f737175696c6c6163652f68656c6c6f2d776173692d68747470&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/squillace/hello-wasi-http/blob/ff567823aed4451142f31bd0a90b196d576fabf7/.vscode/launch.json#L11-L17\" title=\"hello-wasi-http/.vscode/launch.json at ff567823aed4451142f31bd0a90b196d576fabf7 · squillace/hello-wasi-http\">hello-wasi-http/.vscode/launch.json at ff567823aed4451142f31bd0a90b196d576fabf7 · squillace/hello-wasi-http</a></div><div class=\"message_embed_description\">simple repo to demonstrate how to debug Rust wasm components with wasmtime - squillace/hello-wasi-http</div></div></div>",
        "id": 464053238,
        "sender_full_name": "Ralph",
        "timestamp": 1724245938
    },
    {
        "content": "<p>lemme know how that works for you, because <em>IT IS NOT PERFECT</em></p>",
        "id": 464053376,
        "sender_full_name": "Ralph",
        "timestamp": 1724245983
    },
    {
        "content": "<p>you can also use wamr debugger for wasi p1, but to do so I think you have to build llvm and lldb from scratch and apply a patch and then build the vscode extension... so, <em>harder</em></p>",
        "id": 464053483,
        "sender_full_name": "Ralph",
        "timestamp": 1724246028
    },
    {
        "content": "<p>Thank you, but my situation is a bit specific. I am working on winch, and dwarf has not been developed yet. Also, I don't have any source language, I just wrote the module in WAT</p>",
        "id": 464054996,
        "sender_full_name": "Vulcain",
        "timestamp": 1724246378
    },
    {
        "content": "<p>I have an llvm &amp; lldb built from scratch on my machine, so I will try the wamr debugger</p>",
        "id": 464056289,
        "sender_full_name": "Vulcain",
        "timestamp": 1724246671
    },
    {
        "content": "<p>Ok, I can't debug the machine instructions emitted from another compiler with wamr. Thank you again for trying to help me</p>",
        "id": 464058575,
        "sender_full_name": "Vulcain",
        "timestamp": 1724247180
    },
    {
        "content": "<p>ah</p>",
        "id": 464069254,
        "sender_full_name": "Ralph",
        "timestamp": 1724249409
    },
    {
        "content": "<p>yeah, that's interesting. It's almost like you need a debugger that steps through wat</p>",
        "id": 464069427,
        "sender_full_name": "Ralph",
        "timestamp": 1724249457
    },
    {
        "content": "<p>or the binary wasm, rather</p>",
        "id": 464069535,
        "sender_full_name": "Ralph",
        "timestamp": 1724249491
    },
    {
        "content": "<p>I think we'd need a wasm language server for that, which..... <a href=\"https://github.com/wasm-lsp/wasm-lsp-server\">https://github.com/wasm-lsp/wasm-lsp-server</a> is archived, so... hmmm.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wasm-lsp/wasm-lsp-server\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4ec0d375dda8b68d441000603223a0b94cf7588d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373537613536333335373733356338393434643266353961396537316437633865313137616231386237316566663362323133323233643434343964633631392f7761736d2d6c73702f7761736d2d6c73702d736572766572&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wasm-lsp/wasm-lsp-server\" title=\"GitHub - wasm-lsp/wasm-lsp-server: A language server for WebAssembly\">GitHub - wasm-lsp/wasm-lsp-server: A language server for WebAssembly</a></div><div class=\"message_embed_description\">A language server for WebAssembly. Contribute to wasm-lsp/wasm-lsp-server development by creating an account on GitHub.</div></div></div>",
        "id": 464069850,
        "sender_full_name": "Ralph",
        "timestamp": 1724249564
    },
    {
        "content": "<p>Geez, that would be helpful to have.</p>",
        "id": 464069915,
        "sender_full_name": "Ralph",
        "timestamp": 1724249586
    },
    {
        "content": "<p>Yeah it would be cool, but I actually don't need source code mapping or any debug info at all. I just want to run the machine code (arm) step by step</p>",
        "id": 464076432,
        "sender_full_name": "Vulcain",
        "timestamp": 1724251235
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/PaA6usnXvJobrlSj_AvPplBv/image.png\">image.png</a><br>\nI think it is possible because if I introduce a memory error, it actually stops in the guest code. I just don't know how to add a proper breakpoint</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/PaA6usnXvJobrlSj_AvPplBv/image.png\" title=\"image.png\"><img data-original-dimensions=\"1462x582\" src=\"/user_uploads/thumbnail/15107/PaA6usnXvJobrlSj_AvPplBv/image.png/840x560.webp\"></a></div>",
        "id": 464078442,
        "sender_full_name": "Vulcain",
        "timestamp": 1724251772
    },
    {
        "content": "<p>actually, I think we might be able to make one that does this fairly easily.....</p>",
        "id": 464079068,
        "sender_full_name": "Ralph",
        "timestamp": 1724251943
    },
    {
        "content": "<p>if you use vscode, there's something called a \"mock-debug\" extension that implements step-by-step walkthrough using markdown. Functionally speaking, that could easily be modified to walk over WAT</p>",
        "id": 464079229,
        "sender_full_name": "Ralph",
        "timestamp": 1724251997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"739509\">Vulcain</span> <a href=\"#narrow/stream/217126-wasmtime/topic/debugging.3A.20add.20breakpoint.20to.20emitted.20code/near/464078442\">said</a>:</p>\n<blockquote>\n<p><a href=\"/user_uploads/15107/PaA6usnXvJobrlSj_AvPplBv/image.png\">image.png</a><br>\nI think it is possible because if I introduce a memory error, it actually stops in the guest code. I just don't know how to add a proper breakpoint</p>\n</blockquote>\n<p>oh wait, that's lldb</p>",
        "id": 464079311,
        "sender_full_name": "Ralph",
        "timestamp": 1724252027
    },
    {
        "content": "<p>dammit, I've done this....</p>",
        "id": 464079550,
        "sender_full_name": "Ralph",
        "timestamp": 1724252098
    },
    {
        "content": "<ol>\n<li>breakpoint set -l &lt;line-number&gt; ; sets a breakpoint on a line in the current context.</li>\n<li>breakpoint set --file &lt;file-name&gt; -l &lt;line-number&gt; ; sets a breakpoint on a line on a given file.</li>\n<li>breakpoint set --name &lt;method-name&gt; ; sets a breakpoint on a given function name, globally.</li>\n</ol>",
        "id": 464079667,
        "sender_full_name": "Ralph",
        "timestamp": 1724252132
    },
    {
        "content": "<p>Yes, but there is no file, I am trying to debug the arm code emitted by the winch compiler</p>",
        "id": 464080569,
        "sender_full_name": "Vulcain",
        "timestamp": 1724252305
    },
    {
        "content": "<p>I was thinking the arm code was a text format, but if it's not, yeah -- you're sol there</p>",
        "id": 464081437,
        "sender_full_name": "Ralph",
        "timestamp": 1724252432
    },
    {
        "content": "<p>Thank you again for trying !</p>",
        "id": 464081656,
        "sender_full_name": "Vulcain",
        "timestamp": 1724252459
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=Arm.arm-debugger\">https://marketplace.visualstudio.com/items?itemName=Arm.arm-debugger</a> ?????</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://marketplace.visualstudio.com/items?itemName=Arm.arm-debugger\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1548c4d6cbbfe561c902638896509cbf40289e5f/68747470733a2f2f61726d2e67616c6c65727963646e2e76736173736574732e696f2f657874656e73696f6e732f61726d2f61726d2d64656275676765722f312e322e322f313732313832363130393731302f4d6963726f736f66742e56697375616c53747564696f2e53657276696365732e49636f6e732e44656661756c74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://marketplace.visualstudio.com/items?itemName=Arm.arm-debugger\" title=\"Arm Debugger - Visual Studio Marketplace\">Arm Debugger - Visual Studio Marketplace</a></div><div class=\"message_embed_description\">Extension for Visual Studio Code - Arm Debugger for Arm Cortex-M based microcontrollers (MCUs), development boards and debug probes, implementing the Microsoft Debug Adapter Protocol (DAP)</div></div></div>",
        "id": 464082362,
        "sender_full_name": "Ralph",
        "timestamp": 1724252562
    },
    {
        "content": "<p>I have no way to tell this extension where to add the breakpoint as the code does not exist before execution <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 464082961,
        "sender_full_name": "Vulcain",
        "timestamp": 1724252648
    },
    {
        "content": "<p>it would need to be run <em>once the code is laid down</em> so that sounds like an attach?</p>",
        "id": 464083272,
        "sender_full_name": "Ralph",
        "timestamp": 1724252699
    },
    {
        "content": "<p>at execution time, is the code just held in memory? not on the disk once created?</p>",
        "id": 464083541,
        "sender_full_name": "Ralph",
        "timestamp": 1724252737
    },
    {
        "content": "<p>I doubt I have a solution, just trying to imagine what one could look like.</p>",
        "id": 464083679,
        "sender_full_name": "Ralph",
        "timestamp": 1724252758
    },
    {
        "content": "<p>I think so, but this is not a part of the codebase I am familiar with</p>",
        "id": 464083823,
        "sender_full_name": "Vulcain",
        "timestamp": 1724252774
    },
    {
        "content": "<p>I can compile AOT, but I don't think the debugger binds cwasm</p>",
        "id": 464084221,
        "sender_full_name": "Vulcain",
        "timestamp": 1724252837
    },
    {
        "content": "<p>My guess is it adds the generated code to the heap and jump to this address to execute the code. If it is what is happening, then I have to breakpoint this place. I don't know where it is though</p>",
        "id": 464085076,
        "sender_full_name": "Vulcain",
        "timestamp": 1724253039
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"739509\">@Vulcain</span> if it helps, a technique that I've used to debug emitted-JIT-code issues is to insert artificial breakpoints (<code>ud2</code> on Intel, <code>udf</code> on aarch64) by just... emitting them in sequence in the JIT compiler. Then I run the whole wasmtime process under gdb/lldb; I hit the breakpoint in the code; and (at least in gdb) you can \"jump\" over the opcode (<code>$pc+2</code> on Intel, <code>$pc+4</code> on aarch64) and single-step from there</p>",
        "id": 464086263,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724253316
    },
    {
        "content": "<p>very low-level and manual technique but it lets you examine the whole machine state</p>",
        "id": 464086295,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724253327
    },
    {
        "content": "<p>A technique that I usually use with LLDB in macOS is to put a breakpoint in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1073\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1073</a> (if you're invoking wasmtime from the CLI)</p>\n<p>That should get you a debugger at where the function call starts. The complex thing about this approach is that you need to be familiar with how trampolines work in Wasmtime in order to navigate to the assembly of the Wasm function that you're trying to inspect.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1073\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/64b8f03d131fd7998eeeea3d929fe4e9e811513a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303132336664623737653432336138616264313835303339303362313766313666393230336532316532613465306231393164373137353931396265353537612f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1073\" title=\"wasmtime/crates/wasmtime/src/runtime/func.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/func.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 464086541,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1724253383
    },
    {
        "content": "<p>separately, <code>rr</code> (the reversible debugger) is extraordinarily useful for things like these -- Mozilla developed it originally to debug Firefox and its JITs -- and it has certain CPU requirements, on x86 requires recent Intel chips, but I <em>think</em> it also supports Apple aarch64 CPUs if you're running native Asahi Linux (if that applies)</p>",
        "id": 464086556,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724253386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"411395\">Saúl Cabrera</span> <a href=\"#narrow/stream/217126-wasmtime/topic/debugging.3A.20add.20breakpoint.20to.20emitted.20code/near/464086541\">said</a>:</p>\n<blockquote>\n<p>A technique that I usually use with LLDB in macOS is to put a breakpoint in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1073\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1073</a> (if you're invoking wasmtime from the CLI)</p>\n<p>That should get you a debugger at where the function call starts. The complex thing about this approach is that you need to be familiar with how trampolines work in Wasmtime in order to navigate to the assembly of the Wasm function that you're trying to inspect.</p>\n</blockquote>\n<p>That's the place I was looking for ! I will also try the udf technique, and take a look at <code>rr</code>. Thank you both for the info <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 464087320,
        "sender_full_name": "Vulcain",
        "timestamp": 1724253541
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"739509\">Vulcain</span> has marked this topic as resolved.</p>",
        "id": 464106857,
        "sender_full_name": "Notification Bot",
        "timestamp": 1724258104
    }
]