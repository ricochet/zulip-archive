[
    {
        "content": "<p>How can I specify initial memory allocation size to be 4 pages instead of default 20 pages and then how to later grow it if the memory is insufficient while some module variable allocations.</p>",
        "id": 481440979,
        "sender_full_name": "spino17",
        "timestamp": 1731140603
    },
    {
        "content": "<p>This is a function of the memory declaration in the Wasm module -- e.g., <code>(memory 4)</code> vs. <code>(memory 20)</code>. To grow, you'll want to use the <code>memory.grow</code> opcode.</p>",
        "id": 481481852,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731175917
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Specify.20initial.20memory.20allocation.20size/near/481481852\">said</a>:</p>\n<blockquote>\n<p>This is a function of the memory declaration in the Wasm module -- e.g., <code>(memory 4)</code> vs. <code>(memory 20)</code>. To grow, you'll want to use the <code>memory.grow</code> opcode.</p>\n</blockquote>\n<p>thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> for the response. So let's say I am using cargo to build my rust code for target <code>wasm32-unknown-unknown</code>, what should I add in the Rust code to make it import memory with the size <code>4</code> and then export the same memory</p>",
        "id": 481485177,
        "sender_full_name": "spino17",
        "timestamp": 1731178454
    },
    {
        "content": "<p>I am confused whether this specification of memory being 4 pages goes on the host side  using some wasmtime APIs or on the module side using some constructs provided by the language or both!</p>",
        "id": 481485323,
        "sender_full_name": "spino17",
        "timestamp": 1731178566
    },
    {
        "content": "<p>Oh, sorry, my answer was at the level of raw WebAssembly -- I assumed you were working at that level as that's the abstraction level at which memory size is handled. If you're targeting Wasm with a toolchain like Rust, it's up to the toolchain to decide the initial memory size -- wasm-ld in this case. There is an option to set the shadow stack size and turning it down may decrease the initial size (I don't recall it offhand) but fundamentally, you cannot dial in a manual size because it needs to be large enough to contain the data</p>",
        "id": 481485329,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178574
    },
    {
        "content": "<p>the host side doesn't specify memory size -- Wasmtime will do whatever the module says</p>",
        "id": 481485342,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178588
    },
    {
        "content": "<p>ohh then what's the 18 default pages size ? is it not set by wasmtime ?</p>",
        "id": 481485415,
        "sender_full_name": "spino17",
        "timestamp": 1731178668
    },
    {
        "content": "<p>no; Wasmtime doesn't set a default number of pages</p>",
        "id": 481485482,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178710
    },
    {
        "content": "<p>if you dump your module with, e.g., <code>wasm2wat</code>, you should see a declaration like <code>(memory N)</code> -- that's where the initial size comes from</p>",
        "id": 481485504,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178729
    },
    {
        "content": "<p>think of it like a native binary (ELF or whatever) -- the program has a certain size for its <code>.data</code> and <code>.bss</code> sections. One can't tell LInux \"please run this binary but only give it 4KiB of .data\" -- that would break execution</p>",
        "id": 481485546,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178779
    },
    {
        "content": "<p>ohh so I can only set the maximum size using limiters and not the initial size. So why then wasmtime exposes Memory creation APIs ? why then host has control to create memory with min and max size ?</p>",
        "id": 481485552,
        "sender_full_name": "spino17",
        "timestamp": 1731178790
    },
    {
        "content": "<p>that's for memories you define and a guest module imports</p>",
        "id": 481485621,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Specify.20initial.20memory.20allocation.20size/near/481485546\">said</a>:</p>\n<blockquote>\n<p>think of it like a native binary (ELF or whatever) -- the program has a certain size for its <code>.data</code> and <code>.bss</code> sections. One can't tell LInux \"please run this binary but only give it 4KiB of .data\" -- that would break execution</p>\n</blockquote>\n<p>ohh yeah this makes sense! it's information coming completely from the module and not runtime dependent so makes sense.</p>",
        "id": 481485636,
        "sender_full_name": "spino17",
        "timestamp": 1731178833
    },
    {
        "content": "<p>in a sense, via the host APIs you can also do the things a Wasm module does; some other module could import this memory, just like some other module could import a memory exported by a module that specifies that memory's size</p>",
        "id": 481485669,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178856
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Specify.20initial.20memory.20allocation.20size/near/481485621\">said</a>:</p>\n<blockquote>\n<p>that's for memories you define and a guest module imports</p>\n</blockquote>\n<p>so this memory won't be used by the module stack and heap ?</p>",
        "id": 481485684,
        "sender_full_name": "spino17",
        "timestamp": 1731178863
    },
    {
        "content": "<p>Right, usually at least. I'm trying to be careful to make a distinction between standard and convention here; the <em>convention</em> for today's Wasm toolchains is that where they need stack and heap in their compilation model, they define their own memory, they don't import it</p>",
        "id": 481485727,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731178907
    },
    {
        "content": "<p>ohh this clears up a lot of my doubts! so that means the stack heap memory can only be exported and the size comes purely from the binary and has no role of runtime to manipulate that</p>",
        "id": 481485832,
        "sender_full_name": "spino17",
        "timestamp": 1731178974
    },
    {
        "content": "<p>so this means I should search for ways on the wasm compiler toolchain side to specify memory size rather than wasmtime ?</p>",
        "id": 481485922,
        "sender_full_name": "spino17",
        "timestamp": 1731179033
    },
    {
        "content": "<p>yes, exactly</p>",
        "id": 481486013,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731179095
    },
    {
        "content": "<p>the only fully configurable option I'm aware of for Rust is shadow stack size, and location -- see e.g. <a href=\"https://users.rust-lang.org/t/increasing-rust-wasm32-stack-size/73605\">https://users.rust-lang.org/t/increasing-rust-wasm32-stack-size/73605</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://users.rust-lang.org/t/increasing-rust-wasm32-stack-size/73605\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/14b4e5a1470bc3b6ece486f29eabac5e30160783/68747470733a2f2f676c6f62616c2e646973636f757273652d63646e2e636f6d2f666c65783031392f75706c6f6164732f727573745f6c616e672f6f726967696e616c2f32582f382f383365343139353665636366643637616436666637366631356132633232653538646233316434662e737667&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://users.rust-lang.org/t/increasing-rust-wasm32-stack-size/73605\" title=\"Increasing rust wasm32 stack size\">Increasing rust wasm32 stack size</a></div><div class=\"message_embed_description\">Quoting Make stack size configurable · Issue #479 · rustwasm/wasm-pack · GitHub  [target.wasm32-unknown-unknown] rustflags = [   \"-C\", \"link-args=-z stack-size=1500000\", ]  Is that all that is required to increase the wasm32 stack size, or is something else required ?</div></div></div>",
        "id": 481486066,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731179146
    },
    {
        "content": "<p>other than that, wasm-ld will I think pack things in like any other linker would, linearly in the address space</p>",
        "id": 481486129,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731179169
    },
    {
        "content": "<p>ohh okay, much thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> for clearing up this. I don't know since how long I have been scratching my head around this memory management business of wasm</p>",
        "id": 481486141,
        "sender_full_name": "spino17",
        "timestamp": 1731179185
    },
    {
        "content": "<p>if you want to reduce memory usage my recommendations would be (i) reduce stack size and (ii) look for and find ways to remove any static data, e.g. from library functionality you don't use</p>",
        "id": 481486152,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731179195
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Specify.20initial.20memory.20allocation.20size/near/481486066\">said</a>:</p>\n<blockquote>\n<p>the only fully configurable option I'm aware of for Rust is shadow stack size, and location -- see e.g. <a href=\"https://users.rust-lang.org/t/increasing-rust-wasm32-stack-size/73605\">https://users.rust-lang.org/t/increasing-rust-wasm32-stack-size/73605</a></p>\n</blockquote>\n<p>thanks for sharing this, will check it out</p>",
        "id": 481486153,
        "sender_full_name": "spino17",
        "timestamp": 1731179196
    },
    {
        "content": "<p>best of luck!</p>",
        "id": 481486156,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1731179201
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Specify.20initial.20memory.20allocation.20size/near/481486152\">said</a>:</p>\n<blockquote>\n<p>if you want to reduce memory usage my recommendations would be (i) reduce stack size and (ii) look for and find ways to remove any static data, e.g. from library functionality you don't use</p>\n</blockquote>\n<p>will try to follow this advice and continue this investigation <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 481486205,
        "sender_full_name": "spino17",
        "timestamp": 1731179258
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Specify.20initial.20memory.20allocation.20size/near/481486156\">said</a>:</p>\n<blockquote>\n<p>best of luck!</p>\n</blockquote>\n<p>thanks!</p>",
        "id": 481486215,
        "sender_full_name": "spino17",
        "timestamp": 1731179267
    }
]