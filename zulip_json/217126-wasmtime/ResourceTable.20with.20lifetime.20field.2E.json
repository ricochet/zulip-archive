[
    {
        "content": "<p>Hello, </p>\n<p>If it is possible to push a struct with reference filed to a <code>ResourceTable</code>?   I failed to try to impl the Trait method that's declared by <code>wasmtime::component::bindgen!(...)</code>.  </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// the data struct I want to push into ResourceTable, it has a  reference typed field `map`</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">MapKeyIter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">map</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"w\"> </span><span class=\"nc\">MapHandle</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">prev</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">next</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\">// bindgen!() generates Trait definition</span>\n\n<span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HostMapKeyIter</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">next</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">rep</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n\n\n<span class=\"c1\">// My impl code of `HostMapKeyIter` trait</span>\n\n<span class=\"k\">impl</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ebpf</span><span class=\"p\">::</span><span class=\"n\">HostMapKeyIter</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BpfCtx</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">State</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">next</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">libbpf_rs</span><span class=\"p\">::</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">map_key_iter</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"w\"> </span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">libbpf_rs</span><span class=\"p\">::</span><span class=\"n\">MapKeyIter</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">self_</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">map_key_iter</span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">rep</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">libbpf_rs</span><span class=\"p\">::</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">rep</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I got a compiler error of \"borrowed data escapes outside of method<br>\n<code>self_</code> escapes the method body here\"</p>\n<p>Thus I  want to add a lifetime for MapKeyIter and modified the signature of <code>next</code> like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">next</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">libbpf_rs</span><span class=\"p\">::</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>\n<p>It tells me lifetime mismatch and signature mismatch. </p>\n<p>The solution for this we think is that <code>wasmtime::component::bindgen!()</code> generates Trait  with explicitly lifetime annotation instead of elided anonymouse lifetime,  for example, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">HostMapKeyIter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">next</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">self_</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Value</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">drop</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"n\">rep</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">MapKeyIter</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">wasmtime</span><span class=\"p\">::</span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>then avoid lifetime mismatch and signature mismatch. </p>\n<p>Could you share your insights with us?   Please let us know if you have different solution for push a struct with reference filed into a ResourceTable. </p>\n<p>Thanks,<br>\nChengdong</p>",
        "id": 449210871,
        "sender_full_name": "Bryton",
        "timestamp": 1720152660
    },
    {
        "content": "<p>After we investigated wit bindgen marco, we realized that wit bindgen generates trait <strong>without lifetime</strong> for every resource type. </p>\n<p><a href=\"https://docs.rs/wasmtime-wit-bindgen/22.0.0/src/wasmtime_wit_bindgen/lib.rs.html#1307\">https://docs.rs/wasmtime-wit-bindgen/22.0.0/src/wasmtime_wit_bindgen/lib.rs.html#1307</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">            </span><span class=\"n\">uwriteln</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">src</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"pub trait Host{camel} {{\"</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>and </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">generate_function_trait_sig</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">Function</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wt</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">wasmtime_path</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">rustdoc</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">docs</span><span class=\"p\">);</span>\n\n<span class=\"w\">        </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">gen</span><span class=\"p\">.</span><span class=\"n\">opts</span><span class=\"p\">.</span><span class=\"n\">async_</span><span class=\"p\">.</span><span class=\"n\">is_import_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">\"async \"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">\"fn \"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">rust_function_name</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">\"(&amp;mut self, \"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">to_rust_ident</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">\": \"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">print_ty</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">**</span><span class=\"n\">TypeMode</span><span class=\"p\">::</span><span class=\"n\">Owned</span><span class=\"o\">**</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">push_str</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>There is no option can control this.</p>",
        "id": 449240135,
        "sender_full_name": "Bryton",
        "timestamp": 1720164887
    },
    {
        "content": "<p>I think that's what this <code>with</code> construct is meant for <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs#L20-L37\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs#L20-L37</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs#L20-L37\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b93607450cc6a193b3e24351a108d46b8a47d63e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333866303537326436303836373263666265336563653938663332646666323863643338366536633136396565663937323663316633643537633065613139642f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/bindings.rs#L20-L37\" title=\"wasmtime/crates/wasi-http/src/bindings.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasi-http/src/bindings.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 449291159,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1720179688
    },
    {
        "content": "<p>At this time, no, you can't put anything with a lifetime into <code>ResourceTable</code> (unless it's <code>'static</code>). That's required for a number of reasons related to memory safety at this time and would require some significant rearchitecting to enable that I think. I haven't tried too too hard though so it's mostly a gut feeling, if you'd like it might be reasonable to try to plumb a lifetime parameter around</p>",
        "id": 449884467,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720448786
    }
]