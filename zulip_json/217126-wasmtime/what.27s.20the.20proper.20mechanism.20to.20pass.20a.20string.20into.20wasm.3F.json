[
    {
        "content": "<p>it seems to me that I need to take my memory, grow it for the string's utf8 length, write the string bytes into that memory and pass the address and length down to the wasm function. Is this the recommended approach?</p>",
        "id": 268385304,
        "sender_full_name": "Vladimir Pouzanov",
        "timestamp": 1642510018
    },
    {
        "content": "<p>The future-facing answer for this questions is \"interface types will make this much easier\" along the lines of the <code>wit-bindgen</code> project. Otherwise though the general mechanism typically used for this is that the wasm module exposes a memory allocation function (e.g. <code>malloc</code>) and that's called to reserve space, the string is copied in, and then another wasm function is called.</p>",
        "id": 268407804,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1642519781
    },
    {
        "content": "<p>You probably don't want to grow memory because then there's no great way for that memory to be reclaimed and memory can only be grown in units of 64k bytes at a time</p>",
        "id": 268407873,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1642519802
    },
    {
        "content": "<p>yeah, that seems to match my conclusions, thanks. Oddly enough I picked AssemblyScript as my initial guest language and it's one of those that doesn't have a <code>malloc</code> and instead uses GC shenanigans.</p>",
        "id": 268416795,
        "sender_full_name": "Vladimir Pouzanov",
        "timestamp": 1642522914
    }
]