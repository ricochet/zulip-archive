[
    {
        "content": "<p>Can you access the WASM memory by pointer instead of just offset/length via <a href=\"http://memory.read/write\">memory.read/write</a> in Ruby?</p>",
        "id": 404676865,
        "sender_full_name": "Noah Everett",
        "timestamp": 1701190374
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span></p>",
        "id": 404679791,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701191242
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> ! The WASM code is allocating a buffer which returns a pointer back to the host to write to:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">fun</span><span class=\"w\"> </span><span class=\"n\">allocateBuffer</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"w\"> </span>: <span class=\"nc\">Int32</span><span class=\"p\">)</span><span class=\"w\"> </span>: <span class=\"nc\">Pointer</span><span class=\"p\">(</span><span class=\"n\">UInt8</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Pointer</span><span class=\"p\">(</span><span class=\"n\">UInt8</span><span class=\"p\">).</span><span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">end</span>\n</code></pre></div>\n<p>I was previously using Wasmer which allows something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">bufPtr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">.</span><span class=\"n\">allocateBuffer</span><span class=\"p\">.(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"cp\">$memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">export</span><span class=\"p\">(</span><span class=\"s\">\"memory\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">view</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"cp\">$memory</span><span class=\"p\">.</span><span class=\"n\">uint8_view</span><span class=\"w\"> </span><span class=\"n\">bufPtr</span>\n</code></pre></div>\n<p>But maybe there is a better way to do this using Wasmtime's read/write methods, just not for sure how to access the \"memory\" in my WASM code which is written in Crystal lang which is why the previous code was using pointers.</p>\n<p>Any help is greatly appreciated!</p>",
        "id": 404682158,
        "sender_full_name": "Noah Everett",
        "timestamp": 1701192160
    },
    {
        "content": "<p>oh sorry I know very little about Ruby bindings myself, but I think Saul should know more</p>",
        "id": 404682462,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701192269
    },
    {
        "content": "<p>No prob! just putting the relevant code here just in case, I appreciate the cc :)</p>",
        "id": 404682596,
        "sender_full_name": "Noah Everett",
        "timestamp": 1701192335
    },
    {
        "content": "<p>Hmm so I found \"to_memory_view\" but unsure how to use it in this context. Basically trying to figure out how to pass string data between the host and guest using an allocated buffer and pointer</p>\n<p>or any other way to do this correctly in wasmtime-ruby</p>\n<p>Thanks in advance for any direction!</p>",
        "id": 404708314,
        "sender_full_name": "Noah Everett",
        "timestamp": 1701201653
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"670753\">@Noah Everett</span>  --  if I'm understanding your question correctly, I think that you could achieve what you want by doing something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ptr</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">invoke</span><span class=\"p\">(</span><span class=\"s\">\"allocateBuffer\"</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">[</span><span class=\"s\">\"memory\"</span><span class=\"p\">].</span><span class=\"n\">to_memory</span>\n<span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">data</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n#<span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">needed</span>\n</code></pre></div>\n<p>That said -- the bindings don't currently expose an API analogous to <code>Memory::data_ptr</code>https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#method.data_ptr, which could be another avenue to getting a mutable pointer to the memory</p>",
        "id": 404712080,
        "sender_full_name": "Saúl Cabrera",
        "timestamp": 1701203052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"555218\">@Saul Shanabrook</span> oh wow I didn't know it could take a pointer (feel a little stupid now)! I just assumed it was just writing at the byte offset...trying it now, thank you!</p>",
        "id": 404713383,
        "sender_full_name": "Noah Everett",
        "timestamp": 1701203631
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span> yup it works, I was making that way more complicated than it had to be, my fault...I really appreciate your help on the func_new and now this...cheers!</p>",
        "id": 404713944,
        "sender_full_name": "Noah Everett",
        "timestamp": 1701203879
    }
]