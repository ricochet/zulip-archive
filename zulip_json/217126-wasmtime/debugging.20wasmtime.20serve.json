[
    {
        "content": "<p>Anyone here have experience using lldb and gdb with the <code>wasmtime serve</code> command? I can get lldb and gdb started, but the objective is NOT to debug wasmtime itself, but rather the running wasm and using dwarf symbols to map that to the original source code.</p>",
        "id": 425089788,
        "sender_full_name": "Ralph",
        "timestamp": 1709732822
    },
    {
        "content": "<p>I can get gdb and lldb started easily enough, but because the <code>serve</code> command doesn't seem to open the endpoint, I can't hit it.</p>",
        "id": 425089965,
        "sender_full_name": "Ralph",
        "timestamp": 1709732878
    },
    {
        "content": "<p>I do get a wonderful list of tokio processes, however, so I've got that going for me.....</p>",
        "id": 425090055,
        "sender_full_name": "Ralph",
        "timestamp": 1709732898
    },
    {
        "content": "<p>I have this to follow: <a href=\"https://docs.wasmtime.dev/examples-rust-debugging.html\">https://docs.wasmtime.dev/examples-rust-debugging.html</a>, though my source code is C, so I'll need to ensure that /opt/wasi-sdk/bin/clang is building dwarf in of course.</p>",
        "id": 425090475,
        "sender_full_name": "Ralph",
        "timestamp": 1709733034
    },
    {
        "content": "<p>NOt tried <code>serve</code> but for source debugging I do</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">c</span>:<span class=\"err\">\\</span><span class=\"s\">\"Program Files\"</span><span class=\"err\">\\</span><span class=\"n\">llvm</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">lldb</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"err\">\\</span><span class=\"n\">debug</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">exe</span>\n</code></pre></div>\n<p>Then </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">launch</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">stop</span><span class=\"o\">-</span><span class=\"n\">at</span><span class=\"o\">-</span><span class=\"n\">entry</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"w\"> </span><span class=\"n\">debug</span><span class=\"o\">-</span><span class=\"n\">info</span><span class=\"w\"> </span><span class=\"n\">c</span>:<span class=\"err\">\\</span><span class=\"n\">tmp</span><span class=\"err\">\\</span><span class=\"n\">console</span><span class=\"err\">\\</span><span class=\"n\">bin</span><span class=\"err\">\\</span><span class=\"n\">Debug</span><span class=\"err\">\\</span><span class=\"n\">net8</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"err\">\\</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"err\">\\</span><span class=\"n\">native</span><span class=\"err\">\\</span><span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">breakpoint</span><span class=\"w\"> </span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"mf\">1.</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">5</span>\n<span class=\"n\">c</span>\n</code></pre></div>",
        "id": 425634227,
        "sender_full_name": "Scott Waye",
        "timestamp": 1709949753
    },
    {
        "content": "<p>do you get dwarf symbols in return? I can GET dwarf info from core modules, but seemingly I'm defied by compoents:</p>",
        "id": 425798332,
        "sender_full_name": "Ralph",
        "timestamp": 1710098655
    },
    {
        "content": "<p>Core wasm:</p>",
        "id": 425798390,
        "sender_full_name": "Ralph",
        "timestamp": 1710098718
    },
    {
        "content": "<p>squillace@idiopath:~/work/witlldb/hello-c$ lldb -- wasmtime -D debug-info=y foo.wasm<br>\nTraceback (most recent call last):<br>\n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;<br>\nModuleNotFoundError: No module named 'lldb.embedded_interpreter'<br>\n(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"-D\" \"debug-info=y\" \"foo.wasm\"<br>\n(lldb) breakpoint set --name main<br>\nBreakpoint 1: where = wasmtime`main, address = 0x00000000004af180<br>\n(lldb) run<br>\nProcess 181137 launched: '/home/squillace/.wasmtime/bin/wasmtime' (x86_64)<br>\nProcess 181137 stopped</p>\n<ul>\n<li>\n<p>thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n&lt;snip&gt;<br>\n(lldb) c<br>\nProcess 181137 resuming<br>\n1 location added to breakpoint 1<br>\nProcess 181137 stopped</p>\n</li>\n<li>\n<p>thread #1, name = 'wasmtime', stop reason = breakpoint 1.2<br>\n    frame #0: 0x00007ffff76eb60a JIT(0x7ffff732e010)`foo::main::h6f744fe0c842de61 at foo.rs:2:3<br>\n   1    fn main() {<br>\n-&gt; 2      println!(\"hello from everywhere!\");<br>\n   3    }</p>\n</li>\n</ul>",
        "id": 425798416,
        "sender_full_name": "Ralph",
        "timestamp": 1710098747
    },
    {
        "content": "<p>no problem there</p>",
        "id": 425798422,
        "sender_full_name": "Ralph",
        "timestamp": 1710098755
    },
    {
        "content": "<p>but with components, I can't grab the function name. The core wasm name was \"main\" but the component export function is \"__main_void\". I tried both:</p>",
        "id": 425798569,
        "sender_full_name": "Ralph",
        "timestamp": 1710098877
    },
    {
        "content": "<p>squillace@idiopath:~/work/witlldb/hello-c$ lldb -- wasmtime run -D debug-info=y comfoonent.wasm<br>\n(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"run\" \"-D\" \"debug-info=y\" \"comfoonent.wasm\"<br>\n(lldb) breakpoint set -name __main_void<br>\n(lldb) run<br>\nProcess 182996 launched: '/home/squillace/.wasmtime/bin/wasmtime' (x86_64)<br>\nhello from everywhere!<br>\nProcess 182996 exited with status = 0 (0x00000000)<br>\n(lldb) exit</p>\n<p>squillace@idiopath:~/work/witlldb/hello-c$ lldb -- wasmtime run -D debug-info=y comfoonent.wasm<br>\n(lldb) target create \"wasmtime\"<br>\nCurrent executable set to 'wasmtime' (x86_64).<br>\n(lldb) settings set -- target.run-args  \"run\" \"-D\" \"debug-info=y\" \"comfoonent.wasm\"<br>\n(lldb) breakpoint set --name main<br>\n(lldb) run<br>\n&lt;snikp&gt; <br>\n(lldb) c<br>\nProcess 183439 resuming<br>\nhello from everywhere!<br>\nProcess 183439 exited with status = 0 (0x00000000)</p>",
        "id": 425798678,
        "sender_full_name": "Ralph",
        "timestamp": 1710098958
    },
    {
        "content": "<p>trying to do it by setting lines and files ALSO doesn't work, but does for core wasm:</p>",
        "id": 425798915,
        "sender_full_name": "Ralph",
        "timestamp": 1710099134
    },
    {
        "content": "<p>squillace@idiopath:~/work/witlldb/hello-c$ lldb -- wasmtime run -D debug-info=y comfoonent.wasm<br>\n(lldb) settings set -- target.run-args  \"run\" \"-D\" \"debug-info=y\" \"comfoonent.wasm\"<br>\n(lldb) breakpoint set -f <a href=\"http://foo.rs\">foo.rs</a> -l 2<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) run<br>\nProcess 187505 launched: '/home/squillace/.wasmtime/bin/wasmtime' (x86_64)<br>\nhello from everywhere!<br>\nProcess 187505 exited with status = 0 (0x00000000)<br>\n(lldb) exit</p>\n<p>squillace@idiopath:~/work/witlldb/hello-c$ lldb -- wasmtime -D debug-info=y foo.wasm<br>\n(lldb) settings set -- target.run-args  \"-D\" \"debug-info=y\" \"foo.wasm\"<br>\n(lldb) breakpoint set -f <a href=\"http://foo.rs\">foo.rs</a> -l 2<br>\nBreakpoint 1: no locations (pending).<br>\nWARNING:  Unable to resolve breakpoint to any actual locations.<br>\n(lldb) run<br>\nProcess 187877 launched: '/home/squillace/.wasmtime/bin/wasmtime' (x86_64)<br>\n1 location added to breakpoint 1<br>\nProcess 187877 stopped</p>\n<ul>\n<li>thread #1, name = 'wasmtime', stop reason = breakpoint 1.1<br>\n    frame #0: 0x00007ffff76eb60a JIT(0x7ffff732e010)`foo::main::h6f744fe0c842de61 at foo.rs:2:3<br>\n   1    fn main() {<br>\n-&gt; 2      println!(\"hello from everywhere!\");<br>\n   3    }</li>\n</ul>",
        "id": 425798918,
        "sender_full_name": "Ralph",
        "timestamp": 1710099136
    },
    {
        "content": "<p>And I can wire that stuff up now.... But the components elude me.</p>",
        "id": 425800559,
        "sender_full_name": "Ralph",
        "timestamp": 1710100452
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/KApLfVjd17jHQUu-B7F6Pxu4/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/KApLfVjd17jHQUu-B7F6Pxu4/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/KApLfVjd17jHQUu-B7F6Pxu4/image.png\"></a></div>",
        "id": 425800565,
        "sender_full_name": "Ralph",
        "timestamp": 1710100461
    },
    {
        "content": "<p>I see, its compoents.  I've not got there yet, but I will also be looking at it when I can get <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8055\">https://github.com/bytecodealliance/wasmtime/pull/8055</a> into a fit state.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8055\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/060ec1441c7f49bff2d9b71d1c240e3988e6e539\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386135353236383961656537613335323562656362393031303761373539386132363366666362393436343739386166343164363964396235346162313135662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38303535)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8055\" title=\"Add initial support for DWARF Fission by yowl · Pull Request #8055 · bytecodealliance/wasmtime\">Add initial support for DWARF Fission by yowl · Pull Request #8055 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Wasmtime supports debugging with DWARF, and this PR adds initial support for DWARF fission.  DWARF fission has advantages in linking and wasm size (https://developer.chrome.com/blog/faster-wasm-deb...</div></div></div>",
        "id": 425815579,
        "sender_full_name": "Scott Waye",
        "timestamp": 1710114109
    },
    {
        "content": "<p>that is a very good thing to do</p>",
        "id": 425905935,
        "sender_full_name": "Ralph",
        "timestamp": 1710162716
    },
    {
        "content": "<p>so far as I can see, the current tooling strips out dwarf</p>",
        "id": 425906011,
        "sender_full_name": "Ralph",
        "timestamp": 1710162733
    },
    {
        "content": "<p>if I do the core module:</p>",
        "id": 425906025,
        "sender_full_name": "Ralph",
        "timestamp": 1710162742
    },
    {
        "content": "<p>squillace@idiopath:~/work/hello-wasi-http-go$ wasm-tools objdump main.wasm<br>\n  types                                  |        0xa -       0x63 |        89 bytes | 14 count<br>\n  imports                                |       0x66 -      0x2f2 |       652 bytes | 13 count<br>\n  functions                              |      0x2f4 -      0x342 |        78 bytes | 77 count<br>\n  tables                                 |      0x344 -      0x349 |         5 bytes | 1 count<br>\n  memories                               |      0x34b -      0x34e |         3 bytes | 1 count<br>\n  globals                                |      0x350 -      0x362 |        18 bytes | 3 count<br>\n  exports                                |      0x365 -      0x473 |       270 bytes | 14 count<br>\n  elements                               |      0x475 -      0x47e |         9 bytes | 1 count<br>\n  data count                             |      0x480 -      0x481 |         1 bytes | 1 count<br>\n  code                                   |      0x485 -     0xa329 |     40612 bytes | 77 count<br>\n  data                                   |     0xa32c -     0xae8e |      2914 bytes | 3 count<br>\n  custom \"name\"                          |     0xae96 -     0xba8e |      3064 bytes | 1 count<br>\n  custom \".debug_info\"                   |     0xba9e -    0x1fd2a |     82572 bytes | 1 count<br>\n  custom \".debug_pubtypes\"               |    0x1fd3d -    0x21dc1 |      8324 bytes | 1 count<br>\n  custom \".debug_loc\"                    |    0x21dd0 -    0x268d7 |     19207 bytes | 1 count<br>\n  custom \".debug_ranges\"                 |    0x268e8 -    0x277c0 |      3800 bytes | 1 count<br>\n  custom \".debug_aranges\"                |    0x277d1 -    0x27821 |        80 bytes | 1 count<br>\n  custom \".debug_abbrev\"                 |    0x27832 -    0x28457 |      3109 bytes | 1 count<br>\n  custom \".debug_line\"                   |    0x28467 -    0x2ecb6 |     26703 bytes | 1 count<br>\n  custom \".debug_str\"                    |    0x2ecc5 -    0x3e2a5 |     62944 bytes | 1 count<br>\n  custom \".debug_pubnames\"               |    0x3e2b9 -    0x4ca6e |     59317 bytes | 1 count<br>\n  custom \"producers\"                     |    0x4ca7b -    0x4cb0e |       147 bytes | 1 count<br>\n  custom \"target_features\"               |    0x4cb20 -    0x4cb5e |        62 bytes | 1 count</p>",
        "id": 425906064,
        "sender_full_name": "Ralph",
        "timestamp": 1710162757
    },
    {
        "content": "<p>in short, I got the debug info</p>",
        "id": 425906082,
        "sender_full_name": "Ralph",
        "timestamp": 1710162765
    },
    {
        "content": "<p>but objdump doesn't show anything in the component version of the same core module:</p>",
        "id": 425906170,
        "sender_full_name": "Ralph",
        "timestamp": 1710162810
    },
    {
        "content": "<p>component imports                      |     0x154f -     0x1572 |        35 bytes | 1 count<br>\n  module                                 |     0x1576 -   0x1522a6 |   1379632 bytes | 1 count<br>\n    ------ start module 0 -------------<br>\n    types                                |     0x1581 -     0x17cd |       588 bytes | 69 count<br>\n    imports                              |     0x17d0 -     0x1bf7 |      1063 bytes | 24 count<br>\n    functions                            |     0x1bfa -     0x1ed3 |       729 bytes | 727 count<br>\n    tables                               |     0x1ed5 -     0x1eda |         5 bytes | 1 count<br>\n    memories                             |     0x1edc -     0x1edf |         3 bytes | 1 count<br>\n    globals                              |     0x1ee1 -     0x1ef3 |        18 bytes | 3 count<br>\n    exports                              |     0x1ef6 -     0x2011 |       283 bytes | 14 count<br>\n    elements                             |     0x2013 -     0x2025 |        18 bytes | 1 count<br>\n    data count                           |     0x2027 -     0x2028 |         1 bytes | 1 count<br>\n    code                                 |     0x202c -   0x14154b |   1307935 bytes | 727 count<br>\n    data                                 |   0x14154f -   0x148ec9 |     31098 bytes | 2 count<br>\n    custom \"name\"                        |   0x148ed2 -   0x1521a1 |     37583 bytes | 1 count<br>\n    custom \"producers\"                   |   0x1521ae -   0x152256 |       168 bytes | 1 count<br>\n    custom \"target_features\"             |   0x152268 -   0x1522a6 |        62 bytes | 1 count<br>\n    ------ end module 0 -------------<br>\n  module                                 |   0x1522aa -   0x15ae70 |     35782 bytes | 1 count<br>\n    ------ start module 1 -------------<br>\n    types                                |   0x1522b5 -   0x152338 |       131 bytes | 20 count<br>\n    imports                              |   0x15233b -   0x152b4a |      2063 bytes | 41 count<br>\n    functions                            |   0x152b4c -   0x152b92 |        70 bytes | 69 count<br>\n    globals                              |   0x152b94 -   0x152ba4 |        16 bytes | 3 count<br>\n    exports                              |   0x152ba7 -   0x152caa |       259 bytes | 17 count<br>\n    code                                 |   0x152cae -   0x15881a |     23404 bytes | 69 count<br>\n    custom \"name\"                        |   0x158822 -   0x15ae21 |      9727 bytes | 1 count<br>\n    custom \"producers\"                   |   0x15ae2d -   0x15ae70 |        67 bytes | 1 count<br>\n    ------ end module 1 -------------<br>\n  module                                 |   0x15ae73 -   0x15bb93 |      3360 bytes | 1 count<br>\n    ------ start module 2 -------------<br>\n    types                                |   0x15ae7d -   0x15aeea |       109 bytes | 15 count<br>\n    functions                            |   0x15aeec -   0x15af17 |        43 bytes | 42 count<br>\n    tables                               |   0x15af19 -   0x15af1e |         5 bytes | 1 count<br>\n    exports                              |   0x15af21 -   0x15aff5 |       212 bytes | 43 count<br>\n    code                                 |   0x15aff8 -   0x15b233 |       571 bytes | 42 count<br>\n    custom \"producers\"                   |   0x15b23f -   0x15b263 |        36 bytes | 1 count<br>\n    custom \"name\"                        |   0x15b26b -   0x15bb93 |      2344 bytes | 1 count<br>\n    ------ end module 2 -------------<br>\n  module                                 |   0x15bb96 -   0x15bd92 |       508 bytes | 1 count<br>\n    ------ start module 3 -------------<br>\n    types                                |   0x15bba0 -   0x15bc0d |       109 bytes | 15 count<br>\n    imports                              |   0x15bc10 -   0x15bd12 |       258 bytes | 43 count<br>\n    elements                             |   0x15bd14 -   0x15bd44 |        48 bytes | 1 count<br>\n    custom \"producers\"                   |   0x15bd50 -   0x15bd74 |        36 bytes | 1 count<br>\n    custom \"name\"                        |   0x15bd7b -   0x15bd92 |        23 bytes | 1 count<br>\n    ------ end module 3 -------------<br>\n  core instances                         |   0x15bd94 -   0x15bd98 |         4 bytes | 1 count<br>\n  component alias                        |   0x15bd9a -   0x15bdac |</p>",
        "id": 425906171,
        "sender_full_name": "Ralph",
        "timestamp": 1710162811
    },
    {
        "content": "<p>and llvm-dwarfdump sure doesn't know anything about components.</p>",
        "id": 425906309,
        "sender_full_name": "Ralph",
        "timestamp": 1710162849
    },
    {
        "content": "<p>squillace@idiopath:~/work/hello-wasi-http-go$ dump -debug-line main.component.wasm<br>\nerror: main.component.wasm: invalid version number: 65549</p>",
        "id": 425906314,
        "sender_full_name": "Ralph",
        "timestamp": 1710162850
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> <a href=\"#narrow/stream/217126-wasmtime/topic/debugging.20wasmtime.20serve/near/425815579\">said</a>:</p>\n<blockquote>\n<p>I see, its compoents.  I've not got there yet, but I will also be looking at it when I can get <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8055\">https://github.com/bytecodealliance/wasmtime/pull/8055</a> into a fit state.</p>\n</blockquote>\n<p>This kind of seems like what <a href=\"https://github.com/WebAssembly/tool-conventions/issues/133\">https://github.com/WebAssembly/tool-conventions/issues/133</a> was for. Am I misunderstanding? Or, if I plow through the associated document, that seems more like <em>keeping</em> the debug sections but pointing to another location for the .dwo. How should I think about the two approaches for side-debugging symbols?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/issues/133\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/27d7f9f391a7edc05caece2840f9ee4382870068\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653634383566303435366333326438616166396437623063323133636133393663653961616261613339306462653861316165653762623839333738353531362f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e732f6973737565732f313333)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/issues/133\" title=\"Build ID Section for WASM · Issue #133 · WebAssembly/tool-conventions\">Build ID Section for WASM · Issue #133 · WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">I originally brought this up in the design repo (WebAssembly/design#1306) but I believe this fits here better. For deferred symbolication on services like sentry it would be nice to be able to matc...</div></div></div>",
        "id": 425910180,
        "sender_full_name": "Ralph",
        "timestamp": 1710164154
    }
]