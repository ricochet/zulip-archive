[
    {
        "content": "<p>I am new to this space so bear with me. I am experimenting with WASM/WIT a bit and want to build a host program in go and use wasmtime and components in various languages starting with python.<br>\nSo i created a <a href=\"http://WIT.like\">WIT.like</a> this.</p>\n<p>package example:<a href=\"mailto:reconciler@0.1.0\">reconciler@0.1.0</a>;</p>\n<p>world reconciler {<br>\n    import reconcile: func(input: string) -&gt; string;<br>\n}</p>\n<p>create a python component</p>\n<p>import reconciler<br>\nimport json</p>\n<p>class Reconciler(reconciler.reconciler):<br>\n    def reconcile(self, input_json: str) -&gt; str:<br>\n        # Parse the input JSON<br>\n        data = json.loads(input_json)</p>\n<div class=\"codehilite\"><pre><span></span><code>    # Perform reconciliation logic\n    result = {\n        &quot;status&quot;: &quot;success&quot;,\n        &quot;processed_items&quot;: len(data.get(&quot;items&quot;, []))\n    }\n\n    # Return the result as a JSON string\n    return json.dumps(result)\n</code></pre></div>\n\n<p>and generated a wasm file using the following command</p>\n<p>componentize-py --wit-path wit --world reconciler bindings .<br>\ncomponentize-py --wit-path wit --world reconciler componentize reconciler -o reconciler.wasm</p>\n<p>now the part that fails is the go program when i try to run the wasm file i get the error here.</p>\n<p>package main</p>\n<p>import (<br>\n    \"encoding/json\"<br>\n    \"fmt\"</p>\n<div class=\"codehilite\"><pre><span></span><code>&quot;github.com/bytecodealliance/wasmtime-go&quot;\n</code></pre></div>\n\n<p>)</p>\n<p>func main() {<br>\n    // Load the WebAssembly module<br>\n    engine := wasmtime.NewEngine()<br>\n    store := wasmtime.NewStore(engine)</p>\n<div class=\"codehilite\"><pre><span></span><code>wasiConfig := wasmtime.NewWasiConfig()\nstore.SetWasi(wasiConfig)\n\nmodule, err := wasmtime.NewModuleFromFile(engine, &quot;reconciler.wasm&quot;)\nif err != nil {\n    panic(err)\n}\n</code></pre></div>\n\n<p>}</p>\n<p>error:</p>\n<p>(.venv) (base) wasm/reconciler &gt; go run main.go                 <br>\npanic: failed to parse WebAssembly module</p>\n<p>Caused by:<br>\n    Invalid input WebAssembly code at offset 4: unknown binary version</p>\n<p>goroutine 1 [running]:<br>\nmain.main()<br>\n        /Users/henderiw/code/wasm/reconciler/main.go:20 +0x2b0<br>\nexit status 2</p>\n<p>when i inspect the reconciler.wasm file i wasm-tools validate seems ok</p>\n<p>(.venv) (base) wasm/reconciler &gt; wasm-tools validate reconciler.wasm<br>\n(.venv) (base) wasm/reconciler &gt; xxd reconciler.wasm | head -n 1                   <br>\n00000000: 0061 736d 0d00 0100 0756 0142 0a01 6f02  .asm.....V.B..o.<br>\n(.venv) (base) wasm/reconciler &gt; wasm-tools component wit reconciler.wasm          <br>\npackage root:component;</p>\n<p>world root {<br>\n  import wasi:cli/environment@0.2.0;<br>\n  import wasi:cli/exit@0.2.0;<br>\n  import wasi:io/error@0.2.0;<br>\n  import wasi:io/poll@0.2.0;<br>\n  import wasi:io/streams@0.2.0;<br>\n  import wasi:cli/stdin@0.2.0;<br>\n  import wasi:cli/stdout@0.2.0;<br>\n  import wasi:cli/stderr@0.2.0;<br>\n  import wasi:cli/terminal-input@0.2.0;<br>\n  import wasi:cli/terminal-output@0.2.0;<br>\n  import wasi:cli/terminal-stdin@0.2.0;<br>\n  import wasi:cli/terminal-stdout@0.2.0;<br>\n  import wasi:cli/terminal-stderr@0.2.0;<br>\n  import wasi:clocks/monotonic-clock@0.2.0;<br>\n  import wasi:clocks/wall-clock@0.2.0;<br>\n  import wasi:filesystem/types@0.2.0;<br>\n  import wasi:filesystem/preopens@0.2.0;<br>\n  import wasi:sockets/network@0.2.0;<br>\n  import wasi:sockets/instance-network@0.2.0;<br>\n  import wasi:sockets/udp@0.2.0;<br>\n  import wasi:sockets/udp-create-socket@0.2.0;<br>\n  import wasi:sockets/tcp@0.2.0;<br>\n  import wasi:sockets/tcp-create-socket@0.2.0;<br>\n  import wasi:sockets/ip-name-lookup@0.2.0;<br>\n  import wasi:random/random@0.2.0;<br>\n  import wasi:random/insecure@0.2.0;<br>\n  import wasi:random/insecure-seed@0.2.0;<br>\n  import reconcile: func(input: string) -&gt; string;</p>\n<p>export exports: interface {<br>\n    record bundled {<br>\n      module: string,<br>\n      protocol: string,<br>\n      name: string,<br>\n    }</p>\n<p>...</p>\n<p>Not sure what i am doing wrong here. So looking for advise</p>",
        "id": 485872291,
        "sender_full_name": "Wim Henderickx",
        "timestamp": 1733237376
    },
    {
        "content": "<p>WebAssembly \"modules\" are different from \"components\". <code>componentize-py</code> produces a <em>component</em> but your Go code is attempting to load it as a <em>module</em> (<code>wasmtime.NewModuleFromFile</code>). I am not very familiar with wasmtime-go but I believe it does not yet support loading components.</p>",
        "id": 485875659,
        "sender_full_name": "Lann Martin",
        "timestamp": 1733238162
    },
    {
        "content": "<p>ok that would explain. I was trying to find something for components but did not find anything hence i used the Module.</p>",
        "id": 485890875,
        "sender_full_name": "Wim Henderickx",
        "timestamp": 1733241730
    },
    {
        "content": "<p>Is something in the working for components in wasmtime? or should we use another host runtime for this?</p>",
        "id": 485891115,
        "sender_full_name": "Wim Henderickx",
        "timestamp": 1733241789
    },
    {
        "content": "<p>Wasmtime is currently the best host runtime option for components, its just that the non-Rust language bindings lag behind feature-wise.</p>",
        "id": 485893084,
        "sender_full_name": "Lann Martin",
        "timestamp": 1733242269
    },
    {
        "content": "<p>The only other relevant component implementation I am aware of is <a href=\"https://github.com/bytecodealliance/jco\"><code>jco</code></a> which adapts components to run in JS environments (e.g. Node, browsers) but it comes with a number of caveats compared to Wasmtime.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/78ae1ad324b1a4e09506c864aa04a6390220c06d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366231376363316333663761656339646261303639323665386366653533653038643931376233306637666334666331373165353433643636363638663032362f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript toolchain for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript toolchain for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 485893377,
        "sender_full_name": "Lann Martin",
        "timestamp": 1733242335
    },
    {
        "content": "<p>Alright thx for the pointer.</p>",
        "id": 485921498,
        "sender_full_name": "Wim Henderickx",
        "timestamp": 1733250032
    }
]