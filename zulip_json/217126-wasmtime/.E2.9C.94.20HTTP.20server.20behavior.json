[
    {
        "content": "<p>Hi, I'm trying to develop wasi-http programs but I've got a behavior that isn't really intuitive for me.</p>\n<p>For example, for the following code snippet:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span><span class=\"p\">::</span><span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span><span class=\"w\"> </span><span class=\"n\">generate_all</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">::</span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">incoming_handler</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">::</span><span class=\"n\">http</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">::</span><span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">HttpServer</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">HttpServer</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"n\">_request</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">IncomingRequest</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">response_out</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ResponseOutparam</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">OutgoingResponse</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">response_body</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">response</span><span class=\"p\">.</span><span class=\"n\">body</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">ResponseOutparam</span><span class=\"p\">::</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">response_out</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">));</span>\n<span class=\"w\">        </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">write</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">response_body</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">b\"[\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">write</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s\">b\"{</span><span class=\"se\">\\\"</span><span class=\"s\">id</span><span class=\"se\">\\\"</span><span class=\"s\">:</span><span class=\"se\">\\\"</span><span class=\"s\">0</span><span class=\"se\">\\\"</span><span class=\"s\">}\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"c1\">// write.write(b\"]\").unwrap(); // notice that this line is commented out</span>\n<span class=\"w\">            </span><span class=\"nb\">drop</span><span class=\"p\">(</span><span class=\"n\">write</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">OutgoingBody</span><span class=\"p\">::</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"n\">response_body</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">).</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"failed to finish response body\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">HttpServer</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>With wasmtime 23.0.1, if I uncomment the line in the code snippet, the code would fail with <code>write exceeded budget</code>. I wonder why writing a JSON would cause the available space to change?</p>",
        "id": 455840731,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1722579037
    },
    {
        "content": "<p>The wasi io interfaces are somewhat difficult to use correctly, requiring careful reading of their documentation. See: <a href=\"https://github.com/WebAssembly/WASI/blob/main/wasip2/io/streams.wit#L141-L142\">https://github.com/WebAssembly/WASI/blob/main/wasip2/io/streams.wit#L141-L142</a></p>\n<blockquote>\n<p>Precondition: check-write gave permit of Ok(n) and contents has a length of less than or equal to n. Otherwise, this function will trap.</p>\n</blockquote>\n<p>In this particular case you could probably use <a href=\"https://docs.rs/wasi/0.13.1+wasi-0.2.0/wasi/io/streams/struct.OutputStream.html#method.blocking_write_and_flush\"><code>blocking-write-and-flush</code></a> instead, which will behave more like a \"normal\" <code>write</code> in other systems.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/blob/main/wasip2/io/streams.wit#L141-L142\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/156b2439de486516d6b7fc2e97d2f50403735456/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333934343238656633376330616130363834616635326430373532623365336665306531336431303866353334336265616366616562303764626465633661632f576562417373656d626c792f57415349&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/blob/main/wasip2/io/streams.wit#L141-L142\" title=\"WASI/wasip2/io/streams.wit at main · WebAssembly/WASI\">WASI/wasip2/io/streams.wit at main · WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div>",
        "id": 455929259,
        "sender_full_name": "Lann Martin",
        "timestamp": 1722603911
    },
    {
        "content": "<p>Yes, I understand that part. The problem is, if I check-write initially, it will give a very large number; but after printing the json object, it will become 0, and changing to <code>blocking-write-and-flush</code> would just hang.</p>",
        "id": 455934744,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1722605929
    },
    {
        "content": "<p>To be clear: if you use <code>blocking-write-and-flush</code>, you need to use only that (not e.g. a mix of <code>check-write</code>, <code>write</code>, and <code>blocking-write-and-flush</code>, which would probably result in weird behavior indeed).  Also, you'll need to limit your buffer size to 4096 bytes per the documentation.</p>\n<p>If you want to stick with <code>check-write</code>/<code>write</code>, you'll need to also use <code>subscribe</code>, which returns a <code>pollable</code> you can call <code>ready</code> on (or pass to <code>wasi:io/poll#poll</code> along with <code>pollable</code>s) in order to wait for the stream to be ready for more data.</p>",
        "id": 455945983,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722608381
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/HTTP.20server.20behavior/near/455945983\">said</a>:</p>\n<blockquote>\n<p>To be clear: if you use <code>blocking-write-and-flush</code>, you need to use only that (not e.g. a mix of <code>check-write</code>, <code>write</code>, and <code>blocking-write-and-flush</code>, which would probably result in weird behavior indeed).  Also, you'll need to limit your buffer size to 4096 bytes per the documentation.</p>\n</blockquote>\n<p>Could you please elaborate? Because according to <a href=\"https://github.com/WebAssembly/wasi-io/blob/4adfff7ea56674625eb94ac17c56b6e0c6780784/wit/streams.wit#L176\">the document</a>, the <code>blocking-write-and-flush</code> is just a wrapper around <code>check-write</code> <code>subscribe</code> <code>write</code> and <code>flush</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-io/blob/4adfff7ea56674625eb94ac17c56b6e0c6780784/wit/streams.wit#L176\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/305148da22d72cc02576e897f1f2c480ac557a8c/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346538326231613861353135373264346539636632643933643066363863353866656439666530666433343535356365393861303336323165623431313365352f576562417373656d626c792f776173692d696f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-io/blob/4adfff7ea56674625eb94ac17c56b6e0c6780784/wit/streams.wit#L176\" title=\"wasi-io/wit/streams.wit at 4adfff7ea56674625eb94ac17c56b6e0c6780784 · WebAssembly/wasi-io\">wasi-io/wit/streams.wit at 4adfff7ea56674625eb94ac17c56b6e0c6780784 · WebAssembly/wasi-io</a></div><div class=\"message_embed_description\">I/O Types proposal for WASI. Contribute to WebAssembly/wasi-io development by creating an account on GitHub.</div></div></div>",
        "id": 455966700,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1722612811
    },
    {
        "content": "<p>I guess my point is that if you're using <code>blocking-write-and-flush</code>, then there's no need to call <code>check-write</code>, <code>subscribe</code>, <code>write</code>, or <code>flush</code> yourself; at best it would be redundant, and at worst it might confuse <code>blocking-write-and-flush</code> depending on the ordering of calls.</p>",
        "id": 455968436,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722613203
    },
    {
        "content": "<p>To me, it would be akin to switching a POSIX socket between blocking and non-blocking operation, which is tricky to do correctly.  It's much easier to pick one or the other and stick with it.</p>",
        "id": 455968880,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722613303
    },
    {
        "content": "<p>I was expecting that the <code>blocking-write-and-flush</code> could be replaced by the pseudo code mentioned in the document, i.e. using <code>check-write</code> <code>subscribe</code> <code>write</code> and <code>flush</code>, so I wasn't sure where the <code>mix</code> came from.</p>\n<p>However my point in the example is that I'm not quite sure why writing thrice is different from writing once if there were enough space to write to.</p>",
        "id": 455969690,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1722613475
    },
    {
        "content": "<p>Oh sure -- if you're looking to use <code>check-write</code>, <code>subscribe</code>, <code>write</code>, and <code>flush</code> <em>instead</em> <em>of</em> <code>blocking-write-and-flush</code>, that should be fine.  All I was cautioning against is mixing the two strategies.  If you never had any intention of doing that, then great.</p>\n<p>I'm guessing the writing thrice issue boils down to an implementation detail in <code>wasmtime-wasi</code>.</p>",
        "id": 455970496,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722613638
    },
    {
        "content": "<p>I see. Thank you for your suggestion.</p>\n<p>I think I should do more tests and dig a bit deeper in the implementation.</p>",
        "id": 455971347,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1722613805
    },
    {
        "content": "<p>the implementation in wasmtime-wasi is sorta the crux of that whole crate (it took us months to get everything just right) but it is designed to be reused by other crates, e.g. wasmtime-wasi-http</p>",
        "id": 456078027,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722652271
    },
    {
        "content": "<p>so, if you look at the way wasmtime-wasi-http uses those wasmtime-wasi HostInputStream / HostOutputStream types, thats hopefully something that could work for your use case as well - if you need help understanding how it works, or if for some reason it doesnt, please let us know</p>",
        "id": 456078313,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722652341
    },
    {
        "content": "<p>I think I now understand the behavior better. Thanks a lot for your responses.</p>",
        "id": 456455018,
        "sender_full_name": "Zihang Ye",
        "timestamp": 1722840002
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span> has marked this topic as resolved.</p>",
        "id": 468776011,
        "sender_full_name": "Notification Bot",
        "timestamp": 1725884339
    }
]