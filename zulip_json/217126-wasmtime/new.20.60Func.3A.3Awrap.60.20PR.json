[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> did you want to yourself review <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1290\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1290\">https://github.com/bytecodealliance/wasmtime/pull/1290</a>? I'm curious to tweak the APIs a bit more and it'd be building on top of that work so was pondering who to poke for a review</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1290\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1290\" target=\"_blank\" title=\"Add a first-class way of accessing caller's exports by alexcrichton 路 Pull Request #1290 路 bytecodealliance/wasmtime\">Add a first-class way of accessing caller's exports by alexcrichton 路 Pull Request #1290 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit is a continuation of #1237 and updates the API of Func to\nallow defining host functions which have easy access to a caller&#39;s\nmemory in particular. The new APIs look like so:\n\nThe Fu...</div></div></div>",
        "id": 191032294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584560704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I haven't yet decided what I think about this. Using the caller vmctx is cleaner than the mechanism we had before, but as we add more support for controlling how imports and exports are resolved at link time, this will be a kind of back door around that, allowing a process to access exports that haven't been linked with its imports.</p>",
        "id": 191033138,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584561127
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> it's true yeah, but we need <em>something</em> today for wasi at the very least</p>",
        "id": 191033257,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561196
    },
    {
        "content": "<p>and it's not like this is set in stone forever, we can always remove it</p>",
        "id": 191033274,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561202
    },
    {
        "content": "<p>I also personally feel that if the host can subvert things that's ok</p>",
        "id": 191033297,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561214
    },
    {
        "content": "<p>the host is the host after all</p>",
        "id": 191033299,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561216
    },
    {
        "content": "<p>I guess that's true.</p>",
        "id": 191033359,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584561242
    },
    {
        "content": "<p>I'm trying to minimize differences between host modules and wasm modules in my mental model, because we want them to be interchangeable.</p>",
        "id": 191033498,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584561300
    },
    {
        "content": "<p>But, wasi does need this special power, as will other wasi-like modules</p>",
        "id": 191033578,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584561343
    },
    {
        "content": "<p>At least, until interface types gives us a better way to pass views of memory around.</p>",
        "id": 191033679,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584561368
    },
    {
        "content": "<p>that's basically my thinking yeah</p>",
        "id": 191034514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561752
    },
    {
        "content": "<p>we want to erase this, but... we sort of can't right now</p>",
        "id": 191034524,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561758
    },
    {
        "content": "<p>and we may as well make it convenient b/c it's gonna be mega-common</p>",
        "id": 191034544,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584561766
    },
    {
        "content": "<p>How crazy would it be to say you can't use <code>Caller</code> on a module that uses interface types?</p>",
        "id": 191035872,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584562511
    },
    {
        "content": "<p>I.e., dynamically enforce that, and document it that way.</p>",
        "id": 191035890,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584562524
    },
    {
        "content": "<p>I'm not sure if that's the right answer, but I'm thinking about ways we can avoid mega-common + convenient = too widely used to be removed</p>",
        "id": 191036268,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584562722
    },
    {
        "content": "<p>Lol, I was just thinking \"what if we restricted it to just memory exports\", and then read the code for <code>get_export</code>, and that's exactly what it does :-)</p>",
        "id": 191037732,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584563402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Ok, I convinced myself that we don't need to add arbitrary restrictions like that. When interface types are ready, we'll just have toolchains use them, and have them stop exporting \"memory\" by default as they do now, and that will steer people in the right direction.</p>",
        "id": 191040105,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1584564504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> oh sorry was in a mtg</p>",
        "id": 191041746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584565329
    },
    {
        "content": "<p>but yeah I think we could easily make <code>get_export</code> return <code>None</code> if it's an interface types module</p>",
        "id": 191041772,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584565339
    },
    {
        "content": "<p>but if it only works on exports the toolchains could also fix it with no exports</p>",
        "id": 191041807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584565358
    }
]