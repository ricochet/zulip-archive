[
    {
        "content": "<p>Hi, we used to be able to customize compilation by setting cranelift's compile options/flags in Engine's Config. It is no longer possible. Do you have any plans to re-expose compiler config?<br>\nIn our case, we need to set enable_nan_canonicalization, as we depend on fully deterministic computation, but regardless of this one flag, allowing a full customization of the compilation process seems like a good idea in general.</p>",
        "id": 189273254,
        "sender_full_name": "Maciej Kot",
        "timestamp": 1582850429
    },
    {
        "content": "<p>Perhaps we should expose a <code>set_compiler_flag(&amp;str, &amp;str)</code> and <code>enable_compiler_flag(&amp;str)</code> method on <code>Config</code> to reintroduce that functionality? cc <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 189274493,
        "sender_full_name": "Peter Huene",
        "timestamp": 1582851717
    },
    {
        "content": "<p>I would be hesitatnt to expose cranelift's full-blown configuration API since it feels too powerful and exposing too much API surface area (and area for accidental breakage), if we can I think it'd be best to encapsulate these configuration options in methods</p>",
        "id": 189275810,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582853266
    },
    {
        "content": "<p>I agree, flags like \"is_pic\", \"avoid_div_traps\", and others are things that Wasmtime needs to control for itself.</p>",
        "id": 189276090,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582853576
    },
    {
        "content": "<p>However, it would make sense to expose specific flags, like \"enable_nan_canonicalization\".</p>",
        "id": 189276114,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582853619
    },
    {
        "content": "<p>i would like to side-step the procedural overhead of having to be compiler flag gate keepers, though.  I was thinking this would be an advanced (caveat emptor) part of the API, possibly marked unsafe for that reason. perhaps we might go so far as explicitly preventing you from disabling flags we know we need on?</p>",
        "id": 189278128,
        "sender_full_name": "Peter Huene",
        "timestamp": 1582856259
    },
    {
        "content": "<p>But if there's really only a need of just supporting a handful of cranelift flags, i'm totally onboard with an abstraction for only those and preventing arbitrary flags</p>",
        "id": 189278174,
        "sender_full_name": "Peter Huene",
        "timestamp": 1582856308
    },
    {
        "content": "<p>Also note that flags can be compiler specific which makes creating explicit methods in the API a little more problematic. Lightbeam does not support nan_canonicalization (I think), so this option should be available only if the Strategy is set to Cranelift.</p>",
        "id": 189278717,
        "sender_full_name": "Maciej Kot",
        "timestamp": 1582857204
    },
    {
        "content": "<p>One option would be to allow the equivalent of <code>-Z</code> flags at least in pre-release versionsâ€”i.e. all versions right now <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span> I agree that in the long run we don't want to allow people to set arbitrary Cranelift (or other compiler) flags that we might want to change at any time</p>",
        "id": 189302860,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1582890369
    },
    {
        "content": "<p>If we were to add this API then it'd definitely be <code>unsafe</code>, agreed. I'm not really against it per se, I personally think that it's best to have documented and discoverable methods on <code>Config</code> which we can test, fuzz, etc. Escape hatches tend to get forgotten in that it's not clear how to configure them, it's a lot of knowledge that's not really written down, or isn't well supported with tests and such</p>",
        "id": 189321721,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582904977
    },
    {
        "content": "<p>I'd propose trying to add methods to <code>Config</code>, and if it's too much overhead then we could add an unsafe API to tweak it. Also fwiw <span class=\"user-mention\" data-user-id=\"266161\">@Maciej Kot</span> we already have cranelift-specific configuration like the optimization level, we just prefix the configuration with <code>cranelift_*</code></p>",
        "id": 189321816,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1582905020
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Compiler.20flags/near/189321816\" title=\"#narrow/stream/217126-wasmtime/topic/Compiler.20flags/near/189321816\">said</a>:</p>\n<blockquote>\n<p>I'd propose trying to add methods to <code>Config</code>, and if it's too much overhead then we could add an unsafe API to tweak it.</p>\n</blockquote>\n<p>+1 to a more strongly-typed interface; from the point of view of the new (arm64) backend work, it's marginally nicer for there to be a finite set of methods or fields than to have to interpret a set of key/value strings in a way that's supposed to match the existing behavior.</p>\n<p>(Also wrt new backend, there's a separate discussion around which flags are platform-specific and which <em>should</em> work on every platform; I haven't taken a close look at what config options there are today so I guess I don't have too much to say about that yet.)</p>",
        "id": 189328619,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1582909337
    }
]