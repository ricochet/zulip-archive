[
    {
        "content": "<p>Hi, I'm failing to understand how rust functions translate into wasm functions using the wasm-wasi target. Whenever I try to return multiple values it instead adds another parameter to the signature when I fetch the typed function in wasmtime. Is there a reference somewhere on how this translation is done? I'm failing to see how I can return a fat pointer, for example, since I also fail to see how I can call a wasm function with mutable parameters.</p>",
        "id": 360472190,
        "sender_full_name": "Buster Styren",
        "timestamp": 1684833016
    },
    {
        "content": "<p>For example, this function has a () -&gt; u32 signature when I call it from wasmtime:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_pets</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span>\n</code></pre></div>\n<p>But this one has a (u32) -&gt; () signature, or at least it doesn't panic when I call it with those params:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_pets</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"p\">(</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 360472955,
        "sender_full_name": "Buster Styren",
        "timestamp": 1684833224
    },
    {
        "content": "<p>The extra argument is the out pointer where the return value should be written. This is defined by the C ABI for Webassembly. See <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\">https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/559dd59b35b6f80264976a782e064d7ab79c42b3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623365663561333330643732343064613163326536383264386332643431323132663236323862663061656435623166396564323533623839653438306138642f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/BasicCABI.md\" title=\"tool-conventions/BasicCABI.md at main · WebAssembly/tool-conventions\">tool-conventions/BasicCABI.md at main · WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - tool-conventions/BasicCABI.md at main · WebAssembly/tool-conventions</div></div></div>",
        "id": 360476460,
        "sender_full_name": "bjorn3",
        "timestamp": 1684834176
    },
    {
        "content": "<p>Alright thanks. So I need to provide a pointer to a region where the return value can be written to? Is there a way for me to allocate this memory from wasmtime, otherwise I'm struggling to figure out how I can supply a valid writable region of the instance memory.</p>",
        "id": 360520301,
        "sender_full_name": "Buster Styren",
        "timestamp": 1684845852
    },
    {
        "content": "<p>You can expose a function from the wasm module to allocate memory and one to free the memory again. Wasmtime doesn't have any knowledge about the memory allocator used by the wasm module, so it can't safely do the allocation for you.</p>",
        "id": 360521542,
        "sender_full_name": "bjorn3",
        "timestamp": 1684846195
    }
]