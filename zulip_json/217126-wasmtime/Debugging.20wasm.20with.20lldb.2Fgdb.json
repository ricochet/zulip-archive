[
    {
        "content": "<p>Hi, I've seen that wasmtime supports debugging wasm using regular debuggers but I can't seem to get it to work.<br>\nI've tried copying the rust code verbatim from <a href=\"https://www.youtube.com/watch?v=PevI_Mn-UUE\">this video</a>, compiling with <code>rustc --target=wasm32-wasi fizzbuzz.rs</code> and running <code>lldb -- wasmtime -g fizzbuzz.wasm</code>, but setting a breakpoint with <code>b fizzbuzz</code> and running with <code>r</code> just runs the code as normal; no breakpoint is triggered.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"PevI_Mn-UUE\" href=\"https://www.youtube.com/watch?v=PevI_Mn-UUE\"><img src=\"https://uploads.zulipusercontent.net/26ce3ab4697e725de11c0c6bb7c4245efc287bf7/68747470733a2f2f692e7974696d672e636f6d2f76692f506576495f4d6e2d5555452f64656661756c742e6a7067\"></a></div>",
        "id": 340514698,
        "sender_full_name": "squirl",
        "timestamp": 1678338858
    },
    {
        "content": "<p>I've also tried with gdb, with similar results</p>",
        "id": 340514758,
        "sender_full_name": "squirl",
        "timestamp": 1678338934
    },
    {
        "content": "<p>Seems like I was using an outdated version of wasmtime, working now! :)</p>",
        "id": 340527573,
        "sender_full_name": "squirl",
        "timestamp": 1678345762
    },
    {
        "content": "<p>Is <code>-g</code> still an option for wasmtime or is it now <code>-D debug-info=y</code> ?</p>",
        "id": 392593334,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695413241
    },
    {
        "content": "<p>i.e. when given a WASM file compiled from dwarf LLVM bitcode?</p>",
        "id": 392593510,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695413318
    },
    {
        "content": "<p>it'd <code>-D debug-info</code>, which is equivalent to <code>-D debug-info=y</code>.</p>",
        "id": 392601590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695417246
    },
    {
        "content": "<p>I figure we can reintroduce <code>-g</code> if necessary though</p>",
        "id": 392601618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695417256
    },
    {
        "content": "<p>A follow up if I may.  Is there a way in LLDB to print class static fields from a c++ object?<br>\nI try</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">WKS</span>::<span class=\"n\">gc_heap</span>::<span class=\"n\">g_low_memory_status</span>\n<span class=\"n\">error</span>: <span class=\"nc\">Couldn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">lookup</span><span class=\"w\"> </span><span class=\"n\">symbols</span>:\n  <span class=\"nc\">WKS</span>::<span class=\"n\">gc_heap</span>::<span class=\"n\">g_low_memory_status</span>\n</code></pre></div>\n<p>But it can't find the symbol.</p>",
        "id": 393006483,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695646788
    },
    {
        "content": "<p>I've never used lldb with wasmtime to that degree, so not sure myself (presuming you're debugging guest code?)</p>",
        "id": 393032370,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695652923
    },
    {
        "content": "<p>Yes, that's right.  No problem, I can revert to printfs for these.</p>",
        "id": 393046482,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695656122
    },
    {
        "content": "<p>or copy to locals on the frame, those work fine</p>",
        "id": 393046552,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695656136
    },
    {
        "content": "<p>lldb / gdb seem to work well with the 13.0 release for me. However I've only been able to get them to work with wasm on Linux. Has anyone had any luck on Windows? (Our ecosystem is mostly comprised of Windows users, so a debugging workflow that works for them would be great)</p>",
        "id": 393298674,
        "sender_full_name": "CryZe",
        "timestamp": 1695752143
    },
    {
        "content": "<p>SingleAccretion on github may know more given <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6963\">PRs like this</a>, but I've not done it myself</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/6963\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/903f580d2be4ac961e4c219daed5e248ec146ce6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666538653862623764396337303638323438396463623732616163646331636638383839313738323739316165656465616639303532363839623365643865342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f36393633)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6963\" title=\"Add a note about `_NO_DEBUG_HEAP` to the WASM debugging document by SingleAccretion 路 Pull Request #6963 路 bytecodealliance/wasmtime\">Add a note about `_NO_DEBUG_HEAP` to the WASM debugging document by SingleAccretion 路 Pull Request #6963 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a little speculative, as _NO_DEBUG_HEAP is not WASM-related at all, and this document should not become a kitchen sink of \"native debugging tips\", still, the truly massive slowdown (~65x fo...</div></div></div>",
        "id": 393300074,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695752652
    },
    {
        "content": "<p>Thanks yes that env var is essential.  LLDB works for me on Windows, modulo not being able to view c++ class statics.  <span class=\"user-mention\" data-user-id=\"387451\">@CryZe</span> I had to build wasmtime from source, the prebuilt binary didn't work for me.</p>",
        "id": 393311939,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695756664
    },
    {
        "content": "<p>lldb also works from VS Code for me with Rust on Windows, although I'm not sure I understand how to form all the command args properly for lldb with cargo</p>",
        "id": 393312376,
        "sender_full_name": "Scott Waye",
        "timestamp": 1695756820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span> I've tried the CodeLLDB extension on Windows and it does not pick up any wasm debug symbols, unlike the same extension on the same code on Linux. Are you using a different extension? Or none at all?</p>",
        "id": 393315198,
        "sender_full_name": "CryZe",
        "timestamp": 1695757938
    },
    {
        "content": "<p>Wait, after trying it again right now. It totally does work... nvm then, thanks :D</p>",
        "id": 393315479,
        "sender_full_name": "CryZe",
        "timestamp": 1695758048
    },
    {
        "content": "<p>Hi there. I'm Artem from the Kotlin/Wasm team. We started to play around with DWARF generating and the wasmtime debug described here: <a href=\"https://docs.wasmtime.dev/examples-debugging-native-debugger.html\">https://docs.wasmtime.dev/examples-debugging-native-debugger.html</a><br>\nI faced the problem of setting a breakpoint by file name and line number on a non-clang-generated DWARF.<br>\nI've minimized an example and just tried to use debug information generated by wasm-tools (<a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a>) while parsing a WAT file and still, I have stopped by function name, but not by file name/line number. <br>\nDo you use the information provided by the .debug_line section, and (if yes), do you use some heuristics on it?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6ccab4a0feb8d359923614f2b6391a4e5d265e76/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303931376264656562333363613239643066666364626662653130303165646364653562666331626463653636386231616462323039336639363363366231612f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules\">GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - GitHub - bytecodealliance/wasm-tools: CLI and Rust libraries for low-level manipulation of WebAssembly modules</div></div></div>",
        "id": 479231795,
        "sender_full_name": "Artem Kobzar",
        "timestamp": 1730108152
    },
    {
        "content": "<p>I suspect this is a case where DWARF basically needs to look like what clang generates for gdb/lldb to understand it (similar to how in Rust we often have to look exactly like Clang to get optimizations to kick in). When I wrote the support for <code>-g</code> in <code>wasm-tools</code> I didn't test in Wasmtime other than doing things like <code>addr2line</code> operations. I'm certainly no dwarf expert myself so I suspect a section is missing or something like that.</p>\n<p>Wasmtime should translate all the various DWARF sections as necessary, but my guess is that there's some missing link between function debug information and <code>.debug_line</code> (or something like that). I don't know enough about LLDB/GDB though to know which section is missing.</p>",
        "id": 479298323,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730128258
    },
    {
        "content": "<p>If you find out though let me know and I can try to update the dwarf support in <code>wasm-tools</code> (which I realize may not be relevant for your exact use case but is probably useful to have anyway)</p>",
        "id": 479298410,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730128284
    },
    {
        "content": "<p>You need a DW_TAG_compile_unit which covers all functions in the line program (using DW_AT_ranges or DW_AT_low_pc + DW_AT_high_pc) and additionally a DW_AT_stmt_list pointing to the line program itself.</p>",
        "id": 479530190,
        "sender_full_name": "bjorn3",
        "timestamp": 1730222550
    },
    {
        "content": "<p>I like a person who knows their dwarf requirements</p>",
        "id": 479532604,
        "sender_full_name": "Ralph",
        "timestamp": 1730223435
    }
]