[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> hm I'm not entirely sure what you mean by RefCell and deferred destruction?</p>",
        "id": 202023682,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118500
    },
    {
        "content": "<p><code>TableElements</code> has a <code>RefCell&lt;Vec&lt;VMExternRef&gt;&gt;</code></p>",
        "id": 202023726,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118532
    },
    {
        "content": "<p>and deferred destruction would be just saving all the <code>ref_count == 0</code> references in a side table, and running their dtors at a known-safe point in time</p>",
        "id": 202023830,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118570
    },
    {
        "content": "<p>I like your (more obvious) idea of just swapping it out of the table first. don't know why I didn't think of that &gt;.&lt;</p>",
        "id": 202023874,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118594
    },
    {
        "content": "<p>although it is one more basic block. I don't think thats a big deal tho</p>",
        "id": 202023913,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118616
    },
    {
        "content": "<p>ah ok</p>",
        "id": 202023914,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118616
    },
    {
        "content": "<p>to be clear, this is what I'm thinking -- <a href=\"https://gist.github.com/alexcrichton/fe9a5aff25cdcf943234f433babbb55e\">https://gist.github.com/alexcrichton/fe9a5aff25cdcf943234f433babbb55e</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/alexcrichton/fe9a5aff25cdcf943234f433babbb55e\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/alexcrichton/fe9a5aff25cdcf943234f433babbb55e\" title=\"foo.diff\">foo.diff</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 202023934,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118626
    },
    {
        "content": "<p>using your pseudocode</p>",
        "id": 202023940,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118630
    },
    {
        "content": "<p>if that makes sense</p>",
        "id": 202023962,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118646
    },
    {
        "content": "<p>so we shouldn't need deferred destruction or need to worry about ref cells and such</p>",
        "id": 202023980,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118655
    },
    {
        "content": "<p>ah nice, yeah that doesn't need a new basic block either</p>",
        "id": 202023998,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118663
    },
    {
        "content": "<p>also, out of curiosity, does cranelift still do the ebb thing?</p>",
        "id": 202024023,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118678
    },
    {
        "content": "<p>where you can have multiple exits from a block?</p>",
        "id": 202024055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118683
    },
    {
        "content": "<p>not anymore</p>",
        "id": 202024079,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118694
    },
    {
        "content": "<p>b/c that could simplify the blocks in a few places I think</p>",
        "id": 202024080,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118694
    },
    {
        "content": "<p>ah ok, that makes more sense</p>",
        "id": 202024088,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118699
    },
    {
        "content": "<p>fwiw, I was adding <code>fallthrough</code>s manually, instead of <code>jump</code>s, but</p>\n<ol>\n<li>sometimes blocks get shuffled around, and these would break</li>\n<li>there is eventually a pass that turns <code>jump</code>s to the next block into a <code>fallthrough</code>, and it works well</li>\n</ol>",
        "id": 202024161,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118758
    },
    {
        "content": "<p>so I think we don't need to worry much about \"lots of little blocks with many jumps between them\" as long as we insert them into the layout in the right order</p>",
        "id": 202024224,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118796
    },
    {
        "content": "<p>makes sense</p>",
        "id": 202024400,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118871
    },
    {
        "content": "<p>I should learn more about what optimizations cranelift does</p>",
        "id": 202024414,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> so the frob-the-refcount, does that turn into one <code>add</code> instruction on x86 with addressing modes?</p>",
        "id": 202024458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118901
    },
    {
        "content": "<p>is that an optimization that cranelift does?</p>",
        "id": 202024472,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118908
    },
    {
        "content": "<p>it <em>should</em> be, but I'm not sure it does</p>",
        "id": 202024549,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593118932
    },
    {
        "content": "<p>ah ok, wasn't sure if we needed to represent that in IR or not</p>",
        "id": 202024565,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118944
    },
    {
        "content": "<p>I should dig in at some point in the future, just not now lol</p>",
        "id": 202024585,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593118953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> so here's another question, I don't know how stackmaps work, so I'm unsure. So the gist I sent, what happens if the dtor calls <code>Store::gc</code>?</p>",
        "id": 202024707,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119040
    },
    {
        "content": "<p>we loaded the pointer to drop from the table</p>",
        "id": 202024760,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119049
    },
    {
        "content": "<p>which presumably has the r64 type</p>",
        "id": 202024764,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119055
    },
    {
        "content": "<p>but we're dropping it so it shouldn't be traced</p>",
        "id": 202024777,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119063
    },
    {
        "content": "<p>even though it's \"live\" as a function argument</p>",
        "id": 202024785,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119068
    },
    {
        "content": "<p>because it's a function argument does that mean it's not included in the stack map?</p>",
        "id": 202024820,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119086
    },
    {
        "content": "<p>with the modified barrier pseudocode?</p>",
        "id": 202024980,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119177
    },
    {
        "content": "<p>yeah</p>",
        "id": 202025024,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119203
    },
    {
        "content": "<p>so like if cranelift sees <code>function_call(some_r64_type)</code></p>",
        "id": 202025039,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119214
    },
    {
        "content": "<p>does the stack map at that function call include <code>some_r64_type</code>?</p>",
        "id": 202025054,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119224
    },
    {
        "content": "<p>it would, yes</p>",
        "id": 202025117,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119257
    },
    {
        "content": "<p>hm that may also be problematic</p>",
        "id": 202025191,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119284
    },
    {
        "content": "<p>this may mean we have to do deffered destruction</p>",
        "id": 202025207,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119293
    },
    {
        "content": "<p>and means we'll need to cast to i64 to call the drop intrinsic I think?</p>",
        "id": 202025213,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119296
    },
    {
        "content": "<p>or could we load the pointer as i64 instead?</p>",
        "id": 202025233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119304
    },
    {
        "content": "<p>perhaps</p>",
        "id": 202025264,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119320
    },
    {
        "content": "<p>this may also be an issue for table.get where we're manually frobbing the reference count</p>",
        "id": 202025275,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119332
    },
    {
        "content": "<p>not sure I follow</p>",
        "id": 202025350,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119385
    },
    {
        "content": "<p>I sort of forget how the reference counts work out during gc</p>",
        "id": 202025453,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119432
    },
    {
        "content": "<p>er wait</p>",
        "id": 202025467,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119440
    },
    {
        "content": "<p>nevermind</p>",
        "id": 202025470,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119444
    },
    {
        "content": "<p>I'm worried about <code>call activations_table_insert_with_gc(elem)</code> but that's guaranteed to not call user code</p>",
        "id": 202025478,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119451
    },
    {
        "content": "<p>so we're ok there, it's just <code>call drop_externref_in_place(current_elem)</code> I'm worried about in terms of stack maps</p>",
        "id": 202025503,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119471
    },
    {
        "content": "<p>er, no, scratch that too, <code>activations_table_insert_with_gc</code> will do a GC</p>",
        "id": 202025535,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119496
    },
    {
        "content": "<p>it's at least something to consider, what happens when we gc during that call and we insert it from the stack plus manually</p>",
        "id": 202025610,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119535
    },
    {
        "content": "<p>and same thing for the drop, what happens if we gc while dropping, making sure we don't accidentally try to keep it in the activations table</p>",
        "id": 202025634,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119550
    },
    {
        "content": "<p>we should be fine with <code>activations_table_insert_with_gc</code>, since both the reference will be in the stack maps, and the first thing we do is in the impl is <code>VMExternRef::clone_from_raw</code></p>",
        "id": 202025694,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119586
    },
    {
        "content": "<p>but yeah, asking these questions is great, and has already found a few bugs (thanks!)</p>",
        "id": 202025718,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119608
    },
    {
        "content": "<p>the wonders of code review :P</p>",
        "id": 202025745,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119623
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/table.2Eset.20and.20dtors/near/202024458\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> so the frob-the-refcount, does that turn into one <code>add</code> instruction on x86 with addressing modes?</p>\n</blockquote>\n<p>on x86 we would want to turn this into an <code>xadd</code> right?</p>\n<p>I don't see any mention of <code>xadd</code> in the codebase</p>",
        "id": 202025847,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119674
    },
    {
        "content": "<p><code>xadd</code> I thought was <code>atomic_add</code></p>",
        "id": 202025873,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119690
    },
    {
        "content": "<p>and I don't remember it from when I ported <code>simple_preopt</code> to <code>peepmatic</code></p>",
        "id": 202025883,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119699
    },
    {
        "content": "<p>its atomic if it is prefixed with <code>lock</code></p>",
        "id": 202025903,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119706
    },
    {
        "content": "<p>I'm thinking of <code>   addl    $1, (%rdi)</code></p>",
        "id": 202025917,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119718
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=e8f2c6373f89f7cf087e973544b598f3\">https://play.rust-lang.org/?version=stable&amp;mode=release&amp;edition=2018&amp;gist=e8f2c6373f89f7cf087e973544b598f3</a></p>",
        "id": 202025928,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119726
    },
    {
        "content": "<p>hmm....</p>",
        "id": 202026036,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593119774
    },
    {
        "content": "<p>I think you're right about <code>activations_table_insert_with_gc</code> as well, that'll <code>clone_from_raw</code> the pointer it reads from the stack and shove it in a set. The intrinsic also <code>clone_from_raw</code>s, however, and since the ownership is in the original table anyway I think that all works out just fine</p>",
        "id": 202026325,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593119932
    },
    {
        "content": "<p>&lt;removed&gt;</p>",
        "id": 202026559,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593120068
    },
    {
        "content": "<p>wait I forgot to enable opts</p>",
        "id": 202026596,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593120084
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>$ cat ~/scratch/add.clif; cargo run --manifest-path cranelift/Cargo.toml -- compile --target x86_64 -dp ~/scratch/add.clif -D --set opt_level=speed\nfunction %add(i64) {\n    block0(v0: i64):\n        v1 = load.i32 aligned notrap v0\n        v2 = iadd_imm v1, 1\n        store aligned notrap v2, v1\n        return\n}\n    Finished dev [unoptimized + debuginfo] target(s) in 0.08s\n     Running `target/debug/clif-util compile --target x86_64 -dp /home/fitzgen/scratch/add.clif -D --set opt_level=speed`\nfunction %add(i64 [%rdi], i64 fp [%rbp]) -&gt; i64 fp [%rbp] fast {\n    ss0 = incoming_arg 16, offset -16\n\n                                block0(v0: i64 [%rdi], v4: i64 [%rbp]):\n[RexOp1pushq#50]                    x86_push v4\n[RexOp1copysp#8089]                 copy_special %rsp -&gt; %rbp\n[RexOp1ld#8b,%rax]                  v1 = load.i32 notrap aligned v0\n[DynRexOp1umr#89,%rcx]              v3 = copy v1\n[DynRexOp1r_ib#83,%rcx]             v2 = iadd_imm v3, 1\n[RexOp1st#89]                       store notrap aligned v2, v1\n[RexOp1popq#58,%rbp]                v5 = x86_pop.i64\n[Op1ret#c3]                         return v5\n}\n\n.byte 64, 85, 72, 137, 229, 64, 139, 7, 137, 193, 131, 193, 1, 64, 137, 8, 64, 93, 195\n\nDisassembly of 19 bytes:\n   0:   40 55                   push    rbp\n   2:   48 89 e5                mov rbp, rsp\n   5:   40 8b 07                mov eax, dword ptr [rdi]\n   8:   89 c1                   mov ecx, eax\n   a:   83 c1 01                add ecx, 1\n   d:   40 89 08                mov dword ptr [rax], ecx\n  10:   40 5d                   pop rbp\n  12:   c3                      ret\n\n\ntrap: stk_ovf at 0\n</code></pre></div>",
        "id": 202026645,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593120114
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> looks like cranelift can't do it</p>",
        "id": 202026741,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593120150
    },
    {
        "content": "<p>aww :(</p>",
        "id": 202026827,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593120192
    },
    {
        "content": "<p>it'd be neat if we could easily look at the asm for wasm modules too at some point</p>",
        "id": 202026855,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593120215
    },
    {
        "content": "<p>filed <a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\">https://github.com/bytecodealliance/wasmtime/issues/1925</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1925\" title=\"Collapse `load; add; store` into a single `add` on x86-64 · Issue #1925 · bytecodealliance/wasmtime\">Collapse `load; add; store` into a single `add` on x86-64 · Issue #1925 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Right now, this function %add(i64) { block0(v0: i64): v1 = load.i32 aligned notrap v0 v2 = iadd_imm v1, 1 store aligned notrap v2, v1 return } compiles down into Disassembly of 19 bytes: 0: 40 55 p...</div></div></div>",
        "id": 202027417,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593120483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/table.2Eset.20and.20dtors/near/202026855\">said</a>:</p>\n<blockquote>\n<p>it'd be neat if we could easily look at the asm for wasm modules too at some point</p>\n</blockquote>\n<p>Will <code>wasmtime wasm2obj ..</code> + <code>objdump -d ...</code> work?</p>",
        "id": 202034071,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1593124568
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> I haven't used that too too much but it probably works just fine, that's a good poitn!</p>",
        "id": 202094236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593180230
    },
    {
        "content": "<p>I'm trying to move compiler to emit ELF image directly, that's will improve wasm2obj further. (I'm using objdump regularly)</p>",
        "id": 202094500,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1593180351
    },
    {
        "content": "<p>oh nice</p>",
        "id": 202095427,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593180754
    },
    {
        "content": "<p>FWIW, <code>RUST_LOG=debug</code> dumps a bunch of cranelift ir too, but not the final disassembly</p>",
        "id": 202110234,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593187823
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> I think the fuzz corpus may need to be updated for the new tables ops fuzz test? -- <a href=\"https://oss-fuzz-build-logs.storage.googleapis.com/log-5a0b58fe-4a35-46d5-b4d2-221905e7d208.txt\">https://oss-fuzz-build-logs.storage.googleapis.com/log-5a0b58fe-4a35-46d5-b4d2-221905e7d208.txt</a></p>",
        "id": 202691771,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1593698379
    },
    {
        "content": "<p>we should fix the build to not require a corpus ahead of time, and just make an empty one if necessary; I'll make a PR</p>",
        "id": 202708985,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593706000
    },
    {
        "content": "<p><a href=\"https://github.com/google/oss-fuzz/pull/4065\">https://github.com/google/oss-fuzz/pull/4065</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/pull/4065\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/pull/4065\" title=\"wasmtime: Create an empty corpus for newly-defined fuzz targets by fitzgen · Pull Request #4065 · google/oss-fuzz\">wasmtime: Create an empty corpus for newly-defined fuzz targets by fitzgen · Pull Request #4065 · google/oss-fuzz</a></div><div class=\"message_embed_description\">This will prevent build failures like\nhttps://oss-fuzz-build-logs.storage.googleapis.com/log-5a0b58fe-4a35-46d5-b4d2-221905e7d208.txt\nin the future.</div></div></div>",
        "id": 202709933,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1593706508
    }
]