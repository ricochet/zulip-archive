[
    {
        "content": "<p>I am trying to invoke a wasm component binary (with some <code>wasi::http</code> functionality) via wasmtime in Rust using both wasmtime 17.0.1 and 16.0.0. I have the cargo feature <code>\"component-model\"</code> enabled and I am setting <code>.wasm_component_model(true)</code> on the config passed to the engine, but I am still getting the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">Unsupported</span><span class=\"w\"> </span><span class=\"n\">feature</span>: <span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"n\">model</span>\n</code></pre></div>\n<p>Before I dig too far in is there anything obvious I am missing for running a component binary? The example is pretty deep in a larger repo so its going to take me awhile to pull out a repro.</p>\n<p>Related question, is there anything like <code>jco</code> or <code>wasmtime-py</code> for autocreating Rust bindings for component binaries? I see that cargo-component creates a <a href=\"http://bindings.rs\">bindings.rs</a> file, but it doesn't quite seem to be what I would expect for using a component as a library.</p>",
        "id": 422068017,
        "sender_full_name": "Landon James",
        "timestamp": 1708233426
    },
    {
        "content": "<p>I think this may be a situation where you're using <code>Module::new</code> to compile a component instead of <code>Component::new</code>. If that's the case then we should definitely improve this error message!</p>\n<p>For bindings generation on the host you'll want to use <code>wasmtime::component::bindgen!</code> and that should suit your needs</p>",
        "id": 422118069,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708280650
    },
    {
        "content": "<p>I am using <code>cargo component build --release</code> to create the binary, so not totally sure if which it is using under the hood. I'll try moving back to <code>wasm-tools component new</code> and see if that gets around the issue. Will look into <code>wasmtime::component::bindgen!</code> thanks for the pointer!</p>",
        "id": 422148996,
        "sender_full_name": "Landon James",
        "timestamp": 1708309095
    },
    {
        "content": "<p>Oh <code>cargo component build</code> produces a component, and under the hood that's calling <code>wasm-tools component new</code>. I mostly meant that in the Wasmtime embedding API make sure you're using the <code>Component</code> type instead of the <code>Module</code> type</p>",
        "id": 422259367,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708357244
    },
    {
        "content": "<p>Cool got around that error with the <code>Component::new</code> API so thank you for that. Facing a new one now related to the preview2 imports.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">context</span>: <span class=\"s\">\"import `wasi:io/poll@0.2.0` has the wrong type\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">source</span>: <span class=\"nc\">Error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">context</span>: <span class=\"s\">\"instance export `pollable` has the wrong type\"</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">source</span>: <span class=\"s\">\"expected resource found nothing\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n</code></pre></div>\n<p>I am creating a <code>WasiCtx</code> and passing it to the Store like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">().</span><span class=\"n\">inherit_stdio</span><span class=\"p\">().</span><span class=\"n\">build</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And I was also attempting to add the wasi functions to the linker with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">cx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>but <code>wasmtime_wasi::add_to_linker</code> expects a <code>wasmtime::Linker</code> instead of a <code>wasmtime::component::Linker</code>. Not sure if I am missing something there or if maybe the <code>component::Linker</code> automatically handles that linking?</p>\n<p>Heres a link to the <a href=\"https://github.com/landonxjames/smithy-rs/blob/cd091fb592158ceadfc9e0281a8794e9421c0bbc/tools/ci-cdk/canary-lambda/src/latest/wasm_canary.rs#L32-L65\">code I'm currently running</a> if that might help.</p>",
        "id": 422296939,
        "sender_full_name": "Landon James",
        "timestamp": 1708372110
    },
    {
        "content": "<p>You may be looking for one of the <code>add_to_linker</code> methods in <code>wasmtime_wasi::preview2</code>.</p>",
        "id": 422297145,
        "sender_full_name": "bjorn3",
        "timestamp": 1708372220
    },
    {
        "content": "<p><code>wasmtime_wasi::add_to_linker</code> is for wasi-preview1.</p>",
        "id": 422297225,
        "sender_full_name": "bjorn3",
        "timestamp": 1708372274
    },
    {
        "content": "<p><span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span> Note that this is expected to change in wasmtime 19: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7933\">https://github.com/bytecodealliance/wasmtime/pull/7933</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7933\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9391bf793ec38f25f1654d6c9c4f135088ef37c2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633762643532643431373237363032373632396637383162396330366333633634663233633335316532393762623862613138636166363562313866373661342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37393333)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7933\" title=\"Promote wasmtime-wasi::preview2 to root of crate by pchickey 路 Pull Request #7933 路 bytecodealliance/wasmtime\">Promote wasmtime-wasi::preview2 to root of crate by pchickey 路 Pull Request #7933 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Following #7881, wasi-common's re-exports from wasmtime-wasi will be marked as deprecated for the 18.0 release series. This PR lands the change into main to delete those entirely, and promote wasmt...</div></div></div>",
        "id": 422297383,
        "sender_full_name": "Lann Martin",
        "timestamp": 1708372352
    },
    {
        "content": "<p>Ahh those do seem like what I want. Although I am having trouble using them since the generic type for my Linker is <code>Linker&lt;WasiCtx&gt;</code> and that is causing a trait bound issue:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0277<span class=\"o\">]</span>:<span class=\"w\"> </span>the<span class=\"w\"> </span>trait<span class=\"w\"> </span>bound<span class=\"w\"> </span><span class=\"sb\">`</span>wasmtime_wasi::WasiCtx:<span class=\"w\"> </span>WasiView<span class=\"sb\">`</span><span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>satisfied\n<span class=\"w\">   </span>--&gt;<span class=\"w\"> </span>src/latest/wasm_canary.rs:54:5\n<span class=\"w\">    </span><span class=\"p\">|</span>\n<span class=\"m\">54</span><span class=\"w\">  </span><span class=\"p\">|</span><span class=\"w\">     </span>wasmtime_wasi::preview2::bindings::io::poll::add_to_linker<span class=\"o\">(</span><span class=\"p\">&amp;</span>mut<span class=\"w\"> </span>linker,<span class=\"w\"> </span><span class=\"p\">|</span>ctx<span class=\"p\">|</span><span class=\"w\"> </span>ctx<span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"p\">|</span><span class=\"w\">     </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^<span class=\"w\"> </span>the<span class=\"w\"> </span>trait<span class=\"w\"> </span><span class=\"sb\">`</span>WasiView<span class=\"sb\">`</span><span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>implemented<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"sb\">`</span>wasmtime_wasi::WasiCtx<span class=\"sb\">`</span>\n<span class=\"w\">    </span><span class=\"p\">|</span>\n<span class=\"w\">    </span><span class=\"o\">=</span><span class=\"w\"> </span>note:<span class=\"w\"> </span>required<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"sb\">`</span>wasmtime_wasi::WasiCtx<span class=\"sb\">`</span><span class=\"w\"> </span>to<span class=\"w\"> </span>implement<span class=\"w\"> </span><span class=\"sb\">`</span>wasmtime_wasi::preview2::bindings::io::poll::Host<span class=\"sb\">`</span>\n</code></pre></div>\n<p>I gave a shot at passing them in via the <code>with</code> parameter on the <code>wasmtime::component::bindgen!</code> macro as well but that didn't seem to change anything:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">inline</span>: <span class=\"s\">\"</span>\n<span class=\"s\">    package aws:component;</span>\n\n<span class=\"s\">    interface canary-interface {</span>\n<span class=\"s\">        run-canary: func() -&gt; result&lt;string, string&gt;;</span>\n<span class=\"s\">    }</span>\n\n<span class=\"s\">    world canary-world {</span>\n<span class=\"s\">        export canary-interface;</span>\n<span class=\"s\">    }</span>\n<span class=\"s\">\"</span><span class=\"p\">,</span>\n<span class=\"n\">with</span>: <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s\">\"wasi:io/error\"</span>: <span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">bindings</span>::<span class=\"n\">io</span>::<span class=\"n\">error</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"wasi:io/streams\"</span>: <span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">bindings</span>::<span class=\"n\">io</span>::<span class=\"n\">streams</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"s\">\"wasi:io/poll\"</span>: <span class=\"nc\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">bindings</span>::<span class=\"n\">io</span>::<span class=\"n\">poll</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"p\">});</span>\n</code></pre></div>",
        "id": 422307703,
        "sender_full_name": "Landon James",
        "timestamp": 1708377234
    },
    {
        "content": "<p>You need to implement the WasiView trait for your own context type. An example: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/b736585e2515f253d4507ae32f2e3180f4385192/examples/wasi-async/main.rs#L20\">https://github.com/bytecodealliance/wasmtime/blob/b736585e2515f253d4507ae32f2e3180f4385192/examples/wasi-async/main.rs#L20</a></p>",
        "id": 422308617,
        "sender_full_name": "bjorn3",
        "timestamp": 1708377852
    },
    {
        "content": "<p>Unfortunately doing that still doesn't get me any further. I replicated the impl of <code>WasiView</code> and passed the constructred <code>host_ctx</code> to my <code>Store</code>.  Doing this still left me with the error: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"s2\">\"import `wasi:io/poll@0.2.0` has the wrong type\"</span>,\n</code></pre></div>\n<p>I then tried to manually add the <code>io/poll</code> to the linker:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">bindings</span>::<span class=\"n\">io</span>::<span class=\"n\">poll</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">cx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And that compiles, but fails at runtime with: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cannot<span class=\"w\"> </span>use<span class=\"w\"> </span><span class=\"sb\">`</span>func_wrap_async<span class=\"sb\">`</span><span class=\"w\"> </span>without<span class=\"w\"> </span>enabling<span class=\"w\"> </span>async<span class=\"w\"> </span>support<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>config\n</code></pre></div>\n<p>So adding <code>.async_support(true)</code> to the engine config, and running again produces a new error: </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>must<span class=\"w\"> </span>use<span class=\"w\"> </span>async<span class=\"w\"> </span>instantiation<span class=\"w\"> </span>when<span class=\"w\"> </span>async<span class=\"w\"> </span>support<span class=\"w\"> </span>is<span class=\"w\"> </span>enabled\n</code></pre></div>\n<p>And unfortunately I get stuck there again because the  <code>wasmtime::component::bindgen!</code> macro doesn't appear to provide an async instantiation method. It seems there are still some rough edges trying to use both WASI and Component functionality at the same time. Once I get this figured out I'll try to contribute a new example to cover the overlap.</p>",
        "id": 422319953,
        "sender_full_name": "Landon James",
        "timestamp": 1708384738
    },
    {
        "content": "<p>You'll need to be sure to call the \"right\" <code>add_to_linker</code> function as there's a few. They're pre-generated with various configuration options, with the idea being:</p>\n<ul>\n<li>One axis is async-vs-not. For example <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/command/fn.add_to_linker.html\">async</a> vs <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview2/command/sync/index.html\">not</a></li>\n<li>Another axis is auto-generated vs handwritten. Anything inside the <code>bindings</code> module is auto-generated by <code>wasmtime::component::bindgen!</code> and might only add a single interface. The handwritten versions add a suite of interfaces at once.</li>\n<li>For the handwritten ones you can add the \"proxy\" world or the \"command\" world so you'll need to select which world you'd like to support and call the right function</li>\n</ul>",
        "id": 422440347,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708442462
    },
    {
        "content": "<p>Awesome! Finally found the right invocation of various <code>add_to_linker</code> functions last night. I believe my last question here relates to how this all plays with <code>async</code> code.</p>\n<p>Currently the <a href=\"https://github.com/landonxjames/smithy-rs/blob/ade60da07894f76c685b86bd0d3fd9c02825979b/tools/ci-cdk/canary-lambda/src/latest/wasm_canary.rs#L92\">function</a> that creates the <code>wasmtime</code> <code>Engine</code> and runs my wasm binary is synchronous and that works fine. When I change this function to be <code>async</code> (since thats what the canary runner expects) I get the following panic from the <code>wasmtime-wasi</code> crate:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'latest::wasm_canary::test_wasm_canary'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span>/Users/lnj/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-wasi-17.0.1/src/preview2/mod.rs:246:15:\nCannot<span class=\"w\"> </span>start<span class=\"w\"> </span>a<span class=\"w\"> </span>runtime<span class=\"w\"> </span>from<span class=\"w\"> </span>within<span class=\"w\"> </span>a<span class=\"w\"> </span>runtime.<span class=\"w\"> </span>This<span class=\"w\"> </span>happens<span class=\"w\"> </span>because<span class=\"w\"> </span>a<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span><span class=\"o\">(</span>like<span class=\"w\"> </span><span class=\"sb\">`</span>block_on<span class=\"sb\">`</span><span class=\"o\">)</span><span class=\"w\"> </span>attempted<span class=\"w\"> </span>to<span class=\"w\"> </span>block<span class=\"w\"> </span>the<span class=\"w\"> </span>current<span class=\"w\"> </span>thread<span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span>the<span class=\"w\"> </span>thread<span class=\"w\"> </span>is<span class=\"w\"> </span>being<span class=\"w\"> </span>used<span class=\"w\"> </span>to<span class=\"w\"> </span>drive<span class=\"w\"> </span>asynchronous<span class=\"w\"> </span>tasks.\n</code></pre></div>\n<p>I see that crate exports <code>in_tokio</code> and <code>with_ambient_tokio_runtime</code> functions, but I'm not entirely certain how they are meant to be used. </p>\n<p>The panic seems to be triggered by some of the <code>preview2::bindings::sync_io</code> code, so I suspect to run this in an <code>async</code> context I might need to use the <code>async</code> io options and the <code>.async_support(true)</code> config for the <code>Engine</code>. But doing so triggers another error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'latest::wasm_canary::test_wasm_canary'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span>/Users/lnj/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-17.0.1/src/component/linker.rs:276:9:\nmust<span class=\"w\"> </span>use<span class=\"w\"> </span>async<span class=\"w\"> </span>instantiation<span class=\"w\"> </span>when<span class=\"w\"> </span>async<span class=\"w\"> </span>support<span class=\"w\"> </span>is<span class=\"w\"> </span>enabled\n</code></pre></div>\n<p>And the <code>bindgen!</code> macro doesn't seem to create an async instantiation method.</p>",
        "id": 422488502,
        "sender_full_name": "Landon James",
        "timestamp": 1708457662
    },
    {
        "content": "<p>wasmtime_wasi::{in_tokio, with_ambient_tokio_runtime}  are really meant for other wasi proposal crates to use, not for the host to use</p>",
        "id": 422488903,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1708457853
    },
    {
        "content": "<p>if you are running wasmtime_wasi inside tokio, you need to use Config::async_support(true), and use wasmtime_wasi::command::add_to_linker as opposed to wasmtime_wasi::command::sync::add_to_linker</p>",
        "id": 422489064,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1708457915
    },
    {
        "content": "<p>and then additionally, if you are running bindgen yourself, you need to use <code>async: { names... }</code> as an option to bindgen, which will make the Host traits be <code>#[async_trait]</code>s and whatever component method names you select be <code>async fn</code> in the trait</p>",
        "id": 422489227,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1708457996
    },
    {
        "content": "<p>this story is kinda complicated, unfortunately - hopefully my explanation is sufficient but let me know.</p>",
        "id": 422489394,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1708458061
    },
    {
        "content": "<p>Ahh very helpful, that was the last link in the puzzle and its all working now. I think what I was getting stuck on is that the documentation for the <code>async</code> value for the <code>bindgen!</code> macro indicates that it makes the calls to individual functions <code>async</code>, but it doesn't mention that it also enables <code>instantiate_async</code> for the component itself.</p>",
        "id": 422675061,
        "sender_full_name": "Landon James",
        "timestamp": 1708538034
    }
]