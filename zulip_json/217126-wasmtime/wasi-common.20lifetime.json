[
    {
        "content": "<p>How long will it take before wasi-common gets removed? I'm working on migrating a project from Wasmer to Wasmtime. wasi-common has a much closer api to wasmer-wasi than wasmtime-wasi. As such I chose to use wasi-common for now. Can I expect it to stay around for a while or will it be removed soon?</p>",
        "id": 438567605,
        "sender_full_name": "bjorn3",
        "timestamp": 1715690496
    },
    {
        "content": "<p>While I don't think anyone has a concrete plan yet it's very much on life support and it's recommended to switch to <code>wasmtime-wasi</code>. It's effectively a candidate for deletion as soon as anyone finds the motivation/time</p>",
        "id": 438591672,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715697759
    },
    {
        "content": "<p>The async requirement of wasmtime-wasi is pretty inconvenient. I couldn't easily figure out how to pipe data into stdin and read it out of stdout again.</p>",
        "id": 438591878,
        "sender_full_name": "bjorn3",
        "timestamp": 1715697829
    },
    {
        "content": "<p>That'd probably be a good candidate for adding various adapters/types to work with that, we've already got <code>Memory{Input,Output}Pipe</code> IIRC and we could probably add <code>std::io</code>-based versions similarly or something similar</p>",
        "id": 438592163,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715697912
    },
    {
        "content": "<p>With wasi-common I can use <code>ReadPipe::from_shared</code> and <code>WritePipe::from_shared</code> wrapping a <code>Arc&lt;RwLock&lt;VecDeque&lt;u8&gt;&gt;&gt;</code> which is trivial to write to by making a clone of the <code>Arc</code> and then using synchronous read/write calls that will never block, but wasmtime-wasi requires async streams and then somehow handling the case where <code>Poll::Pending</code> is returned, but the host program doesn't use async anywhere in the plugin integration.</p>",
        "id": 438592546,
        "sender_full_name": "bjorn3",
        "timestamp": 1715698028
    },
    {
        "content": "<p>Yes that's something we can provide an adapter for</p>",
        "id": 438594686,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715698586
    },
    {
        "content": "<p>it's possible to turn an <code>Arc&lt;RwLock&gt;</code> and adapt it to the async interfaces required by wasmtime-wasi</p>",
        "id": 438594722,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715698599
    },
    {
        "content": "<p>For AsyncWrite it was almost trivial to forward to Write. For AsyncRead however the implementation seems to be a lot more involved.</p>",
        "id": 438612200,
        "sender_full_name": "bjorn3",
        "timestamp": 1715704066
    },
    {
        "content": "<p>I got something that compiles, but it is infecting a lot more with async than just those adapters. <code>instantiate</code> and <code>call</code> both need their async version. I tried <code>wasmtime_wasi::runtime::in_tokio</code>, but there is a deadlock somewhere. The last wasi call is a write to stdout.</p>",
        "id": 438617594,
        "sender_full_name": "bjorn3",
        "timestamp": 1715705909
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/zellij/commit/091ec7fd5db1661bf44d390bd0ce64188e74d42d\">https://github.com/bjorn3/zellij/commit/091ec7fd5db1661bf44d390bd0ce64188e74d42d</a> is what I got right now.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/zellij/commit/091ec7fd5db1661bf44d390bd0ce64188e74d42d\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d23896b33f0f528c24fad11254054fbf056d8d18/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313037356435373666343662363863373432616364356332373764386531633736343266653335656632653066613935313361383865343766633866663531662f626a6f726e332f7a656c6c696a2f636f6d6d69742f30393165633766643564623136363162663434643339306264306365363431383865373464343264&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/zellij/commit/091ec7fd5db1661bf44d390bd0ce64188e74d42d\" title=\"[WIP] Switch from wasi-common to wasmtime-wasi · bjorn3/zellij@091ec7f\">[WIP] Switch from wasi-common to wasmtime-wasi · bjorn3/zellij@091ec7f</a></div><div class=\"message_embed_description\">This currently deadlocks</div></div></div>",
        "id": 438617752,
        "sender_full_name": "bjorn3",
        "timestamp": 1715705982
    },
    {
        "content": "<p>oh I wasn't imagining that the whole embedding would turn async since wasmtime-wasi has a sync mode too</p>",
        "id": 438619552,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715706611
    },
    {
        "content": "<p>I was thinking that the adapters might only work in sync mode or something like that</p>",
        "id": 438619580,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715706622
    },
    {
        "content": "<p>Did you try using the sync::add_to_linker? You shouldn’t use in_tokio from outside the wasmtime-wasi crate or child crates such as wasmtime-wasi-http</p>",
        "id": 438619585,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715706624
    },
    {
        "content": "<p>I can't find any sync variant in <code>wasmtime_wasi::preview1</code>. I'm trying to prevent adding preview2 support for now in case the migration needs to be rolled back.</p>",
        "id": 438620203,
        "sender_full_name": "bjorn3",
        "timestamp": 1715706884
    },
    {
        "content": "<p>Is there a different <code>add_to_linker</code> that I can use for sync + preview1-only?</p>",
        "id": 438620564,
        "sender_full_name": "bjorn3",
        "timestamp": 1715707025
    },
    {
        "content": "<p><a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/preview1/fn.add_to_linker_sync.html\">this one</a>?</p>",
        "id": 438620736,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715707090
    },
    {
        "content": "<p>yeah sorry i got the name wrong, the sync/async specifier is a suffix now not a mod</p>",
        "id": 438621209,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715707290
    },
    {
        "content": "<p>That solves the async infection issue. It doesn't solve the deadlock though.</p>",
        "id": 438621330,
        "sender_full_name": "bjorn3",
        "timestamp": 1715707335
    },
    {
        "content": "<p><a href=\"https://github.com/bjorn3/zellij/commit/9f35c9fda1c9d05ba78e90048e9be962d53558a2\">https://github.com/bjorn3/zellij/commit/9f35c9fda1c9d05ba78e90048e9be962d53558a2</a> is what I have now.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bjorn3/zellij/commit/9f35c9fda1c9d05ba78e90048e9be962d53558a2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/23d290d7cb826ab522dc8466a47190e2b7f97885/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363961613536353437373733396131323264353766313564656339326566666263313330636264383037626533666634333130343935363035366561343438302f626a6f726e332f7a656c6c696a2f636f6d6d69742f39663335633966646131633964303562613738653930303438653962653936326435333535386132&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bjorn3/zellij/commit/9f35c9fda1c9d05ba78e90048e9be962d53558a2\" title=\"[WIP] Switch from wasi-common to wasmtime-wasi · bjorn3/zellij@9f35c9f\">[WIP] Switch from wasi-common to wasmtime-wasi · bjorn3/zellij@9f35c9f</a></div><div class=\"message_embed_description\">This currently deadlocks</div></div></div>",
        "id": 438621418,
        "sender_full_name": "bjorn3",
        "timestamp": 1715707381
    },
    {
        "content": "<p>I think that you'll still need to bridge the async-ness in the vecdeque adapters perhaps?</p>",
        "id": 438622318,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715707721
    },
    {
        "content": "<p>hm no they're always ready</p>",
        "id": 438622350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715707737
    },
    {
        "content": "<p>are you able to capture the stack at deadlock time?</p>",
        "id": 438622929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715707925
    },
    {
        "content": "<p>There are a lot of threads. I have no clue which one is deadlocking.</p>",
        "id": 438622982,
        "sender_full_name": "bjorn3",
        "timestamp": 1715707945
    },
    {
        "content": "<p>on that commit is there a command to run to poke around?</p>",
        "id": 438623084,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715707982
    },
    {
        "content": "<p><code>cargo xtask run</code></p>",
        "id": 438623124,
        "sender_full_name": "bjorn3",
        "timestamp": 1715707996
    },
    {
        "content": "<p>It gets stuck at <code>Starting</code>.</p>",
        "id": 438623174,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708018
    },
    {
        "content": "<p>You can exit with ctrl+q and due to the deadlock you have to manually kill the <code>zellij --server</code> process after exiting the client.</p>",
        "id": 438623314,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708071
    },
    {
        "content": "<p>05809cb955d40053f1159030fe88f5b69e48f717 now, right?</p>",
        "id": 438623328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708077
    },
    {
        "content": "<p>Yeah, that is my current version. The only difference with the last commit I linked is a change to CONTRIBUTING.md though.</p>",
        "id": 438623409,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708116
    },
    {
        "content": "<p>do you know what to do with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Custom</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Other</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"s\">\"protoc failed: resize.proto:19:12: Explicit 'optional' labels are disallowed in the Proto3 syntax. To define 'optional' fields in Proto3, simply remove the 'optional' label, as fields are 'optional' by default.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 438623433,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708129
    },
    {
        "content": "<p>You can find the logs at <code>/tmp/zellij-1000/zellij-log/zellij.log</code> (substitute your own uid if it isn't 1000)</p>",
        "id": 438623454,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708139
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/wasi-common.20lifetime/near/438623433\">said</a>:</p>\n<blockquote>\n<p>do you know what to do with:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">Custom</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">Other</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span>: <span class=\"s\">\"protoc failed: resize.proto:19:12: Explicit 'optional' labels are disallowed in the Proto3 syntax. To define 'optional' fields in Proto3, simply remove the 'optional' label, as fields are 'optional' by default.</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I didn't get that error locally. Maybe you have a different protobuf compiler version?</p>",
        "id": 438623496,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708162
    },
    {
        "content": "<p>apparently I had some weird install, trying system package manager</p>",
        "id": 438623571,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708186
    },
    {
        "content": "<p>I have version <code>libprotoc 3.21.12</code> as output of <code>protoc --version</code>.</p>",
        "id": 438623599,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708198
    },
    {
        "content": "<p>same now, making more progress</p>",
        "id": 438623644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708225
    },
    {
        "content": "<blockquote>\n<p><code>Thread 108 (Thread 0x716e2bc006c0 (LWP 3558238) \"server_listener\"):</code></p>\n</blockquote>\n<p>wow you're not kidding</p>",
        "id": 438623894,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708342
    },
    {
        "content": "<p>Commenting out most <code>add_plugin!()</code> calls in zellij-utils/src/consts.rs may help. You need to leave one of them as otherwise no wasm plugin will be loaded and thus the deadlock can't occur.</p>",
        "id": 438624173,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708466
    },
    {
        "content": "<p>hm ok you might want to avoid all the async stuff actually</p>",
        "id": 438624653,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708666
    },
    {
        "content": "<p>there's a lot of layers of adapters here and my guess is there's some background task which needs to run which isn't runnig</p>",
        "id": 438624694,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708685
    },
    {
        "content": "<p>but you don't need any of the background tasks in the firstp lace</p>",
        "id": 438624706,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708692
    },
    {
        "content": "<p>so for example instead of implementing Async{Read,Write} instead implementing <a href=\"https://docs.rs/wasmtime-wasi/latest/wasmtime_wasi/trait.StdoutStream.html\">this trait</a> directly</p>",
        "id": 438624789,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708730
    },
    {
        "content": "<p>where those should all have pretty trivial implementations on top of <code>Arc&lt;Mutex&lt;VecDeque&lt;...&gt;&gt;&gt;</code></p>",
        "id": 438624818,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708752
    },
    {
        "content": "<p>e.g. <code>stream</code> is a <code>clone</code> and <code>HostOutputStream</code> is \"do the thing\"</p>",
        "id": 438624892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708774
    },
    {
        "content": "<p>where <code>Subscribe</code> is \"always ready\"</p>",
        "id": 438624912,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708786
    },
    {
        "content": "<p>it'll probably be a bit wordier but I think that should help resolve the deadlock</p>",
        "id": 438624928,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708798
    },
    {
        "content": "<p>(this is all stuff we should improve in wasmtime-wasi ....)</p>",
        "id": 438624971,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715708820
    },
    {
        "content": "<p>I can try that.</p>",
        "id": 438625024,
        "sender_full_name": "bjorn3",
        "timestamp": 1715708857
    },
    {
        "content": "<p>That fixed it. Thanks!</p>",
        "id": 438627098,
        "sender_full_name": "bjorn3",
        "timestamp": 1715709763
    }
]