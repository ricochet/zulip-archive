[
    {
        "content": "<p>I have an issue with wasmtime on both aarch64 (nvidia jetson nano) and riscv64 (VisionFive 2). I have tried both the Hello WASI HTTP example and a simple spin app with the same result on both platforms. I get a panic when wasmtime tries to mmap:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"mi\">2024</span><span class=\"o\">-</span><span class=\"mi\">05</span><span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"n\">T13</span>:<span class=\"mi\">17</span>:<span class=\"mf\">20.823024</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">DEBUG</span><span class=\"w\"> </span><span class=\"n\">wasmtime_runtime</span>::<span class=\"n\">instance</span>::<span class=\"n\">allocator</span>::<span class=\"n\">pooling</span>::<span class=\"n\">memory_pool</span>: <span class=\"nc\">creating</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">pool</span>: <span class=\"nc\">SlabConstraints</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">expected_slot_bytes</span>: <span class=\"mi\">4294967296</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_memory_bytes</span>: <span class=\"mi\">4294967296</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_slots</span>: <span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_pkeys_available</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">guard_bytes</span>: <span class=\"mi\">2147483648</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">guard_before_slots</span>: <span class=\"nc\">true</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span>-&gt;\n<span class=\"nc\">SlabLayout</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">num_slots</span>: <span class=\"mi\">1000</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">slot_bytes</span>: <span class=\"mi\">6442450944</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">max_memory_bytes</span>: <span class=\"mi\">4294967296</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pre_slab_guard_bytes</span>: <span class=\"mi\">2147483648</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">post_slab_guard_bytes</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">num_stripes</span>: <span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">total</span>: <span class=\"mi\">6444598427648</span><span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">create</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">pool</span><span class=\"w\"> </span><span class=\"n\">mapping</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n   <span class=\"mi\">0</span>: <span class=\"nc\">mmap</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">reserve</span><span class=\"w\"> </span><span class=\"mh\">0x5dc80000000</span><span class=\"w\"> </span><span class=\"n\">bytes</span>\n<span class=\"w\">   </span><span class=\"mi\">1</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">allocate</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>aarch64 environment:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">jetson</span><span class=\"o\">@</span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span>:<span class=\"o\">~/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"n\">dockercon</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">lsb_release</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">LSB</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"p\">.</span>\n<span class=\"n\">Distributor</span><span class=\"w\"> </span><span class=\"n\">ID</span>: <span class=\"nc\">Ubuntu</span>\n<span class=\"n\">Description</span>:    <span class=\"nc\">Ubuntu</span><span class=\"w\"> </span><span class=\"mf\">18.04.6</span><span class=\"w\"> </span><span class=\"n\">LTS</span>\n<span class=\"n\">Release</span>:        <span class=\"mf\">18.04</span>\n<span class=\"n\">Codename</span>:       <span class=\"nc\">bionic</span>\n<span class=\"n\">jetson</span><span class=\"o\">@</span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span>:<span class=\"o\">~/</span><span class=\"n\">docker</span><span class=\"o\">/</span><span class=\"n\">dockercon</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">uname</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"mi\">360</span><span class=\"n\">lab</span><span class=\"o\">-</span><span class=\"n\">nano2</span><span class=\"w\"> </span><span class=\"mf\">4.9.337</span><span class=\"o\">-</span><span class=\"n\">tegra</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">SMP</span><span class=\"w\"> </span><span class=\"n\">PREEMPT</span><span class=\"w\"> </span><span class=\"n\">Thu</span><span class=\"w\"> </span><span class=\"n\">Jun</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">21</span>:<span class=\"mi\">19</span>:<span class=\"mi\">14</span><span class=\"w\"> </span><span class=\"n\">PDT</span><span class=\"w\"> </span><span class=\"mi\">2023</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"n\">aarch64</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"o\">/</span><span class=\"n\">Linux</span>\n</code></pre></div>\n<p>riscv64 environment:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">ubuntu</span>:<span class=\"o\">~/</span><span class=\"n\">src</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">lsb_release</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"n\">No</span><span class=\"w\"> </span><span class=\"n\">LSB</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">available</span><span class=\"p\">.</span>\n<span class=\"n\">Distributor</span><span class=\"w\"> </span><span class=\"n\">ID</span>: <span class=\"nc\">Ubuntu</span>\n<span class=\"n\">Description</span>:    <span class=\"nc\">Ubuntu</span><span class=\"w\"> </span><span class=\"mf\">24.04</span><span class=\"w\"> </span><span class=\"n\">LTS</span>\n<span class=\"n\">Release</span>:        <span class=\"mf\">24.04</span>\n<span class=\"n\">Codename</span>:       <span class=\"nc\">noble</span>\n<span class=\"n\">ubuntu</span><span class=\"o\">@</span><span class=\"n\">ubuntu</span>:<span class=\"o\">~/</span><span class=\"n\">src</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">uname</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">a</span>\n<span class=\"n\">Linux</span><span class=\"w\"> </span><span class=\"n\">ubuntu</span><span class=\"w\"> </span><span class=\"mf\">6.8.0</span><span class=\"o\">-</span><span class=\"mi\">31</span><span class=\"o\">-</span><span class=\"n\">generic</span><span class=\"w\"> </span>#<span class=\"mf\">31.1</span><span class=\"o\">-</span><span class=\"n\">Ubuntu</span><span class=\"w\"> </span><span class=\"n\">SMP</span><span class=\"w\"> </span><span class=\"n\">PREEMPT_DYNAMIC</span><span class=\"w\"> </span><span class=\"n\">Sun</span><span class=\"w\"> </span><span class=\"n\">Apr</span><span class=\"w\"> </span><span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"mi\">01</span>:<span class=\"mi\">12</span>:<span class=\"mi\">53</span><span class=\"w\"> </span><span class=\"n\">UTC</span><span class=\"w\"> </span><span class=\"mi\">2024</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">riscv64</span><span class=\"w\"> </span><span class=\"n\">GNU</span><span class=\"o\">/</span><span class=\"n\">Linux</span>\n</code></pre></div>\n<p>For me the huge mmap seems strange, but it happens also on x86_64, and there it seems to work.</p>\n<p>Any help is appreciated.</p>",
        "id": 438362358,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715606780
    },
    {
        "content": "<p>Is overcommit on the aarch64/riscv64 systems turned off perhaps?</p>",
        "id": 438380763,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715611511
    },
    {
        "content": "<p>The default overcommit heuristic isn't really documented either: <a href=\"https://www.kernel.org/doc/html/v5.1/vm/overcommit-accounting.html\">https://www.kernel.org/doc/html/v5.1/vm/overcommit-accounting.html</a></p>\n<blockquote>\n<p>It ensures a seriously wild allocation fails</p>\n</blockquote>",
        "id": 438381811,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715611779
    },
    {
        "content": "<p><code>sysctl vm.overcommit_memory=1</code> might fix it but seems like a oversized hammer</p>",
        "id": 438382200,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715611879
    },
    {
        "content": "<p><code>sysctl vm.overcommit_memory</code> shows 0 in all the machines I am working on. Also on the x86_64-machine where this works.<br>\nBut I will try setting it to 1. It didn't alter the behaviour.</p>",
        "id": 438382674,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715611997
    },
    {
        "content": "<p>But what is the reason for allocating 6000 GB address space?</p>",
        "id": 438414729,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715621862
    },
    {
        "content": "<p>Oh if overcommit_memory doesn't work then I'm not sure what's going on in the kernels here. </p>\n<p>If you're doing <code>wasmtime serve</code>, can you try passing <code>-O pooling-allocator=n</code> and see if that works? The 6T address space reservation is the default settings of the pooling allocator. It's not actually allocating that much memory, it's just allocating that much virtual memory</p>",
        "id": 438415024,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715621974
    },
    {
        "content": "<blockquote>\n<p><code>-O pooling-allocator=n</code></p>\n</blockquote>\n<p>Only works on recent <code>main</code> right?</p>",
        "id": 438415367,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715622114
    },
    {
        "content": "<p>That works <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> !</p>",
        "id": 438415448,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715622131
    },
    {
        "content": "<p>I am on version 21.0</p>",
        "id": 438415524,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715622162
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> configuring the options without <code>-O pooling-allocator[=y/n]</code> only works on <code>main</code>, but disabling it or passing the <code>-O pooling-allocator</code> option explicitly should work</p>",
        "id": 438415529,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622163
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506554\">@Mats Brorsson</span> are you able to share how you installed the aarch64/riscv64 versions of Linux? Are they stock versions of an OS for example? I'd be curious to try to dig in more why this isn't working on those platforms</p>",
        "id": 438415631,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622208
    },
    {
        "content": "<p>For the aarch64 I used nvidias image for the Jetson nano which is now very old. It comes from this site: <a href=\"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write\">https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write</a></p>\n<p>For riscv64, I got the image directly from this page: <a href=\"https://ubuntu.com/download/risc-v\">https://ubuntu.com/download/risc-v</a> (select VisionFive 2)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e315420bb87d12e187705613061a7446422685b1/68747470733a2f2f64323967346732647971763434332e636c6f756466726f6e742e6e65742f73697465732f64656661756c742f66696c65732f616b616d61692f656d6265646465642f696d616765732f6a6574736f6e2d646576656c6f7065722d6b69742d383530783438302e6a7067&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.nvidia.com/embedded/learn/get-started-jetson-nano-devkit#write\" title=\"Get Started With Jetson Nano Developer Kit\">Get Started With Jetson Nano Developer Kit</a></div><div class=\"message_embed_description\">Build practical AI applications, AI robots, and more.</div></div></div>",
        "id": 438415977,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715622325
    },
    {
        "content": "<p>Is there a way to control the allocator used when wasmtime is used as a library, from, e.g. environment variables?</p>\n<p>BTW: where are wasmtime's cli options documented? They are not here: <a href=\"https://docs.wasmtime.dev/cli-options.html\">https://docs.wasmtime.dev/cli-options.html</a></p>",
        "id": 438416320,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715622449
    },
    {
        "content": "<p><code>wasmtime -O help</code></p>",
        "id": 438416545,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715622518
    },
    {
        "content": "<p>Currently there's not an env var for this, no, but it can be programmatically controlled if you're working with an embedding (<code>Config::allocation_strategy</code>).</p>\n<p>For the CLI options they're currently only documented through the CLI itself as Lann said</p>",
        "id": 438416562,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622528
    },
    {
        "content": "<p>If you're able, can you try running <code>-O pooling-allocator-y -O pooling-total-memories=N</code> with a few versions of N?</p>",
        "id": 438416827,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622606
    },
    {
        "content": "<p>I'm curious what fails and what doesn't</p>",
        "id": 438416843,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622610
    },
    {
        "content": "<p>the default is 1000 which is the 6T reservation, but I'm curious if, for example, 100 works or even 10</p>",
        "id": 438416893,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622625
    },
    {
        "content": "<p>It works for N up to 56 but fails at 57</p>",
        "id": 438417614,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715622865
    },
    {
        "content": "<p>ah yes the well-known 360GB limit <span aria-label=\"neutral\" class=\"emoji emoji-1f610\" role=\"img\" title=\"neutral\">:neutral:</span></p>",
        "id": 438417767,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715622919
    },
    {
        "content": "<p>I do not have access to my RISCV-board from home (forgot its IP-address :-) so this is for the Jetson nano board</p>",
        "id": 438417776,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715622923
    },
    {
        "content": "<p>interesting, thanks for testing!</p>",
        "id": 438417880,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715622961
    },
    {
        "content": "<p>there is apparently a 39-bit virtual address configuration for aarch64</p>",
        "id": 438418334,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715623097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/memory_pool.20issue.20on.20arch64.20and.20riscv64/near/438418334\">said</a>:</p>\n<blockquote>\n<p>there is apparently a 39-bit virtual address configuration for aarch64</p>\n</blockquote>\n<p>Indeed, and for RISCV64 it seems to be 48 or 39 bits. <a href=\"https://www.kernel.org/doc/html/v6.4/riscv/vm-layout.html\">https://www.kernel.org/doc/html/v6.4/riscv/vm-layout.html</a></p>\n<p>Is there a way to programmatically find this out?</p>\n<p>Also, what can happen if I do not use the  pooling-allocator? Is it a performance or a correctness issue?</p>",
        "id": 438425277,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715625781
    },
    {
        "content": "<p>Pooling allocator vs. not is purely a performance question: every feature is supported with the \"on-demand\" allocator as well</p>",
        "id": 438425584,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1715625906
    },
    {
        "content": "<p>Maybe this from <code>/proc/meminfo</code>:<br>\nAarch64: VmallocTotal:   263061440 kB<br>\nx86_64: VmallocTotal:   34359738367 kB</p>",
        "id": 438426733,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715626333
    },
    {
        "content": "<p>Hmm well I'm not sure exactly how that relates to the 360GB limit you found in practice, but I guess its...<em>suspiciously close</em>?</p>",
        "id": 438429588,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715627388
    },
    {
        "content": "<p>Try: <code>grep 'address sizes' /proc/cpuinfo | uniq</code></p>",
        "id": 438432835,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715628626
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"506554\">@Mats Brorsson</span> would you be able to confirm that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8610\">https://github.com/bytecodealliance/wasmtime/pull/8610</a> works on the systems that <code>wasmtime serve</code> doesn't currently work on?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8610\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/523d20d18f0b4431979f2480f1529e3c96a2bb2b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343436333939373530353864376230616135306636383463383131353034386531666231376435643661393437373265313033393764393238383363386130342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38363130&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8610\" title=\"Dynamically determine whether to pool for `wasmtime serve` by alexcrichton · Pull Request #8610 · bytecodealliance/wasmtime\">Dynamically determine whether to pool for `wasmtime serve` by alexcrichton · Pull Request #8610 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit aims to address #8607 by dynamically determining whether the pooling allocator should be used rather than unconditionally using it. It looks like some systems don't have enough virtual ...</div></div></div>",
        "id": 438445599,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715633440
    },
    {
        "content": "<p>I'd like to double-check before merging that to confirm</p>",
        "id": 438445618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1715633447
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/memory_pool.20issue.20on.20arch64.20and.20riscv64/near/438432835\">said</a>:</p>\n<blockquote>\n<p>Try: <code>grep 'address sizes' /proc/cpuinfo | uniq</code></p>\n</blockquote>\n<p>That doesn't work universally. For instance on my aarch64-board, it only shows this for each processor:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">processor</span><span class=\"w\">       </span>: <span class=\"mi\">0</span>\n<span class=\"n\">model</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\">      </span>: <span class=\"nc\">ARMv8</span><span class=\"w\"> </span><span class=\"n\">Processor</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">v8l</span><span class=\"p\">)</span>\n<span class=\"n\">BogoMIPS</span><span class=\"w\">        </span>: <span class=\"mf\">38.40</span>\n<span class=\"n\">Features</span><span class=\"w\">        </span>: <span class=\"nc\">fp</span><span class=\"w\"> </span><span class=\"n\">asimd</span><span class=\"w\"> </span><span class=\"n\">evtstrm</span><span class=\"w\"> </span><span class=\"n\">aes</span><span class=\"w\"> </span><span class=\"n\">pmull</span><span class=\"w\"> </span><span class=\"n\">sha1</span><span class=\"w\"> </span><span class=\"n\">sha2</span><span class=\"w\"> </span><span class=\"n\">crc32</span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">implementer</span><span class=\"w\"> </span>: <span class=\"mh\">0x41</span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">architecture</span>: <span class=\"mi\">8</span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">variant</span><span class=\"w\">     </span>: <span class=\"mh\">0x1</span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">part</span><span class=\"w\">        </span>: <span class=\"mh\">0xd07</span>\n<span class=\"n\">CPU</span><span class=\"w\"> </span><span class=\"n\">revision</span><span class=\"w\">    </span>: <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 438500373,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715661640
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/memory_pool.20issue.20on.20arch64.20and.20riscv64/near/438445599\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"506554\">Mats Brorsson</span> would you be able to confirm that <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8610\">https://github.com/bytecodealliance/wasmtime/pull/8610</a> works on the systems that <code>wasmtime serve</code> doesn't currently work on?</p>\n</blockquote>\n<p>I can confirm that this fix works on both the Aarch64 board and the RISCV64 board that I use. However, I will try to see how spin (and the spin shim for containerd) uses the library to see if a similar fix can be introduced there.</p>",
        "id": 438574422,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715692655
    },
    {
        "content": "<p>Thanks! That ought to fix <a href=\"https://github.com/fermyon/spin/issues/2343\">https://github.com/fermyon/spin/issues/2343</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin/issues/2343\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/90e6b94bee9fd7d53647fffa1f1b7d8c12022a81/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643536646432336236613465306531353261653662633461306535613062373865363932623333353933303037326534326536646131323139666331326334362f6665726d796f6e2f7370696e2f6973737565732f32333433&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin/issues/2343\" title=\"Disable pooling allocator automatically in environments where it will fail · Issue #2343 · fermyon/spin\">Disable pooling allocator automatically in environments where it will fail · Issue #2343 · fermyon/spin</a></div><div class=\"message_embed_description\">There are (at least) two environments where the Wasmtime pooling allocator is known to fail with Spin's default settings: QEMU: #1785 Systems with &lt;2GB (?) RAM: #2119 Under spin up we should try to...</div></div></div>",
        "id": 438574937,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715692802
    },
    {
        "content": "<p>I wasn't sure what \"some operation known to fail with pooling\" before, but it seems like that PR does the trick</p>",
        "id": 438575181,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715692855
    },
    {
        "content": "<p>However, I am not sure that when the serve option of wasmtime is used from the library instead of the cli goes through this same code?</p>",
        "id": 438575499,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715692932
    },
    {
        "content": "<p><code>wasmtime serve</code> is not a library feature; Spin is an entirely separate implementation of the same basic idea</p>",
        "id": 438575640,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715692970
    },
    {
        "content": "<p>ok, but I get the same error with the 6T memory allocation in wasmtime so the fix may need to be somewhere else then, or in an additional place.</p>",
        "id": 438575909,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1715693039
    },
    {
        "content": "<p>Ah, yes, the PR above only fixes <code>wasmtime serve</code>. It would be possible to add \"should this host use pooling\" auto-detection to the wasmtime lib, but that may be a bit more \"opinionated\" than the lib usually is.</p>",
        "id": 438576382,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715693164
    },
    {
        "content": "<p>It would probably be worth at least a note somewhere in the <a href=\"https://docs.rs/wasmtime/20.0.2/wasmtime/struct.PoolingAllocationConfig.html\">pooling docs</a></p>",
        "id": 438577092,
        "sender_full_name": "Lann Martin",
        "timestamp": 1715693330
    }
]