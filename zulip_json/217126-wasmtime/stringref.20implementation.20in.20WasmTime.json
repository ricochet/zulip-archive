[
    {
        "content": "<p>Hi, I've been playing more with WASM and I'm now introducing strigref proposal to some of my experiments. I know that V8 and some other runtimes implement stringref already, but I haven't seen any mention of the proposal in the project nor issues. Are there any plans to implement it or is maybe someone working on it already?</p>",
        "id": 477901046,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729435035
    },
    {
        "content": "<p>No plans currently, or at least not as far as I'm aware of myself.</p>",
        "id": 477902110,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1729436014
    },
    {
        "content": "<p>I was researching the subject a bit more and found <a href=\"https://news.ycombinator.com/item?id=37766236\">this comment</a> saying stringref has uncertain future. I'm guessing this might be the reason it's not implemented in most runtimes yet <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> For anyone else looking for a string solution, it seems like this is the way to go for now: <a href=\"https://github.com/WebAssembly/js-string-builtins\">https://github.com/WebAssembly/js-string-builtins</a>. More info about that can also be found on the <a href=\"https://chromestatus.com/feature/6695587390423040\">feature page for Chromium</a>, which also links to discussion about trial and trial extension for the feature.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/js-string-builtins\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c123327d9e1a2093e2f9624f939cfe52caac188d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336630353634353637383132643432363135653034313932393435333032363365313732623431303736356636346562623561643735396664383232613230632f576562417373656d626c792f6a732d737472696e672d6275696c74696e73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/js-string-builtins\" title=\"GitHub - WebAssembly/js-string-builtins: JS String Builtins\">GitHub - WebAssembly/js-string-builtins: JS String Builtins</a></div><div class=\"message_embed_description\">JS String Builtins. Contribute to WebAssembly/js-string-builtins development by creating an account on GitHub.</div></div></div>",
        "id": 478032811,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729511203
    },
    {
        "content": "<p>One small addition/question here - if anyone is aware of any activity and or plans regarding the stringref proposal itself, I would be very much interested to hear about it. I haven't really had time to experiment with JS String builtins, but it looks to me like stringref would be a nicer thing to have when writing raw WASM code rather than String builtins.</p>",
        "id": 478072808,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729520226
    },
    {
        "content": "<p>Sorry for spamming this topic, but I have an additional question. <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> given an uncertain future of the stringref proposal, do you think a PR with stringref implementation could be accepted to WasmTime? I'm not sure if I have time to work on it in the near future, but I just wanted to know if it's even feasible to get it into WasmTime behind a flag? Or would it only be accepted once the proposal is in phase 3?</p>",
        "id": 478089485,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729524396
    },
    {
        "content": "<p>in general, this should be handled at the language's wasm toolchain level, where they make the following consideration:</p>\n<ul>\n<li>if the toolchain is exactly targeting the semantics of JS strings, and effectively assuming that the wasm is always running inside a JS engine, then the toolchain should make that expectation/dependence explicit and use JS string ref builtins</li>\n<li>otherwise, the toolchain should lower its language's strings and their semantics to wasm operations on top of <code>(array i8)</code> (assuming utf8/byte-encoding; could use <code>(array i16)</code> for utf16 and 16-bit encodings)</li>\n</ul>\n<p>the <code>stringref</code> proposal was in an uncanny valley where it was baking the semantics of JS strings into the wasm language, which is problematic for situations like Wasmtime's where the Wasm is not running inside of a JS engine.</p>\n<p>the JS string ref proposal is actually really nice for toolchains that are always JS-specific because it gives them a path for future JS-specific imports as well, like JS regexes and JS dates and such. it gives them access to a bunch of JS stuff that would never make sense for, e.g., Wasmtime to implement.</p>",
        "id": 478122299,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729534607
    },
    {
        "content": "<p>(err <code>s/JS string ref/JS string builtins/</code> in the previous message, too late to edit)</p>",
        "id": 478124105,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729535268
    },
    {
        "content": "<p>Thanks for more context <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> </p>\n<p>I now have one more question about JS string builtins, though. After reading the proposal overview I thought that technically any language could expose JS string builtins to the guest, ie. it could be done in Wasmtime too. I thought it could make sense not because it's allowing to access Javascript functions, but because it makes a standardised set of functions and types available to the guest, which in turn allows to write WASM programs easier. Are you saying that this is not the case and it's unlikely that non-JS runtimes like Wasmtime will get support for JS string builtins?</p>",
        "id": 478126550,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729536130
    },
    {
        "content": "<p>If I'm recalling correctly, Wasmtime wouldn't need to explicitly support js string builtins; any host could implement them without new functionality (modulo GC implementation completeness)</p>",
        "id": 478134086,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729538988
    },
    {
        "content": "<p>one could implement the JS string builtins as functions defined on a <code>wasmtime::Linker</code>, there is nothing preventing that</p>\n<p>it is unlikely that Wasmtime will ever have built-in support for these functions and special case them in the compiler to inline them and all that stuff that you would expect a browser's wasm engine to do</p>",
        "id": 478145066,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1729542909
    },
    {
        "content": "<p>Ok, I see, so essentially it is technically possible, but unlikely. That's a bit of a bummer - better string support would be great for non-browser workloads too.</p>",
        "id": 478233345,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729586288
    },
    {
        "content": "<p>FWIW (you may be aware but just to make it explicit) -- nothing prevents a good, performant string implementation inside a Wasm module, or with GC, even passed by reference between modules, or with wit and resources, passed by reference between components. The main motivation for stringref and then JS string builtins is to provide access to the JavaScript strings on a host that has JS and Wasm (i.e., browsers), which Wasmtime isn't</p>",
        "id": 478315212,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729611469
    },
    {
        "content": "<p>In other words, driven by interop need with JS, and there's no interop with JS on Wasmtime, so instead language runtimes are fine (and even prefer, because it's less work) using their existing string impls.</p>",
        "id": 478315330,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729611492
    },
    {
        "content": "<p>From the point of view of \"making it easier to write Wasm programs\" -- Wasm is mainly optimized to be a compiler target, and so aims for a  minimal floor of functionality needed to performantly use hardware primitives, rather than a ceiling of functionality for convenience. It's perfectly fine for folks to put together convenience libraries or other tooling on top (and BA effectively has, with the FFI-related tooling!)</p>",
        "id": 478315902,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729611666
    },
    {
        "content": "<p>Sure, I know most of the time you compile stuff into WASM, but I'm doing something different at the moment. I'm experimenting with compiling a subset of Javascript into WASM GC code and something like the stringref proposal would make it a whole lot easier. Ie. I know I can generate the implementation of JS strings and all the methods it supports into WASM using i8 arrays, but with stringref most of the work would have been already done.</p>\n<p>I guess maybe it's also the fact that for now it's not even a proof of concept yet, so I'm doing the simplest thing possible - just some string manipulation to generate working WASM code. When I know it has future I'll probably try to abstract it a bit more, so it's easier to write the methods I need.</p>",
        "id": 478441600,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729672731
    },
    {
        "content": "<p>Actually this discussion motivated me to do it properly from the start. I'm honestly not sure how much more code I have to do to validate the idea (like even how functions work), so I'll rewrite what I have into a proper AST generator for WASM and I'll generate WASM code from the AST. That way I'll be able to combine WASM code generation functions much easier.</p>",
        "id": 478450446,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729675485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"657423\">Piotr Sarnacki</span> <a href=\"#narrow/channel/217126-wasmtime/topic/stringref.20implementation.20in.20WasmTime/near/478441600\">said</a>:</p>\n<blockquote>\n<p>[...] I'm experimenting with compiling a subset of Javascript into WASM GC code [...]</p>\n</blockquote>\n<p>If you haven't seen porffor for AoT JS compilation to WASM that might be a good starting point (recently got 50% Test262 coverage!): <a href=\"https://github.com/CanadaHonk/porffor\">https://github.com/CanadaHonk/porffor</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/CanadaHonk/porffor\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/214d98ffb2ce1e24f335992181dcf4d7430b2f0e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393930336333613334363965393839353262363936656261376530633030393933373235373035363331346632646562613463363637393737376366306232662f43616e616461486f6e6b2f706f7266666f72&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/CanadaHonk/porffor\" title=\"GitHub - CanadaHonk/porffor: A from-scratch experimental AOT JS engine, written in JS\">GitHub - CanadaHonk/porffor: A from-scratch experimental AOT JS engine, written in JS</a></div><div class=\"message_embed_description\">A from-scratch experimental AOT JS engine, written in JS - CanadaHonk/porffor</div></div></div>",
        "id": 478515306,
        "sender_full_name": "Milan",
        "timestamp": 1729695128
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"417958\">@Milan</span> yeah, I've seen porffor and it's a very interesting project for sure! I decided to experiment by writing a project from scratch mainly because I wanted to learn more about WASM in general, and explore proposals like WASM GC, exception handling, and tail call optimizations. Writing a JS compiler seems like a great thing to hit all of these, but one of the rules that porffor follows is: \"Porffor intentionally does not use Wasm proposals which are not commonly implemented yet (eg GC) so it can be used in as many places as possible.\". Also I write JavaScript only when I absolutely have to <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>\n<p>If I get anywhere I will maybe try to run some comparisons between the tools, like compare the size of the generated code, performance etc as I think it might be an interesting way to evaluate the usefulness of WASM proposals for using dynamic languages on top of WASM.</p>",
        "id": 478533647,
        "sender_full_name": "Piotr Sarnacki",
        "timestamp": 1729699896
    }
]