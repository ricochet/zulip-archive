[
    {
        "content": "<p>Hi! I'm trying debugging support in wasmtime, and i can run a rust crate compiled to wasm, debug it, and see the Rust code \\o/<br>\nI've also discovered that we need to manually call <code>vmctx.set()</code>, which is fine. However, I sometimes get random values when inspecting variables, like <code>self</code> or some parameters. What's the status of debugging support in general?</p>",
        "id": 236853675,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619796552
    },
    {
        "content": "<p>(Using latest wasmtime + lldb12)</p>",
        "id": 236853699,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619796563
    },
    {
        "content": "<p>afaik a lot of basics are there but it hasn't been super heavily battle-tested so there's likely missing pices</p>",
        "id": 236857840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619798107
    },
    {
        "content": "<p>we have some but not a ton of tests, and this code hasn't seen much love in awhile</p>",
        "id": 236857892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1619798131
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> in theory, it \"should\" be \"correct\" -- I implemented the analysis that computes locations from VCode and gives it to the debug crate -- but IIRC the debug crate is doing some wonky DWARF filtering/translation</p>",
        "id": 236858203,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619798282
    },
    {
        "content": "<p>anyway if it's showing wrong values (rather than just \"unavailable\" or \"optimized out\") then that's a bug and we should investigate</p>",
        "id": 236858324,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619798327
    },
    {
        "content": "<p>we don't make super-strong guarantees here but we should try to be correct :-)</p>",
        "id": 236858352,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619798339
    },
    {
        "content": "<p>also is this on aarch64? IIRC we only test so far on x86-64 (... so finding and fixing bugs on non-x86 is very useful, thank you!)</p>",
        "id": 236858585,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619798422
    },
    {
        "content": "<p>the \"optimized out\" often not a bug. it is by design -- debugging reserves that as a way to bail out from hard/complex cases</p>",
        "id": 236858748,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1619798478
    },
    {
        "content": "<p>right, it sounds like the issue above is not \"optimized out\" but actually wrong values (?)</p>",
        "id": 236859250,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619798650
    },
    {
        "content": "<p>fwiw you will likely get \"optimized out\" because LLVM does not know or lost information about how to retrieve information about variable (which is hard by itself if you add operand stack nature of wasm) than due to wasmtime weird logic</p>",
        "id": 236859354,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1619798689
    },
    {
        "content": "<p>Yeah, in my case i'm debugging on x64, and seeing values that are incorrect when inspecting them: for instance a <code>&amp;self</code> pointer is 0, or a parameter value is <code>0</code> (which is incorrect in my case) at the first line in the function, then becomes correct a few lines later, then becomes incorrect again</p>",
        "id": 236860656,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619799231
    },
    {
        "content": "<p>Unfortunately don't have a small repro <em>yet</em>. But debugging is really important for us, so I'll try to make one quickly!</p>",
        "id": 236860813,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619799282
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> this is a somewhat low-level answer but the <code>RUST_LOG=debug</code> output should include the debug value locations analysis (machinst/debug.rs) -- if you can deduce whether that's giving wrong answers or whether the DWARF manipulation is going bad, that would help significantly!</p>",
        "id": 236860934,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1619799324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> I saw you are using __vmctx.set() (which is correct) Did you check <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\">https://github.com/bytecodealliance/wasmtime/pull/1482</a> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" style=\"background-image: url(https://opengraph.githubassets.com/2471f11f2cf3dd68ea655c05db618a45ebd914ac12dcfa1380b0a78279b9353e/bytecodealliance/wasmtime/pull/1482)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1482\" title=\"Utility methods for artificial debug types in the generated DWARF by yurydelendik 路 Pull Request #1482 路 bytecodealliance/wasmtime\">Utility methods for artificial debug types in the generated DWARF by yurydelendik 路 Pull Request #1482 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, artificial &quot;wrapper&quot; types are created for pointer types. These wrappers display Wasm pointers as i32. To dereference such wrapper/pointer the function&#39;s vmctx is needed. T...</div></div></div>",
        "id": 236861375,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1619799504
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> thanks! i didn't see this. Should this show more if using <code>pp</code> instead of <code>p</code>?</p>",
        "id": 236861675,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619799636
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> I'll try reducing first; the module has tons and tons of functions, so this might not be viable right now.</p>",
        "id": 236861732,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619799664
    },
    {
        "content": "<p>in most of the cases debugger needs to know vmctx -- dwarf expressions need to access wasm memory, and lldb/gdb has not way to do that in a good way</p>",
        "id": 236861814,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1619799697
    },
    {
        "content": "<p>notice that pp is <code>command regex pp 's/(.+)/p __vmctx-&gt;set(),%1/'</code></p>",
        "id": 236861908,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1619799726
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> Ah, is it required to run <code>__vmctx-&gt;set()</code> between each instruction? i might have missed that part!</p>",
        "id": 236862043,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619799787
    },
    {
        "content": "<p>you can use p but call <code>__vmset.set()</code> before first p (and context switches)</p>",
        "id": 236862070,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1619799797
    },
    {
        "content": "<p>right, so calling it once <em>should</em> be sufficient, i see</p>",
        "id": 236862122,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1619799820
    }
]