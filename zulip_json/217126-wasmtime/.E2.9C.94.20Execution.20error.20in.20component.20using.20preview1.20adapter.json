[
    {
        "content": "<p>Hello all! For a little context, I'm trying to compile and run Ruby 3.2 as a component. I have a core module compiled of the Ruby runtime, which I then encode as a component using the <em>command</em> variant of the preview1 adapter.</p>\n<p>Executing the component with Wasmtime throws the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0xf50b06</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">wasi_snapshot_preview1</span>::<span class=\"n\">bindings</span>::<span class=\"n\">wasi</span>::<span class=\"n\">cli_base</span>::<span class=\"n\">exit</span>::<span class=\"n\">exit</span>::<span class=\"n\">hf14a756e1735c0fa</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0xf4ff1e</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">proc_exit</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0xf55660</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">shim</span><span class=\"o\">!</span><span class=\"n\">adapt</span><span class=\"o\">-</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"o\">-</span><span class=\"n\">proc_exit</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x4aa733</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">5297</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x5147</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!&lt;</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"mi\">39</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>: <span class=\"mh\">0xf46400</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">adapter</span>:<span class=\"nc\">wasi_snapshot_preview1</span><span class=\"o\">!</span><span class=\"n\">run</span>\n</code></pre></div>\n<p>Grepping the Ruby component with <code>wasm-tools print</code> looking for whatever function 39 is,  I see these lines:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$adapt</span><span class=\"o\">-</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"o\">-</span><span class=\"n\">environ_get</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">39</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">15</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">39</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"39\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$adapt</span><span class=\"o\">-</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"o\">-</span><span class=\"n\">environ_get</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>which I believe indicates that the crash stems from a call to <code>environ_get</code> -- the Ruby runtime checks the value of env var <code>RUBY_PLATFORM</code>, so it makes sense that the crash is happening early.</p>\n<p>I'm using the Rust <code>wasmtime</code> crate, pinned to GitHub rev <code>a330867</code>. The component encoding uses the Rust <code>wasm-tools</code> crate, pinned to GitHub rev <code>0263c2f</code>. I believe both of these revs are current with recent changes to the preview1 shim. The adapter module itself is compiled from latest wasmtime rev <code>80e68c3 </code>.</p>\n<p>I guess at the moment I'm trying to figure out if this is a bug in the preview1 adapter, or if I've maybe missed something on my end? Please let me know if I can provide more detail!</p>",
        "id": 374455878,
        "sender_full_name": "Dan",
        "timestamp": 1689120737
    },
    {
        "content": "<blockquote>\n<p>the Ruby runtime checks the value of env var RUBY_PLATFORM, so it makes sense that the crash is happening early</p>\n</blockquote>\n<p>sorry I worded this strangely; I meant that the crash seemed to be happening early (before trying to run the script specified in the arguments) and the RUBY_PLATFORM check also happens early, so it tracks to me that the error would originate from <code>environ_get</code></p>",
        "id": 374624495,
        "sender_full_name": "Dan",
        "timestamp": 1689169438
    },
    {
        "content": "<p>That looks like ruby itself might be calling exit from the stack trace. Is it possible to build ruby with debug info or symbols? Alternatively you can pass -p to print to get offsets to correlate</p>",
        "id": 374631531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689170698
    },
    {
        "content": "<p>The &lt;unknown&gt; module in the backtrace is likely ruby and everything else looks like adapter or wit component stuff</p>",
        "id": 374631985,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689170778
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I've just tried compiling ruby with <code>-O0 -fno-fast-math -ggdb3</code> however I now get a cranelift panic when loading the module:<br>\n<code>thread '&lt;unnamed&gt;' panicked at 'assertion failed: x &lt; (1 &lt;&lt; bits)', /home/xlem/.cargo/git/checkouts/wasmtime-41807828cb3a7a7e/a330867/cranelift/codegen/src/ir/dfg.rs:551:9</code></p>\n<p>I will try matching up the offsets with <code>wasm-print -p</code> on the release build shortly and report back!</p>",
        "id": 374676971,
        "sender_full_name": "Dan",
        "timestamp": 1689178817
    },
    {
        "content": "<p>oh dear! If you can share that module that'd be much appreicated to reproduce the cranelift issue</p>",
        "id": 374677782,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689178997
    },
    {
        "content": "<p>Sure no problem! The module I'm testing has another WIT component embedded which is specific to my project; would it be easier to debug with a \"vanilla\" build (i.e. just debug mode ruby encoded with the preview1 adapter)?</p>",
        "id": 374679251,
        "sender_full_name": "Dan",
        "timestamp": 1689179301
    },
    {
        "content": "<p>if you've got some binary blob that panics cranelift that's good enough to send over and we can dig in from there</p>",
        "id": 374679701,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689179390
    },
    {
        "content": "<p>ok great; blob attached (compressed as tar.gz). thanks for looking into this!</p>\n<p><a href=\"/user_uploads/15107/8xyql9Ym3We7fcO4dZB5DRwa/rubyfn.wasm.tar.gz\">rubyfn.wasm.tar.gz</a></p>",
        "id": 374682957,
        "sender_full_name": "Dan",
        "timestamp": 1689180099
    },
    {
        "content": "<p>ok I'll try and minimize the panic, but for the runtime issue there's unfortunately no easy way to reproduce outside of an embedding right now due to no CLI support for components, so if you're able to keep pushing on that it'd be appreciated</p>",
        "id": 374684268,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689180398
    },
    {
        "content": "<p>for sure! I'll be working on this some more later this afternoon, I'll let you know where I end up with it</p>",
        "id": 374685938,
        "sender_full_name": "Dan",
        "timestamp": 1689180755
    },
    {
        "content": "<p>First look at this is that there's probably a giant function in <code>rubyfn.wasm</code> which should give a better error, but it's blowing a limit in cranelift which leads to a panic as opposed to a first-class error</p>",
        "id": 374686463,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689180862
    },
    {
        "content": "<p>oof there are some big functions in here, taking upwards of 10s to compile</p>",
        "id": 374686778,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689180942
    },
    {
        "content": "<p>ok looks like this is definitely a case of \"that function is too big\". If you pass <code>--opt-level 0</code> to <code>wasmtime compile</code> the panic goes away, but cranelift fails with <code>Error: Compilation error: Code for function is too large</code> when it runs out of virtual registers during register allocation for one of the functions. My guess is that <code>-ggdb3</code> deoptimized a bit too much and the function is just way too big. </p>\n<p>You could try passing <code>-O1</code> to the C compiler to get at least symbols, or perhaps <code>-gline-tables-only</code> (I forget what that option is actually called, <code>-g1</code>?) to generate less debuginfo which may deoptimize less</p>",
        "id": 374691980,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689182198
    },
    {
        "content": "<p>hmm so passing <code>-O1</code> and <code>-g1</code> compiles, but doesn't provide any extra info in the stack trace of the crash. I'll keep playing with it</p>",
        "id": 374708569,
        "sender_full_name": "Dan",
        "timestamp": 1689186450
    },
    {
        "content": "<p>I think I remember there's a common issue of the names section getting stripped out by the toolchain. Maybe it was that clang invokes wasm-opt by default if that's installed?</p>",
        "id": 374736512,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1689193159
    },
    {
        "content": "<p>A-ha! yes you're right. After passing <code>-O1 -g</code> to wasm-opt I get useful debugging symbols (the Ruby build uses a dummy wasm-opt at first, then calls wasm-opt itself with specified args).</p>\n<p>This revealed that it is indeed Ruby itself calling proc_exit. I was thinking it was weird that no errors were logged prior to the exit, and in a case of \"changing too many things at once\", I realized that this particular code path didn't attach <code>stderr</code> to the module ... enabling that I found that I'd built Ruby without a required built-in gem.</p>\n<p>Now it executes fine! Or at least without error. It never seems to run my script, but that is likely another application-level issue on my part so I'll mark this as resolved.</p>\n<p>tyvm <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> and <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> !!</p>",
        "id": 374896196,
        "sender_full_name": "Dan",
        "timestamp": 1689247841
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"629653\">Dan</span> has marked this topic as resolved.</p>",
        "id": 374908292,
        "sender_full_name": "Notification Bot",
        "timestamp": 1689250255
    }
]