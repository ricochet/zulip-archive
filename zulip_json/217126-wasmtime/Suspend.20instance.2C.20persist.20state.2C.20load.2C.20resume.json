[
    {
        "content": "<p>Hello, I would like to be able to suspend wasm machine execution, scrape whole execution state, and persist it to be able to resume execution even after application restart. Users write their code as wasm binaries and launch them on a server. Wasm provides the sandbox, application provides specific API. But nuance here is that all the launched binaries can be very long playing and must be persistable to survive server restarts and to be independently paused/unloaded by server at any moment of time.</p>\n<p>Persisting memory instances should be quite straighforward: they're simply chunks of continuous bytes. But I'm in doubt if it's possible to access/reconstuct the stack. And if it's possible to pause in any place, even in the middle of wasm code (and call/jmp it again to the same place).</p>\n<p>Most likely all of that is not possible with current API. What amount of effort is required to implement this? (I'm not asking to do this, or even to merge such features into upstream, I just need to know how deep is the rabbit hole).</p>",
        "id": 205217251,
        "sender_full_name": "neumond",
        "timestamp": 1595930288
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325721\">@neumond</span> indeed yeah the call stack is the hard part, and this is something that wasmtime doesn't currently support</p>",
        "id": 205268636,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595958876
    },
    {
        "content": "<p>afaik the \"best\" way known to implement this is to run wasm on a different call stack so you can serialize that out as well</p>",
        "id": 205268674,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595958901
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"325721\">@neumond</span> Lucet has similar requirements. You might talk to <span class=\"user-mention\" data-user-id=\"301283\">@Aaron Turon</span>.</p>",
        "id": 206354657,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596904436
    }
]