[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"390627\">@Yehuda Katz</span> is your use case primarily the wasm blob calling host functions or the host calling wasm functions?</p>",
        "id": 226861434,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674681
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226861434\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"390627\">Yehuda Katz</span> is your use case primarily the wasm blob calling host functions or the host calling wasm functions?</p>\n</blockquote>\n<p>ohai</p>",
        "id": 226861908,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674846
    },
    {
        "content": "<p>I think both directions will end up being important</p>",
        "id": 226861950,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674863
    },
    {
        "content": "<p>mk makes sense, so our general story here is that today it's not amazing</p>",
        "id": 226862007,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674882
    },
    {
        "content": "<p>I think if there's one piece of \"low-hanging fruit\" I'd say it's making an ergonomic way to pass Strings and Vec&lt;u8&gt;</p>",
        "id": 226862013,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674884
    },
    {
        "content": "<p>wasm-bindgen only works on the web (aka not wasmtime)</p>",
        "id": 226862045,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674897
    },
    {
        "content": "<p>and otherwise there is no equivalent of wasm-bindgen <em>today</em> for host-side wasm</p>",
        "id": 226862065,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674907
    },
    {
        "content": "<p>I was able to jury-rig something up, but it's very hard to convince myself about the safety properties, even if I put more work into it</p>",
        "id": 226862074,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674910
    },
    {
        "content": "<p>stuff like \"make sure you grow\" etc. etc. is rough</p>",
        "id": 226862088,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674917
    },
    {
        "content": "<p>right</p>",
        "id": 226862091,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674919
    },
    {
        "content": "<p>I made a <code>WasmSlice</code> struct</p>",
        "id": 226862144,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674928
    },
    {
        "content": "<p>yeah so our general answer to this is interface types</p>",
        "id": 226862146,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674929
    },
    {
        "content": "<p>which is basically { ptr, len }</p>",
        "id": 226862163,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674938
    },
    {
        "content": "<p>which works well enough</p>",
        "id": 226862177,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674944
    },
    {
        "content": "<p>but the song and dance is rough to get right</p>",
        "id": 226862197,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674952
    },
    {
        "content": "<p>that's the longer-term vision for how host-wasm communication will be nicer (and it'll abstract all the details of memory growth, string allocations, your slice structures, etc)</p>",
        "id": 226862202,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674953
    },
    {
        "content": "<p>and yeah this is why we're pushing towards a longer-term vision b/c getting it all right today is not easy</p>",
        "id": 226862238,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226862146\">said</a>:</p>\n<blockquote>\n<p>yeah so our general answer to this is interface types</p>\n</blockquote>\n<p>for my use-case it's really important that whatever I do can easily work both in wasmtime <em>and</em> on the web</p>",
        "id": 226862245,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674969
    },
    {
        "content": "<p>so I'm willing to do more work to wire it up if necessary</p>",
        "id": 226862265,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613674978
    },
    {
        "content": "<p>long-term that'll all be in place yeah</p>",
        "id": 226862308,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613674991
    },
    {
        "content": "<p>interface types was actually originally created for web host apis</p>",
        "id": 226862343,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675003
    },
    {
        "content": "<p>what are the challenges with higher-level APIs for moving blobs of bytes around?</p>",
        "id": 226862360,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675016
    },
    {
        "content": "<p>yeah I know</p>",
        "id": 226862366,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675019
    },
    {
        "content": "<p>I'm a little weirded out by the fact that they're conceptually coupled to wasm-gc, fwiw</p>",
        "id": 226862389,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675031
    },
    {
        "content": "<p>oh it's mostly just standardization</p>",
        "id": 226862403,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675039
    },
    {
        "content": "<p>Rust teaches us that interface types and GC have nothing to do with each other :P</p>",
        "id": 226862415,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675043
    },
    {
        "content": "<p>like just finding the right way to express all this in wasm and standardize it</p>",
        "id": 226862460,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675048
    },
    {
        "content": "<p>it's not quite <em>just</em> standardization</p>",
        "id": 226862470,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675051
    },
    {
        "content": "<p>but yeah I get it :)</p>",
        "id": 226862521,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675069
    },
    {
        "content": "<p>I noticed all of this because I was working on the interaction between the JS typed objects proposal and wasm</p>",
        "id": 226862556,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675087
    },
    {
        "content": "<p>and it really was \"integration with wasm-gc\" which seemed weird to me as a Rust person</p>",
        "id": 226862580,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675097
    },
    {
        "content": "<p>the problem with interface types right now it's that it's a very long-term vision and we've not made a ton of progress in making it a closer reality</p>",
        "id": 226862603,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675107
    },
    {
        "content": "<p>yep</p>",
        "id": 226862635,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675121
    },
    {
        "content": "<p>that's something we're starting to make progress on, however</p>",
        "id": 226862668,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675130
    },
    {
        "content": "<p>fitzgen/I are working on the next step towards interface types and such</p>",
        "id": 226862699,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675145
    },
    {
        "content": "<p>and I just recently finished one half of it</p>",
        "id": 226862721,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675153
    },
    {
        "content": "<p>personally, I wish interface types were just separated into their own proposal, but that's so far above my pay grade :)</p>",
        "id": 226862725,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675155
    },
    {
        "content": "<p>excellent</p>",
        "id": 226862736,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675159
    },
    {
        "content": "<p>what would you say is the correct pattern for moving around Vec&lt;u8&gt; today?</p>",
        "id": 226862795,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675171
    },
    {
        "content": "<p>it's also worth pointing out that interface types is somewhat  nebulous</p>",
        "id": 226862808,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675174
    },
    {
        "content": "<p>the long-term vision is aligned with everyone I think</p>",
        "id": 226862846,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675188
    },
    {
        "content": "<p>this is what I was trying to do: <a href=\"https://github.com/wycats/wand/blob/main/crates/wand-cli/src/slice.rs\">https://github.com/wycats/wand/blob/main/crates/wand-cli/src/slice.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wycats/wand/blob/main/crates/wand-cli/src/slice.rs\" style=\"background-image: url(https://avatars.githubusercontent.com/u/4?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wycats/wand/blob/main/crates/wand-cli/src/slice.rs\" title=\"wycats/wand\">wycats/wand</a></div><div class=\"message_embed_description\">Contribute to wycats/wand development by creating an account on GitHub.</div></div></div>",
        "id": 226862884,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675200
    },
    {
        "content": "<p>but there's a lot of various mid-states that are very worthwhile and useful before we get to the long-term part</p>",
        "id": 226862885,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675200
    },
    {
        "content": "<p>so for example a great \"mvp\" of interface types probably doesn't need wasm-gc</p>",
        "id": 226862919,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675212
    },
    {
        "content": "<p>(e.g. what fitzgen/I are working on)</p>",
        "id": 226862931,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675218
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226862846\">said</a>:</p>\n<blockquote>\n<p>the long-term vision is aligned with everyone I think</p>\n</blockquote>\n<p>as an aside, I think wasm has been most effective when the scope has been:</p>\n<ol>\n<li>fairly well-specified and understood by everyone</li>\n<li>very well-motivated by web use-cases</li>\n</ol>\n<p>but that's my personal opinion :)</p>",
        "id": 226863002,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675250
    },
    {
        "content": "<p>agreed yeah</p>",
        "id": 226863055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226862919\">said</a>:</p>\n<blockquote>\n<p>so for example a great \"mvp\" of interface types probably doesn't need wasm-gc</p>\n</blockquote>\n<p>it seems like, at minimum, the equivalent of Rust <code>Copy</code> types should be doable as an MVP</p>",
        "id": 226863068,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675280
    },
    {
        "content": "<p>right yeah</p>",
        "id": 226863126,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675291
    },
    {
        "content": "<p>when I bring up <code>Copy</code> to non-Rust people, it's just not a category they know how to wrap their heads around</p>",
        "id": 226863157,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675305
    },
    {
        "content": "<p>for getting something done today what you've got there is a good start, the missing pieces would be safety/error handling as well as dealing with malloc/free</p>",
        "id": 226863179,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675316
    },
    {
        "content": "<p>yeah</p>",
        "id": 226863186,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675320
    },
    {
        "content": "<p>e.g. if you want to pass a string to wasm you need to malloc space for it</p>",
        "id": 226863205,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675326
    },
    {
        "content": "<p>basically I don't know how to think about safety</p>",
        "id": 226863215,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675330
    },
    {
        "content": "<p>or if wasm returns a string you may need to free it</p>",
        "id": 226863220,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675333
    },
    {
        "content": "<p>but so you said you've heard of wiggle?</p>",
        "id": 226863246,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675345
    },
    {
        "content": "<p><a href=\"https://github.com/wycats/wand/blob/main/crates/wand-cli/src/main.rs#L31\">https://github.com/wycats/wand/blob/main/crates/wand-cli/src/main.rs#L31</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wycats/wand/blob/main/crates/wand-cli/src/main.rs#L31\" style=\"background-image: url(https://avatars.githubusercontent.com/u/4?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wycats/wand/blob/main/crates/wand-cli/src/main.rs#L31\" title=\"wycats/wand\">wycats/wand</a></div><div class=\"message_embed_description\">Contribute to wycats/wand development by creating an account on GitHub.</div></div></div>",
        "id": 226863258,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675349
    },
    {
        "content": "<p>this is the other half of it</p>",
        "id": 226863264,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675354
    },
    {
        "content": "<p>I've heard of wiggle but haven't looked into it much</p>",
        "id": 226863280,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675361
    },
    {
        "content": "<p>ah right yeah</p>",
        "id": 226863286,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675362
    },
    {
        "content": "<p>lemme get some links for you</p>",
        "id": 226863296,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675369
    },
    {
        "content": "<p>that link is where I'm confident I'm messing up :P</p>",
        "id": 226863317,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> the good news about Rust is that most things have rustdoc. The bad news is that many things <em>only</em> have Rustdoc :P</p>",
        "id": 226863368,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675399
    },
    {
        "content": "<p>it's true :(</p>",
        "id": 226863464,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675424
    },
    {
        "content": "<p>we could alway benefit from more examples</p>",
        "id": 226863470,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675429
    },
    {
        "content": "<p>it's ok ;)</p>",
        "id": 226863482,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675434
    },
    {
        "content": "<p>so the purpose of wiggle is to make integration with <code>*.witx</code> files easier</p>",
        "id": 226863504,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675447
    },
    {
        "content": "<p>I'm always happy to help with docs on things I'm working on</p>",
        "id": 226863505,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675447
    },
    {
        "content": "<p>and write decently fast</p>",
        "id": 226863514,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675450
    },
    {
        "content": "<p>but I need to understand first</p>",
        "id": 226863520,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675454
    },
    {
        "content": "<p>so for example WASI is specified with <code>*.witx</code></p>",
        "id": 226863521,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675454
    },
    {
        "content": "<p>e.g. -- <a href=\"https://github.com/WebAssembly/WASI/blob/ef8c1a53feb2dfb763d4ea5c7d9e0a0126b45579/phases/snapshot/witx/wasi_snapshot_preview1.witx#L282-L289\">https://github.com/WebAssembly/WASI/blob/ef8c1a53feb2dfb763d4ea5c7d9e0a0126b45579/phases/snapshot/witx/wasi_snapshot_preview1.witx#L282-L289</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/blob/ef8c1a53feb2dfb763d4ea5c7d9e0a0126b45579/phases/snapshot/witx/wasi_snapshot_preview1.witx#L282-L289\" style=\"background-image: url(https://avatars.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/blob/ef8c1a53feb2dfb763d4ea5c7d9e0a0126b45579/phases/snapshot/witx/wasi_snapshot_preview1.witx#L282-L289\" title=\"WebAssembly/WASI\">WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div>",
        "id": 226863533,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675459
    },
    {
        "content": "<p>which is a high-level description of an API</p>",
        "id": 226863549,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675467
    },
    {
        "content": "<p>as you can see takes a string and returns a <code>Result</code></p>",
        "id": 226863568,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675475
    },
    {
        "content": "<p>what <code>wiggle</code> does is it allows you to hook that up automatically to a host implementation -- <a href=\"https://github.com/bytecodealliance/wasmtime/blob/aed6de32d4e5603a7f85619d84099a9a05cb7a7c/crates/wasi-common/src/snapshots/preview_1.rs#L687-L696\">https://github.com/bytecodealliance/wasmtime/blob/aed6de32d4e5603a7f85619d84099a9a05cb7a7c/crates/wasi-common/src/snapshots/preview_1.rs#L687-L696</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/aed6de32d4e5603a7f85619d84099a9a05cb7a7c/crates/wasi-common/src/snapshots/preview_1.rs#L687-L696\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/aed6de32d4e5603a7f85619d84099a9a05cb7a7c/crates/wasi-common/src/snapshots/preview_1.rs#L687-L696\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 226863628,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675498
    },
    {
        "content": "<p>which as you can see is all safe</p>",
        "id": 226863655,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675508
    },
    {
        "content": "<p>wiggle does all the \"ABI goop\" of bounds checks, errors, etc</p>",
        "id": 226863689,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675520
    },
    {
        "content": "<p>so you only write in 100% safe rust</p>",
        "id": 226863731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675527
    },
    {
        "content": "<p>this is the theory behind <code>wiggle</code></p>",
        "id": 226863751,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675537
    },
    {
        "content": "<p>it's still kind of boiler-plate-y to get all this hooked up</p>",
        "id": 226863773,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675551
    },
    {
        "content": "<p>and is something we're continuing to improve</p>",
        "id": 226863794,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675558
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I think one of the things I would benefit from the most is just a sense of what things are stable</p>",
        "id": 226863823,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675570
    },
    {
        "content": "<p>but that's the general idea of where our end-state will be</p>",
        "id": 226863837,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> oh, another random topic</p>",
        "id": 226863875,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675587
    },
    {
        "content": "<p>not that random :P</p>",
        "id": 226863888,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675591
    },
    {
        "content": "<p>I was wondering if folks are thinking that wasi should integrate with stuff like the JS FileSystem API</p>",
        "id": 226863954,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675614
    },
    {
        "content": "<p>I asked Aaron about it and he didn't know</p>",
        "id": 226863969,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675622
    },
    {
        "content": "<p>but I was a little surprised it didn't do that</p>",
        "id": 226863980,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675628
    },
    {
        "content": "<p>(and also, how wasi would handle the need to get permissions in the first place)</p>",
        "id": 226864060,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675646
    },
    {
        "content": "<p>wasi currently focuses mainly on non-web applications of wasm</p>",
        "id": 226864066,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675652
    },
    {
        "content": "<p>it's always been expected, however, that a web port is possible</p>",
        "id": 226864089,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675661
    },
    {
        "content": "<p>but there's not currently an official \"here's the wasi api for the web\" implementation</p>",
        "id": 226864108,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675675
    },
    {
        "content": "<p>and afaik posix has more of an effect on the design than the web</p>",
        "id": 226864131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675684
    },
    {
        "content": "<p>(I'm totally unfamiliar with the filesystem api myself)</p>",
        "id": 226864163,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226864066\">said</a>:</p>\n<blockquote>\n<p>wasi currently focuses mainly on non-web applications of wasm</p>\n</blockquote>\n<p>see my earlier thought about wasm scope</p>",
        "id": 226864430,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675793
    },
    {
        "content": "<p>;)</p>",
        "id": 226864432,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675794
    },
    {
        "content": "<p><a href=\"https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.FileSystem.html\">https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.FileSystem.html</a></p>",
        "id": 226864435,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613675796
    },
    {
        "content": "<p>in any case today everything about this, especially crossing js/host embeddings, is going to be pretty manual</p>",
        "id": 226864599,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675872
    },
    {
        "content": "<p>e.g. you're going to be writing very similar glue code in both Rust and in JS</p>",
        "id": 226864625,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675883
    },
    {
        "content": "<p>that's what's currently available, and in the future we hope to provide tools to make this much easier, basically auto-generating both the JS and the Rust code based on the desired interface of the module</p>",
        "id": 226864701,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675914
    },
    {
        "content": "<p>like you export a function that takes/returns a string and we'd auto-generate the JS glue and the Rust glue for doing that</p>",
        "id": 226864745,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675938
    },
    {
        "content": "<p>no need to manage <code>WasmSlice</code> yourself</p>",
        "id": 226864767,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613675946
    },
    {
        "content": "<p>I don't mind writing a lot of the glue code myself</p>",
        "id": 226865259,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676158
    },
    {
        "content": "<p>I am expecting to need to manually write two hosts</p>",
        "id": 226865275,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676165
    },
    {
        "content": "<p>wasmtime and web</p>",
        "id": 226865290,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676169
    },
    {
        "content": "<p>but I don't want to be forced into assuming a JS client</p>",
        "id": 226865316,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676177
    },
    {
        "content": "<p>I'm literally using wasm-pack right now because it's the best way to run the steps</p>",
        "id": 226865351,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676190
    },
    {
        "content": "<p>and then I literally copy the .wasm</p>",
        "id": 226865366,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676198
    },
    {
        "content": "<p>another aspect which may also be possible is to have two wasm blobs, one using wasm-bindgen for the web and one using handwritten stuff for wasmtime</p>",
        "id": 226865541,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676264
    },
    {
        "content": "<p>that would at least relinquish you from having to write js glue code</p>",
        "id": 226865569,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676278
    },
    {
        "content": "<p>but they can't have a single set of externs</p>",
        "id": 226865619,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676296
    },
    {
        "content": "<p>what's slightly frustrating is that there's not a good story for \"how to interact manually with the .wasm file created by wasm-bindgen\"</p>",
        "id": 226865669,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676318
    },
    {
        "content": "<p>it kind of feels like there should be a Rust API for calling a wasm_bindgen function that takes a String that doesn't have much to do with JS</p>",
        "id": 226865719,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676338
    },
    {
        "content": "<p>true, the wasm-bindgen ABI is unstable and not really documented</p>",
        "id": 226865720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676339
    },
    {
        "content": "<p>is that intentional, or just path dependence?</p>",
        "id": 226865737,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676349
    },
    {
        "content": "<p>I would be happy to help :)</p>",
        "id": 226865748,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676353
    },
    {
        "content": "<p>that's totally possible, but it breaks down very quickly</p>",
        "id": 226865751,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676354
    },
    {
        "content": "<p>there's just way too much in wasm-bindgen that assumes JS</p>",
        "id": 226865763,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676360
    },
    {
        "content": "<p>presumably there's some need for a somewhat stable answer in order for the JS side to work?</p>",
        "id": 226865830,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676371
    },
    {
        "content": "<p>right</p>",
        "id": 226865840,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676374
    },
    {
        "content": "<p>once you start only talking about structs and strings what you're actually talking about is interface types</p>",
        "id": 226865856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676381
    },
    {
        "content": "<p>would it be possible to break out wasm_bindgen_core and wasm_bindgen_js?</p>",
        "id": 226865883,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676394
    },
    {
        "content": "<p>I've toyed with the idea of this in the past</p>",
        "id": 226865898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676404
    },
    {
        "content": "<p>the tl;dr; is basically \"no\"</p>",
        "id": 226865909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676409
    },
    {
        "content": "<p>or rather, it's possible, but you're just doing interface types</p>",
        "id": 226865932,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676418
    },
    {
        "content": "<p>I plan to, one day, rebuild wasm-bindgen on interface types</p>",
        "id": 226865996,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676443
    },
    {
        "content": "<p>but interface types needs to make more progress in the meantime naturally</p>",
        "id": 226866022,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676456
    },
    {
        "content": "<p>why wouldn't the rough interning strategy for JS work more generally?</p>",
        "id": 226866700,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676695
    },
    {
        "content": "<p>half the battle of wasm_bindgen is inside of Rust, right?</p>",
        "id": 226866763,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676719
    },
    {
        "content": "<p>why isn't that stuff fully applicable to non-JS clients?</p>",
        "id": 226866818,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676726
    },
    {
        "content": "<p>oh it is</p>",
        "id": 226866863,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676746
    },
    {
        "content": "<p>if you touch just the right set of things you could write a native side of wasm-bindgen</p>",
        "id": 226866878,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676758
    },
    {
        "content": "<p>like you could just translate the JS glue code to Rust</p>",
        "id": 226866892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676768
    },
    {
        "content": "<p>there's no fundamental reason that can't be done</p>",
        "id": 226866909,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676776
    },
    {
        "content": "<p>there's practical reasons for why I haven't done that though</p>",
        "id": 226866938,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676786
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 226867028,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676824
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226865541\">said</a>:</p>\n<blockquote>\n<p>another aspect which may also be possible is to have two wasm blobs, one using wasm-bindgen for the web and one using handwritten stuff for wasmtime</p>\n</blockquote>\n<p>I'm trying to work out what exactly it would mean to do this</p>",
        "id": 226867101,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676846
    },
    {
        "content": "<p>I could create two totally different sets of extern functions</p>",
        "id": 226867116,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676855
    },
    {
        "content": "<p>but it feels like it'll just be the same thing twice with slightly different low-level protocols</p>",
        "id": 226867134,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676867
    },
    {
        "content": "<p>yeah that's' what i'm imagining</p>",
        "id": 226867136,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676867
    },
    {
        "content": "<p>basically</p>",
        "id": 226867154,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676876
    },
    {
        "content": "<p>ok, next question</p>",
        "id": 226867159,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676877
    },
    {
        "content": "<p>how do I learn wiggle?</p>",
        "id": 226867166,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676880
    },
    {
        "content": "<p>all the \"meat\" would be a shared rust dep</p>",
        "id": 226867173,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676881
    },
    {
        "content": "<p>wiggle is only intended for wasm-to-host communication at this time</p>",
        "id": 226867197,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676891
    },
    {
        "content": "<p>hm</p>",
        "id": 226867221,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676901
    },
    {
        "content": "<p>so while it's the right shape of what you want I don't think it's entirely waht you want</p>",
        "id": 226867227,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676902
    },
    {
        "content": "<p>b/c you also want \"enriched\" host-to-wasm communication</p>",
        "id": 226867247,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613676911
    },
    {
        "content": "<p>I'm basically used to the JS story of just transferring very basic bytes</p>",
        "id": 226867255,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676914
    },
    {
        "content": "<p>and I don't mind having to do that</p>",
        "id": 226867262,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676917
    },
    {
        "content": "<p>but even that felt like a song and dance</p>",
        "id": 226867277,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676923
    },
    {
        "content": "<p>I could build WasmString on top of WasmSlice very easily, obviously</p>",
        "id": 226867304,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676935
    },
    {
        "content": "<p>I guess what I'm saying is I want WasmSlice in wasmtime :P</p>",
        "id": 226867333,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676949
    },
    {
        "content": "<p>in addition to <code>Memory</code></p>",
        "id": 226867344,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676952
    },
    {
        "content": "<p>at the limit, I can just transmute the hell out of things</p>",
        "id": 226867387,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613676964
    },
    {
        "content": "<p>The new <code>Memory::read</code> API is close I think to what you might want</p>",
        "id": 226867495,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677013
    },
    {
        "content": "<p>perhaps coupled with another <code>Memory::read_vec</code>, <code>Memory::read_string</code>, and <code>Memory::read_str</code></p>",
        "id": 226867527,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677027
    },
    {
        "content": "<p>right</p>",
        "id": 226867559,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677043
    },
    {
        "content": "<p>which would require a tiny ABI</p>",
        "id": 226867566,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677048
    },
    {
        "content": "<p>basically len/ptr</p>",
        "id": 226867578,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677054
    },
    {
        "content": "<p>it also kinda sucks that Rust can't do multi-value easily</p>",
        "id": 226867610,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677071
    },
    {
        "content": "<p>like you want to write a wasm function that retuns two i32</p>",
        "id": 226867627,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677080
    },
    {
        "content": "<p>instead of a packed i64</p>",
        "id": 226867675,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677085
    },
    {
        "content": "<p>but Rust won't let you do that</p>",
        "id": 226867691,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677094
    },
    {
        "content": "<p>can't you just use a tuple?</p>",
        "id": 226867702,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677100
    },
    {
        "content": "<p>I guess I don't know the wasm abi for multi-value</p>",
        "id": 226867713,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677108
    },
    {
        "content": "<p>I guess you can just do <code>read()</code> and carefully make sure to make a Vec with the right capacity?</p>",
        "id": 226867729,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677117
    },
    {
        "content": "<p>it seems like read() is a bit of a rube goldberg machine for reading a certain amount of bytes</p>",
        "id": 226867806,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677157
    },
    {
        "content": "<p>first make a Vec with the right capacity</p>",
        "id": 226867821,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677163
    },
    {
        "content": "<p>well</p>",
        "id": 226867825,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677165
    },
    {
        "content": "<p>first read a u32</p>",
        "id": 226867837,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677171
    },
    {
        "content": "<p>then make a Vec::with_capacity(that size)</p>",
        "id": 226867862,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677183
    },
    {
        "content": "<p>then advance the ptr</p>",
        "id": 226867869,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677185
    },
    {
        "content": "<p>(by 4)</p>",
        "id": 226867882,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677188
    },
    {
        "content": "<p>then read()</p>",
        "id": 226867889,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677191
    },
    {
        "content": "<p>yeah that's what I mean with <code>read_vec</code> in addition to the <code>read</code> that we have today</p>",
        "id": 226867890,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677192
    },
    {
        "content": "<p>yeah</p>",
        "id": 226867907,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677199
    },
    {
        "content": "<p>like you should be able to do <code>memory.read(ptr..ptr+len)</code></p>",
        "id": 226867926,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677202
    },
    {
        "content": "<p>yeah</p>",
        "id": 226867964,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677207
    },
    {
        "content": "<p>and it allocates the <code>Vec</code> for you and all that</p>",
        "id": 226867982,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677216
    },
    {
        "content": "<p>it does?</p>",
        "id": 226867989,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677222
    },
    {
        "content": "<p>no I mean we should have an API that does that</p>",
        "id": 226868007,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677230
    },
    {
        "content": "<p>oh you're saying read_vec</p>",
        "id": 226868008,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677230
    },
    {
        "content": "<p>yeah</p>",
        "id": 226868013,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677234
    },
    {
        "content": "<p>oh sorry yeah</p>",
        "id": 226868014,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677234
    },
    {
        "content": "<p>like I said it would require an ABI</p>",
        "id": 226868018,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677238
    },
    {
        "content": "<p>which is a bit \"new\" to this API</p>",
        "id": 226868046,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677247
    },
    {
        "content": "<p>how does wasm_bindgen do it?</p>",
        "id": 226868062,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677257
    },
    {
        "content": "<p>hm you may need to be more precise</p>",
        "id": 226868133,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677289
    },
    {
        "content": "<p>do you mean like how does wasm-bindgen return a string from wasm to JS?</p>",
        "id": 226868144,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677297
    },
    {
        "content": "<p>yeah</p>",
        "id": 226868268,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677347
    },
    {
        "content": "<p>what's the protocol?</p>",
        "id": 226868287,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677357
    },
    {
        "content": "<p>I've seen people try to reverse engineer the ABI in various threads</p>",
        "id": 226868326,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677373
    },
    {
        "content": "<p>but it seemed crazy :P</p>",
        "id": 226868337,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677376
    },
    {
        "content": "<p>it's funky -- first 8 bytes of the shadow stack is reserved, and that return pointer is passed as the first parameter</p>",
        "id": 226868343,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677379
    },
    {
        "content": "<p>then when the call finishes the 8 bytes are interpreted as ptr/len</p>",
        "id": 226868360,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677388
    },
    {
        "content": "<p>the ptr/len are then copied out and decoded as utf-8</p>",
        "id": 226868373,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677394
    },
    {
        "content": "<p>then the ptr/len are freed</p>",
        "id": 226868376,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226868343\">said</a>:</p>\n<blockquote>\n<p>it's funky -- first 8 bytes of the shadow stack is reserved, and that return pointer is passed as the first parameter</p>\n</blockquote>\n<p>is it really that crazy to make an API for the low-level details like the shadow stack?</p>",
        "id": 226868393,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677408
    },
    {
        "content": "<p>it must already be encapsulated for maintenance reasons</p>",
        "id": 226868411,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677416
    },
    {
        "content": "<p>not sure what you mean by encapsulated</p>",
        "id": 226868471,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677440
    },
    {
        "content": "<p>but this is indeed something we could expose an API for</p>",
        "id": 226868534,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677447
    },
    {
        "content": "<p>it's in a shaky realm though b/c we're just guessing what global is actually the shadow stack pointer, if any</p>",
        "id": 226868584,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677463
    },
    {
        "content": "<p>I just mean it must not be a bunch of spaghetti code strewn around</p>",
        "id": 226868589,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677466
    },
    {
        "content": "<p>otherwise you'd keep breaking the codegen :P</p>",
        "id": 226868603,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677471
    },
    {
        "content": "<p>most wasm modules don't even export the shadow stack pointer</p>",
        "id": 226868606,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677471
    },
    {
        "content": "<p>you mean like in wasm-bindgen?</p>",
        "id": 226868644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677487
    },
    {
        "content": "<p>I think it's ok to say \"your client must do XXX YYY ZZZ and your wasm module must expose AAA BBB CCC\"</p>",
        "id": 226868666,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677496
    },
    {
        "content": "<p>right</p>",
        "id": 226868667,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677498
    },
    {
        "content": "<p>I literally used wasm-bindgen + wasm-objdump and it's not THAT crazy</p>",
        "id": 226868688,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677509
    },
    {
        "content": "<p>but eventually I was like \"this is too hard\" and implemented WasmSlice</p>",
        "id": 226868716,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677519
    },
    {
        "content": "<p>wasm-bindgen is a bit more powerful  here in that it has complete control over the .wasm output iteslf</p>",
        "id": 226868723,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677523
    },
    {
        "content": "<p>e.g. wasm-bindgen injects functions to manipulate the stack pointer</p>",
        "id": 226868752,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677537
    },
    {
        "content": "<p>b/c they're not natively present in the wasm file</p>",
        "id": 226868775,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677549
    },
    {
        "content": "<p>but those functions are totally decoupled from the details of a <em>JS</em> client, right?</p>",
        "id": 226868777,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677550
    },
    {
        "content": "<p>wasm-bindgen also just makes blind guesses as to what global is the stack pointer</p>",
        "id": 226868790,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677558
    },
    {
        "content": "<p>lol</p>",
        "id": 226868817,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677563
    },
    {
        "content": "<p>I mean \"memory\" being the magical memory name is also a protocol ;)</p>",
        "id": 226868859,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677577
    },
    {
        "content": "<p>oh I see, yes, what you mean about taking the exact output of wasm-bindgen and feeding it into rust</p>",
        "id": 226868864,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677579
    },
    {
        "content": "<p>:)</p>",
        "id": 226868888,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677590
    },
    {
        "content": "<p>I was looking at the code myself, but at some point I don't work on the codebase and I hit some walls</p>",
        "id": 226868918,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677603
    },
    {
        "content": "<p>but at a conceptual level it seems like it ought to work</p>",
        "id": 226868932,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677610
    },
    {
        "content": "<p>I can see why interface types takes up the mental oxygen, though</p>",
        "id": 226868949,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677619
    },
    {
        "content": "<p>oh yeah there's nothing stopping you from doing that</p>",
        "id": 226868962,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677622
    },
    {
        "content": "<p>like it's very plausible to add a \"rust\" output to wasm-bindgen</p>",
        "id": 226868994,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677633
    },
    {
        "content": "<p>where instead of spitting out *.wasm + *.js it spits out *.wasm + *.rs</p>",
        "id": 226869019,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677644
    },
    {
        "content": "<p>I think the use-case of \"something that works with both a Rust client and a JS client\" is good enough motivation, right?</p>",
        "id": 226869024,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677645
    },
    {
        "content": "<p>right exactly</p>",
        "id": 226869035,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677649
    },
    {
        "content": "<p>bingo</p>",
        "id": 226869038,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677650
    },
    {
        "content": "<p>that's exactly what I mean</p>",
        "id": 226869042,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677653
    },
    {
        "content": "<p>but this is what I mentioned earlier where it breaks down fairly quickly</p>",
        "id": 226869084,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677671
    },
    {
        "content": "<p>the main downside is it occupies the same space as interface types</p>",
        "id": 226869103,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677679
    },
    {
        "content": "<p>and wasm-bindgen is entirely Rust-specific</p>",
        "id": 226869157,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677685
    },
    {
        "content": "<p>but interface types won't work on the web without wasm-gc</p>",
        "id": 226869212,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677708
    },
    {
        "content": "<p>it also breaks down quickly once the *.rs needs to do something js-specific</p>",
        "id": 226869215,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677708
    },
    {
        "content": "<p>like you have a Rust function taking <code>&amp;JsValue</code> as an argument</p>",
        "id": 226869236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677716
    },
    {
        "content": "<p>that's what I was thinking re: wasm_bindgen_core</p>",
        "id": 226869255,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677722
    },
    {
        "content": "<p>break out the non-JS parts of the protocol</p>",
        "id": 226869276,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677732
    },
    {
        "content": "<p>this is what I meant about multiple phases or interim-periods of interface types</p>",
        "id": 226869282,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677738
    },
    {
        "content": "<p>and you're limited to that if you want a truly portable .wasm</p>",
        "id": 226869286,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677740
    },
    {
        "content": "<p>yeah</p>",
        "id": 226869290,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677743
    },
    {
        "content": "<p>so like today the rust compiler spits out a <code>*.wasm</code> when you compile it and use wasm-bindgen</p>",
        "id": 226869318,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677755
    },
    {
        "content": "<p>that <code>*.wasm</code> has a whole bunch of weird wasm-bindgen-specific stuff</p>",
        "id": 226869331,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677763
    },
    {
        "content": "<p>imagine instead it spits out a <code>*.wasm</code> that's a <em>standard</em> wasm module using interface types</p>",
        "id": 226869353,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677774
    },
    {
        "content": "<p>you can then natively consume that <code>*.wasm</code> in wasmtime (since it's standard)</p>",
        "id": 226869385,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677789
    },
    {
        "content": "<p>yeah</p>",
        "id": 226869387,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677790
    },
    {
        "content": "<p>yeah</p>",
        "id": 226869393,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677793
    },
    {
        "content": "<p>and you can also run a tool to polyfill interface types for the web</p>",
        "id": 226869399,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677795
    },
    {
        "content": "<p>basically exactly what wasm-bindgen does today, except based on the standard</p>",
        "id": 226869418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226869385\">said</a>:</p>\n<blockquote>\n<p>you can then natively consume that <code>*.wasm</code> in wasmtime (since it's standard)</p>\n</blockquote>\n<p>as soon as wasmtime actually supports interface types</p>",
        "id": 226869460,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677806
    },
    {
        "content": "<p>you could imagine a polyfill even for wasmtime in the meantime</p>",
        "id": 226869490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677819
    },
    {
        "content": "<p>according to the issue tracker, the answer to that is ... some time in the future?</p>",
        "id": 226869496,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677820
    },
    {
        "content": "<p>yeah</p>",
        "id": 226869500,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677822
    },
    {
        "content": "<p>I don't know how to write it tho :P</p>",
        "id": 226869511,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677826
    },
    {
        "content": "<p>I like the idea of using interface types as a meta-language for this</p>",
        "id": 226869524,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677834
    },
    {
        "content": "<p>correct yeah, this is basically going to happen but takes a lot of planning</p>",
        "id": 226869543,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677840
    },
    {
        "content": "<p>that can then be turned into the glue layer without needing Rust-specific logic</p>",
        "id": 226869559,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677849
    },
    {
        "content": "<p>we're inching forward but there's a lot of moving pieces and we also have to prioritize with work stuff</p>",
        "id": 226869572,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677855
    },
    {
        "content": "<p>I think that's what Luke pitched to me 3 years ago :P</p>",
        "id": 226869579,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677858
    },
    {
        "content": "<p>I think for now, I don't mind going down the \"two extern functions path\"</p>",
        "id": 226869681,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677911
    },
    {
        "content": "<p>as long as I feel confident about the safety properties</p>",
        "id": 226869703,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677916
    },
    {
        "content": "<p><code>.read()</code> is good</p>",
        "id": 226869706,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677919
    },
    {
        "content": "<p>more APIs on <code>Memory</code> should be able to give you the safety guarantee</p>",
        "id": 226869796,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677939
    },
    {
        "content": "<p>I feel you on the 3 years part though</p>",
        "id": 226869822,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677950
    },
    {
        "content": "<p>this is the part where standards are... hard</p>",
        "id": 226869838,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677957
    },
    {
        "content": "<p>like wasm-bindgen was easy b/c we could do whatever we wanted</p>",
        "id": 226869868,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677968
    },
    {
        "content": "<p>yeah</p>",
        "id": 226869881,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613677971
    },
    {
        "content": "<p>but with interface types it's different b/c we're trying to design a system that lasts</p>",
        "id": 226869901,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613677980
    },
    {
        "content": "<p>I think it makes sense to think about the web as a locus of standards control, imo</p>",
        "id": 226870112,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678076
    },
    {
        "content": "<p>the web is the forcing function</p>",
        "id": 226870127,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678085
    },
    {
        "content": "<p>if the entire theory of an API is based on a place where people can theoretically compete with the standard, it makes everything take 10x longer</p>",
        "id": 226870237,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678144
    },
    {
        "content": "<p>if not more :P</p>",
        "id": 226870241,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678145
    },
    {
        "content": "<p>heh true</p>",
        "id": 226870344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678180
    },
    {
        "content": "<p>I don't have a very clear sense of how the people who are working on wasi think about wasi</p>",
        "id": 226870552,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678279
    },
    {
        "content": "<p>I know how to think of wasm of course</p>",
        "id": 226870605,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678285
    },
    {
        "content": "<p>ok, so it seems like my next steps ought to be:</p>",
        "id": 226870636,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678303
    },
    {
        "content": "<ul>\n<li>wrap memory.read() to make WasmSlice simpler</li>\n</ul>",
        "id": 226870654,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678313
    },
    {
        "content": "<ul>\n<li>propose read_vec and read_str (or reply to an issue if you open it first)</li>\n</ul>",
        "id": 226870706,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678334
    },
    {
        "content": "<ul>\n<li>discuss/learn the wasm_bindgen protocol, so next time I want to talk about future directions I know enough to be useful</li>\n</ul>",
        "id": 226870764,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678360
    },
    {
        "content": "<p>yeah that sounds good</p>",
        "id": 226870789,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678369
    },
    {
        "content": "<p>I'm making a PR for some more <code>read_*</code> methods soon</p>",
        "id": 226870806,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678377
    },
    {
        "content": "<p>I think I need to understand the song-and-dance with relation to freeing memory communicated through Memory</p>",
        "id": 226870953,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678428
    },
    {
        "content": "<p>I assume that to a first approximation, &amp; borrows give you what you need</p>",
        "id": 226871257,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678572
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"390627\">Yehuda Katz</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226871257\">said</a>:</p>\n<blockquote>\n<p>I assume that to a first approximation, &amp; borrows give you what you need</p>\n</blockquote>\n<p>trying to figure out what the right place to put the wrapper that could borrow out of <code>Memory</code></p>",
        "id": 226871493,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678660
    },
    {
        "content": "<p>in general for safety you'll want to avoid borrowing <code>Memory</code> \"for a long time\"</p>",
        "id": 226871526,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678677
    },
    {
        "content": "<p>right</p>",
        "id": 226871538,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678681
    },
    {
        "content": "<p>you'll typically want to copy out</p>",
        "id": 226871548,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678683
    },
    {
        "content": "<p>I already have a wrapper around Module</p>",
        "id": 226871561,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678688
    },
    {
        "content": "<p>I could put read_vec in there</p>",
        "id": 226871574,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678694
    },
    {
        "content": "<p>the real question is:</p>",
        "id": 226871644,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678721
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">memory</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">call1</span><span class=\"p\">(</span><span class=\"s\">\"allocate\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mem</span><span class=\"p\">.</span><span class=\"n\">data_ptr</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">slice</span><span class=\"p\">.</span><span class=\"n\">offset</span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">isize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">zero</span><span class=\"p\">.</span><span class=\"n\">copy_from</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">())</span><span class=\"w\"> </span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"c1\">// slice[ptr] = len;</span>\n<span class=\"w\">    </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">call2</span><span class=\"p\">(</span><span class=\"s\">\"hello\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226871653,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678726
    },
    {
        "content": "<p>is this song-and-dance actually legit?</p>",
        "id": 226871669,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678732
    },
    {
        "content": "<p>I would recommend using <code>memory.write(ptr as usize, &amp;source).unwrap()</code>, but yes</p>",
        "id": 226871801,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678782
    },
    {
        "content": "<p>I saw some comments about the stability of offsets, but I'm not actually casting anything into actual pointers</p>",
        "id": 226871919,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678839
    },
    {
        "content": "<p>but is it possible for <code>ptr</code> to move?</p>",
        "id": 226871968,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678861
    },
    {
        "content": "<p>also: should I be calling grow() somewhere?</p>",
        "id": 226871993,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678871
    },
    {
        "content": "<p>do I need to drop() something somewhere?</p>",
        "id": 226872011,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678879
    },
    {
        "content": "<p>so <code>ptr</code> cannot move because it is relative to the memory base</p>",
        "id": 226872128,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678908
    },
    {
        "content": "<p><code>slice</code> can move due to <code>memory.grow</code></p>",
        "id": 226872143,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678914
    },
    {
        "content": "<p>you do not need to <code>memory.grow</code> because <code>allocate</code> will do that internally if necessary</p>",
        "id": 226872182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678928
    },
    {
        "content": "<p>ah</p>",
        "id": 226872261,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678963
    },
    {
        "content": "<p>is the allocate song-and-dance roughly correct?</p>",
        "id": 226872278,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678974
    },
    {
        "content": "<p>TLDR make an allocate function in the WASM Rust</p>",
        "id": 226872300,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678984
    },
    {
        "content": "<p>yes</p>",
        "id": 226872306,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613678985
    },
    {
        "content": "<p>call it</p>",
        "id": 226872307,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678985
    },
    {
        "content": "<p>get a ptr</p>",
        "id": 226872308,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678987
    },
    {
        "content": "<p>is it correct to cast to u32?</p>",
        "id": 226872318,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613678991
    },
    {
        "content": "<p>yes</p>",
        "id": 226872344,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679002
    },
    {
        "content": "<p>I'm assuming wasm32, which seems like it should be fine</p>",
        "id": 226872365,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679004
    },
    {
        "content": "<p>phew</p>",
        "id": 226872387,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679005
    },
    {
        "content": "<p>well <code>allocate</code> will have an exact signature</p>",
        "id": 226872419,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679019
    },
    {
        "content": "<p>and it'll probably return an <code>i32</code></p>",
        "id": 226872430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679023
    },
    {
        "content": "<p>so if you say <code>i64</code> then your rust code will just fail at runtime saying the signatures mismatch</p>",
        "id": 226872456,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679034
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/more.20ergonomic.20host.2Fwasm.20communication/near/226872143\">said</a>:</p>\n<blockquote>\n<p><code>slice</code> can move due to <code>memory.grow</code></p>\n</blockquote>\n<p>so just make sure to use it \"now\"?</p>",
        "id": 226872488,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679047
    },
    {
        "content": "<p>i.e. make it ~ <code>&amp;</code>?</p>",
        "id": 226872500,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679053
    },
    {
        "content": "<p>yep</p>",
        "id": 226872501,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679053
    },
    {
        "content": "<p>ok</p>",
        "id": 226872515,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679059
    },
    {
        "content": "<p>this is why i'd recommend <code>memory.write</code></p>",
        "id": 226872520,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679062
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 226872528,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679067
    },
    {
        "content": "<p>b/c that's a safe API</p>",
        "id": 226872530,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679067
    },
    {
        "content": "<p>I was stuck on the 0.21 docs for a while</p>",
        "id": 226872543,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679073
    },
    {
        "content": "<p>also had no internet or power</p>",
        "id": 226872584,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679084
    },
    {
        "content": "<p>it was fun times :P</p>",
        "id": 226872586,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613679086
    },
    {
        "content": "<p>oh dear :(</p>",
        "id": 226872715,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613679137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I'm trying to make the changes you recommended, and I was wondering why the <code>Memory</code> APIs use <code>usize</code></p>",
        "id": 226885267,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684374
    },
    {
        "content": "<p>I didn't review them that closely</p>",
        "id": 226885368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684406
    },
    {
        "content": "<p>I guess it makes sense at a low-level, but you need to get the underlying pointers as <code>u32</code> because wasm32</p>",
        "id": 226885381,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684412
    },
    {
        "content": "<p>so then you end up with blind casts to usize</p>",
        "id": 226885390,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684418
    },
    {
        "content": "<p>We may want to take u64 even since there's memory64 one day too, but I think I agree that <code>usize</code> is wrong</p>",
        "id": 226885437,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684440
    },
    {
        "content": "<p>yeah I don't mind u64</p>",
        "id": 226885530,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684492
    },
    {
        "content": "<p>but it's not actually talking about the host's memory sizes :P</p>",
        "id": 226885547,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684500
    },
    {
        "content": "<p>we may want a type a la usize for the client's sizes</p>",
        "id": 226885574,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684510
    },
    {
        "content": "<p>csize :P</p>",
        "id": 226885595,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684519
    },
    {
        "content": "<p>I admit that I have given 0 thought to portability or evolution ;)</p>",
        "id": 226885674,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684537
    },
    {
        "content": "<p>the funny thing about the errors is that you get stern warnings like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">u32</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">usize</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">panic</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">converted</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">doesn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">fit</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"n\">E0308</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226885742,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684570
    },
    {
        "content": "<p>yeah I think rustc warnings are starting to go off the deep end...</p>",
        "id": 226885992,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684696
    },
    {
        "content": "<p>I literally never read them</p>",
        "id": 226886004,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684701
    },
    {
        "content": "<p>hm so one difference between .read() and what I was doing before is that <code>read</code> forces you to copy out of the memory</p>",
        "id": 226886121,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684763
    },
    {
        "content": "<p>maybe I want that anyway?</p>",
        "id": 226886176,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684777
    },
    {
        "content": "<p>I was doing this before:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">data_unchecked</span><span class=\"p\">()[(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"o\">..</span><span class=\"p\">][</span><span class=\"o\">..</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)]</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226886198,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684792
    },
    {
        "content": "<p>which lets me have this signature:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">as_buf</span><span class=\"o\">&lt;'</span><span class=\"na\">memory</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">memory</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">memory</span> <span class=\"nc\">Memory</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"na\">memory</span> <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226886214,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684805
    },
    {
        "content": "<p>obviously the unsafe is not very nice</p>",
        "id": 226886224,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684812
    },
    {
        "content": "<p>but it seems like as long as I have a <code>&amp;Memory</code>, I ought to be able to borrow out of it safely?</p>",
        "id": 226886259,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684828
    },
    {
        "content": "<p>yes and no, that's basically what this talks about -- <a href=\"https://docs.rs/wasmtime/0.23.0/wasmtime/struct.Memory.html#memory-and-safety\">https://docs.rs/wasmtime/0.23.0/wasmtime/struct.Memory.html#memory-and-safety</a></p>",
        "id": 226886316,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684855
    },
    {
        "content": "<p>I guess I don't really know what <code>unsafe</code> is vis a vis wasm memory</p>",
        "id": 226886466,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684918
    },
    {
        "content": "<p>use-after-free in Rust</p>",
        "id": 226886520,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684951
    },
    {
        "content": "<p>segfaults in Rust</p>",
        "id": 226886525,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684954
    },
    {
        "content": "<p>hm</p>",
        "id": 226886530,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684959
    },
    {
        "content": "<p>etc, etc</p>",
        "id": 226886531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684959
    },
    {
        "content": "<p>basically it's literal UB</p>",
        "id": 226886555,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684974
    },
    {
        "content": "<p>but shouldn't the RefCell be protecting us from that?</p>",
        "id": 226886556,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684974
    },
    {
        "content": "<p>I guess there's no way to actually lock the memory to prevent wasm code from writing to it</p>",
        "id": 226886563,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684983
    },
    {
        "content": "<p>no b/c this has to do with UB in the Rust type system</p>",
        "id": 226886570,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613684986
    },
    {
        "content": "<p>since it can be happily running in some other thread</p>",
        "id": 226886582,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613684991
    },
    {
        "content": "<p>I basically want to be able to have a GIL I think :P</p>",
        "id": 226886649,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685008
    },
    {
        "content": "<p>right so you're not looking at <code>&amp;[Cell&lt;u8&gt;]</code></p>",
        "id": 226886657,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685012
    },
    {
        "content": "<p>right</p>",
        "id": 226886666,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685018
    },
    {
        "content": "<p>you get <code>&amp;mut [u8]</code> which has a lot of Rust guarantees</p>",
        "id": 226886670,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685022
    },
    {
        "content": "<p>but also the pointer itself is not stable</p>",
        "id": 226886679,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685028
    },
    {
        "content": "<p>Both Neon and Helix ended up  introducing a GIL for this ~ reason</p>",
        "id": 226886689,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685031
    },
    {
        "content": "<p>every <code>memory.grow</code> can invalidate it</p>",
        "id": 226886692,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685032
    },
    {
        "content": "<p>the truth is that copying is not so bad</p>",
        "id": 226886714,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685046
    },
    {
        "content": "<p>indeed</p>",
        "id": 226886725,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685050
    },
    {
        "content": "<p>it's basically memcpy <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 226886727,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685052
    },
    {
        "content": "<p>all copies in an out of memory are safe</p>",
        "id": 226886735,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685055
    },
    {
        "content": "<p>(that's what interface types basically do)</p>",
        "id": 226886745,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685063
    },
    {
        "content": "<p>hehe MemoryAccessError</p>",
        "id": 226886848,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685122
    },
    {
        "content": "<p>we finally got our OOM results</p>",
        "id": 226886903,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685129
    },
    {
        "content": "<p>yeah most of <code>Memory</code> is for interacting with a \"possibly hostile\" wasm module</p>",
        "id": 226886984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685167
    },
    {
        "content": "<p>but in your use case the wasm module is trusted</p>",
        "id": 226886989,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685172
    },
    {
        "content": "<p>yeah</p>",
        "id": 226886999,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685174
    },
    {
        "content": "<p>for example it seems pointless to do UTF-8 checks</p>",
        "id": 226887019,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I ended up creating a WasmUnwrap trait that uses my own custom error function to panic</p>",
        "id": 226887420,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685361
    },
    {
        "content": "<p>is this crazy?</p>",
        "id": 226887464,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685364
    },
    {
        "content": "<p>basically I couldn't use the one everyone uses because I'm not JS</p>",
        "id": 226887494,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685378
    },
    {
        "content": "<p>uh... maybe?</p>",
        "id": 226887649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685457
    },
    {
        "content": "<p>not entirely sure the context in which this trait exists</p>",
        "id": 226887660,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685463
    },
    {
        "content": "<p>and fwiw I'd still do utf-8 checks and unwrap them</p>",
        "id": 226887675,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685471
    },
    {
        "content": "<p>we could change that crate to allow the user to customize the wasm function to call</p>",
        "id": 226887680,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685473
    },
    {
        "content": "<p>it's always better to get panics instead of UB on busg</p>",
        "id": 226887691,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685477
    },
    {
        "content": "<p>yeah sure</p>",
        "id": 226887698,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685480
    },
    {
        "content": "<p>:)</p>",
        "id": 226887702,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> it's for cases where I'd have written unwrap() or expect()</p>",
        "id": 226887778,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685499
    },
    {
        "content": "<p>in the wasm blob itself?</p>",
        "id": 226887791,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685506
    },
    {
        "content": "<p>yah</p>",
        "id": 226887813,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685518
    },
    {
        "content": "<p>ah I see, yeah that works</p>",
        "id": 226887830,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685529
    },
    {
        "content": "<p>it assumes:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">log_str</span><span class=\"p\">(</span><span class=\"n\">ptr</span>: <span class=\"kt\">u64</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 226887844,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685537
    },
    {
        "content": "<p>which is less coupled than the JS one</p>",
        "id": 226887857,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685546
    },
    {
        "content": "<p>this is an unfortunate thing where wasm32-wasi \"just works\" but wasm32-unknown-unknown doesn't</p>",
        "id": 226887863,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1613685549
    },
    {
        "content": "<p>bio break, then call</p>",
        "id": 226887867,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685551
    },
    {
        "content": "<p>right</p>",
        "id": 226887871,
        "sender_full_name": "Yehuda Katz",
        "timestamp": 1613685554
    }
]