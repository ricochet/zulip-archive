[
    {
        "content": "<p>I'm instantiating a module. I need it to export a string and read that string from wasmtime. This is a testing scenario, so I don't want to resort to a full witx/wit approach. What is the simplest way to do this?</p>",
        "id": 310673578,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710275
    },
    {
        "content": "<p>Compile time fixed or dynamic string?</p>",
        "id": 310673862,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668710371
    },
    {
        "content": "<p>Compile time.</p>",
        "id": 310673884,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710380
    },
    {
        "content": "<p>You should be able to export pointer (offset) and length ints and read it from linear memory in wasmtime</p>",
        "id": 310674060,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668710441
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">STRING</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310674087,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710453
    },
    {
        "content": "<p>Yeah, that's what I expected too. But I haven't been able to figure out the exact invocation for that.</p>",
        "id": 310674168,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710482
    },
    {
        "content": "<p>You could make that work, though afaik the layout of <code>str</code> isn't stable</p>",
        "id": 310674197,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668710493
    },
    {
        "content": "<p>Yup. I know.</p>",
        "id": 310674219,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710504
    },
    {
        "content": "<p>The moment I try to do that, module instantiation fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">STRING</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310674330,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710527
    },
    {
        "content": "<p>I think you'd need to export <code>STRING.as_ptr()</code> (<code>as usize</code>?) and <code>STRING.len()</code></p>",
        "id": 310674533,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668710588
    },
    {
        "content": "<p>both are <code>const fn</code></p>",
        "id": 310674553,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668710594
    },
    {
        "content": "<p>Same error with an <code>i32</code>.</p>",
        "id": 310674570,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710601
    },
    {
        "content": "<p>It seems like wasmtime really doesn't like anything compiled for <code>wasm32-wasi</code> that exports anything that isn't a function.</p>",
        "id": 310674661,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710631
    },
    {
        "content": "<p>My next attempt was:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">string</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s\">\"foo\"</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>... which linked and returned a function of:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FuncType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sig</span>: <span class=\"nc\">WasmFuncType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"p\">[</span><span class=\"n\">I32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">externref_params_count</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">returns</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">externref_returns_count</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310675046,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710746
    },
    {
        "content": "<p>So it is obviously wanting me to provide a pointer to memory as input to store the fat pointer in.</p>",
        "id": 310675152,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710772
    },
    {
        "content": "<p>But I'm not sure how it is possible to expose host memory directly to the guest like that.</p>",
        "id": 310675214,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710795
    },
    {
        "content": "<p>Attempting to return <code>(*const u8, usize)</code> produces the same signature.</p>",
        "id": 310675384,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710861
    },
    {
        "content": "<p>I think it wants me to pass in a pointer to 16 bytes of memory. But I don't know how.</p>",
        "id": 310675544,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710914
    },
    {
        "content": "<p><code>Val::null()</code> produces an <code>externref</code> rather than an <code>i32</code>.</p>",
        "id": 310675720,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710973
    },
    {
        "content": "<p>So the function signatures don't match.</p>",
        "id": 310675730,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668710979
    },
    {
        "content": "<p>In general, that requires exporting a <code>malloc</code>-like function from your wasm, so the host can allocate _guest_ memory. But I think there should be another way to do what you want... I'm not sure exactly what it is though.</p>",
        "id": 310675815,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1668711003
    },
    {
        "content": "<p>Can you <code>pub static STRING_PTR: *const u8 = STRING.as_ptr();</code>?</p>",
        "id": 310676242,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711139
    },
    {
        "content": "<p>(nope)</p>",
        "id": 310676384,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711185
    },
    {
        "content": "<p>Yeah, nope.</p>",
        "id": 310676414,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711194
    },
    {
        "content": "<p>Statics require <code>Sync</code>.</p>",
        "id": 310676443,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711202
    },
    {
        "content": "<p>I guess it makes sense - static location isn't known until link time</p>",
        "id": 310676538,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711241
    },
    {
        "content": "<p>You could write the pointer to a mutable static in an init function</p>",
        "id": 310676632,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711263
    },
    {
        "content": "<p>That sounds horrible. :)</p>",
        "id": 310676690,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711287
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">STRING</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">string</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">STRING</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">length</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">usize</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">STRING</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310676798,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711329
    },
    {
        "content": "<p>Or use two separate pub functions for ptr and len; I don't know if multi-value return is implemented in rust (yet?)</p>",
        "id": 310676840,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711344
    },
    {
        "content": "<p>The above produces two functions with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">FuncType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">sig</span>: <span class=\"nc\">WasmFuncType</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">params</span>: <span class=\"p\">[],</span><span class=\"w\"> </span><span class=\"n\">externref_params_count</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">returns</span>: <span class=\"p\">[</span><span class=\"n\">I32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">externref_returns_count</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Which means I can at least get the value out now.</p>",
        "id": 310676969,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711385
    },
    {
        "content": "<p><a href=\"https://github.com/rust-lang/rust/issues/73755#issuecomment-650252985\">https://github.com/rust-lang/rust/issues/73755#issuecomment-650252985</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/73755#issuecomment-650252985\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/67c71ca6da04e98594e832c9a34d6329ff79b497\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616266336531336561663265663966356233363638636531316138376535373037633730653666333238313332353863343062316337623264373864663864362f727573742d6c616e672f727573742f6973737565732f3733373535)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/73755#issuecomment-650252985\" title=\"Multi value Wasm compilation · Issue #73755 · rust-lang/rust\">Multi value Wasm compilation · Issue #73755 · rust-lang/rust</a></div><div class=\"message_embed_description\">I wanted to use tuple in my code for wasm application. When i tried to compile my code to wasm using wasm32-unknown-unknown code is compiled but its not returning any return. But I see multi-value ...</div></div></div>",
        "id": 310677034,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711403
    },
    {
        "content": "<p>But I still don't know what to do with that integer.</p>",
        "id": 310677300,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711475
    },
    {
        "content": "<p>Since I'm not sure which APIs to call to get raw access to guest memory.</p>",
        "id": 310677407,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711495
    },
    {
        "content": "<p><a href=\"https://docs.rs/wasmtime/2.0.2/wasmtime/struct.Instance.html#method.get_memory\">https://docs.rs/wasmtime/2.0.2/wasmtime/struct.Instance.html#method.get_memory</a></p>",
        "id": 310677667,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711577
    },
    {
        "content": "<p>I forget what the default memory name is...</p>",
        "id": 310677742,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711596
    },
    {
        "content": "<p><code>\"memory\"</code>, typically</p>",
        "id": 310678460,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668711770
    },
    {
        "content": "<p><code>Linker::get(\"memory\")</code> returns <code>None</code>.</p>",
        "id": 310679262,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668711999
    },
    {
        "content": "<p>But the <code>wat</code> says it <strong>is</strong> exported.</p>",
        "id": 310679439,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668712043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ^</p>",
        "id": 310679693,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668712112
    },
    {
        "content": "<p>If it's exported in <code>wat</code>, I'm not sure offhand why it wouldn't show up in <code>Linker::get(\"memory\")</code></p>",
        "id": 310679998,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1668712196
    },
    {
        "content": "<p>you probably need to use <code>Instance::get</code> instead of <code>Linker::get</code></p>",
        "id": 310680074,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668712215
    },
    {
        "content": "<p><code>Linker::get</code> is only used for items defined into the linker, and if you're just instantiating through the linker that doesn't instantiate more things into the linker</p>",
        "id": 310680111,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668712230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> What is the right way to manually instantiate and call the start function?</p>",
        "id": 310680480,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668712373
    },
    {
        "content": "<p><code>Instance</code> construction runs the start function</p>",
        "id": 310680640,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668712424
    },
    {
        "content": "<p>yes presence of an <code>Instance</code> means the wasm <code>start</code> function was run</p>",
        "id": 310680838,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668712481
    },
    {
        "content": "<p>Unless you mean the <code>_start</code> function, which - confusingly - is unrelated</p>",
        "id": 310681143,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668712584
    },
    {
        "content": "<p>(i.e. an \"old\"-style WASI command)</p>",
        "id": 310681268,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668712626
    },
    {
        "content": "<p>Wohoo! I managed to get an instance of a global!</p>",
        "id": 310681691,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668712782
    },
    {
        "content": "<p>That feels like real progress.</p>",
        "id": 310681722,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668712793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> How do I translate the raw i32 result (which is obviously a pointer of some kind) into an offset into the exported memory?</p>",
        "id": 310684669,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668713782
    },
    {
        "content": "<p>The result of the exported global is <code>1048616</code> and the size of the exported memory is <code>1114112</code>.</p>",
        "id": 310684830,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668713846
    },
    {
        "content": "<p>So that seems sane. But the value isn't at that offset.</p>",
        "id": 310684873,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668713863
    },
    {
        "content": "<p>It should be - wasm guest pointers are offsets into their linear memory</p>",
        "id": 310684998,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668713890
    },
    {
        "content": "<p>yes it should be an offset into linear memory, if it isn't I don't know what it is</p>",
        "id": 310685910,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668714190
    },
    {
        "content": "<p>I think it is a rust <code>&amp;str</code> layout issue. The exported value points to just past the end of the string.</p>",
        "id": 310685927,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668714195
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">CONFIG</span>: <span class=\"kp\">&amp;</span><span class=\"o\">'</span><span class=\"nb\">static</span> <span class=\"kt\">str</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"Hello, world!</span><span class=\"se\">\\0</span><span class=\"s\">\"</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The value of <code>CONFIG</code> as seen by wasmtime is <code>1048616</code>, but the string actually starts at <code>1048600</code>.</p>",
        "id": 310686339,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668714333
    },
    {
        "content": "<p>That's because <code>CONFIG</code>, as a pointer is <code>&amp;&amp;'static str</code>, you'd need to instead to <code>static CONFIG: [u8; N] = *b\"...\"</code> if you want the raw addrss</p>",
        "id": 310686523,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668714402
    },
    {
        "content": "<p>Ah, right.</p>",
        "id": 310686583,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668714425
    },
    {
        "content": "<p>or alternatively you should be able to read the I32 that represents the <code>&amp;&amp;str</code>, and then find the string at <em>that</em> address, right?</p>",
        "id": 310691052,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1668715917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> That's the approach I took.</p>",
        "id": 310848753,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668785886
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Since exploring this yesterday, I began thinking that a custom section might be more idiomatic. What is the status of custom section support? <a href=\"https://github.com/rust-lang/rust/pull/48883\">https://github.com/rust-lang/rust/pull/48883</a> was merged but I'm currently seeing <code>cannot find attribute</code> on nightly.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/pull/48883\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1b2b952d1cc12e994577da253aebdbdfc9b527b9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616464663239336663313730396538316336393739613464343163373166663761636639656165393766303765336435616635353564663237383861396332332f727573742d6c616e672f727573742f70756c6c2f3438383833)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/pull/48883\" title=\"rustc: Add a `#[wasm_custom_section]` attribute by alexcrichton · Pull Request #48883 · rust-lang/rust\">rustc: Add a `#[wasm_custom_section]` attribute by alexcrichton · Pull Request #48883 · rust-lang/rust</a></div><div class=\"message_embed_description\">This commit is an implementation of adding custom sections to wasm artifacts in\nrustc. The intention here is to expose the ability of the wasm binary format to\ncontain custom sections with arbitrar...</div></div></div>",
        "id": 310849542,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668786077
    },
    {
        "content": "<p>It's implemented in rustc and hasn't changed since, not sure why you'd get a cannot find attribute error</p>",
        "id": 310850556,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668786341
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Ah, vscode/analyzer was trying to build it for the host arch.</p>",
        "id": 310852296,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1668786759
    }
]