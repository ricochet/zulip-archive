[
    {
        "content": "<p>I've noticed this PR (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\">https://github.com/bytecodealliance/wasmtime/pull/5288</a>) hasn't had any activity since Mar 3. Function references is listed as a pre-requisite to Wasm GC, so seems pretty important to get this in. Is anybody working on this? Any idea if this is still getting merged any time soon?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ae4a338a4c24965312c95e4b642e7aa5ce797b5c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633238343461646465353133386139396437623539636463616666323366616165316366393233623239666538363966383565613030626130666135653562342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35323838)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288\" title=\"Function references by CosineP · Pull Request #5288 · bytecodealliance/wasmtime\">Function references by CosineP · Pull Request #5288 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This patch, written by @dhil and I, implements the (complete) function references proposal, forming the wasmtime side of the existing pull request bytecodealliance/wasm-tools#701.   It is missing s...</div></div></div>",
        "id": 348792818,
        "sender_full_name": "Ivan Mikushin",
        "timestamp": 1681320486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"500234\">@Luna Phipps-Costin</span> <span class=\"user-mention\" data-user-id=\"500204\">@Daniel Hillerström</span>: are you still working on that pull request? anything we can do to unblock you?</p>",
        "id": 348798993,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1681322310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> yes, I am actively working on it. I am currently blocked on a paper deadline this Saturday :-)) I think what I need help with addressing is where to add the error paths for the embedder side of things (c.f. <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288#discussion_r1126569577\">https://github.com/bytecodealliance/wasmtime/pull/5288#discussion_r1126569577</a>). I am quite eager to land the patch as it will make it much easier for me to keep up with changes to wasmtime on my continuations branch</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5288#discussion_r1126569577\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6290460d4b234e3d9e1cda399acd215d5c15409e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626436656339623833626336346565336433316164353365616132356662373634343431663564653833626163353863363536306336343637343830383536302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35323838)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5288#discussion_r1126569577\" title=\"Function references by CosineP · Pull Request #5288 · bytecodealliance/wasmtime\">Function references by CosineP · Pull Request #5288 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This patch, written by @dhil and I, implements the (complete) function references proposal, forming the wasmtime side of the existing pull request bytecodealliance/wasm-tools#701.   It is missing s...</div></div></div>",
        "id": 348813492,
        "sender_full_name": "Daniel Hillerström",
        "timestamp": 1681326675
    },
    {
        "content": "<p>I've been thinking a lot about the embedder API side of things as I work on the RFC for wasm-gc, will share more soon</p>\n<p>unfortunately, I don't think Alex's suggestion to skip the embedder API as a temporary stopgap to unblock other work is actually feasible since we will need the embedder API to get <code>.wast</code> tests running</p>",
        "id": 348827169,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1681331321
    },
    {
        "content": "<p>OK, what path forward do you suggest?</p>",
        "id": 348828033,
        "sender_full_name": "Daniel Hillerström",
        "timestamp": 1681331615
    },
    {
        "content": "<p>I think we will need to properly address the embedder API, I have a couple ideas, but need to talk it over with folks to decide which path is best. should have more guidance by the time you're done with your paper deadline :)</p>",
        "id": 348834881,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1681334323
    },
    {
        "content": "<p>Excellent thanks! Maybe we can meet at the end of next week, or the week after, such that I can learn more about your ideas?</p>",
        "id": 349022346,
        "sender_full_name": "Daniel Hillerström",
        "timestamp": 1681370974
    },
    {
        "content": "<p>how would monday at 11:30am pacific work?</p>",
        "id": 349150031,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1681401229
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> that ought to work for me, thanks! (Monday April 17)</p>",
        "id": 349208558,
        "sender_full_name": "Daniel Hillerström",
        "timestamp": 1681418625
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 349224165,
        "sender_full_name": "Ivan Mikushin",
        "timestamp": 1681425290
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> re <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\">https://github.com/bytecodealliance/wasmtime/pull/7943</a> and the <code>FuncType</code> field of <code>TypedFunc</code>, might be faster to do this here -- two comments of yours indicate we can remove it via <code>WasmTy for TypedFunc&lt;...&gt;</code>, but isn't the type still needed to thread through to <code>call_raw</code>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bca56426f2f782603b379ec3867380e680bf7fd\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373931633465316661386331623938333433396534376635333266303934626436313633346237353531653236663731613836636436643937643362653635652f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37393433)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7943\" title=\"Wasmtime: Finish support for the typed function references proposal by fitzgen · Pull Request #7943 · bytecodealliance/wasmtime\">Wasmtime: Finish support for the typed function references proposal by fitzgen · Pull Request #7943 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">While we supported the function references proposal inside Wasm, we didn't support it on the \"outside\" in the Wasmtime embedder APIs. So much of the work here is exposing typed function references,...</div></div></div>",
        "id": 421902333,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103309
    },
    {
        "content": "<p>e.g. somehow I thought we needed to have type information to flow into the runtime type-checks of the arguments</p>",
        "id": 421902410,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103340
    },
    {
        "content": "<p>the only reason the type is needed to thread through to <code>call_raw</code> is for runtime checks, which would no longer be needed if we stop doing runtime checks :)</p>\n<p>and we could stop doing runtime checks, but still allow static typing of functions that use concrete type refernces via <code>impl WasmTy for TypedFunc</code></p>",
        "id": 421902552,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103400
    },
    {
        "content": "<p>we'll still need runtime checks for gc types though right?</p>",
        "id": 421902688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103436
    },
    {
        "content": "<p>e.g. <code>(ref $struct_type)</code></p>",
        "id": 421902705,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103442
    },
    {
        "content": "<p>so not for anything currently but needed in the future soon</p>",
        "id": 421902729,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103453
    },
    {
        "content": "<p>I think we could have <code>TypedStruct&lt;(...)&gt;</code></p>",
        "id": 421902741,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103457
    },
    {
        "content": "<p>oh you're thinking we can skip the derive?</p>",
        "id": 421902776,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103470
    },
    {
        "content": "<p>or make it much simpler?</p>",
        "id": 421902782,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103473
    },
    {
        "content": "<p>I suppose you're thinking like <code>TypedStruct&lt;(i32, Mut&lt;i32&gt;)&gt;</code> for mutable fields?</p>",
        "id": 421902912,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103523
    },
    {
        "content": "<p>yeah, it would <em>not</em> be turning <code>repr(C)</code> rust structs into GC types and vice versa</p>\n<p>it would be \"I have type checked that the instance of this struct has the type parameters fields\"</p>",
        "id": 421902973,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103531
    },
    {
        "content": "<p>something like that</p>",
        "id": 421902982,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103535
    },
    {
        "content": "<p>unclear what to do wrt recursion groups and nominal types</p>",
        "id": 421903033,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103551
    },
    {
        "content": "<p>I was just thinking that heh</p>",
        "id": 421903052,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103558
    },
    {
        "content": "<p>e.g. all the canonicalization that wasm-gc does</p>",
        "id": 421903100,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103578
    },
    {
        "content": "<p>that'd be hard to reflect into Rust</p>",
        "id": 421903114,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103583
    },
    {
        "content": "<p>I guess even if we restricted it to structural stuff, and had cyclic edges be supertypes, which would allow reading offsets of the underlying object directly, we would still need a dynamic type check when passing into a typed function</p>",
        "id": 421903223,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103622
    },
    {
        "content": "<p>ok so maybe this isn't worth pursuing</p>",
        "id": 421903350,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103656
    },
    {
        "content": "<p>or at least, not worth undoing what we have now</p>",
        "id": 421903387,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103669
    },
    {
        "content": "<p>so while <code>TypedFunc</code> typechecks could go away we'll still need  the type information in the future</p>",
        "id": 421903423,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103681
    },
    {
        "content": "<p>might still be worth it even if it doesn't 100% solve the problem</p>",
        "id": 421903434,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103684
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Function.20References.20PR/near/421903423\">said</a>:</p>\n<blockquote>\n<p>so while <code>TypedFunc</code> typechecks could go away we'll still need  the type information in the future</p>\n</blockquote>\n<p>right</p>",
        "id": 421903448,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103692
    },
    {
        "content": "<p>it might be useful to have it available for simple cases yeah</p>",
        "id": 421903460,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103697
    },
    {
        "content": "<p>right, but we can cross that bridge when we get to it</p>",
        "id": 421903498,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103708
    },
    {
        "content": "<p>so back to this PR</p>",
        "id": 421903511,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103710
    },
    {
        "content": "<p><code>realloc</code> doesn't have an <code>Instance</code></p>",
        "id": 421903553,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103723
    },
    {
        "content": "<p>do you think there's any way we could like pass around the type index and then lazily turn that into a whole function type?</p>",
        "id": 421903559,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103725
    },
    {
        "content": "<p>I should go look at realloc again</p>",
        "id": 421903590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103735
    },
    {
        "content": "<p>it has a <code>*mut wasmtime_runtime::ComponentInstance</code></p>",
        "id": 421903618,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103746
    },
    {
        "content": "<p>oh wait though realloc is a vmfuncref?</p>",
        "id": 421903645,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103757
    },
    {
        "content": "<p>so there's a type in there?</p>",
        "id": 421903654,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103760
    },
    {
        "content": "<p>we could stash the raw <code>u32</code> of the <code>VMSharedTypeIndex</code> in there</p>",
        "id": 421903704,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103767
    },
    {
        "content": "<p>oh is it?</p>",
        "id": 421903753,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103781
    },
    {
        "content": "<p>checking</p>",
        "id": 421903763,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103785
    },
    {
        "content": "<p>er wait hang on</p>",
        "id": 421903766,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103785
    },
    {
        "content": "<p>this is true of all <code>call_raw</code></p>",
        "id": 421903773,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103788
    },
    {
        "content": "<p>we pass in vmfuncref so we can probably drop the <code>&amp;FuncType</code> parameter</p>",
        "id": 421903804,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103798
    },
    {
        "content": "<p>b/c we can load it lazily?</p>",
        "id": 421903817,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103802
    },
    {
        "content": "<p>well going from <code>VMSharedTypeIndex</code> to <code>FuncType</code> still involves locking</p>",
        "id": 421903975,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103856
    },
    {
        "content": "<p>I wonder if that may be the way to go though so long as it's lazy</p>",
        "id": 421904047,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103877
    },
    {
        "content": "<p>to increment the associated registered reference count</p>",
        "id": 421904054,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103879
    },
    {
        "content": "<p>keep integers/etc on the fast path</p>",
        "id": 421904060,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103882
    },
    {
        "content": "<p>it is really annoying that <code>wasmtime::FuncType</code> and <code>wasmtime_types::WasmFuncType</code> are not the same thing</p>",
        "id": 421904272,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103947
    },
    {
        "content": "<p>is there anything actually preventing them from being the sa,me?</p>",
        "id": 421904317,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103963
    },
    {
        "content": "<p>we could probably make them the same at this point</p>",
        "id": 421904336,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103969
    },
    {
        "content": "<p>or well</p>",
        "id": 421904357,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103975
    },
    {
        "content": "<p>I think <code>ValType</code> and <code>WasmValType</code> would still have to be different</p>",
        "id": 421904389,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708103987
    },
    {
        "content": "<p><code>FuncType</code> has <code>ValType</code> which recursively includes <code>FuncType</code></p>",
        "id": 421904394,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103988
    },
    {
        "content": "<p>yeah</p>",
        "id": 421904407,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708103992
    },
    {
        "content": "<p>time to whip out <code>ValType&lt;T&gt;</code> again</p>",
        "id": 421904433,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104001
    },
    {
        "content": "<p>but that's okay because we only expose params/returns publicly via <code>impl ExactSizeIterator</code></p>",
        "id": 421904478,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104004
    },
    {
        "content": "<p>so we could lazily do the translation at that level</p>",
        "id": 421904517,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104014
    },
    {
        "content": "<p>I'm always down for merging the layers of abstration</p>",
        "id": 421904604,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104039
    },
    {
        "content": "<p>it always feels like we have too many</p>",
        "id": 421904621,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104045
    },
    {
        "content": "<p>(also it is annoying that we don't have <code>VMSharedTypeIndex</code> in the <code>wasm_types</code> crate for use in <code>EngineOrModuleInternalIndex</code></p>",
        "id": 421904680,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104063
    },
    {
        "content": "<p>)</p>",
        "id": 421904689,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104064
    },
    {
        "content": "<p>okay, I agree this should be explored, but</p>",
        "id": 421904716,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104075
    },
    {
        "content": "<p>we could move that though?</p>",
        "id": 421904724,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104078
    },
    {
        "content": "<p>that one's easy to move</p>",
        "id": 421904731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104082
    },
    {
        "content": "<p>I don't really want to do that in this PR</p>",
        "id": 421904745,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104086
    },
    {
        "content": "<p>true</p>",
        "id": 421904774,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104095
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Function.20References.20PR/near/421904724\">said</a>:</p>\n<blockquote>\n<p>we could move that though?</p>\n</blockquote>\n<p>Yeah I think so</p>",
        "id": 421904783,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Function.20References.20PR/near/421904517\">said</a>:</p>\n<blockquote>\n<p>so we could lazily do the translation at that level</p>\n</blockquote>\n<p>lmao we already do this lazily</p>",
        "id": 421904843,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104122
    },
    {
        "content": "<p>we get the referenced <code>WasmFuncType</code> via our <code>Arc</code> and then lazily translate</p>",
        "id": 421904931,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104138
    },
    {
        "content": "<p>so if it works for this PR I think it would be best to drop the <code>&amp;FuncType</code> from <code>call_raw</code></p>",
        "id": 421905146,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104214
    },
    {
        "content": "<p>and somehow lazily load the type info from <code>Engine</code> if needed</p>",
        "id": 421905176,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104223
    },
    {
        "content": "<p>alternatively you could eagerly load and see if you can measure a perf hit</p>",
        "id": 421905233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104241
    },
    {
        "content": "<p>okay so maybe I can:</p>\n<ul>\n<li>In this PR, refactor to make dynamic checks take a <code>WasmFuncType</code> instead of <code>FuncType</code></li>\n<li>in a follow up PR, make them literally the same type?</li>\n</ul>",
        "id": 421905262,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104244
    },
    {
        "content": "<p>or your idea, but:</p>",
        "id": 421905322,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104260
    },
    {
        "content": "<p>do we have a script or something for measuring RPS of <code>wasmtime serve</code>?</p>",
        "id": 421905386,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104285
    },
    {
        "content": "<p>nah</p>",
        "id": 421905405,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104291
    },
    {
        "content": "<p>I've never acrtually done that</p>",
        "id": 421905410,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104292
    },
    {
        "content": "<p>\"pick your favorite benchmarking tool\"</p>",
        "id": 421905431,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104298
    },
    {
        "content": "<p>you could also measure the <code>call</code> benchmark here too</p>",
        "id": 421905470,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104310
    },
    {
        "content": "<p>that will probably show it being disproportionately bad though given how streamlined it is today</p>",
        "id": 421905512,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104326
    },
    {
        "content": "<p>yeah, should do that either way (I suspect the way I implemented the dynamic checks could be improved to help the compiler boil some stuff away)</p>",
        "id": 421905546,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104339
    },
    {
        "content": "<p>I think the <code>call</code> benchmarks aren't sufficient here tho</p>",
        "id": 421905646,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104364
    },
    {
        "content": "<p>I feel like it's best though that we start with an index+engine combo and then derive info from there</p>",
        "id": 421905652,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104365
    },
    {
        "content": "<p>because they are single threaded</p>",
        "id": 421905665,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104370
    },
    {
        "content": "<p>oh you'd be surprised</p>",
        "id": 421905694,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104380
    },
    {
        "content": "<p>uncontended locks are surprisingly expensive in that context</p>",
        "id": 421905726,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104390
    },
    {
        "content": "<p>and if we are lazily constructing <code>FuncType</code>s from <code>VMSharedTypeIndex</code>s that involves locking at the engine level</p>",
        "id": 421905737,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104393
    },
    {
        "content": "<p>\"how good is your rwlock with only readers\"</p>",
        "id": 421905790,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104414
    },
    {
        "content": "<p>right, it might show some overhead, but not the \"full\" overhead</p>",
        "id": 421905848,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104430
    },
    {
        "content": "<p>agreed</p>",
        "id": 421905870,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104439
    },
    {
        "content": "<p>we could in theory build a fancier data structure though</p>",
        "id": 421905942,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104467
    },
    {
        "content": "<p>e.g. <code>VMSharedTypeIndex</code> could be proof of \"this slot in this data structure is unchanging\"</p>",
        "id": 421905971,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104481
    },
    {
        "content": "<p>and then we could go from <code>&amp;Engine</code> to <code>&amp;Slot</code> via that proof</p>",
        "id": 421906041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104493
    },
    {
        "content": "<p>so with some elbow grease I think we could get the locks out of the way</p>",
        "id": 421906071,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104505
    },
    {
        "content": "<p>I don't think so: that would require RAII which isn't possible with integrating with JIT code</p>",
        "id": 421906096,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104515
    },
    {
        "content": "<p>I'm thinking the <code>Module</code> is \"the RAII\"</p>",
        "id": 421906145,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104534
    },
    {
        "content": "<p>where e.g. we keep <code>Module</code> in a <code>Store</code> to keep it alive today</p>",
        "id": 421906166,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104540
    },
    {
        "content": "<p>we could remove the locking by putting the registration count behind the <code>Arc</code>, and then having some other thing sweep the registry's hash consing map</p>",
        "id": 421906233,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104569
    },
    {
        "content": "<p>(remove the locking for cloning and dropping and such, at least)</p>",
        "id": 421906295,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104590
    },
    {
        "content": "<p>ish</p>",
        "id": 421906319,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104599
    },
    {
        "content": "<p>not look up</p>",
        "id": 421906329,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104601
    },
    {
        "content": "<p>I haven't thought this through fully</p>",
        "id": 421906354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104603
    },
    {
        "content": "<p>but like if we allowed 1K types maximum we could just have a <code>Vec</code> preallocated and you index into that</p>",
        "id": 421906448,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104626
    },
    {
        "content": "<p>obviously not suitable but ... hm...</p>",
        "id": 421906494,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104637
    },
    {
        "content": "<p>well anyway I think we should try the route of \"don't pass in type info\"</p>",
        "id": 421906516,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104649
    },
    {
        "content": "<p>and see how that fares perf-wise</p>",
        "id": 421906531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104653
    },
    {
        "content": "<p>we can at least be perf-neutral with scalars</p>",
        "id": 421906558,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104662
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Function.20References.20PR/near/421906145\">said</a>:</p>\n<blockquote>\n<p>I'm thinking the <code>Module</code> is \"the RAII\"</p>\n</blockquote>\n<p>but then <code>VMSharedTypeIndex</code> itself isn't proof of anything, re are relying on the module existing and that uses have an associated module or whatever, which is pretty much teh situation we are already in</p>",
        "id": 421906561,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104662
    },
    {
        "content": "<p>well I don't want to get too distracted with a half-baked idea I have</p>",
        "id": 421906681,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104699
    },
    {
        "content": "<p>brb</p>",
        "id": 421906756,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708104723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Function.20References.20PR/near/421906558\">said</a>:</p>\n<blockquote>\n<p>we can at least be perf-neutral with scalars</p>\n</blockquote>\n<p>we do have to call <code>.next()</code> on the param types iter for every param, so to be actually neutral it would require LLVM to be able to boil that away, which I am not sure it can or not</p>",
        "id": 421906789,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104725
    },
    {
        "content": "<p>okay well lets start with looking up the funcref's <code>FuncType</code> and doing the read lock and measuring perf of that</p>",
        "id": 421907314,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104884
    },
    {
        "content": "<p>and then we can decide what to do from there</p>",
        "id": 421907330,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708104894
    },
    {
        "content": "<p>(and I'm not gonna get to the benchmarking until after I finish writing these missing embedder API subtyping tests)</p>",
        "id": 421907760,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708105047
    },
    {
        "content": "<p>I'm imagining we'd pass in <code>&amp;LazyParam</code> which has <code>&amp;Engine</code>, <code>usize</code>, and <code>VMSharedTypeIndex</code> and then <code>.get()</code> loads everything</p>",
        "id": 421908911,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708105444
    },
    {
        "content": "<p>so that way outside the loop is \"just\" bumping <code>usize</code></p>",
        "id": 421908987,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708105470
    },
    {
        "content": "<p>yeah that makes sense</p>",
        "id": 421909099,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708105521
    }
]