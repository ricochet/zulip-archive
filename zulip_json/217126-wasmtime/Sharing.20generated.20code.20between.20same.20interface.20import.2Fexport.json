[
    {
        "content": "<p>I'm trying to use the <code>with</code> and <code>interfaces</code> options to <code>wasmtime::component::bindgen!</code> to share generated code for types in an interface.</p>\n<p>I seem to have it working for _imports_ by doing things like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">types</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">job_server_api</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">path</span>: <span class=\"s\">\"wit/\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">interfaces</span>: <span class=\"s\">\"</span>\n<span class=\"s\">            import jeffparsons:job-server/job-server-api;</span>\n<span class=\"s\">        \"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"bp\">self</span>::<span class=\"n\">jeffparsons</span>::<span class=\"n\">job_server</span>::<span class=\"n\">job_server_api</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">mod</span> <span class=\"nn\">job_worker</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">        </span><span class=\"n\">world</span>: <span class=\"s\">\"jeffparsons:job-worker/job-worker\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">with</span>: <span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"s\">\"jeffparsons:job-server/job-server-api\"</span>: <span class=\"nc\">crate</span>::<span class=\"n\">types</span>::<span class=\"n\">job_server_api</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">});</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But I'm also trying to _export_ an implementation of <code>job-server-api</code> from the host. (A kind of proxy that dispatches calls to either local or remote components.) I can't figure out how to share the generated code for types in <code>job-server-api</code> across both imports and exports.</p>\n<p>Is this possible somehow? The generated code for the imports and exports appears to be identical (except for borrowing convention in the <code>call_whatever</code> methods which is not really an issue) so I assume there's nothing morally reprehensible about what I want to do. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>My workaround for now is to hand-write <code>From</code> implementations for one or both directions, depending on how the types are used. But that's getting verbose and tedious pretty quickly, as you might imagine. If the generated Rust types can't be the same for some reason, generating these conversions from <code>bindgen!</code> would also be pretty handy.</p>\n<p>Thanks!</p>",
        "id": 400330703,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1699136589
    },
    {
        "content": "<p>I should add that I'm actually thinking of these <code>bindgen!</code>-generated bindings as a stopgap, and ultimately I'd like to do this generically, i.e. without the host program having hard-coded knowledge of most of those guest components. (Full context: <a href=\"#narrow/stream/223391-wasm/topic/Wasm.20Components.20and.20service-oriented.20architecture\">https://bytecodealliance.zulipchat.com/#narrow/stream/223391-wasm/topic/Wasm.20Components.20and.20service-oriented.20architecture</a>)</p>\n<p>So if there's some way to achieve this using the dynamic type/value stuff in <code>wasmtime::component::{types, Val}</code>, <code>LinkerInstance::func_new</code>, etc. instead then I'd be happy to go down that path instead. I'm just not sure if that's possible. (I'm not familiar with it, don't know what limitations exist).</p>\n<p>Also, I don't care much about performance; I don't expect these interfaces to be a bottleneck. So if a super-dynamic approach turns out to be the most ergonomic, that's fine.</p>",
        "id": 400360645,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1699160484
    },
    {
        "content": "<p>The generated types today currently try to reflect what's happening on the WIT level with different types for imports/exports largely, but that doesn't mean this couldn't be unified where possible either. Mind filing an issue for this?</p>",
        "id": 400423892,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1699219891
    },
    {
        "content": "<p>Thanks, can do!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Sharing.20generated.20code.20between.20same.20interface.20import.2Fexport/near/400423892\">said</a>:</p>\n<blockquote>\n<p>[...] what's happening on the WIT level with different types for imports/exports [...]</p>\n</blockquote>\n<p>I had a feeling I'd read something vaguely related to that somewhere, but I don't understand why a type as defined on an interface (e.g. record) is considered a different type depending on whether the interface is imported or exported. I'm sure it all makes sense â€” it's just not obvious to me (yet).</p>\n<p>I'll definitely be using the generated bindings for now; even with my hand-coded conversions it's good enough to let me focus on more interesting parts of the project. But eventually I'll want to do all this dynamically, so I guess I'd better crack open some of the generated components to try to understand when I can safely treat types from different components as equal, etc.</p>",
        "id": 400427826,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1699224468
    }
]