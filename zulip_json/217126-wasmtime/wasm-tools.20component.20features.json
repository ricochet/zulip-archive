[
    {
        "content": "<p>I'm trying to execute a component I compiled using wasmtime like so</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"c1\">// let path = path::Path::new(\"/Users/interpretations/projects/witty/my-component.wasm\");</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"./my-component.wasm\"</span><span class=\"p\">)</span>\n<span class=\"w\">         </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Something went wrong reading the file\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"PRINTING OUT SOME THIGNS\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"THE ACTUAL CONTENTS {:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">comp</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">contents</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"c1\">// println!(\"Output: {}\", wasmprinter::print_bytes(&amp;comp).unwrap());</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">comp</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>and I'm getting</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x4</span><span class=\"p\">)</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">17</span>:<span class=\"mi\">57</span>\n</code></pre></div>\n<p>Seems like maybe <code>wasmparser</code> isn't recognizing <code>const KIND_COMPONENT: u16 = 0x01;</code> when reading the binary?<br>\nDoes this need to be enabled with a feature flag?<br>\nI've specified <code>wasmtime = { version = \"5.0.0\", features = [\"component-model\"]}</code> in my <code>Cargo.toml</code></p>",
        "id": 327131689,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1676057801
    },
    {
        "content": "<p>It's failing on the call to <code>Component::from_binary</code></p>",
        "id": 327131813,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1676057852
    },
    {
        "content": "<p>Is your <code>.wasm</code> file binary wasm? (or is it perhaps the text form?)</p>",
        "id": 327132128,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676057980
    },
    {
        "content": "<p>It's binary.  I'm creating it by running</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">project</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"err\">\\</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">adapt</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wasi_snapshot_preview1</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>",
        "id": 327132383,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1676058058
    },
    {
        "content": "<p>This is just a guess as I'm not tracking changes closely, but the component model spec is under heavy development and its possible that your tools are out of sync with each other; are you using recent versions of both <code>wasm-tools</code> and <code>wasmtime</code>?</p>",
        "id": 327135837,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676059207
    },
    {
        "content": "<p>Fairly sure I'm using latest for both, <code>1.0.23</code> and <code>5.0.0</code>.  Can try and tinker with some version changes though</p>",
        "id": 327136687,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1676059459
    },
    {
        "content": "<p>You might want to try the main branch of wasmtime.</p>",
        "id": 327209364,
        "sender_full_name": "bjorn3",
        "timestamp": 1676106531
    },
    {
        "content": "<p>Wasm-tools may have had a release with breaking changes after Wasmtime 5.0.0 got released.</p>",
        "id": 327209417,
        "sender_full_name": "bjorn3",
        "timestamp": 1676106561
    },
    {
        "content": "<p>It did, unfortunately. Latest published wasm-tools only works with main of wasmtime. wit-bindgen hasn't been updated yet either.</p>",
        "id": 327283958,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676135921
    },
    {
        "content": "<p>If you do want to use 5.0.0 of wasmtime, you may need to rollback wasm-tools a version or two (another format change happened nine days ago too). We're getting close to some stability in the component binary format, but not quite there yet.</p>",
        "id": 327284253,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676136114
    },
    {
        "content": "<p>Oh I take that back, it looks like wit-bindgen updated its deps yesterday (Alex was supposed to have the day off <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span>)</p>",
        "id": 327297434,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676143477
    },
    {
        "content": "<p>Thanks for the updates!</p>",
        "id": 327304070,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1676148691
    }
]