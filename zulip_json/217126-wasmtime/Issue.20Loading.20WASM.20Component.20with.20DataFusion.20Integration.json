[
    {
        "content": "<p>I'm developing a Rust host application that uses Wasmtime to load and execute WebAssembly components. </p>\n<p>Here's my setup:</p>\n<ul>\n<li>Host application written in Rust using Wasmtime - WASM components compiled using <code>cargo component</code> </li>\n<li>Each component has a corresponding <code>.wit</code> file defining its exported interface </li>\n<li>One component integrates DataFusion</li>\n</ul>\n<p>I'm trying to integrate DataFusion into one of my WASM components following examples from: </p>\n<ol>\n<li><a href=\"\">DataFusion GitHub Issue #177</a> </li>\n<li><a href=\"\">DataFusion WASM Bindings</a></li>\n</ol>\n<p>The issue occurs when I add the DataFusion context in the code for the WASM module (it complies to WASM without errors):</p>\n<p><code>rust let ctx = SessionContext::new(); </code></p>\n<p>When loading this specific module, the host gets stuck at:</p>\n<p><code>rust println!(\"extension: {:?}\", extension); // Load Extension from the .wasm file let component = Component::from_file(&amp;engine, extension.unwrap()).map_err(|e| { println!(\"Error while loading component {:?}\", e); e })?; </code></p>\n<p>The only output visible in the console is from the first <code>println!</code> showing the extension value.</p>\n<p>Questions: </p>\n<ol>\n<li>Is there a way to get more detailed error information from <code>Component::from_file</code>? </li>\n<li>Do I need to modify how I load the WASM module when using DataFusion? </li>\n<li>Are there any specific considerations when using DataFusion in a WASM component?</li>\n</ol>\n<p>Additional Context: - This loading method works successfully with multiple other WASM modules - The issue only occurs with the DataFusion integration</p>",
        "id": 488996085,
        "sender_full_name": "Utilize3214",
        "timestamp": 1734184244
    },
    {
        "content": "<p>How large is the component, and how long are you waiting? If you run ‘top’ while it’s hanging what does that say - hopefully a few threads busy in wasmtime?  Loading the component is going to generate native code for all of the functions inside, which could take a while.</p>",
        "id": 489010270,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1734195960
    },
    {
        "content": "<p>An alternative is that you do the code generation AOT with ‘wasmtime compile’ and then deserialize the compiled component from file. Deserializing should be very fast</p>",
        "id": 489010389,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1734196038
    },
    {
        "content": "<p>Thanks! The .wasm file is 46 MB . I left it to run for longer and it worked. It took about 3 mins for it to run through. I'll look into AOT and also see if it is possible to make .wasm file smaller, the other files I have are between 100-300 kB.</p>",
        "id": 489113104,
        "sender_full_name": "Utilize3214",
        "timestamp": 1734295158
    },
    {
        "content": "<p>one thing to note is that initializing components in debug builds takes a LONG time, if you were to buold your host in release mode it would feel quite fast even with such a big component (I know 45MB+ is currently the \"normal\" size of a python component for example)</p>",
        "id": 489117457,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1734299195
    },
    {
        "content": "<p>Thanks for the tip! Building the host with the release flag significantly improved the load time from ~300s to 23s. However similar projects like <a href=\"https://waynexia.github.io/datafusion-playground/\">https://waynexia.github.io/datafusion-playground/</a> and <a href=\"https://parquet-viewer.xiangpeng.systems/\">https://parquet-viewer.xiangpeng.systems/</a>  loads much faster. Could the fact that they use wasm-bindgen explain the performance difference?</p>",
        "id": 489333501,
        "sender_full_name": "Utilize3214",
        "timestamp": 1734380263
    },
    {
        "content": "<p>What you're running into is the fact that Wasmtime needs to convert WebAssembly to native code. This is done with the Cranelift compiler that Wasmtime uses. This process takes time and is Rust code that runs when you load the wasm module. Unoptimized Rust code is significantly slower than optimized Rust code, hence why a <code>--release</code> build is so much faster.</p>\n<p>If you're comparing against the web then that's comparing against different systems. Web browsers are optimized for time-to-execution for WebAssembly and Javascript and use many tricks for doing this. For example web browsers will compile your code as it's being downloaded so by the time the download is finished everything is ready to go. Web browsers also use a \"baseline compiler\" for wasm which is significantly faster than the final tier of compilation (which Cranelift is more akin to).</p>\n<p>Wasmtime supports baseline compilation through the \"Winch\" compiler which generates code much speedier than Cranelift. The tradeoff is that the generated code performs much worse.</p>\n<p>When you're working with out-of-browser wasm these are concerns that you'll have to balance in your embedding. There's not necessarily a one-size-fits-all solution for you such as \"just point a web browser at it\" at this time.</p>",
        "id": 489334551,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1734380585
    },
    {
        "content": "<p>Thanks! Winch reduced the processing time to 8 seconds. I'll also look into AOT. Additionally, I think there are potential optimizations I can do in Datafusion.</p>",
        "id": 489633090,
        "sender_full_name": "Utilize3214",
        "timestamp": 1734504566
    }
]