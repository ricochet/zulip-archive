[
    {
        "content": "<p>Hello all,</p>\n<p>I am using Rust and WASM to implement a simulation engine. In short, the Rust host process handles graphics, config, etc. and WASM modules are doing the processing. My current architecture would call for modules to process many \"large\" (many MB) buffers as quickly as possible.</p>\n<p>My problem therefore is passing these buffers around between the WASM modules. <code>Resource</code> types solve the main problem of being able to pass a buffer around by reference. But now my problem is: how do you get the data out of a <code>Resource</code> in an efficient manner? It seems you either have to play nice with the type system (get one record at a time or return an _owned_ list, which requires copying) or you return a memory offset and calculate the pointer in the module.</p>\n<p>To highlight this, here's a toy Buffer WIT definition showing a few different ways to get at the data in a resource:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"o\">-</span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">single</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">float32</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">chunk</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">float32</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">chunk</span><span class=\"o\">-</span><span class=\"n\">pointer</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If you try to implement this on the Host, you get something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">HostBuffer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">BufferManager</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_single</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">self_</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_chunk</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">self_</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_chunk_pointer</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">self_</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">drop</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rep</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">Buffer</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Again, I'm calling out the owned <code>Vec&lt;f32&gt;</code>.</p>\n<p>If trying to implement this in the guest, you get this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestBuffer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Buffer</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_single</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">f32</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_chunk</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wit_bindgen</span>::<span class=\"n\">rt</span>::<span class=\"n\">vec</span>::<span class=\"nb\">Vec</span>::<span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">get_chunk_pointer</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">todo!</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What I _think_ the \"best\" way for my goals is to do the following:</p>\n<ol>\n<li>implement a buffer resource type on the Host</li>\n<li>allocate data from linear memory</li>\n<li>return memory offsets</li>\n<li>make a library that all of the processing modules can use to do the offset -&gt; slice unsafe conversion</li>\n</ol>\n<p>However, I would really like to play nicer with the type system in the Component Model and avoid unsafe code. I would love to get some feedback on whether this is the right way or if there is some other approach that would be more idiomatic.</p>\n<p>Thank you!</p>",
        "id": 419614816,
        "sender_full_name": "Andrew Fields",
        "timestamp": 1706971614
    },
    {
        "content": "<p>If your use case requires quickly sending MB of arrays and the current implementations aren't fast enough then the component model may not be a great fit for your use case right now. You've already found the \"main\" way of doing this which is to use resource handles, but as you've seen the component model has no primitive notion of a buffer at this time so the only option is to take/return <code>list&lt;f32&gt;</code>. Also as you've seen bindings generators change that to <code>Vec&lt;f32&gt;</code> which is an owned allocation which implies copies.</p>\n<p>It's technically possible to achieve what you want with the component model right now, but it will require you to not use bindings generators for the function that transfers things. For example Wasmtime has <code>wasmtime::component::WasmList</code> which is a list that lives in wasm and isn't copied. In Rust you'd have to export your own function which does not have a post-return to clean up the allocation because you wouldn't return an owned allocation. In that sense it's technically feasible to achieve zero-copy transfers, but it's not easy today and bindings generators are not currently built to enable this.</p>\n<p>That's why I say that the component model may not be a great fit for this use case right now. If you're hesitant to hack on bindings generators a copy will be required today.  If you feel ok diving into all the details here and hacking on bindings generators and/or writing code that's at the bindings generator level, then you can probably achieve this. It'll require a nontrivial amount of knowledge about how lifting/lowering all interact in the component model.</p>\n<p>All that being said this is a use case I'd love to at least personally see enabled, so I'd be happy to help out with questions and guidance if you'd like. One thing I'll point out though:</p>\n<blockquote>\n<p>What I _think_ the \"best\" way for my goals is to do the following:</p>\n</blockquote>\n<p>One point to keep in mind is that the Component Model as an abstraction doesn't allow embedders to see the raw whole linear memory of the guest module. In that sense there's not even an <code>unsafe</code> way to implement what you outlined above. The \"unsafe\" way is <code>WasmList&lt;f32&gt;</code> (plus adding an <code>as_le_slice</code> method for <code>f32</code> which doesn't currently exist) and then plumbing that through the host bindings. The guest side will need to be handwritten at this time</p>",
        "id": 419628307,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706983166
    },
    {
        "content": "<p>Thanks Alex for the detailed response.</p>\n<p>I'm definitely interested in figuring out a way to do this and document it. If I get deep enough in the weeds I wouldn't mind contributing to the bindgen projects to make it work.</p>\n<p>With that being said, it sounds like the things I need to be looking at are:</p>\n<ol>\n<li>Unpacking how the bindgen function references actually call WASM code</li>\n<li>Implement <code>as_le_slice</code> for <code>WasmList&lt;f32&gt;</code></li>\n<li>Copying the above bindgen mechanism and returning a <code>WasmList&lt;f32&gt;</code> that does a <code>mem::forget</code> or similar</li>\n</ol>\n<blockquote>\n<p>One point to keep in mind is that the Component Model as an abstraction doesn't allow embedders to see the raw whole linear memory of the guest module.</p>\n</blockquote>\n<p>I was not aware of this. In my prototyping I must have just got lucky when passing either the pointer directly as a <code>u64</code> or a memory offset as a <code>u32</code>.</p>",
        "id": 419645180,
        "sender_full_name": "Andrew Fields",
        "timestamp": 1706997482
    },
    {
        "content": "<p>I feel this is the use case I tried to address by proposing borrow&lt;list&lt;T&gt;&gt; as a return type.<br>\nThis would enable reusing pre-allocated buffers in the guest without the convention to free the buffer after use.</p>\n<p>While this is equivalent to manually returning an address (s32), plus a length here, it still enables other guest languages to make sense of the return value.</p>\n<p>Of course a non-owned list is an alien data type in non-system languages. Sadly there also is no good way to express the lifetime of this buffer in wit.</p>\n<p>Writing into a list provided by the guest as an argument (a guest side array as the \"out\" argument to the function) is a more memory safe way to express this, but now the host can't predict the address before the call. The function could still return the number of valid elements.</p>\n<p>So perhaps a guest side resource is needed controlling the buffer lifetime (the host could retrieve the address via a method returning a borrow&lt;list&gt;, see above) and possibly a pollable would indicate new data valid, but then there is no good way to avoid overwriting data still used on the guest side without a locking mechanism.</p>\n<p>It feels like this quickly evolves into a complex mechanism, perhaps working on preview3's stream&lt;T&gt; is the most elegant and near term solution. <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 419675654,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707029777
    },
    {
        "content": "<p><span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span>  perhaps <a href=\"https://iceoryx.io/latest/\">iceorix2</a> provides the right abstraction to model this after, I am going to take a closer look there</p>",
        "id": 419680524,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707035270
    },
    {
        "content": "<p>For reference, here is a link to the previous discussion: <a href=\"#narrow/stream/327223-wit-bindgen/topic/borrowing.20records.3F.20.28shared.20data.29/near/379740418\">https://bytecodealliance.zulipchat.com/#narrow/stream/327223-wit-bindgen/topic/borrowing.20records.3F.20.28shared.20data.29/near/379740418</a></p>",
        "id": 419680742,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707035470
    },
    {
        "content": "<p>It looks like iceoryx2 is different from iceorix 2.x (which I wrongly linked to), iceoryx2 (the faster Rust rewrite of iceoryx) lives at <a href=\"https://github.com/eclipse-iceoryx/iceoryx2\">https://github.com/eclipse-iceoryx/iceoryx2</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/eclipse-iceoryx/iceoryx2\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9ce46719469ca1795c8e2cc3d219bd6e67471ae8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336136303034373834316163643162386162656137386534646334623135653131616262316361636666623739383530363037393934396533386631653036362f65636c697073652d6963656f7279782f6963656f72797832)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/eclipse-iceoryx/iceoryx2\" title=\"GitHub - eclipse-iceoryx/iceoryx2: Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust\">GitHub - eclipse-iceoryx/iceoryx2: Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust</a></div><div class=\"message_embed_description\">Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust - GitHub - eclipse-iceoryx/iceoryx2: Eclipse iceoryx2™ - true zero-copy inter-process-communication in pure Rust</div></div></div>",
        "id": 419682007,
        "sender_full_name": "Christof Petig",
        "timestamp": 1707036865
    },
    {
        "content": "<blockquote>\n<p>With that being said, it sounds like the things I need to be looking at are:</p>\n</blockquote>\n<p>That seems about right! Note that you in theory should not need <code>mem::forget</code> since buffers can still be properly managed even without it (e.g. no copies made). I have not yet implemented this, however, so I can't say that for sure.</p>\n<blockquote>\n<p>I was not aware of this. In my prototyping I must have just got lucky when passing either the pointer directly as a u64 or a memory offset as a u32.</p>\n</blockquote>\n<p>I'll note that there's a distinction between core wasm and components here. Core wasms inside of a component can indeed export their memories, it's components themselves that can't export memories (only primitives in the component model which does not include memories).</p>",
        "id": 419855374,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707144345
    },
    {
        "content": "<blockquote>\n<p>It feels like this quickly evolves into a complex mechanism, perhaps working on preview3's stream&lt;T&gt; is the most elegant and near term solution. </p>\n</blockquote>\n<p>This is definitely something AFAIK that <code>stream&lt;T&gt;</code> is intended to help solve. I'll note that <code>stream&lt;T&gt;</code> doesn't currently have a concrete design in the ways of \"here's what you would do to solve this exact problem\", however, but now's the right time to feed in design constraints!</p>",
        "id": 419855985,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707144502
    }
]