[
    {
        "content": "<p>How would I debug the wasm execution of a failure like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">_start</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x2b6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasm_init_memory</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304031375,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665753975
    },
    {
        "content": "<p>does 0x2b6 correspond to the address printed with <code>objdump -d </code> ?</p>",
        "id": 304031789,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665754112
    },
    {
        "content": "<p>That's the offset into the .wasm file where you'll find the instruction that caused the trap.  I've found <code>wasm-tools print --print-offsets foo.wasm</code> to be useful when debugging such cases.  You can get wasm-tools here: <a href=\"https://github.com/bytecodealliance/wasm-tools/\">https://github.com/bytecodealliance/wasm-tools/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/aae09379dce7f8288d1c8d46d561e45f72488ad4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663036643764366263313237363134376235656130393561323632326466313530666436613531663464373361316132386561656434323563623762616633642f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 304037948,
        "sender_full_name": "Joel Dice",
        "timestamp": 1665755854
    },
    {
        "content": "<p>perfect! <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> Thank you!</p>",
        "id": 304046608,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758220
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"n\">b6</span><span class=\"w\">   </span><span class=\"p\">;)</span><span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">notify</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304046650,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758233
    },
    {
        "content": "<p>This came up for someone else recently: <a href=\"#narrow/stream/217126-wasmtime/topic/Got.20out.20of.20bounds.20memory.20access.20from.20memory.2Eatomic.2Enotify/near/300167134\">https://bytecodealliance.zulipchat.com/#narrow/stream/217126-wasmtime/topic/Got.20out.20of.20bounds.20memory.20access.20from.20memory.2Eatomic.2Enotify/near/300167134</a></p>",
        "id": 304048674,
        "sender_full_name": "Lann Martin",
        "timestamp": 1665758795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span>  thanks!</p>",
        "id": 304048904,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758857
    },
    {
        "content": "<p>crates/runtime/src/libcalls.rs</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Implementation of `memory.atomic.notify` for locally defined memories.</span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">memory_atomic_notify</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// â€¦</span>\n<span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">anyhow</span>::<span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"unimplemented: wasm atomics (fn memory_atomic_notify) unsupported\"</span><span class=\"p\">,)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304049634,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665759041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449156\">Harald Hoyer</span> has marked this topic as resolved.</p>",
        "id": 306671467,
        "sender_full_name": "Notification Bot",
        "timestamp": 1666967965
    }
]