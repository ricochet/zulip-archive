[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> did you perhaps push to wasmtime master by accident?</p>",
        "id": 194488642,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587151522
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/commits/master\" title=\"https://github.com/bytecodealliance/wasmtime/commits/master\">https://github.com/bytecodealliance/wasmtime/commits/master</a> shows a few commits by you and CI <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1544/checks?check_run_id=596395982\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1544/checks?check_run_id=596395982\">is failing</a>, and was wondering if this was an accident or intentional</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commits/master\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commits/master\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1544/checks?check_run_id=596395982\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1544/checks?check_run_id=596395982\" title=\"Move most wasmtime tests into one test suite by alexcrichton · Pull Request #1544 · bytecodealliance/wasmtime\">Move most wasmtime tests into one test suite by alexcrichton · Pull Request #1544 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit moves most wasmtime tests into a single test suite which\ngets compiled into one executable instead of having lots of test\nexecutables. The goal here is to reduce disk space on CI, and t...</div></div></div>",
        "id": 194488687,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587151549
    },
    {
        "content": "<p>Uh... Weird</p>",
        "id": 194490163,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587152332
    },
    {
        "content": "<p>Dan just approved a PR so I merged it but it was a tad old</p>",
        "id": 194490208,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587152360
    },
    {
        "content": "<p>So CI may not have run on it recently</p>",
        "id": 194490235,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587152377
    },
    {
        "content": "<p>I'll investigate in 15 min?</p>",
        "id": 194490364,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587152440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> oh no worries</p>",
        "id": 194490656,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587152615
    },
    {
        "content": "<p>it may just be that it didn't show up as a merge commit</p>",
        "id": 194490668,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587152623
    },
    {
        "content": "<p>sounds good either way</p>",
        "id": 194490673,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587152626
    },
    {
        "content": "<p>and was probably just a normal merge conflict</p>",
        "id": 194490677,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587152630
    },
    {
        "content": "<p>oh d'oh if I click the commits they're obviously attached to a PR</p>",
        "id": 194490803,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587152693
    },
    {
        "content": "<p>So here's the resolution: since that PR was created we have added a brand new Aarch64 backend <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> which does not implement the new <code>ConstAddr</code> instruction I added. I'll open a PR for that.</p>",
        "id": 194491514,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587153104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> was just looking at that; since the new backend currently does its own thing for constants, you can probably just add a <code>panic!()</code> to the big lowering <code>match op { ... }</code></p>",
        "id": 194491635,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587153167
    },
    {
        "content": "<p>unless there's some other place <code>const_addr</code> is used that I don't know about yet :-)</p>",
        "id": 194491682,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587153196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> oh I also sent <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1546\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1546\">https://github.com/bytecodealliance/wasmtime/pull/1546</a> just now</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1546\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1546\" title=\"Fix a compile issue on master by alexcrichton · Pull Request #1546 · bytecodealliance/wasmtime\">Fix a compile issue on master by alexcrichton · Pull Request #1546 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Fixes an accidental \"merge conflict\" from #1377</div></div></div>",
        "id": 194491997,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587153339
    },
    {
        "content": "<p>but if you have an actual implementation we should close that</p>",
        "id": 194492008,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587153345
    },
    {
        "content": "<p>Ha, no, I just pushed the same thing: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1548\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1548\">https://github.com/bytecodealliance/wasmtime/pull/1548</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1548\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1548\" title=\"Resolve CI failures related to ConstAddr and Aarch64 by abrown · Pull Request #1548 · bytecodealliance/wasmtime\">Resolve CI failures related to ConstAddr and Aarch64 by abrown · Pull Request #1548 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">@alexcrichton, initially I am going to try this out as unimplemented! but it wouldn&#39;t be difficult to implement: it&#39;s a single LEA in x86. @cfallin, is there a quick fix for this? Where do ...</div></div></div>",
        "id": 194492483,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587153583
    },
    {
        "content": "<p>I propose we merge one of those and then open an issue to implement this... it should be very similar to <code>HeapAddr</code> and <code>TableAddr</code></p>",
        "id": 194492683,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587153638
    },
    {
        "content": "<p>What do you all think? <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span></p>",
        "id": 194492960,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587153789
    },
    {
        "content": "<p>:+1+ merged</p>",
        "id": 194493003,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587153815
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> just commented there; constant pool stuff will be a bit more complex on ARM because of limited address range for PC-rel addressing. Happy to talk more about this later though; looks like it's important for vector constants?</p>",
        "id": 194493215,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587153929
    },
    {
        "content": "<p>Yeah <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span>; currently the x86 backend is emitting constants in the code section as well, right after the function body</p>",
        "id": 194493324,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587153982
    },
    {
        "content": "<p>is that the same in the ARM backend?</p>",
        "id": 194493364,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154011
    },
    {
        "content": "<p>Oh, we do even better than that, and emit the constant right after the load-PC-rel-addr instruction and a branch around the constant</p>",
        "id": 194493384,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154023
    },
    {
        "content": "<p>The \"right\" way to do it is to defer emission to the end, except for emitting islands of constants if the function is &gt; 1MB large</p>",
        "id": 194493417,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154038
    },
    {
        "content": "<p>But this works for now and let us avoid gnarly issues with that and with SpiderMonkey relocating the constant pool (which it does to insert its own epilogue)</p>",
        "id": 194493471,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154072
    },
    {
        "content": "<p>Ok, that is what <code>ConstantPool</code> is designed to do</p>",
        "id": 194493486,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154080
    },
    {
        "content": "<p>...the \"defer emission to the end\" part</p>",
        "id": 194493539,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154093
    },
    {
        "content": "<p>Got it; I have some thoughts on how to extend it for the \"emit when we're about to get out of range\" constant-island case; I'll create an issue to track this</p>",
        "id": 194493627,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154142
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194493642,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154153
    },
    {
        "content": "<p>In the meantime, can we implement ConstAddr?</p>",
        "id": 194494133,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154396
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"https://github.com/bytecodealliance/wasmtime/issues/1549\">https://github.com/bytecodealliance/wasmtime/issues/1549</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/1549\" title=\"Cranelift aarch64 backend: use constant pool to defer constant emission to the end, unless out of range · Issue #1549 · bytecodealliance/wasmtime\">Cranelift aarch64 backend: use constant pool to defer constant emission to the end, unless out of range · Issue #1549 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently, to avoid issues with (i) the PC-relative addressing range of LDR, and (ii) the fact that the constant pool needs to be relocatable, the aarch64 backend emits constants inline with code a...</div></div></div>",
        "id": 194494152,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154407
    },
    {
        "content": "<p>Do you keep track of the pc-rel offset somewhere?</p>",
        "id": 194494182,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154419
    },
    {
        "content": "<p>No, right now we hardcode \"current inst + 8\" because of the open-coded \"LDR, jump around constant, constant\" sequence</p>",
        "id": 194494295,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154461
    },
    {
        "content": "<p>Ah, ok; so I guess unimplemented! is the right way to go for now.</p>",
        "id": 194494359,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154502
    },
    {
        "content": "<p>Yeah, I'll need to think about this a little bit, sorry! RIght now we basically have done our own thing to get stuff working for evaluation/MVP purposes. There's a bit more work to integrate fully here</p>",
        "id": 194494417,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154534
    },
    {
        "content": "<p>Actually -- maybe it's not so bad if it's OK to duplicate the constant whenever referenced. Basically, a <code>const_addr</code> would serve both to emit the constant and give an address to it</p>",
        "id": 194494567,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154612
    },
    {
        "content": "<p>Then the emission is just the same as <code>LoadConst64</code> except instead of <code>LDR</code> (a normal 64-bit load from the embedded constant), we use <code>ADR</code> (get address of PC-rel thing)</p>",
        "id": 194494602,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154636
    },
    {
        "content": "<p>There's an idea</p>",
        "id": 194494613,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154646
    },
    {
        "content": "<p>I mean, implementing ConstAddr shouldn't be the biggest priority but if that is easy to do...</p>",
        "id": 194494650,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154676
    },
    {
        "content": "<p>Yup, I'll put this on my list. Question: is it used just for vector constants, or do we anticipate other uses (constant array data, ...) as well?</p>",
        "id": 194494718,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154701
    },
    {
        "content": "<p>IIRC, other people mentioned other use cases but all I cared about was SIMD at the time <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 194494822,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154769
    },
    {
        "content": "<p>Cool, well we should make it work on arm64 for sure then. Thanks!</p>",
        "id": 194494844,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1587154788
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 194494926,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1587154816
    }
]