[
    {
        "content": "<p>I've been poking around at the memory-related translation code in wasmtime/cranelift today. One thing I'm curious about (<span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> maybe you know the answer to this) is why the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/crates/environ/src/tunables.rs#L33-L38\" title=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/crates/environ/src/tunables.rs#L33-L38\">default guard size on 64-bit</a> is only 2gb</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/crates/environ/src/tunables.rs#L33-L38\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/crates/environ/src/tunables.rs#L33-L38\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 193957153,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586898358
    },
    {
        "content": "<p>I still need to figure out how to inspect machine code, but it looks like that means we still emit a bound check for all memory accesses from reading the code</p>",
        "id": 193957216,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586898381
    },
    {
        "content": "<p>I thought that we'd want to use a 4gb guard size to remove all needs for a bounds check?</p>",
        "id": 193957252,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586898403
    },
    {
        "content": "<p>b/c you could have a 2^32-1 offset from the 2^32-1 address</p>",
        "id": 193957294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586898427
    },
    {
        "content": "<p>which I think means we'd need 8gb of reserved address space?</p>",
        "id": 193957312,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586898439
    },
    {
        "content": "<p>It's because x86 address offsets are encoded as signed 32-bit offsets, so the greatest offset we can codegen directly is 2 GiB</p>",
        "id": 193959727,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586899968
    },
    {
        "content": "<p>hm so to make sure I understand</p>",
        "id": 193959762,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900008
    },
    {
        "content": "<p>The guard size is added to the static memory bound</p>",
        "id": 193959778,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900022
    },
    {
        "content": "<p>we only have a 2GB guard page, so we need a bounds check (conditional branch) for offsets &gt;= 2GB</p>",
        "id": 193959780,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900023
    },
    {
        "content": "<p>but without that we would need a second instruction, right?</p>",
        "id": 193959791,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900032
    },
    {
        "content": "<p>so we're trading an <code>add</code> for a bounds check?</p>",
        "id": 193959800,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900042
    },
    {
        "content": "<p>We need extra instructions for wasm load/store offsets which are &gt; 2 GiB</p>",
        "id": 193959851,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900055
    },
    {
        "content": "<p>which are very rare</p>",
        "id": 193959862,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900061
    },
    {
        "content": "<p>*offset immediates, to be specific</p>",
        "id": 193959901,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900081
    },
    {
        "content": "<p>oh for sure yeah</p>",
        "id": 193959910,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900089
    },
    {
        "content": "<p>but the codegen for &gt;=2GB offsets would be more optimal if we had a bigger guard size</p>",
        "id": 193959936,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900104
    },
    {
        "content": "<p>like not saying we should, just making sure I understand the lay of the land</p>",
        "id": 193959958,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900125
    },
    {
        "content": "<p>yeah</p>",
        "id": 193959964,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900130
    },
    {
        "content": "<p>mk</p>",
        "id": 193959989,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900153
    },
    {
        "content": "<p>while you're here, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> do you know why <a href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/wasm/src/code_translator.rs#L1722\" title=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/wasm/src/code_translator.rs#L1722\">there's a <code>+ 1</code> here</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/wasm/src/code_translator.rs#L1722\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/c5b6c57c34f89d865e07939eff67d6687e9339e2/cranelift/wasm/src/code_translator.rs#L1722\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 193960044,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900166
    },
    {
        "content": "<p>the comments don't really illuminate to me why it's there</p>",
        "id": 193960056,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900172
    },
    {
        "content": "<p>or rather I don't fully understand why that +1 is necessary</p>",
        "id": 193960070,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900182
    },
    {
        "content": "<p>(even with the comments)</p>",
        "id": 193960077,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900189
    },
    {
        "content": "<p>iirc, it's to support unaligned accesses, which might have a base which is in bounds, but extend out of bounds</p>",
        "id": 193960452,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900507
    },
    {
        "content": "<p>hm but even that I don't fully understand</p>",
        "id": 193960531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900537
    },
    {
        "content": "<p>because we might generate multiple accesses, and ensure that even if we do the out-of-bounds one first, it still traps immediately</p>",
        "id": 193960562,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900560
    },
    {
        "content": "<p>or wait I guess it's trying to make sure <code>check_size</code> is always nonzero?</p>",
        "id": 193960567,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900563
    },
    {
        "content": "<p>I don't see how this is related to aligned stuff though</p>",
        "id": 193960593,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900585
    },
    {
        "content": "<p>I don't know why <code>check_size</code> needs to be nonzero though</p>",
        "id": 193960618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900602
    },
    {
        "content": "<p>/me confused</p>",
        "id": 193960631,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900614
    },
    {
        "content": "<p>Put another way I'm removing this +1 and everything is still passing</p>",
        "id": 193960834,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900744
    },
    {
        "content": "<p>and I'm pretty sure we don't need this +1</p>",
        "id": 193960840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900748
    },
    {
        "content": "<p>so this is a pre-flight check to see if I'm forgetting something</p>",
        "id": 193960855,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900756
    },
    {
        "content": "<p>/me is paging this code in</p>",
        "id": 193960911,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900773
    },
    {
        "content": "<p>The relevant comment is just above: \"Add one to make sure that we check the pointer itself is in bounds.\"</p>",
        "id": 193960972,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586900827
    },
    {
        "content": "<p>right yeah, but that doesn't make sense to me</p>",
        "id": 193960983,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900837
    },
    {
        "content": "<p>I don't know what the \"pointer itself\" is there, because we're doing a pointer check anyway</p>",
        "id": 193961005,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900855
    },
    {
        "content": "<p>I know for a fact that there's a bug here if <code>offset_guard_size == 0</code>, though, and this may have been trying to account for that at some point</p>",
        "id": 193961017,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900874
    },
    {
        "content": "<p>if there's no guard page then we need to check <code>+ width_of_access</code>, not <code>+ 1</code> though</p>",
        "id": 193961057,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900886
    },
    {
        "content": "<p>so this may have just been a mistake where <code>+1</code> was used in lieu of <code>+ width_of_access</code></p>",
        "id": 193961072,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586900904
    },
    {
        "content": "<p>ok, yeah, I don't recall why it's written like that</p>",
        "id": 193961616,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1586901292
    },
    {
        "content": "<p>k no worries</p>",
        "id": 193961679,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586901329
    },
    {
        "content": "<p>I'll send a PR and I'm trying to improve some comments along the way too</p>",
        "id": 193961686,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1586901336
    }
]