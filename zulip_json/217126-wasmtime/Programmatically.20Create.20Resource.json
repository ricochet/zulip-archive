[
    {
        "content": "<p>Is there anyway to do this? I would like to test out my event loop and have mocked out most of the external things. One part that is catching me is I wouod like to create a programmable resource that is pollable? Is it possible? If not I will just mock that as well</p>",
        "id": 428105284,
        "sender_full_name": "Ashanti Mutinta",
        "timestamp": 1711020042
    },
    {
        "content": "<p>This sort of depends to the degree to which you're mocking. Arbitrary host resources can be made at any time with <code>Resource::new_{own,borrow}</code>, all you need is a 32-bit number to put in there. If that number never ends up being used, for example the resource is never passed to <code>wasi:io/poll</code>, then it doesn't matter too much what the number is. If you want to create an arbitrary real pollable resource then you'll need to use the same pollable type as <code>wasmtime-wasi</code>, and the crate isn't 100% built for mocking but it should be possible since I think that one is trait-based.</p>\n<p>For guest-defined resources there's no way to mock those out, they have to come from the guest</p>",
        "id": 428147483,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711032517
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Programmatically.20Create.20Resource/near/428147483\">said</a>:</p>\n<blockquote>\n<p>This sort of depends to the degree to which you're mocking. Arbitrary host resources can be made at any time with <code>Resource::new_{own,borrow}</code>, all you need is a 32-bit number to put in there. If that number never ends up being used, for example the resource is never passed to <code>wasi:io/poll</code>, then it doesn't matter too much what the number is. If you want to create an arbitrary real pollable resource then you'll need to use the same pollable type as <code>wasmtime-wasi</code>, and the crate isn't 100% built for mocking but it should be possible since I think that one is trait-based.</p>\n<p>For guest-defined resources there's no way to mock those out, they have to come from the guest</p>\n</blockquote>\n<p>Awesome this worked out well for me thank you!</p>",
        "id": 428212545,
        "sender_full_name": "Ashanti Mutinta",
        "timestamp": 1711053200
    }
]