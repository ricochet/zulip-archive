[
    {
        "content": "<p>I currently try to upgrade my real-world host from wasmtime 10 to wasmtime 13 and noticed that quite a few things have changed. To better understand I observe a current <a href=\"https://github.com/bytecodealliance/component-docs/tree/main/component-model/examples\">wasmtime example</a> where a <strong>component is created and the component is loaded from a Rust application</strong>.</p>\n<p>One difference between given example and my current application is the <code>data</code> parameter of <code>Store</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// my real-world app based on wasmtime 10</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">data</span>: <span class=\"mi\">0</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// wasmtime example based on wasmtime 13</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_view</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ServerWasiView</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_view</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>where <code>ServerWasiView</code> is a struct with the two fields <code>table</code> and <code>ctx</code>.</p>\n<p>My question is: do I need <code>ServerWasiView</code> at all in order to launch a component from a Rust application?<br>\nWhat is it good for?</p>",
        "id": 394994855,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1696496455
    },
    {
        "content": "<p>If you plan on using WASI then the <code>WasiView</code> trait is required to be implemented for the <code>T</code> in <code>Store&lt;T&gt;</code>, but if you don't plan on using WASI there's no need to use that</p>",
        "id": 395054067,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696515460
    },
    {
        "content": "<p>(wrong chat maybe here trevor)</p>",
        "id": 395084147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696524912
    },
    {
        "content": "<p>absolutely was, sorry about that!</p>",
        "id": 395084485,
        "sender_full_name": "Trevor Elliott",
        "timestamp": 1696525047
    },
    {
        "content": "<p>Thank you for the clarification. I just need a \"plain\" component, at least currently. In my existing application, I compile to <code>wasm32-unknown-unknown</code> and transform it to a component with <strong>wasm-tools</strong> thereafter. So I guess, I will try it again without wasi: <code>data: 0</code>.</p>",
        "id": 395100565,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1696531529
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"595146\">Christoph Brewing</span> has marked this topic as resolved.</p>",
        "id": 395100588,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696531535
    }
]