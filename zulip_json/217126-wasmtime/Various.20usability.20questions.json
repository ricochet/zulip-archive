[
    {
        "content": "<p>Hello,<br>\nI have a couple of questions regarding the usage of wasmtime:<br>\nFirst, I have noticed that <code>Instance</code> is <code>!Send</code> and <code>!Sync</code>, but individual <code>Func::get</code> closures are not. Does that mean I can \"extract\" a functions via this method and invoke it from multiple threads, simultaneously?<br>\nSecond, is it currently possible to use <code>String</code> as a parameter/return type for exported functions? I tried using version 0.16.0, but ran into some compilation errors in the <code>wasmtime</code> macro, related to the \"wasmtime-interface-types\" crate. I am able to use <code>String</code>s in version 0.8.0.</p>",
        "id": 196833951,
        "sender_full_name": "Jakub Hlusička",
        "timestamp": 1588887740
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300100\">@Jakub Hlusička</span> oh dear that's a bug, <code>Func</code> closures extracted should not be <code>Send</code> or <code>Sync</code></p>",
        "id": 196834644,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888143
    },
    {
        "content": "<p>otherwise interface types are currently not implemented in wasmtime so you can't pass a string right now</p>",
        "id": 196834675,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888167
    },
    {
        "content": "<p>you'll need to manually copy in/out of wasm memory</p>",
        "id": 196834686,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888174
    },
    {
        "content": "<p>We hope to implement it in the near future though!</p>",
        "id": 196834698,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888179
    },
    {
        "content": "<p>hm although testing now <code>Func::get</code> return values aren't <code>Send</code>/<code>Sync</code> for me?</p>",
        "id": 196834875,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888282
    },
    {
        "content": "<p>this may have been something which accidentally regressed which we ended up fixing recently though</p>",
        "id": 196834914,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888301
    },
    {
        "content": "<p>Hmm, I thought I could tell by looking at the function signature: <a href=\"https://docs.rs/wasmtime/0.16.0/wasmtime/struct.Func.html#method.get1\" title=\"https://docs.rs/wasmtime/0.16.0/wasmtime/struct.Func.html#method.get1\">https://docs.rs/wasmtime/0.16.0/wasmtime/struct.Func.html#method.get1</a></p>",
        "id": 196835066,
        "sender_full_name": "Jakub Hlusička",
        "timestamp": 1588888382
    },
    {
        "content": "<p>oh so not always, in that case it returns <code>impl Fn()</code> which means the compiler is still auto-inferring Send/Sync</p>",
        "id": 196835117,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888415
    },
    {
        "content": "<p>I don't believe the documentation renders the Send/Sync inference right now</p>",
        "id": 196835133,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588888426
    },
    {
        "content": "<p>I see, that makes sense. I am intending on using WebAssembly for stateless scripting for a game, and I am trying to make it possible to invoke certain functions exported by a module in parallel. I guess the only option, then, is to instantiate several modules on separate threads, and then distribute the work across those instances.</p>",
        "id": 196835578,
        "sender_full_name": "Jakub Hlusička",
        "timestamp": 1588888707
    },
    {
        "content": "<p>Ah yes currently you can't share wasm instances across threads</p>",
        "id": 196836651,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588889355
    },
    {
        "content": "<p>(or, rather, you'll never be able to do that)</p>",
        "id": 196836660,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588889362
    },
    {
        "content": "<p>eventually we'll support two instances sharing a memory across threads</p>",
        "id": 196836666,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588889370
    },
    {
        "content": "<p>but we don't have support for that yet</p>",
        "id": 196836676,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588889375
    },
    {
        "content": "<p>Alright, thank you for the help! Have a nice day.</p>",
        "id": 196836889,
        "sender_full_name": "Jakub Hlusička",
        "timestamp": 1588889511
    }
]