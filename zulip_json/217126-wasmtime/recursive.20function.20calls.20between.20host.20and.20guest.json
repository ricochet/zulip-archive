[
    {
        "content": "<p>Recursion is weird, so i will try to explain this in as few words as possible.</p>\n<p>I want to register a host fn which can take a wasm fn as argument.<br>\nand i want that argument (wasm fn)  to also be able to take a fn as an argument so that i can recursively call it <em>if needed so</em> which itself might call into the original host fn and so on...</p>\n<p>I am basically looking into egui + wasm scripting. egui uses a heavy closure based api like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Window</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"s\">\"hello window\"</span><span class=\"p\">).</span><span class=\"n\">show</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">ui</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">button</span><span class=\"p\">(</span><span class=\"s\">\"top ui\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"n\">ui</span><span class=\"p\">.</span><span class=\"n\">horizontal</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">hui</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hui</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s\">\"horizontal ui label\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">hui</span><span class=\"p\">.</span><span class=\"n\">child_ui</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">cui</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">cui</span><span class=\"p\">.</span><span class=\"n\">label</span><span class=\"p\">(</span><span class=\"s\">\"inner child ui\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>here, <code>show</code> is a host fn, and this wasm closure needs to be called by that fn with ui as argument. and ofcourse, all the button/horizontal/child_ui/label fns are host bindings too.</p>\n<p>so, to provide those bindings, i need to take wasm closures and wasm closures might call host bindings (like <code>child_ui</code> or <code>horizontal</code>) recursively.</p>\n<p>I am thinking that its not possible, but wanted to ask here just in case.</p>",
        "id": 325038167,
        "sender_full_name": "code red art",
        "timestamp": 1675207152
    },
    {
        "content": "<p>This is all theoretically possible with building blocks in the Wasmtime API. For example if you'd like you can use the <code>funcref</code> type which is <code>Option&lt;Func&gt;</code> as an argument. Both a wasm and a host function can become a <code>Func</code>. Few wasm guests have native support for <code>funcref</code>, though, so an analogue would instead be to communicate with indices that are actually indexes into a <code>Table</code> where the host can store functions in there along with the guest.</p>\n<p>Your hardest part, however, is likely going to be wrangling mutability. Invocations of wasm require <code>&amp;mut Store&lt;T&gt;</code> which means that you have to thread that all the way from when the host was called into back to where the wasm is being invoked. If this is spread out across an application that probably won't work too well, but if it's a local decision it may be easier. </p>\n<p>In any case what you want is possible in theory, but you may run into limitations trying to wrangle this all into Rust (as I'm sure the egui folks did as they designed APIs in Rust too!)</p>",
        "id": 325049785,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1675212909
    },
    {
        "content": "<blockquote>\n<p>Few wasm guests have native support for funcref</p>\n</blockquote>\n<p>can rust as a guest turn a closure into <code>funcref</code>?</p>",
        "id": 325051116,
        "sender_full_name": "code red art",
        "timestamp": 1675213665
    },
    {
        "content": "<p>a <code>funcref</code> is akin to a function pointer, so no, it doesn't have data associated with that. If you need data then you would need to forward that along through arguments</p>",
        "id": 325051275,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1675213762
    },
    {
        "content": "<p>Is there any way you could pass a more complex type to a host function or set it on the store from within the wasm module? What's really the \"standard\" way to get data back from a module when running it with wasmtime? Just beeing able to pass a json-serialized string in between would be a huge benefit.</p>\n<p>I did attempt to pipe stdout as described in the link <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> was kind enough to provide, but without luck. After dropping the store and printing the contents there was just an empty vector. Will it pipe return-values from the functions in wasm or should I explicitly write to stdout from inside the module like <code>io::stdout().write_all(b\"hello world\")?;</code>?</p>",
        "id": 325082798,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675236277
    },
    {
        "content": "<p>you most likely would want to use interface types and optimally the component model, but I would honestly suggest to give them air to breathe, the way in which you load and call complex functions (returning more than u32) is being fleshed out right now, Dan mentioned he thinks he should have a working example to showcase around March :)</p>",
        "id": 325145244,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1675254907
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"550770\">Ramon Klass</span> <a href=\"#narrow/stream/217126-wasmtime/topic/recursive.20function.20calls.20between.20host.20and.20guest/near/325145244\">said</a>:</p>\n<blockquote>\n<p>you most likely would want to use interface types and optimally the component model, but I would honestly suggest to give them air to breathe, the way in which you load and call complex functions (returning more than u32) is being fleshed out right now, Dan mentioned he thinks he should have a working example to showcase around March :)</p>\n</blockquote>\n<p>I see, wow, that's a fantastic <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\">spec</a>! Looking forward to see that in place :)</p>\n<p>In the meantime, i suppose reading/writing into shared memory would be the way to go to pass more complex types in between rust and wasm? I'm thinking I may give that a go for now. I found the wasmtime <code>Memory</code> documentation, so I can probably figure out how to pass stuff in and how to read them out - but I'm not sure how to interact with the memory inside the wasm module - grateful for any tips that might help</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/71ed8d4c5d33ac2734c08accdabc5eaac65f098f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313165636164376465663335356434306465663534346130656662306131343437396461383237653032353164326539663230303964653662623239373538342f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\" title=\"component-model/Explainer.md at main · WebAssembly/component-model\">component-model/Explainer.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/Explainer.md at main · WebAssembly/component-model</div></div></div>",
        "id": 325325615,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675320658
    },
    {
        "content": "<p>This looks like an example of reading/writing to a shared memory buffer - right? <br>\n<a href=\"https://wasmbyexample.dev/examples/webassembly-linear-memory/webassembly-linear-memory.rust.en-us.html\">https://wasmbyexample.dev/examples/webassembly-linear-memory/webassembly-linear-memory.rust.en-us.html</a></p>",
        "id": 325331078,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675323311
    }
]