[
    {
        "content": "<p>I had the following code to link a host function</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">host_hello</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Func</span>::<span class=\"n\">wrap</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">t</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">thread</span>::<span class=\"n\">spawn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Got {} from WebAssembly\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">param</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"my host state is: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">t</span><span class=\"p\">.</span><span class=\"n\">join</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and it gives an error saying that </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0277<span class=\"o\">]</span>: the trait bound <span class=\"sb\">`</span><span class=\"o\">[</span>closure@src/main.rs:25:45: <span class=\"m\">31</span>:6<span class=\"o\">]</span>: IntoFunc&lt;<span class=\"o\">{</span>integer<span class=\"o\">}</span>, _, _&gt;<span class=\"sb\">`</span> is not satisfied\n   --&gt; src/main.rs:25:22\n    <span class=\"p\">|</span>\n<span class=\"m\">25</span>  <span class=\"p\">|</span>     <span class=\"nb\">let</span> <span class=\"nv\">host_hello</span> <span class=\"o\">=</span> Func::wrap<span class=\"o\">(</span><span class=\"p\">&amp;</span>mut store, <span class=\"p\">|</span>caller: Caller&lt;<span class=\"err\">'</span>static, u32&gt;, param: i32<span class=\"p\">|</span> <span class=\"o\">{</span>\n    <span class=\"p\">|</span>                      ^^^^^^^^^^ the trait <span class=\"sb\">`</span>IntoFunc&lt;<span class=\"o\">{</span>integer<span class=\"o\">}</span>, _, _&gt;<span class=\"sb\">`</span> is not implemented <span class=\"k\">for</span> <span class=\"sb\">`</span><span class=\"o\">[</span>closure@src/main.rs:25:45: <span class=\"m\">31</span>:6<span class=\"o\">]</span><span class=\"sb\">`</span>\n</code></pre></div>\n<p>I read the <a href=\"https://docs.wasmtime.dev/api/wasmtime/trait.IntoFunc.html\">documentation</a> of IntoFunc, which says that </p>\n<blockquote>\n<p>This trait should not be implemented by external users, itâ€™s only intended as an implementation detail of this crate.</p>\n</blockquote>\n<p>So I am wondering if it is possible to have a static caller in host function?</p>",
        "id": 287516987,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1656281842
    },
    {
        "content": "<p>it's not possible because the <code>Caller</code> is only valid while your wrapped function is called, and if it was <code>'static</code> then you could store it in some global state that outlives that call</p>\n<p>if you want to be able to spawn threads that use the <code>Caller</code>, you can use scoped threads (either from crossbeam or the upcoming support for scoped threads in <code>std</code>)</p>",
        "id": 287597572,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1656345092
    },
    {
        "content": "<p>Ahh thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>  I didn't know scopethread like crossbeam existed.</p>",
        "id": 287601432,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1656346647
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"487764\">mossaka</span> has marked this topic as resolved.</p>",
        "id": 287601441,
        "sender_full_name": "Notification Bot",
        "timestamp": 1656346652
    }
]