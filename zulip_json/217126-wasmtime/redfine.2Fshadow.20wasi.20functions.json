[
    {
        "content": "<p>hey all,</p>\n<p>i'm messing around and wanted to see if it'd be possible to redefine an existing wasi function. I don't really have a goal in mind, but thought it'd be neat to define my own behavior for a small subset of existing wasi functions. :)</p>\n<p>the tutorial and docs made it really easy to get up and running (thanks!) but I'm getting an error about memory exports I don't really understand. </p>\n<p>my little snippet so far is this code, shoved into the middle of the <a href=\"https://docs.wasmtime.dev/examples-rust-wasi.html\">example from 2.3.4 in the guide</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">original_env_get</span>: <span class=\"nc\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">env_get</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"environ_get\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">anyhow</span>::<span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"missing environ_get\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">env_get</span><span class=\"p\">.</span><span class=\"n\">typed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">allow_shadowing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"environ_get\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">original_env_get</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)),</span>\n<span class=\"w\"> </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>when I run it with a guest that actually tries to get an env var, I get a backtrace that looks like this. I'm not sure what to make of it - am I accidentally clobbering other parts of the wasi component by shadowing? any tips for reading this error better?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ cargo run -p host -- ./target/wasm32-wasi/debug/guest.wasm\n   Compiling host v0.1.0 (/Users/benl/src/hello-wasmtime/host)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.88s\n     Running `target/debug/host ./target/wasm32-wasi/debug/guest.wasm`\nError: error while executing at wasm backtrace:\n    0: 0x9b66 - &lt;unknown&gt;!__wasi_environ_get\n    1: 0x9b24 - &lt;unknown&gt;!__wasilibc_initialize_environ\n    2: 0x9a96 - &lt;unknown&gt;!__wasilibc_ensure_environ\n    3: 0x9c4d - &lt;unknown&gt;!getenv\n    4: 0x3b2a - &lt;unknown&gt;!std::env::_var_os::ha6d753b2be7fe17f\n    5: 0x3c99 - &lt;unknown&gt;!std::env::_var::hd7c38fcd0ed4a72d\n    6: 0x1829 - &lt;unknown&gt;!std::env::var::hd342252c7c9996f3\n    7: 0x14f4 - &lt;unknown&gt;!guest::main::hb3d545227282da60\n    8:  0xac4 - &lt;unknown&gt;!core::ops::function::FnOnce::call_once::hdf6e14f7ebde9f53\n    9:  0xf43 - &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::ha23fe57107e63372\n   10:  0xecb - &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h919e8dda9de0d648\n   11: 0x3807 - &lt;unknown&gt;!std::rt::lang_start_internal::h409072ad2c29d9a2\n   12:  0xe68 - &lt;unknown&gt;!std::rt::lang_start::ha5e1690a3bb184c3\n   13: 0x160e - &lt;unknown&gt;!__main_void\n   14:  0x2f6 - &lt;unknown&gt;!_start\n   15: 0x9b66 - &lt;unknown&gt;!__wasi_environ_get\n   16: 0x9b24 - &lt;unknown&gt;!__wasilibc_initialize_environ\n   17: 0x9a96 - &lt;unknown&gt;!__wasilibc_ensure_environ\n   18: 0x9c4d - &lt;unknown&gt;!getenv\n   19: 0x3b2a - &lt;unknown&gt;!std::env::_var_os::ha6d753b2be7fe17f\n   20: 0x3c99 - &lt;unknown&gt;!std::env::_var::hd7c38fcd0ed4a72d\n   21: 0x1829 - &lt;unknown&gt;!std::env::var::hd342252c7c9996f3\n   22: 0x14f4 - &lt;unknown&gt;!guest::main::hb3d545227282da60\n   23:  0xac4 - &lt;unknown&gt;!core::ops::function::FnOnce::call_once::hdf6e14f7ebde9f53\n   24:  0xf43 - &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::ha23fe57107e63372\n   25:  0xecb - &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h919e8dda9de0d648\n   26: 0x3807 - &lt;unknown&gt;!std::rt::lang_start_internal::h409072ad2c29d9a2\n   27:  0xe68 - &lt;unknown&gt;!std::rt::lang_start::ha5e1690a3bb184c3\n   28: 0x160e - &lt;unknown&gt;!__main_void\n   29:  0x2f6 - &lt;unknown&gt;!_start\nnote: using the `WASMTIME_BACKTRACE_DETAILS=1` environment variable may show more debugging information\n\nCaused by:\n    missing required memory export\n</code></pre></div>",
        "id": 417488976,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706029148
    },
    {
        "content": "<p>the original env get function is accessing the wasm module's memory, which is required to be an export named <code>memory</code></p>",
        "id": 417492333,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030186
    },
    {
        "content": "<p>so, whatever module you are running needs to provide one of those</p>",
        "id": 417492579,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030263
    },
    {
        "content": "<p>I think it does? </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"exports:\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"  {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>exports:\n  memory\n  _start\n  __main_void\n</code></pre></div>",
        "id": 417493198,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030437
    },
    {
        "content": "<p>do I need to redeclare that the wrapped function needs <code>memory</code> somehow?</p>",
        "id": 417493335,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030479
    },
    {
        "content": "<p>my guest program is pretty close to hello world: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">term</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">var</span><span class=\"p\">(</span><span class=\"s\">\"TERM\"</span><span class=\"p\">).</span><span class=\"n\">unwrap_or_else</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"s\">\"unknown\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">());</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"hello from wasm guest! your terminal is: {term}\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>built with <code>cargo build --target wasm32-wasi</code></p>",
        "id": 417493574,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030540
    },
    {
        "content": "<p>oh, hmm</p>",
        "id": 417493666,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030572
    },
    {
        "content": "<p>instead of passing <code>env_get.typed(...)</code> a &amp;mut Store, can you pass it the Caller?</p>",
        "id": 417493726,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030589
    },
    {
        "content": "<p>oh, generate the typed wrapper on every call?</p>",
        "id": 417493872,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030642
    },
    {
        "content": "<p>not sure how else to get a Caller</p>",
        "id": 417493964,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030664
    },
    {
        "content": "<p>looks like the same error/stack trace: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">original_env_get</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Extern</span>::<span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">env_get</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">            </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"environ_get\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">anyhow</span>::<span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"missing environ_get\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">};</span>\n<span class=\"w\">        </span><span class=\"n\">env_get</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">allow_shadowing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"s\">\"environ_get\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span>: <span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">typed</span>: <span class=\"nc\">TypedFunc</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">original_env_get</span><span class=\"p\">.</span><span class=\"n\">typed</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">            </span><span class=\"n\">typed</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 417494302,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030778
    },
    {
        "content": "<p>yeah what if you make original_env_get bind to jut <code>env_get</code> instead of <code>env_get.typed(store).unwrap</code></p>",
        "id": 417494313,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030782
    },
    {
        "content": "<p>hmm</p>",
        "id": 417494369,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030803
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>$ cargo run -p host -- ./target/wasm32-wasi/debug/guest.wasm\n   Compiling host v0.1.0 (/Users/benl/src/hello-wasmtime/host)\n    Finished dev [unoptimized + debuginfo] target(s) in 1.53s\n     Running `target/debug/host ./target/wasm32-wasi/debug/guest.wasm`\nexports:\n  memory\n  _start\n  __main_void\nError: error while executing at wasm backtrace:\n    0: 0x9b66 - &lt;unknown&gt;!__wasi_environ_get\n    1: 0x9b24 - &lt;unknown&gt;!__wasilibc_initialize_environ\n    2: 0x9a96 - &lt;unknown&gt;!__wasilibc_ensure_environ\n    3: 0x9c4d - &lt;unknown&gt;!getenv\n    4: 0x3b2a - &lt;unknown&gt;!std::env::_var_os::ha6d753b2be7fe17f\n    5: 0x3c99 - &lt;unknown&gt;!std::env::_var::hd7c38fcd0ed4a72d\n    6: 0x1829 - &lt;unknown&gt;!std::env::var::hd342252c7c9996f3\n    7: 0x14f4 - &lt;unknown&gt;!guest::main::hb3d545227282da60\n    8:  0xac4 - &lt;unknown&gt;!core::ops::function::FnOnce::call_once::hdf6e14f7ebde9f53\n    9:  0xf43 - &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::ha23fe57107e63372\n   10:  0xecb - &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h919e8dda9de0d648\n   11: 0x3807 - &lt;unknown&gt;!std::rt::lang_start_internal::h409072ad2c29d9a2\n   12:  0xe68 - &lt;unknown&gt;!std::rt::lang_start::ha5e1690a3bb184c3\n   13: 0x160e - &lt;unknown&gt;!__main_void\n   14:  0x2f6 - &lt;unknown&gt;!_start\n   15: 0x9b66 - &lt;unknown&gt;!__wasi_environ_get\n   16: 0x9b24 - &lt;unknown&gt;!__wasilibc_initialize_environ\n   17: 0x9a96 - &lt;unknown&gt;!__wasilibc_ensure_environ\n   18: 0x9c4d - &lt;unknown&gt;!getenv\n   19: 0x3b2a - &lt;unknown&gt;!std::env::_var_os::ha6d753b2be7fe17f\n   20: 0x3c99 - &lt;unknown&gt;!std::env::_var::hd7c38fcd0ed4a72d\n   21: 0x1829 - &lt;unknown&gt;!std::env::var::hd342252c7c9996f3\n   22: 0x14f4 - &lt;unknown&gt;!guest::main::hb3d545227282da60\n   23:  0xac4 - &lt;unknown&gt;!core::ops::function::FnOnce::call_once::hdf6e14f7ebde9f53\n   24:  0xf43 - &lt;unknown&gt;!std::sys_common::backtrace::__rust_begin_short_backtrace::ha23fe57107e63372\n   25:  0xecb - &lt;unknown&gt;!std::rt::lang_start::{{closure}}::h919e8dda9de0d648\n   26: 0x3807 - &lt;unknown&gt;!std::rt::lang_start_internal::h409072ad2c29d9a2\n   27:  0xe68 - &lt;unknown&gt;!std::rt::lang_start::ha5e1690a3bb184c3\n   28: 0x160e - &lt;unknown&gt;!__main_void\n   29:  0x2f6 - &lt;unknown&gt;!_start\n\nCaused by:\n    missing required memory export\n</code></pre></div>",
        "id": 417494410,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030816
    },
    {
        "content": "<p>just in case you can see something interesting in the stack trace, there it is :)</p>",
        "id": 417494446,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030827
    },
    {
        "content": "<p>would you mind adding the RUST_BACKTRACE=1? thats the wasm backtrace, which is helpful, but not the native frames</p>",
        "id": 417494724,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706030906
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>Stack backtrace:\n   0: std::backtrace_rs::backtrace::libunwind::trace\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/../../backtrace/src/backtrace/libunwind.rs:93:5\n   1: std::backtrace_rs::backtrace::trace_unsynchronized\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/../../backtrace/src/backtrace/mod.rs:66:5\n   2: std::backtrace::Backtrace::create\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/backtrace.rs:331:13\n   3: anyhow::error::&lt;impl anyhow::Error&gt;::msg\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.79/src/error.rs:83:36\n   4: anyhow::__private::format_err\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/anyhow-1.0.79/src/lib.rs:684:13\n   5: wasmtime_wasi::sync::snapshots::preview_1::add_wasi_snapshot_preview1_to_linker::{{closure}}::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-wasi-16.0.0/src/lib.rs:66:9\n   6: wiggle::run_in_dummy_executor\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wiggle-16.0.0/src/lib.rs:1171:11\n   7: wasmtime_wasi::sync::snapshots::preview_1::add_wasi_snapshot_preview1_to_linker::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-wasi-16.0.0/src/lib.rs:66:9\n   8: &lt;F as wasmtime::func::IntoFunc&lt;T,(wasmtime::func::Caller&lt;T&gt;,A1,A2),R&gt;&gt;::into_func::native_call_shim::{{closure}}::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1974:41\n   9: core::ops::function::FnOnce::call_once\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/core/src/ops/function.rs:250:5\n  10: &lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/core/src/panic/unwind_safe.rs:271:9\n  11: std::panicking::try::do_call\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/panicking.rs:504:40\n  12: ___rust_try\n  13: std::panicking::try\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/panicking.rs:468:19\n  14: std::panic::catch_unwind\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/panic.rs:142:14\n  15: &lt;F as wasmtime::func::IntoFunc&lt;T,(wasmtime::func::Caller&lt;T&gt;,A1,A2),R&gt;&gt;::into_func::native_call_shim::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1969:29\n  16: wasmtime::func::Caller&lt;T&gt;::with::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1786:13\n  17: wasmtime_runtime::instance::Instance::from_vmctx\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/instance.rs:240:9\n  18: wasmtime::func::Caller&lt;T&gt;::with\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1784:9\n  19: &lt;F as wasmtime::func::IntoFunc&lt;T,(wasmtime::func::Caller&lt;T&gt;,A1,A2),R&gt;&gt;::into_func::native_call_shim\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1958:34\n  20: &lt;(A1,A2) as wasmtime::func::typed::WasmParams&gt;::invoke::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func/typed.rs:587:21\n  21: &lt;(A1,) as wasmtime::func::HostAbi&gt;::call\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1693:18\n  22: &lt;(A1,A2) as wasmtime::func::typed::WasmParams&gt;::invoke\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func/typed.rs:586:17\n  23: wasmtime::func::typed::TypedFunc&lt;Params,Results&gt;::call_raw::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func/typed.rs:181:17\n  24: wasmtime_runtime::traphandlers::catch_traps::call_closure\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/traphandlers.rs:241:18\n  25: wasmtime_setjmp_16_0_0\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/helpers.c:66:3\n  26: wasmtime_runtime::traphandlers::catch_traps::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/traphandlers.rs:219:13\n  27: wasmtime_runtime::traphandlers::&lt;impl wasmtime_runtime::traphandlers::call_thread_state::CallThreadState&gt;::with::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/traphandlers.rs:353:44\n  28: wasmtime_runtime::traphandlers::tls::set\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/traphandlers.rs:724:13\n  29: wasmtime_runtime::traphandlers::&lt;impl wasmtime_runtime::traphandlers::call_thread_state::CallThreadState&gt;::with\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/traphandlers.rs:353:19\n  30: wasmtime_runtime::traphandlers::catch_traps\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/traphandlers.rs:217:18\n  31: wasmtime::func::invoke_wasm_and_catch_traps\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1371:22\n  32: wasmtime::func::typed::TypedFunc&lt;Params,Results&gt;::call_raw\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func/typed.rs:177:22\n  33: wasmtime::func::typed::TypedFunc&lt;Params,Results&gt;::call\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func/typed.rs:88:18\n  34: host::main::{{closure}}\n             at ./host/src/main.rs:37:13\n  35: &lt;F as wasmtime::func::IntoFunc&lt;T,(wasmtime::func::Caller&lt;T&gt;,A1,A2),R&gt;&gt;::into_func::native_call_shim::{{closure}}::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1974:41\n  36: core::ops::function::FnOnce::call_once\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/core/src/ops/function.rs:250:5\n  37: &lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/core/src/panic/unwind_safe.rs:271:9\n  38: std::panicking::try::do_call\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/panicking.rs:504:40\n  39: ___rust_try\n  40: std::panicking::try\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/panicking.rs:468:19\n  41: std::panic::catch_unwind\n             at /rustc/79e9716c980570bfd1f666e3b16ac583f0168962/library/std/src/panic.rs:142:14\n  42: &lt;F as wasmtime::func::IntoFunc&lt;T,(wasmtime::func::Caller&lt;T&gt;,A1,A2),R&gt;&gt;::into_func::native_call_shim::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1969:29\n  43: wasmtime::func::Caller&lt;T&gt;::with::{{closure}}\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1786:13\n  44: wasmtime_runtime::instance::Instance::from_vmctx\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-runtime-16.0.0/src/instance.rs:240:9\n  45: wasmtime::func::Caller&lt;T&gt;::with\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1784:9\n  46: &lt;F as wasmtime::func::IntoFunc&lt;T,(wasmtime::func::Caller&lt;T&gt;,A1,A2),R&gt;&gt;::into_func::native_call_shim\n             at /Users/benl/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-16.0.0/src/func.rs:1958:34\n  47: &lt;unknown&gt;\n</code></pre></div>",
        "id": 417494814,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706030942
    },
    {
        "content": "<p>hmm, yeah, thats where id expect it to come from, so im stumped at the moment and i need to run. ill see if i can get back to this later</p>",
        "id": 417495175,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706031046
    },
    {
        "content": "<p>appreciate it! thanks!</p>",
        "id": 417495210,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706031058
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> hey, have you had a chance to take another look? no rush, and if you want to just drop it, nbd :)</p>",
        "id": 418146755,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706209675
    },
    {
        "content": "<p>sorry, been busy with getting preview 2 out the door. if you can upload a reasonably small reproduction, i'll take a look tomorrow</p>",
        "id": 418194149,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706233894
    },
    {
        "content": "<p>congrats and no worries!</p>\n<p>here's a gist: <a href=\"https://gist.github.com/blinsay/e9571a15fc1f59a355858cdba307946f\">https://gist.github.com/blinsay/e9571a15fc1f59a355858cdba307946f</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/blinsay/e9571a15fc1f59a355858cdba307946f\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/91f9baed8f4fc08c462d1a4de5a8c23942d45e97\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f6173736574732f676973742d6f672d696d6167652d3534666437646330373133652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/blinsay/e9571a15fc1f59a355858cdba307946f\" title=\"guest.rs\">guest.rs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 418196370,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706235837
    },
    {
        "content": "<p>hi, i finally got time to look at the reproduction, thanks for waiting</p>",
        "id": 418706753,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557060
    },
    {
        "content": "<p>i believe what is going on here is that you have called a method in your linker without first creating an instance of the module</p>",
        "id": 418706989,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557139
    },
    {
        "content": "<p>or creating any instance at all, basically</p>",
        "id": 418707121,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557199
    },
    {
        "content": "<p>you still need to call <code>linker.instantiate</code> somewhere</p>",
        "id": 418707171,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557206
    },
    {
        "content": "<p>otherwise, wasmtime tries to be helpful about calling Funcs from the \"host context\" where there is essentially just an empty instance</p>",
        "id": 418707218,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557230
    },
    {
        "content": "<p>and that empty instance doesnt have a memory</p>",
        "id": 418707227,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557235
    },
    {
        "content": "<p>actually, nevermind that explanation, I changed it to how it \"should\" work and its still broken</p>",
        "id": 418708012,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557560
    },
    {
        "content": "<p>which was, for reference, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// shadowing stuff ends</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">prog_path</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">inst</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">inst</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"_start export required\"</span><span class=\"p\">))</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">)</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 418708093,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557587
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> can you help me understand why this line uses the closure captured <code>vmctx</code> and not one belonging to the caller <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ab5a4484ebac8d1f08f773d244baedb09b90a29b/crates/wasmtime/src/func.rs#L1959\">https://github.com/bytecodealliance/wasmtime/blob/ab5a4484ebac8d1f08f773d244baedb09b90a29b/crates/wasmtime/src/func.rs#L1959</a></p>",
        "id": 418708999,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706557912
    },
    {
        "content": "<p>im trying to reason about why there are two different host states for those vmctxs</p>",
        "id": 418709237,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706558012
    },
    {
        "content": "<p>basically, the behavior of the host-to-host call of func isnt retaining the exports id expect to be present in the store</p>",
        "id": 418709503,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706558125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685497\">@Ben Linsay</span> from the above questions to alex i am actually pretty stumped on whats causing this behavior. maybe alex will be able to help me understand whats up here</p>",
        "id": 418710386,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706558485
    },
    {
        "content": "<p>hm the answer to that is basically \"it'll be memory unsafe if we didn't\" in the sense that each vmctx has slightly different host state, and the closure-captured one there has the closure specified to the linker as its state and that's what's being loaded and called. The <code>caller</code>'s <code>host_state</code> I don't think corresponds to <code>T</code> in <code>Store&lt;T&gt;</code> and most of this level of detail is divorced from the overall embedding API.</p>",
        "id": 418710826,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706558673
    },
    {
        "content": "<p>so I might need to understand more what's going on here to answer better</p>",
        "id": 418710857,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706558685
    },
    {
        "content": "<p>oh I think I see what you're getting at, and this is indeed confusing to me as well. I'll need to puzzle this out a bit</p>",
        "id": 418712859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706559470
    },
    {
        "content": "<p>So I think it makes sense that this doesn't work right now. I think it's fine to consider that a bug, however.</p>\n<p>The problem is that this has to do with how WASI finds the exported <code>memory</code>. When you work with WASI as it's set up by default with preview1 you never actually configure what memory to use, so each function has to look up on the caller what the memory export is. In this case though the \"caller\" is Rust host code itself, which means the \"caller\" doesn't have a memory export</p>",
        "id": 418713354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706559627
    },
    {
        "content": "<p>right now there's no way to fake \"as if this was called by wasm\", so I don't think that there's a way around this right now unfortunately.</p>",
        "id": 418713443,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706559661
    },
    {
        "content": "<p>Yeah I thought the Caller would transfer that information but it is more subtle than that</p>",
        "id": 418715926,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706560506
    },
    {
        "content": "<p>Anyway, ok, thanks for your help Alex</p>",
        "id": 418715955,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706560513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"685497\">@Ben Linsay</span> I bet if you were using components and wasi preview 2 you wouldn’t have this problem. Want to try that instead? The distinction of being called from wasm goes away with components, and in general a lot of the complexity of an implementation of get environment is abstracted away</p>",
        "id": 418716178,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706560604
    },
    {
        "content": "<p>If you do indeed need the wasi-common preview 1 implementation we could get you dispatching to the wiggle trait function in your func_wrap, which won’t have the same problems with caller as getting it from the linker</p>",
        "id": 418716399,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706560693
    },
    {
        "content": "<p>But, I’m biased but if I had to recommend anything to authors of new systems, just use components! They solve tons of problems you may not even know you have yet :)</p>",
        "id": 418716496,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706560741
    },
    {
        "content": "<p>thanks for taking a look!</p>",
        "id": 418844675,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706624314
    },
    {
        "content": "<p>sure, components sound great. where do I find docs/examples?</p>",
        "id": 418845151,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706624456
    },
    {
        "content": "<p>I'd recommend starting at <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> for components</p>",
        "id": 418849236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706625549
    },
    {
        "content": "<p>ty!</p>\n<p>just took a quick skim and it's not immediately obvious to me how i'd use this to change the behavior of a specific wasi function. would I have to re-declare the entire wasi component and forward everything else along?</p>",
        "id": 418869202,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630247
    },
    {
        "content": "<p>There’s a lot of ways. You could do it entirely with component composition - make a component that imports get-environment and exports the same, and use wasm-tools compose to interpose it</p>",
        "id": 418870052,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706630475
    },
    {
        "content": "<p>You can also use the host, like you were trying before, but with a wasmtime::component::Linker</p>",
        "id": 418870175,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706630516
    },
    {
        "content": "<p>oh interesting</p>",
        "id": 418870435,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630581
    },
    {
        "content": "<p>If you do that you should consider using wasmtime::component::bindgen! to generate the bindings for the cli environment interface, and then add it to the linker</p>",
        "id": 418870446,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706630584
    },
    {
        "content": "<p>which way would you recommend?</p>",
        "id": 418870575,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630619
    },
    {
        "content": "<p>Start with just the host, it’s easier I thibk</p>",
        "id": 418870729,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706630651
    },
    {
        "content": "<p>that checks out</p>",
        "id": 418870800,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630668
    },
    {
        "content": "<p>do I still grab a reference to <code>environ_get</code> the same way I was doing before?</p>",
        "id": 418871023,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630724
    },
    {
        "content": "<p>or is that going to come through the bingen! thing you're suggesting?</p>",
        "id": 418871232,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630778
    },
    {
        "content": "<p>No, I don’t think so, you’ll call it by rust symbol instead of getting it from the Linker in components. We don’t have allow_shadowing on the component::Linker to my knowledge so, until we get around to adding it, copy the implementation of wasmtime_wasi::preview2::command::add_to_linker and then substitute just your cli::environment add_to_linker in there</p>",
        "id": 418871359,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706630823
    },
    {
        "content": "<p>cool, will sit down this afternoon and give it a whirl. thanks dude!</p>",
        "id": 418871472,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706630860
    },
    {
        "content": "<p>came back to this a few days later than I meant to, and I'm still a bit lost. I read through the docs for the <code>bindgen!</code> macro (which are nice and detailed, ty!) and tried to copy what was going on there just to get started.</p>\n<p>I got bindings by copying the <code>wit</code> directory from <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/\">wasi-cli</a> into a local directory and I can get the bindgen macro making bindings for it  with: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span>: <span class=\"s\">\"imports\"</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n<p>That seems really reasonable, and I can <code>struct MyEnv; impl Host for MyEnv {...}</code> now, which is great, but I have no idea how to find the symbol for the original implementation of <code>get-environment</code>. Any suggestions on where to find it?</p>\n<p>I did go digging into the docs for <code>wasmtime-wasi</code> and found out that <a href=\"https://docs.rs/wasmtime-wasi/17.0.0/wasmtime_wasi/preview2/bindings/wasi/cli/environment/trait.Host.html\">the Host trait is already generated there</a>. Do I need to do the bindgen dance at all?</p>",
        "id": 419557330,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706919937
    },
    {
        "content": "<p>I did notice that <code>component::Linker</code> has an <code>allow_shadowing</code> method btw :)</p>\n<p><a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Linker.html#method.allow_shadowing\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.Linker.html#method.allow_shadowing</a></p>",
        "id": 419557470,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706920026
    },
    {
        "content": "<p>kinda dead-ended on the host approach right now. I'll go try the component composition approach later this weekend too.</p>",
        "id": 419557580,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706920098
    },
    {
        "content": "<p>If your goal is to override a small handful of WASI methods then you can probably skip the bindgen yeah. All the types you need are in the <code>wasmtime-wasi</code> crate and with <code>allow_shadowing</code> you can basically redefine an existing wasi function with your own custom closure (using the same signature as before). Accessing the previous implementation can be done by calling the <code>Host</code> trait method directly (e.g. <code>wasmtime_wasi::preview2::bindings::wasi::cli::environment::Host::get_environment(...)</code>)</p>",
        "id": 419628638,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706983370
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> dumb question, what do I pass as <code>self</code> if I call <code>Host</code> methods directly? I don't see anything that actually implements the trait</p>",
        "id": 419639705,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1706992687
    },
    {
        "content": "<p>The <code>self</code> argument is anything that implements the <code>WasiView</code> trait which is typically the <code>T</code> in <code>Store&lt;T&gt;</code></p>",
        "id": 419641770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706994699
    },
    {
        "content": "<p>okay, I'm still completely lost. I'm trying to mirror what I had originally but I haven't gotten anything involving wasmtime::component to compile. :(</p>\n<p>Definitely feels like I'd benefit from doing the basic stuff first, so I'm going to go play with components and composing them before coming back to this. Thanks for all your help so far.</p>",
        "id": 419649229,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1707000993
    },
    {
        "content": "<p>our tutorials and docs for this whole category are not as polished as they need to be, but we're going to work on it :)</p>",
        "id": 419906302,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707158989
    },
    {
        "content": "<p><a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> is a great start. please do report here (or file at <a href=\"https://github.com/bytecodealliance/component-docs\">https://github.com/bytecodealliance/component-docs</a>) if anything in there isnt correct / doesnt work</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/component-docs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8df96f000eab8dc947698a10edbaf27dabfe9732\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323439636462633661636466343631363631613433643636313537363663313064303036313135306664623636333166613561326631613163316532663865352f62797465636f6465616c6c69616e63652f636f6d706f6e656e742d646f6373)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/component-docs\" title=\"GitHub - bytecodealliance/component-docs: Documentation around creating and using WebAssembly Components\">GitHub - bytecodealliance/component-docs: Documentation around creating and using WebAssembly Components</a></div><div class=\"message_embed_description\">Documentation around creating and using WebAssembly Components - GitHub - bytecodealliance/component-docs: Documentation around creating and using WebAssembly Components</div></div></div>",
        "id": 419906457,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707159028
    },
    {
        "content": "<p>the docs definitely got me started! I managed to understand what a component was, run through the examples, and get my own host program running a command component fairly easily. thanks :D</p>\n<p>I'm back to trying to shadow get-environment. I can't figure out how to inspect the linker/components to see if I've actually gotten the right instance and redefined the right thing. any tips on where to go from here?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Context</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Component</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env</span>::<span class=\"n\">args</span><span class=\"p\">().</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">).</span><span class=\"n\">next</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"starting\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_view</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ServerWasiView</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi_view</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span>: <span class=\"nc\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">ServerWasiView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span>\n<span class=\"w\">        </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">preview2</span>::<span class=\"n\">command</span>::<span class=\"n\">sync</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to link command world\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// --- shadowing stuff: nothing here seems to get called ----</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">allow_shadowing</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"wasi/cli:environment\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"getting the wasi/cli:environment instance\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"get-environment\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"called from the host wrapper\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"c1\">// NOTE: this is terribly janky</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">bindings</span>::<span class=\"n\">cli</span>::<span class=\"n\">environment</span>::<span class=\"n\">Host</span>::<span class=\"n\">get_environment</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">first</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">clone</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"overriding get-environment\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"c1\">// --- end shadowing stuff</span>\n\n<span class=\"w\">    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"loading component\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">path</span><span class=\"p\">).</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"loading component failed\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">command</span>::<span class=\"n\">sync</span>::<span class=\"n\">Command</span>::<span class=\"n\">instantiate</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">context</span><span class=\"p\">(</span><span class=\"s\">\"failed to instantiate Command\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">wasi_cli_run</span><span class=\"p\">().</span><span class=\"n\">call_run</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"run -&gt; {res:?}\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 420093453,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1707239022
    },
    {
        "content": "<p>syntax is a little off and you'll need to add the version number to the package- so <code>wasi:cli@0.2.0/environment</code></p>",
        "id": 420103794,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707242325
    },
    {
        "content": "<p>we could add a getter to linker that fails if the thing isnt there</p>",
        "id": 420103856,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707242349
    },
    {
        "content": "<p>ahhhh that'd be really nice :)</p>",
        "id": 420106466,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1707243250
    },
    {
        "content": "<p>it was really nice to be able to list imports/exports with modules. i don't see a way to do that with the component APIs. am I missing something or do those not exist (yet)?</p>",
        "id": 420106689,
        "sender_full_name": "Ben Linsay",
        "timestamp": 1707243339
    },
    {
        "content": "<p>nope, doesnt exist</p>",
        "id": 420107899,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707243775
    },
    {
        "content": "<p>agree that it should, we can add it</p>",
        "id": 420108262,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1707243919
    }
]