[
    {
        "content": "<p>Do these have to include the Python/JavaScript binaries in the final binary in order to work? Is there a lot of overhead here?</p>",
        "id": 452643087,
        "sender_full_name": "CircuitSacul",
        "timestamp": 1721415823
    },
    {
        "content": "<p>yes, they both link a whole python/js interpreter into the component. Python components are at least 40MB while jco componenrs are around 8MB I think. with custom quickjs runtime, I could get components that run js under 1MB but that's with taking every shortcut and optimization just to see how small I could get it</p>\n<p>unless you have slow internet or low hdd space, this shouldn't be a problem. Though the files are big, loading the bytecode is still very fast</p>",
        "id": 452664305,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1721421850
    },
    {
        "content": "<p>Suppose I have 100 different apps written in python that I want to run. Is there a way to share the python/js binary between them, so that it doesn't have to be loaded from my database along with the script?</p>",
        "id": 452665268,
        "sender_full_name": "CircuitSacul",
        "timestamp": 1721422357
    },
    {
        "content": "<p>For context, I'm trying to make a platform that lets users write WASM apps. It would be nice if there was a way to make it so that a few supported runtimes (python, js) don't need the user to also upload the whole runtime</p>",
        "id": 452665368,
        "sender_full_name": "CircuitSacul",
        "timestamp": 1721422422
    },
    {
        "content": "<p>That's the long-term vision for sure: with graphs of modules in components, one could ideally have one shared (e.g.) <code>spidermonkey.wasm</code> or <code>cpython.wasm</code> that is identical for all JS or Python programs, and somehow deduplicated</p>",
        "id": 452665387,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721422434
    },
    {
        "content": "<p>I know some folks were working on dynamic linking (<span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> and others have thoughts?) but at least in JS we're not quite there yet</p>",
        "id": 452665453,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721422460
    },
    {
        "content": "<p>Thanks, that's exactly what I would need. It's fine if it's not supported yet, but if any languages/versions do support it, I can focus on supporting those first.</p>\n<p>Is there a place where added support for this would be announced? Something I can periodically check, or a newsletter, etc.?</p>",
        "id": 452666849,
        "sender_full_name": "CircuitSacul",
        "timestamp": 1721423203
    },
    {
        "content": "<p>probably here on this Zulip, potentially on the BA blog if big enough? I know there are some other efforts to do developer-targeted comms e.g. <span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span> was running a stream for a while. I don't know of any \"BA-wide changelog\" that would definitely capture this though</p>",
        "id": 452671023,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1721425648
    },
    {
        "content": "<p>I read that javy uses this technology to reduce binary size, but it might not be fully compatible with components, yet: <a href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\">https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/078eb566133d2665a7a9bc0bc216d173f7f0f6b8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336333636434336631623466316164666463366362613532316637376465663363373037373635383135326639313634623339343165366132623930326366392f62797465636f6465616c6c69616e63652f6a617679&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\" title=\"GitHub - bytecodealliance/javy: JS to WebAssembly toolchain\">GitHub - bytecodealliance/javy: JS to WebAssembly toolchain</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to bytecodealliance/javy development by creating an account on GitHub.</div></div></div>",
        "id": 452725214,
        "sender_full_name": "Christof Petig",
        "timestamp": 1721456046
    },
    {
        "content": "<p>What’s the difference between javy and jco?</p>",
        "id": 452837284,
        "sender_full_name": "CircuitSacul",
        "timestamp": 1721480043
    },
    {
        "content": "<p>different js engines and wasi vs components?</p>",
        "id": 452845145,
        "sender_full_name": "Ralph",
        "timestamp": 1721485440
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/How.20do.20JCO.20and.20componentize-py.20work.3F/near/452665387\">said</a>:</p>\n<blockquote>\n<p>That's the long-term vision for sure: with graphs of modules in components, one could ideally have one shared (e.g.) <code>spidermonkey.wasm</code> or <code>cpython.wasm</code> that is identical for all JS or Python programs, and somehow deduplicated</p>\n</blockquote>\n<p>This is already technically possible with Wasmtime and \"just\" requires an embedding to implement, which is certainly on our collective radar.</p>",
        "id": 453175573,
        "sender_full_name": "Lann Martin",
        "timestamp": 1721654756
    },
    {
        "content": "<blockquote>\n<p>What’s the difference between javy and jco?</p>\n</blockquote>\n<p>As Ralph alluded to, Javy uses QuickJS while jco uses SpiderMonkey and Javy only supports WASI preview 1 while jco supports the component model. Javy is capable of producing very, very small binaries in the kilobytes range.</p>",
        "id": 453181625,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1721656504
    },
    {
        "content": "<p>For reference, <a href=\"https://github.com/bytecodealliance/componentize-py/issues/28\">this</a> is the <code>componentize-py</code> issue about importing a CPython <code>.so</code> file instead of bundling it.</p>\n<p>All the basic infrastructure needed to make that work already exists; the main challenge right now is that <code>componentize-py</code> currently relies heavily on build time pre-initialization to execute top-level Python code and retrieve <code>import</code>ed dependencies from the filesystem (see <a href=\"https://github.com/bytecodealliance/componentize-py/issues/23\">https://github.com/bytecodealliance/componentize-py/issues/23</a>).  That pre-init step involves modifying the core modules (including the CPython <code>.so</code>) to apply the pre-init snapshot.  So we'd need to decide how to package that snapshot in such a way that it can be applied to a stock CPython <code>.so</code> file at instantiation time rather than at build time.  I don't foresee any serious issues there, but it will require some effort.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/issues/28\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0f03207f46144388535501ed80e66682bf1d1310/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393161363230343930636635396465333935396438383864373935336233663038386666303066393735343339663830333934613030663135656239343435332f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d70792f6973737565732f3238&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/issues/28\" title=\"Optionally produce component which imports libpython311.so, libc.so, etc. instead of bundling them · Issue #28 · bytecodealliance/componentize-py\">Optionally produce component which imports libpython311.so, libc.so, etc. instead of bundling them · Issue #28 · bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">This would dramatically reduce binary sizes in cases where the host can provide these libraries.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/issues/23\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/45cf7422b727e1c37b82625ecb7dad612ab4d904/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313431356233646361323035393330333939646462326166656530326431346437626165353938633630313831353861636332646361653165376238306436662f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d70792f6973737565732f3233&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/issues/23\" title=\"Use `wasi-virt`-based VFS to store Python code · Issue #23 · bytecodealliance/componentize-py\">Use `wasi-virt`-based VFS to store Python code · Issue #23 · bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Currently, componentize-py \"cheats\" by assuming all required Python code will be loaded during the component pre-init step, and thus CPython won't need access to any of those files at runtime. This...</div></div></div>",
        "id": 454863442,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722265883
    }
]