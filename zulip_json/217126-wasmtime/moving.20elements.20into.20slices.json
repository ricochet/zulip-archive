[
    {
        "content": "<p>if I have a <code>Vec&lt;Val&gt;</code> that I can consume, can I move the elements into a <code>&amp;mut [Val]</code>?</p>",
        "id": 198376049,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094431
    },
    {
        "content": "<p>like you have <code>dst: &amp;mut [Val]</code> and <code>src: Vec&lt;Val&gt;</code>?</p>\n<p>if so, then <code>{copy,clone}_from_slice</code> should do the trick</p>",
        "id": 198376303,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590094557
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <code>for (slot, val) in slots.iter_mut().zip(values) { *slot = val; }</code> I think?</p>",
        "id": 198376304,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590094557
    },
    {
        "content": "<p>oh, do what fitzgen says</p>",
        "id": 198376365,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590094575
    },
    {
        "content": "<p>ah, I guess I was hoping to avoid copy/clone since the old copy is going away anyway, but I can do that</p>",
        "id": 198376442,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094623
    },
    {
        "content": "<p>if you want to avoid the clone and <code>Val</code>'s type has a cheap default (e.g. it's a nested <code>Vec</code> or something) you might also be able to use <code>mem::replace</code></p>",
        "id": 198376449,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1590094626
    },
    {
        "content": "<p>I tried Alex's thing, changing it to values.into_iter(), but it doesn't like that: <code>cannot move out of </code>*result<code> which is behind a shared reference</code></p>",
        "id": 198376498,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094660
    },
    {
        "content": "<p>in the worst case you could always do some hackery with <code>unsafe</code>, a memcpy, and <code>mem::forget</code></p>",
        "id": 198376539,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1590094682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> can you share the snippet with a tiny bit more context?</p>",
        "id": 198376618,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590094713
    },
    {
        "content": "<p>though the actual Rust people here will please toss me overboard if that has caveats (<code>Pin</code> would break I think?)</p>",
        "id": 198376636,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1590094724
    },
    {
        "content": "<p>ok, heh, tried to make a reduced case of this and it compiled without error. let me see what's different...</p>",
        "id": 198376958,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094878
    },
    {
        "content": "<p>are you destructuring out of a type that has a <code>Drop</code> implementation, by chance?</p>",
        "id": 198377009,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590094902
    },
    {
        "content": "<p>cannot move out of <code>*command_result</code> which is behind a shared referenc</p>",
        "id": 198377139,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094972
    },
    {
        "content": "<p>oops</p>",
        "id": 198377150,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094980
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e4c8cd5c2bddfdee4538c48615b6a111\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=e4c8cd5c2bddfdee4538c48615b6a111</a></p>",
        "id": 198377152,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590094981
    },
    {
        "content": "<p>It looks like I can do it if I have a <code>Vec</code>, but I actually have a <code>Box&lt;[T]&gt;</code></p>",
        "id": 198377205,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590095013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <code>Vec::from(ins)</code></p>",
        "id": 198377296,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590095044
    },
    {
        "content": "<p>in that you can create a <code>Vec</code> from a <code>Box&lt;[T]&gt;</code> w/ a zero-cost cast</p>",
        "id": 198377318,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590095061
    },
    {
        "content": "<p><a href=\"https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6aec638adb3b577ec34ece67d4d4fc5e\">https://play.rust-lang.org/?version=stable&amp;mode=debug&amp;edition=2018&amp;gist=6aec638adb3b577ec34ece67d4d4fc5e</a></p>",
        "id": 198377407,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590095118
    },
    {
        "content": "<p>oh, cool</p>",
        "id": 198377503,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590095171
    },
    {
        "content": "<p>That works!</p>",
        "id": 198377507,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590095174
    },
    {
        "content": "<p>I think what was happening is that <code>Box&lt;[T]&gt;</code> doesn't implement <code>IntoIter</code>, and it just derefs to the slice's <code>IntoIter</code>; would need specialization to special case <code>Box&lt;[T]&gt;</code> over <code>Box&lt;T&gt;</code> for choosing an <code>IntoIter</code>, which I'm not sure <code>std</code> ever does at the public level (although definitely internally uses specialization)</p>\n<p>maybe you can clarify, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 198377629,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1590095275
    },
    {
        "content": "<p>that sounds right yeah</p>",
        "id": 198377697,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590095298
    }
]