[
    {
        "content": "<p>Hi all! I would like to start thinking and brainstorming the design of an incremental compilation cache in Cranelift/Wasmtime. The idea being that if a wasm function has already been compiled once in a wasm module, and it hasn't changed when trying to recompile it later, then we could reuse the compiled function's artifact. That would be beneficial in the following cases:</p>\n<ul>\n<li>hot-reloading use cases, where most functions in a wasm module don't change between two compilations</li>\n<li>avoiding to recompile large framework pieces, if they're shared in different modules (e.g. JS programs compiled to wasm include the Spidermonkey interpreter, and most functions in the Spidermonkey interpreter shouldn't change across different JS programs)</li>\n<li>sharing compiled artifacts over time, more generally</li>\n</ul>\n<p>I'd like to discuss this topic in real-time to brainstorm about it, and mentioned that during today's Wasmtime call. <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> expressed interest in being part of the conversation, and anyone interested is of course welcome. First probes into peoples' agendas indicate this could be a topic for the first Wasmtime or Cranelift meeting taking place in April.</p>\n<p>Will add this topic to the Cranelift meeting happening April 4th, and we can discuss it then!</p>",
        "id": 275697181,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1647537806
    },
    {
        "content": "<p>Thanks Ben for organizing this!</p>",
        "id": 275697293,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1647537846
    },
    {
        "content": "<p>Would this only apply to wasmtime or also to any cranelift user (eg cg_clif)?</p>",
        "id": 275735580,
        "sender_full_name": "bjorn3",
        "timestamp": 1647555466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> I suspect that most of the changes will be wasmtime-specific, as Cranelift is already function-centric. In a sense one could do this already by caching/memoizing the CLIF-to-machine-code translation; the more interesting bits are making Wasmtime generate CLIF that is somewhat invariant to perturbations in the input (e.g. add a new function that shifts all indices by one, or add a slot to the VMContext), maybe by more indirection. Certainly whatever techniques we come up with could be used by other CL frontends as well though!</p>",
        "id": 275735874,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1647555658
    }
]