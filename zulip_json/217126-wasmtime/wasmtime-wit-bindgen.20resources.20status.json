[
    {
        "content": "<p>Is it accurate to say that <code>wasmtime-wit-bindgen</code> currently only supports host-implemented resources (i.e. the host exporting resources to the guest)?  If so, is it possible to import resources from the guest by using <code>wasmtime::component::resources</code> directly (i.e. without binding generation), and are there any examples of doing that?<br>\nI'm working on implementing resource support in <code>componentize-py</code> and would like to test both directions.</p>",
        "id": 390556359,
        "sender_full_name": "Joel Dice",
        "timestamp": 1694536195
    },
    {
        "content": "<p>Correct yeah, although supporting guest-defined resources shouldn't be too much of a leap from where it is already</p>",
        "id": 390561153,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694537992
    },
    {
        "content": "<p>For the time being, it looks like I can call the guest resource's constructor like it's a regular exported function and then expect a <code>wasmtime::component::values::Val::Resource</code>to be returned.  Is that currently the best/only option?</p>",
        "id": 390568480,
        "sender_full_name": "Joel Dice",
        "timestamp": 1694540917
    },
    {
        "content": "<p>oh, I see now that <code>ResourceAny</code> implements <code>ComponentType</code>, so I can use the <code>typed_func</code> API</p>",
        "id": 390569401,
        "sender_full_name": "Joel Dice",
        "timestamp": 1694541303
    },
    {
        "content": "<p>ah yeah all guest resources will be represented with <code>ResourceAny</code></p>",
        "id": 390580556,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694545690
    }
]