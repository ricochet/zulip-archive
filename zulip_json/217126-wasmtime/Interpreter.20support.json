[
    {
        "content": "<p>I'm wondering what the scope of missing features looks like for interpreter support in wasmtime. Has anyone already thought about this, beyond what is mentioned in the docs (that it is a desired feature)?</p>",
        "id": 208629619,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1598917526
    },
    {
        "content": "<p>Running everything in an interpreter is not desired. So additional step can be made is tiering. Currently entire module is compiled using single compiler. It is preferable though to switch between compilers in the middle of execution.</p>",
        "id": 208690831,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598968849
    },
    {
        "content": "<p>Also the wasmtime heavily  depends on the cranelift data structures. There is a desire to abstract there to be used with an interpreter as well.</p>",
        "id": 208691077,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598968960
    },
    {
        "content": "<p>I think there are real use cases for an interpreter-only build config, such as support for platforms our JITs don't support, or very low-memory environments.</p>\n<p>Nevertheless, an interpreter should definitely support tiering, too, which imposes some requirements that otherwise might not be important, such as using the same data structures where required.</p>\n<p>I don't think we have documentation of these requirements anywhere. <span class=\"user-mention\" data-user-id=\"336029\">@Môshe van der Sterre</span> are you interested in working on this kind of project?</p>",
        "id": 208716885,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1598979514
    },
    {
        "content": "<p>also, worth mentioning that WAMR exists and is such an interpreter: <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime\">https://github.com/bytecodealliance/wasm-micro-runtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime\" title=\"bytecodealliance/wasm-micro-runtime\">bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 208716978,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598979572
    },
    {
        "content": "<p>We are currently using wasmtime as the prefered wasm runtime at my company. One relevant example is that we use wasm modules for a pluggable data-transform function. We kind of want this to be available on all platforms, including when the application is running in a browser. (The use-case isn't really low-memory or performance sensitive.)<br>\nI'm evaluating the different options, including WAMR, and also using the javascript API when in a browser. I'm worried about error handling when using the javascript API, and I'm worried about having to build hybrid Rust+C on multiple platforms when using WAMR. Combined with the fact that we are already using wasmtime, the wasmtime interpreter route would have by far the least impact on our internal codebase.</p>\n<p>What direction we want to go in depends on the size of the work within wasmtime. If the scope is relatively small, implementing this myself could be one option. That would require me to dive into the wasmtime codebase, and I currently haven't done that. I have also internally discussed the option of sponsoring a feature bounty for this, in which case more information about what is needed also helps. If the effort to implement interpreter support for wasmtime is truly huge, then I might be better off just learning to live with one of the other options :-)</p>\n<p>What are your thoughts about the different options?</p>",
        "id": 208729438,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1598985662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268650\">@Wang Xin</span> can talk more about the possibility of using WAMR as an interpreter and interfacing with Wasmtime. On the Wasmtime side, I want to mention that there is more than one option: 1) implement or import a Wasm interpreter built in Rust, 2) use a C/C++ interpreter (e.g. Wasm) through bindings, or 3) finish and wire up the existing Cranelift interpreter so that it can execute Wasm modules. I started implementing the <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/interpreter\">Cranelift interpreter</a> as an exploration and have not implemented all of the Cranelift instructions since I have not yet needed them. However, if this interpreter were completed and wired up to Wasmtime, it could interpret the Cranelift IR that Wasmtime produces and (theoretically) execute Wasm modules the same as when Wasmtime compiles modules to machine code.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/interpreter\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/cranelift/interpreter\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 208766720,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599006991
    },
    {
        "content": "<p>I would guess option 3 would be less work than option 1 (and not a huge amount of work) but I am familiar with the Cranelift interpreter code so I may be biased. Option 2 might be more work than option 3 (but less than 1?) and would have to be done quite carefully but it could leverage already existing code (e.g. WAMR).</p>",
        "id": 208767022,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599007269
    },
    {
        "content": "<p>Correction above: in option 2) use a C/C++ interpreter (e.g. \"Wasm\" should read \"WAMR\")</p>",
        "id": 208768175,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599008445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> Thank you for that information. I think I can make a roundabout guess about what is needed to complete the cranelift interpreter, but I think I'm still lacking a bit of context regarding what it takes to wire it up with wasmtime. Perhaps I can remedy that myself by doing some digging around. I'm going to think about this a bit more (and read the code) and discuss it internally. My current thinking is that having this available in wasmtime prevents a lot of complexity creep into our internal code. What are the experiences within this project with having bounties for a feature like this? Although I'm now also considering to just make time available to work on this myself, as that perhaps has more immediate results.</p>",
        "id": 208885791,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1599079825
    },
    {
        "content": "<p>I don't have a crystal clear picture of what it would take to wire up an interpreter to Wasmtime (perhaps <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> or <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> or <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> do) but I would guess that it would involve changes to the <code>wasmtime</code> and <code>wasmtime-runtime</code> crates to allow an interpreter to execute modules instead of only the current \"compiled module\" paradigm. This type of work would have to be done for any interpreter to be integrated with Wasmtime--it is not special to option 1. Another question is what other Wasmtime developers think about supporting these changes; I'll ask tomorrow in the Wasmtime meeting. (Re: bounties, I haven't seen any of that for this project yet).</p>",
        "id": 208901738,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599089311
    },
    {
        "content": "<p>I believe there are ideas of how we could integrate an interpreter, but the codebase in general is very much not ready for doing so yet</p>",
        "id": 208902136,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599089609
    },
    {
        "content": "<p>We've generally up to this point not had a compelling use case to implement an interpreter, so we were waiting for that</p>",
        "id": 208902232,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599089673
    },
    {
        "content": "<p>for example an interpreter which can tier up would be a very different design than one where you just don't want a jit compiler</p>",
        "id": 208902253,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599089692
    },
    {
        "content": "<p>Foundation-wise there's lots of deep dependencies on cranelift itself for simply types, so we would require a lot of refactoring to get it such that you can build wasmtime without cranelfit at all. Very much possible to do, just to say that it's likely not one PR away!</p>",
        "id": 208902315,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599089749
    },
    {
        "content": "<p>Good points; sounds like <span class=\"user-mention\" data-user-id=\"336029\">@Môshe van der Sterre</span> might have a use case for the non-tiering compiler, which I feel would be simpler. If we did want to discuss a tiering compiler, I do have a branch in which I can do some of what is necessary for on-stack replacement from the Cranelift interpreter to compiled code and back.</p>",
        "id": 208902486,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599089877
    },
    {
        "content": "<p>Also, I wonder if some of the hard work to remove dependencies to cranelift could be avoided by using the Cranelift interpreter...</p>",
        "id": 208902653,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599089985
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I was wondering about  the cranelift dependencies. How much of those are JIT-specific and still get in the way when the interpreter is itself cranelift based?</p>",
        "id": 208902666,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1599089996
    },
    {
        "content": "<p>Ok. Sorry to repeat you :-)</p>",
        "id": 208902725,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1599090017
    },
    {
        "content": "<p>There's two sets of dependencies I think. One is just a shared set of types (e.g. <code>ValType</code> and such), those are easy to extract.</p>",
        "id": 208902756,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090043
    },
    {
        "content": "<p>More worrisome, though, is that <code>wasmtime-runtime</code> assumes that there's a natively-callable function (e.g. a function pointer)</p>",
        "id": 208902774,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090058
    },
    {
        "content": "<p>which matches the platform native ABI</p>",
        "id": 208902784,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090065
    },
    {
        "content": "<p>which interpreters won't be using since they're not generating code on the fly</p>",
        "id": 208902806,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090079
    },
    {
        "content": "<p>so a great place to start would be to refactor the literal crate dependencies such that <code>wasmtime-cranelfit</code> is the only crate in wasmtime that depends on cranelift</p>",
        "id": 208902825,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090098
    },
    {
        "content": "<p>but beyond that there's still work to be done in how modules are represented in <code>wasmtime-runtime</code> in a way that's friendly for interpreters too</p>",
        "id": 208902855,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090116
    },
    {
        "content": "<p>(probably something that's like an <code>enum</code> or an option which describes the ABI of functions pointers</p>",
        "id": 208902910,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090129
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 208902927,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090141
    },
    {
        "content": "<p>re: ABI, I think what I meant above is that, since the Cranelift IR encodes the ABI, a Cranelift interpreter could execute IR for any ABI without really noticing the difference</p>",
        "id": 208903137,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599090297
    },
    {
        "content": "<p>but it still might make sense to reduce dependencies to cranelift, etc. and for sure we would need to make <code>Module</code> more flexible</p>",
        "id": 208903202,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599090348
    },
    {
        "content": "<p>oh also to be clear I'm assuming that a wasmtime interpreter would not use cranelift</p>",
        "id": 208903341,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090452
    },
    {
        "content": "<p>even if cranelift has its own interpreter</p>",
        "id": 208903351,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090456
    },
    {
        "content": "<p>but we also haven't talked about the design of this at all yet</p>",
        "id": 208903366,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090468
    },
    {
        "content": "<p>and this would be a very good point to bring up!</p>",
        "id": 208903372,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599090473
    },
    {
        "content": "<p>yeah, I blurted out a few options far up above and we probably need to discuss more; I'll bring it up in the Wasmtime meeting tomorrow.</p>",
        "id": 208903455,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599090517
    },
    {
        "content": "<p>summary: use the Cranelift interpreter, use/build a Wasm interpreter hosted in Rust, use/build a Wasm interpreter hosted in C/C++ (e.g. WAMR)</p>",
        "id": 208903641,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599090653
    },
    {
        "content": "<p>I'm reading through the code, and I did notice that the call to <code>build_code_memory</code> is baked into the code path for compilation. As far as I can tell this is the source of the eventual <code>VMFunctionBody</code> pointers. I can see <code>mem::transmute::&lt;*const VMFunctionBody, unsafe extern \"C\" fn(*mut VMContext, *mut VMContext, ...)&gt;</code> calls in a number of places, and I agree that an interpreter cannot really accommodate to that.</p>\n<p>I understand that it may be best to refactor some of this to make things more obviously interpreter friendly. But I'm entirely new to this codebase, so I'm currently trying to imagine the least impactful way one could write a proof-of-concept <code>impl Compiler for AndrewsCraneliftInterpreter</code>. Perhaps I will be better able to understand the pros/cons of the refactoring you suggest after understanding that.</p>\n<p>With a proof of concept in mind, I think interpreters would be able to accommodate <code>FnMut(*mut VMContext, *mut VMContext, ...)</code> instead of the mem::transmute, right? Terribly shoehorned perhaps, but do you think there are any other pieces of code that a sufficiently creative interpreter implementation of <code>trait Compiler</code> cannot accommodate?</p>",
        "id": 208910090,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1599096509
    },
    {
        "content": "<p>Some background reading about making interpreters fast (beyond just using macro-ops):</p>\n<ul>\n<li>\n<p>\"Efficient  Interpretation  using  Quickening\" by Brunthaler: <a href=\"https://publications.sba-research.org/publications/dls10.pdf\">https://publications.sba-research.org/publications/dls10.pdf</a></p>\n</li>\n<li>\n<p>\"Inline Caching Meets Quickening\" by Brunthaler: <a href=\"https://publications.sba-research.org/publications/ecoop10.pdf\">https://publications.sba-research.org/publications/ecoop10.pdf</a></p>\n</li>\n</ul>",
        "id": 208997313,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1599151855
    },
    {
        "content": "<p>Although I suppose there isn't a ton of dynamic stuff in Wasm that would benefit from this kind of thing...</p>",
        "id": 208997405,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1599151896
    },
    {
        "content": "<p>maybe just indirect calls</p>",
        "id": 208997417,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1599151904
    },
    {
        "content": "<blockquote>\n<p>Terribly shoehorned perhaps, but do you think there are any other pieces of code that a sufficiently creative interpreter implementation of trait Compiler cannot accommodate?</p>\n</blockquote>\n<p>We talked about this in the meeting a bit: <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> mentioned that with an added <code>void *</code> parameter we could probably make things work but my impression was <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> thought it would be better to refactor it so that it could be done cleanly. (Accurate summary?)</p>",
        "id": 209002188,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599153931
    },
    {
        "content": "<p>Oh I wouldn't say I think there's a best route to go forward, I think whatever works is a good place to start from and we can iterate from there</p>",
        "id": 209002500,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1599154078
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336029\">@Môshe van der Sterre</span>, the conversation became a discussion on what type of interpreter Wasmtime even needs and perhaps your use case can help clarify that: I re-read what you said above and it is my understanding that you want an interpreter for portability reasons, not as much for performance reasons. Is that accurate? Can you comment more on whether memory constraints are an issue for interpretation? How important is interpreter performance? I assume the Wasm modules touch system interfaces in some way; how do you plan to make that work in the browser?</p>",
        "id": 209002745,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1599154180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span>: Yes, portability is pretty much my main concern.</p>\n<p>The use-case I mentioned is about our data storage system. This system is distributed, and the data is typed. If a storage user want to register a new datatype, they also provide a wasm module that has various exports. Besides validation, some of these exports are used by the storage nodes when communicating, for example if the datatype requires a logical clock. This is what currently exists. For added context, the user normally only writes a rust struct that compiles into that wasm module. We provide primitives they can add to the struct (such as logical clocks) and macro's for generating those exports that the storage nodes use.</p>\n<p>We now want to allow (web)applications to use this storage system in \"work offline\" mode:</p>\n<ol>\n<li>When still online, the application instructs the storage client library (that it is linked with) to keep a small number of objects in local memory (or local disk). For example, this could be objects related to the logged-in user account.</li>\n<li>When the device goes offline, and the application calls into the storage client library for one of those objects, the client library should now respond as if it is still connected to a storage node (albeit one that is partitioned from the rest of the cluster). For datatypes that are partition-tolerant without quorum, this means that from the applications point of view the storage system continues to function normally.</li>\n<li>When the device comes back online, the client library syncs back to (the rest of) the cluster.</li>\n</ol>\n<p>For this to work, the client library essentially has to behave as if it is a storage node itself (while the device is offline). Calling exports from the registered wasm modules is part of the normal storage node behaviour, so this is what I'm aiming for. Obviously we want to keep the client library as portable as possible, but browsers in particular are a target platform for the client library.</p>\n<p>(I don't see performance or memory constraits here.)</p>",
        "id": 209037048,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1599172311
    },
    {
        "content": "<p>Joining late the discussion, but I have also a use case for the interpreter. In my case the goal is size in order to be used within an embedded STM32F4 with 2MB flash and 192KB RAM. The idea is the use it as WASM runtime for embedded nodes in a Kubernetes cluster, where <a href=\"https://github.com/deislabs/krustlet\">https://github.com/deislabs/krustlet</a> is installed on the devices</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet\" title=\"deislabs/krustlet\">deislabs/krustlet</a></div><div class=\"message_embed_description\">Kubernetes Rust Kubelet. Contribute to deislabs/krustlet development by creating an account on GitHub.</div></div></div>",
        "id": 211811661,
        "sender_full_name": "Jiayi Hu",
        "timestamp": 1601495736
    },
    {
        "content": "<p>Sounds like there is more interest in this interpreter topic: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/156#issuecomment-703319935\">https://github.com/bytecodealliance/wasmtime/issues/156#issuecomment-703319935</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/156#issuecomment-703319935\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/156#issuecomment-703319935\" title=\"Possible backends · Issue #156 · bytecodealliance/wasmtime\">Possible backends · Issue #156 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Now having the lightbeam backend being added, I am curious on what is the scope of this project. Will it be beneficial to add, say, wasmi backend (for ensuring correctness) or llvm for highly optim...</div></div></div>",
        "id": 212497176,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1602025902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"336029\">@Môshe van der Sterre</span>, <span class=\"user-mention\" data-user-id=\"331923\">@Jiayi Hu</span>: if you all still have interest in this topic the issue I just linked to (or another one like it) would be a good one to comment on and follow. I think there may be enough interest in this interpreter issue to start proposing ideas on GitHub.</p>",
        "id": 212497325,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1602025994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span>, Yes still interested very much. In my current estimation, wasmtime interpreter support is the best and possibly easiest way forward for the use-case I mentioned. (Even if it means implementing that support in-house.) Other areas of our product also need my attention, so I need to discuss  with my colleagues to determine the priorities for what I work on.<br>\nIn practical terms, I'm not really sure what steps I need to take (wrt to: commenting on that issue / or proposing ideas on github / or describing meaningful bounty requirements that my company could sponsor). I think the ticket you linked is about new backends much more broadly, and perhaps I should open an issue about an interpreter backend specifically. I also want to learn more about the wasmtime internals myself, perhaps by adding that <code>void *</code> parameter and exploring the problems I encounter.</p>",
        "id": 212940145,
        "sender_full_name": "Môshe van der Sterre",
        "timestamp": 1602373519
    }
]