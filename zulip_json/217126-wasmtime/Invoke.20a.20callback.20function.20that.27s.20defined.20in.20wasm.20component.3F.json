[
    {
        "content": "<p>Hello folks,</p>\n<p>I want to let my wasmtime host side implementations to invoke a function that's defined in a wasm component. <br>\nI am going to use <code>Instance::get_func(store,  name)</code> method to get a <code>Func</code> instance of that callback function, and then invoke it by <code>Func::call(store, params,  results)</code>. </p>\n<p>But, I am confused by: 1).  how can I allocate a memory inside the <code>store</code> and then pass it to callback function for later use? I saw some code snippets  that get memory from caller in wasm module not in wasm component. </p>\n<p>2). Can I use <code>u32</code> instead of <code>string</code> to pass the callback function to the wasmtime host side?  I am using wasmtime 22.0.0,  <code>Instance::get_func(store, name)</code> only takes  <code>string</code> typed name parameter,  I also noticed that <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  recent patches allow <code>Instance::get_func()</code> to also take a <code>func_index</code> parameter, but it seems that it still need to have the <code>string</code> name first and then convert to <code>func_index</code>.  The drawback of passing by <code>string</code> is we cannot know what's the name of a callback function unless ask wasm component developer to follow a specific naming rule.  I think that a callback function pointer inside a wasm component can be represent by a <code>u32</code> and then passed down to wasmtime engine. Is there any chance to convert this  <code>u32</code> callback function pointer to a <code>Func</code> instance? </p>\n<p>Thanks,<br>\nChengdong</p>",
        "id": 447170410,
        "sender_full_name": "Bryton",
        "timestamp": 1719395018
    },
    {
        "content": "<p>For 1. export a function from your module which can be used by the host to allocate memory inside the wasm module.</p>",
        "id": 447194288,
        "sender_full_name": "bjorn3",
        "timestamp": 1719401918
    },
    {
        "content": "<p>For 2. If you are having a function pointer inside your wasm module which you want to pass to the host, this will be a u32 which indexes into a table. You can export the table from the wasm module to allow the host to access it and look up the index into the table to get a <code>Func</code> you can call.</p>",
        "id": 447194918,
        "sender_full_name": "bjorn3",
        "timestamp": 1719402097
    },
    {
        "content": "<p>Thanks a lots  <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> </p>\n<p>For 1, I am not using wasm module, I am using wasm component, I believe that it is much hard to touch memory allocator inside wasm component. Moreover, anyone can be the wasm component developer, there is a rule to force developer to  export a memory allocation function. </p>\n<p>Can I use <code>memory::new()</code> to allocate a memory area inside <code>store</code> and then pass the handle to callback function? </p>\n<p>For 2. Again,  there is no strong rule force wasm component developer to export the callback function, for example, define a <code>export</code> inside the WIT file.  </p>\n<p>Like this issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/2646\">https://github.com/bytecodealliance/wasmtime/issues/2646</a>,  the third parameter of  <code>startTimer()</code> can be any callback function pointer. There is no explicit <code>export</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/2646\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9a4056c52c89ca529965b102f5609c85d246ae5a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353362376662643631323164376138383464363864646162636133333864313164366137373230646537326439666436366139363037393430656439623039652f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f32363436&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/2646\" title=\"Access to callbacks exported by Wasm script · Issue #2646 · bytecodealliance/wasmtime\">Access to callbacks exported by Wasm script · Issue #2646 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Hello! I'm currently embedding the Wasmtime in the C/C++ and got an issue with the callbacks. What I'm trying to achieve is to call a function, exported by the WASM script, from within the host sys...</div></div></div>",
        "id": 447234013,
        "sender_full_name": "Bryton",
        "timestamp": 1719412966
    },
    {
        "content": "<p>For 1. If you have a component, you aren't supposed to directly allocate inside the component. Instead why you pass a type like string or list&lt;i8&gt; as argument it will be automatically allocated for you if the component needs it to be memory allocated.</p>",
        "id": 447234806,
        "sender_full_name": "bjorn3",
        "timestamp": 1719413181
    },
    {
        "content": "<p>For 2. Can you make the component return a funcref to the host? I don't know if components are allowed to do that though.</p>",
        "id": 447235185,
        "sender_full_name": "bjorn3",
        "timestamp": 1719413288
    },
    {
        "content": "<p>At this time, no, you can't pass a <code>funcref</code> or a table index out of a component and have the host call it, there's no way to pass a callback to the host. That's modeled instead with resources</p>",
        "id": 447235498,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719413387
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Invoke.20a.20callback.20function.20that's.20defined.20in.20wasm.20component.3F/near/447235498\">said</a>:</p>\n<blockquote>\n<p>At this time, no, you can't pass a <code>funcref</code> or a table index out of a component and have the host call it, there's no way to pass a callback to the host. That's modeled instead with resources</p>\n</blockquote>\n<p>If I define a <code>foo</code> function inside WIT file, that function takes a callback_name string parameter. like this:<br>\n<code>foo: func(callback_name: string)</code> </p>\n<p>Can I use this <code>callback_name</code> to get a <code>Func</code> by passing it to <code>Instance::get_func(&amp;mut store, callback_name)</code>?</p>",
        "id": 447237884,
        "sender_full_name": "Bryton",
        "timestamp": 1719414048
    },
    {
        "content": "<p>Yes that's possible, you'd have to arrange for the <code>Instance</code> to be in the <code>T</code> of the <code>Store&lt;T&gt;</code></p>",
        "id": 447239902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719414579
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Invoke.20a.20callback.20function.20that's.20defined.20in.20wasm.20component.3F/near/447239902\">said</a>:</p>\n<blockquote>\n<p>Yes that's possible, you'd have to arrange for the <code>Instance</code> to be in the <code>T</code> of the <code>Store&lt;T&gt;</code></p>\n</blockquote>\n<p>Thank you, Alex.  I am going to pass the <code>Store&lt;T&gt;</code> and <code>Instance</code>to the host side <code>Context</code> struct, I know it’s ugly, but it should work.  </p>\n<p>The next two questions as I mentioned before, can I pass a <code>u32</code> callback function “pointer” to <code>Instance::get_func(&amp;mut store, callback_pointer)</code> instead of  <code>string</code> name. I believe wasm component  developer is more willing to pass a function pointer instead of a function name. </p>\n<p>And let say the callback function definition takes a [u8, size] type parameter, Is there any method to pre-allocate a memory area inside the <code>store&lt;T&gt;</code> by something like <code>memory::new(&amp;mut store …)</code> and save the data to that memory area, and finally pass it as a parameter to the callback function?</p>",
        "id": 447241824,
        "sender_full_name": "Bryton",
        "timestamp": 1719415052
    },
    {
        "content": "<p>oh that <code>callback_pointer</code> isn't a pointer, it's a host-defined index the wasm guest has no way of creating or naming, so it's not related to function pointers</p>",
        "id": 447242158,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719415097
    },
    {
        "content": "<p>and I believe the answer is \"no\" for preallocating space</p>",
        "id": 447242368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719415124
    },
    {
        "content": "<p>but it really depends on specifics, what you're describing is relatively vague</p>",
        "id": 447242468,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719415137
    },
    {
        "content": "<p>With a <code>Func</code> you'd want to call <code>.typed::&lt;...&gt;</code> and then what you can pass in depends on how you type it</p>",
        "id": 447242622,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719415162
    },
    {
        "content": "<p>e.g. you could make a parameter use <code>&amp;[u8]</code></p>",
        "id": 447242687,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719415175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Invoke.20a.20callback.20function.20that's.20defined.20in.20wasm.20component.3F/near/447242158\">said</a>:</p>\n<blockquote>\n<p>oh that <code>callback_pointer</code> isn't a pointer, it's a host-defined index the wasm guest has no way of creating or naming, so it's not related to function pointers</p>\n</blockquote>\n<p>In wasmtime 22.0.0, <code>get_func()</code> only support <code>string</code> function name parameter, I saw you recent patches changed the definition accept a <code>func_index</code>,  do you mean my <code>callback_pointer</code> is a <code>func_index</code>? </p>\n<p>I really mean <code>callback_pointer</code> is a function pointer,  I saw some examples that use a <code>u32</code> callback function pointer to index some kind of table struct to get a <code>Func</code> instance in wasm module (not wasm component).  For example: <a href=\"https://github.com/eunomia-bpf/wasm-bpf/blob/35409ea40073f4af3fea29a938f76b763a19476c/runtime/wasm-bpf-rs/src/utils.rs#L120\">https://github.com/eunomia-bpf/wasm-bpf/blob/35409ea40073f4af3fea29a938f76b763a19476c/runtime/wasm-bpf-rs/src/utils.rs#L120</a></p>\n<p>I am thinking if it is possible to do the same thing here(wasm component).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/eunomia-bpf/wasm-bpf/blob/35409ea40073f4af3fea29a938f76b763a19476c/runtime/wasm-bpf-rs/src/utils.rs#L120\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9619f0f951ce5b009597971c945b7ddd9e7d0bae/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383731326537626139653033333032393065613761626232613764346563393630653162653462343537313461303839336330633430323234316238303938642f65756e6f6d69612d6270662f7761736d2d627066&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/eunomia-bpf/wasm-bpf/blob/35409ea40073f4af3fea29a938f76b763a19476c/runtime/wasm-bpf-rs/src/utils.rs#L120\" title=\"wasm-bpf/runtime/wasm-bpf-rs/src/utils.rs at 35409ea40073f4af3fea29a938f76b763a19476c · eunomia-bpf/wasm-bpf\">wasm-bpf/runtime/wasm-bpf-rs/src/utils.rs at 35409ea40073f4af3fea29a938f76b763a19476c · eunomia-bpf/wasm-bpf</a></div><div class=\"message_embed_description\">WebAssembly library, toolchain and runtime for eBPF programs - eunomia-bpf/wasm-bpf</div></div></div>",
        "id": 447247236,
        "sender_full_name": "Bryton",
        "timestamp": 1719415973
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Invoke.20a.20callback.20function.20that's.20defined.20in.20wasm.20component.3F/near/447242622\">said</a>:</p>\n<blockquote>\n<p>With a <code>Func</code> you'd want to call <code>.typed::&lt;...&gt;</code> and then what you can pass in depends on how you type it</p>\n</blockquote>\n<p>I believe that if a memory area is inside <code>store&lt;T&gt;</code>, then functions inside a wasm component can directly use it. Otherwise it needs some additional operations to pass it to the <code>store&lt;T&gt;</code>, lifting? </p>\n<p>Do you mean as I knew the type of callback function, like you said call <code>.typed::&lt;…&gt;</code>  I don’t need to care about put the the data into <code>store&lt;T&gt;</code>, wasmtime will do it for me?</p>",
        "id": 447249041,
        "sender_full_name": "Bryton",
        "timestamp": 1719416327
    },
    {
        "content": "<blockquote>\n<p>I really mean <code>callback_pointer</code> is a function pointer</p>\n</blockquote>\n<p>Function pointers in wasm are generally implemented as indexes into a table of functions that can be called using a function pointer. For the host to call such a function pointer, it has to look up the function in the table. It can only do this if the table is exported. I'm not sure if wasm components allow exporting a table. You could have a function exported by your wasm component which accepts a function pointer and function arguments as arguments and calls the function pointer. Then the host could call this function.</p>",
        "id": 447259054,
        "sender_full_name": "bjorn3",
        "timestamp": 1719418036
    },
    {
        "content": "<blockquote>\n<p>I am thinking if it is possible to do the same thing here(wasm component).</p>\n</blockquote>\n<p>The short answer is no, you can't do that with components. Tables cannot be exported from components and function pointers aren't a type in the component type system. In the component model these sorts of interactions are modeled as resources which require more static information.</p>\n<blockquote>\n<p>Do you mean as I knew the type of callback function, like you said call <code>.typed::&lt;…&gt;</code> I don’t need to care about put the the data into <code>store&lt;T&gt;</code>, wasmtime will do it for me?</p>\n</blockquote>\n<p>Sorry what I mean is that I'd recommend getting something compiling and asking questions further from there. It's tough to answer specifiic API questions which aren't based on a concrete piece of code otherwise. What you're describing can and cannot work, it really highly depends on specifics and can be subtle. I can do my best to lead you through the specifics here but it's very easy to be misinterpreted because I'm providing context I fear that won't be fully understood because I can't talk about specifics. If there's a piece of code though I can provide specific advice which should be easier to follow</p>",
        "id": 447276324,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1719421758
    },
    {
        "content": "<p>Many thanks to both of you <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> and <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> .  As Alex suggested, I'd like to do some experiments first, then we can be more focus on specific problems if I find some.</p>",
        "id": 447368691,
        "sender_full_name": "Bryton",
        "timestamp": 1719452403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Invoke.20a.20callback.20function.20that's.20defined.20in.20wasm.20component.3F/near/447259054\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I really mean <code>callback_pointer</code> is a function pointer</p>\n</blockquote>\n<p>Function pointers in wasm are generally implemented as indexes into a table of functions that can be called using a function pointer. For the host to call such a function pointer, it has to look up the function in the table. It can only do this if the table is exported. I'm not sure if wasm components allow exporting a table. You could have a function exported by your wasm component which accepts a function pointer and function arguments as arguments and calls the function pointer. Then the host could call this function.</p>\n</blockquote>\n<p>I find that add <code>println!(\"cargo:rustc-link-arg=--export-table\");</code> in <code>build.rs</code> can let <code>cargo component build</code> to export a table named \"__indirect_function_table\".   </p>\n<p>The correspending output in .wasm file looks like this: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">328</span><span class=\"w\"> </span><span class=\"mi\">328</span><span class=\"w\"> </span><span class=\"n\">funcref</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$__stack_pointer</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1048576</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_start</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"__main_void\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__main_void</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"__indirect_function_table\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>",
        "id": 447412416,
        "sender_full_name": "Bryton",
        "timestamp": 1719475427
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">).</span><span class=\"n\">root</span><span class=\"p\">().</span><span class=\"n\">modules</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"module name: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"__indirect_function_table\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">extern_type_table</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">extern_type_table</span><span class=\"p\">.</span><span class=\"n\">table</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">table_type</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">table_type</span><span class=\"p\">.</span><span class=\"n\">wasmtime_table</span><span class=\"p\">();</span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">callback_index</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">                                         </span><span class=\"p\">.</span><span class=\"n\">as_func</span><span class=\"p\">()</span>\n<span class=\"w\">                                         </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">                                         </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">typed</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">store</span><span class=\"p\">)</span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">                            </span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n\n<span class=\"w\">                        </span><span class=\"p\">}</span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(()))</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"nb\">Err</span><span class=\"p\">(()))</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 447647166,
        "sender_full_name": "Bryton",
        "timestamp": 1719547193
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>   the above code shows the idea of how to get a typed function by index instead of by a string name. </p>\n<p>It should work if  the <code>TableType::wasmtime_table()</code> is not a crate private funciton.</p>",
        "id": 447648581,
        "sender_full_name": "Bryton",
        "timestamp": 1719547560
    },
    {
        "content": "<p>I believe that you must have some thoughts that don't export the Table to users.  Could you give me the reason why it is designed like this?</p>",
        "id": 447649076,
        "sender_full_name": "Bryton",
        "timestamp": 1719547718
    },
    {
        "content": "<p>From my understanding, I think it is quite normal to setup a callback function by pointer/index(wasm table) instead of by a function name. <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 447649349,
        "sender_full_name": "Bryton",
        "timestamp": 1719547831
    },
    {
        "content": "<p>Sorry but I think you're really far afield of what's supported here. I may not be able to help much more other than saying that the above example fundamentally won't work, you can't get access to a <code>Table</code> from a component. There's various foundational reasons for this which stem from other architectural decisions. Doing this won't be as simple as \"just make this function public\" or something like that.</p>",
        "id": 449885465,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720449051
    }
]