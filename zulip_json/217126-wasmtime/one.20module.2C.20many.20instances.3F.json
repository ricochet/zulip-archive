[
    {
        "content": "<p>I'm working on a project that uses the Go bindings for wasmtime, and if I create two instances from the same store, wasi instance, and module I get a call stack exhausted panic when I try to call the entrypoint func. I also tried to construct a new wasi instance for each module instance, but no difference. Am I misunderstanding something?</p>",
        "id": 198459946,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590163687
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> hm what does the stack trace look like?</p>",
        "id": 198460099,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590163762
    },
    {
        "content": "<p><code>wasm backtrace: 0: 0xffffffff - &lt;unknown&gt;!_start</code></p>",
        "id": 198460295,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590163840
    },
    {
        "content": "<p>In my specific case my wasm program calls out to the host, and the host sleeps for 1s. I can try to repro by sleeping inside the wasm program instead.</p>",
        "id": 198460549,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590163955
    },
    {
        "content": "<p>(the sleep isn't normal operation, just for my reproduction)</p>",
        "id": 198460580,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590163969
    },
    {
        "content": "<p>hm is that the only stack frame?</p>",
        "id": 198460791,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590164072
    },
    {
        "content": "<p>oh you know that actually looks like a segfault</p>",
        "id": 198460829,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590164085
    },
    {
        "content": "<p>rather than a stack exhausted panic</p>",
        "id": 198460840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590164089
    },
    {
        "content": "<p>do you have some code I could poke at?</p>",
        "id": 198460856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590164095
    },
    {
        "content": "<p>i can try to reproduce it without all my nonsense</p>",
        "id": 198461053,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590164170
    },
    {
        "content": "<p>ok i can repro it easily</p>",
        "id": 198462303,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590164653
    },
    {
        "content": "<p>sending up a branch</p>",
        "id": 198462316,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590164657
    },
    {
        "content": "<p><a href=\"https://github.com/avidal/wasmtime-go/blob/concurrent-segfault/repro_test.go\">https://github.com/avidal/wasmtime-go/blob/concurrent-segfault/repro_test.go</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/avidal/wasmtime-go/blob/concurrent-segfault/repro_test.go\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/191975?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/avidal/wasmtime-go/blob/concurrent-segfault/repro_test.go\" title=\"avidal/wasmtime-go\">avidal/wasmtime-go</a></div><div class=\"message_embed_description\">Go WebAssembly runtime powered by Wasmtime. Contribute to avidal/wasmtime-go development by creating an account on GitHub.</div></div></div>",
        "id": 198462945,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590164913
    },
    {
        "content": "<p>the wasi stuff is a red herring it's not necessary for the reproduction</p>",
        "id": 198463112,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590165001
    },
    {
        "content": "<p>run it with <code>go test -v -run Repro</code> and all but the first subtest will fail</p>",
        "id": 198463273,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590165077
    },
    {
        "content": "<p>ah I see, so currently nothing in <code>Store</code> can be used concurrently</p>",
        "id": 198463514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590165192
    },
    {
        "content": "<p>so believe this is segfaulting due to data races</p>",
        "id": 198463521,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590165197
    },
    {
        "content": "<p>everything within a <code>Store</code> must be locked to the same goroutine</p>",
        "id": 198463539,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590165206
    },
    {
        "content": "<p>hm, but i can't get a compiled module without a store..</p>",
        "id": 198463655,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590165253
    },
    {
        "content": "<p>My program currently instantiates for each incoming http request to avoid the setup costs. I suppose I'll need to use a pool instead and pre-fill it with a handful of stores.</p>",
        "id": 198463844,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590165366
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300054\">@Alex Vidal</span> ah yeah currently it's a limitation that you need to compile once-per-thread</p>",
        "id": 198465110,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590166052
    },
    {
        "content": "<p>we very much want to lift that limitation soon</p>",
        "id": 198465132,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590166062
    },
    {
        "content": "<p>ok cool. I'll setup a pool for now then. Is there a tracking issue I can subscribe to?</p>",
        "id": 198466224,
        "sender_full_name": "Alex Vidal",
        "timestamp": 1590166562
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\">https://github.com/bytecodealliance/wasmtime/issues/793</a> is probably the closest equivalent</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/793\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/793\" title=\"Reconciling `wasmtime::Instance` and `Send` 路 Issue #793 路 bytecodealliance/wasmtime\">Reconciling `wasmtime::Instance` and `Send` 路 Issue #793 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently as of today the Instance type in the wasmtime crate is not Send. This means that you cannot send it to other threads once it&#39;s created. There&#39;s a whole bunch of technical issues a...</div></div></div>",
        "id": 198466568,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590166701
    }
]