[
    {
        "content": "<p>Hey! I'm following this component tutorial at <a href=\"https://component-model.bytecodealliance.org/language-support/rust.html\">https://component-model.bytecodealliance.org/language-support/rust.html</a><br>\nI just generated the component via <code>cargo component new add --lib</code>.<br>\nWhen I build and checked the output with <code>wasm-tools component wit target/wasm32-wasip1/release/add.wasm</code> instead of just the package and world with the 1 line export I got a ton of wasi related things in there too.</p>\n<p>There's no mention of the string <code>wasi</code> anywhere in the code or toml files, so I'm wondering where the wasi dependency is coming from, I have the latest cargo-component. Cheers :)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">environment</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">exit</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">streams</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stdout</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stderr</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">clocks</span><span class=\"o\">/</span><span class=\"n\">wall</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">filesystem</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">filesystem</span><span class=\"o\">/</span><span class=\"n\">preopens</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">hello</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">io</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"w\"> </span><span class=\"p\">{</span>\n</code></pre></div>",
        "id": 490095340,
        "sender_full_name": "Trent",
        "timestamp": 1734671292
    },
    {
        "content": "<p>Oh, it seems <code>cargo component build</code> defaults to using one of the wasi targets, instead of <code>wasm32-unknown-unknown</code>. Specifying the unknown target fixed the issue.</p>",
        "id": 490096971,
        "sender_full_name": "Trent",
        "timestamp": 1734672868
    },
    {
        "content": "<p>Hey Trent when building a Rust program those extra WASI deps are included because the program <em>could</em> use <code>stdin</code>, <code>stdout</code>, <code>exit</code> and <code>std::fs</code> operations (whether they are actually supported by the host that will run the components or not).</p>\n<p>As an example, <code>jco</code> (the WebAssembly JS toolchain) will include <code>wasi:http/outgoing-handler</code> because components can call <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch\"><code>fetch()</code></a> or NodeJS arbitrarily. In <code>jco</code> this behavior can be controlled (via a <code>--disable</code> flag) but the concept is the same.</p>\n<p>Running plain <code>cargo build --target=wasm32-wasip1</code> against the example component does not  <em>seem</em> to produce the extra <code>wasi</code> imports, at first:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"p\">:</span><span class=\"nc\">root</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"p\">:</span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">example</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But if you look at the WAT (<code>wasm-tools print target/wasm32-wasi/debug/add.wasm</code>), you'll see;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"cp\">$add</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">4</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">5</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">6</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">7</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">8</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">9</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">10</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">11</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">12</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">13</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"fd_write\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_ZN4wasi13lib_generated22wasi_snapshot_preview18fd_write17h475f31d58a873943E</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">5</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"environ_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_environ_get</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"environ_sizes_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_environ_sizes_get</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"mi\">37</span><span class=\"w\"> </span><span class=\"n\">funcref</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">17</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>When <code>cargo component</code> gets to creating a WebAssembly component  out of the module (the output of <code>cargo build --target=wasm32-wasip1</code> is a <em>module</em>!), the <code>fd_write, </code>proc_exit<code> and </code>environ_*` imports (added because you <em>could</em> use them) are resolved into WASI imports.</p>\n<p>The explicit import in the generated module explain <code>wasi:cli/exit</code> and <code>wasi:cli/environment</code> but what about the rest of them? Well -- <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/deps/filesystem/types.wit#L427\"><code>wasi:filesystem</code>'s <code>write</code> method</a> (which is needed for <code>fd_write</code> happens to <a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/deps/filesystem/types.wit#L29\">import <code>wasi:io/streams</code> and <code>wasi:clocks</code></a>, and you can imagine how the other imports get pulled in.</p>\n<p>Building for <code>wasm32-unknown-unknown</code> removes the expectation of the underlying platform being there, which is why you don't get any of the WASI imports (as you intended!). This is certainly a way to trim down the imports, but the problem is that if you ever use parts of <code>std</code>, you might get the idea that you were successfully using something like <code>std::env::var</code> because it would <em>compile</em>, but you'd get no-ops in your code (courtesy of <a href=\"https://github.com/rust-lang/rust/blob/13170cd787cb733ed24842ee825bcbd98dc01476/library/std/src/sys/pal/wasm/mod.rs#L24\"><code>rustc</code> platform support stubs</a>)</p>\n<p>For example the code below builds on <code>wasm32-unknown-unknown</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"n\">_x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"TEST\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"c1\">// x + y // obviously we'd never get here</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>But you'll <em>never</em> get a chance to actually handle that <code>stderr</code> output at the host level -- it will be compiled into a no-op, <em>rather</em> than <code>wasi::cli/stderr</code> calls (that the host or other components can implement).</p>\n<p><strong>This is obviously a lot to take in! To try to summarize, I wonder if what we need to do here is:</strong></p>\n<ul>\n<li>Add documentation regarding components that do pure computation, and being able to remove all WASI imports via the <code>wasm32-unknown-unknown</code> target (and include the caveats)</li>\n<li>Make it easy to set a <code>rustc</code> build targets from the <code>Cargo.toml</code> in the <code>cargo component</code> config there</li>\n<li>Add a <code>--wit</code> option to <code>cargo component new</code> so that we can target an existing WIT world (whether a local file, in a registry, or possibly somewhere on the internet) when creating a new component (i.e. this command should copy in the WIT file, set the world contained in it  as the <code>target</code> in config, etc)</li>\n<li>Enable local WIT file sources (right now if you try to target the <code>world</code> in the local WIT file, <code>cargo component</code> expects the WIT to already be present in a registry, rather than available locally) -- This wouldn't have really solved your problem, but I was surprised by how this worked.</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/995c0c58fb542e2180e01753cfa3c88c39d0272c/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e64383933353235613466623566623166363761322e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/fetch\" title=\"Window: fetch() method - Web APIs | MDN\">Window: fetch() method - Web APIs | MDN</a></div><div class=\"message_embed_description\">The fetch() method of the Window interface starts the process of fetching a resource from the network, returning a promise that is fulfilled once the response is available.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/deps/filesystem/types.wit#L427\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f58334bd3dc631638dfbd4a039d538dd5d6d3cea/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366330356635343335363865633138616264373734633935353236353739313235363232636161633834336332323965353766653230646665393833393033622f576562417373656d626c792f776173692d636c69&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/deps/filesystem/types.wit#L427\" title=\"wasi-cli/wit/deps/filesystem/types.wit at main · WebAssembly/wasi-cli\">wasi-cli/wit/deps/filesystem/types.wit at main · WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Command-Line Interface (CLI) World for WASI. Contribute to WebAssembly/wasi-cli development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/deps/filesystem/types.wit#L29\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f58334bd3dc631638dfbd4a039d538dd5d6d3cea/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366330356635343335363865633138616264373734633935353236353739313235363232636161633834336332323965353766653230646665393833393033622f576562417373656d626c792f776173692d636c69&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-cli/blob/main/wit/deps/filesystem/types.wit#L29\" title=\"wasi-cli/wit/deps/filesystem/types.wit at main · WebAssembly/wasi-cli\">wasi-cli/wit/deps/filesystem/types.wit at main · WebAssembly/wasi-cli</a></div><div class=\"message_embed_description\">Command-Line Interface (CLI) World for WASI. Contribute to WebAssembly/wasi-cli development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/13170cd787cb733ed24842ee825bcbd98dc01476/library/std/src/sys/pal/wasm/mod.rs#L24\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0b54a2e8270e134b4aced32f3be36635c1859e5e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653131636166303737313664343865656430656134626164303133663561366136616261306133346630613435666334303963646362346136363464306465632f727573742d6c616e672f72757374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/13170cd787cb733ed24842ee825bcbd98dc01476/library/std/src/sys/pal/wasm/mod.rs#L24\" title=\"rust/library/std/src/sys/pal/wasm/mod.rs at 13170cd787cb733ed24842ee825bcbd98dc01476 · rust-lang/rust\">rust/library/std/src/sys/pal/wasm/mod.rs at 13170cd787cb733ed24842ee825bcbd98dc01476 · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust-lang/rust</div></div></div>",
        "id": 490269017,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734758995
    },
    {
        "content": "<p>What's somewhat interesting here is that by using <code>wasm32-unknown-unknown</code> you can actually write code like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[allow(warnings)]</span>\n<span class=\"k\">mod</span><span class=\"w\"> </span><span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span><span class=\"w\"> </span><span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s\">\", ECHO!\"</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">bindings</span><span class=\"p\">::</span><span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">with_types_in</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>And build it into a <code>wasm32-unknown-unknown</code> module -- at first glance this doesn't make sense (at least to me!) because core WASM modules have no concept of <code>String</code>s, but it's the <code>bindings::export!</code> that converts the Rust code above to make it work, using the generated lifting/lowering of Component Model types (in<code>bindings.rs</code>) from the module (i.e. that's how a <code>fn echo(s: String) -&gt; String</code> will turn into <code>(func $echo (;34;) (type 2) (param i32 i32) (result i32) ...)</code>.</p>\n<p>Of course, wherever you use the module from you'll need to ensure you have the <em>same</em> lifting/lowering scheme (i.e. the Component Model) working for those input <code>i32</code>s to go from a <code>String</code> (on the caller side) into <code>i32</code>s as input, and for the <code>i32</code> in the result to turn into a <code>String</code> as well.</p>",
        "id": 490270690,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734760792
    },
    {
        "content": "<p>Oh BTW to get more specific about those imports it's the default Rust panic and unwind machinery built into <code>std</code> that is explicitly using those imports :) -- it's not that you <em>could</em> use them.</p>\n<p>To remove it at the std library level you'd have to use nightly Rust to remove the panic/unwind machinery:</p>\n<p>First ensure that <code>wasm32-wasip1</code> is installed on the nightly toolchain:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rustup</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">toolchain</span><span class=\"w\"> </span><span class=\"n\">nightly</span>\n</code></pre></div>\n<p>Then use nightly to build <code>std</code> with panic being just a straight abort:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">RUSTUP_TOOLCHAIN</span><span class=\"o\">=</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"n\">std</span><span class=\"p\">,</span><span class=\"n\">panic_abort</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">panic_immediate_abort</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n</code></pre></div>\n<p>(this works because <code>cargo component</code> just passes everything to <code>cargo build</code>, though it doesn't take the <code>+nightly</code> modifier, we can use nightly via ENV)</p>\n<p>If you use just regular <code>cargo build</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">=</span><span class=\"n\">std</span><span class=\"p\">,</span><span class=\"n\">panic_abort</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">panic_immediate_abort</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasip1</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">release</span>\n</code></pre></div>\n<p>After doing that, if you <code>wasm-tools print</code> the resulting component, you'll see:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"err\">component</span>\n  <span class=\"p\">(</span><span class=\"err\">core</span> <span class=\"k\">module</span> <span class=\"cm\">(;0;)</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;1;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;2;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;3;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;4;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;5;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;6;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cm\">(;7;)</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\">table</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">2 2</span> <span class=\"k\">funcref</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mi\">17</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mf\">1048576</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"echo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"cabi_post_echo\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"cabi_realloc_wit_bindgen_0_36_0\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"cabi_realloc\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"mi\">19</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\">elem</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"nb\">i32.const</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">func</span> <span class=\"mi\">19</span><span class=\"p\">)</span>\n<span class=\"c1\">;; ...</span>\n</code></pre></div>\n<p>Obviously... this is <em>quite</em> involved :) (and requires nightly rust) -- targeting <code>wasm32-unknown-unknown</code> is certainly easier, but hopefully at least this definitively answers the question!</p>",
        "id": 490272624,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734762488
    }
]