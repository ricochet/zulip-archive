[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">read_dwarf_package</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">wasm_file</span>: <span class=\"nc\">PathBuf</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">DwarfPackage</span><span class=\"o\">&lt;</span><span class=\"n\">Relocate</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gimli</span>::<span class=\"n\">EndianSlice</span><span class=\"o\">&lt;'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">gimli</span>::<span class=\"n\">LittleEndian</span><span class=\"o\">&gt;&gt;&gt;&gt;</span>\n<span class=\"w\">    </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dwp_path</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasm_file</span><span class=\"p\">.</span><span class=\"n\">with_extension</span><span class=\"p\">(</span><span class=\"s\">\"dwp\"</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">fs</span>::<span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">dwp_path</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">                </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read_to_end</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"Error reading dwarf package: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">object_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">object</span>::<span class=\"n\">File</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"p\">,</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"Failed to parse file '{:?}': {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dwp_path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">};</span>\n\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">load_dwp</span><span class=\"p\">(</span><span class=\"n\">object_file</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">),</span>\n<span class=\"w\">                    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"fm\">eprintln!</span><span class=\"p\">(</span><span class=\"s\">\"Failed to load Dwarf package '{:?}': {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">dwp_path</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">err</span><span class=\"p\">);</span>\n<span class=\"w\">                        </span><span class=\"nb\">None</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">None</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>This RUst fails with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0515</span><span class=\"p\">]</span>: <span class=\"nc\">cannot</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">referencing</span><span class=\"w\"> </span><span class=\"n\">local</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">buffer</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"err\">\\</span><span class=\"n\">wasmtime</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">runtime</span><span class=\"err\">\\</span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">326</span>:<span class=\"mi\">36</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">317</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">object_file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">object</span>::<span class=\"n\">File</span>::<span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"o\">&amp;*</span><span class=\"n\">buffer</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                                               </span><span class=\"o\">------</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">buffer</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"mi\">326</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">                     </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"nb\">Some</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                                    </span><span class=\"o\">^^^^^^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">returns</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">referencing</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"n\">owned</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">current</span><span class=\"w\"> </span><span class=\"n\">function</span>\n</code></pre></div>\n<p>which I understand but I can't find the solution.  I've been playing for a few hours with <code>ReadCache</code> and <code>ReadCachedRange</code> to try and <code>move</code> the <code>Vec</code> into ownership by <code>package</code> but my Rust skills are too poor.  Any tips for how I can stop the borrow ?</p>",
        "id": 424047090,
        "sender_full_name": "Scott Waye",
        "timestamp": 1709221082
    },
    {
        "content": "<p>I think you'll probably want to refactor this to have the <code>buffer</code> owned on the stack above this function, e.g. the caller reads the dwp file and passes in the buffer. Having <code>buffer</code> owned by the <code>package</code> return value is (if I understand this correctly) a self-borrowing struct which isn't easy to manage in Rust. </p>\n<p>Another, perhaps wonky, option would be to use <a href=\"https://docs.rs/wasmtime-environ/latest/wasmtime_environ/struct.ScopeVec.html\"><code>ScopeVec</code></a> to extend the lifetime of something to a higher lifetime, basically you'd take <code>&amp;ScopeVec&lt;u8&gt;</code> in this function and then <code>scope_vec.push(buffer)</code> would return <code>&amp;[u8]</code> tied to the <code>ScopeVec</code>, not the local stack allocation</p>",
        "id": 424054869,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709223175
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Split.20dwarf.20-.20Rust.20borrowing.20help.20.3F/near/424054869\">said</a>:</p>\n<blockquote>\n<p>I think you'll probably want to refactor this to have the <code>buffer</code> owned on the stack above this function, e.g. the caller reads the dwp file and passes in the buffer. Having <code>buffer</code> owned by the <code>package</code> return value is (if I understand this correctly) a self-borrowing struct which isn't easy to manage in Rust. </p>\n<p>Another, perhaps wonky, option would be to use <a href=\"https://docs.rs/wasmtime-environ/latest/wasmtime_environ/struct.ScopeVec.html\"><code>ScopeVec</code></a> to extend the lifetime of something to a higher lifetime, basically you'd take <code>&amp;ScopeVec&lt;u8&gt;</code> in this function and then <code>scope_vec.push(buffer)</code> would return <code>&amp;[u8]</code> tied to the <code>ScopeVec</code>, not the local stack allocation</p>\n</blockquote>\n<p>Thanks!</p>",
        "id": 424066272,
        "sender_full_name": "Scott Waye",
        "timestamp": 1709226261
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 424066281,
        "sender_full_name": "Notification Bot",
        "timestamp": 1709226263
    }
]