[
    {
        "content": "<p>Call me a mad scientist for this, if you'd like.</p>\n<p>I want to be able to, at runtime, satisfy a component's imports, using the exports of another component I have instantiated, without having to manually define each resource and function.</p>\n<p>This doesn't seem possible right now. I want to make it possible. I have never contributed to wasmtime, and this is certainly a huge project to take on as a first contribution. I've been looking under the hood, and have some ideas, but I figure I should probably announce my intentions so people know I'm up to this. That way, I can hopefully ask questions, too.</p>",
        "id": 479539382,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730226026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"772617\">@Julia DeMille</span> a very interesting goal for sure!</p>\n<p>it might help (me, anyway) to define a little more what you mean by dynamically/at runtime: do you mean that you want to start a component C, without any of its imports initially, and as external resources are called/used, dynamically fill them in somehow? or do you mean that you want a reflection-like introspection ability from within one component, to load another component, work out what it needs to instantiate, and invent/plug that in before starting it? or something else?</p>",
        "id": 479540500,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730226442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Making.20it.20possible.20to.20plug.20components.20into.20others.20at.20runtime/near/479540500\">said</a>:</p>\n<blockquote>\n<p>or do you mean that you want a reflection-like introspection ability from within one component, to load another component, work out what it needs to instantiate, and invent/plug that in before starting it?</p>\n</blockquote>\n<p>This one—when loading in a component, being able to supply the <code>Linker</code> with another component and have its exports satisfy whatever imports it can.</p>",
        "id": 479540778,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730226546
    },
    {
        "content": "<p>can you unpack \"whatever imports it can\" a bit -- is this a best-effort thing, where we're duck-type-matching things up and there may be some missing pieces? or is there a step in this system where we inspect the component, see it wants a world W with imports A, B, C, and put together exactly those?</p>",
        "id": 479541022,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730226633
    },
    {
        "content": "<p>Take the <code>regex</code> and <code>validator</code> components from the <a href=\"https://component-model.bytecodealliance.org/creating-and-consuming/composing.html\">composing components page</a> as an example. They would be matched based on the WIT, I suppose.</p>\n<p>If there are imports not defined by a provided component, it would be on the user to define those before instantiating, as normal.</p>",
        "id": 479541641,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730226868
    },
    {
        "content": "<p>Possibly relevant: <a href=\"https://github.com/rylev/wepl\">https://github.com/rylev/wepl</a></p>\n<p>From the <code>Features</code> section:</p>\n<blockquote>\n<p>Satisfying imports with other WebAssembly Components</p>\n</blockquote>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/wepl\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ab5cf1a71c45e887dda4a0ad38c65ac071f8cc65/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623039373337376132303536636663373139373766636364636533643335656238343934326238396335636138326330313161323535633234653139336430652f72796c65762f7765706c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/wepl\" title=\"GitHub - rylev/wepl: A repl for WebAssembly Components\">GitHub - rylev/wepl: A repl for WebAssembly Components</a></div><div class=\"message_embed_description\">A repl for WebAssembly Components. Contribute to rylev/wepl development by creating an account on GitHub.</div></div></div>",
        "id": 479545430,
        "sender_full_name": "Joel Dice",
        "timestamp": 1730228400
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Making.20it.20possible.20to.20plug.20components.20into.20others.20at.20runtime/near/479545430\">said</a>:</p>\n<blockquote>\n<p>Possibly relevant: <a href=\"https://github.com/rylev/wepl\">https://github.com/rylev/wepl</a></p>\n</blockquote>\n<p>Will take a look, thanks</p>",
        "id": 479545535,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730228425
    },
    {
        "content": "<p>That crate uses <code>wasm_compose</code>, which has been superseded by <a href=\"https://github.com/bytecodealliance/wac/\">wac</a>. I guess I could try to work out how wac works.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wac/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7d7212e74f13ead418b7154ab2ca991e9e284450/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656338343134646665316264626634383730336235386435643036346565303239336665646264356362343833663137383036306134376439323964613133322f62797465636f6465616c6c69616e63652f776163&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wac/\" title=\"GitHub - bytecodealliance/wac: WebAssembly Composition (WAC) tooling\">GitHub - bytecodealliance/wac: WebAssembly Composition (WAC) tooling</a></div><div class=\"message_embed_description\">WebAssembly Composition (WAC) tooling. Contribute to bytecodealliance/wac development by creating an account on GitHub.</div></div></div>",
        "id": 479590803,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730250990
    },
    {
        "content": "<p>it's all just code.</p>",
        "id": 479635999,
        "sender_full_name": "Ralph",
        "timestamp": 1730279462
    },
    {
        "content": "<p>It looks like <a href=\"https://github.com/bytecodealliance/wac/blob/main/crates/wac-graph/src/plug.rs#L23\"><code>plug</code> in the wac-graph crate</a> is the most notable function. It's doing... effectively what I planned to do?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wac/blob/main/crates/wac-graph/src/plug.rs#L23\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5db61aafce890c69a21908d2efc565bc78d72b29/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636133363963333462303464366138396233306162333537336133656666313130363361613037363738663532386465663837623765636465396363393033622f62797465636f6465616c6c69616e63652f776163&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wac/blob/main/crates/wac-graph/src/plug.rs#L23\" title=\"wac/crates/wac-graph/src/plug.rs at main · bytecodealliance/wac\">wac/crates/wac-graph/src/plug.rs at main · bytecodealliance/wac</a></div><div class=\"message_embed_description\">WebAssembly Composition (WAC) tooling. Contribute to bytecodealliance/wac development by creating an account on GitHub.</div></div></div>",
        "id": 479998441,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730438724
    },
    {
        "content": "<p>It <em>is</em> using a graph instead of wasmtime's linker model, though. Still, shouldn't be terribly hard to adapt.</p>",
        "id": 479998521,
        "sender_full_name": "Julia DeMille",
        "timestamp": 1730438779
    },
    {
        "content": "<p>Yes, <code>wac plug</code> does what it sounds like you're trying to do except statically, producing a new component. Based on my (limited) understanding of the wac-graph code I'm not sure that it will be directly translatable to the wasmtime Linker, but others might have a better understanding there.</p>",
        "id": 480045718,
        "sender_full_name": "Lann Martin",
        "timestamp": 1730465070
    }
]