[
    {
        "content": "<p>Hey everyone, I'm hoping that this is just something dumb that I don't understand. I'll preface this by saying that I'm new to WASM/WASI/and rust. I'm trying to write a host in rust that can run wasm modules essentially as plugins. Even more simple than that I've put together just a simple reproduction of the error I'm seeing <a href=\"https://github.com/bloveless/wasmtime-min-repo\">here</a>. In theory you should be able to see the same error by running <code>make</code> in that repo.</p>\n<p>It seems that using go 1.21 wasip1 to build isn't working quite right. What is interesting is that it seems to execute the program correctly (I see the Hello World output) but it seems to have a hard time exiting the module properly. And prints out a strange message \"Exited with i32 exit status 0\" which seems like it would imply that it exited successfully.</p>\n<p>A separate question is that it takes 4 seconds to load the module from a file in my program but the wasmtime cli is able to run it instantly. I'm wondering if I'm doing something else wrong here.</p>\n<p>Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bloveless/wasmtime-min-repo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/da59b75d4585cd22d4c0b44652b576a771054c37\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356232343262343263643830343561383039636164386365323766336435633534303032666262306562353565313261353636643037636439323438613035662f626c6f76656c6573732f7761736d74696d652d6d696e2d7265706f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bloveless/wasmtime-min-repo\" title=\"GitHub - bloveless/wasmtime-min-repo: Minimum reproduction of failure to run go wasi module from wasmtime\">GitHub - bloveless/wasmtime-min-repo: Minimum reproduction of failure to run go wasi module from wasmtime</a></div><div class=\"message_embed_description\">Minimum reproduction of failure to run go wasi module from wasmtime - GitHub - bloveless/wasmtime-min-repo: Minimum reproduction of failure to run go wasi module from wasmtime</div></div></div>",
        "id": 418391000,
        "sender_full_name": "Brennon Loveless",
        "timestamp": 1706334818
    },
    {
        "content": "<p>Hi Brennon <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> This is a bit subtle, and something we'd ideally handle automatically—but which isn't easy to handle internally for you.</p>\n<p>The issue is that wasm modules don't have a way to make the entire host process exit as a call to <code>exit</code> in a native application would. Instead, the WASI implementation of the <code>exit</code> function raises an error in the host application, which can be handled in different ways. What you're seeing is the default of not handling the error. Here's an example of how you can instead test it and silently exit the host application—or do whatever else is right in your circumstances: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/27d3ef2ff5652f7dd6c5af07e6d9ee1587762030/crates/bench-api/src/lib.rs#L545-L551\">https://github.com/bytecodealliance/wasmtime/blob/27d3ef2ff5652f7dd6c5af07e6d9ee1587762030/crates/bench-api/src/lib.rs#L545-L551</a></p>",
        "id": 418417060,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1706361375
    },
    {
        "content": "<p>This makes a lot of sense! Thank you for the explanation and example!</p>",
        "id": 418420466,
        "sender_full_name": "Brennon Loveless",
        "timestamp": 1706364649
    },
    {
        "content": "<blockquote>\n<p>A separate question is that it takes 4 seconds to load the module from a file in my program but the wasmtime cli is able to run it instantly. I'm wondering if I'm doing something else wrong here.</p>\n</blockquote>\n<p>This is likely caused by running your host from a debug build, so try running with <code>cargo run --release</code>.</p>\n<p>Additionally, you will want to enable the compilation cache via <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.cache_config_load_default\">Config.cache_config_load_default</a> as that will ensure that your host loads a previously-compiled version of your module if your module does not change between runs.</p>",
        "id": 418440183,
        "sender_full_name": "Peter Huene",
        "timestamp": 1706383053
    },
    {
        "content": "<p>Awesome! I didn’t even thing about debug vs release mode. I was digging around the wasmtime cli code and didn’t see any magic bullets but of course o didn’t think about trying release mode :)</p>\n<p>thank you!</p>",
        "id": 418444625,
        "sender_full_name": "Brennon Loveless",
        "timestamp": 1706387741
    }
]