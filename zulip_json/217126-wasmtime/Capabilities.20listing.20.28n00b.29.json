[
    {
        "content": "<p>I'm just getting into wasmtime (I'm part of the Enarx project - <a href=\"https://enarx.io\">https://enarx.io</a>), and I'm starting to try out some bits and pieces.  One of the things I'm playing with is Directory and VirtualDirectory creation.  This works as expected (once I worked out what \"expected\" should be!), but it raised a set of questions in my mind, which I hope aren't too stupid.  If there's documentation I've missed, or if this question is best asked in another stream, then please let me know.</p>\n<p>In order to allow a workload to access a Directory, it needs to be granted the capability to do so.  This is a Good Thing[tm], obviously.  What I'm specifically interested in is whether there's a way to see, for a particular WasiCtx, what capabilities have been granted.  This seems like an obvious thing to be able to check - one might even want to revoke capabilities at runtime on occasion.  My understanding of the Directory capability granting in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs\">https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs</a> is that a Directory is just added: there's no accounting going on.  Am I missing something at a different level?  Is this something which has come up elsewhere?  Is it something to propose?</p>\n<p>Sorry if this is appallingly n00b: I promise to read anything I'm sent to look, at but I couldn't track down an answer with ease.</p>\n<p>Many thanks,</p>\n<p>-Mike.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/master/crates/wasi-common/src/ctx.rs\" title=\"bytecodealliance/wasmtime\">bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - bytecodealliance/wasmtime</div></div></div>",
        "id": 199594813,
        "sender_full_name": "Mike Bursell",
        "timestamp": 1591174706
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 199610495,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1591185966
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"301277\">@Mike Bursell</span> <code>WasiCtx</code>'s <code>entries</code> member holds all the capabilities for a <code>WasiCtx</code>, but we don't yet have APIs for users to query that information or revoke capabilities</p>",
        "id": 199620772,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591191830
    },
    {
        "content": "<p>I think it would pretty straightforward to add such APIs.</p>",
        "id": 199620979,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591191932
    },
    {
        "content": "<p>For revocation, one thing to think about is whether we should track which capabilities a given capability is derived from, eg. which directory a file was opened from, so that if the user revokes a capability, we could revoke everything derived from it</p>",
        "id": 199621178,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1591192042
    },
    {
        "content": "<p>Thanks for the pointers.  I'll have a look and a think before replying in any further detail.</p>",
        "id": 199622834,
        "sender_full_name": "Mike Bursell",
        "timestamp": 1591192853
    }
]