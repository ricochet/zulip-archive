[
    {
        "content": "<p>I'm seeing some peculiar behavior in Wasmtime around stack trace generation when a trap occurs.  There appear to be some runtime environments where stack traces do not get generated.</p>\n<p>Specifically, I have a Python program that embeds Wasmtime (using the Wasmtime Python API).  It runs a Rust-sourced Wasm module that causes a trap by trying to unwrap a None value.  When I run it on my local system, an error message and stack trace are both present in the trap object's message.  However, when I run the same program in a Docker container, the only thing in the message is the error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Looking through the Wasmtime source code, I see a comment in <code>trap.rs</code> that says:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"sd\">/// This function return an `Option` of a list of frames to indicate that</span>\n<span class=\"w\">    </span><span class=\"sd\">/// wasm frames are not always available. Frames will never be available if</span>\n<span class=\"w\">    </span><span class=\"sd\">/// backtraces are disabled via</span>\n<span class=\"w\">    </span><span class=\"sd\">/// [`Config::wasm_backtrace`](crate::Config::wasm_backtrace). Frames will</span>\n<span class=\"w\">    </span><span class=\"sd\">/// also not be available for freshly-created traps. WebAssembly frames are</span>\n<span class=\"w\">    </span><span class=\"sd\">/// currently only captured when the trap reaches wasm itself to get raised</span>\n<span class=\"w\">    </span><span class=\"sd\">/// across a wasm boundary.</span>\n</code></pre></div>\n<p>However, none of the described scenarios appear to apply in my case, at least on the surface.  Is there an OS package I might need to install in the container, or perhaps some other specific environmental requirement to be aware of when running in a container?  An additional data point is that I <em>am</em> able to manually inspect my program's stack in a debugger in the same container, so it seems that the information is at least available.</p>\n<p>Thank you.<br>\nPete</p>",
        "id": 286836787,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1655756973
    },
    {
        "content": "<p>Wasmtime uses the system libunwind (or some variation thereof) to generate a backtrace so the difference here is likely in either how something like Python is compiled or the actual code that's acquring the backtrace (e.g. the implementation of <code>_Unwind_Backtrace</code>). This probably isn't related to Wasmtime configuration and is rather related to system/compile things. If you can share the Docker reproduction though I can try to help dig in a bit</p>",
        "id": 286838618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1655758727
    },
    {
        "content": "<p>Thanks!  I'll put together a simple test case and follow-up here.</p>",
        "id": 286839534,
        "sender_full_name": "Peter Vetere",
        "timestamp": 1655759518
    }
]