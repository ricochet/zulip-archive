[
    {
        "content": "<p>Hi all,</p>\n<p>On 0.19.0, valgrind keeps complaining about a possible leak:</p>\n<div class=\"codehilite\"><pre><span></span><code>==642999== 720 bytes in 1 blocks are still reachable in loss record 7 of 14\n==642999==    at 0x483A809: malloc (vg_replace_malloc.c:307)\n==642999==    by 0x4AFB4F1: alloc::collections::btree::map::BTreeMap&lt;K,V&gt;::insert (in /usr/local/opt/lib/libwasmtime.so)\n==642999==    by 0x4AF62E4: wasmtime::frame_info::register (in /usr/local/opt/lib/libwasmtime.so)\n==642999==    by 0x4ADFC4C: wasmtime::instance::Instance::new (in /usr/local/opt/lib/libwasmtime.so)\n==642999==    by 0x498A2F1: wasmtime_instance_new (in /usr/local/opt/lib/libwasmtime.so)\n</code></pre></div>\n\n\n<p>There seems to have been recent work in that area recently (<a href=\"https://github.com/bytecodealliance/wasmtime/commit/f30ce1fe9717aaef65d16b5b30498f8cabeb632b\">https://github.com/bytecodealliance/wasmtime/commit/f30ce1fe9717aaef65d16b5b30498f8cabeb632b</a>) - could Valgrind's concern be legitimate here?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/commit/f30ce1fe9717aaef65d16b5b30498f8cabeb632b\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/commit/f30ce1fe9717aaef65d16b5b30498f8cabeb632b\" title=\"externref: implement stack map-based garbage collection · bytecodealliance/wasmtime@f30ce1f\">externref: implement stack map-based garbage collection · bytecodealliance/wasmtime@f30ce1f</a></div><div class=\"message_embed_description\">For host VM code, we use plain reference counting, where cloning increments\nthe reference count, and dropping decrements it. We can avoid many of the\non-stack increment/decrement operations that ty...</div></div></div>",
        "id": 204983735,
        "sender_full_name": "Thibault Charbonnier",
        "timestamp": 1595644065
    },
    {
        "content": "<p>I also see this one:</p>\n<div class=\"codehilite\"><pre><span></span><code>==706723== 8,192 bytes in 8 blocks are still reachable in loss record 32 of 34\n==706723==    at 0x483A809: malloc (vg_replace_malloc.c:307)\n==706723==    by 0x58A087B: alloc::alloc::alloc (alloc.rs:80)\n==706723==    by 0x58A1063: &lt;alloc::alloc::Global as core::alloc::AllocRef&gt;::alloc (alloc.rs:174)\n==706723==    by 0x5896D2D: alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (raw_vec.rs:183)\n==706723==    by 0x58981A0: alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (raw_vec.rs:159)\n==706723==    by 0x589695E: alloc::raw_vec::RawVec&lt;T&gt;::with_capacity (raw_vec.rs:90)\n==706723==    by 0x589914E: alloc::vec::Vec&lt;T&gt;::with_capacity (vec.rs:363)\n==706723==    by 0x589BBA0: crossbeam_deque::Buffer&lt;T&gt;::alloc (lib.rs:139)\n==706723==    by 0x589D079: crossbeam_deque::Worker&lt;T&gt;::new_lifo (lib.rs:342)\n==706723==    by 0x588041E: rayon_core::registry::Registry::new::{{closure}} (registry.rs:228)\n==706723==    by 0x58851EC: core::iter::adapters::map_fold::{{closure}} (mod.rs:833)\n==706723==    by 0x588A0FD: core::iter::traits::iterator::Iterator::fold (iterator.rs:2022)\n==706723==    by 0x58855C3: &lt;core::iter::adapters::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (mod.rs:873)\n==706723==    by 0x5884AAA: core::iter::traits::iterator::Iterator::unzip (iterator.rs:2710)\n==706723==    by 0x587F8FC: rayon_core::registry::Registry::new (registry.rs:223)\n==706723==    by 0x587F59D: rayon_core::registry::global_registry::{{closure}} (registry.rs:168)\n==706723==    by 0x587F709: rayon_core::registry::set_global_registry::{{closure}} (registry.rs:194)\n==706723==    by 0x5885B93: std::sync::once::Once::call_once::{{closure}} (once.rs:264)\n==706723==    by 0x5DBD689: std::sync::once::Once::call_inner (once.rs:416)\n==706723==    by 0x5885A40: std::sync::once::Once::call_once (once.rs:264)\n==706723==    by 0x587F666: rayon_core::registry::set_global_registry (registry.rs:193)\n==706723==    by 0x587F52E: rayon_core::registry::global_registry (registry.rs:168)\n==706723==    by 0x588053C: rayon_core::registry::Registry::current_num_threads (registry.rs:286)\n==706723==    by 0x58961E5: rayon_core::current_num_threads (lib.rs:84)\n==706723==    by 0x5574DA9: rayon::iter::plumbing::Splitter::new (mod.rs:267)\n==706723==    by 0x5574C76: rayon::iter::plumbing::LengthSplitter::new (mod.rs:315)\n==706723==    by 0x555D82F: rayon::iter::plumbing::bridge_producer_consumer (mod.rs:396)\n==706723==    by 0x555D5D4: &lt;rayon::iter::plumbing::bridge::Callback&lt;C&gt; as rayon::iter::plumbing::ProducerCallback&lt;I&gt;&gt;::callback (mod.rs:373)\n==706723==    by 0x553B5FF: &lt;rayon::slice::Iter&lt;T&gt; as rayon::iter::IndexedParallelIterator&gt;::with_producer (mod.rs:543)\n==706723==    by 0x555F05A: rayon::iter::plumbing::bridge (mod.rs:357)\n==706723==    by 0x553B4E4: &lt;rayon::slice::Iter&lt;T&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (mod.rs:519)\n==706723==    by 0x54AB444: &lt;rayon::iter::map_with::MapInit&lt;I,INIT,F&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (map_with.rs:382)\n==706723==    by 0x5550879: &lt;rayon::iter::map::Map&lt;I,F&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (map.rs:49)\n==706723==    by 0x556D150: &lt;rayon::iter::while_some::WhileSome&lt;I&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (while_some.rs:44)\n==706723==    by 0x557E907: &lt;rayon::iter::fold::Fold&lt;I,ID,F&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (fold.rs:59)\n==706723==    by 0x5550638: &lt;rayon::iter::map::Map&lt;I,F&gt; as rayon::iter::ParallelIterator&gt;::drive_unindexed (map.rs:49)\n==706723==    by 0x556D62E: rayon::iter::reduce::reduce (reduce.rs:15)\n==706723==    by 0x55503BA: rayon::iter::ParallelIterator::reduce (mod.rs:900)\n==706723==    by 0x556A79E: rayon::iter::extend::collect (extend.rs:29)\n==706723==    by 0x54BE3EB: rayon::iter::collect::&lt;impl rayon::iter::ParallelExtend&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::par_extend (mod.rs:163)\n==706723==    by 0x554985D: rayon::iter::from_par_iter::collect_extended (from_par_iter.rs:17)\n==706723==    by 0x54BE2DA: rayon::iter::from_par_iter::&lt;impl rayon::iter::FromParallelIterator&lt;T&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_par_iter (from_par_iter.rs:30)\n==706723==    by 0x556CFDA: rayon::iter::ParallelIterator::collect (mod.rs:1887)\n==706723==    by 0x55202BB: rayon::result::&lt;impl rayon::iter::FromParallelIterator&lt;core::result::Result&lt;T,E&gt;&gt; for core::result::Result&lt;C,E&gt;&gt;::from_par_iter (result.rs:121)\n==706723==    by 0x54AC388: rayon::iter::ParallelIterator::collect (mod.rs:1887)\n==706723==    by 0x53EF758: wasmtime_environ::cranelift::compile (cranelift.rs:426)\n==706723==    by 0x54532DE: wasmtime_environ::cache::ModuleCacheEntry::get_data (cache.rs:84)\n==706723==    by 0x53EF24A: &lt;wasmtime_environ::cranelift::Cranelift as wasmtime_environ::compilation::Compiler&gt;::compile_module (cranelift.rs:296)\n==706723==    by 0x507727F: wasmtime_jit::compiler::Compiler::compile (compiler.rs:147)\n==706723==    by 0x5068729: wasmtime_jit::instantiate::CompilationArtifacts::new (instantiate.rs:85)\n==706723==    by 0x50694E8: wasmtime_jit::instantiate::CompiledModule::new (instantiate.rs:148)\n==706723==    by 0x4DEB673: wasmtime::module::Module::compile (module.rs:303)\n==706723==    by 0x4DEB48F: wasmtime::module::Module::from_binary_unchecked (module.rs:274)\n==706723==    by 0x4DEB41E: wasmtime::module::Module::from_binary (module.rs:243)\n==706723==    by 0x4AFF8D0: wasmtime_module_new (module.rs:51)\n</code></pre></div>\n\n\n<p>Yet <code>wasm_module_delete()</code> is properly called on this module.</p>",
        "id": 204986964,
        "sender_full_name": "Thibault Charbonnier",
        "timestamp": 1595650001
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span></p>",
        "id": 205048194,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1595762936
    },
    {
        "content": "<p>I can look more into this on monday, but fwiw valgrind has a lot of false positives around rust <code>lazy_static!</code>s, like the frame info that I see in that first backtrace</p>",
        "id": 205056505,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595777818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302434\">@Thibault Charbonnier</span> do you have minimal steps to reproduce?</p>",
        "id": 205056514,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595777862
    },
    {
        "content": "<p>FWIW those look like \"normal\" leaks to me, wasmtime has some global data structures which can hold on to allocated memory which isn't deallocated when the program exits</p>",
        "id": 205268869,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595959015
    },
    {
        "content": "<p>that looks like an internal <code>BTreeMap</code> and crossbeam-related data structures</p>",
        "id": 205268904,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595959038
    },
    {
        "content": "<p>so I don't think those are leaks for your appplication itself</p>",
        "id": 205268918,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595959050
    }
]