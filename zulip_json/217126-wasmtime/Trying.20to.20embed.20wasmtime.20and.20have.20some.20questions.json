[
    {
        "content": "<p>Hi, I am trying to embed wasmtime (using the C API currently) and wonder how to best copy data out from linear memory. Let's say the WebAssembly calls a host function with a pointer into linear data and a length. How to safely copy that data from linear memory to the host?</p>",
        "id": 207963626,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598362784
    },
    {
        "content": "<p>Host probably has access to the instance's <code>Memory</code>. You can find <code>data_unchecked()</code> slice there <a href=\"https://docs.rs/wasmtime/0.19.0/wasmtime/struct.Memory.html#method.data_unchecked\">https://docs.rs/wasmtime/0.19.0/wasmtime/struct.Memory.html#method.data_unchecked</a></p>",
        "id": 207963845,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598362914
    },
    {
        "content": "<p>So there is a single Memory object for data + stack + heap?</p>",
        "id": 207964064,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598363042
    },
    {
        "content": "<p>/me does not understand the question  above as it is stated</p>",
        "id": 207964234,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598363138
    },
    {
        "content": "<p>Instance normally has (created or imported) memory. How wasm code is using it, depends on the compiler to wasm target.</p>",
        "id": 207964417,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598363236
    },
    {
        "content": "<p>Wasm call stack is not exposed, but can be traced via <code>Trap</code> structure</p>",
        "id": 207964476,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598363278
    },
    {
        "content": "<p>Maybe it is me who is not understanding WASM but my understanding was that  WASM has a memory section and a data section and that both of these will reside in linear memory.  Are both of those located in the same Memory object?</p>",
        "id": 207965049,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598363546
    },
    {
        "content": "<p>yeah, during instantiation engine constructs Memory based on memory and data sections.</p>",
        "id": 207965385,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598363693
    },
    {
        "content": "<p>Gotcha. And stack is separate and not meant to be accessible to the host? At least not for passing data from wasmtime to host functions.</p>",
        "id": 207965591,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598363768
    },
    {
        "content": "<p>now define \"stack\", is it wasm call stack or \"shadow\" stack that was simulated by C or Rust compiler</p>",
        "id": 207965732,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598363834
    },
    {
        "content": "<p>I think what I am talking about is the shadow stack. The one where the webassembly code could allocate values on, not the part used for tracking return addresses and restoring registers when doing function calls.</p>",
        "id": 207965927,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598363927
    },
    {
        "content": "<p>okay, so if you have wasm \"pointer\" at the host, you can slice that from Memory's <code>data_unchecked()</code></p>",
        "id": 207966145,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364016
    },
    {
        "content": "<p>Thanks, I need to check it out. The reason i was confused is because I saw things like \"(global $__heap_base (export \"__heap_base\") i32 (i32.const 1049080))\" in code compiled by rustc making me think that the linear memory must be non-contiguous due to the big distance from zero while the Memory documentation pages says Memory objects are contiguous.</p>",
        "id": 207967154,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598364511
    },
    {
        "content": "<p>Actually, I think you are not wrong in terms of distance 0x1001F8. Look at (memory) min limit.</p>",
        "id": 207967382,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364639
    },
    {
        "content": "<p>it shall be &gt; 0x10</p>",
        "id": 207967483,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364688
    },
    {
        "content": "<p>means, the instance reserves that much memory</p>",
        "id": 207967637,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364750
    },
    {
        "content": "<p>From the wasm:</p>\n<div class=\"codehilite\"><pre><span></span><code>(memory $memory (export &quot;memory&quot;) 17)\n(global $g0 (mut i32) (i32.const 1048576))\n(global $__data_end (export &quot;__data_end&quot;) i32 (i32.const 1049080))\n(global $__heap_base (export &quot;__heap_base&quot;) i32 (i32.const 1049080))\n(elem $e0 (i32.const 1) func $_ZN3std5alloc24default_alloc_error_hook17hcb82c7fe7df69521E)\n(data $d0 (i32.const 1048576) &quot;aaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;))\n</code></pre></div>",
        "id": 207967748,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598364808
    },
    {
        "content": "<p>yep 17 * 65536 = 0x110000</p>",
        "id": 207967778,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364829
    },
    {
        "content": "<p>rest of the memory probably goes to shadow stack</p>",
        "id": 207967844,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364857
    },
    {
        "content": "<p><code>(global $g0 (mut i32) (i32.const 1048576))</code> &lt;-- it starts from high address = 0x100000</p>",
        "id": 207967914,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598364896
    },
    {
        "content": "<p>Aha! That makes a lot of sense. So Rust allocates 17 pages for shadow stack? Not that much memory but enough that I need to be careful about it.</p>",
        "id": 207968438,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598365155
    },
    {
        "content": "<p>16 pages, last page for data (segment)</p>",
        "id": 207968522,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598365201
    },
    {
        "content": "<p>I think linker options allow to make it less (I cannot find it, but hope it is there :)</p>",
        "id": 207968690,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1598365271
    },
    {
        "content": "<p>Thanks again. This made things a lot clearer for me.</p>",
        "id": 207968872,
        "sender_full_name": "Andreas Karlsson",
        "timestamp": 1598365337
    }
]