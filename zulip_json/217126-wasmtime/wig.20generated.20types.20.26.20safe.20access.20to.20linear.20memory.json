[
    {
        "content": "<p>As I've been working on expanding the type of code generation that can be done for <code>wasi-common</code> by <code>wig</code>, I've come up against some fundamental problems with how the Rust host code is allowed to access linear memory safely. I believe the current approach is open to UB, since we can take overlapping mutable slices into memory depending on user input</p>",
        "id": 183689047,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576615190
    },
    {
        "content": "<p>I've been trying to design a way to run-time validate that borrows are safe, sort of like <code>RefCell</code> does, and how that design will work with generating type definitions via <code>wig</code></p>",
        "id": 183689167,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576615255
    },
    {
        "content": "<p>so far I've been working on a design in this gdoc with <span class=\"user-mention\" data-user-id=\"254006\">@Andy Wortman</span> but would appreciate feedback from other wasmtime folks, probably <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> would be most relevant? <a href=\"https://docs.google.com/document/d/1oEG49YcM9DFKLenhRkswx8tTRG1Z0Q6fmed8cWH0Jmg/edit?usp=sharing\" target=\"_blank\" title=\"https://docs.google.com/document/d/1oEG49YcM9DFKLenhRkswx8tTRG1Z0Q6fmed8cWH0Jmg/edit?usp=sharing\">https://docs.google.com/document/d/1oEG49YcM9DFKLenhRkswx8tTRG1Z0Q6fmed8cWH0Jmg/edit?usp=sharing</a></p>",
        "id": 183689237,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576615309
    },
    {
        "content": "<p>once I have a bit more confidence in the design I'll post this text in an issue.</p>",
        "id": 183689471,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576615454
    },
    {
        "content": "<p>related to the above - ive added code to witx, based on some old stuff i did in lucet-idl, to calculate layout in the wasm32 C ABI. We need this to identify which portions of pointees are themselves pointers, among other reasons (arrays of structs is another good one)</p>",
        "id": 183708695,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630621
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/WASI/pull/181/commits/4261799a9d6b999542a5214b25585d65050bb7fe\" target=\"_blank\" title=\"https://github.com/WebAssembly/WASI/pull/181/commits/4261799a9d6b999542a5214b25585d65050bb7fe\">https://github.com/WebAssembly/WASI/pull/181/commits/4261799a9d6b999542a5214b25585d65050bb7fe</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/pull/181/commits/4261799a9d6b999542a5214b25585d65050bb7fe\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/118618?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/pull/181/commits/4261799a9d6b999542a5214b25585d65050bb7fe\" target=\"_blank\" title=\"Compute layout of datatypes according to C ABI by pchickey · Pull Request #181 · WebAssembly/WASI\">Compute layout of datatypes according to C ABI by pchickey · Pull Request #181 · WebAssembly/WASI</a></div><div class=\"message_embed_description\">Based on #164\nThis is useful for validating pointers, enums, and flags in host code.</div></div></div>",
        "id": 183708698,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630623
    },
    {
        "content": "<p>neither <span class=\"user-mention\" data-user-id=\"254006\">@Andy Wortman</span> or I are aware of a good source of truth for how llvm lays out structs &amp; etc in memory beyond running llvm itself.</p>",
        "id": 183708720,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630667
    },
    {
        "content": "<p>maybe <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> has a good idea here.</p>",
        "id": 183708773,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630701
    },
    {
        "content": "<p>Outside of LLVM, what we have is <a href=\"https://github.com/WebAssembly/tool-conventions/blob/master/BasicCABI.md#data-representation\" target=\"_blank\" title=\"https://github.com/WebAssembly/tool-conventions/blob/master/BasicCABI.md#data-representation\">https://github.com/WebAssembly/tool-conventions/blob/master/BasicCABI.md#data-representation</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/master/BasicCABI.md#data-representation\" style=\"background-image: url(https://avatars3.githubusercontent.com/u/11578470?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/master/BasicCABI.md#data-representation\" target=\"_blank\" title=\"WebAssembly/tool-conventions\">WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - WebAssembly/tool-conventions</div></div></div>",
        "id": 183708782,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1576630717
    },
    {
        "content": "<p>for checking the correctness of that code when it was in lucet-idl, I used <code>proptest</code> to generate random schemas, and then I rendered them to C source text, and I rendered all of the layout information I calculated to static asserts using sizeof / offsetof</p>",
        "id": 183708800,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630746
    },
    {
        "content": "<p>and ran that until it could run for a good long time without finding a counterexample.</p>",
        "id": 183708809,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630757
    },
    {
        "content": "<p>ah, im not following this rule</p>\n<blockquote>\n<p>Each member is assigned to the lowest available offset with the appropriate alignment</p>\n</blockquote>",
        "id": 183708881,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630807
    },
    {
        "content": "<p>idk how I never found that via counterexample back in lucet-idl. I guess I wasnt searching the space well enough</p>",
        "id": 183708920,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576630864
    },
    {
        "content": "<p>i think in the context of struct field layout, that rule can be disambiguated by.... i wonder if markdown works here:</p>\n<blockquote>\n<p>If two pointers to object types both point to the same object, or both point one past the last element of the same array object, they compare equal.<br>\nfrom 6.5.8 paragraph 5 of <a href=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf\" target=\"_blank\" title=\"http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf\">http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1548.pdf</a><br>\nwhich i read as, functionally, forbidding reordering struct fields</p>\n</blockquote>\n<p>(i don't see much in the spec here talking about the layout of aggregates at all, otherwise, actually...)</p>",
        "id": 183710514,
        "sender_full_name": "iximeow",
        "timestamp": 1576632694
    },
    {
        "content": "<p>so in that case, i believe my calculation of aggregate layout is correct.</p>",
        "id": 183710524,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576632717
    },
    {
        "content": "<p>anyhow, put the gdoc into a github issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/734\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/issues/734\">https://github.com/bytecodealliance/wasmtime/issues/734</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/734\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/734\" target=\"_blank\" title=\"[wasi-common] Re-design of generated types, for safer use and more complete code generation · Issue #734 · bytecodealliance/wasmtime\">[wasi-common] Re-design of generated types, for safer use and more complete code generation · Issue #734 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">wig presently generates wasi-common types from witx descriptions of the standard. This is a great start, but there are a handful of ways in which the design of wasi-common is difficult to automatic...</div></div></div>",
        "id": 183710571,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576632727
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183710680,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576632877
    },
    {
        "content": "<p>i want to suggest that we should clarify that <code>offset</code> described in <code>BasicCABI.md</code> grows in order of the fields of an aggregate, but that also seems like a mistake for the same reason i can't find such a sentence in the C spec: it definitively rules out reordering fields :( does it make sense to say this is essentially an FFI specification and we make some arbitrary choices for the sake of confidence here?</p>",
        "id": 183710900,
        "sender_full_name": "iximeow",
        "timestamp": 1576633086
    },
    {
        "content": "<p>since in theory there's no reason witx must match the real order of bytes anywhere, so long as serializers/deserializers work right. if it happens to be a pointer cast, cool</p>",
        "id": 183710914,
        "sender_full_name": "iximeow",
        "timestamp": 1576633119
    },
    {
        "content": "<p>Are you asking whether we can reorder fields in BasicCABI.md or in witx implementations?</p>",
        "id": 183790185,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1576703127
    },
    {
        "content": "<p>I was thinking about the BasicCABI.md</p>",
        "id": 183793565,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576705522
    },
    {
        "content": "<p>im assuming we wont reorder fields from witx -&gt; C ABI, because doing so would be a surprise</p>",
        "id": 183793578,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576705535
    },
    {
        "content": "<p>Unfortunately, C compilers can't reorder struct fields in general, because people use C structs to interface with independently serialized data.</p>",
        "id": 183794049,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1576705815
    },
    {
        "content": "<p>As in, read data from a file into a buffer, cast the buffer's address to a pointer-to-struct, and read the fields.</p>",
        "id": 183794083,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1576705838
    },
    {
        "content": "<p>yep. not sure i agree that its unfortunate</p>",
        "id": 183794126,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576705877
    },
    {
        "content": "<p>:)</p>",
        "id": 183794129,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1576705880
    },
    {
        "content": "<p>Rust can reorder fields, because in Rust if you want to do that kind of thing, you have to use <code>repr(C)</code> :-)</p>",
        "id": 183794136,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1576705888
    }
]