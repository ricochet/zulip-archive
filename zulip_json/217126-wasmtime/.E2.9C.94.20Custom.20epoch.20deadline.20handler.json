[
    {
        "content": "<p>Hi! Been fiddling with wasmtime recently, and had a small question about handling epoch deadlines.</p>\n<p>I'm looking into using epochs for timing out long-running computations. One thing I'd quite like to support is \"soft\" timeouts - when the first deadline is hit, set a flag inside the running module (using an exported global or the like) and let the module handle the timeout. If it's still running after the second deadline is hit, <em>then</em> we should trap.</p>\n<p>The obvious way to achieve this seems to be to add another case to <code>EpochDeadline</code> which accepts a callback (of <code>Fn(&amp;mut StoreContextMut&lt;T&gt;) -&gt; Result&lt;()&gt;</code> or similar). However, I don't think this approach is workable - just won't past muster with the borrow checker.</p>\n<p>I don't know if there's any other way to go about adding a custom deadline handler? Not sure if what I'm trying to do is a good idea in the first place TBH!</p>",
        "id": 282027226,
        "sender_full_name": "Jonathan Coates",
        "timestamp": 1652302806
    },
    {
        "content": "<p>Currently <code>Store::new_epoch</code> is the one that synthesizes the <code>Trap</code>, and I think we could implement your idea of a callback with that. I think instead we'd have to do something like <code>FnMut(&amp;mut T)</code> instead of <code>StoreContextMut</code>, though. Would that work for your use case?</p>",
        "id": 282028361,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1652303357
    },
    {
        "content": "<p>Yeah, <code>&amp;mut T</code> would be easier (and obviously mirrors what <code>Store::limiter</code> does). In my particular case, I'm not sure it's sufficient though, as I'd quite like to modify the module's globals, which does require access to the store itself.</p>",
        "id": 282029149,
        "sender_full_name": "Jonathan Coates",
        "timestamp": 1652303766
    },
    {
        "content": "<p>From a wasm-police perspective that probably isn't valid for an engine to do, because we would basically be arbitrarily modifying a global in the middle of wasm that it otherwise thinks is local to the module and not modified</p>",
        "id": 282029248,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1652303830
    },
    {
        "content": "<p>e.g. something like binaryen could perhaps hoist a <code>global.get</code> out of a loop thinking that the loop never modifies it,  when in fact you could modify it in the middle through an embedder hook like this</p>",
        "id": 282029284,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1652303863
    },
    {
        "content": "<p>Ahh, that makes sense, I did wonder. I guess it would be sufficient to receive a <code>&amp;mut</code> T then - I can just add an imported/external function to read that value from the store. I guess it's slightly slower than reading a global, but probably not enough I need to worry.</p>",
        "id": 282029661,
        "sender_full_name": "Jonathan Coates",
        "timestamp": 1652304068
    },
    {
        "content": "<p>at the very least having an API like this would be more flexible than the current, would you be interested in making a PR for this new callback?</p>",
        "id": 282029841,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1652304151
    },
    {
        "content": "<p>Yep, more than happy to put that together! Thanks for the information, that's very helpful :).</p>",
        "id": 282030382,
        "sender_full_name": "Jonathan Coates",
        "timestamp": 1652304455
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500517\">özkan gündoğan</span> has marked this topic as resolved.</p>",
        "id": 282342496,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652519353
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500517\">özkan gündoğan</span> has marked this topic as unresolved.</p>",
        "id": 282342497,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652519358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500517\">özkan gündoğan</span> has marked this topic as resolved.</p>",
        "id": 282342544,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652519404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500517\">özkan gündoğan</span> has marked this topic as unresolved.</p>",
        "id": 282342550,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652519411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"500517\">özkan gündoğan</span> has marked this topic as resolved.</p>",
        "id": 282342556,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652519416
    }
]