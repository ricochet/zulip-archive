[
    {
        "content": "<p>Hello,<br>\nI'm a newbie to wasmtime. Have several decades of experience with several languages and runtimes, general distributed systems design, as well as fairly in-depth experience with blockchain &amp; DLT development. I've been looking at WASM as a means of developing cross-ledger contracts - my aim is to execute wasm based contracts on a variety of platforms and runtimes, including the JVM.  Have tried a few wasm compilers and execution platform - notably wasmer and now wasmtime. I really like wasmtime :-) However, I noted the lack of JVM support. I've started writing one. Is this something that would be use? Does anyone else already know of such a project? I will happily terminate my efforts on mine, and contribute to that project instead. Thank you.</p>",
        "id": 255447917,
        "sender_full_name": "dazraf",
        "timestamp": 1632939513
    },
    {
        "content": "<p>Ah, I just came across this message!<br>\n<a href=\"#narrow/stream/206238-general/topic/Java.20JNI.20bindings.20to.20Wasmtime/near/212244883\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Java.20JNI.20bindings.20to.20Wasmtime/near/212244883</a></p>\n<p>Slightly different to my approach (JNA + Kotlin) but never the less far more complete!</p>",
        "id": 255448374,
        "sender_full_name": "dazraf",
        "timestamp": 1632939701
    },
    {
        "content": "<p>At this time we don't have official JVM bindings for Wasmtime, although I think there's a least one community effort for having bindings (I forget where it's located though or if it's up-to-date)</p>",
        "id": 255451970,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1632940951
    },
    {
        "content": "<p>ah yes the one you linked is the one I was thinking of</p>",
        "id": 255452137,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1632941038
    },
    {
        "content": "<p>There also seems to be this one with slightly newer commits (0.28.0): <a href=\"https://github.com/kawamuray/wasmtime-java\">https://github.com/kawamuray/wasmtime-java</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kawamuray/wasmtime-java\" style=\"background-image: url(https://opengraph.githubassets.com/25ac6145401506aab01370a642f756d514d14ea98210efa0a162a9b7c638ae44/kawamuray/wasmtime-java)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kawamuray/wasmtime-java\" title=\"GitHub - kawamuray/wasmtime-java: Java or JVM-language binding for Wasmtime\">GitHub - kawamuray/wasmtime-java: Java or JVM-language binding for Wasmtime</a></div><div class=\"message_embed_description\">Java or JVM-language binding for Wasmtime. Contribute to kawamuray/wasmtime-java development by creating an account on GitHub.</div></div></div>",
        "id": 255462301,
        "sender_full_name": "Peter Huene",
        "timestamp": 1632944828
    },
    {
        "content": "<p>Neither is anywhere near production ready, but kawamuray is easier to consume than bluejekyll. I've been prototyping one based on the new panama api rather than JNI, but it's not public yet. Depending on what you're doing, you're likely to need the Interface Types proposal implemented before you get a good user experience on the language boundaries.</p>",
        "id": 255533127,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1632988983
    },
    {
        "content": "<p>Thank you all for you responses. I suppose the only different in the one that I was writing is that I'm using a higher level library (JNA) to reduce the need for bespoke JNI proxy files (usually done in C/C++/Rust) which is another level of maintenance overhead. Would be great if there was official JVM support. We have a number of enterprise clients that would be interested in a WASI compliant runtime for the JVM.</p>",
        "id": 255589353,
        "sender_full_name": "dazraf",
        "timestamp": 1633014092
    },
    {
        "content": "<p>I very much agree that that'd be great to have! Would you by any chance be interested in working towards turning the one you're writing into an officially supported one?</p>",
        "id": 255590035,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633014304
    },
    {
        "content": "<p>I would be very happy to  give my work to the group when it's ready! If the peer review of the work considers it satisfactory, could it be  officially maintained under the bytecode alliance github group? (perhaps I'm getting ahead of myself).</p>",
        "id": 255592696,
        "sender_full_name": "dazraf",
        "timestamp": 1633015288
    },
    {
        "content": "<p>I think that'd be a great outcome! Once things have progressed sufficiently, we should talk about what the sustainability story would look like, and about logisticsâ€”but trying to work through those now would indeed be getting ahead of ourselves <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 255594287,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633015863
    },
    {
        "content": "<p>Great, thank you all for your help!</p>",
        "id": 255594930,
        "sender_full_name": "dazraf",
        "timestamp": 1633016083
    },
    {
        "content": "<p>What's you client's use case for putting it on the JVM rather than running it direct?</p>",
        "id": 255595465,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1633016289
    },
    {
        "content": "<p>I work in the area of decentralized ledgers for financial services. Our work is increasingly poly-network. Until recently, clients were happy with poker-chip-semantics: treating assets as simple tokens that could be issued, transferred, traded, settled, and importantly, 'teleported' or 'bridged' across networks. Networks include but are not limited to: Ethereum, Corda, XinFin, Polkadot, Polymesh, DAML, etc. The matter becomes interesting when we are dealing with asset classes that have more interestingly lifecycles. e.g. a FX option, Bonds, Equities etc. A token is insufficient to carry the semantics of the asset. In addition, issuers may decide on more complex semantics - e.g. conditions for trading, transfer etc. All in all, this kind needs a common way of thinking about assets and encoding the contractual aspects of the asset in a network agnostic fashion. This is a long term (five year horizon) roadmap for us, over and above our immediate pipeline of work. However, we and our clients see it important to form the right alliances in this space to start putting in place the components. Does that help in giving some background?</p>",
        "id": 255596768,
        "sender_full_name": "dazraf",
        "timestamp": 1633016800
    },
    {
        "content": "<p>Sure, but doesn't answer the question at all. What's the reason for embedded wasm in the JVM rather than e.g. having the JVM fork the wasm runtime as a separate process?</p>",
        "id": 255597029,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1633016884
    },
    {
        "content": "<p>With apologies for the grammatical and spelling mistakes. I'm writing this whilst on a zoom meeting.</p>",
        "id": 255597047,
        "sender_full_name": "dazraf",
        "timestamp": 1633016889
    },
    {
        "content": "<p>Ah ... sorry, that was implied. Imagine a contract that is written with any language that can compile to wasm. When the asset is transferred from one network to another, the wasm payload for the contract is transferred (with proofs of authenticity). Certain networks and deployments use the JVM. Examples include Corda and Hyperledger Besu.</p>",
        "id": 255597302,
        "sender_full_name": "dazraf",
        "timestamp": 1633016998
    },
    {
        "content": "<p>The contract will need to interact with its contract execution container to retrieve transaction information, referenced prior transactions and states. There would be a 'contract ABI' to support the contract.</p>",
        "id": 255597529,
        "sender_full_name": "dazraf",
        "timestamp": 1633017082
    },
    {
        "content": "<p>Ahh, so you're exporting functions from the JVM to the wasm module so it can get that tx info?</p>",
        "id": 255597670,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1633017128
    },
    {
        "content": "<p>Yes. forking a separate process would require some form of IPC for the bidirectional aspects of that contract.</p>",
        "id": 255597726,
        "sender_full_name": "dazraf",
        "timestamp": 1633017151
    },
    {
        "content": "<p>yup, and embedding it will require interface types, otherwise it's going to be painful.  IPC gives you transport and encoding. You don't need the transport, but you still need the encoding.</p>",
        "id": 255597927,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1633017211
    },
    {
        "content": "<p>Yes, that's it.</p>",
        "id": 255598308,
        "sender_full_name": "dazraf",
        "timestamp": 1633017331
    },
    {
        "content": "<p>stick around long enough, someone will reinvent CORBA/SOAP/... again. :-)</p>",
        "id": 255598622,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1633017426
    },
    {
        "content": "<p>Interface Types should definitely be part of the embedding, at least eventually <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 255598652,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633017437
    },
    {
        "content": "<p>s/reinvent/improve upon and reuse the good parts/ <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 255598718,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633017462
    },
    {
        "content": "<p>yup. Embedding is going to need the equivalent of JSR-223's .bind() but that's awful hard until wasm has something approximating object types.</p>",
        "id": 255598993,
        "sender_full_name": "Jonathan Halliday",
        "timestamp": 1633017560
    },
    {
        "content": "<p>I think that'd roughly be done using Interface Types resources, which allow you to expose an unforgeable handle and methods to operate on it across component (and host/component) boundaries</p>",
        "id": 255602591,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1633018884
    },
    {
        "content": "<p>I'm okay with this. So far, I haven't seen any issues. Will post on anything relevant that I come across.</p>",
        "id": 255781894,
        "sender_full_name": "dazraf",
        "timestamp": 1633110366
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"447414\">dazraf</span> has marked this topic as resolved.</p>",
        "id": 255940497,
        "sender_full_name": "Notification Bot",
        "timestamp": 1633255733
    }
]