[
    {
        "content": "<p>Possibly a silly question here, but:</p>\n<p>I already know that it's possible to write a webassembly component and use <code>jco transpile</code> to generate a core wasm with bindings that can easily be executed in the browser. </p>\n<p>Would it also be possible to compile wasmtime itself to a core wasm, execute it in the browser, and then have the embedded wasmtime run wasm components directly without transpilation? If so, would that be a way to take advantage of wasmtime's support for component-model features (e.g. futures/streams) that presumably will arrive before support comes in the native browser wasm runtimes?</p>",
        "id": 418955666,
        "sender_full_name": "James Mart",
        "timestamp": 1706667891
    },
    {
        "content": "<p>While theoretically possible Wasmtime is definitely not built for this today and it would require quite a lot of surgery to get this working. It's probaby safe to say that jco is your best bet for now. One thing of note is that you can embed jco itself on a web page and effectively <code>eval</code> the output which is more-or-less what loading wasmtime would look like</p>",
        "id": 418955984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706668109
    },
    {
        "content": "<blockquote>\n<p>It's probaby safe to say that jco is your best bet for now.</p>\n</blockquote>\n<p>If I am understanding correctly, then there is still a downside to doing it that way, though - for example, when futures and streams are first supported in preview3, I assume BCA runtimes like wasmtime will be the first to support it. But if I'm only executing my transpiled components in a native browser runtime, then I will have to wait until each browser runtime adds support. Is this correct?</p>",
        "id": 418956898,
        "sender_full_name": "James Mart",
        "timestamp": 1706668905
    },
    {
        "content": "<p>jco is a bytecode alliance project. support for futures/streams/preview 3 is just a glimmer in our eyes, its not a real thing that exists anywhere yet, but when it does it will be rolled out in both wasmtime and jco by the time it is production ready</p>",
        "id": 418957517,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706669401
    },
    {
        "content": "<p>if you want to run things in a js engine, use jco. if you want to run things on windows, linux, or mac, use wasmtime.</p>",
        "id": 418957616,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1706669453
    },
    {
        "content": "<p>Yeah was just using futures/streams as a proxy for \"when new features come out\" (although I am specifically looking forward to async support).</p>\n<p>Ok, for some reason I was thinking transpiling with jco would limit me in some way with what wasm features I could use. I'll look more into jco.</p>",
        "id": 418958590,
        "sender_full_name": "James Mart",
        "timestamp": 1706670089
    },
    {
        "content": "<p>Ah yes no it's intended that jco is at feature parity with wasmtime and any difference is just a temporary resourcing thing. The \"official run in the browser\" recommendation is definitely jco</p>",
        "id": 418959048,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706670335
    }
]