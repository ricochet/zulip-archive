[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> did you want to take a look at <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1577\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1577\">https://github.com/bytecodealliance/wasmtime/pull/1577</a> before I merged it?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1577\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1577\" title=\"Don't try to handle non-wasmtime segfaults by alexcrichton 路 Pull Request #1577 路 bytecodealliance/wasmtime\">Don't try to handle non-wasmtime segfaults by alexcrichton 路 Pull Request #1577 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit fixes an issue in Wasmtime where Wasmtime would accidentally\n&quot;handle&quot; non-wasm segfaults while executing host imports of wasm\nmodules. If a host import segfaulted then Wasmtim...</div></div></div>",
        "id": 195725795,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588173580
    },
    {
        "content": "<p>yeah. I'll look now.</p>",
        "id": 195743120,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588181127
    },
    {
        "content": "<p><code>let segfault = Func::wrap(&amp;store, || segfault());</code> -- you can do that? ;-)</p>",
        "id": 195743133,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588181134
    },
    {
        "content": "<p>oh, nm. <code>segfault</code> is already a function.</p>",
        "id": 195743313,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588181218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> oh no rush, just figured it was something you'd be interested in</p>",
        "id": 195745272,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588182042
    },
    {
        "content": "<p>I've read it and it looks good. I'm just on a bit of a tangent thinking about unexpected segfaults in JIT code, which could indicate JIT bugs.</p>",
        "id": 195745350,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588182105
    },
    {
        "content": "<p>We currently have logic which says if the PC is a known trap, we're good, otherwise assume it's stack overflow</p>",
        "id": 195745447,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588182136
    },
    {
        "content": "<p>yeah when working on some aarch64 stuff it was actually pretty hard b/c we kept catching segfaults and illegal instructions</p>",
        "id": 195745649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588182239
    },
    {
        "content": "<p>I think we likely want to move to a more precise \"this is the list of instructions that can fault\" map</p>",
        "id": 195745700,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588182250
    },
    {
        "content": "<p>we sort of already have that, just need to plumb it all through</p>",
        "id": 195745720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588182259
    },
    {
        "content": "<p>yeah. And a while ago I put some effort into trying to get Cranelift to annotate all its stack references as possible StackOverflow trap sites, but what I don't remember offhand is whether that's complete</p>",
        "id": 195745809,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588182312
    },
    {
        "content": "<p>ok, but this is all independent of the PR, so I'll r+ that now</p>",
        "id": 195745896,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1588182357
    },
    {
        "content": "<p>in lucet we ship that \"list of instructions that can fault\" map, we call it a trap table.</p>",
        "id": 195757229,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588187846
    },
    {
        "content": "<p>its a map of offsets from func start to <code>cranelift_codegen::TrapCode</code></p>",
        "id": 195757401,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588187903
    },
    {
        "content": "<p>if we ever get a fault that doesn't map to a TrapCode, we terminate the entire process, on the grounds that its a possible cranelift codegen bug, or somehow the code was overwritten</p>",
        "id": 195757551,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588187983
    },
    {
        "content": "<p>in the early days of that, we found some missing cases for StackOverflow trap sites, but I believe they are now all in there. there's always a possibility that we have over-approximated the trap sites, but currently I believe they are not under-approximated.</p>",
        "id": 195757686,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588188040
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> do you have a link to where that table is constructed?</p>",
        "id": 195758322,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588188332
    },
    {
        "content": "<p>sounds perfect for wasmtime</p>",
        "id": 195758329,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588188335
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/compiler.rs#L557\" title=\"https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/compiler.rs#L557\">https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/compiler.rs#L557</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/compiler.rs#L557\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/lucet/blob/master/lucetc/src/compiler.rs#L557\" title=\"bytecodealliance/lucet\">bytecodealliance/lucet</a></div><div class=\"message_embed_description\">Lucet, the Sandboxing WebAssembly Compiler. Contribute to bytecodealliance/lucet development by creating an account on GitHub.</div></div></div>",
        "id": 195758494,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588188403
    },
    {
        "content": "<p>we get the traps out of cranelift-module</p>",
        "id": 195758520,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588188417
    },
    {
        "content": "<p>and put them right back into cranelift-module as data sections</p>",
        "id": 195758554,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588188433
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269981\">@Nathan Froyd</span> was the last person to work on this code, he did a great job refactoring it to use cranelift-module directly, previously not everything was exposed properly so we had to inject it straight into faerie</p>",
        "id": 195758628,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1588188469
    },
    {
        "content": "<p>awesome thanks!</p>",
        "id": 195758812,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588188541
    },
    {
        "content": "<p>I'll take a look at that and see if we can do the same</p>",
        "id": 195758844,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1588188548
    }
]