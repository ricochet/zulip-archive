[
    {
        "content": "<p>In doing some experimentation round upgrading from <code>wasmtime</code> 11.0.1 to 12.0.0, I found that <code>InputStream</code> was converted to <code>HostInputStream</code> and it looks like the <code>read</code>/<code>write</code> are now synchronous. </p>\n<p>I'm wondering if one of the following cases is true:</p>\n<ol>\n<li>Runtime embedders are expected to lean sync for now</li>\n<li>Runtime embedders are expected to do some conversion somehow</li>\n</ol>\n<p>If (2) is the case, the easiest way I could think of was a <code>tokio::runtime::Runtime</code> &amp; <code>block_on</code>, but that doesn't feel quite right...</p>",
        "id": 386614125,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1692712392
    },
    {
        "content": "<p><code>HostInputStream</code> is still async; <code>HostInputStream::read</code> is meant to be non-blocking, and there's a <code>HostInputStream::ready</code> for waiting for data which is an <code>async fn</code>.</p>",
        "id": 386616042,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1692712847
    },
    {
        "content": "<p>It isn't entirely obvious from the trait docs; is the intent there that you can straightforwardly map it to a <code>AsyncRead</code>?</p>",
        "id": 386617265,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692713093
    },
    {
        "content": "<p>i.e. attempt to <code>read</code>, if you get <code>([], Open)</code> back then await <code>ready</code> or something?</p>",
        "id": 386618583,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692713419
    },
    {
        "content": "<p>straightforward, no, easy, yes -- see <code>AsyncReadStream</code></p>",
        "id": 386619236,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692713596
    },
    {
        "content": "<p>er that may not exist in the 12.0.0 release actually, so ignore me</p>",
        "id": 386619345,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692713626
    },
    {
        "content": "<p>no it is: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/v12.0.0/crates/wasi/src/preview2/pipe.rs#L146\">https://github.com/bytecodealliance/wasmtime/blob/v12.0.0/crates/wasi/src/preview2/pipe.rs#L146</a></p>",
        "id": 386620076,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692713803
    },
    {
        "content": "<p>oh our <a href=\"http://docs.rs\">docs.rs</a> builds may have failed as they're still at 11.0.1</p>",
        "id": 386620278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692713860
    },
    {
        "content": "<p>well in any case that's the rough idea, adaptation via tokio is provided with <code>Async{Read,Write}Stream</code></p>",
        "id": 386620984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692714043
    },
    {
        "content": "<p>Thanks for the clarification <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> , I see how it was meant to be used now!</p>\n<p>I wasn't thinking of that interplay between ready and <code>HostInputStream::read</code></p>",
        "id": 386726076,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1692753761
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> has marked this topic as resolved.</p>",
        "id": 386726091,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692753769
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"643241\">Tei Roberts</span> has marked this topic as unresolved.</p>",
        "id": 386862848,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692795551
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"643241\">Tei Roberts</span> has marked this topic as resolved.</p>",
        "id": 386862928,
        "sender_full_name": "Notification Bot",
        "timestamp": 1692795572
    },
    {
        "content": "<p>Sorry, about that, thought the checkmark meant join as I didn't see any tooltip <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 386863113,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692795613
    },
    {
        "content": "<p>this is still a work in progress <a href=\"https://github.com/bytecodealliance/wasmtime/pull/6877\">https://github.com/bytecodealliance/wasmtime/pull/6877</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/6877\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/13311413a2f38a1183e8cacdcd9b22444606c500\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363037356132303466613366353431366662346365626630613963366438396266346434333934386461663561633137383939616331613733326132633238362f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f36383737)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/6877\" title=\"WASI preview 2 output-streams: new backpressure and flushing design by pchickey 路 Pull Request #6877 路 bytecodealliance/wasmtime\">WASI preview 2 output-streams: new backpressure and flushing design by pchickey 路 Pull Request #6877 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 386913228,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692808388
    },
    {
        "content": "<p>the short story is: backpressure design is being revised to take into account that any call with a list&lt;bytes&gt; is going to consume the resources of the callee, so the callee has to explicitly permit how much that is allowed to consume</p>",
        "id": 386913405,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692808460
    },
    {
        "content": "<p>and also, flushing is a way to request &amp; observe the completion of a write, since the write itself is non-blocking it cant report that it failed if that happens after the call is over. the explicit flush call allows userland to wait for completion to produce an error, or guarantee that it succeeded</p>",
        "id": 386913565,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692808525
    }
]