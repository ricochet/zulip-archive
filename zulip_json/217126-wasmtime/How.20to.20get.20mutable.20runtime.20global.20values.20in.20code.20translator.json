[
    {
        "content": "<p>I have some mutable runtime state (what i mean with runtime is that it will only be accessed at runtime/execution) I would like to update between different calls to <code>translate_operator</code>. Basically, when translating a custom operator/wasm function, some of these operators need to access, and some need to write to, this global state. Is this possible? Maybe you can point me to an example in <code>code_translator.rs</code>?</p>",
        "id": 390314958,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694440288
    },
    {
        "content": "<p>The closest might perhaps be the implementation of fuel? Runtime mutable state is typically stored in <code>VMContext</code> which is per-instance state, and then there's <code>VMRuntimeLimits</code> which is <code>Store</code>-shared state</p>",
        "id": 390319141,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694441422
    },
    {
        "content": "<p>How would I access these in <code>translate_operator</code>?</p>",
        "id": 390319750,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694441577
    },
    {
        "content": "<p>Per instance would be fine. So <code>VMContext</code> sounds like it would be suitable. How do I use it?</p>",
        "id": 390331721,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694444687
    },
    {
        "content": "<p>You'd probably start by modifying <code>VMOffsets&lt;P&gt;</code> and the various comments there. That's available throughout translation and provides the offset from the <code>VMContext</code> pointer of where your data lies</p>",
        "id": 390332564,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694444900
    },
    {
        "content": "<p>Is there a reason I can't use <code>state.get_global</code> or <code>builder.ins().global_value</code>, i.e. manually creating a global wasm value? I thought I could then load or overwrite the global wasm value in the translations of the operators. I guess the problem I faced with that approach was that I didn't know where to define/declare the global value.</p>",
        "id": 390333480,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694445132
    },
    {
        "content": "<p>I believe those refer to globals already in the wasm module itself, which you aren't able to add to at the translation phase right now</p>",
        "id": 390336701,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694446032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"625009\">@Fritz Rehde</span> another issue with creating magic wasm globals is that that state is then observable via the API; wasmtime would present an incorrect view (expose internal details) to the embedder</p>",
        "id": 390343815,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1694448167
    },
    {
        "content": "<p>Thanks for your messages. You're right, creating wasm globals is probably quite unidiomatic, and I think I'm actually fine creating local variables (they would be accessible in the same wasm function, right?). I'm a bit confused on the API: I think I have to <code>declare_var</code>, <code>def_var</code> and then <code>use_var</code>. But the <code>declare_var(Variable, Type)</code> takes a variable as parameter, not sure what to pass there, since I would intuitively expect to <strong>get</strong> a variable back from that, which I can then pass to <code>def_var</code> and <code>use_var</code>.</p>",
        "id": 390386206,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694465496
    },
    {
        "content": "<p>I think this has become/always was more of <code>cranelift</code> question, should I move it there?</p>",
        "id": 390388388,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694466586
    },
    {
        "content": "<p>Hmm, actually, I think <code>Variable</code> is not the right way of doing what I want to do, I think <code>Variable</code> is meant more for variables in the wasm module itself, not state I want to create during compilation. I have tried adding an <code>Option&lt;Value&gt;</code> attribute to the <code>FuncTranslationState</code>, but that panics when the value is accessed in <code>value_type</code>.</p>",
        "id": 390483504,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694512106
    },
    {
        "content": "<p>I can explain some more about the problem I am trying to solve, maybe you have some other ideas on how to solve this: Let's say I have an <code>Operator::SegmentNew</code>. The first time that operator is present in a wasm function, I want to \"tag\" that index with a random tag. That is currently already implemented, and works simply by calling <code>let tagged_index = builder.ins().arm64_irg(index);</code>. However, I want to now save this <code>Value</code> (irg generates the random tag at runtime only), so I can use it again when handling the next instance of <code>Operator::SegmentNew</code>. There, I will need to perform some arithmetic operations on the <code>Value</code> (e.g. <code>band_imm</code>, <code>badd_imm</code>), use it, and then write it back to the place where I'm storing it between the operator calls. <br>\nLike I said, currently I just have an <code>Option&lt;Value&gt;</code> member in <code>FuncTranslationState</code>, but that doesn't work because just saving it there doesn't add the <code>Value</code> properly to the <code>DataFlowGraph</code>, which is required for when performing operations <code>band_imm</code>.</p>",
        "id": 390572934,
        "sender_full_name": "Fritz Rehde",
        "timestamp": 1694542614
    }
]