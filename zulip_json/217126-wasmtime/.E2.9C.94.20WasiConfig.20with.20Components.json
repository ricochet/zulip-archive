[
    {
        "content": "<p>How do you see the WasiCtx and WasiConfig idioms changing with the component model? If I build for components, the current tuple doesn't reflect whether I built for wasi. The component storedata doesn't appear to integrate with a WasiCtx.</p>",
        "id": 311654746,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669133601
    },
    {
        "content": "<p>For wasi integration with the e.g. Rust stdlib it would have to be part of the target tuple</p>",
        "id": 311655484,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669133847
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/cargo-component#wasi-support\">https://github.com/bytecodealliance/cargo-component#wasi-support</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component#wasi-support\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1a852932f44bd6bac0011dfad9b093e60805fc89\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396133396162363337363564316335306663383261633334626431306265616662616236333037316163326364393239353235616362396232613638633236612f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component#wasi-support\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 311655678,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669133893
    },
    {
        "content": "<p>Most of the examples and tests I've seen so far don't use WASI if built with components. WASI isn't mentioned in the tracking issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\">https://github.com/bytecodealliance/wasmtime/issues/4185</a>. I'm looking at lower layers than cargo-component and I'm wondering if there's a gap we missed here?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/113dd67cd412a13af342cdd5d9deaea39f103426\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373135343832343937333762363265623630353439333865363863633136366631303062396639666362653037666535373031343533613933333663383865342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34313835)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4185\" title=\"Tracking issue for implementing the component model 路 Issue #4185 路 bytecodealliance/wasmtime\">Tracking issue for implementing the component model 路 Issue #4185 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is intended to be a tracking issue for the implementation of the component model proposal of WebAssembly. I&#39;m in the progress of implementing this with work in Wasmtime starting at #4005 a...</div></div></div>",
        "id": 311655827,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669133938
    },
    {
        "content": "<p>I think the gap is just \"WASI for components\", which is in progress</p>",
        "id": 311656427,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669134132
    },
    {
        "content": "<p>I'm looking for the design or tracking doc for how WASI is supposed to work with components.</p>",
        "id": 311656855,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669134265
    },
    {
        "content": "<p>I see. I think WASI component support doesn't really fall \"under\" the component model work, it just depends on it. I haven't seen any formal tracking of work on it.</p>",
        "id": 311658459,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669134755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> or <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I'm writing out an elixir OTP host that embeds wasmtime. The last part that's fuzzy for me is around how the component model will work with WASI. Is WASI optional? The way I understand things, it should be optional. Earlier versions of this host created a module and inspected for WASI imports and then built up a wasi store if the module was wasi enabled. This is a little awkward with the component-model feature enabled. I want this host to work with wasm32-unknown-unknown ABI, wasm32-wasi-unknown, and wasm32-&lt;to be decided component triple&gt;.  Right now I'm building out the API to compile and instantiate a module or component (even if the API is just stubs). I have a component OR module working, just not WASI enabled. I'm not sure how and where I should pass around the WasiCtx in the component case. If that's going to be part of the StoreData for the component, easy-peasy.</p>",
        "id": 311659329,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669135007
    },
    {
        "content": "<p>The current thinking, which isn't well-written down and is still being figured out, is:</p>\n<ul>\n<li>We'll still use <code>wasm32-wasi</code></li>\n<li>An \"adapter\" such as <a href=\"https://github.com/sunfishcode/preview1.wasm\">this</a> will convert old-style <code>*.witx</code> to new-style component model</li>\n<li>In tandem wasi-preview2 will be evolved to be described with <code>*.wit</code> files</li>\n<li>Eventually when wasi-preview2 and the component model have settled then preview2 is stabilized</li>\n<li>Once runtimes have caught up toolchains will update their WASI ABI to preview2</li>\n<li>Once preview1 has faded away enough runtimes will remove support for preview1</li>\n</ul>\n<p>Does that make sense?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/preview1.wasm\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7b4e4d0a83f160d2b61f61c0d802b7efabd6852c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373239366232303062343535353834353335336665366239343032396236616164323961376265656663396138323935353233643738656533636232396630352f73756e66697368636f64652f70726576696577312e7761736d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/preview1.wasm\" title=\"GitHub - sunfishcode/preview1.wasm: Experimental experiments\">GitHub - sunfishcode/preview1.wasm: Experimental experiments</a></div><div class=\"message_embed_description\">Experimental experiments. Contribute to sunfishcode/preview1.wasm development by creating an account on GitHub.</div></div></div>",
        "id": 311659900,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669135190
    },
    {
        "content": "<p>I agree that conceptually \"WASI\" should be optional to use when building a component (just like when using a core module).  I would even hope that, in the final goal state, there is need for a \"WASI store\", which was in earlier times necessitated by the magical nature of WASI which, with the component model, should cease to be magical at all (as a consequence of being virtualizable).  But I can't speak to whether there are any (perhaps temporary) limitations that tie the two together atm.</p>",
        "id": 311660995,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1669135553
    },
    {
        "content": "<p>wasi-preview2 has worlds and wit which is good and I'm following. But even if it defines wit, I haven't seen a sketch for how to pass around environment variables, stdin, etc specific to non-core components. I don't think we want the same wasictx for a component and all of its dependencies. I'm really asking for what the union between how a component imports wasi ctx's.</p>\n<p>A possible answer is: from the wasmtime API, we expect every ComponentStore to optionally have a WasiCtx. Some external definition like from a world file would make it so that you can recurse through the components and populate these. But the reason I ask, is that I'm wondering if instead we could do away with the WasiCtx. This seems like info that we could embed within each component dynamically as part of the composition against a world file.</p>",
        "id": 311661170,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669135606
    },
    {
        "content": "<p>Heh and <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> already thinking around what I was asking. Yes, it seems like the idea of a WasiCtx is a thing that's grafted on and not integrated with components (and should be done away with in API's like wasmtime).</p>",
        "id": 311661755,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669135799
    },
    {
        "content": "<p>For things like env vars and such it's a work-in-progress still, dan/pat are working actively on this and should have more to show soon</p>",
        "id": 311662046,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669135864
    },
    {
        "content": "<p>They're out this week but I'd recommend reaching out to them for more information</p>",
        "id": 311662125,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669135892
    },
    {
        "content": "<p>and to be clear, I don't expect working code or even code to exist. I'm really just thinking around my high-level stubs so that I can publish an alpha and iterate as the implementations roll out</p>",
        "id": 311662236,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669135923
    },
    {
        "content": "<p>There is nothing in the current wasmtime component implementation that would get rid of <code>WasiCtx</code> (or something just like it)</p>",
        "id": 311662558,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669136031
    },
    {
        "content": "<p>it also doesn't add it</p>",
        "id": 311662710,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669136065
    },
    {
        "content": "<p>Well, if you have a host implementation of wasi (like <code>wasmtime-wasi</code> today), that implementation is going to have state associated with it, and that state has to be part of the <code>Store</code> data. I haven't seen anything about changing that general model, and wasmtime's component Linker still works that way</p>",
        "id": 311662979,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669136143
    },
    {
        "content": "<p>That isn't intrinsic to WASI, but to any host implementation of any interface</p>",
        "id": 311663336,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669136241
    },
    {
        "content": "<p>If I have a composed component, then in the imports it should have all of the information needed about what would have previously been in a WasiCtx. As a host implementer, those details are likely no longer needed in the API, hence the original question, how are we expecting those idioms to change.</p>\n<p>The best I can find for what is planned here is: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md#runtime-dynamic-linking\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md#runtime-dynamic-linking</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md#runtime-dynamic-linking\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/559af6aa83496a41f2415142bdfa1daeb2aeac52\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633935393433323036663066633931626237383236386132306165666462333365343337623166323961613433656230363465616235653463333462313031362f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/examples/SharedEverythingDynamicLinking.md#runtime-dynamic-linking\" title=\"component-model/SharedEverythingDynamicLinking.md at main 路 WebAssembly/component-model\">component-model/SharedEverythingDynamicLinking.md at main 路 WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/SharedEverythingDynamicLinking.md at main 路 WebAssembly/component-model</div></div></div>",
        "id": 311663560,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669136307
    },
    {
        "content": "<p>Hm sorry I'm getting a bit lost in what you're asking about, it seems you're asking about both how embeddings will work and how guests are generated and how guests will work?</p>",
        "id": 311663730,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136350
    },
    {
        "content": "<p>The <code>WasiCtx</code> state isn't going away, the idea it is \"just picks up new trait impls\" for wit-bindgen-generated traits for the wasi-preview2 interfaces</p>",
        "id": 311663797,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136371
    },
    {
        "content": "<p>The <code>wasm32-wasi</code> target is not expected to go away and it's not planned at this time to add a new component target, instead the existing target will be used with an adapter, under development, to transform compiler output to a component</p>",
        "id": 311663932,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136404
    },
    {
        "content": "<p>The difference between core-wasm-wasi and component-wasi is the output artifact, whether it's a module or a component</p>",
        "id": 311664016,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136424
    },
    {
        "content": "<p>In that the embedder APIs for instantiating components are also completely different than those of modules -- similar in nature but different entrypoints.</p>",
        "id": 311664109,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136448
    },
    {
        "content": "<p>Say I compose a component with a world for wasi-cloud. Will the imports in the component-wasi artifact include additional information like \"envVars\" for a sub-component?</p>",
        "id": 311664983,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669136712
    },
    {
        "content": "<p>I don't have a great way to answer that I think, I can talk about various layers  but I don't know if that's what you're looking for</p>",
        "id": 311665104,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136756
    },
    {
        "content": "<p>the current rough plan is that a wasi command takes env vars as a parameter to the \"start\" function more or less</p>",
        "id": 311665197,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136776
    },
    {
        "content": "<p>That would be for preview2, right?</p>",
        "id": 311665335,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669136822
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span> I have to do this same work for Spin. I've just been putting it off <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 311665636,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669136906
    },
    {
        "content": "<p>I'm looking to get fully plugged in so that I can contribute better to upstream</p>",
        "id": 311665784,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669136948
    },
    {
        "content": "<p>Yeah passing env vars as an argument would be a preview2 thing</p>",
        "id": 311665925,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136993
    },
    {
        "content": "<p>(if that's what's settled on)</p>",
        "id": 311665942,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669136998
    },
    {
        "content": "<p>preview2 or hypothetical world of ideal component support, I have still only seen how we think reactors will work, e.g. like stdin/stdout being passed around starting with the core module acting as a CLI. In that case you'd have a full WasiCtx to instantiate the component. Instead, in this future world, I want to see that the composed component has all of the right information, e.g. the blobstore component only has the ctx needed for connecting to the blobstore. This can be specified as part of the world file so that it's clear what WASI ctx goes where. Then the question for a host implementer using Wasmtime is why would I instantiate the WasiCtx and store with that information when this is something that should come from parsing a component?</p>",
        "id": 311666683,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669137206
    },
    {
        "content": "<p>You still need state for wasi to track e.g. open files. That state has to be reachable from the <code>Store</code> data. You could potentially replace some of what WasiCtxBuilder does with magical import-based config but you can't remove WasiCtx</p>",
        "id": 311667445,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669137437
    },
    {
        "content": "<p>Yeah I think a magic WasiCtxBuilder is what I'm looking for. Other constraints is that we may want to be able to change connection strings or other data at runtime. I don't want it locked into something after calling the <code>start</code> function (fine for instantiation, but needs to be mutable).</p>",
        "id": 311668587,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669137762
    },
    {
        "content": "<p>I think I landed on what I needed. I'm not going to expose a WasiCtx to mix-in for components since that appears to be a [future] anti-pattern. A world file is a safer and idiomatic way to initialize a component's WasiCtx. WasiCtx's can be attached to an individual component's store using a utility like WasiCtxBuilder. The populated Store will have a list (tree?) of components, each with a WasiCtx that the caller can add in overrides. <strong>hand waves</strong></p>\n<p>module API: <code>WasmRuntime.Wasmtime.start_link(%{module: module, wasi: wasi})</code></p>\n<p>component API: </p>\n<div class=\"codehilite\" data-code-language=\"Elixir\"><pre><span></span><code><span class=\"nc\">WasmRuntime.Wasmtime</span><span class=\"o\">.</span><span class=\"n\">build_store</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"c1\"># calls WasiCtxBuilder</span><span class=\"w\"></span>\n<span class=\"c1\"># mixin wasi opts, then compile and instantiate</span><span class=\"w\"></span>\n<span class=\"nc\">WasmRuntime.Wasmtime</span><span class=\"o\">.</span><span class=\"n\">start_link</span><span class=\"p\">(%{</span><span class=\"ss\">component</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">})</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 311671945,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669138857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"421591\">Bailey Hayes</span> has marked this topic as resolved.</p>",
        "id": 311672263,
        "sender_full_name": "Notification Bot",
        "timestamp": 1669138953
    },
    {
        "content": "<p>The <code>Store</code>-specific state is disconnected sort of from WASI and how a component looks internally. The <code>Store</code> state is just used to satisfy the how imports of the final component, and whatever is used internally within the component is unknown to the store/embedder</p>",
        "id": 311675515,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669139932
    }
]