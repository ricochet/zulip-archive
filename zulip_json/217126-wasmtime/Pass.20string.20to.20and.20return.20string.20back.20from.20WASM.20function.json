[
    {
        "content": "<p>Is there an example or gist anywhere of how to pass a string parameter to and then return a string back from a WebAssembly function?  The host and the WASM function are both written in Rust.</p>\n<p>I'm trying this for the host:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">function_name</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">message_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">message_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">request</span><span class=\"p\">.</span><span class=\"n\">message</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret_ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">message_ptr</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message_len</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret_len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ret_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">state</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ret_ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ret_len</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">ret_len</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and this as the WASM function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"cp\">#[export_name = </span><span class=\"s\">\"handle_adjustment_message\"</span><span class=\"cp\">]</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">__wit_bindgen_handle_adjustment_message</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arg0</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">arg1</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span> <span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">message</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"n\">arg0</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ret_string</span>: <span class=\"nb\">String</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ret_string</span><span class=\"p\">.</span><span class=\"n\">into_bytes</span><span class=\"p\">()).</span><span class=\"n\">into_boxed_slice</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec3</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len3</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec3</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"w\">    </span><span class=\"n\">core</span>::<span class=\"n\">mem</span>::<span class=\"n\">forget</span><span class=\"p\">(</span><span class=\"n\">vec3</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr4</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">RET_AREA</span><span class=\"p\">.</span><span class=\"n\">as_mut_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ptr4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">len3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ptr4</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ptr3</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ptr4</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 274056607,
        "sender_full_name": "Tim Park",
        "timestamp": 1646350235
    },
    {
        "content": "<p>One way to do it is to write a wit file describing the API, and use wit-bindgen to generate the bindings. It supports <code>string</code> arguments and return values, and generates convenient Rust bindings for host and guest code.</p>",
        "id": 274057057,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1646350536
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>  - so if I have a  .wit file that looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">handler</span>: <span class=\"nc\">function</span><span class=\"p\">(</span><span class=\"n\">message</span>: <span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Then I should build the bindings for the host with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and the rust WASM function with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">bindgen</span><span class=\"w\"> </span><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">handler</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Is that right? </p>\n<p>If so, the WASM side bindings make sense and are straightforward, but the host side bindings include a reference to wit_bindgen_wasmtime which doesn't seem to exist as a crate?</p>",
        "id": 274058952,
        "sender_full_name": "Tim Park",
        "timestamp": 1646351924
    },
    {
        "content": "<p>wit_bindgen_wasmtime is in the wit-bindgen repo</p>",
        "id": 274059026,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1646351975
    },
    {
        "content": "<p>It's not published on <a href=\"http://crates.io\">crates.io</a> just yet.</p>",
        "id": 274059078,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1646352003
    },
    {
        "content": "<p>Ah I see its in <code>wit-bindgen/crates/wasmtime</code> - ok, thanks.</p>\n<p>Sorry - hopefully final question - is there any example that uses the generated host module/struct bindings?  (In particular, confused on what to pass the <code>get_state</code> parameter of the <code>new</code> function.)</p>",
        "id": 274060661,
        "sender_full_name": "Tim Park",
        "timestamp": 1646352978
    },
    {
        "content": "<p>I don't know that offhand. I'll look into it and let you know</p>",
        "id": 274061477,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1646353550
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>  for all of your help - I think I have figured out most everything.  The remaining issue I seem to be down to is figuring out why my WASM modules doesn't expose <code>canonical_abi_free</code> and <code>canonical_abi_realloc</code>.</p>\n<p>Also for future readers <span class=\"user-mention\" data-user-id=\"269505\">@Radu Matei</span> has an example repo here <a href=\"https://github.com/radu-matei/wasm-components-example\">https://github.com/radu-matei/wasm-components-example</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/radu-matei/wasm-components-example\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d14d7f2480e3995b154d20e1adab478acfc76cca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343662346133383465623339663331353436313934363531303938626433303233613762656662616635663966306233326132313039316438313038303138612f726164752d6d617465692f7761736d2d636f6d706f6e656e74732d6578616d706c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/radu-matei/wasm-components-example\" title=\"GitHub - radu-matei/wasm-components-example\">GitHub - radu-matei/wasm-components-example</a></div><div class=\"message_embed_description\">Contribute to radu-matei/wasm-components-example development by creating an account on GitHub.</div></div></div>",
        "id": 274149910,
        "sender_full_name": "Tim Park",
        "timestamp": 1646409635
    },
    {
        "content": "<p>... and answer to getting <code>canonical_abi_free</code> and <code>canonical_abi_realloc</code> exposed is to use  the <code>wit_bindgen_rust::export!</code> macro ...</p>",
        "id": 274187852,
        "sender_full_name": "Tim Park",
        "timestamp": 1646427718
    }
]