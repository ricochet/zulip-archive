[
    {
        "content": "<p>Hi, guys! I'm new to all this WASM stuff and looking for deterministic WASM runtime (for some POC). Please advise whether Wasmtime is handling non-determinism issues and if yes, how (would be nice to point to some article/code)?</p>",
        "id": 280372194,
        "sender_full_name": "Olexiy Kulchitskiy",
        "timestamp": 1651075773
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"497227\">@Olexiy Kulchitskiy</span> -- the execution of Wasm in Wasmtime should be completely deterministic with a few exceptions:</p>\n<ul>\n<li>if NaN canonicalization is not turned on (set it with <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.cranelift_nan_canonicalization\">this API on Config</a>), then different hardware platforms may produce different bit patterns in the payload bits of NaNs</li>\n<li>imported functions should of course be deterministic; that's outside of Wasmtime's control</li>\n<li>If we eventually implement multithreading, then that would be a source of nondeterminism as well, but we currently do not</li>\n<li>I think that's it (others correct me if I missed anything?)</li>\n</ul>",
        "id": 280384032,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1651080677
    },
    {
        "content": "<p>Ah, stack depth as well; the point at which one gets a stack-overflow trap is implementation-defined (but that should not be observable in any normally-returning Wasm call, as the trap terminates the instance)</p>",
        "id": 280384212,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1651080752
    },
    {
        "content": "<p>And the memory allocation limit.</p>",
        "id": 280387581,
        "sender_full_name": "bjorn3",
        "timestamp": 1651082195
    },
    {
        "content": "<p>You may also want to use the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.static_memory_forced\"><code>static_memory_forced</code></a> API, to prevent <code>memory.grow</code> allocation from failing nondeterministically.</p>",
        "id": 280388455,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1651082638
    },
    {
        "content": "<p>got it. Thank you</p>",
        "id": 280395343,
        "sender_full_name": "Olexiy Kulchitskiy",
        "timestamp": 1651085877
    },
    {
        "content": "<p>Relaxed SIMD will be deterministic per-platform but will appear nondeterministic across platforms - basically the same problem as for NaNs, but will require a different solution.</p>",
        "id": 280848118,
        "sender_full_name": "Lars Hansen",
        "timestamp": 1651481059
    }
]