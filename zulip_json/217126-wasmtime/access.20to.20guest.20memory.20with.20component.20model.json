[
    {
        "content": "<p>In default wasmtime 6.0.1 I can use <code>Linker::func_wrap</code> to define a host function taking a <code>Caller</code> as a parameter, on which the host function can call <code>get_export</code> <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Caller.html#method.get_export\">https://docs.rs/wasmtime/latest/wasmtime/struct.Caller.html#method.get_export</a> and consecutively get a <code>Memory</code> handle via <a href=\"https://docs.rs/wasmtime/latest/wasmtime/enum.Extern.html#method.into_memory\">https://docs.rs/wasmtime/latest/wasmtime/enum.Extern.html#method.into_memory</a></p>\n<p>Component <code>LinkerInstance::func_wrap</code> <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.LinkerInstance.html#method.func_wrap\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.LinkerInstance.html#method.func_wrap</a> , however, expects the closure to take <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.StoreContextMut.html\">https://docs.rs/wasmtime/latest/wasmtime/struct.StoreContextMut.html</a> as the parameter, which does not provide access to any of the exports</p>\n<p>Moreover, the <code>ExportInstance</code> itself does not seem to provide means to get anything other than a function, module or an instance <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.ExportInstance.html\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.ExportInstance.html</a></p>\n<p>Is there a way for a host function to access the guest's memory in the component-model and if so, how?</p>",
        "id": 340962898,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1678481684
    },
    {
        "content": "<p>There is no means by which the underlying linear memory can be accessed with the component model because the abstraction layer of components encapsulates these implementation details of the core wasm module.</p>\n<p>Could you expand a bit more on what you need the original linear memory for?</p>",
        "id": 340964724,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1678482436
    },
    {
        "content": "<p>I'd like to support a \"syscall-like\" interface, where a guest is passing a pointer and a length to the host via the host function and the host writes to it. That works fine in default wasmtime using <code>Memory::write</code> <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Memory.html#method.write\">https://docs.rs/wasmtime/latest/wasmtime/struct.Memory.html#method.write</a></p>\n<p>Essentially this is for backwards-compatiblity with existing Wasm modules while we transition to component model fully</p>\n<p>For reference, here's how it works in \"default\" <a href=\"https://github.com/wasmCloud/wasmCloud/blob/a2ccbb2e1786d2251951f953bdc7f0cca1d8e9fa/src/actor.rs#L88-L483\">https://github.com/wasmCloud/wasmCloud/blob/a2ccbb2e1786d2251951f953bdc7f0cca1d8e9fa/src/actor.rs#L88-L483</a> and I'd like to be able to expose the same ABI to component</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wasmCloud/wasmCloud/blob/a2ccbb2e1786d2251951f953bdc7f0cca1d8e9fa/src/actor.rs#L88-L483\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e42cd6ac129b437540a4c12adb5b967f3d9f34ed\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306338663133336639393435336261303039303334303630343037383430343430383037333832626437333035636530633235633535626334313762343363362f7761736d436c6f75642f7761736d436c6f7564)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wasmCloud/wasmCloud/blob/a2ccbb2e1786d2251951f953bdc7f0cca1d8e9fa/src/actor.rs#L88-L483\" title=\"wasmCloud/actor.rs at a2ccbb2e1786d2251951f953bdc7f0cca1d8e9fa · wasmCloud/wasmCloud\">wasmCloud/actor.rs at a2ccbb2e1786d2251951f953bdc7f0cca1d8e9fa · wasmCloud/wasmCloud</a></div><div class=\"message_embed_description\">Project homepage. wasmCloud allows for simple, secure, distributed application development using WebAssembly actors and capability providers. - wasmCloud/actor.rs at a2ccbb2e1786d2251951f953bdc7f0c...</div></div></div>",
        "id": 340966833,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1678483289
    },
    {
        "content": "<p>Ok that makes sense, and for that functionality you'll have to model it differently in the component model. I'd recommend looking into preview2's API design along with the preview1-to-preview2 adapter in the preview2-prototyping repository</p>",
        "id": 340967513,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1678483529
    },
    {
        "content": "<p>Right, so looking at <a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a> it seems that what it does is it takes a WebAssembly module using preview1 ABI and turns that into a component - what I want to do is essentially reversed, where I want to take an existing WebAssembly component, embed a \"translation layer\" to the legacy ABI and run that on a host, which would be able to parse the resulting WebAssembly, but still interact with it through the legacy ABI</p>\n<p>Does this make sense?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6b14c673f3e5dbe4e6fb2c85376224d393c54c73\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633034376532356430396138633635343631613134393039663234336434636335343861666134373763393331666633393266623039623036363539313338612f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping\" title=\"GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.\">GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 func...</div></div></div>",
        "id": 340970314,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1678484706
    },
    {
        "content": "<p>That makes sense, yes, but currently that's not possible. The abstration level and layer of the component model is such that you can't acquire an underlying linear memory from the host's point of view. From the host's point of view it must communicate with component model types, e.g. things like <code>list&lt;u8&gt;</code> and such</p>",
        "id": 340970505,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1678484787
    },
    {
        "content": "<p>The rough analogy is that if you had something like an HTTP RPC protocol or something like that you can't make an RPC for \"please fill in this buffer\" because you can't get written to by some remote system, for example.</p>",
        "id": 340970610,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1678484830
    },
    {
        "content": "<p>In other words, component interfaces should always be virtualizable, i.e. implementable by another component with no special powers to inspect another component's memory.<br>\nOf course, you could do it ptrace-style where the component exports a function that takes an offset and a length and returns a <code>list&lt;u8&gt;</code> of the memory at that location (and another one that writes a list&lt;u8&gt; to a given offset) :)</p>",
        "id": 340971213,
        "sender_full_name": "Joel Dice",
        "timestamp": 1678485082
    },
    {
        "content": "<p>I see, thank you so much for your answers!<br>\nJust a simple WIT like that actually suffices:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">host</span><span class=\"o\">-</span><span class=\"n\">call</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">binding</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">namespace</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">operation</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">payload</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">default</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">actor</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">host</span>: <span class=\"nc\">self</span><span class=\"p\">.</span><span class=\"n\">host</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"o\">-</span><span class=\"n\">call</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">operation</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">payload</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">&gt;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>So we'll go the \"componentization\" route instead <span aria-label=\"rocket\" class=\"emoji emoji-1f680\" role=\"img\" title=\"rocket\">:rocket:</span></p>",
        "id": 340983371,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1678489944
    }
]