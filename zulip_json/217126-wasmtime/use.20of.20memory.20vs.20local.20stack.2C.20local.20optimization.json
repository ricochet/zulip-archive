[
    {
        "content": "<p>I'm curious -- if I am generating webassembly, how much should I care about generating machine code that is \"optimized\" for the WASM interpreter. For example, I could probably simplify my life if I store all local variables into memory, but I could also work a bit harder and store some subset of them (perhaps a large subset) in WASM local variables and the native WASM stack.</p>\n<p>Does this matter? Can I expect wasmtime to do some kind of \"Heap SSA\"-like transformation and rewrite both into an equivalent form?</p>",
        "id": 490783472,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1735136684
    },
    {
        "content": "<p>Similarly, should I try to use <code>memory.copy</code> to copy \"small-ish\" regions of memory (e.g., 16 bytes) or is it equivalent if I just generate 4 int32 loads and then 4 int32 stores?</p>",
        "id": 490783506,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1735136718
    },
    {
        "content": "<p>We don’t have the equivalent of mem2reg, and wasm semantics actually make it a bit tricky to do so (any memory access could trap and the heap state post-trap is externally visible if exported; so at least stores must remain, and loads at least must bounds-check unless one can prove in-range or subsumed which we don’t do). So a good cost model is probably: operand stack and locals become SSA become registers, loads/stores remain and are more expensive than native</p>",
        "id": 490796757,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1735149232
    },
    {
        "content": "<p>We also don’t try to merge smaller accesses into larger, because of the same trapping semantics; I would suggest using wasm-simd to move 128 bits at a time where possible. memory.copy turns into a trampoline into the runtime IIRC so not so cheap for smaller copies</p>",
        "id": 490796969,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1735149476
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 490873177,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1735216111
    },
    {
        "content": "<p>I'm familiar with binaryen; I'm wondering what other wasm-to-wasm optimizers exist-- are there any that are willing to e.g. treat memory state as \"not inspectable\"?</p>",
        "id": 490873422,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1735216277
    },
    {
        "content": "<p>I'm only aware of binaryen myself and IIRC it has opt-in flags for semantics like that to enable optimizations</p>",
        "id": 490895588,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1735231368
    },
    {
        "content": "<p>mem2reg on Wasm is also hard because we don't have the non-aliasing guarantees of LLVM's alloca. Any memory location is up for grabs by almost any store anywhere.</p>",
        "id": 490895997,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1735231715
    },
    {
        "content": "<p>Binaryen faces the same limitation. I don't think any tool will ever be able to do mem2reg well on Wasm.</p>",
        "id": 490896166,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1735231832
    },
    {
        "content": "<p>Interesting.</p>",
        "id": 490992116,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1735306086
    },
    {
        "content": "<p>Seems like something that tools could emit as \"opt-in\" annotations of a sort</p>",
        "id": 490992142,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1735306101
    },
    {
        "content": "<p>It's an interesting question. Wasm doesn't have an obvious place to attach such annotations, so I don't think it's trivial to do.</p>",
        "id": 491758693,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1735911134
    },
    {
        "content": "<p>I sometimes wonder if would make sense to design a Wasm-like compiler IR, which would be like Wasm plus instructions for things like \"begin a stack frame\", \"end a stack frame\", and <code>alloca</code>. And on top of that, some concept of provenance for pointers. Maybe also <code>GlobalVariable</code> and <code>noalias</code> concepts too. All these things could be lowered into plain Wasm, but in unlowered form would have enough nondeterminism to give a C-compiler-style optimizer room to breath.</p>",
        "id": 491758720,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1735911148
    }
]