[
    {
        "content": "<p>I was thinking about wasi-libc and was wondering if you would recommend it for a language backend interested in wasm compilation? Are there any limitations to using it? Say for example I wanted to provide socket support for a scripting language.</p>",
        "id": 478300716,
        "sender_full_name": "Ashanti Mutinta",
        "timestamp": 1729607876
    },
    {
        "content": "<p>There are much better people who can/will answer, but I do want to point you to <a href=\"https://github.com/bytecodealliance/componentize-py/\"><code>componetize-py</code></a> which is written using wasi-libc (a fork, for now) and might be worth taking a look at if you haven't yet!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d98c0e164341f7ace364e0654edb4c943d35757/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f356564656665643533323034306539393765613435326335643736386136353563333831613338383933653234366531393834363931653864356261343337662f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d7079&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/\" title=\"GitHub - bytecodealliance/componentize-py\">GitHub - bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 478735958,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1729781354
    },
    {
        "content": "<p>.NET, Rust, and LLVM/Clang also use wasi-libc when targeting WASI.  Note that you don't <em>need</em> to use wasi-libc to target WASI -- it's just convenient if you already target a POSIX-like environment.  Alternatively, you could target WASI directly without any kind of POSIX emulation; I believe that's what Go does.</p>",
        "id": 478744824,
        "sender_full_name": "Joel Dice",
        "timestamp": 1729783792
    },
    {
        "content": "<p>BTW, <code>componentize-py</code> only uses a fork of wasi-libc because Rust didn't have native <code>wasm32-wasip2</code> support until recently.  I've just opened <a href=\"https://github.com/bytecodealliance/componentize-py/issues/113\">an issue</a> to switch to upstream.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-py/issues/113\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e5d0ce985fb57248f9a2fa17c996fabd6f09cfb1/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343536383836353237316262373864653832666161643566646263333634353639663863363035363365363039393238636563366439313130333236386638612f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d70792f6973737565732f313133&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-py/issues/113\" title=\"Update to latest WASI-SDK and the new `wasm32-wasip2` target 路 Issue #113 路 bytecodealliance/componentize-py\">Update to latest WASI-SDK and the new `wasm32-wasip2` target 路 Issue #113 路 bytecodealliance/componentize-py</a></div><div class=\"message_embed_description\">Now that Rust supports the wasm32-wasip2 target, we should be able to stop using my fork of WASI-SDK and instead use the latest upstream release. Also, IIRC, Rust builds with -fPIC by default for w...</div></div></div>",
        "id": 478745140,
        "sender_full_name": "Joel Dice",
        "timestamp": 1729783884
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/wasi-libc.20for.20Language.20Backend/near/478744824\">said</a>:</p>\n<blockquote>\n<p>.NET, Rust, and LLVM/Clang also use wasi-libc when targeting WASI.  Note that you don't <em>need</em> to use wasi-libc to target WASI -- it's just convenient if you already target a POSIX-like environment.  Alternatively, you could target WASI directly without any kind of POSIX emulation; I believe that's what Go does.</p>\n</blockquote>\n<p>Awesome thank you!</p>",
        "id": 479859802,
        "sender_full_name": "Ashanti Mutinta",
        "timestamp": 1730375534
    }
]