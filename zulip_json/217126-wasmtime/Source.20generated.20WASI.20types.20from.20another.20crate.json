[
    {
        "content": "<p>Hello!</p>\n<p>I'm trying to source WASI types generated by <code>wit_bindgen</code> from another crate, but I'm running into problems. To clarify, the WIT world for my component depends on some WASI types, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"p\">.{</span><span class=\"n\">outcome</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.0.</span><span class=\"p\">{</span><span class=\"n\">incoming</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"p\">};</span>\n\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">http</span><span class=\"o\">/</span><span class=\"n\">outgoing</span><span class=\"o\">-</span><span class=\"n\">handler</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">handle</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">incoming</span>: <span class=\"nc\">incoming</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">outcome</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I run <code>wit_bindgen</code> on this world, the generated code includes code for the WASI types/handler. Instead, I'd like to be able to generate the WASI-specific code needed for the component in another crate, and have the component reference it.</p>\n<p>A naive approach I took, removing the WASI implementations from the generate code for <code>my-world</code>, and replacing them with references to the corresponding types generated in the dependent crate. This ended up failing with the error when encoding the component: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">xxx</span>: <span class=\"nc\">updating</span><span class=\"w\"> </span><span class=\"n\">metadata</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"k\">type</span>:<span class=\"nc\">internal</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">merge</span><span class=\"w\"> </span><span class=\"n\">worlds</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">two</span><span class=\"w\"> </span><span class=\"n\">documents</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">duplicate</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">incoming</span><span class=\"o\">-</span><span class=\"n\">request</span><span class=\"err\">`</span>\n</code></pre></div>\n<p>For context, the world <code>internal</code> only includes the necessary WASI types (the outgoing-handler, and incoming-request type)</p>\n<p>Is there another approach I can take? Is this possible?</p>\n<p>Thank you!</p>",
        "id": 420361352,
        "sender_full_name": "Rohan Krishnaswamy",
        "timestamp": 1707348960
    },
    {
        "content": "<p>What guest language are you using? (assuming guest here because <code>wit_bindgen</code> is being used, but if a host is being used please correct me). If you're using Rust the <code>with</code> option is intended to solve this use case, although it may not be fully complete yet.</p>\n<p>Also, if you can, can you capture the inputs to generate that error and file an issue if you get a chance? That's not a great error message and something we should improve</p>",
        "id": 420379284,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707360779
    },
    {
        "content": "<p>Sorry, forgot to mention that my guest language is Rust! Yes, I tried using <code>with</code> but unfortunately I still found that <code>wasi</code> code was still generated. Do you know if there's a workaround in the meantime? FYI, <code>with</code> works as expected in my Rust host environment when using <code>wasmtime::component::bindgen!</code>.</p>\n<p>And yes, will definitely file an issue with code to repro!</p>",
        "id": 420384216,
        "sender_full_name": "Rohan Krishnaswamy",
        "timestamp": 1707364952
    },
    {
        "content": "<p>I'm not aware of a workaround myself, but please feel free to file an issue for this as well</p>",
        "id": 420385766,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707366416
    }
]