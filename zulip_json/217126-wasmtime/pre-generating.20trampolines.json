[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> mind if I ping you again on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/957\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/957\">https://github.com/bytecodealliance/wasmtime/pull/957</a>? If you're busy also no worries! I can tag in someone else to review</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/957\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/957\" target=\"_blank\" title=\"Pre-generate trampoline functions by alexcrichton · Pull Request #957 · bytecodealliance/wasmtime\">Pre-generate trampoline functions by alexcrichton · Pull Request #957 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">The wasmtime crate supports calling arbitrary function signatures in\nwasm code, and to do this it generates &quot;trampoline functions&quot; which have\na known ABI that then internally convert to a...</div></div></div>",
        "id": 190317284,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583952440
    },
    {
        "content": "<p>Ah, thanks for the ping! I can take a look.</p>",
        "id": 190317326,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583952475
    },
    {
        "content": "<p><a href=\"https://github.com/alexcrichton/wasmtime/pull/25\" target=\"_blank\" title=\"https://github.com/alexcrichton/wasmtime/pull/25\">https://github.com/alexcrichton/wasmtime/pull/25</a> is a PR for your PR ;-). I set out to just see  what breaks if I removed the <code>Arc</code> but then happened to find a way to make it not break.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/pull/25\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/pull/25\" target=\"_blank\" title=\"Pass the `SignatureRegistry` as an argument to where it's needed. by sunfishcode · Pull Request #25 · alexcrichton/wasmtime\">Pass the `SignatureRegistry` as an argument to where it's needed. by sunfishcode · Pull Request #25 · alexcrichton/wasmtime</a></div><div class=\"message_embed_description\">This avoids the need for storing it in an Arc.</div></div></div>",
        "id": 190324905,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583956891
    },
    {
        "content": "<p>oh nice, I'm a fan :)</p>",
        "id": 190325034,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583956964
    },
    {
        "content": "<p>/me is really dubious of <code>as</code> converting from a raw pointer to a smaller integer.</p>",
        "id": 190325652,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583957345
    },
    {
        "content": "<p>Do I understand correctly that with this PR, the trampolines are part of the code that is cached? So that in the cache-hit case, we don't have to generate a trampoline on the fly?</p>",
        "id": 190327912,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583958623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> we'd generate a trampoline per-module</p>",
        "id": 190328886,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583959148
    },
    {
        "content": "<p>and per-<code>Func::new</code></p>",
        "id": 190328890,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583959153
    },
    {
        "content": "<p>so there's no caching across modules</p>",
        "id": 190328900,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583959161
    },
    {
        "content": "<p>for the per-module ones though, those are cached along with their modules, right?</p>",
        "id": 190329568,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583959597
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> correct yeah, it's all part of the same <code>CodeMemory</code> allocation</p>",
        "id": 190330807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583960394
    },
    {
        "content": "<p>the module's functions are all precisely known in their size, and the trampolines are a little more dynamic, but it's all allocated in one chunk before publishing</p>",
        "id": 190330896,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583960411
    },
    {
        "content": "<p>publishing being switching to W^X</p>",
        "id": 190330904,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583960416
    },
    {
        "content": "<p>er, executable</p>",
        "id": 190330908,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583960419
    },
    {
        "content": "<p>Ok. The PR looks good to me, other than the pointer issue we discussed above.</p>",
        "id": 190331251,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583960624
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ok thanks! mind leaving a comment to that effect?</p>",
        "id": 190332049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583961106
    },
    {
        "content": "<p>sure</p>",
        "id": 190332064,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1583961116
    }
]