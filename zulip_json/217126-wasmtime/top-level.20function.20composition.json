[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> Do you know why <code>wasm-tools compose</code> doesn't support composing a component that has a top-level function import? Is this just because it hasn't been added yet or am I missing something more fundamental? My expectation would be that at the very least if I try to composed a component with a function import with an adapter that if the adapter doesn't have a function export that fits the composed component which just continue to import that function.</p>",
        "id": 390535007,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694529855
    },
    {
        "content": "<p>(I should have posted this in <a class=\"stream\" data-stream-id=\"223391\" href=\"/#narrow/stream/223391-wasm\">#wasm</a> - if anyone with permissions is able to move it there that would be great)</p>",
        "id": 390535141,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694529903
    },
    {
        "content": "<p>The CLI was written at a time when only instances were imported and exported, so it simply isn't implemented yet. A workaround is to use <a href=\"http://wasmbuilder.app\">wasmbuilder.app</a> and manually connect things, as that can connect functions.</p>\n<p>I'm working on a replacement to wasm-compose that will be more flexible and registry-aware.</p>",
        "id": 390540872,
        "sender_full_name": "Peter Huene",
        "timestamp": 1694531575
    },
    {
        "content": "<p>Happy to help with this - I'm working on a tool that would allow for iterative composition of components, and thus I need programmatic use of the compose library.</p>",
        "id": 390541911,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694531889
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> would it be possible to be able to do composition from components in memory instead of always needing to do it from a file?</p>",
        "id": 390561009,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694537921
    },
    {
        "content": "<p>The graph API has <a href=\"https://docs.rs/wasm-compose/latest/wasm_compose/graph/struct.Component.html#method.from_bytes\">https://docs.rs/wasm-compose/latest/wasm_compose/graph/struct.Component.html#method.from_bytes</a></p>",
        "id": 390561129,
        "sender_full_name": "Peter Huene",
        "timestamp": 1694537982
    },
    {
        "content": "<p>Ah somehow I missed that. Thanks!</p>",
        "id": 390562303,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694538432
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> oh I see now - I've been using the <code>ComponentComposer</code> API which only accepts a path</p>",
        "id": 390562753,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694538610
    },
    {
        "content": "<p>yeah, that thing is just a simplistic interface that drives the CLI</p>",
        "id": 390562779,
        "sender_full_name": "Peter Huene",
        "timestamp": 1694538624
    },
    {
        "content": "<p><code>CompositionGraph</code> underpins everything and is what <a href=\"http://wasmbuilder.app\">wasmbuilder.app</a> uses directly</p>",
        "id": 390562822,
        "sender_full_name": "Peter Huene",
        "timestamp": 1694538644
    },
    {
        "content": "<p>When you say you're rewriting wasm-tools compose, are you planning on doing that from the ground up or is the core going to stay the same? I'm just wondering how much time I should put into adding functionality to my tool rather than waiting for the replacement</p>",
        "id": 390564731,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1694539401
    },
    {
        "content": "<p>mostly found the ground-up, but keeping the parts that make sense (such as the composition graph); there's going to be a WIT-like composition language that is quite expressive in terms of composing components together, with built in support for the registry.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// create an instance of the `foo:bar` component and import the needed instantiation arguments into the composition</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">bar</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"c1\">// create an instance of the `foo:baz` component, passing `bar` as an instantiation argument, importing the rest</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">baz</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"c1\">// alias the `run` function from instance `baz` and export it from the composition</span>\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">baz</span><span class=\"p\">.</span><span class=\"n\">run</span>\n</code></pre></div>",
        "id": 390570115,
        "sender_full_name": "Peter Huene",
        "timestamp": 1694541576
    },
    {
        "content": "<p>Not sure if you can do this for your use case... but I was encountering the same thing when bundling transitive registry dependencies, and inlined the components that were being imported... happy to share some of that if it could help you out for the time being.</p>",
        "id": 390758681,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1694622011
    }
]