[
    {
        "content": "<p>I am trying to run an image which I built using  buildx and platform wasi/wasm (It works well locally using docker desktop). But when I try to tun it in a server, using the docker ce, wasmtime shim (built runwasi), I get this <br>\n for platform in manifest: not found\",  error=\"failed to extract layer / operating system is not supported</p>",
        "id": 468596919,
        "sender_full_name": "Sangeeta Kakati",
        "timestamp": 1725813131
    },
    {
        "content": "<p>if you're going to use docker-ce, you need to configure it to use containerd/runwasi manually, I believe. <a href=\"https://docs.docker.com/engine/daemon/alternative-runtimes/\">https://docs.docker.com/engine/daemon/alternative-runtimes/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://docs.docker.com/engine/daemon/alternative-runtimes/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3bfcc95843844b90ebb1a61034c9f0aa6426dba0/68747470733a2f2f646f63732e646f636b65722e636f6d2f6173736574732f696d616765732f7468756d626e61696c2e77656270&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://docs.docker.com/engine/daemon/alternative-runtimes/\" title=\"Alternative container runtimes\">Alternative container runtimes</a></div><div class=\"message_embed_description\">Docker Engine uses runc as the default container runtime, but you can specify alternative runtimes using the CLI or by configuring the daemon </div></div></div>",
        "id": 468746211,
        "sender_full_name": "Ralph",
        "timestamp": 1725877103
    },
    {
        "content": "<p>have you done that?</p>",
        "id": 468746225,
        "sender_full_name": "Ralph",
        "timestamp": 1725877107
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Running.20wasm.20container.20with.20ctr.2Fdocker/near/468746225\">said</a>:</p>\n<blockquote>\n<p>have you done that?</p>\n</blockquote>\n<p>Yes, I built runwasi to get the shims, <br>\nI have this in my containerd's config.toml:</p>\n<p>[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.spin]<br>\nruntime_type = \"io.containerd.spin.v2\"<br>\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.wasmtime]<br>\nruntime_type = \"io.containerd.wasmtime.v1\"<br>\nruntime_engine = \"/usr/local/bin/containerd-shim-wasmtime-v1\"<br>\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.wasmedge]<br>\nruntime_type = \"io.containerd.wasmedge.v1\"<br>\n[plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.wasmer]<br>\nruntime_type = \"io.containerd.wasmer.v1\"</p>\n<p>And the docker daemon config is:</p>\n<p>{<br>\n  \"runtimes\": {<br>\n    \"io.containerd.wasmtime.v1\": {<br>\n      \"path\": \"/usr/local/bin/containerd-shim-wasmtime-v1\"<br>\n    }<br>\n  }<br>\n}</p>\n<p>I have it placed in /usr/local/bin</p>\n<p>And I am using this to run :<br>\ndocker run --runtime=io.containerd.wasmtime.v1 --platform=wasm sangeetakakati/rust-matrix-wasm:wasm</p>",
        "id": 468820094,
        "sender_full_name": "Sangeeta Kakati",
        "timestamp": 1725892805
    },
    {
        "content": "<p>and it is now working?</p>",
        "id": 468825891,
        "sender_full_name": "Ralph",
        "timestamp": 1725893858
    },
    {
        "content": "<p>I noticed that Jorge answered in slack about this</p>",
        "id": 468825955,
        "sender_full_name": "Ralph",
        "timestamp": 1725893870
    },
    {
        "content": "<p><a href=\"https://cloud-native.slack.com/archives/C04LTPB6Z0V/p1725882112321519?thread_ts=1722864811.543829&amp;cid=C04LTPB6Z0V\">https://cloud-native.slack.com/archives/C04LTPB6Z0V/p1725882112321519?thread_ts=1722864811.543829&amp;cid=C04LTPB6Z0V</a></p>",
        "id": 468826409,
        "sender_full_name": "Ralph",
        "timestamp": 1725893978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Running.20wasm.20container.20with.20ctr.2Fdocker/near/468825955\">said</a>:</p>\n<blockquote>\n<p>I noticed that Jorge answered in slack about this</p>\n</blockquote>\n<p>Yes I followed that, It works on my arm64 server in a jetson nano, but not in an aws server i am using with amd64 :(<br>\nI am lost for where I am going wrong here to be getting this :<br>\ndocker: Error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: unable to retrieve OCI runtime error (open /run/containerd/io.containerd.runtime.v2.task/moby/35b160456e14a1e941a662792b3c69e621d857ef5cfc805fe8256ee4efbe68ee/log.json: no such file or directory): /usr/local/bin/containerd-shim-wasmtime-v1 did not terminate successfully: exit status 101: unknown.</p>\n<p>Is this related to the config file for containerd?</p>",
        "id": 468829846,
        "sender_full_name": "Sangeeta Kakati",
        "timestamp": 1725894653
    },
    {
        "content": "<p>yeah, bring that problem to Jorge over in slack. This is really a containerd conversation.</p>",
        "id": 468830044,
        "sender_full_name": "Ralph",
        "timestamp": 1725894707
    },
    {
        "content": "<p>Will using a non-default runtime (io.containerd.wasmtime.v1) introduce some additional overhead in terms of startup time of container or pull time from an oci?</p>",
        "id": 470922558,
        "sender_full_name": "Sangeeta Kakati",
        "timestamp": 1726565112
    },
    {
        "content": "<p>each implementation does its own pulling, so no DEFAULT overhead no, and generally the pulls will be much faster than container images due to size alone</p>",
        "id": 471243836,
        "sender_full_name": "Ralph",
        "timestamp": 1726661692
    },
    {
        "content": "<p>however, there's the manifest pull to locate the layer/component, and then there's the component pull. That's about it.</p>",
        "id": 471243932,
        "sender_full_name": "Ralph",
        "timestamp": 1726661730
    },
    {
        "content": "<p>those are the same with containers, basically</p>",
        "id": 471243948,
        "sender_full_name": "Ralph",
        "timestamp": 1726661736
    }
]