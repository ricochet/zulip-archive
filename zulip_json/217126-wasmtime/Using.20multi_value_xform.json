[
    {
        "content": "<p>Hello, would anyone happen to have any examples of using <code>wasm_bindgen_multi_value_xform</code> in their <code>wasmtime</code> project? I'm interested in usng it in my project, but I'm not actually sure how I'm supposed to use it from the Rust side.</p>",
        "id": 238673784,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620936616
    },
    {
        "content": "<p>AFAIK, it has never been used outside of <code>wasm-bindgen</code>, and was written very specifically for <code>wasm-bindgen</code>, so I wouldn't put too much hope in using it outside that context</p>",
        "id": 238683814,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1620941113
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> Thank you for your reply, would you happen to know how are you supposed to use it in wasm_bindgen? There isn't any documentation for that as far as I can find.</p>\n<p>Also Relatedly: Are you supposed to use <code>wasm-bindgen</code> when you're trying to define your own API for modules that are run with <code>wasmtime</code>? It seems heavily JavaScript and browser focused, where as I'm just looking to have modules with two functions (e.g. <code>read</code> and <code>write</code>) on the WASM side, which the host calls with a struct and then copy the object back to the host.</p>\n<p>My current approach since WIT is not available, is to send everything as bytes, so I was trying to have <code>read</code> and <code>write</code> return <code>(ptr: i32, len: i32)</code> to know where the bytes were in the <code>wasmtime</code> memory.</p>",
        "id": 238712961,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1620962434
    },
    {
        "content": "<p>No <code>wasm-bindgen</code> is not intended to be used with <code>wasmtime</code>, only with the JS glue that it also generates. The \"next generation\" is interface-types which should work for non-web runtimes and other wasm languages as well</p>",
        "id": 238785929,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1621006735
    },
    {
        "content": "<p>For now in the meantime you'll need to effectively hand-write an ABI/API between modules and the host (or two modules), but we are indeed actively working on a solution to this :)</p>",
        "id": 238786027,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1621006784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Thanks for clarifying. Writing my own ABI is fine with me, the part I’m struggling is trying to return have functions with multiple return values in Rust generated WASM, to for example; return the pointer and length of a vector from <code>wasmtime::Memory</code> to the host.</p>\n<p>Right now my guess is to return a i64 that is the pointer and length concatenated together, but that doesn’t really seem like the intended approach.</p>",
        "id": 238805540,
        "sender_full_name": "XAMPPRocky",
        "timestamp": 1621015184
    },
    {
        "content": "<p>I added <code>extern \"wasm\"</code> to rust (unstable) to support a multi value return Abi but it's unlikely to ever be stabilized</p>",
        "id": 238807425,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1621015873
    },
    {
        "content": "<p>Multi value returns are not super well supported in C and Rust right now afaik</p>",
        "id": 238807473,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1621015899
    },
    {
        "content": "<p>I'd recommend the i64 approach</p>",
        "id": 238807490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1621015906
    }
]