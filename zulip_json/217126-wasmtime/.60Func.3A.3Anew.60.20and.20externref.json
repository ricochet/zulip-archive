[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> filling out some Go bindings I found an issue where <code>Func::new</code> will panic if it's created with externef types and the <code>Config</code> doesn't have reference types enabled</p>",
        "id": 204222713,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595000945
    },
    {
        "content": "<p>I'm a bit stuck thinking about this, though, as I'm not entirely sure how best to handle this</p>",
        "id": 204222731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595000956
    },
    {
        "content": "<p>the problem is that the trampoline generated by the <code>wasmtime</code> crate is attempting to use stack maps but cranelift's stack map support is not enabled so the register allocator naturally panics (as expected)</p>",
        "id": 204222802,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595000992
    },
    {
        "content": "<p>I think we may want to avoid stack maps entirely for trampolines? I don't think they actually serve any purpose</p>",
        "id": 204222895,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001018
    },
    {
        "content": "<p>Can we assert in <code>Func::new</code> et al that reference types are enabled in the config if they're being used?</p>",
        "id": 204224587,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001682
    },
    {
        "content": "<p>that would at least be something we could document and have good assertion messages for</p>",
        "id": 204224623,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001698
    },
    {
        "content": "<p>hm so an assert isn't quite what would work for the bindings though</p>",
        "id": 204224812,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001767
    },
    {
        "content": "<p><code>wasm_func_new</code> panicking brings down the process most of the time</p>",
        "id": 204224839,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001777
    },
    {
        "content": "<p>(that's what's happening right now)</p>",
        "id": 204224859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001787
    },
    {
        "content": "<p>I guess we would have to duplicate the check in a <code>wasmtime_func_new</code> :-/</p>",
        "id": 204224898,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001804
    },
    {
        "content": "<p>yay for <code>wasmtime_</code> prefixed functions</p>",
        "id": 204224951,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1595001828
    },
    {
        "content": "<p>I think you are technically correct that the trampolines don't need stack maps, but it is fairly subtle.</p>",
        "id": 204225071,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001866
    },
    {
        "content": "<p>we could do some nasty <code>r64</code> -&gt; <code>i64</code> hacks</p>",
        "id": 204225112,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001883
    },
    {
        "content": "<p>that's what I'm thinking yeah</p>",
        "id": 204225122,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001889
    },
    {
        "content": "<p>make it always work basically</p>",
        "id": 204225128,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001894
    },
    {
        "content": "<p>definitely not worth it as a perf optimization, but to work around this issue, maybe</p>",
        "id": 204225166,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001908
    },
    {
        "content": "<p>or alternatively</p>",
        "id": 204225178,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001913
    },
    {
        "content": "<p>we can always enable reference types in the trampolines</p>",
        "id": 204225201,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001922
    },
    {
        "content": "<p>that feels safer to me</p>",
        "id": 204225214,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001927
    },
    {
        "content": "<p>yeah that was my other thought</p>",
        "id": 204225221,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001930
    },
    {
        "content": "<p>I'll see if I can do that I think</p>",
        "id": 204225268,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595001944
    },
    {
        "content": "<p>cool, let me know how it goes</p>",
        "id": 204225293,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001957
    },
    {
        "content": "<p>maybe we could have caught this if we extended the API call fuzzer</p>",
        "id": 204225367,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001976
    },
    {
        "content": "<p>with reference types and instructions to create funcs</p>",
        "id": 204225392,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595001991
    },
    {
        "content": "<p>I wish the API call fuzzer was easier to extend, it is a little bit of a pain with all the scope stuff</p>",
        "id": 204225450,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595002018
    },
    {
        "content": "<p>ok well that at least removes the panics</p>",
        "id": 204225559,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002075
    },
    {
        "content": "<p>seems fine for now!</p>",
        "id": 204225563,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002078
    },
    {
        "content": "<p>I have no idea if stack maps from trampolines even make their way into the <code>Store</code></p>",
        "id": 204225888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002219
    },
    {
        "content": "<p>I feel like our management of trampolines is very ad-hoc</p>",
        "id": 204225902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002225
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2039\">https://github.com/bytecodealliance/wasmtime/pull/2039</a></p>",
        "id": 204225967,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1595002269
    },
    {
        "content": "<p>I <em>think</em> they will make their way into the store's stack map registry, I vaguely remember a common code path here</p>",
        "id": 204226468,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595002522
    }
]