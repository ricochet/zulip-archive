[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> <span class=\"user-mention\" data-user-id=\"254051\">@Jonathan Foote</span> this bug, which was created right after the oss-fuzz integration was set up, and seems to be some kind of problem with the setup, says that it'd be closed within a day after being fixed—does that mean it's not fixed yet? <a href=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20472&amp;q=label%3AProj-wasmtime\" target=\"_blank\" title=\"https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20472&amp;q=label%3AProj-wasmtime\">https://bugs.chromium.org/p/oss-fuzz/issues/detail?id=20472&amp;q=label%3AProj-wasmtime</a></p>",
        "id": 189817303,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1583430039
    },
    {
        "content": "<p>I think that this is trying to build with clang coverage, which is not supported by rustc.</p>\n<p>Looking at the build logs I see stuff like:</p>\n<div class=\"codehilite\"><pre><span></span>Step #5: du: cannot access &#39;/workspace/out/coverage/dumps/compile.*.profraw&#39;: No such file or directory\nStep #5: du: cannot access &#39;/workspace/out/coverage/dumps/instantiate.*.profraw&#39;: No such file or directory\n</pre></div>",
        "id": 189817798,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1583430343
    },
    {
        "content": "<p>oh I forgot about that...</p>",
        "id": 189817807,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583430353
    },
    {
        "content": "<p>I opened up <a href=\"https://github.com/google/oss-fuzz/issues/3468\" target=\"_blank\" title=\"https://github.com/google/oss-fuzz/issues/3468\">https://github.com/google/oss-fuzz/issues/3468</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/issues/3468\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/issues/3468\" target=\"_blank\" title=\"Don't know how to fix wasmtime's coverage build · Issue #3468 · google/oss-fuzz\">Don't know how to fix wasmtime's coverage build · Issue #3468 · google/oss-fuzz</a></div><div class=\"message_embed_description\">When we first added wasmtime to oss-fuzz we quckly got a bug opened about the coverage build failing. Checking out the build log the end of it has failures that look like: Step #5: du: cannot acces...</div></div></div>",
        "id": 189819330,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583431307
    },
    {
        "content": "<p>\"fixed\" :D</p>",
        "id": 189821991,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583433063
    },
    {
        "content": "<p>heh, yes, \"fixed\". Thank you for handling this!</p>",
        "id": 189829026,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1583437536
    },
    {
        "content": "<p>Hello all. Apologies for the delay in responding here, I was OOO last week <span aria-label=\"electric plug\" class=\"emoji emoji-1f50c\" role=\"img\" title=\"electric plug\">:electric_plug:</span> For context, I asked Max (Dor1s) and a few other people about the possibility of google providing resources to work on this when I saw him IRL two weeks ago. Unfortunately it sounds like they probably won't, at least from his perspective.</p>",
        "id": 190104710,
        "sender_full_name": "Jonathan Foote",
        "timestamp": 1583780160
    },
    {
        "content": "<p>IIUC we would effectively want <a href=\"https://github.com/rust-lang/rust/issues/34701\" target=\"_blank\" title=\"https://github.com/rust-lang/rust/issues/34701\">https://github.com/rust-lang/rust/issues/34701</a> addressed</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/34701\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/34701\" target=\"_blank\" title=\"Implement support for LLVMs code coverage instrumentation · Issue #34701 · rust-lang/rust\">Implement support for LLVMs code coverage instrumentation · Issue #34701 · rust-lang/rust</a></div><div class=\"message_embed_description\">There are ways to more or less easily obtain code coverage information from rust binaries, some of which are in widespread use (e.g. travis-cargo + gcov + coveralls.io). However, these are either p...</div></div></div>",
        "id": 190104853,
        "sender_full_name": "Jonathan Foote",
        "timestamp": 1583780235
    },
    {
        "content": "<p>I will mention it on the relevant oss-fuzz GH issue</p>",
        "id": 190104873,
        "sender_full_name": "Jonathan Foote",
        "timestamp": 1583780248
    },
    {
        "content": "<p>This would be nice to have for sure when evaluating whether a fuzz target is exercising all the corners you expect it to. AFAIK, we \"just\" need to do the work in <code>rustc</code> to hook this stuff up. <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> would know more. Not sure how to prioritize working on this vs other wasmtime things though...</p>",
        "id": 190112219,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1583784577
    },
    {
        "content": "<p>Yeah this'd likely looks similar to most of our other sanitizer work which would involve building and shipping the runtime support libraries for select platforms and then having <code>-Z</code> flags in rustc that configures LLVM's pass manager appropriately and then also links the runtime libs, probably not the hardest thing to do but probably also not super trivial.</p>",
        "id": 190175013,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583849063
    },
    {
        "content": "<p>There I think is some basic profiling support already with <code>-Zprofile</code>, but I would suspect that it's not trivially usable</p>",
        "id": 190175267,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583849173
    },
    {
        "content": "<p>oh looks like <code>-Zprofile</code> may be one of the three mechanisms in llvm for coverage, and it may be the wrong one</p>",
        "id": 190175390,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583849237
    },
    {
        "content": "<p>In the Wasmtime meeting today we (<span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span>) talked a bit about fuzzing: what I took away is that the Wasm SIMD fuzzing should be turned on once we finish the Wasm SIMD implementation but even when that happens the differential fuzz targets (i.e. vs wasmi) won't cover this feature. Is that right?</p>",
        "id": 242269058,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358293
    },
    {
        "content": "<p>I believe so, yeah</p>",
        "id": 242269217,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358346
    },
    {
        "content": "<p>Yes, that's right, we would need a Wasm interpreter that supports SIMD; <code>wasmi</code> doesn't as far as I can tell</p>",
        "id": 242269307,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358385
    },
    {
        "content": "<p>And I guess we were sort of all agreeing that it would be great if we could use the spec interpreter for this... but it might be tricky to run this</p>",
        "id": 242269359,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358408
    },
    {
        "content": "<p>...tricky from Rust or within our environment, etc.</p>",
        "id": 242269377,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358424
    },
    {
        "content": "<p>yeah, calling into Ocaml from Rust would be tricky, but maybe doable? I have no idea what the FFI is like on the ML side</p>",
        "id": 242269450,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358446
    },
    {
        "content": "<p>Do we need to call it as a library or can we get away with forking a process to do that?</p>",
        "id": 242269510,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358481
    },
    {
        "content": "<p>I wouldn't necessarily consider this a requirement for stabilizing simd though, I think we need to fuzz it at least a little but wasm-smith has us more than covered on that front</p>",
        "id": 242269538,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358501
    },
    {
        "content": "<p>ah, well we could fork a process as long as we are able to get the memory and global contents in return</p>",
        "id": 242269545,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358504
    },
    {
        "content": "<p>actually that's an interesting idea: build a server process in Ocaml that wraps the spec interpreter, takes Wasm module bytes as input, and returns execution results, in a protocol over a pipe or something</p>",
        "id": 242269580,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358529
    },
    {
        "content": "<p>running the spec interpreter on oss-fuzz would be weird though, I'm not sure if we have tight control over the environment the fuzzed binaries are run within, you'd have to look into oss-fuzz for more details on that</p>",
        "id": 242269633,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358556
    },
    {
        "content": "<blockquote>\n<p>I wouldn't necessarily consider this a requirement for stabilizing simd though</p>\n</blockquote>\n<p>Yeah, I'm just thinking about what is the best possible end state</p>",
        "id": 242269643,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358562
    },
    {
        "content": "<p>currently I only know we have tight control over the build environment</p>",
        "id": 242269682,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358567
    },
    {
        "content": "<p>like, you mean they might not let us open ports, etc.?</p>",
        "id": 242269762,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358605
    },
    {
        "content": "<p>I'm sure it's at least somewhat possible though, and most of the works is probably just building the server process in ocaml lol</p>",
        "id": 242269782,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358615
    },
    {
        "content": "<p>because we can certainly build the spec interpreter binary...</p>",
        "id": 242269793,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358618
    },
    {
        "content": "<p>completely harebrained idea: somehow translate the spec interpreter, or the core (opcode-matching) parts of it, to Rust? I have no idea how regular its implementation is and how easy it would be to parse it</p>",
        "id": 242269814,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358625
    },
    {
        "content": "<p>nah I'm just not sure how they actually run the binary. I thought it was just \"download the binary and run it\" which gives us no control over the environment</p>",
        "id": 242269839,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358636
    },
    {
        "content": "<p><em>nose goes</em></p>",
        "id": 242269859,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358648
    },
    {
        "content": "<p>well, I see a Dockerfile in there so I assumed that is what was building the artifacts?</p>",
        "id": 242269889,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358665
    },
    {
        "content": "<blockquote>\n<p><em>nose goes</em></p>\n</blockquote>\n<p>I am booked out to <em>checks calendar</em> 2024, but I can slot this in sometime after that :-)</p>",
        "id": 242269905,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358676
    },
    {
        "content": "<p>in there = <a href=\"https://github.com/google/oss-fuzz/tree/master/projects/wasmtime\">https://github.com/google/oss-fuzz/tree/master/projects/wasmtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/tree/master/projects/wasmtime\" style=\"background-image: url(https://opengraph.githubassets.com/30585b6acfbdd35d8212c5f7d697cefb4ef9e94e1604395d9f9421bcfd4fc339/google/oss-fuzz)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/tree/master/projects/wasmtime\" title=\"google/oss-fuzz\">google/oss-fuzz</a></div><div class=\"message_embed_description\">OSS-Fuzz - continuous fuzzing for open source software. - google/oss-fuzz</div></div></div>",
        "id": 242269909,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358677
    },
    {
        "content": "<p>I think you'd basically just want to double-check what the running environment is in oss-fuzz, I really don't know myself, i just suspect it's probably not \"vanilla\"</p>",
        "id": 242269958,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358686
    },
    {
        "content": "<p>yeah</p>",
        "id": 242269971,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623358694
    },
    {
        "content": "<p>yeah the dockerfile there is for building, and I don't think it's used for running but I could be wrong</p>",
        "id": 242269988,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358705
    },
    {
        "content": "<p>there must be at least some mechanism to get files in place, for fuzzers that want more complex install environments? or maybe not</p>",
        "id": 242270038,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358741
    },
    {
        "content": "<p>and there's the potential they sandbox things somehow too so one can't exec (seccomp or similar)</p>",
        "id": 242270068,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358753
    },
    {
        "content": "<p>tbh the best comparison is probably node at this point, I think they've got everything necessary implemented</p>",
        "id": 242270388,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358899
    },
    {
        "content": "<p>s/best/easiest/</p>",
        "id": 242270402,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1623358904
    },
    {
        "content": "<p>another thought: it might be <em>ok</em> (not ideal, but ok) if we have a fuzzing mode that requires some additional environment and setup that oss-fuzz can't provide, as we can still run this elsewhere (e.g., the CI machines in the background)</p>",
        "id": 242270550,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623358960
    },
    {
        "content": "<p>(an aside: does anyone know how to fix <code>-fsanitize-coverage=trace-pc-guard is no longer supported by libFuzzer. Please either migrate to a compiler that supports -fsanitize=fuzzer or use an older version of libFuzzer</code> before I go off trying to figure out how to fix it?)</p>",
        "id": 242274741,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623361045
    },
    {
        "content": "<p>Seen when attempting to run: <code>cargo +nightly fuzz run differential</code></p>",
        "id": 242274780,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623361075
    },
    {
        "content": "<p>I sometimes run <code>cargo fuzz</code> with <code>-s none</code> to turn off all sanitizers, to get a faster build turnaround when debugging a fuzz crash</p>",
        "id": 242274910,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623361173
    },
    {
        "content": "<p>imho the sanitizers are less important when fuzzing Rust, at least when running locally, as the asserts are the most important oracle (others please correct me if that's not true!)</p>",
        "id": 242274999,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623361224
    },
    {
        "content": "<p>I get: <code>error: 'none' isn't a valid value for '--sanitizer &lt;sanitizer&gt;' [possible values: address, leak, memory, thread]</code></p>",
        "id": 242275012,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623361234
    },
    {
        "content": "<p>weird, how old is your <code>cargo-fuzz</code>?</p>",
        "id": 242275048,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623361253
    },
    {
        "content": "<p>0.5.2?</p>",
        "id": 242275072,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623361268
    },
    {
        "content": "<p>Ah, I'm on 0.8.0:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">cfallin</span><span class=\"o\">@</span><span class=\"n\">xap</span>:<span class=\"o\">~/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">regalloc</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"n\">none</span><span class=\"w\"> </span><span class=\"n\">regalloc2</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">regalloc2</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">0.1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">cfallin</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">regalloc2</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">regalloc</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">0.31</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">cfallin</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">regalloc</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">   </span><span class=\"n\">Compiling</span><span class=\"w\"> </span><span class=\"n\">minira</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">cfallin</span><span class=\"o\">/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">regalloc</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"o\">^</span><span class=\"n\">C</span><span class=\"w\">  </span><span class=\"n\">Building</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">========================&gt;</span><span class=\"w\">  </span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"mi\">53</span><span class=\"o\">/</span><span class=\"mi\">57</span>: <span class=\"nc\">regalloc2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">regalloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">minira</span><span class=\"o\">-</span><span class=\"n\">util</span><span class=\"w\"></span>\n<span class=\"n\">cfallin</span><span class=\"o\">@</span><span class=\"n\">xap</span>:<span class=\"o\">~/</span><span class=\"n\">work</span><span class=\"o\">/</span><span class=\"n\">regalloc</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"n\">cargo</span><span class=\"o\">-</span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"mf\">0.8.0</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 242275105,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1623361298
    },
    {
        "content": "<p>oh... latest is at 0.10.2...</p>",
        "id": 242275106,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623361299
    },
    {
        "content": "<p>and that works great.</p>",
        "id": 242275804,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1623361722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/fuzzing.20infrastructure/near/242270550\">said</a>:</p>\n<blockquote>\n<p>another thought: it might be <em>ok</em> (not ideal, but ok) if we have a fuzzing mode that requires some additional environment and setup that oss-fuzz can't provide, as we can still run this elsewhere (e.g., the CI machines in the background)</p>\n</blockquote>\n<p>the downside here is that we have to build all the infrastructure necessary to dedupe crashes, monitor fuzzing processes and respawn them after they find crashes, etc and this is a bunch of work that oss-fuzz already does for us</p>",
        "id": 242632439,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1623691724
    },
    {
        "content": "<p>I mentioned in the meeting today that it didn't seem impossible to use OCaml's FFI to call in to the spec interpreter from Rust. Let me describe a possible plan and I'm interested to hear how feasible this all sounds (esp. from people with more Rust/FFI expertise):</p>\n<ul>\n<li>The spec interpreter exposes methods like <a href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/exec/eval.ml#L551\">Eval.invoke</a> that allow us to call a function and see the return values; there are also higher-level ways to do this (e.g. load + run a module) and we would need to extend <a href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/runtime/memory.mli\">Memory</a> to allow us to hash it</li>\n<li>After building the Ocaml library, we could use the <a href=\"https://crates.io/crates/ocaml-interop\">ocaml_interop</a> to safely get our data (Wasm, values, etc.) over into the OCaml runtime</li>\n<li>Then we link in the spec interpreter library (we might need to tweak things a bit and use <a href=\"https://ocaml.org/manual/intfc.html#s:ocamlmklib\">ocamlmklib</a>) to our Rust code</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/exec/eval.ml#L551\" style=\"background-image: url(https://opengraph.githubassets.com/a1121ed959acee7625b91d37e4f4688d3e843708107dedaad9ad3b1bdd7c8d42/WebAssembly/spec)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/exec/eval.ml#L551\" title=\"WebAssembly/spec\">WebAssembly/spec</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - WebAssembly/spec</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/runtime/memory.mli\" style=\"background-image: url(https://opengraph.githubassets.com/a1121ed959acee7625b91d37e4f4688d3e843708107dedaad9ad3b1bdd7c8d42/WebAssembly/spec)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/blob/master/interpreter/runtime/memory.mli\" title=\"WebAssembly/spec\">WebAssembly/spec</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - WebAssembly/spec</div></div></div>",
        "id": 243864105,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1624581388
    },
    {
        "content": "<p>It would be ideal if all of that could get wrapped up into a <code>wasm-spec-interpreter</code> crate so that we could use it in the fuzzer...</p>",
        "id": 243864142,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1624581439
    },
    {
        "content": "<p>That all sounds reasonable!</p>",
        "id": 243864695,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1624582004
    },
    {
        "content": "<p>An update on this: I tried out the approach above and it works! Well... at least for <code>int</code> types <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 245064489,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1625589063
    },
    {
        "content": "<p>I'll try to get more types working before I share the proposed crate</p>",
        "id": 245064562,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1625589103
    },
    {
        "content": "<p>Great news! Looking forward to seeing this!</p>",
        "id": 245065716,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1625589655
    },
    {
        "content": "<p>Others will probably appreciate having \"actual Wasm spec interpreter as a Rust crate\" as well; the ecosystem of wasm interpreters on <a href=\"http://crates.io\">crates.io</a> is kinda haphazard right now afaict</p>",
        "id": 245065926,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1625589753
    },
    {
        "content": "<p>Well, after talking to <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> about this I just included the crate in the Wasmtime repository. Here is the current state of things: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3124\">https://github.com/bytecodealliance/wasmtime/pull/3124</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3124\" style=\"background-image: url(https://opengraph.githubassets.com/637f74e4d54f5cc2bdad5746a282389714069ea8e7402a1b52420dc81a7c8d6e/bytecodealliance/wasmtime/pull/3124)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3124\" title=\"Fuzz Wasmtime against the official Wasm spec interpreter by abrown · Pull Request #3124 · bytecodealliance/wasmtime\">Fuzz Wasmtime against the official Wasm spec interpreter by abrown · Pull Request #3124 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This change introduces a new fuzz target, differential_spec that compares the outputs of executing the first exported function of a Wasm module in Wasmtime and then in the official Wasm spec interp...</div></div></div>",
        "id": 247513825,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1627504578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> , <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>: I think the main problem right now with the PR above is that the wasm-spec-interpreter crate only builds in a certain environment. To solve this, the best I can come up with is to always build the crate but detect during <a href=\"http://build.rs\">build.rs</a> if the right tools are available and build the OCaml library if they are. If they are not, then set a feature flag and in <a href=\"http://lib.rs\">lib.rs</a> implement the <code>interpret</code> function by immediately panicking. So the crate should always build but will crash at runtime if the OCaml/Linux bits aren't there. Thoughts?</p>",
        "id": 247616464,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1627580326
    },
    {
        "content": "<p>That seems like an OK compromise, yeah. I guess we already do something similar for OpenVINO (detect if present at build time, still build without it)</p>",
        "id": 247616668,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1627580417
    },
    {
        "content": "<p>sounds fine to me</p>",
        "id": 247616688,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1627580434
    },
    {
        "content": "<p>agreed sounds good</p>",
        "id": 247616701,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1627580443
    },
    {
        "content": "<p>Well, I forgot a crucial detail so I'm not sure this will work: I can detect if the tools are available, set a feature flag, and use this to compile a panicking <code>interpret</code> function but feature flags set in <code>build.rs</code> don't affect dependencies, IIRC. So the <code>ocaml-sys</code> crate still tries to build and fails. Any ideas?</p>",
        "id": 247625119,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1627584556
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/314\">https://github.com/bytecodealliance/wasm-tools/pull/314</a> may be of interest here in generating more modules that get past instantiation in theory. I still think there's a lot of work to be done on the instruction side of things though where we're more intelligent about generating instructions that aren't super likely to just always trap around memory</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/314\" style=\"background-image: url(https://opengraph.githubassets.com/33944f2f467a35b8c7b9944af95f2c275bdd48ae3ebc7e9d1ad3d5006a9126a6/bytecodealliance/wasm-tools/pull/314)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/314\" title=\"wasm-smith: Generate fail-to-instantiate modules far less frequently by alexcrichton · Pull Request #314 · bytecodealliance/wasm-tools\">wasm-smith: Generate fail-to-instantiate modules far less frequently by alexcrichton · Pull Request #314 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">I ran a small program recently where I threw random data at wasm-smith and then tried to instantiate each module. I kept record of statistics about whether or not the module failed to instantiate, ...</div></div></div>",
        "id": 248880624,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628530216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> looks like the oss-fuzz build failed last night -- <a href=\"https://oss-fuzz-build-logs.storage.googleapis.com/index.html#wasmtime\">https://oss-fuzz-build-logs.storage.googleapis.com/index.html#wasmtime</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"nc\">Compiling</span><span class=\"w\"> </span><span class=\"n\">cpp_demangle</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">3.2</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"nc\">Compiling</span><span class=\"w\"> </span><span class=\"n\">crossbeam</span><span class=\"o\">-</span><span class=\"n\">channel</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">5.1</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"nc\">Compiling</span><span class=\"w\"> </span><span class=\"n\">quote</span><span class=\"w\"> </span><span class=\"n\">v1</span><span class=\"p\">.</span><span class=\"mf\">0.9</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"nc\">Compiling</span><span class=\"w\"> </span><span class=\"n\">aho</span><span class=\"o\">-</span><span class=\"n\">corasick</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">7.18</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"nc\">Compiling</span><span class=\"w\"> </span><span class=\"n\">jobserver</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.22</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"nc\">Compiling</span><span class=\"w\"> </span><span class=\"n\">getrandom</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">2.3</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">custom</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">spec</span><span class=\"o\">-</span><span class=\"n\">interpreter</span><span class=\"w\"> </span><span class=\"n\">v0</span><span class=\"p\">.</span><span class=\"mf\">1.0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">fuzzing</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">spec</span><span class=\"o\">-</span><span class=\"n\">interpreter</span><span class=\"p\">)</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:\n<span class=\"nc\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n<span class=\"nc\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">process</span><span class=\"w\"> </span><span class=\"n\">didn</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">successfully</span>: <span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">spec</span><span class=\"o\">-</span><span class=\"n\">interpreter</span><span class=\"o\">-</span><span class=\"n\">e74f205a2f27f8b8</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"o\">-</span><span class=\"n\">script</span><span class=\"o\">-</span><span class=\"n\">build</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">exit</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">101</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">cargo</span>:<span class=\"nc\">rerun</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"n\">changed</span><span class=\"o\">=</span><span class=\"n\">ocaml</span><span class=\"o\">/</span><span class=\"n\">interpret</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">cargo</span>:<span class=\"nc\">rerun</span><span class=\"o\">-</span><span class=\"k\">if</span><span class=\"o\">-</span><span class=\"n\">changed</span><span class=\"o\">=</span><span class=\"n\">ocaml</span><span class=\"o\">/</span><span class=\"n\">Makefile</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">make</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">spec</span><span class=\"o\">/</span><span class=\"n\">interpreter</span><span class=\"w\"> </span><span class=\"n\">libopt</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">make</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"nc\">Entering</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"o\">'/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">fuzzing</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">spec</span><span class=\"o\">-</span><span class=\"n\">interpreter</span><span class=\"o\">/</span><span class=\"n\">ocaml</span><span class=\"o\">/</span><span class=\"n\">spec</span><span class=\"o\">/</span><span class=\"n\">interpreter</span><span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">ls</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">/</span><span class=\"n\">decode</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">/</span><span class=\"n\">decode</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">/</span><span class=\"n\">encode</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">/</span><span class=\"n\">encode</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">/</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">/</span><span class=\"n\">utf8</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">eval</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">eval</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">eval_numeric</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">eval_numeric</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"kt\">f32</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">f32_convert</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">f32_convert</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"kt\">f64</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">f64_convert</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">f64_convert</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">float</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">i32_convert</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">i32_convert</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">i64_convert</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">i64_convert</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">int</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"o\">/</span><span class=\"n\">numeric_error</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">env</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">spectest</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">/</span><span class=\"n\">flags</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"o\">/</span><span class=\"n\">table</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">import</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">import</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">js</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">js</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"o\">/</span><span class=\"n\">script</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">free</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">free</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">operators</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">values</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">arrange</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">arrange</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">lexer</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">lexer</span><span class=\"p\">.</span><span class=\"n\">mll</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">mly</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">print</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"o\">/</span><span class=\"n\">print</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">sexpr</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">sexpr</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"o\">/</span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"o\">/</span><span class=\"n\">valid</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"o\">/</span><span class=\"n\">valid</span><span class=\"p\">.</span><span class=\"n\">mli</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">sed</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">s</span>:<span class=\"err\">\\</span><span class=\"p\">(.</span><span class=\"o\">*/</span><span class=\"err\">\\</span><span class=\"p\">)</span><span class=\"err\">\\</span><span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"err\">\\</span><span class=\"p\">}</span><span class=\"err\">\\</span><span class=\"p\">(.</span><span class=\"o\">*</span><span class=\"err\">\\</span><span class=\"p\">)</span><span class=\"err\">\\</span><span class=\"p\">.[</span><span class=\"o\">^</span><span class=\"err\">\\</span><span class=\"p\">.]</span><span class=\"o\">*</span>:<span class=\"err\">\\</span><span class=\"mi\">2</span>:<span class=\"o\">'</span> <span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">grep</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">sort</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">uniq</span><span class=\"w\"> </span><span class=\"err\">\\</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:    <span class=\"o\">&gt;</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">mlpack</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">echo</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"n\">_tags</span><span class=\"w\"> </span><span class=\"s\">\"true: bin_annot\"</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">echo</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"n\">_tags</span><span class=\"w\"> </span><span class=\"s\">\"true: debug\"</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">echo</span><span class=\"w\"> </span><span class=\"o\">&gt;&gt;</span><span class=\"n\">_tags</span><span class=\"w\"> </span><span class=\"s\">\"&lt;{util,syntax,binary,text,valid,runtime,exec,script,host,main}/*.cmx&gt;: for-pack(Wasm)\"</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">ocamlbuild</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">lexflags</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">cflags</span><span class=\"w\"> </span><span class=\"o\">'-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"mi\">4</span><span class=\"o\">-</span><span class=\"mi\">27</span><span class=\"o\">-</span><span class=\"mi\">42</span><span class=\"o\">-</span><span class=\"mi\">44</span><span class=\"o\">-</span><span class=\"mi\">45</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">warn</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">a</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">text</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">runtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">exec</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">script</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">libs</span><span class=\"w\"> </span><span class=\"n\">bigarray</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">quiet</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">cmx</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">usr</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">ocamldep</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">syntax</span><span class=\"o\">/</span><span class=\"n\">ast</span><span class=\"p\">.</span><span class=\"n\">ml</span><span class=\"p\">.</span><span class=\"n\">depends</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"s\">\"syntax/ast.ml\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">156</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">characters</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"o\">-</span><span class=\"mi\">15</span>:\n<span class=\"nc\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">Error</span>: <span class=\"nc\">Syntax</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">Command</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">code</span><span class=\"w\"> </span><span class=\"mf\">2.</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">Makefile</span>:<span class=\"mi\">91</span>: <span class=\"nc\">recipe</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">_</span><span class=\"na\">build</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">cmx</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">rm</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">mlpack</span><span class=\"w\"> </span><span class=\"n\">_tags</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">make</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"nc\">Leaving</span><span class=\"w\"> </span><span class=\"n\">directory</span><span class=\"w\"> </span><span class=\"o\">'/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">fuzzing</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">spec</span><span class=\"o\">-</span><span class=\"n\">interpreter</span><span class=\"o\">/</span><span class=\"n\">ocaml</span><span class=\"o\">/</span><span class=\"n\">spec</span><span class=\"o\">/</span><span class=\"n\">interpreter</span><span class=\"o\">'</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">Makefile</span>:<span class=\"mi\">28</span>: <span class=\"nc\">recipe</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">spec</span><span class=\"o\">/</span><span class=\"n\">interpreter</span><span class=\"o\">/</span><span class=\"n\">_build</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">cmxa</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:\n<span class=\"nc\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">stderr</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">Cloning</span><span class=\"w\"> </span><span class=\"n\">into</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">ocaml</span><span class=\"o\">/</span><span class=\"n\">spec</span><span class=\"o\">'..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">make</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>: <span class=\"o\">***</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">_build</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">cmx</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">make</span>: <span class=\"o\">***</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">spec</span><span class=\"o\">/</span><span class=\"n\">interpreter</span><span class=\"o\">/</span><span class=\"n\">_build</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"p\">.</span><span class=\"n\">cmxa</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">main</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">OCaml</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"w\"> </span><span class=\"n\">using</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">make</span><span class=\"sc\">'.'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">fuzzing</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">spec</span><span class=\"o\">-</span><span class=\"n\">interpreter</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">57</span>:<span class=\"mi\">5</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">note</span>: <span class=\"nc\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">RUST_BACKTRACE</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">display</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">backtrace</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">warning</span>: <span class=\"nc\">build</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">waiting</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">other</span><span class=\"w\"> </span><span class=\"n\">jobs</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">finish</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">error</span>: <span class=\"nc\">build</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"n\">fuzz</span><span class=\"w\"> </span><span class=\"n\">script</span>: <span class=\"s\">\"cargo\"</span><span class=\"w\"> </span><span class=\"s\">\"build\"</span><span class=\"w\"> </span><span class=\"s\">\"--manifest-path\"</span><span class=\"w\"> </span><span class=\"s\">\"/src/wasmtime/fuzz/Cargo.toml\"</span><span class=\"w\"> </span><span class=\"s\">\"--target\"</span><span class=\"w\"> </span><span class=\"s\">\"x86_64-unknown-linux-gnu\"</span><span class=\"w\"> </span><span class=\"s\">\"--release\"</span><span class=\"w\"> </span><span class=\"s\">\"--features\"</span><span class=\"w\"> </span><span class=\"s\">\"peepmatic-fuzzing experimental_x64\"</span><span class=\"w\"> </span><span class=\"s\">\"--bins\"</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"o\">********************************************************************************</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">Failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">To</span><span class=\"w\"> </span><span class=\"n\">reproduce</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span>:\n<span class=\"nc\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">python</span><span class=\"w\"> </span><span class=\"n\">infra</span><span class=\"o\">/</span><span class=\"n\">helper</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"n\">build_image</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"nc\">python</span><span class=\"w\"> </span><span class=\"n\">infra</span><span class=\"o\">/</span><span class=\"n\">helper</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"n\">build_fuzzers</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">sanitizer</span><span class=\"w\"> </span><span class=\"n\">address</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"n\">libfuzzer</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">architecture</span><span class=\"w\"> </span><span class=\"n\">x86_64</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"></span>\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>: <span class=\"o\">********************************************************************************</span><span class=\"w\"></span>\n<span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span><span class=\"w\"></span>\n<span class=\"n\">ERROR</span><span class=\"w\"></span>\n<span class=\"n\">ERROR</span>: <span class=\"nc\">build</span><span class=\"w\"> </span><span class=\"n\">step</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"s\">\"gcr.io/oss-fuzz/wasmtime\"</span><span class=\"w\"> </span><span class=\"n\">failed</span>: <span class=\"nc\">step</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">zero</span><span class=\"w\"> </span><span class=\"n\">status</span>: <span class=\"mi\">1</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249131591,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628698901
    },
    {
        "content": "<p>is that an issue perhaps where ocaml is too old?</p>",
        "id": 249131622,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628698914
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"s\">\"syntax/ast.ml\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">156</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">characters</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"o\">-</span><span class=\"mi\">15</span>:\n<span class=\"nc\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">4</span>:   <span class=\"nc\">Error</span>: <span class=\"nc\">Syntax</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249131691,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628698926
    },
    {
        "content": "<p>oh wow it looks super old, like 4.02 may be pulled in?</p>",
        "id": 249131808,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628698979
    },
    {
        "content": "<p>yeah, when I ran the oss fuzz image in docker I saw that 4.02 was pulled in</p>",
        "id": 249131834,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628698985
    },
    {
        "content": "<p>yup</p>",
        "id": 249131837,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628698987
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">ocaml</span><span class=\"o\">-</span><span class=\"n\">findlib</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">1.5.5</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"n\">build1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">ocaml</span><span class=\"o\">-</span><span class=\"n\">compiler</span><span class=\"o\">-</span><span class=\"n\">libs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">4.02.3</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"n\">ubuntu2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">ocaml</span><span class=\"o\">-</span><span class=\"n\">interp</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">4.02.3</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"n\">ubuntu2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">Step</span><span class=\"w\"> </span>#<span class=\"mi\">1</span>: <span class=\"nc\">Setting</span><span class=\"w\"> </span><span class=\"n\">up</span><span class=\"w\"> </span><span class=\"n\">ocaml</span><span class=\"o\">-</span><span class=\"n\">nox</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mf\">4.02.3</span><span class=\"o\">-</span><span class=\"mi\">5</span><span class=\"n\">ubuntu2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 249131840,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628698989
    },
    {
        "content": "<p>and I thought, \"hm, this might be a problem...\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 249131883,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628699007
    },
    {
        "content": "<p>well, I wonder if there is a way to use opam to upgrade ocaml or something</p>",
        "id": 249131929,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628699028
    },
    {
        "content": "<p>the issue is that they're using a really old Ubuntu as the base for the oss-fuzz image</p>",
        "id": 249132016,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628699053
    },
    {
        "content": "<p>16.x</p>",
        "id": 249132026,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628699057
    },
    {
        "content": "<p>is there a newer oss fuzz image?</p>",
        "id": 249132062,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628699073
    },
    {
        "content": "<p>Looks like there is no newer oss fuzz image, but I think the following sequence will update the tools to 4.12:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sh</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"n\">curl</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">sL</span><span class=\"w\"> </span><span class=\"n\">https</span>:<span class=\"c1\">//raw.githubusercontent.com/ocaml/opam/master/shell/install.sh)</span>\n<span class=\"n\">opam</span><span class=\"w\"> </span><span class=\"n\">init</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">sandboxing</span><span class=\"w\"></span>\n<span class=\"n\">opam</span><span class=\"w\"> </span><span class=\"n\">install</span><span class=\"w\"> </span><span class=\"n\">ocamlbuild</span><span class=\"w\"></span>\n<span class=\"n\">eval</span><span class=\"w\"> </span><span class=\"cp\">$(</span><span class=\"n\">opam</span><span class=\"w\"> </span><span class=\"n\">env</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">switch</span><span class=\"o\">=</span><span class=\"n\">default</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Inside the oss fuzz image that is enough to compile the spec interpreter.</p>",
        "id": 249136127,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628701021
    },
    {
        "content": "<p>Unfortunately that has multiple \"read from stdin\" scripts</p>",
        "id": 249136795,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628701285
    },
    {
        "content": "<p>eh that's fine imo</p>",
        "id": 249138710,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628702131
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> I would need to figure out how to pass in the right sequence of <code>&lt;enter&gt; y &lt;enter&gt; ...</code>--do you have a preference on how to do that?</p>",
        "id": 249139139,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628702309
    },
    {
        "content": "<p>uh... unsure lol</p>",
        "id": 249140075,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628702719
    },
    {
        "content": "<p>when in doubt sometimes <code>yes | the_script</code> works</p>",
        "id": 249140098,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628702724
    },
    {
        "content": "<p>but if that doesn't work I'd root around for some sort of \"please assume yes\" cli switch</p>",
        "id": 249140120,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628702736
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, I see that <a href=\"https://github.com/google/oss-fuzz/pull/6205\">https://github.com/google/oss-fuzz/pull/6205</a> got merged; how do we see if the build now passes? Do we have to wait for an e-mail telling us it crashed or is there some other way to inspect what is going on?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/pull/6205\" style=\"background-image: url(https://opengraph.githubassets.com/b6273f8699ac3f0442559b6b0316a5ba5d813d89e29cdf80716f487a584aeb7c/google/oss-fuzz/pull/6205)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/pull/6205\" title=\"wasmtime: install a newer version of OCaml by abrown · Pull Request #6205 · google/oss-fuzz\">wasmtime: install a newer version of OCaml by abrown · Pull Request #6205 · google/oss-fuzz</a></div><div class=\"message_embed_description\">\nHave a question about this project? Sign up for a free GitHub account to open an issue and contact its maintainers and the community.\n  </div></div></div>",
        "id": 249252155,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628783037
    },
    {
        "content": "<p>I got an email about another build failure, but I think it's because the changes weren't included</p>",
        "id": 249252232,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628783068
    },
    {
        "content": "<p>I go to oss-fuzz and hit on build logs</p>",
        "id": 249252247,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628783076
    },
    {
        "content": "<p>and it should have logs for wasmtime</p>",
        "id": 249252252,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628783079
    },
    {
        "content": "<p>I don't see that:<br>\n<a href=\"/user_uploads/15107/C7-ANmdq4GLpIv6zTb70Mw59/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/C7-ANmdq4GLpIv6zTb70Mw59/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/C7-ANmdq4GLpIv6zTb70Mw59/image.png\"></a></div>",
        "id": 249253589,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628783752
    },
    {
        "content": "<p>or you meant build status?</p>",
        "id": 249253667,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628783778
    },
    {
        "content": "<p>Ok, yeah, if I navigate around in there I can see the logs for the latest build and it is still complaining about a syntax error</p>",
        "id": 249253796,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628783861
    },
    {
        "content": "<p>ok</p>",
        "id": 250056781,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629411822
    },
    {
        "content": "<p>er, sent early. </p>\n<p>I did a bit today looking into the spec interpreter timeouts, and my conclusion is that the whole thing is and probably won't ever be written for performance. I fear that our path to differential fuzzing with the spec interpreter is going to be severly limited given the nature of the spec interpreter.</p>\n<p>I was curious, so I played around with Deno's <code>rusty_v8</code> crate to see how bad it would be to set up differential fuzzing against v8 instead of the spec interpreter. I <a href=\"https://github.com/alexcrichton/differential-wasmtime-v8/blob/main/src/main.rs\">came up with this</a> and it seems to be working pretty well. When I enabled simd it pretty quickly found <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\">https://github.com/bytecodealliance/wasmtime/issues/3216</a> after I waded through the preexisting fuzz bugs. With the bindings I wrote so far we should have comparisions on instantiation results, comparison on values, and comparisons on memory, which I think is above-and-beyond what we do for both wasmi and the spec interpreter at the moment.</p>\n<p>I'm curious how others feel about this. Should we switch from the spec interpreter to v8? Should we try to push on the spec interpreter? I think v8 has the benefit that it's (a) maintained by Deno with <code>rusty_v8</code>, so we get that for free and (b) it's a fuzzed engine we're unlikely to find bugs in (performance or otherwise). Personally I feel that we'll get 99% of the benefit of differential fuzzing by just fuzzing against something other than ourselves. While I think it's nice to fuzz against the spec interpreter I don't think it brings the lion's share of the benefit.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/differential-wasmtime-v8/blob/main/src/main.rs\" style=\"background-image: url(https://opengraph.githubassets.com/34f9a8bfc706d9aa7b9a5993d1b1096b07dfcbccbab41bdeba13e7d2acec7859/alexcrichton/differential-wasmtime-v8)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/differential-wasmtime-v8/blob/main/src/main.rs\" title=\"differential-wasmtime-v8/main.rs at main · alexcrichton/differential-wasmtime-v8\">differential-wasmtime-v8/main.rs at main · alexcrichton/differential-wasmtime-v8</a></div><div class=\"message_embed_description\">Contribute to alexcrichton/differential-wasmtime-v8 development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\" style=\"background-image: url(https://opengraph.githubassets.com/e57d75cbd2e6da8f1ebb8205eefeae0e3c300cea40c2d0c5f920d8811cf91dcb/bytecodealliance/wasmtime/issues/3216)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3216\" title=\"x64 simd: Incorrect codegen leads to wrong result · Issue #3216 · bytecodealliance/wasmtime\">x64 simd: Incorrect codegen leads to wrong result · Issue #3216 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Found with some fuzzing, this module: (module (func (result i64) v128.const i64x2 -1 1 global.get 0 f64x2.replace_lane 0 i64x2.extract_lane 1 ) (global f64 (f64.const 1)) (export &quot;&quot; (func...</div></div></div>",
        "id": 250057169,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412102
    },
    {
        "content": "<p>Interesting -- thank you for digging into this, first of all!</p>\n<p>I think there is definitely a lot of value in fuzzing against \"peers\" -- especially V8 I expect to be very, very closely checked w.r.t. the spec. I'll note that we already had fuzzing against <code>wasmi</code> as well, so if we're going to mainly focus on this sort of fuzzing, it's worth evaluating whether we want to keep the latter. (Probably not, since it doesn't do SIMD, for starters.)</p>\n<p>I am curious if there are any really easy-to-pick bits of performance in the spec interpreter, though. While (i) we aren't in the business of maintaining it, and (ii) it will certainly want to optimize for clear, unambiguous implementation over any sort of optimization, it seems to me that the folks who do maintain it would be interested in fixing obvious quadratic behavior, and also, fuzzing against \"The Spec\" is a gold standard and a nice thing to be able to say we do, if we can</p>",
        "id": 250057514,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412365
    },
    {
        "content": "<p>I did look a wee bit at what the nested-blocks example was doing and it looked like it had a funky multistage eval step function that prepended <code>Plain</code> and did some stack munging on every level -- it felt like it might be home to some inefficient n^2 list-mapping but I didn't dig deep enough to really say. Is that the part you were looking at?</p>",
        "id": 250057572,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412441
    },
    {
        "content": "<p>yeah that was the same conclusion I reached on the spec interpreter, adding <code>Plain</code> to new lists in a way that was probably pretty inefficient in terms of list management</p>",
        "id": 250057710,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412561
    },
    {
        "content": "<p>Personally I don't want to open a bug on the spec repo, I fear it will get lost to the mists of time or otherwise no one will be able to think of a better way that's \"clean enough\" for the spec interpreter to use</p>",
        "id": 250057764,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412595
    },
    {
        "content": "<p>I do agree though that we don't really need to do differential-execution against multiple implementations, just one should suffice. If the spec interpreter gets further I think we should remove wasmi, and if v8 gets further we should also remove wasmi</p>",
        "id": 250057784,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412645
    },
    {
        "content": "<p>fair concern, I too am vaguely scared of crossing a \"PL purist\" viewpoint that dismisses this if we try to file an issue without a suggested solution; it might be worth playing a bit more with it (by which I mean, I feel like I might do this, in a bit of free time later) though to see if we can offer a constructive suggestion at the same time</p>",
        "id": 250057862,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412723
    },
    {
        "content": "<p>I did find it quite easy to reproduce with the interpreter, the input wasm I have in the issue can be changed to just have a <code>start</code> function and the instantiation clearly takes multiple seconds, and it gets worse by adding more blocks.</p>",
        "id": 250057973,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412822
    },
    {
        "content": "<p>jumping ahead a few steps -- in the situation where we get <em>both</em> the spec interpreter to work, and also have your V8 differential fuzzing harness polished and merged -- the question would be: does it make sense to have both? I would argue yes; it's interesting to see if there are disagreements between the spec and the \"real world\", at least</p>",
        "id": 250058011,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412859
    },
    {
        "content": "<p>cool, I will put a bit of time into this later then</p>",
        "id": 250058028,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412868
    },
    {
        "content": "<p>nah if the spec interpreter works I don't think v8 is worth it</p>",
        "id": 250058040,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412884
    },
    {
        "content": "<p>it's a pretty chonky thing to maintain, even if <code>rusty_v8</code> does the worst parts for us</p>",
        "id": 250058059,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412898
    },
    {
        "content": "<p>eh, that's fair, if the complexity/cost is too high</p>",
        "id": 250058076,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412912
    },
    {
        "content": "<p>like I won't disagree it's strictly better to have more fuzzing, but for bang-for-our-buck I'm not sure how much we'd get</p>",
        "id": 250058131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629412925
    },
    {
        "content": "<p>I'm actually sort of curious how oss-fuzz budgets CPU time if we add more fuzz targets; do we get a fixed quota per target or per project? in any case if we don't need it badly enough then it's not really good citizenship to burn the cycles <em>shrug</em></p>",
        "id": 250058191,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629412984
    },
    {
        "content": "<p>heh for that I have no idea...</p>",
        "id": 250058220,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629413039
    },
    {
        "content": "<p>FWIW my take on the spec interpreter is that I think the slowdown is <a href=\"https://github.com/WebAssembly/spec/blob/ed0f0194b50bafd79bafa6156de7dfaa9572d3f6/interpreter/exec/eval.ml#L165\">this line</a> b/c all the other lists/maps in the <code>Block</code> case are constant-time, but I could be wrong and it could be related to <code>Label</code> handling later. Unless the ocaml interpreter does crazy optimizations though <code>List32.length</code> and such functions were also O(n) which was about the time I lost hope for making that fast</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/blob/ed0f0194b50bafd79bafa6156de7dfaa9572d3f6/interpreter/exec/eval.ml#L165\" style=\"background-image: url(https://opengraph.githubassets.com/337564cbbc50f6f9c78a946732cb18b9f04fdbcf3a791124e5dbd729f0d551c7/WebAssembly/spec)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/blob/ed0f0194b50bafd79bafa6156de7dfaa9572d3f6/interpreter/exec/eval.ml#L165\" title=\"spec/eval.ml at ed0f0194b50bafd79bafa6156de7dfaa9572d3f6 · WebAssembly/spec\">spec/eval.ml at ed0f0194b50bafd79bafa6156de7dfaa9572d3f6 · WebAssembly/spec</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - spec/eval.ml at ed0f0194b50bafd79bafa6156de7dfaa9572d3f6 · WebAssembly/spec</div></div></div>",
        "id": 250058299,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1629413087
    },
    {
        "content": "<p>yup I was staring at that exact bit too</p>",
        "id": 250058333,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629413132
    },
    {
        "content": "<p>OK, so here's my understanding of the quadratic behavior: the evaluator step function is designed to step the \"configuration\" (stack of values, and a list of possibly nested terms that represent remaining instructions) exactly one step, no matter how deep the label stack is. The way that a <code>step</code> works when there are many nested labels on the stack is that we recurse down to the innermost label's instruction list, step its configuration once, then walk back out, rebuilding the nest of <code>Label</code>terms up to the root of the function's configuration.</p>\n<p>So we start with a config like:</p>\n<ul>\n<li><code>Block (Block (Block (Block (Block ... (code)))))</code></li>\n</ul>\n<p>and this steps to</p>\n<ul>\n<li>\n<p><code>Label l1 (Plain Block (Block ...))</code><br>\nthen</p>\n</li>\n<li>\n<p><code>Label l1(Label l2 (Plain Block ...))</code></p>\n</li>\n</ul>\n<p>and so on.</p>\n<p>However each of the steps must go through 1..n recursive <code>step</code> calls, so we have a total of O(n^2) Ocaml calls and executions of <a href=\"https://github.com/WebAssembly/spec/blob/ed0f0194b50bafd79bafa6156de7dfaa9572d3f6/interpreter/exec/eval.ml#L500-L501\">this</a> bit of code.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/blob/ed0f0194b50bafd79bafa6156de7dfaa9572d3f6/interpreter/exec/eval.ml#L500-L501\" style=\"background-image: url(https://opengraph.githubassets.com/337564cbbc50f6f9c78a946732cb18b9f04fdbcf3a791124e5dbd729f0d551c7/WebAssembly/spec)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/blob/ed0f0194b50bafd79bafa6156de7dfaa9572d3f6/interpreter/exec/eval.ml#L500-L501\" title=\"spec/eval.ml at ed0f0194b50bafd79bafa6156de7dfaa9572d3f6 · WebAssembly/spec\">spec/eval.ml at ed0f0194b50bafd79bafa6156de7dfaa9572d3f6 · WebAssembly/spec</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - spec/eval.ml at ed0f0194b50bafd79bafa6156de7dfaa9572d3f6 · WebAssembly/spec</div></div></div>",
        "id": 250061821,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629416198
    },
    {
        "content": "<p>This is made worse by the handling of the call stack -- it's just a part of the \"configuration\" as well, so we'll have <code>Label (Label (Label ... (Frame (Label (Label (Label ... ))))))</code> with <code>1000</code> frames in the 1000-deep-recursion-in-nested-blocks timeout example</p>",
        "id": 250061859,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629416251
    },
    {
        "content": "<p>the fundamental bit that's expensive is the way that the step walks all the way back out the tree of terms and rebuilds it for each inner step; if the inner step did a step to <em>completion</em> then it would be efficient; but I suspect that would break an \"execute for exactly one unit of time so as not to run forever\" sort of fuel-limiting mechanism</p>",
        "id": 250061950,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629416311
    },
    {
        "content": "<p>fixing this <em>might</em> not be so bad if we don't care about that; but I'd want to spend a bit more time understanding it first</p>",
        "id": 250061973,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629416347
    },
    {
        "content": "<p>(fwiw, <code>perf</code> on the interpreter binary showed ~15% of time in just that one line lined above; and ~50% of time in GC-related code, because of the reallocation on each rebuild of the config)</p>",
        "id": 250062066,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629416429
    },
    {
        "content": "<p>(I'll summarize this on the github issue for the timeout)</p>",
        "id": 250062139,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629416515
    },
    {
        "content": "<p>... and I went and did the thing: <a href=\"https://github.com/cfallin/spec/commit/817f8e84f2fa289723e724553e74d6ce13898ec8\">https://github.com/cfallin/spec/commit/817f8e84f2fa289723e724553e74d6ce13898ec8</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cfallin/spec/commit/817f8e84f2fa289723e724553e74d6ce13898ec8\" style=\"background-image: url(https://opengraph.githubassets.com/0e8dd2cf72e0280f236dd75b5f3fceb398c4416eca39ad81bbf80afbf3cc845a/cfallin/spec/commit/817f8e84f2fa289723e724553e74d6ce13898ec8)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cfallin/spec/commit/817f8e84f2fa289723e724553e74d6ce13898ec8\" title=\"Fix quadratic behavior in reference interpreter. · cfallin/spec@817f8e8\">Fix quadratic behavior in reference interpreter. · cfallin/spec@817f8e8</a></div><div class=\"message_embed_description\">The reference interpreter defines a `step` function on the program\nconfiguration. This configuration embeds the current Wasm callstack and\nblock (label) stack, representing the state of execution w...</div></div></div>",
        "id": 250066358,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629420910
    },
    {
        "content": "<p>Just catching up on this thread: wow! nice analysis and good fix. What are you thinking between merging upstream vs merging into <a href=\"https://github.com/bytecodealliance/wasm-spec-mirror\">https://github.com/bytecodealliance/wasm-spec-mirror</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-spec-mirror\" style=\"background-image: url(https://opengraph.githubassets.com/37386ae57d36232f12fd73b3956bae0675d8d6aff59ca64a8cfb4aeaecc0bfd6/bytecodealliance/wasm-spec-mirror)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-spec-mirror\" title=\"GitHub - bytecodealliance/wasm-spec-mirror: Mirror of https://github.com/WebAssembly/spec for fuzzing\">GitHub - bytecodealliance/wasm-spec-mirror: Mirror of https://github.com/WebAssembly/spec for fuzzing</a></div><div class=\"message_embed_description\">Mirror of https://github.com/WebAssembly/spec for fuzzing - GitHub - bytecodealliance/wasm-spec-mirror: Mirror of https://github.com/WebAssembly/spec for fuzzing</div></div></div>",
        "id": 250140108,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629476612
    },
    {
        "content": "<p>So I'm cleaning it up a bit and I'll go ahead and create a PR on <code>spec</code> and see what happens -- at worst it will spawn discussion and help to clarify \"very simple theoretically correct interpreter\" vs. \"actually usable interpreter without quadratic behavior\" as a position taken by the folks who maintain it :-)</p>",
        "id": 250141482,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629477273
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/spec/pull/1354\">https://github.com/WebAssembly/spec/pull/1354</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/pull/1354\" style=\"background-image: url(https://opengraph.githubassets.com/bb3b5dbbeef33ed418f3900fb6f91e30c07f3073eeacf744bcddefb2534326e0/WebAssembly/spec/pull/1354)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/pull/1354\" title=\"[interpreter] Fix quadratic behavior when stepping in deeply-nested scopes. by cfallin · Pull Request #1354 · WebAssembly/spec\">[interpreter] Fix quadratic behavior when stepping in deeply-nested scopes. by cfallin · Pull Request #1354 · WebAssembly/spec</a></div><div class=\"message_embed_description\">Hi, spec-interpreter maintainers! We&#39;ve found some quadratic\nbehavior in the spec interpreter -- and I&#39;m curious how palatable\nthis fix will be. Happy to discuss any alternative approaches ...</div></div></div>",
        "id": 250142034,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629477573
    },
    {
        "content": "<p>Indeed, great work on figuring this out and fixing it!</p>\n<p>My take is that it's fine for the spec interpreter to be written for readability and maintainability over speed—but not for it to execute code in a way that has a different algorithmic complexity class from what production implementations would be expected to have. ISTM that otherwise it just says next to nothing about implementability of proposals, which seems highly unfortunate. Not sure if that'll be the common view, of course</p>",
        "id": 250142972,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1629478103
    },
    {
        "content": "<p>Hmm, it seems I don't have push access to <code>wasm-spec-mirror</code>, and the GitHub UI is not letting me create a PR on it when I also have an open one on WebAssembly/spec (unless I'm missing a nonobvious button somewhere)</p>",
        "id": 250143223,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629478248
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span> or <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> could you grant me permissions and I'll just push a branch for now?</p>",
        "id": 250143259,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629478264
    },
    {
        "content": "<p>... ah, nevermind, I had the wrong base branch selected</p>",
        "id": 250143319,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629478298
    },
    {
        "content": "<p>I just added wasmtime-core and cranelift-core as repo maintainers</p>",
        "id": 250143441,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1629478349
    },
    {
        "content": "<p>there we go, PR onto <code>fuzzing</code> branch: <a href=\"https://github.com/bytecodealliance/wasm-spec-mirror/pull/1\">https://github.com/bytecodealliance/wasm-spec-mirror/pull/1</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-spec-mirror/pull/1\" style=\"background-image: url(https://opengraph.githubassets.com/17864e48d9f1c11a89b4a9f014c1fd00c3b650da5790e0ebe62e44ac330253b0/bytecodealliance/wasm-spec-mirror/pull/1)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-spec-mirror/pull/1\" title=\"Fix quadratic behavior in reference interpreter. by cfallin · Pull Request #1 · bytecodealliance/wasm-spec-mirror\">Fix quadratic behavior in reference interpreter. by cfallin · Pull Request #1 · bytecodealliance/wasm-spec-mirror</a></div><div class=\"message_embed_description\">This is a merge into our mirror's main branch while we have a pending PR open on the upstream.</div></div></div>",
        "id": 250143609,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629478441
    },
    {
        "content": "<p>Ok, merged... let me create a PR to make sure we pull that branch when fuzzing: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3221\">https://github.com/bytecodealliance/wasmtime/pull/3221</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3221\" style=\"background-image: url(https://opengraph.githubassets.com/b27c226036e388b8c8fdab88be3f49860a9a96609b071029f2aaf23c3c63f211/bytecodealliance/wasmtime/pull/3221)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3221\" title=\"fuzz: use 'fuzzing' branch of Wasm spec mirror by abrown · Pull Request #3221 · bytecodealliance/wasmtime\">fuzz: use 'fuzzing' branch of Wasm spec mirror by abrown · Pull Request #3221 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">With this fix to the WebAssembly spec interpreter, the wasm-spec-interpreter crate needs to retrieve itself from the 'fuzzing' branch.</div></div></div>",
        "id": 250145458,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629479370
    },
    {
        "content": "<p>Oh, I just did that too, sorry for racing!</p>",
        "id": 250145498,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629479400
    },
    {
        "content": "<p>heh, I should have checked <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 250145575,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629479421
    },
    {
        "content": "<p>lol, well take your pick</p>",
        "id": 250145606,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629479441
    },
    {
        "content": "<p>(I was going to ask you if you were going to do it and then though, \"oh, I can just push that real quick\")</p>",
        "id": 250145668,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629479473
    },
    {
        "content": "<p>let's use yours since it creates a constant up top</p>",
        "id": 250145717,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629479505
    },
    {
        "content": "<p>sure, either way :-)</p>",
        "id": 250145745,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629479519
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> fyi, it's looking like it probably will not be very feasible to remove the quadratic behavior from the spec interpreter: <a href=\"https://github.com/WebAssembly/spec/pull/1354\">https://github.com/WebAssembly/spec/pull/1354</a> (basically we got an \"interpreter should be direct translation of small-step semantics\" answer)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec/pull/1354\" style=\"background-image: url(https://opengraph.githubassets.com/cc33ee4ad1971e9a72abd906046a861f49810e99d7e882b4b7565b9cb72e08f7/WebAssembly/spec/pull/1354)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec/pull/1354\" title=\"[interpreter] Fix quadratic behavior when stepping in deeply-nested scopes. by cfallin · Pull Request #1354 · WebAssembly/spec\">[interpreter] Fix quadratic behavior when stepping in deeply-nested scopes. by cfallin · Pull Request #1354 · WebAssembly/spec</a></div><div class=\"message_embed_description\">Hi, spec-interpreter maintainers! We&#39;ve found some quadratic\nbehavior in the spec interpreter -- and I&#39;m curious how palatable\nthis fix will be. Happy to discuss any alternative approaches ...</div></div></div>",
        "id": 250792723,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992490
    },
    {
        "content": "<p>I had an alternate thought though: we could still potentially use it for <em>individual instruction</em> semantics (for especially SIMD this seems valuable). Would it make sense to tweak wasm-smith to generate very simple programs (e.g. no control flow) and use the infra for that?</p>",
        "id": 250792875,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992537
    },
    {
        "content": "<p>hm, yeah</p>",
        "id": 250792876,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629992538
    },
    {
        "content": "<p>not a bad idea</p>",
        "id": 250792911,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629992553
    },
    {
        "content": "<p>that's sort of a separate use-case than fuzzing against a fast interpreter, sort of a breadth vs. depth thing (by running larger programs we get less coverage of e.g. different bit patterns in inputs)</p>",
        "id": 250792963,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992575
    },
    {
        "content": "<p>an extension on that would be to configure wasm-smith to avoid generating cases that cause the quadratic slowdown</p>",
        "id": 250793006,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629992590
    },
    {
        "content": "<p>what a pain this turned out to be <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 250793062,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629992618
    },
    {
        "content": "<p>\"just fuzz against the spec\" they said, \"how hard could it be\" they said...</p>",
        "id": 250793175,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992654
    },
    {
        "content": "<p>I <em>think</em> no cnotrol flow (including no calls) is enough to ensure no quadratic behavior</p>",
        "id": 250793232,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992674
    },
    {
        "content": "<p>that's probably pretty easy to add to the configuration trait; any interest on your part in trying this? (I can throw it on my long-term todo list otherwise but my todo list is also growing quadratically)</p>",
        "id": 250793356,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992726
    },
    {
        "content": "<p>well, I was thinking about taking a look at the v128 stuff before I go on sabbatical here in a few weeks, I could look at it when I do that</p>",
        "id": 250793596,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1629992801
    },
    {
        "content": "<p>awesome!</p>",
        "id": 250793739,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1629992860
    },
    {
        "content": "<p>To close the loop on this -- I created <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3251\">https://github.com/bytecodealliance/wasmtime/issues/3251</a> to track it</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3251\" style=\"background-image: url(https://opengraph.githubassets.com/cc8f8b23674798f0ae49a4c1288b58e3a68b5ab009bfeb391cb2fa8a3118d568/bytecodealliance/wasmtime/issues/3251)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3251\" title=\"Spec-interpreter fuzzing: modify to generate and test single-instruction or no-control-flow cases · Issue #3251 · bytecodealliance/wasmtime\">Spec-interpreter fuzzing: modify to generate and test single-instruction or no-control-flow cases · Issue #3251 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In #3186 we found that the WebAssembly spec interpreter may not be suitable for high-throughput fuzzing because of certain performance characteristics. While we were able to locally patch one sourc...</div></div></div>",
        "id": 250814568,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1630001049
    }
]