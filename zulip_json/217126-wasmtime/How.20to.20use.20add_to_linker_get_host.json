[
    {
        "content": "<p>Are there any examples floating around of how to use the new (as of 21) <a href=\"https://docs.rs/wasmtime-wasi-http/21.0.1/wasmtime_wasi_http/bindings/wasi/http/incoming_handler/fn.add_to_linker_get_host.html\"><code>add_to_linker_get_host</code> functions</a> in <code>wasmtime-wasi-http</code>?</p>\n<p>I can't quite seem to figure out what to actually provide for the <code>host_getter</code>.</p>",
        "id": 445261327,
        "sender_full_name": "Landon James",
        "timestamp": 1718679608
    },
    {
        "content": "<p>Most consumers are expected to use a higher level <a href=\"https://docs.rs/wasmtime-wasi-http/21.0.1/wasmtime_wasi_http/proxy/fn.add_to_linker.html\"><code>add_to_linker</code></a>. If you do need more control over linking, take a look at <a href=\"https://docs.rs/wasmtime-wasi-http/21.0.1/src/wasmtime_wasi_http/proxy.rs.html#82-98\">how <code>add_to_linker</code> works</a>. There is some weird indirection here because we're trying to enable different data access patterns and we've run into limitations in Rust's type system around closures and lifetimes.</p>",
        "id": 445359776,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718717997
    },
    {
        "content": "<p>Note that this is changing again slightly in Wasmtime 22, though again you'll just be able to look at how <code>add_to_linker</code> works to adapt.</p>",
        "id": 445360126,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718718084
    },
    {
        "content": "<p>It seems like the interfaces I need (types and outgoing-handler) no longer provide the basic add_to_linker and only have the _get_host version now unless I am missing something? <a href=\"https://docs.rs/wasmtime-wasi-http/21.0.1/wasmtime_wasi_http/?search=Add_to_linker\">https://docs.rs/wasmtime-wasi-http/21.0.1/wasmtime_wasi_http/?search=Add_to_linker</a></p>",
        "id": 445361346,
        "sender_full_name": "Landon James",
        "timestamp": 1718718426
    },
    {
        "content": "<p>Oh I see; you aren't implementing \"proxy\", just outbound http</p>",
        "id": 445362081,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718718601
    },
    {
        "content": "<p>There actually <em>is</em> a variant for that but it is hidden at the moment. Maybe we could expose that.</p>",
        "id": 445362732,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718718750
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8832\">https://github.com/bytecodealliance/wasmtime/issues/8832</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/8832\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c0ff76c3e10f0e18e58f0557f97d639589497944/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373237356332396132633437613463646332396139623039333461343831323335323335373531333130623932656132643839666633653535663133343534352f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f38383332&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/8832\" title=\"wasi-http: Consider unhiding `add_only_http_to_linker` functions · Issue #8832 · bytecodealliance/wasmtime\">wasi-http: Consider unhiding `add_only_http_to_linker` functions · Issue #8832 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">These functions allow linking just the types and outbound-handler interfaces without the rest of the proxy world. I'm not sure why they are currently hidden; this seems like a generally useful feat...</div></div></div>",
        "id": 445363678,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718718996
    },
    {
        "content": "<p>Correcr, this is only outgoing http for a WASI compliant http client for the AWS Rust SDK. I’m just bumping our canary to use the latest wasmtime now that all the preview 2 days hints have settled. I think I can probably just add proxy to linker, although it is overkill for my needs.</p>",
        "id": 445365683,
        "sender_full_name": "Landon James",
        "timestamp": 1718719494
    },
    {
        "content": "<p>Would appreciate the greater granularity for linking the http interfaces, especially if I was going to use this in a plugin sort of context where I might want to limit the interfaces provided to run untrusted code</p>",
        "id": 445365915,
        "sender_full_name": "Landon James",
        "timestamp": 1718719559
    },
    {
        "content": "<p>You certainly can use <code>add_to_linker_get_host</code>, its just that we are intending/hoping it is can just be a \"power user\" feature so you can expect more boilerplate and less friendliness <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 445375870,
        "sender_full_name": "Lann Martin",
        "timestamp": 1718721635
    },
    {
        "content": "<p>Ahh now I'm remembering a bit more about why I split these linker bits up originally. Using both:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmtime_wasi::add_to_linker_async<span class=\"o\">(</span><span class=\"p\">&amp;</span>mut<span class=\"w\"> </span>linker<span class=\"o\">)</span>?<span class=\"p\">;</span>\nwasmtime_wasi_http::proxy::add_to_linker<span class=\"o\">(</span><span class=\"p\">&amp;</span>mut<span class=\"w\"> </span>linker<span class=\"o\">)</span>?<span class=\"p\">;</span>\n</code></pre></div>\n<p>Results in this error:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">2024</span>-06-18T16:33:11.682943Z<span class=\"w\"> </span>ERROR<span class=\"w\"> </span>wasm<span class=\"w\"> </span>failed:\nimport<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"sb\">`</span>wasi:clocks/wall-clock@0.2.0<span class=\"sb\">`</span><span class=\"w\"> </span>defined<span class=\"w\"> </span>twice\n</code></pre></div>\n<p>But trying to link in only the <code>proxy</code> world throws:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"m\">2024</span>-06-18T17:02:25.872804Z<span class=\"w\"> </span>ERROR<span class=\"w\"> </span>wasm<span class=\"w\"> </span>failed:\ncomponent<span class=\"w\"> </span>imports<span class=\"w\"> </span>instance<span class=\"w\"> </span><span class=\"sb\">`</span>wasi:cli/environment@0.2.0<span class=\"sb\">`</span>,<span class=\"w\"> </span>but<span class=\"w\"> </span>a<span class=\"w\"> </span>matching<span class=\"w\"> </span>implementation<span class=\"w\"> </span>was<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>the<span class=\"w\"> </span>linker\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>instance<span class=\"w\"> </span><span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"sb\">`</span>get-environment<span class=\"sb\">`</span><span class=\"w\"> </span>has<span class=\"w\"> </span>the<span class=\"w\"> </span>wrong<span class=\"w\"> </span><span class=\"nb\">type</span>\n<span class=\"w\">    </span><span class=\"m\">1</span>:<span class=\"w\"> </span><span class=\"k\">function</span><span class=\"w\"> </span>implementation<span class=\"w\"> </span>is<span class=\"w\"> </span>missing\n</code></pre></div>\n<p>Its been a few months, but I think the reason I was linking every interface in individually is that I kept hitting errors similar to <code>import of 'wasi:clocks/wall-clock@0.2.0' defined twice</code> when trying to use the higher level aggregate linker functions from both the <code>wasmtime-wasi</code> and <code>wasmtime-wasi-http</code> crates.</p>",
        "id": 445415360,
        "sender_full_name": "Landon James",
        "timestamp": 1718730578
    }
]