[
    {
        "content": "<p>cranelift-wasm has a <code>ModuleEnvironment</code> trait, while wasmtime-environ has a <code>ModuleEnvironment</code> struct. Both seem to independently parse wasm modules. Why does this split exist and when is which one used? I'm getting confused where I have to implement support for handling the tags section used by the exception handling proposal.</p>",
        "id": 358761024,
        "sender_full_name": "bjorn3",
        "timestamp": 1684249285
    },
    {
        "content": "<p>Long ago the trait was used to multiplex the spidermonkey embedding and the Wasmtime embedding. Since then Spidermonkey stopped using it and I also had a patch awhile back to have Wasmtime stop using it because it got quite onerous to be updated. At the time it was decided not to remove it, so it's sort of in a zombie state nowadays. I think it may be used in some cranelift testing still which is why it sticks around, but otherwise I don't think anyone really wants to keep it any more at this point</p>",
        "id": 358762085,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684249508
    },
    {
        "content": "<p>If it's still only in use by the tests I think it's ok to insert panics/<code>todo!()</code>/etc</p>",
        "id": 358762257,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684249544
    },
    {
        "content": "<p>I see. Thanks.</p>",
        "id": 358762378,
        "sender_full_name": "bjorn3",
        "timestamp": 1684249561
    },
    {
        "content": "<p>Would it make sense to move all <code>cranelift/filetests/filetests/wasm</code> tests to either wasmtime or replace them with .clif tests? That would allow fully merging cranelift-wasm into wasmtime-environ.</p>",
        "id": 361110668,
        "sender_full_name": "bjorn3",
        "timestamp": 1685032245
    },
    {
        "content": "<p>I'd personally be in favor of that, but I'm a bit biased in that I don't like maintaining the <code>dummy.rs</code> environment traits. I do think that integrating with Wasmtime would be nice to additionally reflect Wasmtime's exact implementations of the <code>func_environ.rs</code> trait hooks which currently can't have assembly references tested</p>",
        "id": 361115981,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1685033588
    },
    {
        "content": "<p>When we added this mode the idea was to be able to test specific aspects of the wasm translation without a full dependence on Wasmtime, and to be able to assert on the generated assembly. I guess we could add equivalent test functionality to Wasmtime itself but assertions on the assembly output wouldn't fit too well with the wast test infra, which is otherwise compiler-backend-agnostic. In other words it's kind of a distinct need that led to the distinct tier of tests</p>",
        "id": 361116129,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1685033623
    },
    {
        "content": "<p>although, perhaps this would allow for a different factoring / sharing of effort wrt the Winch assembly tests: a new Wasmtime-level test file directive could assert \"with this backend, this should be the assembly output\"</p>",
        "id": 361116685,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1685033754
    },
    {
        "content": "<p>Can't we add a test mode for wasmtime tests which asserts clif ir? It would then use the real translation code as used by wasmtime, but stop before compiling it down to machine code.</p>",
        "id": 361124810,
        "sender_full_name": "bjorn3",
        "timestamp": 1685035904
    },
    {
        "content": "<p>We do want specifically to assert on the assembly in some cases; e.g. <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> added tests that show that heap-access bounds checks are properly optimized by Cranelift's mid-end, and we probably want to retain the end-to-end testing of efficient lowering there</p>",
        "id": 361125404,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1685036067
    },
    {
        "content": "<p>so maybe a \"compiler test\" mode in a wast could be something like: assert CLIF or Cranelift compiled output or Winch compiled output</p>",
        "id": 361125564,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1685036105
    },
    {
        "content": "<p>FWIW, on broader context here: I do generally like the idea of removing indirection where we can; the distinction between the environ, the generic wasm translator, and Wasmtime's hooks was pretty confusing to me when was first working on CL/Wasmtime</p>",
        "id": 361125773,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1685036148
    },
    {
        "content": "<p>I was just yesterday trying to figure out how to optimize constant-sized table bounds-checks in Wasmtime and am now confused by this too, so I'm also in favor of cleaning it up somehow <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 361126167,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1685036247
    },
    {
        "content": "<p>I don't think that adding this test infra to Wasmtime would be intractable, but I definitely agree it's not easily slotted in</p>",
        "id": 361126490,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1685036334
    },
    {
        "content": "<p>I do think though the best world is that we test what we actually want to, which is Wasmtime's lowerings, which in the case of like heap accesses and stuff needs to pull in all the support from the <code>wasmtime-cranelft</code> crate which is doing the lowering and classifying the kinds of memories</p>",
        "id": 361126664,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1685036397
    }
]