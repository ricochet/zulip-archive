[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> I started <a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\">https://github.com/bytecodealliance/wasmtime/pull/2289</a> -- I'm trying to de-duplicate codegen's unwinding logic, and perhaps remove dependency of gimli crate (in the future?) Next step will be working on new backend. Did you have insights if this approach (<code>UNWIND_INFO</code>) will work for ARM64 ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2289\" title=\"Cranelift: refactoring of unwind info by yurydelendik 路 Pull Request #2289 路 bytecodealliance/wasmtime\">Cranelift: refactoring of unwind info by yurydelendik 路 Pull Request #2289 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This PR:\n\nCreates common unwind info data structures (at cranelift::isa::unwind::input)\nExtracts common logic for SystemV and FastCall into &quot;cranelift/codegen/src/isa/x86/unwind.rs&quot;\nMoves...</div></div></div>",
        "id": 213162082,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1602599130
    },
    {
        "content": "<p>I'll look this over and let you know.  I'm not as familiar with Window's ARM64 ABI and the pdata/xdata is quite a bit different (stack-manipulating functions can even be described without having xdata entries provided they follow specific canonical forms and don't have exception handlers).</p>",
        "id": 213195892,
        "sender_full_name": "Peter Huene",
        "timestamp": 1602613094
    },
    {
        "content": "<p>I put some comments up on the PR.  I spent the last hour or two pouring over the Windows ARM64 ABI docs to understand how it differs in describing unwind information from x64.  I don't see any inherent problems in the refactoring that would interfere with ARM64 on Windows.  My concern is primarily over having to look at every instruction in the function on Windows; for x64 we only ever need to look at the entry block instructions and with ARM64 it's likely to be same provided Cranelift only emits epilogues that have a 1:1 reverse instruction for each prologue instruction.</p>",
        "id": 213215509,
        "sender_full_name": "Peter Huene",
        "timestamp": 1602622579
    },
    {
        "content": "<p>Yeah, I was wondering about performance too. I'll see if it can be addressed somehow.</p>",
        "id": 213215640,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1602622678
    }
]