[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> we've discussed this before, but <span class=\"user-mention\" data-user-id=\"374806\">@Robin Freyler</span>'s <a href=\"https://github.com/bytecodealliance/wasmtime/issues/10033\">issue about fuzzing timeouts</a> made me look at it again: can you explain to me again why we can't disable ASAN in OSS-Fuzz, given that, AIUI, it doesn't catch issues for us? It seems like removing <code>address</code> from the list in our project.yaml would do that?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/10033\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ae8f7280e190a39cfaa82ff78aa94925774223aa/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313831333262613365343236333333306462363863376334346163313066313865643830333437373761663964663236356633636266623239663837666366622f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f3130303333&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/10033\" title=\"Wasmtime/Cranelift: translation timeout (OSS-Fuzz) · Issue #10033 · bytecodealliance/wasmtime\">Wasmtime/Cranelift: translation timeout (OSS-Fuzz) · Issue #10033 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Recently OSS-Fuzz has found a time-out in Wasmi's differential fuzzing target. In Wasmi's differential fuzzing target we compare Wasmi and Wasmtime runtimes to yield the same values or errors for W...</div></div></div>",
        "id": 494370231,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737123329
    },
    {
        "content": "<p>Hm you're right we have discussed this, and IIRC we concluded at the time it's also fine to remove asan...</p>\n<p>The actual implementation is a bit tricky since oss-fuzz doesn't have official support for \"no asan\" builds so it's not as simple as just removing <code>address</code>. What we might be able to do though is pass <code>--sanitizer none</code> <a href=\"https://github.com/google/oss-fuzz/blob/f482e5814b9e432e0e1f166c9a98a290def3be56/projects/wasmtime/build.sh#L43\">here</a> and pretend we're asan-enabled when it's actually disabled</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/blob/f482e5814b9e432e0e1f166c9a98a290def3be56/projects/wasmtime/build.sh#L43\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/390641192cb81dd2390ad3db319e6ca4e971f00d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336630303832336461353966336535646362663830663435316261623631383761336666323135343333653031396436316364666135376533326565663262642f676f6f676c652f6f73732d66757a7a&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/blob/f482e5814b9e432e0e1f166c9a98a290def3be56/projects/wasmtime/build.sh#L43\" title=\"oss-fuzz/projects/wasmtime/build.sh at f482e5814b9e432e0e1f166c9a98a290def3be56 · google/oss-fuzz\">oss-fuzz/projects/wasmtime/build.sh at f482e5814b9e432e0e1f166c9a98a290def3be56 · google/oss-fuzz</a></div><div class=\"message_embed_description\">OSS-Fuzz - continuous fuzzing for open source software. - google/oss-fuzz</div></div></div>",
        "id": 494382185,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737126932
    },
    {
        "content": "<p>ah, interesting. The <a href=\"https://google.github.io/oss-fuzz/getting-started/new-project-guide/#sanitizers\">documentation</a> led me to believe that it's possible (though not advised) to run without <code>address</code>. Can you say what we have to work around with what you're proposing?</p>",
        "id": 494383375,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127289
    },
    {
        "content": "<p>(also, I guess we should enable <code>i386</code> with Pulley at some point?)</p>",
        "id": 494383496,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127323
    },
    {
        "content": "<p><a href=\"https://github.com/google/oss-fuzz/pull/12947\">sent a PR</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/google/oss-fuzz/pull/12947\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f4f43c65b6bc3fa3db90ecc9542851e1a0e3512b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313632316566633966333363333331626365356361323836303336346663353363393932643761616632666531663166323763643762346130633834653537632f676f6f676c652f6f73732d66757a7a2f70756c6c2f3132393437&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/google/oss-fuzz/pull/12947\" title=\"wasmtime: Disable ASAN in fuzzing by alexcrichton · Pull Request #12947 · google/oss-fuzz\">wasmtime: Disable ASAN in fuzzing by alexcrichton · Pull Request #12947 · google/oss-fuzz</a></div><div class=\"message_embed_description\">This commit is an attempt to disable the use of ASAN for the Wasmtime project. Historically ASAN has not provided the project much benefit and ends up having the net effect of making fuzzing ~2x sl...</div></div></div>",
        "id": 494383616,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127353
    },
    {
        "content": "<p>heh the docs you're looking at are unfortunately more expansive</p>",
        "id": 494383704,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127376
    },
    {
        "content": "<p>or well I've never actually looked into i386 support at all</p>",
        "id": 494383753,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127391
    },
    {
        "content": "<p>I'm not sure there's any rust projects using that ....</p>",
        "id": 494383774,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127397
    },
    {
        "content": "<p>but for <code>sanitizers</code> I'm relatively certain our only option is to fake it</p>",
        "id": 494383832,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127413
    },
    {
        "content": "<p>ah, that makes sense</p>",
        "id": 494383841,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127415
    },
    {
        "content": "<p>so removing <code>address</code> from the list is simply ignored in practice?</p>",
        "id": 494383996,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127450
    },
    {
        "content": "<p>AFAIK that would be bad in that it would then build our fuzzers with both ASAN and UBSAN (I think)</p>",
        "id": 494384075,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127473
    },
    {
        "content": "<p>in that I think \"empty == address + undefined\"</p>",
        "id": 494384098,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127480
    },
    {
        "content": "<p>the concept of \"no sanitizers\" I don't think exists in C++</p>",
        "id": 494384147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127497
    },
    {
        "content": "<p>oh, I wasn't suggesting to remove the list, but have it empty. But maybe that's not a thing</p>",
        "id": 494384219,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127521
    },
    {
        "content": "<p>and I take it of the available santiziers, <code>address</code> is the one we'd mind having active the least?</p>",
        "id": 494384282,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127548
    },
    {
        "content": "<p>tbh I feel like that would either crash their infrastructure of cause it to be assumed missing anyway heh</p>",
        "id": 494384287,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127550
    },
    {
        "content": "<p>we only have <code>address</code> enabled right now</p>",
        "id": 494384332,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127562
    },
    {
        "content": "<p>AFAIK that's mostly because the original integration with cargo-fuzz didn't plumb <code>$SANITIZER</code> to <code>cargo fuzz build</code></p>",
        "id": 494384403,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127580
    },
    {
        "content": "<p>it wouldn't be too hard to add I think</p>",
        "id": 494384433,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127593
    },
    {
        "content": "<p>understood, yes. What I'm trying to understand is whether, if we have to have at least one active, e.g. <code>undefined</code> would be better or worse</p>",
        "id": 494384463,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127602
    },
    {
        "content": "<p>I suppose in theory we could leave asan on, enable undefined santiziing, and translate \"undefined\" to \"none\"</p>",
        "id": 494384478,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127608
    },
    {
        "content": "<p>I've never tried \"undefined\" myself</p>",
        "id": 494384505,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127621
    },
    {
        "content": "<p>I guess we'll see what your PR does</p>",
        "id": 494384548,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127632
    },
    {
        "content": "<p>it's an adventure!</p>",
        "id": 494384576,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127643
    },
    {
        "content": "<p>lol</p>",
        "id": 494384580,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1737127644
    },
    {
        "content": "<p>(and how it's reviewed)</p>",
        "id": 494384584,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1737127646
    }
]