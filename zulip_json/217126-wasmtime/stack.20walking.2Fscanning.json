[
    {
        "content": "<p>is there any reasonable way to check the wasm stack (eg for gc purposes) from the host? it looks like internally wasmtime uses cranelift's StackMap, I think to handle externref gc. but this information is not exposed in the api</p>\n<p>one approach I'm thinking of would be to scan the whole native stack, though that seems like overkill. and not sure if there's any guarantee around there being a gc safepoint</p>",
        "id": 207878881,
        "sender_full_name": "bndbsh",
        "timestamp": 1598293798
    },
    {
        "content": "<p>what are you trying to accomplish?</p>\n<p>every call is a safepoint, fwiw</p>",
        "id": 207882041,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598295287
    },
    {
        "content": "<p>trying to see if the calling wasm code has any references on the stack/in locals to add to gc roots</p>",
        "id": 207891090,
        "sender_full_name": "bndbsh",
        "timestamp": 1598299917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"332379\">@bndbsh</span> roots for an external-to-Wasmtime GC? i.e. integrating Wasmtime into a JVM and finding JVM objects that have been passed into Wasm and are on the stack?</p>",
        "id": 207900131,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598304750
    },
    {
        "content": "<p>in this case the memory to be gc'd is wasm linear memory, and the references are i32 offsets into it.  but since wasm is not allowed inspect its own stack, i thought it might help to have an external function do the scan via wasmtime APIs</p>",
        "id": 207900601,
        "sender_full_name": "bndbsh",
        "timestamp": 1598305098
    },
    {
        "content": "<p>Cranelift will only generate stack maps for values whose type is a reference type, not i32s, so I don't think this approach will work out very well.</p>\n<p>Instead, I'd suggest maintaining your own shadow stack of gc pointers in the linear memory that you can walk and scan whenever you want.</p>",
        "id": 207981681,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598371113
    },
    {
        "content": "<p>yeah, that seems to be the most reasonable approach and the one taken by other projects I've looked at. thanks for the pointers</p>",
        "id": 208122594,
        "sender_full_name": "bndbsh",
        "timestamp": 1598463081
    }
]