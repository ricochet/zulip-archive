[
    {
        "content": "<p>Does lldb + wasmtime support this option, i.e. with the dwarf info in a separate file ?</p>",
        "id": 416805643,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705679310
    },
    {
        "content": "<p>wasmtime has basic support by processing dwarf, but I haven't heard of generate-dwarf as a concept, so is that like a standard or something other runtimes do?</p>",
        "id": 416806232,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705679476
    },
    {
        "content": "<p>emscripten can do this, where the advantage is admittedly more obvious,  the dwarf info resides  (mostly) in a separate file meaning the main wasm is downloaded and started faster and the dward only loaded if the debugger is opened</p>",
        "id": 416806506,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705679560
    },
    {
        "content": "<p>oh I think that's more of a toolchain thing than a wasmtime thing, and it's probably some various llvm flags to get that to work</p>",
        "id": 416806613,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705679600
    },
    {
        "content": "<p>We have this working for c#/AOT in <a href=\"https://github.com/dotnet/runtimelab/pull/2264\">https://github.com/dotnet/runtimelab/pull/2264</a> and I was hoping I could make it work for wasmtime also, although the payoff there is not so great.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/pull/2264\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6428591cd4d23e4f2aaa92e16b99e1245f6f8bda\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616233633434313630653065313734316465363333633532363333636663376161646563613838303730333033366661613564366138313963303164663639652f646f746e65742f72756e74696d656c61622f70756c6c2f32323634)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/pull/2264\" title=\"NativeAOT-LLVM: Wasm separate DWARF debug to different file by yowl 路 Pull Request #2264 路 dotnet/runtimelab\">NativeAOT-LLVM: Wasm separate DWARF debug to different file by yowl 路 Pull Request #2264 路 dotnet/runtimelab</a></div><div class=\"message_embed_description\">This PR utilises gseparate-dwarf to move the DWARF metadata to a separate file to reduce the main wasm size.\nDebugging still works</div></div></div>",
        "id": 416806635,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705679607
    },
    {
        "content": "<p>wasmtime doesn't have support for reading \"split-dwarf\" however</p>",
        "id": 416806652,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705679610
    },
    {
        "content": "<p>having support though would be great if you have a pr in mind!</p>",
        "id": 416806716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705679635
    },
    {
        "content": "<p>Thanks, I will have a look around!</p>",
        "id": 416807728,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705679928
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 416807745,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705679931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> has marked this topic as unresolved.</p>",
        "id": 416818243,
        "sender_full_name": "Notification Bot",
        "timestamp": 1705682212
    },
    {
        "content": "<p>side-loading debug bits is sooooooo common that we need wasmtime to support that eventually. Standalone debuggers do support it.</p>",
        "id": 416818249,
        "sender_full_name": "Ralph",
        "timestamp": 1705682215
    },
    {
        "content": "<p>the vscode wasm dwarf debugger will support both embedded and standalone as no one wants to ship debug symbols to prod but we do need sometimes to debug the specific prod module....</p>",
        "id": 416818551,
        "sender_full_name": "Ralph",
        "timestamp": 1705682286
    },
    {
        "content": "<p>For vscode, are you referring to the lldb extension or cppvsdbg ?</p>",
        "id": 416819530,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705682527
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging\">https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bc1a8c374ad04ed049fb54fe7178db1defe99577\\/68747470733a2f2f6d732d7673636f64652e67616c6c65727963646e2e76736173736574732e696f2f657874656e73696f6e732f6d732d7673636f64652f7761736d2d64776172662d646562756767696e672f312e302e312f313639353833333133333337382f4d6963726f736f66742e56697375616c53747564696f2e53657276696365732e49636f6e732e44656661756c74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging\" title=\"WebAssembly DWARF Debugging - Visual Studio Marketplace\">WebAssembly DWARF Debugging - Visual Studio Marketplace</a></div><div class=\"message_embed_description\">Extension for Visual Studio Code - Enables enhanced WebAssembly debugging</div></div></div>",
        "id": 416831411,
        "sender_full_name": "Ralph",
        "timestamp": 1705685454
    },
    {
        "content": "<p>right now it only supports custom data section dwarf symbols</p>",
        "id": 416831460,
        "sender_full_name": "Ralph",
        "timestamp": 1705685469
    },
    {
        "content": "<p>is there a specific lldb extension you mean?</p>",
        "id": 416831543,
        "sender_full_name": "Ralph",
        "timestamp": 1705685494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/217126-wasmtime/topic/gseparate-dwarf.20support.3F/near/416818249\">said</a>:</p>\n<blockquote>\n<p>side-loading debug bits is sooooooo common that we need wasmtime to support that eventually. Standalone debuggers do support it.</p>\n</blockquote>\n<p>BTW, I really do mean <strong>eventually</strong> and people who want it need to pony up the work for it, of course. Stuff doesn't happen \"by magic\". :-)</p>",
        "id": 416834280,
        "sender_full_name": "Ralph",
        "timestamp": 1705686372
    },
    {
        "content": "<p>waddya mean, Harry Potter isn't real?</p>",
        "id": 416836435,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705687115
    },
    {
        "content": "<p><a href=\"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\">https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb</a> is the one I've used before, it works most of the time.  But I will check out your link - as it is based on the chrome extension (which does support separate dwarf) we might be close.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e42e558f9e22856a6fbd6400f8852b485ca0a38c\\/68747470733a2f2f766164696d636e2e67616c6c65727963646e2e76736173736574732e696f2f657874656e73696f6e732f766164696d636e2f7673636f64652d6c6c64622f312e31302e302f313639343830353435363234302f4d6963726f736f66742e56697375616c53747564696f2e53657276696365732e49636f6e732e44656661756c74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://marketplace.visualstudio.com/items?itemName=vadimcn.vscode-lldb\" title=\"CodeLLDB - Visual Studio Marketplace\">CodeLLDB - Visual Studio Marketplace</a></div><div class=\"message_embed_description\">Extension for Visual Studio Code - A native debugger powered by LLDB.  Debug C++, Rust and other compiled languages.</div></div></div>",
        "id": 416836836,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705687234
    },
    {
        "content": "<p>I'm going to try the lldb one, too. let's mix and match experiences!</p>",
        "id": 416849397,
        "sender_full_name": "Ralph",
        "timestamp": 1705691457
    },
    {
        "content": "<p>To clarify the ambiguity in what I wrote, when I said it works, it works with embedded dwarf, I've not tried it with side loading.</p>",
        "id": 416850245,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705691773
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/217126-wasmtime/topic/gseparate-dwarf.20support.3F/near/416831411\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging\">https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging</a></p>\n</blockquote>\n<p>I tried node, but unfortunately it doesn't seem able to run wasm modules that we build and that we run with wasmtime.  node just crashes during its compilation step.  I will try CodeLLDB next</p>",
        "id": 417006336,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705769832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/gseparate-dwarf.20support.3F/near/416806716\">said</a>:</p>\n<blockquote>\n<p>having support though would be great if you have a pr in mind!</p>\n</blockquote>\n<p>Would this start with <code>append_dwarf</code> in <code>compilation.rs</code> ?</p>",
        "id": 417093540,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705848790
    },
    {
        "content": "<p>and what is a <code>Tumble</code> ?</p>",
        "id": 417093653,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705848890
    },
    {
        "content": "<p>It might start there yeah, although I don't think I know enough about what this feature is to suggest the best route forward. Is the goal to generate native DWARF for the cranelift-compiled code? (using the wasm dwarf as input)</p>\n<p>As for <code>Tumble</code>, is that in Wasmtime or somewhere else?</p>",
        "id": 417293590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705949132
    },
    {
        "content": "<p>lldb with wasmtime and a dwarf embedded in the wasm works fine, however if the dwarf is separated using <code>-gseparate-dwarf</code> to clang to generate a <code>....wasm.dwp</code> then it seems lldb does not find the <code>dwp</code> package , which perhaps is because wasmtime does not \"tell\" lldb about it when <code>-Ddebug-info</code> is used.  To be honest I've not looked at how <code>debug-info</code> works.</p>",
        "id": 417294339,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705949408
    },
    {
        "content": "<p>Ignore <code>tumble</code>, guess I was smoking something (or my repo was out of date)</p>",
        "id": 417295928,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705950020
    },
    {
        "content": "<p>if you're using lldb on wasmtime then it's probably relying on the built-in translation Wasmtime performs from \"wasm dwarf\" to \"native dwarf\". Wasmtime then informs lldb of this via debugger-specific things and lldb hooks into it all at that point. </p>\n<p>So my guess here is that Wasmtime doesn't support loading \"wasm dwarf\" when it's split out. (which is what happens with <code>-gseparate-dwarf</code>). Wasmtime's compilation model doesn't lend itself well to probing the filesystem, currently it only supports \"here's the bytes plz compile\" so we'd need to refactor the internals of the <code>Module</code> constructors. I could see though that if you use <code>Module::from_file</code> we could have automatic support for reading the metadata and finding the dwarf file</p>",
        "id": 417295970,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950033
    },
    {
        "content": "<p>Do you have a sample wasm module which was compiled with <code>-gseparate-dwarf</code>? I'm curious to poke around in there and see if there's metadata to find the split-dwarf file</p>",
        "id": 417296020,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950053
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/mFaC4PCjPXuxKQkn7DI7_WaD/console.wasm.zip\">console.wasm.zip</a></p>",
        "id": 417296721,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705950319
    },
    {
        "content": "<p>hm as a non-dwarf-expert I'm not seeing anything out of the ordinary in terms of sections, just the standard <code>.debug_*</code> sections</p>",
        "id": 417297527,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950634
    },
    {
        "content": "<p>this looks like standard library debug info was included but then debug info was also split off</p>",
        "id": 417297555,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950648
    },
    {
        "content": "<p>hm, ok, let me compare to without <code>-gseparate-dwarf</code></p>",
        "id": 417297639,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705950680
    },
    {
        "content": "<p>ok I'm running the <code>gimli</code> repository which has a <code>dwarfdump</code> example to print out a debug view of all the dwarf info on the <code>console.wasm</code></p>",
        "id": 417297942,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950793
    },
    {
        "content": "<p><code>cargo run --bin dwarfdump ~/code/wasmtime/console.wasm | rg dwp</code> prints nothing</p>",
        "id": 417297959,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950800
    },
    {
        "content": "<p>so it appears that the wasm itself does not indicate that it was built with split dwarf</p>",
        "id": 417298030,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950824
    },
    {
        "content": "<p>which would mean that the user would have to manually say \"I split the dwarf here\"</p>",
        "id": 417298064,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950833
    },
    {
        "content": "<p>but afaik split dwarf on native platforms doesn't do that, they have self-discoverable paths where you can find everything just from the original binary</p>",
        "id": 417298145,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950853
    },
    {
        "content": "<p>so this might be something where upstream llvm may need a patch or two to get the best ux here</p>",
        "id": 417298170,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950863
    },
    {
        "content": "<p>I suppose for native <code>target symbols add xxx.dwp</code> works, although not tried</p>",
        "id": 417298538,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705951000
    },
    {
        "content": "<p>oh is that required for native? lldb doesn't automatically find the <code>*.dwp</code>?</p>",
        "id": 417298613,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705951032
    },
    {
        "content": "<p>let me try</p>",
        "id": 417298634,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705951044
    },
    {
        "content": "<p>You are right, if the dwp file is named as the executable plus <code>.dwp</code> then it works.  Looks like it is loading via convention.  Could we not do the same?  I'm not clear what we need changing upstream in llvm.</p>",
        "id": 417351039,
        "sender_full_name": "Scott Waye",
        "timestamp": 1705973126
    },
    {
        "content": "<p>Maybe of interest here <a href=\"https://github.com/llvm/llvm-project/pull/77949\">https://github.com/llvm/llvm-project/pull/77949</a> (gdb remote work)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/llvm/llvm-project/pull/77949\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2f8616182f72e531b0d85b96e2b1cc18eded1809\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633963376166323930356434626432386531346461636631306231346366363962303563376639386530656364353266643161343335396330393731316536362f6c6c766d2f6c6c766d2d70726f6a6563742f70756c6c2f3737393439)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/llvm/llvm-project/pull/77949\" title=\"[lldb] Implement WebAssembly debugging by paolosevMSFT 路 Pull Request #77949 路 llvm/llvm-project\">[lldb] Implement WebAssembly debugging by paolosevMSFT 路 Pull Request #77949 路 llvm/llvm-project</a></div><div class=\"message_embed_description\">Add support for source-level debugging of WebAssembly code that runs in a WebAssembly engine.\nThe idea is to use the GDB-remote protocol to connect to a Wasm engine that implements a GDB-remote stu...</div></div></div>",
        "id": 417458149,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706020378
    },
    {
        "content": "<p>oh nice! I've wondered what it might take to have a wasm native target for remote debugging</p>",
        "id": 417476032,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706025301
    },
    {
        "content": "<p>but if <code>*.dwp</code> is a convention then we could perhaps bake that into <code>wasmtime::Module::from_file</code> to load a <code>*.dwp</code> as the dwarf info if it exists</p>",
        "id": 417476122,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706025326
    },
    {
        "content": "<p>related: Paolo did not know who in the llvm community would help him merge that llvm pr, but it IS the pr that the wamr dwarf support is based on.</p>",
        "id": 417482300,
        "sender_full_name": "Ralph",
        "timestamp": 1706027149
    },
    {
        "content": "<p>if we want it, it would just require a bit of socializing and paolo would be glad to resubmit</p>",
        "id": 417482413,
        "sender_full_name": "Ralph",
        "timestamp": 1706027174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/gseparate-dwarf.20support.3F/near/417297959\">said</a>:</p>\n<blockquote>\n<p><code>cargo run --bin dwarfdump ~/code/wasmtime/console.wasm | rg dwp</code> prints nothing</p>\n</blockquote>\n<p>The relevant attributes have <code>dwo</code> in the name, not <code>dwp</code>. A DWARF package file (<code>dwp</code>) contains a number of DWARF objects (<code>dwo</code>).</p>",
        "id": 418783373,
        "sender_full_name": "Philip Craig",
        "timestamp": 1706601318
    },
    {
        "content": "<p>Its a dwp that I'm interested in loading.  I'm still looking at the wasmtime code to see how it works regards loading dwarf and passing it on to lldb.</p>",
        "id": 418913891,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706646174
    },
    {
        "content": "<p>Is the wasmtime dwarf parser v4 or v5 ?</p>",
        "id": 419152587,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706749350
    },
    {
        "content": "<p>maybe a better question is dwarf5  v4 plus new stuff, or not compatible at all.</p>",
        "id": 419154188,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706750624
    },
    {
        "content": "<p>I don't know myself, but I'm relatively sure it uses the <code>gimli</code> crate which I suspect supports v5</p>",
        "id": 419170708,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706760408
    },
    {
        "content": "<p>but there's lots of manual handling of things so I'm not sure it handles everything</p>",
        "id": 419170725,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1706760422
    },
    {
        "content": "<p>dwarf5 is v4 plus new stuff. gimli should support both (might be some obscure parts of v5 that aren't implemented yet). The dwarfdump example in gimli can load dwp files. You'll need to change wasmtime to do the same.</p>",
        "id": 419237615,
        "sender_full_name": "Philip Craig",
        "timestamp": 1706791203
    },
    {
        "content": "<p>Thanks, wasmtime also looks like it could do with <code>Attribute::String(R)</code> support</p>",
        "id": 419238103,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706791374
    },
    {
        "content": "<p>why does wasmtime have to clone attributes, <code>clone_die_attributes</code> ?</p>",
        "id": 419238247,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706791432
    },
    {
        "content": "<p>I will try adding the <code>String</code> support first, might help get a little more familiar with things, thanks for the replies</p>",
        "id": 419238479,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706791503
    },
    {
        "content": "<p><code>clone_die_attributes</code> rewrites all attributes to reference the addresses and layouts of the compiled machine code rather than the original wasm module.</p>",
        "id": 419283866,
        "sender_full_name": "bjorn3",
        "timestamp": 1706804799
    },
    {
        "content": "<p>Thanks, I was wondering about that and where that code was, I see more clearly now, some can be passed through, others require the translaction.</p>",
        "id": 419284305,
        "sender_full_name": "Scott Waye",
        "timestamp": 1706804892
    }
]