[
    {
        "content": "<p>I've been seeing some weird CI failures (<a href=\"https://github.com/bytecodealliance/wasmtime/pull/1263\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1263\">https://github.com/bytecodealliance/wasmtime/pull/1263</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1318\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1318\">https://github.com/bytecodealliance/wasmtime/pull/1318</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1319\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1319\">https://github.com/bytecodealliance/wasmtime/pull/1319</a>); <span class=\"user-mention\" data-user-id=\"254006\">@Andy Wortman</span> has a theory that it may disk space related. The error is <code>error: linking with 'cc'</code>. Can anyone with Azure permissions investigate?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1263\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1263\" target=\"_blank\" title=\"Add SIMD int-to-float conversion by abrown · Pull Request #1263 · bytecodealliance/wasmtime\">Add SIMD int-to-float conversion by abrown · Pull Request #1263 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This adds support for f32x4.convert_i32x4_s for x86. This conversion is a simple 1:1 lowering; other conversions will not be (see WebAssembly/simd#190).</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1318\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1318\" target=\"_blank\" title=\"Remove FPR32; fixes #1303 by abrown · Pull Request #1318 · bytecodealliance/wasmtime\">Remove FPR32; fixes #1303 by abrown · Pull Request #1318 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Until #1306 is resolved (some spilling/regalloc issue with larger FPR register banks), this removes FPR32 support. Only Wasm&#39;s i64x2.mul was using this register class and that instruction is pr...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1319\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1319\" target=\"_blank\" title=\"Fix types of more SIMD instruction by casting by abrown · Pull Request #1319 · bytecodealliance/wasmtime\">Fix types of more SIMD instruction by casting by abrown · Pull Request #1319 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is fixing up some unfinished parts of the bitcasting approach discussed in #1147. The commit messages have more details (many more details) but the bottom line is that without a new type repre...</div></div></div>",
        "id": 190576054,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1584154481
    },
    {
        "content": "<p>Here's an example: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1319/checks?check_run_id=506868460#step:16:43\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1319/checks?check_run_id=506868460#step:16:43\">https://github.com/bytecodealliance/wasmtime/pull/1319/checks?check_run_id=506868460#step:16:43</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1319/checks?check_run_id=506868460#step:16:43\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/541880?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1319/checks?check_run_id=506868460#step:16:43\" target=\"_blank\" title=\"Fix types of more SIMD instruction by casting by abrown · Pull Request #1319 · bytecodealliance/wasmtime\">Fix types of more SIMD instruction by casting by abrown · Pull Request #1319 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is fixing up some unfinished parts of the bitcasting approach discussed in #1147. The commit messages have more details (many more details) but the bottom line is that without a new type repre...</div></div></div>",
        "id": 190576070,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1584154517
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, your name came up in the Cranelift meeting on this issue; <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> thought you might have insight into this. Also, <span class=\"user-mention\" data-user-id=\"254006\">@Andy Wortman</span> has a separate issue that might also be demonstrating the same behavior</p>",
        "id": 190750829,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1584377912
    },
    {
        "content": "<p>unfortunately I don't really know what's goign on with CI</p>",
        "id": 190762170,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584383126
    },
    {
        "content": "<p>my best guess is we should roll back nightlies (e.g. use like nightly-YYYY-MM-DD) until one works</p>",
        "id": 190762191,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584383139
    },
    {
        "content": "<p>I can investigate more tmw when I'm back at work</p>",
        "id": 190762389,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584383225
    },
    {
        "content": "<p>as a datapoint: building and running wasmtime tests by the github actions actions results in ~17gb of Stuff after running all the steps listed in a nightly build. measured in a fresh clone of the repo, so that's not with any pre-existing <code>target</code> content.</p>\n<p>i notice there are a few steps that are _only_ run for nightly tests, so if it is in fact a disk space issue that might explain why it's only seen on nightly test runs</p>",
        "id": 190773435,
        "sender_full_name": "iximeow",
        "timestamp": 1584389311
    },
    {
        "content": "<p>datapoint 2: building with non-nightly steps results in a build that rounds up to 16gb but is in fact 15.63gb! so we at least cross the 16gb threshold on nightly vs nonnightly</p>",
        "id": 190787703,
        "sender_full_name": "iximeow",
        "timestamp": 1584397537
    },
    {
        "content": "<p>I'm going to try to continue investigating this error today and see if I can get to the bottom of it</p>",
        "id": 190856674,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584456036
    },
    {
        "content": "<p>ok bisecting a bunch of nightlies at <a href=\"https://github.com/alexcrichton/wasmtime/actions/runs/57523147\" target=\"_blank\" title=\"https://github.com/alexcrichton/wasmtime/actions/runs/57523147\">https://github.com/alexcrichton/wasmtime/actions/runs/57523147</a> and <a href=\"https://github.com/alexcrichton/wasmtime/actions/runs/57538657\" target=\"_blank\" title=\"https://github.com/alexcrichton/wasmtime/actions/runs/57538657\">https://github.com/alexcrichton/wasmtime/actions/runs/57538657</a> shows this is pretty unlikely to be a regression</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/actions/runs/57523147\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/actions/runs/57523147\" target=\"_blank\" title=\"alexcrichton/wasmtime\">alexcrichton/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - alexcrichton/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/actions/runs/57538657\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/actions/runs/57538657\" target=\"_blank\" title=\"alexcrichton/wasmtime\">alexcrichton/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - alexcrichton/wasmtime</div></div></div>",
        "id": 190864542,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584458960
    },
    {
        "content": "<p>testing the last good commit -- <a href=\"https://github.com/alexcrichton/wasmtime/runs/514044968?check_suite_focus=true\" target=\"_blank\" title=\"https://github.com/alexcrichton/wasmtime/runs/514044968?check_suite_focus=true\">https://github.com/alexcrichton/wasmtime/runs/514044968?check_suite_focus=true</a> on todays' nightly however shows that this is still failing</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/alexcrichton/wasmtime/runs/514044968?check_suite_focus=true\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/64996?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/alexcrichton/wasmtime/runs/514044968?check_suite_focus=true\" target=\"_blank\" title=\"alexcrichton/wasmtime\">alexcrichton/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAsssembly, using Cranelift - alexcrichton/wasmtime</div></div></div>",
        "id": 190864577,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584458974
    },
    {
        "content": "<p>gonna try some disk space savings next</p>",
        "id": 190864621,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584458992
    },
    {
        "content": "<p>ok looks like disk space was the issue -- <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1341\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1341\">https://github.com/bytecodealliance/wasmtime/pull/1341</a>, I'll continue to send a few PRs to save disk space on CI so we buy ourselves lots of time before hitting this again</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1341\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1341\" target=\"_blank\" title=\"Disable incremental compilation on CI by alexcrichton · Pull Request #1341 · bytecodealliance/wasmtime\">Disable incremental compilation on CI by alexcrichton · Pull Request #1341 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This should save us about 3GB of target directory disk space and it may\nalso be a tiny speed boost. There&#39;s no real benefit to using incremental\nbuilds on CI because we&#39;re not changing code...</div></div></div>",
        "id": 190875060,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584462782
    },
    {
        "content": "<p>I'm sad the linker didn't print anything more useful, I thought it actually printed out if it ran out of disk space...</p>",
        "id": 190875085,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584462797
    },
    {
        "content": "<p>that PR saved about 3GB, and <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1343\" target=\"_blank\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1343\">https://github.com/bytecodealliance/wasmtime/pull/1343</a> should save another 7 or so</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1343\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1343\" target=\"_blank\" title=\"Turn off binaryen in fuzzing by default by alexcrichton · Pull Request #1343 · bytecodealliance/wasmtime\">Turn off binaryen in fuzzing by default by alexcrichton · Pull Request #1343 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">... but turn it back on in CI by default. The binaryen-sys crate\nbuilds binaryen from source, which is a drag on CI for a few reasons:\n\nThis is quite large and takes a good deal of time to build\nTh...</div></div></div>",
        "id": 190875439,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584462932
    },
    {
        "content": "<p>er, 4*</p>",
        "id": 190875444,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1584462934
    }
]