[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> one step we'll need to take at some point is to implement reference types in the embeddings of wasmtime (Go/Python/.NET/...), and I was curious if you're interested in doing that in one of them? No worries if not, just curious if you were interested in doing so</p>",
        "id": 203748194,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594663274
    },
    {
        "content": "<p>I hadn't thought too much about them, but I've added check boxes to the tracking issue: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/929\">https://github.com/bytecodealliance/wasmtime/issues/929</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/929\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/929\" title=\"Tracking issue for the reference types proposal · Issue #929 · bytecodealliance/wasmtime\">Tracking issue for the reference types proposal · Issue #929 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This is a tracking issue for the reference types proposal. TODO Depends on bulk memory: #928 Enable the reference types proposal&#39;s test suite binary.wast br_table.wast exports.wast globals.wast...</div></div></div>",
        "id": 203748701,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594663461
    },
    {
        "content": "<p>I'm happy to do it, but maybe with some guidance around how we test these APIs, since I haven't touched them at all</p>",
        "id": 203748782,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594663491
    },
    {
        "content": "<p>ok cool, if you're curious to give it a shot I'd probably recomend doing the Python one</p>",
        "id": 203749618,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594663883
    },
    {
        "content": "<p>that should be easy enough to get up and running</p>",
        "id": 203749627,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594663890
    },
    {
        "content": "<p>that has some <a href=\"https://github.com/bytecodealliance/wasmtime-py#contributing\">basic docs</a> of how to get started but they may need some tewaking too</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py#contributing\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py#contributing\" title=\"bytecodealliance/wasmtime-py\">bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 203749687,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594663917
    },
    {
        "content": "<p>but I also don't mind doing this to be clear</p>",
        "id": 203749777,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594663947
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>fitzgen@erdos :: (main) :: ~/wasmtime-py\n    $ pytest\nERROR: usage: pytest [options] [file_or_dir] [file_or_dir] [...]\npytest: error: unrecognized arguments: --flake8 --mypy\n  inifile: /home/fitzgen/wasmtime-py/pytest.ini\n  rootdir: /home/fitzgen/wasmtime-py\n</code></pre></div>\n\n\n<p>do I need to <code>pip install</code> flake8 and mpy too?</p>",
        "id": 203750960,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594664511
    },
    {
        "content": "<p>also, I'm assuming this is all python3?</p>",
        "id": 203750977,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594664518
    },
    {
        "content": "<p>it's all python3 yeah</p>",
        "id": 203751191,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594664612
    },
    {
        "content": "<p><code>pip3 install -e \".[testing]\"</code></p>",
        "id": 203751205,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594664625
    },
    {
        "content": "<p>run that and that'll install all the dev-deps effectively</p>",
        "id": 203751221,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594664631
    },
    {
        "content": "<p>or so I'm led to believe</p>",
        "id": 203751229,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594664635
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/38\">https://github.com/bytecodealliance/wasmtime-py/pull/38</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py/pull/38\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py/pull/38\" title=\"Split contribution instructions out to CONTRIBUTING.md by fitzgen · Pull Request #38 · bytecodealliance/wasmtime-py\">Split contribution instructions out to CONTRIBUTING.md by fitzgen · Pull Request #38 · bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">Also update the set up and testing instructions.</div></div></div>",
        "id": 203754186,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594665970
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is there a reason why <code>Val</code>'s raw repr is <code>__raw__</code> and not <code>_raw</code>? I thought that double under was stylistically reserved for python builtins</p>",
        "id": 203755816,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594666715
    },
    {
        "content": "<p>that's b/c I don't know python idioms</p>",
        "id": 203755848,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594666734
    },
    {
        "content": "<p>no reason other than that</p>",
        "id": 203755854,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594666737
    },
    {
        "content": "<p>oh I htink this is a python builtin thing</p>",
        "id": 203755857,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594666738
    },
    {
        "content": "<p>it may be but not intentionally</p>",
        "id": 203755922,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594666766
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> thoughts on the representation for <code>externref</code> and <code>funcref</code> in the python API should be? it is tempting to use <code>None</code> for null refs, but then that doesn't discriminate between the type of ref. but maybe this is fine? worked ok for <code>wasm_ref_t</code> in C...</p>",
        "id": 203763875,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594670623
    },
    {
        "content": "<p>yeah I think we should prolly use <code>None</code></p>",
        "id": 203763948,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594670646
    },
    {
        "content": "<p>and do w/e is necessary to get it work on the python side</p>",
        "id": 203763960,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594670652
    },
    {
        "content": "<p>python's in general \"this feels very nice\" rather than \"this is the fastest it can be\"</p>",
        "id": 203763985,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594670666
    },
    {
        "content": "<p>/me nods</p>",
        "id": 203764023,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594670682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> do you know how to handle circular module imports with mypy types? trying to add <code>def funcref(self, f: Optional[Func])</code> method to <code>Val</code>, but I can't import <code>Func</code> because <code>Func</code>'s module imports <code>Val</code> and so I get <code>None</code> when I try to import <code>Func</code> from <code>Val</code>'s module, etc</p>",
        "id": 203780322,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594680098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> <code>'Optional[Func]'</code></p>",
        "id": 203780471,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680211
    },
    {
        "content": "<p>if you make it a string it can help with forward references</p>",
        "id": 203780484,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680218
    },
    {
        "content": "<p>although it doesn't fix everything, you'll still have to import it</p>",
        "id": 203780498,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680227
    },
    {
        "content": "<p>we may need to rejigger things</p>",
        "id": 203780505,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680231
    },
    {
        "content": "<p>I'm not too well versted in mypy and forward references, if it's too onerous feel free to disable mypy and I can help figure it out before landing</p>",
        "id": 203780556,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680252
    },
    {
        "content": "<p>ah, I was trying <code>Optional[\"Func\"]</code> and it wasn't working; will try this</p>",
        "id": 203780591,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594680264
    },
    {
        "content": "<p>oh that may or may not be supposed to work</p>",
        "id": 203780655,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680284
    },
    {
        "content": "<p>hm, nope I'm getting this error:</p>\n<div class=\"codehilite\"><pre><span></span><code>ImportError: cannot import name &#39;Func&#39; from &#39;wasmtime&#39; (/home/fitzgen/wasmtime-py/wasmtime/__init__.py)\n</code></pre></div>\n\n\n<p>when I add <code>from wasmtime import Func</code></p>",
        "id": 203780700,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594680326
    },
    {
        "content": "<p>which is just a straight python error, not even at mypy yet</p>",
        "id": 203780711,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1594680342
    },
    {
        "content": "<p>bah</p>",
        "id": 203780784,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680387
    },
    {
        "content": "<p>I'd just disable it for now and I can try to help poke at it later</p>",
        "id": 203780800,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680401
    },
    {
        "content": "<p>disable mypy that is (it's a flag in pytest.ini)</p>",
        "id": 203780811,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594680410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> would you happen to be interested in implementing support for reference types in the .NET api? I've never written a line of .NET code in my life, so it would probably take me quite a while longer to implement than I suspect it would for you.</p>",
        "id": 204261487,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1595021197
    },
    {
        "content": "<p>Sure, I'd be happy to.  There's some .NET GC interactions we'd need to do to implement ref types, which isn't difficult but not commonly done in .NET so probably not a great place to start if learning about .NET.</p>",
        "id": 204264873,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595023370
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/27\">https://github.com/bytecodealliance/wasmtime-dotnet/issues/27</a> to track.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/27\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/issues/27\" title=\"Implement reference types for .NET embeddings. · Issue #27 · bytecodealliance/wasmtime-dotnet\">Implement reference types for .NET embeddings. · Issue #27 · bytecodealliance/wasmtime-dotnet</a></div><div class=\"message_embed_description\">Now that the reference types proposal is implemented in Wasmtime, let&#39;s implement it for .NET embeddings! This means fully supporting the ref values, ref value types, handling reference types i...</div></div></div>",
        "id": 204265524,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595023842
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/pull/29\">https://github.com/bytecodealliance/wasmtime-dotnet/pull/29</a> to implement extern refs, func refs, and table imports of either reference type in .NET.  <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> no rush at all, but whenever you get a chance to review, I'd appreciate it!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-dotnet/pull/29\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-dotnet/pull/29\" title=\"Implement WebAssembly reference types and table imports. by peterhuene · Pull Request #29 · bytecodealliance/wasmtime-dotnet\">Implement WebAssembly reference types and table imports. by peterhuene · Pull Request #29 · bytecodealliance/wasmtime-dotnet</a></div><div class=\"message_embed_description\">This PR implements support in the .NET API for WebAssembly reference types (extern ref and func ref).\nIt also implements support for declaring table imports in a Host.\nA few bug fixes were made, in...</div></div></div>",
        "id": 204856157,
        "sender_full_name": "Peter Huene",
        "timestamp": 1595540088
    }
]