[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> question before I get much further, there's a comment about wasm code reading the <code>next</code> field of the activations table</p>",
        "id": 200705819,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591985972
    },
    {
        "content": "<p>is that still used?</p>",
        "id": 200705825,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591985974
    },
    {
        "content": "<p>I can't actually find where wasm reads the <code>next</code> field</p>",
        "id": 200705839,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591985982
    },
    {
        "content": "<p>this will happen in future PRs, as I implement <code>table.get</code> and all that. currently it is not yet used by Wasm</p>",
        "id": 200705948,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591986013
    },
    {
        "content": "<p>hm...</p>",
        "id": 200705990,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591986038
    },
    {
        "content": "<p>so you'd basically inline the fast path in jit code?</p>",
        "id": 200706022,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591986059
    },
    {
        "content": "<p>exactly, and only call out to host code when <code>next == end</code></p>",
        "id": 200706553,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591986316
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> why is the stack map registry stored in the <code>VMContext</code>?</p>",
        "id": 200707508,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591986771
    },
    {
        "content": "<p>or rather, do you have a future intention in the jit to read that?</p>",
        "id": 200707549,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591986785
    },
    {
        "content": "<p>no intentions for the JIT to read the registry -- but it is needed for GC, and that means <code>wasmtime-runtime</code> needs a way to get it from inside a <code>libcall</code>, and hanging it off the <code>VMContext</code> is the easiest way to do that</p>",
        "id": 200708900,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 200708918,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987457
    },
    {
        "content": "<p>ah ok</p>",
        "id": 200708962,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987478
    },
    {
        "content": "<p>I'm personally less of a fan than others I think about making code future-proof</p>",
        "id": 200708986,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987492
    },
    {
        "content": "<p>I would personally just go ahead and drop it from this PR if it's not needed yet, saving it for later when it's needed</p>",
        "id": 200709014,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987509
    },
    {
        "content": "<p>I'm always afraid that the actual feature would look different than a pre-implementation b/c requirements change over time or something like that</p>",
        "id": 200709046,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987524
    },
    {
        "content": "<p>minor point though</p>",
        "id": 200709053,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987533
    },
    {
        "content": "<p>when <code>next == end</code>, we need to do a libcall to insert the reference into the table, which will basically do:</p>\n<ul>\n<li>gc to maybe free space</li>\n<li>insert into the newly freed space, or allocate a new chunk and insert into that</li>\n</ul>",
        "id": 200709121,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987564
    },
    {
        "content": "<p>I'm p sure of the requirement in this case</p>",
        "id": 200709162,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987594
    },
    {
        "content": "<p>oh sorry yeah next/end make sense</p>",
        "id": 200709210,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987622
    },
    {
        "content": "<p>but the registry for GC far in the future is what I mean</p>",
        "id": 200709228,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987629
    },
    {
        "content": "<p>next/end is like \"the next PR needs this\" which is fine</p>",
        "id": 200709240,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987636
    },
    {
        "content": "<p>but afaik we don't even have plans yet for GC in the future</p>",
        "id": 200709259,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987642
    },
    {
        "content": "<p>when I say \"gc\" I mean the <code>wasmtime_runtime::gc</code> function that is in the PR now</p>",
        "id": 200709310,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987680
    },
    {
        "content": "<p>not the wasm GC proposal</p>",
        "id": 200709363,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987695
    },
    {
        "content": "<p>oh wait it's actually used?</p>",
        "id": 200709389,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987710
    },
    {
        "content": "<p>I think I missed where it was used?</p>",
        "id": 200709395,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987714
    },
    {
        "content": "<p><code>table.get</code> of a reference type will have a fast path where it can bump into the table if it isn't full, but if <code>next == end</code>, then the current chunk is full, so it will call out to host code via a libcall, that will do <code>gc(); infallible_insert_into_table()</code> as described above</p>\n<p>this isn't in the current PR, but coming in the next PR</p>",
        "id": 200709495,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987779
    },
    {
        "content": "<p>does that make sense?</p>",
        "id": 200709591,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987813
    },
    {
        "content": "<p>er sorry I'm not talking about next/end</p>",
        "id": 200709673,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987853
    },
    {
        "content": "<p>lemme get a link</p>",
        "id": 200709680,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987856
    },
    {
        "content": "<p>in order to do <code>gc(); infallible_insert_into_table()</code> we need the stack map registry</p>",
        "id": 200709716,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987877
    },
    {
        "content": "<p>because the <code>gc</code> function takes it as a parameter</p>",
        "id": 200709737,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987888
    },
    {
        "content": "<p>hence, we hang the stack map registry off the vmctx</p>",
        "id": 200709763,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987903
    },
    {
        "content": "<p>aha I see</p>",
        "id": 200709784,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987917
    },
    {
        "content": "<p>does that clear it up for you?</p>",
        "id": 200709884,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987949
    },
    {
        "content": "<p>yeah thanks</p>",
        "id": 200709926,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1591987966
    },
    {
        "content": "<p>np! thanks for review!</p>",
        "id": 200709934,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1591987974
    }
]