[
    {
        "content": "<p>How weird would it be to have an API that returns a <code>Result&lt;Result&lt;&amp;mut Self, Trap&gt;&gt;</code>?</p>",
        "id": 198484624,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590175728
    },
    {
        "content": "<p>I guess, we already have <code>Func::call</code> which converts the <code>Trap</code> into an <code>Error</code>, so maybe that's better.</p>",
        "id": 198484912,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590175849
    },
    {
        "content": "<p>Really weird. Will <code>downcast</code>not work for outer error?</p>",
        "id": 198484929,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1590175859
    },
    {
        "content": "<p>Yeah, I think that's the better way. Use anyhow::Error, and just have users downcast to Trap when needed</p>",
        "id": 198485335,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1590176071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> Found this thread rather late, but: the other way to do that would be a thiserror type with one branch for Trap and another for other errors.</p>",
        "id": 206354791,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596904571
    },
    {
        "content": "<p>Then it's a simple match rather than a downcast.</p>",
        "id": 206354799,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1596904586
    }
]