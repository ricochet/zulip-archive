[
    {
        "content": "<p>I'm trying to manually add a <code>start</code>section to the final composed wasm.  My wat then ends with :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$___start</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"s\">\"___start\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"cp\">$___start</span>\n</code></pre></div>\n<p>I put that back through <code>wasm-tools parse</code> and run it with <code>wasmtime run --wasm component-model c:\\tmp\\calculator.start.wasm</code> and get the message</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"mi\">3</span>: <span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x11711d4</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Which indicates it can't find instance 3, but even if  I put 0 there (and I think 3 is correct), I get the same error.  I must have a t least one instance in the wasm, in fact it looks like there are up to 26 <code>core instance</code> sections, so confused that the error is index out of bounds.</p>",
        "id": 406998843,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702175761
    },
    {
        "content": "<p>I think the problem is there are no \"core component\" sections at this level.   There are \"component\" sections, so maybe the <code>func</code> should not have <code>core func</code> but something else.</p>",
        "id": 407118000,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702251226
    },
    {
        "content": "<p>If it works I'd recommend using <code>$</code>-names instead of raw indices. For example tag the core instance with <code>\"__start\"</code> with <code>$foo</code> and then use <code>$foo</code> there and that might help surface whether the <code>$foo</code> instance is in or out of scope</p>",
        "id": 407271157,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1702310619
    },
    {
        "content": "<p>Thanks I will try that, I also need to understand better the composed structure</p>",
        "id": 407271487,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702310703
    },
    {
        "content": "<p>I'm still trying to get this wat right for defining a <code>start</code>.  I have a question about</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">20</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n</code></pre></div>\n<p>(there are indices because it is the output of <code>wasm-tools print</code> and changing them to names is not trivial).  If component 0 exports a function, does the instance automatically export that funciton, or does it need to be an inline export?  I did try </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"p\">)))</span>\n</code></pre></div>\n<p>but that doesn't seem to be the right syntax:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">(</span><span class=\"err\">`</span>\n<span class=\"w\">     </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">c</span>:<span class=\"err\">\\</span><span class=\"n\">tmp</span><span class=\"err\">\\</span><span class=\"n\">calculator</span><span class=\"p\">.</span><span class=\"n\">wat</span>:<span class=\"mi\">6674915</span>:<span class=\"mi\">55</span>\n<span class=\"w\">      </span><span class=\"o\">|</span>\n<span class=\"w\"> </span><span class=\"mi\">6674915</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"o\">|</span>\n</code></pre></div>",
        "id": 407347295,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702342569
    },
    {
        "content": "<p>ah sorry, got that wrong <code>(with \"____start\" (instance (export \"____start\" (func 18))))</code> seems to parse ok.  Now to work out how to reference that for the <code>start ....</code></p>",
        "id": 407349139,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702343321
    },
    {
        "content": "<p>Should I alias it again in the outer scope, something like </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">20</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"p\">))))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"s\">\"____start\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"w\"> </span><span class=\"cp\">$____start</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>(this doesn't parse, btw, I'm just trying things :-)</p>",
        "id": 407352321,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702345055
    },
    {
        "content": "<p>maybe I should be asking a more fundamental question, if a component has a <code>start</code> section, does it need to be exposed all the way up through the composition, or should the host call <code>start</code> functions whatever level they are at?</p>",
        "id": 407358999,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702347953
    },
    {
        "content": "<p>The <code>start</code> section can appear anywhere in a component, but I should probably also confirm that you're aware that this is (or at least should be) a gated feature and is largely unimplemented in Wasmtime/tooling.</p>",
        "id": 407497622,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1702393471
    },
    {
        "content": "<p>Right, but I'm running out of ideas of how to solve this.  One of the ideas I have left is to fill out the implementations for <code>start</code> at least for functions without <code>value</code>s</p>",
        "id": 407497919,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702393557
    },
    {
        "content": "<p><a href=\"#narrow/stream/217126-wasmtime/topic/wamtim.20run.20--wasm.20component-model.20and.20start/near/407497919\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"217126\" href=\"/#narrow/stream/217126-wasmtime/topic/compontent.20.20model.20wasm.20-.3E.20core.20wasm\">#wasmtime &gt; compontent  model wasm -&gt; core wasm</a> by <span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span>.</p>",
        "id": 407498086,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702393599
    },
    {
        "content": "<p>If you require the component-model <code>start</code> function to work it won't be easy and I'd recommend trying to avoid it. It's got some pretty fundamental design questions associated with it so it's not as simple as just implementing a few <code>unimplemented!()</code> blocks in Wasmtime</p>",
        "id": 407498247,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1702393642
    },
    {
        "content": "<p>Thanks, ok point taken.  I can probably disable getting all the environment variables from dotnet and then Wasi libc should lazy load.  That might be acceptable upstream as long as it is temporary.</p>",
        "id": 407499870,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702394105
    },
    {
        "content": "<p>I mean make <a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.environment.getenvironmentvariables?view=net-8.0\">https://learn.microsoft.com/en-us/dotnet/api/system.environment.getenvironmentvariables?view=net-8.0</a> throw a PlatformNotSupportedException for Wasm/Wasi</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://learn.microsoft.com/en-us/dotnet/api/system.environment.getenvironmentvariables?view=net-8.0\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3ce17f2b2911dcb735720cc46e75758679339053\\/68747470733a2f2f6c6561726e2e6d6963726f736f66742e636f6d2f656e2d75732f6d656469612f6f70656e2d67726170682d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://learn.microsoft.com/en-us/dotnet/api/system.environment.getenvironmentvariables?view=net-8.0\" title=\"Environment.GetEnvironmentVariables Method (System)\">Environment.GetEnvironmentVariables Method (System)</a></div><div class=\"message_embed_description\">Retrieves all environment variable names and their values. </div></div></div>",
        "id": 407500185,
        "sender_full_name": "Scott Waye",
        "timestamp": 1702394183
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 407722137,
        "sender_full_name": "Notification Bot",
        "timestamp": 1702472668
    }
]