[
    {
        "content": "<p>It seems like there's two different ways to add a module to a linker and get the <code>_start</code> symbol in it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Using module + get_default</span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">module</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">get_default</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">);</span>\n\n<span class=\"c1\">// Using instantiate + get_typed_func</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>However, the first option resets the module's memory before every <code>func.call()</code> (meaning all globals are reset to their initial values each time), whereas the second doesn't. What's the difference between these and how can I change this behaviour for each of them?</p>",
        "id": 341088477,
        "sender_full_name": "squirl",
        "timestamp": 1678530145
    },
    {
        "content": "<p>In wasi you are only allowed to call _start once.</p>",
        "id": 341181281,
        "sender_full_name": "bjorn3",
        "timestamp": 1678566002
    },
    {
        "content": "<p>Wasi programs that export a _start are so-called “commands” - they can be instantiated and run once, and should not run multiple times. This restriction exists to get things working with libc. the linker get_default knows about this pattern and enforces it for you, but the instantiate &amp; func call does not.</p>",
        "id": 341320492,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1678645687
    },
    {
        "content": "<p>if you want to use wasi in a program that has multiple export funcs called on the same instantance, you want to compile the wasi program differently - use the <code>-mexec-model=reactor</code> cflag in wasi-sdk, or crate type <code>cdylib</code> on a rust program</p>",
        "id": 341320886,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1678645905
    }
]