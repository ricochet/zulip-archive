[
    {
        "content": "<p>In the preview2 WASI implementation I'd like the ability for child resources to obtain mutable access to their parent. For most cases I can achieve this by storing a <code>Resource&lt;TParent&gt;</code> in the child resource and then, within the child methods, use <code>self.table_mut()</code> to get a mutable reference to its parent. One roadblock, however, is <code>Subscribe</code>. The current design of that trait prohibits access the ResourceTable from within the <code>ready</code> implementation.</p>\n<p>I have a refactor in mind that would enable this, but this will require a change in the signature of <code>Subscribe</code>.</p>\n<p>From:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[async_trait::async_trait]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Subscribe</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>To:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Subscribe</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll_ready</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">table</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Would this be OK?</p>",
        "id": 417125363,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705874300
    },
    {
        "content": "<p>What is the need for <code>Context&lt;'_&gt;</code>?</p>",
        "id": 417284946,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1705946054
    },
    {
        "content": "<p>What I have in mind is something like this: (abbreviated)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[async_trait::async_trait]</span>\n<span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">WasiView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">poll</span>::<span class=\"n\">Host</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">poll</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">pollables</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">PollableResource</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">futures</span>::<span class=\"n\">future</span>::<span class=\"n\">poll_fn</span><span class=\"p\">(</span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">cx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n\n<span class=\"w\">            </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pollable</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">pollables</span><span class=\"p\">.</span><span class=\"n\">iter_mut</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">pollable</span><span class=\"p\">.</span><span class=\"n\">poll_ready</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"c1\">// HERE</span>\n<span class=\"w\">                    </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(())</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                        </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">                    </span><span class=\"p\">}</span>\n<span class=\"w\">                    </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">Poll</span>::<span class=\"n\">Pending</span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">Poll</span>::<span class=\"n\">Ready</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"p\">})</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 417288844,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705947459
    },
    {
        "content": "<p>Giving access to the table I think would make sense yeah, but not being able to use <code>async</code> would I think be a pretty big thing to overcome for consumers. While it's possible to translate all the existing things to manual state machines it's pretty nice being able to use <code>async</code>.</p>\n<p>My knee-jerk to this was \"Could <code>&amp;ResourceTable</code> be passed as an argument to the <code>async fn</code>? Given the recent de-<code>Sync</code>-ification though I think that would mean that the returned future wouldn't be <code>Send</code> so that probably wouldn't work.</p>\n<p>That being said this is definitely something we've felt, there's internal <code>Arc</code>s/etc to handle this ownership boundary.</p>",
        "id": 417293391,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705949048
    },
    {
        "content": "<blockquote>\n<p>\"Could &amp;ResourceTable be passed as an argument to the async fn? Given the recent de-Sync-ification though I think that would mean that the returned future wouldn't be Send so that probably wouldn't work.</p>\n</blockquote>\n<p>Also, then you wouldn't be able to poll more than one pollable. Because the mutable reference would be moved into the first future.</p>\n<blockquote>\n<p>not being able to use async would I think be a pretty big thing to overcome for consumers.</p>\n</blockquote>\n<p>poll_ready is lower level than async so it should be pretty straightforward to build <code>async</code> implementations on top of poll_ready. E.g.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[async_trait::async_trait]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Subscribe</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll_ready</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">table</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">ready</span><span class=\"p\">().</span><span class=\"n\">as_mut</span><span class=\"p\">().</span><span class=\"n\">poll</span><span class=\"p\">(</span><span class=\"n\">cx</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Either within one single trait, or as two separate traits</p>",
        "id": 417294903,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705949639
    },
    {
        "content": "<p>rust doesn't really do the pattern where you must implement at most one method well unfortunately, b/c if callers call <code>ready</code> instead of <code>poll_ready</code> they'll get the wrong behavior if you override <code>poll_ready</code> only</p>",
        "id": 417295368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705949803
    },
    {
        "content": "<p>Yeah, so then as two separate traits</p>",
        "id": 417295474,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705949839
    },
    {
        "content": "<p>I could see something like that working yeha</p>",
        "id": 417295504,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705949850
    },
    {
        "content": "<p>where if you want <code>async</code> you can and if you don't you don't have to</p>",
        "id": 417295545,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705949866
    },
    {
        "content": "<p>Roughly:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Pollable</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">poll_ready</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cx</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Context</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">table</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">ResourceTable</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Poll</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[async_trait::async_trait]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">Subscribe</span>: <span class=\"nb\">Send</span> <span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>where <code>Subscribe</code> is a convenience interface over <code>Pollable</code></p>",
        "id": 417295920,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705950018
    },
    {
        "content": "<p>yeah that looks reasonable to me</p>",
        "id": 417296049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950064
    },
    {
        "content": "<p>and an adapter to make a <code>Pollable</code> from a <code>Subscribe</code> or something like that</p>",
        "id": 417296071,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705950073
    },
    {
        "content": "<p>ok thanks i missed the change from <code>async fn</code> to <code>-&gt; Poll</code>, so yeah monday morning coffee problem</p>",
        "id": 417299870,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1705951485
    },
    {
        "content": "<p>i think the design you just came to with alex sounds right?</p>",
        "id": 417299992,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1705951537
    },
    {
        "content": "<p>ive found myself wondering if theres some better way to hide the implementation detail of ResourceTable so that we can have much more straightforward references back and forth between children/parents</p>",
        "id": 417300241,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1705951624
    },
    {
        "content": "<p>\"sure would be nice to have <code>Gc&lt;T&gt;</code>\" heh</p>",
        "id": 417300567,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705951738
    },
    {
        "content": "<p>things of that nature</p>",
        "id": 417300852,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1705951826
    }
]