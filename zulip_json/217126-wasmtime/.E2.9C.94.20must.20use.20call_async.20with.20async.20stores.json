[
    {
        "content": "<p>I'm having this error:</p>\n<p>'thread 'main' panicked at 'must use <code>call_async</code> with async stores', /.cargo/registry/src/github.com-1ecc6299db9ec823/wasmtime-5.0.0/src/func/typed.rs:83:9</p>\n<p>code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_binary</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WASM</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">tokio</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">cx</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cx</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap1_async</span><span class=\"p\">(</span><span class=\"s\">\"env\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"send_request\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">send_request</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Any hint what I'm doing wrong?</p>",
        "id": 323744039,
        "sender_full_name": "Víctor García",
        "timestamp": 1674745817
    },
    {
        "content": "<p>Could you include more of the backtrace? i.e. where is the panic originating in your sample code?</p>",
        "id": 323746241,
        "sender_full_name": "Lann Martin",
        "timestamp": 1674746339
    },
    {
        "content": "<p>you'll want to enable <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.async_support\"><code>Config::async_support</code></a> I think</p>",
        "id": 323746391,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674746370
    },
    {
        "content": "<p>oh wait sorry now I see that it's enabled</p>",
        "id": 323746443,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674746382
    },
    {
        "content": "<p>sorry yes, a backtrace or more sample code is required to diagnose</p>",
        "id": 323746564,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1674746407
    },
    {
        "content": "<p>Solved. Some functions used in send_request used get_export, and I haven't changed the call by call_async. This is one example:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">alloc_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"alloc\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">into_func</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">alloc_func</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">typed</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context</span><span class=\"p\">())</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">value</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"k\">await</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 323750959,
        "sender_full_name": "Víctor García",
        "timestamp": 1674747557
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> has marked this topic as resolved.</p>",
        "id": 323753537,
        "sender_full_name": "Notification Bot",
        "timestamp": 1674748196
    },
    {
        "content": "<p>I've come across a strange error, and can't find any references. Hopefully it's just me missing something fundamental.</p>\n<p>I've got a small wasm-lib written in rust using <code>quickjs-wasm-rs</code> to evaluate some js in wasm:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">quickjs_wasm_rs</span>::<span class=\"p\">{</span><span class=\"n\">Context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Value</span><span class=\"p\">};</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[no_mangle]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"n\">i</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Context</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">eval_global</span><span class=\"p\">(</span><span class=\"s\">\"name\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"const f = () =&gt; 1; f()\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">r</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I've compiled this to the <code>wasm32-wasi</code> target with cargo, and it works fine when I invoke it using the wasmtime-cli, like <code>wasmtime myModule.wasm --invoke test</code>, but when I try and embed it I get this error: <code>Error: expected 8 imports, found 0</code></p>\n<p>This is what my embedding-program looks like atm. it's almost exactly like in one of the wasmtime examples: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"o\">*</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">default</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Module</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target/wasm32-wasi/debug/sbox_sandbox.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[])</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">res</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why am I getting this error, and what do I need to do to make this work? And why does it work with wasmtime-cli but not while embedding?</p>",
        "id": 324836280,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675146572
    },
    {
        "content": "<p>You are missing wasmtime_wasi to define all wasi functions used by your wasm module.</p>",
        "id": 324838925,
        "sender_full_name": "bjorn3",
        "timestamp": 1675148064
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> , thanks for your reply!<br>\nWhen I skimmed through the quickstart-guide and examples I dont think I saw anything about this - would you be able to point me towards a code example?</p>\n<p>How does wasmtime-cli deal with it? Do you know uf its making assumptions of its own?</p>",
        "id": 324840191,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675148696
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi/main.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi/main.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi/main.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/07cc0a36003bce36ed09259782b7530f991792ee\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303931303331383037333261623565373431366235626335393437623231663430306334636432393162386138393739303861613336303561306438366266612f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi/main.rs\" title=\"wasmtime/main.rs at main · bytecodealliance/wasmtime\">wasmtime/main.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 324840576,
        "sender_full_name": "bjorn3",
        "timestamp": 1675148862
    },
    {
        "content": "<p>wasmtime-cli adds wasmtime-wasi by default.</p>",
        "id": 324840656,
        "sender_full_name": "bjorn3",
        "timestamp": 1675148887
    },
    {
        "content": "<p>The important parts are wasmtime_wasi::add_to_linker and putting WasiCtx in the Store.</p>",
        "id": 324840762,
        "sender_full_name": "bjorn3",
        "timestamp": 1675148949
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 324986209,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675190037
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"264278\">bjorn3</span> <a href=\"#narrow/stream/217126-wasmtime/topic/.E2.9C.94.20must.20use.20call_async.20with.20async.20stores/near/324840762\">said</a>:</p>\n<blockquote>\n<p>The important parts are wasmtime_wasi::add_to_linker and putting WasiCtx in the Store.</p>\n</blockquote>\n<p>19:33<br>\nGreat, that indeed does work, thank you!</p>\n<p>Regarding these WasiCtxBuilder, are there any convention on settings on a module executing untrusted javascript? I want to keep policies as strict as possible, everything the untrusted code needs will be provided as arguments to the function anyway, so no need to allow any system calls.<br>\nI looked at the docs for wasmtime-wasi, but it's very sparse to say the least :D any idea what inherit_stdio and inherit_args really means in terms of permissions within the wasm-module?</p>",
        "id": 324986321,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675190060
    },
    {
        "content": "<p>\"inherit\" in that context means to use the host OS process' stdio and args</p>",
        "id": 324987773,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1675190430
    },
    {
        "content": "<p>ah ok, so better strip that away then. Would leaving it at <code>let wasi = WasiCtxBuilder::new().build();</code> make for a safe eval of untrusted code?</p>",
        "id": 324988905,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675190728
    },
    {
        "content": "<p>Yes; that'll set up the guest with a stdin/stdout/stderr that behave as if they're connected to /dev/null, and no args/env vars/preopens</p>",
        "id": 324989295,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1675190833
    },
    {
        "content": "<p>Ah, just realized the <code>typed()</code> only support numerical types <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> perhaps writing stdout somehwhere could perhaps still be considered safe - or is there a better way to get the results back, as bytes perhaps..?</p>",
        "id": 324992831,
        "sender_full_name": "Jakob Lilliemarck",
        "timestamp": 1675191873
    },
    {
        "content": "<p>WasiCtx has a <code>set_stdout</code> function where you can give it a <code>Box&lt;dyn WasiFile&gt;</code> which can be eg. a <code>WritePipe</code>. There's an example of getting the bytes <a href=\"https://docs.rs/wasi-common/latest/wasi_common/pipe/struct.WritePipe.html\">here</a>.</p>",
        "id": 325000272,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1675194007
    }
]