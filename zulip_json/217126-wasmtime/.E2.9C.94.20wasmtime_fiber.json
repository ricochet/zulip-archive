[
    {
        "content": "<p>Apologies if this is double posting. I am new to Zulip. I tried posting this in wasmtime, but then it vanished (and I can't see it), so I'm not sure if the post went through or not.</p>\n<p>I have a question regarding <a href=\"https://docs.rs/wasmtime-fiber/latest/wasmtime_fiber/struct.Suspend.html#method.suspend\">https://docs.rs/wasmtime-fiber/latest/wasmtime_fiber/struct.Suspend.html#method.suspend</a></p>\n<ol>\n<li>What problem does wasmtime_fiber solve? I see that we can create a (relatively) chap stack, but not sure where this goes from here.</li>\n<li>How does the suspend func work? If a fiber is running, it utilizes the host thread right ? Meaning the host thread can't call suspend -- so who/what is calling suspend ? Is a different thread doing so? [And if so, is this all thread safe] ?</li>\n</ol>\n<p>Thanks!</p>",
        "id": 402133159,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700020708
    },
    {
        "content": "<p>FWIW the <code>wasmtime-fiber</code> crate is a low-level library that isn't intended necessarily to be used as a general purpose crate. It's primarily there to enable Wasmtime's async implementation.</p>\n<p>That being said the solution it provides for Wasmtime is the ability to suspend a WebAssembly computation by capturing its native stack. The fiber itself calls suspend to return control flow to the original thread which started the fiber and then the fiber can be resumed at a later time</p>",
        "id": 402263347,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700060637
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general/topic/wasmtime_fiber\">#general &gt; wasmtime_fiber</a> by <span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span>.</p>",
        "id": 402282441,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700065653
    },
    {
        "content": "<p>Sorry if I am missing something very basic. Is there a way to use wasmtime-fiber as follows:</p>\n<ol>\n<li>create a fiber</li>\n<li>add fuel</li>\n<li>when fuel runs out, instead of aborting the wasmtime runtime, have it call suspend </li>\n</ol>\n<p>I see the wasmtime-fiber crate; I see the wasmtime fuel functions. It is not obvious to me how to use the two together.</p>",
        "id": 403065430,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700439394
    },
    {
        "content": "<p>Users of the <code>wasmtime</code> crate don't use  <code>wasmtime-fiber</code> at all, it's just an internal implementation detail. Everything is handled for you when using async in Wasmtime</p>",
        "id": 403083005,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700449340
    },
    {
        "content": "<p>I want to build a toy version of Beam / Lunatic, but with wasmtime as the 'lightweight' processes.</p>\n<p>Looking at <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Store.html#method.fuel_async_yield_interval\">https://docs.wasmtime.dev/api/wasmtime/struct.Store.html#method.fuel_async_yield_interval</a> this seems a bit too high level, as it auto re-marks self as \"to run\"</p>\n<p>I want a system where I can</p>\n<ol>\n<li>have 10k wasmtime runtimes</li>\n<li>give each a different amount of fuel, tell it to run</li>\n<li>after fuel is consumed, have it notify me (instead of re-marking self for running)</li>\n<li>my logic code decides how much fuel to give to each suspended wasmtime, and tell it to run again</li>\n</ol>\n<p>In particular, I want this low level control where when something runs out of fuel, it notifies \"me\" (my code); my code puts it on some queue, at some later point adds it more fuel, and tells it to re-run.</p>\n<p>I want to control the logic of after \"wasmtime out of fuel, suspended\" to \"wasmtime added fuel, rerun\"</p>\n<p>whereas the existing logic seems to just auto re-subscribe self to re-run.</p>",
        "id": 403103970,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700463040
    },
    {
        "content": "<p>In particular, neither <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.out_of_fuel_trap\">https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.out_of_fuel_trap</a> (kills wasmtime on out of fuel)<br>\nnor<br>\n<a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.out_of_fuel_async_yield\">https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.out_of_fuel_async_yield</a> (auto refills wasmtime on out of fuel, then kills it after refills done)<br>\ndoes what I want</p>\n<p>I am looking for something where I can say:</p>\n<ol>\n<li>run this wasmtime for X units of fuel</li>\n<li>then I move on, and afterwards, maybe I choose to run it for X1 units of fuel</li>\n</ol>\n<p>the existing primitives seems to auto-refill everything and let the async runtime sort out who runs what</p>\n<p>I want a bit more manual control</p>",
        "id": 403104704,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700463556
    },
    {
        "content": "<p>and if I use <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.epoch_deadline_callback\">https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.epoch_deadline_callback</a> it forces me then &amp; there to decide whether to kill or refill a wasmtime</p>\n<p>instead, I'd prefer to say: \"I'm going to throw this suspended wasmtine on a queue, and at some later point, figure out whether to kill it / refill it and rerun / ...\"</p>",
        "id": 403104906,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700463668
    },
    {
        "content": "<p>I think you could probably get the effect you're looking for with a custom <code>Future</code> wrapper though it may be a little tricky depending on exactly what you're trying to accomplish. You could effectively \"pause\" execution by returning <code>Poll::Pending</code> from the wrapper's <code>Future::poll</code> and arranging for a wakeup based on your own logic. One hiccup is that I believe you <em>wouldn't</em> be able to easily control fuel/epoch refilling outside of the existing methods available as the inner Future would hold a <code>&amp;mut Store</code>.</p>",
        "id": 403176362,
        "sender_full_name": "Lann Martin",
        "timestamp": 1700489022
    },
    {
        "content": "<p>It also wouldn't be too hard to add an out-of-fuel callback similar to how epochs have a custom callback as well</p>",
        "id": 403186233,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700491878
    },
    {
        "content": "<p>Are you referring to <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.epoch_deadline_callback\">https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.epoch_deadline_callback</a> and <a href=\"https://docs.rs/wasmtime/latest/wasmtime/enum.UpdateDeadline.html\">https://docs.rs/wasmtime/latest/wasmtime/enum.UpdateDeadline.html</a></p>\n<p>The problem I see there is that it demands, at the moment that it runs out of fuel, that I immediately decided what to do with it: kill, continue, or yield (which says \"rerun, at the async runtime's convenience\").</p>\n<p>I'm looking for something where the callback gets something (say, like a <code>Rc&lt;RefCell&lt;wasmtime-fiber&gt;&gt;</code>) which it can throw onto a queue, and deal with it later.</p>",
        "id": 403246212,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700514746
    },
    {
        "content": "<p>in Rust, the value you get to manipulate with a suspended async computation is called a Future (probably a Pin&lt;Box&lt;dyn Future&gt;&gt;)</p>",
        "id": 403246387,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1700514834
    },
    {
        "content": "<p>and when the epoch deadline callback returns a Yield, that means the Future currently executing wasm will return a Poll::Pending</p>",
        "id": 403246469,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1700514864
    },
    {
        "content": "<p>so, execution will be suspended until you again call <code>Future::poll</code> on that Future.</p>",
        "id": 403246531,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1700514900
    },
    {
        "content": "<p>Yes the callback would be combined with what Lann mentioned above where you might have a wrapper around Future for doing the enqueueing you're desiring</p>",
        "id": 403246599,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700514926
    },
    {
        "content": "<p>using the pending signal Pat's talking about</p>",
        "id": 403246623,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1700514939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> : I am familiar with Rust + async Rust. I am not (yet) familiar with the wasmtime api. It looks like I am misunderstanding something.</p>\n<p>Atter an epoch deadline callback, to resume the wasmtime \"lightweight process\", I call a <code>foo.await</code> right? Where/how do I get this <code>foo</code> ?</p>",
        "id": 403261947,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700522264
    },
    {
        "content": "<p>go re-familiarize yourself with async rust. foo is a future, and the <code>.await</code> on it is a call to future::poll.</p>",
        "id": 403265536,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1700524372
    },
    {
        "content": "<p>I think you misunderstood my question.</p>\n<p>Here is the function</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">epoch_deadline_callback</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">callback</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnMut</span><span class=\"p\">(</span><span class=\"n\">StoreContextMut</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"n\">UpdateDeadline</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">inner</span><span class=\"p\">.</span><span class=\"n\">epoch_deadline_callback</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">));</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p><a href=\"https://docs.rs/wasmtime/latest/src/wasmtime/store.rs.html#935-940\">https://docs.rs/wasmtime/latest/src/wasmtime/store.rs.html#935-940</a></p>\n<p>So now my question is: for us to call <code>foo.await</code>, we need a <code>foo</code> -- but our callback gets a <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.StoreContextMut.html\">https://docs.rs/wasmtime/latest/wasmtime/struct.StoreContextMut.html</a> .</p>\n<p>Where do we get the FUTURE from ?</p>",
        "id": 403267530,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700525501
    },
    {
        "content": "<p><code>Function::call_async</code> and friends return a <code>Future</code>. that is the future that will return Pending when the epoch causes it to yield</p>",
        "id": 403270259,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1700526814
    },
    {
        "content": "<p>I think this clarifies everything up. I will test out some code. Thanks!</p>",
        "id": 403275762,
        "sender_full_name": "zeroexcuses",
        "timestamp": 1700528873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"309488\">zeroexcuses</span> has marked this topic as resolved.</p>",
        "id": 403327373,
        "sender_full_name": "Notification Bot",
        "timestamp": 1700555290
    }
]