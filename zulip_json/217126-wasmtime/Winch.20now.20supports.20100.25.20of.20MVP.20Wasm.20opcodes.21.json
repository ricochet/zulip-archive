[
    {
        "content": "<p>Winch, the baseline compiler for Wasmtime, now supports all of the MVP Wasm opcodes as of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\">https://github.com/bytecodealliance/wasmtime/pull/7894</a>.</p>\n<p>Congrats to <span class=\"user-mention\" data-user-id=\"411395\">@Saúl Cabrera</span>, <span class=\"user-mention\" data-user-id=\"477345\">@Jeff Charles</span>, <span class=\"user-mention\" data-user-id=\"506239\">@Trevor Elliott</span> and everyone else who contributed to Winch on reaching this milestone! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> </p>\n<p>Excited to have a fast-compilation tier and a non-optimizing compiler we can eventually leverage for debugging!</p>\n<p><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\">https://github.com/bytecodealliance/wasmtime/issues/6528</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/28c4d893c2c61622bf358827f8b83f6dd68a1a22\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316265366364643538323134383739343134386435396463383666363063366263333132663932336166643532663966396337616533373834623531373562302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37383934)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7894\" title=\"winch: Add support for WebAssembly loads/stores by saulecabrera · Pull Request #7894 · bytecodealliance/wasmtime\">winch: Add support for WebAssembly loads/stores by saulecabrera · Pull Request #7894 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Closes #6528\nThis patch adds support for all the instructions involving WebAssembly loads and stores for 32-bit memories. Given that the memory64 proposal is not enabled by default, this patch does...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0be98a979ccbbd9bd34283f88cdc90c10e4206a4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373434303730383839636438643965626439613764633566613336613331393834666161383765303531613239363835386365356234393932663339636465322f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36353238)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6528\" title=\"Winch Core Wasm Opcode Support · Issue #6528 · bytecodealliance/wasmtime\">Winch Core Wasm Opcode Support · Issue #6528 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">During the debugging meeting on June 1, 2023, we discussed opening an issue to track the missing Core Wasm opcodes in Winch. The objective of this issue is to make it easier for potential contribut...</div></div></div>",
        "id": 420687611,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1707496127
    }
]