[
    {
        "content": "<p>I've got a newbe question, I'm sorry if it's not the right place to ask.</p>\n<p>My primary goal is to run some JS code inside of project written in Go.  I've heard that it can be done by compiling JS code to WASM (using wasm components) and than use wasm runtime to then run it inside target codebase.</p>\n<p>I've found this tutorial: <a href=\"https://github.com/bytecodealliance/jco/blob/main/docs/src/example.md\">https://github.com/bytecodealliance/jco/blob/main/docs/src/example.md</a></p>\n<p>I've created wasm file from js code as was describe there. So as a result, I've got cowsay.wasm file:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">jco</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">cowsay</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">clocks</span><span class=\"o\">/</span><span class=\"n\">monotonic</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">error</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">streams</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stdin</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stdout</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">stderr</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">output</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">stdin</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">stdout</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">stderr</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">clocks</span><span class=\"o\">/</span><span class=\"n\">wall</span><span class=\"o\">-</span><span class=\"n\">clock</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">filesystem</span><span class=\"o\">/</span><span class=\"n\">types</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">filesystem</span><span class=\"o\">/</span><span class=\"n\">preopens</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">wasi</span>:<span class=\"nc\">random</span><span class=\"o\">/</span><span class=\"n\">random</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"p\">;</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">cow</span>: <span class=\"nc\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">enum</span> <span class=\"nc\">cows</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">default</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">owl</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">say</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">text</span>: <span class=\"nc\">string</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cow</span>: <span class=\"nc\">option</span><span class=\"o\">&lt;</span><span class=\"n\">cows</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">string</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The important step is omitted in this tutorial, which is: how to execute it?</p>\n<p>I've tried using wasmtime, but result looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">cowsay</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cowsay</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">exported</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span>:<span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">run</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">present</span>\n</code></pre></div>\n<p>I've tried jco run, but result looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">jco</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">cowsay</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">execute</span><span class=\"p\">.</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/main/docs/src/example.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cb66e95796076cf7af12b607a3b30f46cc57bc52/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643464666437303035343063363864313831643461386137646231623932333033353662346436326561636136653263666332356666333030316533313737612f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/main/docs/src/example.md\" title=\"jco/docs/src/example.md at main · bytecodealliance/jco\">jco/docs/src/example.md at main · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 438103138,
        "sender_full_name": "Dd",
        "timestamp": 1715427226
    },
    {
        "content": "<p>You probably need something like<code>wasmtime run --invoke say cowsay.wasm arg1 arg2</code>. Without <code>--invoke</code> wasmtime will invoke the <code>run</code> method of the <code>wasi:cli</code> interface.</p>",
        "id": 438111807,
        "sender_full_name": "bjorn3",
        "timestamp": 1715436380
    },
    {
        "content": "<p>Thank you for reply, but I tried that and the result is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">say</span><span class=\"w\"> </span><span class=\"n\">cowsay</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">arg1</span><span class=\"w\"> </span><span class=\"n\">arg2</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cowsay</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">using</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">--</span><span class=\"n\">invoke</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">components</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">supported</span>\n</code></pre></div>",
        "id": 438117527,
        "sender_full_name": "Dd",
        "timestamp": 1715442693
    },
    {
        "content": "<p>Yeah we haven’t gotten to invoke for components yet, it requires a little more machinery than we have right at the moment. If you want to invoke that function you’ll need to write a little bit of rust code using wasmtime the crate, or alternatively js using jco transpile</p>",
        "id": 438119211,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715444572
    },
    {
        "content": "<p>Here’s one example of how you use wasmtime for that <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/component/main.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/examples/component/main.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/component/main.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2f3226c8970cc822335c57da1754e943cef60c9f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306432643061366564646565653033663438653663323263336330396438383332363137326666366265646133383734653039363737363439366261326165342f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/component/main.rs\" title=\"wasmtime/examples/component/main.rs at main · bytecodealliance/wasmtime\">wasmtime/examples/component/main.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 438119311,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715444668
    },
    {
        "content": "<p>Trying to wrap my head around wasi preview 2 &amp; struggling with basic imports. Am I missing something obvious here?</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>/tmp $ cat exit.wat\n(module\n\n  (import \"wasi:cli/exit\" \"exit\"\n    (func $exit (param i32)))\n\n  (func (export \"main\")\n    i32.const 42\n    call $exit)\n\n  )\n/tmp $ wat2wasm exit.wat\n/tmp $ wasmtime run -S cli exit.wasm\nError: failed to run main module `exit.wasm`\n\nCaused by:\n    0: failed to instantiate \"exit.wasm\"\n    1: unknown import: `wasi:cli/exit::exit` has not been defined\n</code></pre></div>",
        "id": 438143231,
        "sender_full_name": "Brandon Bloom",
        "timestamp": 1715472803
    },
    {
        "content": "<p>That’s a wasm module, which is a distinct binary (or wat) representation from a component. If you use wasm-tools (to substitute for wat2wasm) to convert between text and binary you can write your own that way. There’s examples of using wasm-tools dump here <a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/tests/cli/dump\">https://github.com/bytecodealliance/wasm-tools/tree/main/tests/cli/dump</a>, the inverse operation is available as well, ask —help because I’m on mobile</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/tests/cli/dump\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/576491798bbf809ae0622ac0ccb22e74d1f1d971/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346234653961623638323338326462316432393835623632366131303763623930333562643934386562353237656465363033393636666565653464383736322f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/tree/main/tests/cli/dump\" title=\"wasm-tools/tests/cli/dump at main · bytecodealliance/wasm-tools\">wasm-tools/tests/cli/dump at main · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 438145283,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1715475310
    },
    {
        "content": "<p>Thanks. I've seen the WIT syntax, but couldn't find any documentation of the s-expr WAT-style syntax for components. Given the lack of mention of the syntax or encoding, I just kind of assumed components \"macro-expanded\" down to normal wasm modules. Sounds like you're saying that's not true. Could you please point me to where these new formats are documented?</p>",
        "id": 438148035,
        "sender_full_name": "Brandon Bloom",
        "timestamp": 1715478375
    },
    {
        "content": "<p>I guess it doesn't exist yet, but will go here: <a href=\"https://github.com/WebAssembly/component-model/tree/main/spec\">https://github.com/WebAssembly/component-model/tree/main/spec</a></p>\n<p>I did manage to find <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md</a> and <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md</a> now... so I guess I'll study those. Sorry for the beginner question in what is probably the wrong channel :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/tree/main/spec\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5abcb773a0ef7c74a80fe18e45b76e0d03375bc6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363337623736383630313066643836306337333837323236343064386261363866656539383664643065363736343334316261346635386264376436346536392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/tree/main/spec\" title=\"component-model/spec at main · WebAssembly/component-model\">component-model/spec at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5abcb773a0ef7c74a80fe18e45b76e0d03375bc6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363337623736383630313066643836306337333837323236343064386261363866656539383664643065363736343334316261346635386264376436346536392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\" title=\"component-model/design/mvp/Explainer.md at main · WebAssembly/component-model\">component-model/design/mvp/Explainer.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5abcb773a0ef7c74a80fe18e45b76e0d03375bc6/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363337623736383630313066643836306337333837323236343064386261363866656539383664643065363736343334316261346635386264376436346536392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\" title=\"component-model/design/mvp/Binary.md at main · WebAssembly/component-model\">component-model/design/mvp/Binary.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 438160194,
        "sender_full_name": "Brandon Bloom",
        "timestamp": 1715493137
    }
]