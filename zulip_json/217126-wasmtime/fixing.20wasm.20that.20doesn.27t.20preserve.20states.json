[
    {
        "content": "<p>I can't find a Q&amp;A streams so please move this thread to wherever is appropriate!</p>\n<p>So lapce uses wasmtime to manage their plugins and this is the function that compiles/starts a wasm app from a wasm file <a href=\"https://github.com/lapce/lapce/pull/2090\">https://github.com/lapce/lapce/pull/2090</a><br>\nhowever, it had an issue where the wasm blob does not appear to have a persistent state (my plugin, written in rust, had a OnceCell that gets reset with every function call)<br>\nso i proposed a fix here <a href=\"https://github.com/lapce/lapce/pull/2090\">https://github.com/lapce/lapce/pull/2090</a><br>\ncan someone review the fix and/or the function it self?<br>\nI know that the Engine can probably be extracted out into a lazy static or smth like that</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lapce/lapce/pull/2090\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4c842152e17dbe0eeb8bf0427ead5d5bdd452e16\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633331383438363464323837663337323662656335303766373365383465373466383338353161353066346238346137633466303230313866663935353535342f6c617063652f6c617063652f70756c6c2f32303930)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lapce/lapce/pull/2090\" title=\"Properly instantiate the WASM blob and let it live inside the thread by hbina 路 Pull Request #2090 路 lapce/lapce\">Properly instantiate the WASM blob and let it live inside the thread by hbina 路 Pull Request #2090 路 lapce/lapce</a></div><div class=\"message_embed_description\">Signed-off-by: Hanif Ariffin hanif.ariffin.4326@gmail.com\n\n Added an entry to CHANGELOG.md if this change could be valuable to users</div></div></div>",
        "id": 324943635,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675179238
    },
    {
        "content": "<p>I'm not quite sure I understand the problem, but the unit of mutable state for wasmtime is the Store</p>",
        "id": 325045048,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1675210522
    },
    {
        "content": "<p>if you want to persist state, you will need to make an Instance on your Store, then get the handle_rpc func out of that Instance, and then anytime you do <code>handle_rpc.call(&amp;mut store)</code> it will be the same state underneath as the store had at the end of the last call</p>",
        "id": 325045304,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1675210681
    },
    {
        "content": "<p>Okay I read up a bit on WASI and the difference was basically that there are 2 types of WASM: Reactor and Command. Before, I was using it as a Command but now that I instantiate it, I should have a Reactor instead. But now I come into the problem of the environment variable not being set?<br>\nI have something like this in Lapce</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s\">\"VOLT_OS\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">consts</span>::<span class=\"n\">OS</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s\">\"VOLT_ARCH\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">consts</span>::<span class=\"n\">ARCH</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s\">\"VOLT_LIBC\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">volt_libc</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"VOLT_URI\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">Url</span>::<span class=\"n\">from_directory_path</span><span class=\"p\">(</span><span class=\"n\">volt_path</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"can't convert folder path to uri\"</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">.</span><span class=\"n\">as_ref</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stdin</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">wasi_common</span>::<span class=\"n\">pipe</span>::<span class=\"n\">ReadPipe</span>::<span class=\"n\">from_shared</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stdout</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">wasi_common</span>::<span class=\"n\">pipe</span>::<span class=\"n\">WritePipe</span>::<span class=\"n\">from_shared</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stdout</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">stderr</span><span class=\"p\">(</span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">wasi_common</span>::<span class=\"n\">pipe</span>::<span class=\"n\">WritePipe</span>::<span class=\"n\">from_shared</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">stderr</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">preopened_dir</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">Dir</span>::<span class=\"n\">open_ambient_dir</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">volt_path</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">ambient_authority</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"s\">\"/\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and then in the wasm plugin I have</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"envs:{:?}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">env</span>::<span class=\"n\">vars</span><span class=\"p\">().</span><span class=\"n\">collect</span>::<span class=\"o\">&lt;</span><span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">())</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but it is empty??</p>",
        "id": 325299828,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675300106
    },
    {
        "content": "<p>maybe this is relevant? <a href=\"https://github.com/bytecodealliance/wasmtime-py/issues/74#issuecomment-965536330\">https://github.com/bytecodealliance/wasmtime-py/issues/74#issuecomment-965536330</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py/issues/74#issuecomment-965536330\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6e99b5994694d400160859868d745343681107d8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333831323935386431663463663238613234313563356464376262333965366565343333613062363062633538343335663738326363333961333038626463382f62797465636f6465616c6c69616e63652f7761736d74696d652d70792f6973737565732f3734)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py/issues/74#issuecomment-965536330\" title=\"Env variables are not being passed to WASM 路 Issue #74 路 bytecodealliance/wasmtime-py\">Env variables are not being passed to WASM 路 Issue #74 路 bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">I&#39;m not having any success getting environment variables in the WASM environment. My code is below. There is a function written in C compiled to WASM that does a getenv(&quot;FOO&quot;) which i...</div></div></div>",
        "id": 325301159,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675301190
    },
    {
        "content": "<p>so it seems that I should call an exported function called <code>_initialize</code> but its not there? this crashes the thread</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">initialize</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"_initialize\"</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 325302173,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675302038
    },
    {
        "content": "<p>_initialize should already be called by wasmtime when instantiating.</p>",
        "id": 325344326,
        "sender_full_name": "bjorn3",
        "timestamp": 1675328602
    },
    {
        "content": "<p>It is possible that somewhere in wasi-libc or rust's libstd some initialization is missed for the reactor case.</p>",
        "id": 325344547,
        "sender_full_name": "bjorn3",
        "timestamp": 1675328673
    },
    {
        "content": "<p>but i dont have a reactor, i have a command. How do i compile my plugin to make  sure that it gets compiled as a reactor? <a href=\"https://github.com/lapce/lapce-rust.git\">https://github.com/lapce/lapce-rust.git</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lapce/lapce-rust.git\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a45da12e93bb52fd2a641026eaf232083b9d1a4f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396632363330396138373263336266306466323839346434393063633434396639336436313833356465656165313334346336373536363633666635663262622f6c617063652f6c617063652d72757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lapce/lapce-rust.git\" title=\"GitHub - lapce/lapce-rust\">GitHub - lapce/lapce-rust</a></div><div class=\"message_embed_description\">Contribute to lapce/lapce-rust development by creating an account on GitHub.</div></div></div>",
        "id": 325379092,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675339163
    },
    {
        "content": "<p>If the plugin is written in rust you can use the unstable <code>-Zwasi-exec-model=reactor</code>. If it is written in C I believe the flag to use is <code>-fexec-model=reactor</code> but I might be wrong about that one.</p>",
        "id": 325381594,
        "sender_full_name": "bjorn3",
        "timestamp": 1675339814
    },
    {
        "content": "<p>it is written in Rust. See <a href=\"https://github.com/lapce/lapce-rust/blob/master/src/main.rs#L31\">https://github.com/lapce/lapce-rust/blob/master/src/main.rs#L31</a></p>\n<p>which expands like so <a href=\"https://github.com/lapce/lapce-plugin-rust/blob/master/src/lib.rs#L99-L125\">https://github.com/lapce/lapce-plugin-rust/blob/master/src/lib.rs#L99-L125</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lapce/lapce-rust/blob/master/src/main.rs#L31\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a45da12e93bb52fd2a641026eaf232083b9d1a4f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396632363330396138373263336266306466323839346434393063633434396639336436313833356465656165313334346336373536363633666635663262622f6c617063652f6c617063652d72757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lapce/lapce-rust/blob/master/src/main.rs#L31\" title=\"lapce-rust/main.rs at master 路 lapce/lapce-rust\">lapce-rust/main.rs at master 路 lapce/lapce-rust</a></div><div class=\"message_embed_description\">Contribute to lapce/lapce-rust development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lapce/lapce-plugin-rust/blob/master/src/lib.rs#L99-L125\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d30d57e7a583399a26114e35822419f5b817ef15\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343066393035313539313339363439373130343133333766626335336564316366313032306231303066316337333630306663363661623631663931666437612f6c617063652f6c617063652d706c7567696e2d72757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lapce/lapce-plugin-rust/blob/master/src/lib.rs#L99-L125\" title=\"lapce-plugin-rust/lib.rs at master 路 lapce/lapce-plugin-rust\">lapce-plugin-rust/lib.rs at master 路 lapce/lapce-plugin-rust</a></div><div class=\"message_embed_description\">Contribute to lapce/lapce-plugin-rust development by creating an account on GitHub.</div></div></div>",
        "id": 325389861,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675342334
    }
]