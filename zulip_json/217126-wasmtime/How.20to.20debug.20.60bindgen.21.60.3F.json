[
    {
        "content": "<p>Hello,</p>\n<p>I have an issue that is driving me crazy. I use <a href=\"https://docs.rs/wasmtime/27.0.0/wasmtime/component/macro.bindgen.html\">https://docs.rs/wasmtime/27.0.0/wasmtime/component/macro.bindgen.html</a> with custom wit files and for some obscure reasons, my changes to the wit files have 0 effects on the generated bindings.</p>\n<p>I tried running <code>rustc --profile=check -- -Zunpretty=expanded</code> to see the result of the expansion of the macro and I see the code contains <code>const</code> str with the correct updated WIT files, but the generated types are stale and don't get updated... If I use <code>include_generated_code_from_file</code>, I end up with a file in the <code>target</code> directory without any bindings just some code related the the <code>Linker</code>. </p>\n<p>Anyone have experienced a similar issue?</p>\n<p>Alternatively, the macro system is pretty obscure to me and I was wondering if there was a cli around there to do good old <em>Just Work</em> <span aria-label=\"tm\" class=\"emoji emoji-2122\" role=\"img\" title=\"tm\">:tm:</span> code generation for host bindings with wasmtime?</p>",
        "id": 488184224,
        "sender_full_name": "raskyld",
        "timestamp": 1733949632
    },
    {
        "content": "<p>Have you tried <code>WASMTIME_DEBUG_BINDGEN=1</code> from the <a href=\"https://docs.rs/wasmtime/27.0.0/wasmtime/component/macro.bindgen.html#debugging-and-exploring\">debug section of the docs</a>? Is the issue that a recompile isn't happening on WIT file changes or that the changes aren't resulting in what you'd expect?</p>\n<p>Currently there's no CLI integration for bindings generation, it's only through the procedural macro</p>",
        "id": 488191881,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1733952497
    },
    {
        "content": "<p>I tried using the option in the macro :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// This is an in-source alternative to using `WASMTIME_DEBUG_BINDGEN`.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// Note that if this option is specified then the compiler will always</span>\n<span class=\"w\">    </span><span class=\"c1\">// recompile your bindings. Cargo records the start time of when rustc</span>\n<span class=\"w\">    </span><span class=\"c1\">// is spawned by this will write a file during compilation. To Cargo</span>\n<span class=\"w\">    </span><span class=\"c1\">// that looks like a file was modified after `rustc` was spawned,</span>\n<span class=\"w\">    </span><span class=\"c1\">// so Cargo will always think your project is \"dirty\" and thus always</span>\n<span class=\"w\">    </span><span class=\"c1\">// recompile it. Recompiling will then overwrite the file again,</span>\n<span class=\"w\">    </span><span class=\"c1\">// starting the cycle anew. This is only recommended for debugging.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// This option defaults to false.</span>\n<span class=\"w\">    </span><span class=\"n\">include_generated_code_from_file</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">false</span><span class=\"p\">,</span>\n</code></pre></div>",
        "id": 488192106,
        "sender_full_name": "raskyld",
        "timestamp": 1733952602
    },
    {
        "content": "<p>Basically, the only way I can really see the final types is through autocompletion with rust analyzer, or using the expansion with rustc but I don't see changes reflected</p>",
        "id": 488192436,
        "sender_full_name": "raskyld",
        "timestamp": 1733952710
    },
    {
        "content": "<p>For example, I see in the expanded code:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"cp\">#[component(variant)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">Stability</span><span class=\"w\"> </span><span class=\"p\">{</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"stable\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">Stable</span><span class=\"p\">((</span><span class=\"n\">Version</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Version</span><span class=\"o\">&gt;</span><span class=\"p\">)),</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"unstable\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">Unstable</span><span class=\"p\">((</span><span class=\"n\">Version</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Version</span><span class=\"o\">&gt;</span><span class=\"p\">)),</span>\n\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"unknown\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">Unknown</span><span class=\"p\">,</span>\n<span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Which is the old type defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">stability</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">stable</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">version</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"o\">&lt;</span><span class=\"n\">version</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unstable</span><span class=\"p\">(</span><span class=\"n\">tuple</span><span class=\"o\">&lt;</span><span class=\"n\">version</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"o\">&lt;</span><span class=\"n\">version</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unknown</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>But I tried changing that, for example to: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">stability</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">stable</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unstable</span><span class=\"p\">(</span><span class=\"kt\">u8</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">unknown</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I see the updated WIT content in the <code>const _: &amp;str</code> of the expanded code but the type is still the old one</p>",
        "id": 488193269,
        "sender_full_name": "raskyld",
        "timestamp": 1733953047
    },
    {
        "content": "<p>Wait nevermind..</p>\n<p>I just realised what is the problem, I have a crate with different host bindings split in different modules, each target a different world. And I just noticed the expanded code contains the content of <strong>ALL</strong> WIT packages, not just the one of the current module I was working with. And one of this package have a dependency on the module I was working and had the \"old\" version in its <code>deps</code> folder <span aria-label=\"man facepalming\" class=\"emoji emoji-1f926-200d-2642\" role=\"img\" title=\"man facepalming\">:man_facepalming:</span></p>",
        "id": 488194811,
        "sender_full_name": "raskyld",
        "timestamp": 1733953652
    },
    {
        "content": "<p>I think I just misused the macro, I tried to split the different package in different rust modules but that doesn't make sense since the macro already create sub-modules matching the package name and the interfaces names.. right?</p>\n<p>So I guess I should just use the macro at the root of my crate.</p>",
        "id": 488195794,
        "sender_full_name": "raskyld",
        "timestamp": 1733954071
    },
    {
        "content": "<p>Hey just making sure, but you're using <code>cargo expand</code> right along with the other tooling right? Luckily Alex already recommended the stuff for printing out the output, but <code>cargo expand</code> is really useful for quick spot checks/fast iteration</p>",
        "id": 488564934,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1733987181
    },
    {
        "content": "<p><code>cargo expand</code> is a wrapper around <code>rustc --profile=check -- -Zunpretty=expanded</code> If I am correct :D</p>",
        "id": 488576787,
        "sender_full_name": "raskyld",
        "timestamp": 1733992486
    },
    {
        "content": "<p>I usually place the macro call in <a href=\"http://lib.rs\">lib.rs</a> but what I've seen more than once is people doing <code>pub mod bindings { bindgen!(...); };</code> to have a namespace where only the generated code lives</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://lib.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a025d1dfcfcdb4f622e82e9f608412cba3162ba3/68747470733a2f2f6c69622e72732f6372617465732d6c6f676f2e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://lib.rs\" title=\"Lib.rs — home for Rust crates // Lib.rs\">Lib.rs — home for Rust crates // Lib.rs</a></div><div class=\"message_embed_description\">List of Rust libraries and applications. An unofficial experimental opinionated alternative to crates.io</div></div></div>",
        "id": 488611293,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1734003081
    }
]