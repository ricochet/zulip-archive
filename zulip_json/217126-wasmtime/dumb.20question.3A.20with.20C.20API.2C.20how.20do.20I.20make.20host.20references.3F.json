[
    {
        "content": "<p>I'm looking at the <a href=\"https://github.com/WebAssembly/wasm-c-api/blob/2ce1367c9d1271c83fb63bef26d896a2f290cd23/example/hostref.c\">https://github.com/WebAssembly/wasm-c-api/blob/2ce1367c9d1271c83fb63bef26d896a2f290cd23/example/hostref.c</a> example, but the relevant functions aren't implemented by wasmtime according to the documentation. <code>wasm_foreign_t</code> doesn't seem to be implemented at all!<br>\nHow am I supposed to do this from the C API?</p>",
        "id": 425684111,
        "sender_full_name": "Las",
        "timestamp": 1709988933
    },
    {
        "content": "<p>Could you describe a bit more about what you're trying to do with the C API? Wasmtime tries to implement what it can of the wasm-c-api repository but it can only do so much with the parts that are incompatible with Wasmtime</p>",
        "id": 425804438,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710103590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I wish to create values opaque to the module, that the module can pass around, e.g. wrappers around fds, and so I want to use externrefs, but I don’t see a way of making an arbitrary externref from the C API, i.e. <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.ExternRef.html#method.new\">https://docs.rs/wasmtime/latest/wasmtime/struct.ExternRef.html#method.new</a></p>",
        "id": 425815520,
        "sender_full_name": "Las",
        "timestamp": 1710114029
    },
    {
        "content": "<p>In the WASM C API you do this by creating a foreign and attaching host info.</p>",
        "id": 425815546,
        "sender_full_name": "Las",
        "timestamp": 1710114067
    },
    {
        "content": "<p>But this is unimplemented by wasmtime.</p>",
        "id": 425815570,
        "sender_full_name": "Las",
        "timestamp": 1710114096
    },
    {
        "content": "<p>Ah ok, in that case I'd recommend using an indexing scheme. Even if you could make an externref that's not well-integrated with wasm toolchains today, so instead I'd recommend having a table on the host of things and pass indices of that into wasm.</p>",
        "id": 425917354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710166263
    },
    {
        "content": "<p>That’s unfortunate, would you accept a PR that implements this part of the WASM C API? I think you can translate it cleanly into ExternRefs.</p>",
        "id": 425919734,
        "sender_full_name": "Las",
        "timestamp": 1710166989
    },
    {
        "content": "<p>The WASM C API needs a lot of work honestly, very underdeveloped</p>",
        "id": 425919802,
        "sender_full_name": "Las",
        "timestamp": 1710167015
    },
    {
        "content": "<p>If the parts of the ecosystem I need don’t support it I’ll implement it myself</p>",
        "id": 425920037,
        "sender_full_name": "Las",
        "timestamp": 1710167065
    },
    {
        "content": "<p>Unfortunately we actually <em>just</em> removed support for externref in the C API last week. This is done as we figure out a how to best implement the GC proposal and expose the ability to work with it safely from the C API. We are still going to add it back in, but we're in a bit of transition period right now unfortunately</p>",
        "id": 425920150,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710167106
    },
    {
        "content": "<p>And yes I would agree that the wasm-c-api repository alone is probably not enough to get something nontrivial done. That's why we also have <code>wasmtime.h</code> and a suite of wasmtime-specific symbols.</p>",
        "id": 425920245,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710167134
    }
]