[
    {
        "content": "<p>If I wish to change a component's access at runtime, is it okay to switch out it's WasiCtx after the instance is created?</p>",
        "id": 465250756,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724697060
    },
    {
        "content": "<p>For example, if I want to give it access to another folder on the host.</p>",
        "id": 465250824,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724697093
    },
    {
        "content": "<p>That should be fine yeah, and while the methods don't currently exist I think it would make sense to additionally add methods to <code>WasiCtx</code> to do this on-the-fly so you don't have to create a whole new context</p>",
        "id": 465251210,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724697254
    },
    {
        "content": "<p>Or at least make <code>WasiCtx</code> cloneable</p>",
        "id": 465251251,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724697279
    },
    {
        "content": "<p>although I guess that doesn't matter is you can't change the state without the builder.</p>",
        "id": 465251353,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724697321
    },
    {
        "content": "<p>Cloning might be a bit tougher since it can contain things like closures, but yeah mutation should be relatively easy to add</p>",
        "id": 465251392,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1724697337
    },
    {
        "content": "<p>Depends on what you mean by \"change\" access. Mutating the WasiCtx (or swapping it out entirely) might work for new resources, but it won't automatically revoke access to already-opened resources.</p>",
        "id": 465255108,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724698858
    },
    {
        "content": "<p>That was the idea.</p>",
        "id": 465255193,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724698897
    },
    {
        "content": "<p>Also, multiple properties are expected to never change during the lifetime of a component instance. Such as: filesystem preopens, insecure-seed</p>",
        "id": 465255448,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724699024
    },
    {
        "content": "<p>Can you point me to a reference please?</p>",
        "id": 465255652,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724699119
    },
    {
        "content": "<p>Sorry, I updated my previous answer at the same time as your question. See previous comment</p>",
        "id": 465255925,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724699249
    },
    {
        "content": "<p>Some mor eexamples: wasi-cli -&gt; get-environment, get-arguments, initial-cwd</p>",
        "id": 465255972,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724699277
    },
    {
        "content": "<blockquote>\n<p>Mutating the WasiCtx might work for new resources, but it won't automatically revoke access to already-opened resources.</p>\n</blockquote>\n<p>And at the same time, updating  <code>socket_addr_check</code> &amp; <code>allowed_network_uses</code> <strong>would</strong> immediately apply to both the old _and_ new sockets.</p>\n<p>So thinking about it more, I would be very careful about mutating any property on an WasiCtx that is already in use. I see issues ranging from \"subtly wrong\" to straight up TOCTOU security vulnerabilities.</p>",
        "id": 465257987,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724700242
    },
    {
        "content": "<p>Is there a current best practice for managing guest permissions at runtime then or would this currently require unloading and reloading the component?</p>",
        "id": 465258343,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724700417
    },
    {
        "content": "<p>Do you have any specific permissions in mind?</p>",
        "id": 465258875,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724700660
    },
    {
        "content": "<p>Dynamically granting component extensions access to file's on the host is the current use case I'm considering.</p>",
        "id": 465259363,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724700886
    },
    {
        "content": "<p>Do you have a custom contract between your host application and the extensions? Because, while the WASI preopens should remain static, you may be able to expose your own method that opens files dynamically</p>",
        "id": 465260892,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1724701537
    },
    {
        "content": "<p>Yes, I'm working on a plugin system, so I\"m in control of the API</p>",
        "id": 465260995,
        "sender_full_name": "Joe Sylve",
        "timestamp": 1724701569
    }
]