[
    {
        "content": "<p>I am using wasmtime 13.0 (git) and wasi to facilitate game code scripting in a game engine.</p>\n<p>The wasi api is built on an <code>async: true</code> wit import and async traits. Is it possible to opt in to a blocking mode for the guest an host code calls rather than having to await the guest code function calls etc?</p>\n<p>I see that there has been some recent activity on github with the sync feature and <code>wasi-cap-std-sync</code> etc which implement a blocking non async-trait version of wasi. I could unfortunately not entirely grasp the relevant commits or how to properly use it as when testing it still bound using the <code>preview2::bindings::filesystem::preopens::add_to_linker</code> etc which are async, and thus panics.</p>\n<p>There is a possibility that I may have misunderstood something of how to use it.</p>",
        "id": 386866433,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692796576
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> has investigated this previously, so they may have deeper feedback</p>\n<p>from what I remember, wasmtime internally uses tokio and a lot of async code and there's no way around that but the async: false version is solving some of the issues</p>\n<p>basically you can have some interfaces sync but wasmtime needs a tokio runtime to run and you need some async code and bridging (channels etc) code to talk to it</p>",
        "id": 386867610,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1692796916
    },
    {
        "content": "<p>Decided to open as a new topic, rather than the <a class=\"stream-topic\" data-stream-id=\"217126\" href=\"/#narrow/stream/217126-wasmtime/topic/.E2.9C.94.20.28Host.29InputStream.2FOutputStream.20async.20-.3E.20sync\">#wasmtime &gt; âœ” (Host)InputStream/OutputStream async -&gt; sync</a> </p>\n<p>I also figured out that tooltips don't workn the browser, but on the desktop the icons have a tooltip, so now no more misclicks <span aria-label=\"blush\" class=\"emoji emoji-1f60a\" role=\"img\" title=\"blush\">:blush:</span></p>",
        "id": 386867678,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692796929
    },
    {
        "content": "<p>Thats no problem <span aria-label=\"smiling face\" class=\"emoji emoji-263a\" role=\"img\" title=\"smiling face\">:smiling_face:</span> , we are in a tokio context, but inside a blocking update/tick loop, so would prefer if the api would be sync.</p>\n<p>Using the <code>sync</code> feature, and the <code>async: false</code> for my bindings still cause wasi to use <code>async: true</code> for its bindings and panic as is uses the <code>func_wrap_async</code> function.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>thread<span class=\"w\"> </span><span class=\"s1\">'tokio-runtime-worker'</span><span class=\"w\"> </span>panicked<span class=\"w\"> </span>at<span class=\"w\"> </span><span class=\"s1\">'cannot use `func_wrap_async` without enabling async support in the config'</span>,<span class=\"w\"> </span>/Users/\nteiroberts/.cargo/git/checkouts/wasmtime-41807828cb3a7a7e/770c5d0/crates/wasmtime/src/component/linker.rs:307:9\n</code></pre></div>",
        "id": 386868485,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692797166
    },
    {
        "content": "<p>Since you mentioned that <span class=\"user-mention\" data-user-id=\"621586\">@Karel Hrkal (kajacx)</span> has looked into this throughly it is worthwhile to mention that I am trying to use their wasm-bridge to also support integrating with wasm modules in the browser for scripting on non-native targets, which has a blocking api</p>",
        "id": 386868958,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692797325
    },
    {
        "content": "<p>iirc there are sync versions of the bindings under e.g. <code>preview2::bindings::sync_io::*</code>, but I have not personally worked with them</p>",
        "id": 386872058,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692798193
    },
    {
        "content": "<p>Yes sync versions of everything is intended to be available, for example <a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/src/commands/run.rs#L648-L652\">this is running a command</a> and <a href=\"https://github.com/bytecodealliance/wasmtime/blob/14b39bc234b1c8f9d5212e481a93a91e72b22807/src/commands/run.rs#L909\">this is adding imports to a <code>Linker</code></a>. You can also browse the <a href=\"https://github.com/bytecodealliance/wasmtime/tree/14b39bc234b1c8f9d5212e481a93a91e72b22807/crates/test-programs/tests\">tests here</a> which have more examples of running things as sync instead of async</p>",
        "id": 386880548,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692800165
    },
    {
        "content": "<p>the source implementation of everything is <code>async</code> to handle the requirements of the WASI specification itself, but at a top-level it's intended that everything additionally has a sync interface</p>",
        "id": 386880729,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692800214
    },
    {
        "content": "<p>if wasmtime is executed as part of a tokio \"tick\" (e.g. a <code>poll</code> to some other future) then there may be slight issues with that as tokio will think we're blocking within a <code>poll</code> which it may not like, but if that happens let us know and we can try to figure something out</p>",
        "id": 386880906,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692800258
    },
    {
        "content": "<p>Ok, then I understand how all of that flows together. Thanks Alex.</p>",
        "id": 386903511,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692805630
    },
    {
        "content": "<p>I have managed to get sync wasi components working with <code>command::sync::add_to_linker</code>, full code <a href=\"https://github.com/kajacx/wasm-playground/blob/3bf9cee6301fa3eb0295d55955817dec63b6b567/runtime-rust-wasmtime/src/main.rs#L155\">here</a></p>\n<p>The sync methods don't work when called from an async tokio task, however. That gives an error \"cannot create a new runtime inside an existing runtime\", or something like that. At least that was when I was using a git dependency before, maybe it is fixed somehow now.</p>",
        "id": 386929163,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1692814948
    },
    {
        "content": "<p>Ah ok yeah I was wondering if an error like that would show up. I'm not familiar enough with tokio itself to know how to fix that off the top of my head though.</p>\n<p>If you're already executing within tokio though is it possible to execute wasm asynchronously?</p>",
        "id": 386929642,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692815163
    },
    {
        "content": "<p>yep those methods are designed only to be used outside of tokio rn. if you are running inside tokio, use command::add_to_linker and the async wasmtime Config and methods.</p>",
        "id": 386954779,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692826964
    },
    {
        "content": "<p>Would it be possible to reuse a tokio runtime rather than creating a new one?</p>\n<p>The issue I am having is that we can't use async functions because we are inside a normal for_each in a tick and thus would prefer to block rather than have an async event loop update.</p>\n<p>However, that loop happens to be called from within an entered (but not <code>block_on</code> tokio context) so that we can use <code>tokio::spawn</code> etc</p>",
        "id": 387061994,
        "sender_full_name": "Freja Roberts",
        "timestamp": 1692880193
    },
    {
        "content": "<p>I <em>think</em> you can spawn into a runtime without being in the runtime context via a <a href=\"https://docs.rs/tokio/1.32.0/tokio/runtime/struct.Handle.html\"><code>Handle</code></a></p>",
        "id": 387065651,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692881194
    },
    {
        "content": "<p>(which would still mean having two separate runtimes)</p>",
        "id": 387065746,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692881225
    },
    {
        "content": "<p>I believe we're <a href=\"https://github.com/bytecodealliance/wasmtime/blob/55fb2ee5d0a8bc69da2f7d75de9a6e2c51044846/crates/wasi/src/preview2/mod.rs#L170-L181\">already using the preexisting runtime</a> but I think the issue is a <code>block_on</code> as part of a <code>poll</code> which tokio doesn't like (or at least that's what I think is the issue, I could be wrong)</p>",
        "id": 387124601,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1692896140
    }
]