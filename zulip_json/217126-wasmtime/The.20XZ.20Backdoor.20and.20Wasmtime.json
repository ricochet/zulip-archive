[
    {
        "content": "<p><a href=\"https://bytecodealliance.org/articles/xz-backdoor-and-wasmtime\">https://bytecodealliance.org/articles/xz-backdoor-and-wasmtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.org/articles/xz-backdoor-and-wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b666ca74a20745aca2566cd241108afdcfa09d04\\/68747470733a2f2f62797465636f6465616c6c69616e63652e6f72672f696d616765732f6176617461722e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.org/articles/xz-backdoor-and-wasmtime\" title=\"The XZ Backdoor and Wasmtime\">The XZ Backdoor and Wasmtime</a></div><div class=\"message_embed_description\">We are aware that the account responsible for the recent XZ backdoorcontributed a documentation-only pull request to Wasmtime, howeverWasmtimeâ€™s safety remains intact. We have reviewed the pull request in detailand confirmed that it only...</div></div></div>",
        "id": 431410503,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1712268373
    },
    {
        "content": "<p>Curious about this wrt wasm: IIUC the malware was hidden quite deeply in a test <em>binary</em> ... As <a class=\"stream\" data-stream-id=\"352111\" href=\"/#narrow/stream/352111-warg\">#warg</a>  and other binary distributions become more common, and the vision of being able to hot swap components inside a composed wasm system very easily becomes realized, what will be the safeguards in place to avoid XZ like issues with them?</p>",
        "id": 432254066,
        "sender_full_name": "Nuke ðŸŒ„",
        "timestamp": 1712672143
    },
    {
        "content": "<p>I could imagine as the blog posed in this topic states that module isolation can help. But with wasi fs capable modules most of all, I could see this still happening:</p>\n<p>Is it fair to say that there is not explicit hierarchy of components as well? Meaning anywhere in composition a module could import wasi and thus at least request system resources that might be exploited... Right? (Meaning that injection of something malicious could happen in any module)</p>\n<p>Is there means to be alerted and/or restricted access <em>per module</em> for auditing wasm bnary packages now?  (I bet there could be if wit compliance within the binary is enforced for components with any wasi imports if not yet - it would be at least possible to monitor changes in the wasi imports... But not sure how you could assure no malicous changes in runtime behavior really)</p>",
        "id": 432256145,
        "sender_full_name": "Nuke ðŸŒ„",
        "timestamp": 1712672651
    },
    {
        "content": "<p>A (non-root) component cannot get an import directly from the host; it can only receive it from the component that instantiates it. If a composition doesn't provide a wasi instance to some subtree of components there is no way for any component in that subtree to \"reach out\" and get access to that functionality.</p>",
        "id": 432257618,
        "sender_full_name": "Lann Martin",
        "timestamp": 1712673030
    },
    {
        "content": "<blockquote>\n<p>Is it fair to say that there is not explicit hierarchy of components as well?</p>\n</blockquote>\n<p>Nope! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 432258034,
        "sender_full_name": "Lann Martin",
        "timestamp": 1712673150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span>'s talk on components might of interest to you: <a href=\"https://www.youtube.com/watch?v=tAACYA1Mwv4\">YouTube - Keynote: What is a Component (and Why)? - Luke Wagner, Distinguished Engineer, Fastly</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"tAACYA1Mwv4\" href=\"https://www.youtube.com/watch?v=tAACYA1Mwv4\"><img src=\"https://uploads.zulipusercontent.net/06cfb264dfc35cc9df5fcd3ee955f91fb3d544aa/68747470733a2f2f692e7974696d672e636f6d2f76692f744141435941314d7776342f64656661756c742e6a7067\"></a></div>",
        "id": 432258309,
        "sender_full_name": "Lann Martin",
        "timestamp": 1712673236
    }
]