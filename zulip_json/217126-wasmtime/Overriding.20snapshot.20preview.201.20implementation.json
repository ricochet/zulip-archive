[
    {
        "content": "<p>Is there any functionality provided that allows overriding snapshot preview 1 implementation?<br>\nI see that the implementation is provided for <code>WasiCtx</code> <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8c9c72caaac6f7a21f031f274c87eb26ac630ca7/crates/wasi-common/src/snapshots/preview_1.rs#L194-L1182\">https://github.com/bytecodealliance/wasmtime/blob/8c9c72caaac6f7a21f031f274c87eb26ac630ca7/crates/wasi-common/src/snapshots/preview_1.rs#L194-L1182</a></p>\n<p>Obvious approach with wrapping <code>WasiCtx</code> into a custom struct implementing the trait and using that context instead does not seem to work, in particular because <code>add_to_linker</code> expects a getter returning a <code>WasiCtx</code> struct <a href=\"https://github.com/bytecodealliance/wasmtime/blob/7a1b7cdf92a644a256a9f4c5c002682e1900d817/crates/wasi/src/lib.rs#L47\">https://github.com/bytecodealliance/wasmtime/blob/7a1b7cdf92a644a256a9f4c5c002682e1900d817/crates/wasi/src/lib.rs#L47</a></p>\n<p><code>linker.func_wrap(\"wasi_snapshot_preview1\"...</code> approach seems to break the runtime, but I have to explore this option more.</p>\n<p>Regardless, it would be beneficial to have an implementable trait here.<br>\nWould refactoring <code>add_to_linker</code> closure signature return type to use a trait instead be an acceptable way forward?</p>\n<p>Any suggestions, ideas?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/8c9c72caaac6f7a21f031f274c87eb26ac630ca7/crates/wasi-common/src/snapshots/preview_1.rs#L194-L1182\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/34f6338ab37aacbe615d53594e439a6d09b8a708\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396234353339303439326466376164646533383736303637383938363637393639393034366439643331343439613532363835373662363136353362623666382f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8c9c72caaac6f7a21f031f274c87eb26ac630ca7/crates/wasi-common/src/snapshots/preview_1.rs#L194-L1182\" title=\"wasmtime/preview_1.rs at 8c9c72caaac6f7a21f031f274c87eb26ac630ca7 · bytecodealliance/wasmtime\">wasmtime/preview_1.rs at 8c9c72caaac6f7a21f031f274c87eb26ac630ca7 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/preview_1.rs at 8c9c72caaac6f7a21f031f274c87eb26ac630ca7 · bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/7a1b7cdf92a644a256a9f4c5c002682e1900d817/crates/wasi/src/lib.rs#L47\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/34f6338ab37aacbe615d53594e439a6d09b8a708\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396234353339303439326466376164646533383736303637383938363637393639393034366439643331343439613532363835373662363136353362623666382f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/7a1b7cdf92a644a256a9f4c5c002682e1900d817/crates/wasi/src/lib.rs#L47\" title=\"wasmtime/lib.rs at 7a1b7cdf92a644a256a9f4c5c002682e1900d817 · bytecodealliance/wasmtime\">wasmtime/lib.rs at 7a1b7cdf92a644a256a9f4c5c002682e1900d817 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Standalone JIT-style runtime for WebAssembly, using Cranelift - wasmtime/lib.rs at 7a1b7cdf92a644a256a9f4c5c002682e1900d817 · bytecodealliance/wasmtime</div></div></div>",
        "id": 274412361,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1646668927
    },
    {
        "content": "<p>Filed <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3895\">https://github.com/bytecodealliance/wasmtime/pull/3895</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3895\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/430a0857362963bf1794fe6cbbbc628765cd5da9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646638626336313365393039323162363964366530353162656562393436666161616238633431396437373639366163396239313138336637303061363632302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f33383935)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3895\" title=\"Make `WasiCtx` overridable by rvolosatovs · Pull Request #3895 · bytecodealliance/wasmtime\">Make `WasiCtx` overridable by rvolosatovs · Pull Request #3895 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In some use cases it is desirable to provide a custom snapshot WASI\ncontext. Facilitate this by depending on a combination of traits\nrequired rather than concrete type in the signature.\nThis change...</div></div></div>",
        "id": 274437009,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1646677946
    }
]