[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> question about <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/41\">wasm-tools/41</a>: would <a href=\"https://crates.io/crates/no-std-compat\">no-std-compat</a> help with this, by any chance?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/41\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/41\" title=\"wast/wat: Make the crates useable in no_std environments by athei 路 Pull Request #41 路 bytecodealliance/wasm-tools\">wast/wat: Make the crates useable in no_std environments by athei 路 Pull Request #41 路 bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This PR adds the default enabled feature std to the wast and wat crate. Disabling it makes the crate perform in a no_std mode.\nMotivation\nWe need to compile wat -&gt; wasm in a no_std environment a...</div></div></div>",
        "id": 203819217,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594723457
    },
    {
        "content": "<p>it might but it depends on the goal</p>",
        "id": 203819252,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594723516
    },
    {
        "content": "<p>if we were to commit to no_std suport then something like that probably makes sense</p>",
        "id": 203819256,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594723527
    },
    {
        "content": "<p>but I still feel somewhat strongly that we should not at all commit to no_std because I don't understand why we should</p>",
        "id": 203819269,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594723544
    },
    {
        "content": "<p>one reason would be that there's increasing interest in Wasm in embedded environments. I think I understand the issues well enough to see why just no_std support doesn't really solve much, but if we could support it without bending over backwards in the implementation code of affected crates themselves, then it might be tenable?</p>",
        "id": 203819814,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594724048
    },
    {
        "content": "<p>my, potentially wrong, understanding of no-std-compat is that it would allow us to do just that, no?</p>",
        "id": 203819865,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594724099
    },
    {
        "content": "<p>yes I don't want to block anything arbitrarily, and I understand that embedded folks are interested in no_std, but I really really don't want to just blindly follow where everyone else wants us to go</p>",
        "id": 203820735,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594724845
    },
    {
        "content": "<p>I think we're on the same page, but no one has yet to present me (in my opinion at least) a compelling reason to support no_std</p>",
        "id": 203820758,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594724871
    },
    {
        "content": "<p>like no one has a target where wasm/wasmtime actually make sense on the target, <em>and</em> the target has a really good reason to not support std</p>",
        "id": 203820814,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594724893
    },
    {
        "content": "<p>it's also worth pointing out that <code>no-std-compat</code> is a giant wad of code we would need to very carefully audit, and AFAIK no one's done that</p>",
        "id": 203820994,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725029
    },
    {
        "content": "<p>naturally we're not just gonna blindly use it because it sounds nice, and right off the bat the usage of <code>spin</code> is inappropriate for us</p>",
        "id": 203821020,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725049
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/no_std/near/203820814\">said</a>:</p>\n<blockquote>\n<p>like no one has a target where wasm/wasmtime actually make sense on the target, <em>and</em> the target has a really good reason to not support std</p>\n</blockquote>\n<p>yeah, I agree that we should only support no_std if there really is a compelling argument for it. Not sure if Tomaka's use case for Redshirt qualifies, but at least <a href=\"https://twitter.com/tomaka17/status/1277708249249316865\">they think it does</a>, AIUI</p>\n<div class=\"inline-preview-twitter\"><div class=\"twitter-tweet\"><a href=\"https://twitter.com/tomaka17/status/1277708249249316865\"><img class=\"twitter-avatar\" src=\"https://pbs.twimg.com/profile_images/854056528898347009/S4Ek_Kmx_normal.jpg\"></a><p>While `wasmi`, the Wasm interpreter, is very slow, I'd like to switch to `wasmtime` at some point. I have a branch with `wasmtime` working, but I can't merge it before I add support for running on bare metal.\n\n(8/10)</p><span>- tomaka (@tomaka17)</span></div></div>",
        "id": 203821062,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594725100
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/no_std/near/203820994\">said</a>:</p>\n<blockquote>\n<p>it's also worth pointing out that <code>no-std-compat</code> is a giant wad of code we would need to very carefully audit, and AFAIK no one's done that</p>\n</blockquote>\n<p>good point!</p>",
        "id": 203821154,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594725157
    },
    {
        "content": "<p>Of course yeah I don't want to rule anything out, but I don't want us to get into the mindset of \"oh if we <code>#![no_std]</code> everything we run everywhere!\"</p>",
        "id": 203821174,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725180
    },
    {
        "content": "<p>that's a fallacy which will lead us to writing a bunch of spaghetti code</p>",
        "id": 203821183,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725199
    },
    {
        "content": "<p>like does tomakas platform actually support <code>mmap</code>? and writable pages? (etc)</p>",
        "id": 203821196,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725212
    },
    {
        "content": "<p>makes sense, yes</p>",
        "id": 203821292,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594725284
    },
    {
        "content": "<p>basically what I'm saying is that supporting every target under the sun requires more careful planning than \"let's blindly <code>#![no_std]</code> everything and play whack-a-mole until everything compiles\"</p>",
        "id": 203821294,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725290
    },
    {
        "content": "<p>we shouldn't do it just for doing it, but of course actually supporting these targets is fine</p>",
        "id": 203821315,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725312
    },
    {
        "content": "<p>AFAIK we just don't have a story to actually support any of these targets other than \"we wish we could\"</p>",
        "id": 203821328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725324
    },
    {
        "content": "<p>like if tomaka's platform only supports interpreters then that's probably a better thing to design first than slapping <code>#![no_std]</code> everywhere</p>",
        "id": 203821343,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725346
    },
    {
        "content": "<p>I also want to push back <em>really</em> hard on that <em>if</em> you have a <code>libc</code> (or some OS equivalent) then your platform really should support <code>std</code></p>",
        "id": 203821399,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725381
    },
    {
        "content": "<p>and I'm more than happy to do any work upstream necessary to make that a reality</p>",
        "id": 203821407,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725390
    },
    {
        "content": "<p><code>std</code> is <code>core</code> + <code>libc</code>, and that's basically it</p>",
        "id": 203821411,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725397
    },
    {
        "content": "<p>and if your platform really truly only has <code>core</code> then you're like a microcontroller with 8k of rame</p>",
        "id": 203821424,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594725414
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/no_std/near/203821424\">said</a>:</p>\n<blockquote>\n<p>and if your platform really truly only has <code>core</code> then you're like a microcontroller with 8k of rame</p>\n</blockquote>\n<p>heh, fair</p>",
        "id": 203822457,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594726291
    },
    {
        "content": "<p>to be clear, we definitely shouldn't do the work of creating this support, or even the story for supporting more esoteric platforms. What I do think would be good is to have documentation of our position on this that people can read to understand what they'd need to do to upstream changes supporting their platform</p>",
        "id": 203822594,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594726391
    },
    {
        "content": "<p>for sure yeah, and if needed I'd be happy to write up at least my own personal point of view</p>",
        "id": 203824083,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1594727651
    },
    {
        "content": "<p>I think that'd be great! Perhaps as part of the book, with a direct link from the main README.md?</p>",
        "id": 203829427,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1594731416
    }
]