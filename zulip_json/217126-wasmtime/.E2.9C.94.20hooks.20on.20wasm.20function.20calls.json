[
    {
        "content": "<p>Hi all, where should I be looking at if I want to add embedder-specified hooks to report each wasm function call? The motivation is logging libc allocator calls to detect use-after-free and such</p>",
        "id": 274833491,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1646918612
    },
    {
        "content": "<p>this is not a built-in feature of Wasmtime, but I believe that <code>wasm-opt</code> allows instrumenting Wasm modules to insert calls to imported tracing functions like this, so you give it a Wasm module and you get out an instrumented Wasm module</p>",
        "id": 274872749,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1646935379
    },
    {
        "content": "<p>we already instrument cranelift IR for fuels right? so i'm just wondering if i can add similar logic but for wasm function calls (and expose that to c api too)</p>",
        "id": 274876166,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1646936901
    },
    {
        "content": "<p>it is certainly technically possible; whether we would want to implement and maintain it feels like something that an RFC would decide</p>",
        "id": 274877711,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1646937653
    },
    {
        "content": "<p>there is also the <code>call_hook</code> for tracing the transfer of control between the host and wasm, fwiw</p>",
        "id": 274877775,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1646937693
    },
    {
        "content": "<p>i see, thx for answering!</p>",
        "id": 274878122,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1646937885
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"408159\">@Cheng Shao</span> a distinction I would make that seems like it could be useful in deciding things like this (especially wrt other instrumentation cases like fuel): if a code-instrumentation technique needs to <em>interact closely with the runtime</em>, then it makes sense to put the implementation in Wasmtime itself. For example, fuel and epoch interruption need to call special hooks (libcalls) in the runtime, and there is a certain protocol (eg for epochs, the hook returns the new epoch). In a sense, the instrumentation serves the implementation of a Wasmtime-internal feature. But here the behavior we want is just to call an external hook, so there is (i) little coupling with Wasmtime's internals, and (ii) lots of coupling with the particular needs of your instrumentation</p>",
        "id": 274878202,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646937934
    },
    {
        "content": "<p>that feels like the most important bit to me: coupling with wasmtime vs coupling with user's particular use-case</p>",
        "id": 274878225,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646937951
    },
    {
        "content": "<p>but, as fitzgen says, we could definitely discuss further in an RFC if you want to propose an API for this!</p>",
        "id": 274878285,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1646937969
    },
    {
        "content": "<p>yes, that distinction makes a lot of sense</p>",
        "id": 274878452,
        "sender_full_name": "Cheng Shao",
        "timestamp": 1646938079
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"408159\">Cheng Shao</span> has marked this topic as resolved.</p>",
        "id": 274878558,
        "sender_full_name": "Notification Bot",
        "timestamp": 1646938131
    }
]