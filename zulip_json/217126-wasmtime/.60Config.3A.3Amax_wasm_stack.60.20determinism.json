[
    {
        "content": "<p>Can I expect a deterministic behavior from Wasmtime with max_wasm_stack config set? </p>\n<p>Initially, the doc says: \"the number here is not super-precise, but rather wasm will take at most 'pretty close to this much' stack space\"., which lays some doubts re. determinism in my head)</p>\n<p>But then it says: \"If a wasm call (or series of nested wasm calls) take more stack space than the <code>size</code> specified then a stack overflow trap will be raised.\", which sounds like provides deterministic behavior</p>",
        "id": 478859173,
        "sender_full_name": "Olexiy Kulchitskiy",
        "timestamp": 1729842153
    },
    {
        "content": "<p>There is a bit more detail in <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1667-L1674\">this comment</a> but as a private code comment you probably shouldn't treat it as any sort of guarantee of future behavior.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1667-L1674\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a85aac571f81436cce251a5d30d7b757de8b5a36/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333866613836383833636566393333646631393663326635363633643030666432616232643161653531656662363134643230643432386265666661626561352f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/func.rs#L1667-L1674\" title=\"wasmtime/crates/wasmtime/src/runtime/func.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/func.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 478911858,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729860405
    },
    {
        "content": "<p>Given that explanation I would expect possible (small) variations in the precise enforced limit between different Wasmtime builds.</p>",
        "id": 478912151,
        "sender_full_name": "Lann Martin",
        "timestamp": 1729860499
    },
    {
        "content": "<p>While it depends a bit on what you mean by \"deterministic\", I believe the answer is \"no\" this option isn't deterministic. As Lann mentions different versions of wasmtime will have different optimizations in Cranelift meaning that the exact same amount of stack being used won't be the same. We also may experiment in the future with optimizing stack checks which may make it less deterministic as well. Finally different platforms have different requirements so exact stack space usage won't be the same across architectures.</p>",
        "id": 478937694,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1729868832
    },
    {
        "content": "<p>+1 to all the above, and to make it a little more concrete: a function's stack frame size depends on how well the register allocator is able to fit all the values into registers. A better register allocator might pack things more tightly, reducing the number of spillslots we need in the stack frame; in that case, the exact same stack size in bytes could allow for deeper recursive calls. (Or the other way -- tweaking heuristics sometimes produces a few degradations in edge cases as well.) So in a very basic sense, this limit is not deterministic because it depends on implementation-defined behavior and we do not want to disallow ourselves from making future optimizations</p>",
        "id": 478952272,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729873772
    },
    {
        "content": "<p>(To flesh out Alex's question on determinism: do you need the trap to happen in exactly the same place if overflow happens, for the same config value? Or do you only need determinism in terms of how much real memory is used?)</p>",
        "id": 478952758,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1729873945
    },
    {
        "content": "<p>Thanks for your replies, guys. <br>\n<span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Sorry for not being specific enough, I need to trap in the same place of WASM bytecode in case of an overflow.</p>",
        "id": 479128832,
        "sender_full_name": "Olexiy Kulchitskiy",
        "timestamp": 1730031295
    },
    {
        "content": "<p>Gotcha, thanks for that detail <span class=\"user-mention\" data-user-id=\"654767\">@Olexiy Kulchitskiy</span> . In slightly more detail: do you require determinism with (Wasmtime/Cranelift version, ISA, exact hardware features, OS) fixed, or across all of these dimensions? The reason I ask is that each axis can introduce some changes: Cranelift version can change what opts we do and how we lay out the stack; ISA changing implies different stack layout and different number of registers -&gt; different number of spills as well; exact hardware features within the ISA too (e.g. some ISA extension not available, so we do some fallback sequence with temporary values, which increases register pressure and spilling); and finally OS can affect ABI, and also the exact details of the runtime's stack handling and limit checking.</p>\n<p>Overall it seems like \"exactly the same trap location\" at Wasm level requires a solution at the Wasm level: perhaps you could instrument your Wasm modules before handing them to Wasmtime, such that they count stack usage (in a global that you add, for example) and deterministically trap at a limit.</p>\n<p>The tricky part there is ensuring your deterministic limit always fires before the backstop of \"actually ran out of machine stack\". The latter is, for all the reasons above, hard to predict. You might be able to approximate it (or a worst-case upper bound at least) by taking a cost per Wasm local (according to its size) per function frame: in other words, assume that the compilation puts every Wasm local in its own stack slot, plus some constant other amount, and this is a reasonable-ish upper bound. Not totally guaranteed, because we might introduce temporaries or other values, and regalloc is fully heuristic (we haven't proven upper bounds in stack frame size but it would be <em>surprising</em> to exceed one spillslot for every SSA value).</p>",
        "id": 479152461,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730051946
    }
]