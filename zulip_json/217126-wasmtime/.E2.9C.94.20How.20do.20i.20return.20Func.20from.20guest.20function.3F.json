[
    {
        "content": "<p>I was just thinking of how i can return a callback function from guest rust to host rust, which can be called at some later point by host. <br>\ndo i just return the fn pointer as a i32? Then guest could maybe export a \"callback caller\" fn which will take the ptr (i32) and call it inside guest. <br>\nor is it possible to instead return a func somehow?</p>",
        "id": 395765854,
        "sender_full_name": "code red art",
        "timestamp": 1696887394
    },
    {
        "content": "<p>Yes, the usual WASI/LLVM ABI is that function pointers become <code>i32</code> values that are actually indices into a table of funcrefs (in other words, the value that <code>call_indirect</code> takes as its func argument). So you can return <code>i32</code> from the guest, and later use that in the host to look up a funcref in the table and call it (or alternately, call into a \"trampoline\" in the guest that then does the <code>call_indirect</code>, if that's easier)</p>",
        "id": 395768642,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1696889134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"511207\">code red art</span> has marked this topic as resolved.</p>",
        "id": 395775550,
        "sender_full_name": "Notification Bot",
        "timestamp": 1696894568
    }
]