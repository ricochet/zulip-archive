[
    {
        "content": "<p>Hi, I try to understand the way how async is implemented in wasmtime, and got some questions:</p>\n<ol>\n<li>\n<p>How to impl async in wasm guest? From the WASI API, it looks like<br>\n<code>poll_oneoff</code> is the primitive to build an event loop. If this is<br>\n   true, is there any existing crate that already implement it and<br>\n   provide async interface? I found tokio/mio seems to have limited<br>\n   support, but not sure about others.</p>\n</li>\n<li>\n<p>What's the difference between host side <code>func.call_async</code> and<br>\n<code>func.call</code> in terms of use case? Assuming the function being<br>\n   called in wasm guest is going to run an event loop.</p>\n</li>\n</ol>\n<p>Thanks</p>",
        "id": 338910744,
        "sender_full_name": "anb",
        "timestamp": 1677692484
    },
    {
        "content": "<p>call_async allows pausing the entire wasm guest if a future isn't ready in a way transparent for the wasm guest. poll_oneoff is when the guest itself needs to do multiple async things at once.</p>",
        "id": 338931420,
        "sender_full_name": "bjorn3",
        "timestamp": 1677697624
    },
    {
        "content": "<blockquote>\n<p>if a future isn't ready</p>\n</blockquote>\n<p>Is the future on the guest side? How does guest yield if it got a pending future?</p>",
        "id": 338933452,
        "sender_full_name": "anb",
        "timestamp": 1677698181
    },
    {
        "content": "<p>There isn't yet a general purpose way for guests to yield. Async support for guests is planned but not yet started afaik</p>",
        "id": 338934756,
        "sender_full_name": "Lann Martin",
        "timestamp": 1677698548
    },
    {
        "content": "<p>You could build your own, but its mostly unrelated to wasmtime's async support</p>",
        "id": 338934821,
        "sender_full_name": "Lann Martin",
        "timestamp": 1677698575
    },
    {
        "content": "<p>One thing you <em>can</em> do with wasmtime's async is yield from a host-defined import, e.g. if you have a call stack (host) -&gt; (guest) -&gt; (host), that last host function can yield which will propogate all the way back to the first host function, but it all looks synchronous to the guest</p>",
        "id": 338935253,
        "sender_full_name": "Lann Martin",
        "timestamp": 1677698712
    },
    {
        "content": "<blockquote>\n<p>... will propogate all the way back to the first host function, but it all looks synchronous to the guest</p>\n</blockquote>\n<p>I see, guess that's the purpose of those <code>Linker::func_wrapX_async</code>.</p>",
        "id": 338940273,
        "sender_full_name": "anb",
        "timestamp": 1677700000
    },
    {
        "content": "<p>the above is all correct. basically, if you configure your engine to be async, you need to use <code>func.call_async</code> and <code>Linker::func_wrapX_async</code></p>",
        "id": 338959234,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677705726
    },
    {
        "content": "<p>but its only asyncness in terms of allowing host code to await on futures.</p>",
        "id": 338959313,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677705763
    },
    {
        "content": "<p>when you initialize wasi-common using the <code>wasi-tokio</code> crate's WasiCtxBuilder, you will get an underlying implementation of <code>poll_oneoff</code> that polls a set of tokio futures corresponding to the files and timeouts its waiting on</p>",
        "id": 338959648,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677705893
    },
    {
        "content": "<p>otoh, the corresponding implementation in <code>wasi-cap-std-sync</code> will run <code>std::thread::sleep()</code> to wait on a timeout</p>",
        "id": 338959791,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677705961
    },
    {
        "content": "<p>as well as a blocking call to <code>poll(2)</code> to wait on file readiness</p>",
        "id": 338959876,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677705989
    },
    {
        "content": "<p>so, basically, if you want to use async and wasi, depend on <code>wasmtime-wasi = { version = \"whatever\", default-features=false, features = [\"tokio\"] }</code></p>",
        "id": 338960211,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677706112
    },
    {
        "content": "<p>and then use <code>wasmtime_wasi::tokio::WasiCtxBuilder</code> to build your wasi ctx.</p>",
        "id": 338960279,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677706138
    },
    {
        "content": "<p>of course, this isnt general to all async rust, it will panic if its not running on top of tokio.</p>",
        "id": 338960392,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1677706180
    },
    {
        "content": "<p>Yeah, Fortran certainly adds an interesting challenge.  I have no idea what the state of the art for Fortran-to-Wasm is.  Good luck!  Let me know if you get stuck and need a second pair of eyes on it.</p>",
        "id": 338990341,
        "sender_full_name": "Joel Dice",
        "timestamp": 1677722613
    },
    {
        "content": "<p>Ugh, disregard the above -- wrong stream -- I'm still bad a Zulip.</p>",
        "id": 339109348,
        "sender_full_name": "Joel Dice",
        "timestamp": 1677766201
    },
    {
        "content": "<p>where was fortran supposed to go? because now you got me interested!!!</p>",
        "id": 339135174,
        "sender_full_name": "Ralph",
        "timestamp": 1677771651
    }
]