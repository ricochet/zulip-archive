[
    {
        "content": "<p>Good evening, folks - Is it possible to export a rust fn and consume it through wasmtime?  I tried doing so through with wasm-bindgen?  I tried doing so but I am getting an error.  Ultimately, I'd like to export a functions from wasm modules and link them together - similar to the <code>linking</code> example but using rust instead of the text format.</p>\n<p>Thanks!</p>",
        "id": 197759844,
        "sender_full_name": "Adam Carter",
        "timestamp": 1589581925
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302407\">@Adam Carter</span> you likely won't want to use wasm-bindgen with wasmtime since wasm-bindgen is targeted at web environments, for exporting a Rust function you should be able to use <code>#[no_mangle]</code> to get an exported function which you can call</p>",
        "id": 197937163,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589809875
    },
    {
        "content": "<p>Thanks, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>.  So, I have an error returning a string from a rust function.  My steps are:</p>\n<p>given the following</p>\n<p>#[no_mangle]<br>\npub extern \"C\" fn greet() -&gt; String {<br>\n    format!(\"Hello, world!\")<br>\n}</p>\n<p>When I run <strong>cargo wasi build</strong> and <strong>wasmtime --invoke greet target/wasm32-wasi/debug/wasi_example.wasi.wasm</strong> I get the following output</p>\n<p>**Error: failed to run main module <code>target/wasm32-wasi/debug/wasi_example.wasi.wasm</code></p>\n<p>Caused by:<br>\n    multiple tables: tables count must be at most 1 (at offset 376)**</p>",
        "id": 198054269,
        "sender_full_name": "Adam Carter",
        "timestamp": 1589889558
    },
    {
        "content": "<p>Removed duplicate message (this UI is confusing lol)</p>",
        "id": 198054372,
        "sender_full_name": "Adam Carter",
        "timestamp": 1589889608
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302407\">@Adam Carter</span> hm do you still have wasm-bindgen in your dependency graph? You may need to remove that because if that runs it uses anyref</p>",
        "id": 198069902,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1589896962
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>.  That was indeed the issue.  I still wasn't able to get <code>--invoke</code>.  The generated wat shows that <code>greet</code> takes two arguments (instead of none).</p>\n<p>(module<br>\n  (type $t0 (func (param i32)))<br>\n  (func $greet (type $t0) (param $p0 i32)<br>\n    (local $l1 i32) (local $l2 i32)<br>\n    (local.set $l1<br>\n      (i32.const 12))<br>\n    (i32.store offset=4<br>\n      (local.get $p0)<br>\n      (local.get $l1))<br>\n    (local.set $l2<br>\n      (i32.const 1048576))<br>\n    (i32.store<br>\n      (local.get $p0)<br>\n      (local.get $l2))<br>\n    (return))<br>\n  (table $T0 1 1 funcref)<br>\n  (memory $memory 17)<br>\n  (global $g0 (mut i32) (i32.const 1048576))<br>\n  (global $__data_end i32 (i32.const 1048588))<br>\n  (global $__heap_base i32 (i32.const 1048588))<br>\n  (export \"memory\" (memory 0))<br>\n  (export \"greet\" (func $greet))<br>\n  (export \"__data_end\" (global 1))<br>\n  (export \"__heap_base\" (global 2))<br>\n  (data $d0 (i32.const 1048576) \"Hello, World\"))</p>\n<p>Do you know why this is?  What would the correct parameters be when calling this function from either <code>--invoke</code> or from rust?</p>",
        "id": 198314727,
        "sender_full_name": "Adam Carter",
        "timestamp": 1590064254
    },
    {
        "content": "<p>Did you mean to say one: <code>(func $greet (type $t0) (param $p0 i32)</code></p>",
        "id": 198321434,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1590068393
    },
    {
        "content": "<p>It is an output param-reference to \"String\" which gets assigned by <code>(i32.store (local.get $p0) (local.get $l2))</code>at the end</p>",
        "id": 198321672,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1590068510
    },
    {
        "content": "<p>you have to <code>--invoke</code> with offset/reference into wasm memory</p>",
        "id": 198322128,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1590068725
    },
    {
        "content": "<p>yes <code>String</code> in Rust doesn't have a stable ABI, so it does \"whatever is necessary\". In this case the first parameter is a pointer of where to write the string</p>",
        "id": 198324737,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590070135
    },
    {
        "content": "<p>that's probably not what you want but unfortunately returning a string isn't easy right now. Interface types should improve the situation!</p>",
        "id": 198324757,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1590070154
    },
    {
        "content": "<p>Ok, that makes sense!  Thank you all!</p>",
        "id": 198331772,
        "sender_full_name": "Adam Carter",
        "timestamp": 1590073632
    }
]