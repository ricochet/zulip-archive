[
    {
        "content": "<p>Hi there,<br>\nI've been trying to write a data transformer function which takes string as input and outputs a f32 in a wasm.<br>\nAlso, I want to use wasmtime crate to have this wasm function run inside a wasmtime module/sandbox.</p>\n<p>I've been using wit-bindgen to generate the necessary bindings and export a function parse_cost() and parse_unit(), </p>\n<div class=\"codehilite\" data-code-language=\"#\"><pre><span></span><code>mod bindings;\n\nuse bindings::exports::component::parser::parse::Guest;\n\nstruct Component;\n\nimpl Guest for Component {\n    fn parse_cost(cost: String) -&gt; f32 {\n        cost.parse().unwrap_or(0.0)\n    }\n\n    fn parse_unit(unit: String) -&gt; f32 {\n        unit.parse().unwrap_or(0.0)\n    }\n}\n\nbindings::export!(Component with_types_in bindings);\n</code></pre></div>\n<p>however, when using get_typed_func(), the compile complained about <code>required for </code>std:<span aria-label=\"string\" class=\"emoji emoji-1f9f5\" role=\"img\" title=\"string\">:string:</span>:String<code> to implement </code>WasmParams``</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">parse_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">).</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"s\">\"Module not found\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Instance</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">parse_cost</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"parse_cost\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">parse_cost</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>Before this, I figured out a way to manually allocate memory and convert string to {ptr, len}, it worked but it was not perfect, I was hoping wit-bindgen could help me avoid this manual efforts, now I wonder if it is possible?</p>\n<p>thanks in advance.</p>",
        "id": 456040463,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722632037
    },
    {
        "content": "<p>Try changing <code>(String)</code> to <code>(String,)</code> in the host code.</p>",
        "id": 456044438,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722634042
    },
    {
        "content": "<p>Also, consider using the <code>wasmtime::component::bindgen</code> macro, which will make the host side easier.</p>",
        "id": 456044536,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722634088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> thanks for the suggestion, seems not work, either.</p>\n<div class=\"codehilite\" data-code-language=\"34\"><pre><span></span><code>    |                                   --------------   ^^^^^^^^^ the trait `WasmParams` is not implemented for `(std::string::String,)`\n    |                                   |\n    |                                   required by a bound introduced by this call\n</code></pre></div>",
        "id": 456047617,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722635125
    },
    {
        "content": "<p>Oops, I see -- you're using the Wasmtime module API rather than the component API.  You'll need to convert your module into a component using e.g. <code>wasm-tools component new</code> or else use <code>cargo-component</code> to build it.  Then, in the host, you'll need to use the <code>wasmtime::component</code> api to instantiate the component.</p>",
        "id": 456050105,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722635876
    },
    {
        "content": "<p>This might be helpful: <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a></p>",
        "id": 456050254,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722635911
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> <br>\nHmm, still confused as I'm new to wasm.</p>\n<p>so what I am doing is to write a grpc server and in this grpc server process, host a few wasm functions by wasm sandboxes, each function in one wasmtime sandbox, would wasmtime::component be able to support the sandbox?</p>",
        "id": 456051726,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722636794
    },
    {
        "content": "<p>Yes, components are run with the same isolation guarantees as modules are.</p>",
        "id": 456052605,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722637382
    },
    {
        "content": "<p>Just to confirm, is <code>wasmtime::component::Linker</code> what you referred to?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">parse_cost</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">func_id</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cost</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"kt\">f32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">String</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">modules</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">guard</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">func_id</span><span class=\"p\">).</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"s\">\"Module not found\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"parse_cost\"</span><span class=\"p\">).</span><span class=\"n\">ok_or</span><span class=\"p\">(</span><span class=\"s\">\"Function not found\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">F32</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">)];</span>\n<span class=\"w\">        </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()),</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 456053572,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722638033
    },
    {
        "content": "<p>Yes, but keep in mind you'll need to give it a Wasm component -- not a module -- or it will fail at runtime.</p>",
        "id": 456054045,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722638396
    },
    {
        "content": "<p>Also, you should be able to use e.g. <a href=\"https://docs.rs/wasmtime/23.0.1/wasmtime/component/struct.Instance.html#method.get_typed_func\">https://docs.rs/wasmtime/23.0.1/wasmtime/component/struct.Instance.html#method.get_typed_func</a> with <code>(String,)</code> as the parameter type.</p>",
        "id": 456054196,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722638468
    },
    {
        "content": "<p>Or better yet, <a href=\"https://docs.rs/wasmtime/23.0.1/wasmtime/component/macro.bindgen.html\">https://docs.rs/wasmtime/23.0.1/wasmtime/component/macro.bindgen.html</a></p>",
        "id": 456054221,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722638501
    },
    {
        "content": "<p>for wasm component, I've created a .wit file , and use <code>cargo component build --target wasm32-wasip1 --release</code>,  I assume it will give me a component back, right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">parser</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">parse</span><span class=\"o\">-</span><span class=\"n\">cost</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">cost</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">parse</span><span class=\"o\">-</span><span class=\"n\">unit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">unit</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">string</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 456054294,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722638537
    },
    {
        "content": "<p>I think so, yes.  I haven't used <code>cargo component</code> for a while, but that's what it's made for.</p>",
        "id": 456054329,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722638568
    },
    {
        "content": "<p>I'm guessing you don't need to specify <code>--target</code> when using <code>cargo component</code></p>",
        "id": 456054384,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722638606
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/how.20to.20write.20a.20data.20transformer.20using.20wasm.3F/near/456054221\">said</a>:</p>\n<blockquote>\n<p>Or better yet, <a href=\"https://docs.rs/wasmtime/23.0.1/wasmtime/component/macro.bindgen.html\">https://docs.rs/wasmtime/23.0.1/wasmtime/component/macro.bindgen.html</a></p>\n</blockquote>\n<p>by looking at its example, I'm confused where are the definition of exported functions</p>",
        "id": 456054402,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722638618
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/how.20to.20write.20a.20data.20transformer.20using.20wasm.3F/near/456054384\">said</a>:</p>\n<blockquote>\n<p>I'm guessing you don't need to specify <code>--target</code> when using <code>cargo component</code></p>\n</blockquote>\n<p>Yes, that's true</p>",
        "id": 456054673,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722638780
    },
    {
        "content": "<p>You can use e.g. <code>cargo-expand</code> to see the code generated by that macro.  This example might be helpful, also: <a href=\"https://docs.rs/wasmtime/23.0.1/wasmtime/component/bindgen_examples/_5_all_world_export_kinds/index.html\">https://docs.rs/wasmtime/23.0.1/wasmtime/component/bindgen_examples/_5_all_world_export_kinds/index.html</a></p>",
        "id": 456054682,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722638789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/how.20to.20write.20a.20data.20transformer.20using.20wasm.3F/near/456054196\">said</a>:</p>\n<blockquote>\n<p>Also, you should be able</p>\n</blockquote>\n<p>Does <code>(String,)</code> refer to (<code>Val::String</code>,)?</p>",
        "id": 456055218,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722639210
    },
    {
        "content": "<p>no, <code>(std::string::String,)</code></p>",
        "id": 456055243,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722639232
    },
    {
        "content": "<p><code>Val</code> is only used for the dynamic (i.e. slower, not-statically-type-checked) API</p>",
        "id": 456055326,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722639286
    },
    {
        "content": "<p>you should use <code>get_typed_func</code> if you know the types at compile time</p>",
        "id": 456055368,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722639332
    },
    {
        "content": "<p>and that's what <code>wasmtime::component::bindgen</code> uses in its generated code</p>",
        "id": 456055373,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722639345
    },
    {
        "content": "<p>I guess for result, (f32,) is also needed?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0277</span><span class=\"p\">]:</span><span class=\"w\"> </span><span class=\"nc\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">bound</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">f32</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">ComponentNamedList</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">satisfied</span>\n<span class=\"w\">   </span><span class=\"o\">-</span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">server</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"p\">:</span><span class=\"mi\">36</span><span class=\"p\">:</span><span class=\"mi\">57</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">36</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"parse_cost\"</span><span class=\"p\">).</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">())</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                             </span><span class=\"o\">--------------</span><span class=\"w\">              </span><span class=\"o\">^^^</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">ComponentNamedList</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">implemented</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"kt\">f32</span><span class=\"err\">`</span>\n</code></pre></div>",
        "id": 456056241,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722639890
    },
    {
        "content": "<p>Maybe so -- it's been a while since I used that API directly instead of using the <code>bindgen</code> macro</p>",
        "id": 456056327,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722639946
    },
    {
        "content": "<p>ok, let me also try bindgen macro directly</p>",
        "id": 456057148,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722640342
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/how.20to.20write.20a.20data.20transformer.20using.20wasm.3F/near/456054682\">said</a>:</p>\n<blockquote>\n<p>You can use e.g. <code>cargo-expand</code> to see the code generated by that macro.  This example might be helpful, also: <a href=\"https://docs.rs/wasmtime/23.0.1/wasmtime/component/bindgen_examples/_5_all_world_export_kinds/index.html\">https://docs.rs/wasmtime/23.0.1/wasmtime/component/bindgen_examples/_5_all_world_export_kinds/index.html</a></p>\n</blockquote>\n<p>quick question, if one wants to implement <code>bytes-to-string</code> differently, like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"hello {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytes</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>where should we put the customization?</p>",
        "id": 456058854,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722641424
    },
    {
        "content": "<p>You're refering to the code in the example?  Are you wanting to modify the example for some reason?  Or are you trying to translate what the example does to your use case and WIT world?  I'm not quite understanding the question.</p>",
        "id": 456059204,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722641647
    },
    {
        "content": "<p>sure, I want to have a better understanding of bindgen!(), by using cargo expand, I did see the function definition, </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callee</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                            </span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">TypedFunc</span><span class=\"p\">::</span><span class=\"o\">&lt;</span>\n<span class=\"w\">                                </span><span class=\"p\">(</span><span class=\"kt\">u64</span><span class=\"p\">,),</span>\n<span class=\"w\">                                </span><span class=\"p\">(</span><span class=\"n\">wasmtime</span><span class=\"p\">::</span><span class=\"n\">component</span><span class=\"p\">::</span><span class=\"n\">__internal</span><span class=\"p\">::</span><span class=\"nb\">String</span><span class=\"p\">,),</span>\n<span class=\"w\">                            </span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"n\">new_unchecked</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">bytes_to_string</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>but it's not clear to me where is bytes_to_string defined,</p>\n<p>IOW, if we want to use a different implementation for bytes_to_string() in the 5_all_world_export example, can you please suggest how to do it?</p>",
        "id": 456060609,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722642632
    },
    {
        "content": "<p>The <code>bytes_to_string</code> function is implemented in the component in that example.  The host is calling a function that the component exports.</p>",
        "id": 456060760,
        "sender_full_name": "Joel Dice",
        "timestamp": 1722642750
    },
    {
        "content": "<p>Thank you!</p>\n<p>I see, it's using function from <br>\n<code>let component = Component::from_file(&amp;engine, \"./your-component.wasm\")?;</code><br>\nwhere <code>bytes-to-string</code> is defined.<br>\nsomehow I've been missing this line over and over again.</p>",
        "id": 456061786,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722643445
    },
    {
        "content": "<p>Hello, <br>\nFollowing this thread, I was wondering if wit can support references, say if I want to pass a json vec, besides in world.wit I can use list&lt;u8&gt;,  which is interpreted into Vec&lt;u8&gt; after bindgen, is it possible to have &amp;[u8] which holds a pointer from host?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">parser</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 456690865,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722887519
    },
    {
        "content": "<p>Nope, the component needs to have the list copied into its own linear memory- wasm can’t express a pointer into something that’s not a memory, and components need to instantiate their own memory, not import it from the host, to make sure they can be composed with other components</p>",
        "id": 456692266,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722887878
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/stream/217126-wasmtime/topic/how.20to.20write.20a.20data.20transformer.20using.20wasm.3F/near/456692266\">said</a>:</p>\n<blockquote>\n<p>Nope, the component needs to have the list copied into its own linear memory- wasm can’t express a pointer into something that’s not a memory, and components need to instantiate their own memory, not import it from the host, to make sure they can be composed with other components</p>\n</blockquote>\n<p>Thanks!<br>\nSo in this case can you please suggest what is the idiomatic way to represent binary bytes of json in wit?</p>",
        "id": 456692945,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722888027
    },
    {
        "content": "<p>json has no notion of bytes or binary, if you want to transport serialized json, you'd probably use string, if you have something that contains an u8[] buffer then json is simply not able to handle this. If it has to be json, people use base64, but I would suggest something like messagepack that can serialize arrays of bytes directly</p>",
        "id": 456695359,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1722888654
    },
    {
        "content": "<p>sounds good, I'm going to explore more with base64</p>",
        "id": 456698679,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722889579
    },
    {
        "content": "<p>json is a string so you can just use the string type, you dont have to use base64</p>",
        "id": 456708219,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722892313
    },
    {
        "content": "<p>what I meant is: if your data contains a Uint8Array, you can't toJson it, but if that's not the case use string :)</p>",
        "id": 456723244,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1722898619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"550770\">Ramon Klass</span> <a href=\"#narrow/stream/217126-wasmtime/topic/how.20to.20write.20a.20data.20transformer.20using.20wasm.3F/near/456723244\">said</a>:</p>\n<blockquote>\n<p>what I meant is: if your data contains a Uint8Array, you can't toJson it, but if that's not the case use string :)</p>\n</blockquote>\n<p>Right, I want to reduce json size during the transportation, and I'm using a <a href=\"https://docs.rs/serde_json/1.0.122/serde_json/fn.to_vec.html\">https://docs.rs/serde_json/1.0.122/serde_json/fn.to_vec.html#</a> instead of to_string(), so on wasm guest, I'll have to use list&lt;u8&gt; to serve json's Vec&lt;u8&gt;</p>",
        "id": 456724077,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722898990
    },
    {
        "content": "<p>the size during transportation wont be changed by using to_vec instead of to_string, the underlying representation is the same, string is just asserting with the rust type system that the vec contents are utf-8 encoded, but json guarantees that anyway</p>",
        "id": 456725420,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1722899679
    },
    {
        "content": "<p>I see, thank you for the clarification.</p>",
        "id": 456725633,
        "sender_full_name": "Bo Liu",
        "timestamp": 1722899807
    },
    {
        "content": "<p>again, several binary formats would be smaller if payload size if a concern</p>",
        "id": 456728511,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1722901355
    },
    {
        "content": "<p>Hi, for the same wit file, I'm playing with python wasm support, however, it kept reporting <code>TypeError: Can't instantiate abstract class Parse without an implementation for abstract method 'parse'</code> while I did follow <a href=\"https://component-model.bytecodealliance.org/language-support/python.html\">https://component-model.bytecodealliance.org/language-support/python.html</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">:</span><span class=\"nc\">parser</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">parser</span>\n\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Parse</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">Parse</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"nc\">def</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">bytes</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">todo</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">implement</span><span class=\"w\"> </span><span class=\"n\">parsing</span><span class=\"w\"> </span><span class=\"n\">logic</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">payload</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">componentize</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">componentize</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Traceback</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">most</span><span class=\"w\"> </span><span class=\"n\">recent</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"s\">\"/mnt/wasm/path/to/venv/bin/componentize-py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">())</span>\n<span class=\"w\">             </span><span class=\"o\">^^^^^^^^</span>\n<span class=\"n\">AssertionError</span><span class=\"p\">:</span>\n\n<span class=\"nc\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">TypeError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Can</span><span class=\"o\">'</span><span class=\"na\">t</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"kr\">abstract</span><span class=\"w\"> </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Parse</span><span class=\"w\"> </span><span class=\"n\">without</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"kr\">abstract</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">parse</span><span class=\"o\">'</span>\n</code></pre></div>\n<p>I checked the bindings output, looks like I've used the exactly same class and function name, not sure where went wrong.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">componentize</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"w\"> </span><span class=\"n\">tmp</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">a23ad5413a51</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">parser_py</span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span>\n<span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">py</span><span class=\"w\">  </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"n\">root</span><span class=\"o\">@</span><span class=\"n\">a23ad5413a51</span><span class=\"p\">:</span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">parser_py</span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"n\">cat</span><span class=\"w\"> </span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">parse</span><span class=\"o\">/</span><span class=\"n\">__init__</span><span class=\"p\">.</span><span class=\"n\">py</span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">typing</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">TypeVar</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Generic</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Union</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Optional</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Protocol</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Tuple</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">List</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"bp\">Self</span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">import</span><span class=\"w\"> </span><span class=\"n\">Flag</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Enum</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">auto</span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">dataclasses</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">dataclass</span>\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">abc</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">abstractmethod</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">weakref</span>\n\n<span class=\"n\">from</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nb\">Some</span>\n\n\n\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Parse</span><span class=\"p\">(</span><span class=\"n\">Protocol</span><span class=\"p\">):</span>\n\n<span class=\"w\">    </span><span class=\"o\">@</span><span class=\"n\">abstractmethod</span>\n<span class=\"w\">    </span><span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">payload</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">bytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"nc\">bytes</span><span class=\"p\">:</span>\n<span class=\"w\">        </span><span class=\"nc\">raise</span><span class=\"w\"> </span><span class=\"n\">NotImplementedError</span>\n</code></pre></div>\n<p>Did I miss anything?</p>",
        "id": 462405136,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723663491
    },
    {
        "content": "<p>It looks like you told <code>componentize-py</code> the module name is \"parse\", but the file name is <code>lib.py</code>.  Can you try changing that to <code>parse.py</code>?</p>",
        "id": 462405461,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663645
    },
    {
        "content": "<p>actually, nevermind; try changing the module name you give <code>componentize-py</code> to <code>lib</code> instead</p>",
        "id": 462405537,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663679
    },
    {
        "content": "<p>There might be a conflict if the world name and the implementation module name are the same</p>",
        "id": 462405612,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663698
    },
    {
        "content": "<p>e.g. <code>componentize-py -d ./wit/world.wit -w parse componentize -p ./src lib -o parser.wasm</code></p>",
        "id": 462405669,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663730
    },
    {
        "content": "<p>Thanks! oh, right, now I got a different err,</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">componentize</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">componentize</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">lib</span>\n<span class=\"n\">Traceback</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">most</span><span class=\"w\"> </span><span class=\"n\">recent</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"s\">\"/mnt/wasm/path/to/venv/bin/componentize-py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">sys</span><span class=\"p\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">script</span><span class=\"p\">())</span>\n<span class=\"w\">             </span><span class=\"o\">^^^^^^^^</span>\n<span class=\"n\">AssertionError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Traceback</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">most</span><span class=\"w\"> </span><span class=\"n\">recent</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"w\">  </span><span class=\"nc\">File</span><span class=\"w\"> </span><span class=\"s\">\"/0/lib.py\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">line</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">parser</span>\n<span class=\"n\">ModuleNotFoundError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">parser</span><span class=\"o\">'</span>\n\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"nc\">ModuleNotFoundError</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">No</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">named</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">parser</span><span class=\"o\">'</span>\n</code></pre></div>",
        "id": 462405732,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723663760
    },
    {
        "content": "<p>hmm, I don't see <code>lib</code> in your command</p>",
        "id": 462405854,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663814
    },
    {
        "content": "<p>oops, there it is at the end</p>",
        "id": 462405871,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663828
    },
    {
        "content": "<p>at the very end, after <code>-o parser.wasm</code> ;)</p>",
        "id": 462405894,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723663836
    },
    {
        "content": "<p>what is the <code>import parser</code> line for?  It doesn't look like you're using it.</p>",
        "id": 462406001,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663899
    },
    {
        "content": "<p>ugh, I need to read better before I type; I see you're using the type <code>parser.Parse</code></p>",
        "id": 462406102,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663942
    },
    {
        "content": "<p>right, trying to get parser.Parse, which is the def from world.wit</p>",
        "id": 462406137,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723663959
    },
    {
        "content": "<p>shouldn't it be <code>parse</code>, not <code>parser</code>?</p>",
        "id": 462406143,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723663966
    },
    {
        "content": "<p>hmm, maybe.<br>\nI thought it was named after <code>package component:parser;</code> part</p>",
        "id": 462406263,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723664035
    },
    {
        "content": "<p>no, just the world name</p>",
        "id": 462406315,
        "sender_full_name": "Joel Dice",
        "timestamp": 1723664046
    },
    {
        "content": "<p>I see, now I got </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">y</span><span class=\"p\">#</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">mnt</span><span class=\"o\">/</span><span class=\"n\">wasm</span><span class=\"o\">/</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">to</span><span class=\"o\">/</span><span class=\"n\">venv</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">componentize</span><span class=\"o\">-</span><span class=\"n\">py</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"n\">world</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">componentize</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">parser</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">lib</span>\n<span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"n\">built</span><span class=\"w\"> </span><span class=\"n\">successfully</span>\n</code></pre></div>\n<p>hooray</p>",
        "id": 462406383,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723664085
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 462406459,
        "sender_full_name": "Bo Liu",
        "timestamp": 1723664117
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span> has marked this topic as resolved.</p>",
        "id": 468775705,
        "sender_full_name": "Notification Bot",
        "timestamp": 1725884280
    }
]