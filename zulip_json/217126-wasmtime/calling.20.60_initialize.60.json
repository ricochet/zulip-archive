[
    {
        "content": "<p>I've found out that TinyGo 0.33 <code>wasip2</code> reactor components are currently incompatible with Wasmtime, due to the fact that <code>_initialize</code> is never called before, for example, <code>wasi:http/incoming-handler.handle</code> is invoked.</p>\n<p>I've found <a href=\"https://github.com/bytecodealliance/wasmtime/issues/7592\">https://github.com/bytecodealliance/wasmtime/issues/7592</a> related to the topic and here's the TinyGo PR for more context <a href=\"https://github.com/tinygo-org/tinygo/pull/4482\">https://github.com/tinygo-org/tinygo/pull/4482</a></p>\n<p>Do I understand correctly that the suggested solution is to build a custom adapter, which would be <code>_initialize</code>-aware and call it as part of e.g. <code>wasi:http/incoming-handler.handle</code> call?</p>\n<p>Is there some way to make this part of instantiation of the component directly to be done ahead of time?<br>\nOr is there some other way this is supposed to be handled?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/7592\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7d594d4ce5c2e8703401c72135e19b08f596c84f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313763663838303134323839316632656362343466346630376638646633616264633532613962386664613739303737333864653961366262623035326363642f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f37353932&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/7592\" title=\"who is supposed to call `_initialize` of an adapted reactor module? · Issue #7592 · bytecodealliance/wasmtime\">who is supposed to call `_initialize` of an adapted reactor module? · Issue #7592 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">i have a preview1 reactor module, which exports _initialize. when adapting it with wasi_snapshot_preview1.reactor.wasm and loading the resulted component with wasmtime, i expected the _initialize e...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/pull/4482\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5f64de6bf7022a754819f3d36aff88a4648b7edf/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613866383564366463643237306131646661663963623064353334646539353164353765656131323837366161373531366134663339393937373366633830642f74696e79676f2d6f72672f74696e79676f2f70756c6c2f34343832&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/pull/4482\" title=\"fix(wasip2): fix environment initialization in reactors by rvolosatovs · Pull Request #4482 · tinygo-org/tinygo\">fix(wasip2): fix environment initialization in reactors by rvolosatovs · Pull Request #4482 · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Using init() to initialize stdio or environment is prone to race conditions for reactor-style components, e.g.\nwasi:http/incoming-handler interface implementations due to the fact that init() is no...</div></div></div>",
        "id": 474314034,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727879382
    },
    {
        "content": "<p>The <code>wit-component</code> crate creating components was updated in <a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1747\">https://github.com/bytecodealliance/wasm-tools/pull/1747</a> to recognize <code>_initialize</code> and handle that, so this may not have propagated to the TinyGo toolchain yet?</p>\n<p>(e.g. if they're using a wasi-sdk release then it's not been tagged in wasi-sdk yet)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1747\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/46197b8cbab70b3eb0abe6969309401c6e41c264/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353037653939663432613166663066306638646161636636356465666330643238386165373032303133613762666539376531353135636137306131333463322f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31373437&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1747\" title=\"Recognize `_initialize` in `wasm-tools component new` by alexcrichton · Pull Request #1747 · bytecodealliance/wasm-tools\">Recognize `_initialize` in `wasm-tools component new` by alexcrichton · Pull Request #1747 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This commit implements recognition of the _initialize function from WASIp1 in the componentization process of wasm-tools component new. This additionally corresponds to the same function in the pro...</div></div></div>",
        "id": 474315978,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727879905
    },
    {
        "content": "<p>Oh, cool, thanks! I'll follow up with them</p>",
        "id": 474316185,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727879968
    },
    {
        "content": "<p>FWIW, they just shell-out to <code>wasm-tools component new</code> <a href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/builder/build.go#L890-L896\">https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/builder/build.go#L890-L896</a>, but even after updating to wasm-tools 0.218 seems that TinyGo <code>init()</code> is still ignored <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/builder/build.go#L890-L896\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d56e1310a3e01dcdaad31a14dd25a65d7787d4d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306235636333643738316564306330656339376231313036633661653835356437316236373531636133366662326363643432333161646336373639353235312f74696e79676f2d6f72672f74696e79676f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/builder/build.go#L890-L896\" title=\"tinygo/builder/build.go at ef4f46f1d1550beb62324d750c496b2b4a7f76d0 · tinygo-org/tinygo\">tinygo/builder/build.go at ef4f46f1d1550beb62324d750c496b2b4a7f76d0 · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Go compiler for small places. Microcontrollers, WebAssembly (WASM/WASI), and command-line tools. Based on LLVM. - tinygo-org/tinygo</div></div></div>",
        "id": 474319243,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727880819
    },
    {
        "content": "<p>Are you able to double-check if <code>_initialize</code> is called with the updated version of wasm-tools? If that doesn't fix the issue then it may be something else at play?</p>",
        "id": 474319584,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727880907
    },
    {
        "content": "<p>This might be related to the fact that the tinygo linked wasi-libc is still SDK 20</p>",
        "id": 474320104,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1727881044
    },
    {
        "content": "<p><a href=\"https://github.com/tinygo-org/tinygo/tree/release/lib\">https://github.com/tinygo-org/tinygo/tree/release/lib</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/tree/release/lib\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d56e1310a3e01dcdaad31a14dd25a65d7787d4d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306235636333643738316564306330656339376231313036633661653835356437316236373531636133366662326363643432333161646336373639353235312f74696e79676f2d6f72672f74696e79676f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/tree/release/lib\" title=\"tinygo/lib at release · tinygo-org/tinygo\">tinygo/lib at release · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Go compiler for small places. Microcontrollers, WebAssembly (WASM/WASI), and command-line tools. Based on LLVM. - tinygo-org/tinygo</div></div></div>",
        "id": 474320207,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1727881074
    },
    {
        "content": "<p>Good catch, I'll try updating wasi-libc and test!</p>",
        "id": 474320493,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727881151
    },
    {
        "content": "<p>Oh wasi-libc hasn't had a release yet with an updated version of wasm-component-ld so you'd have to build from source currently (or overwrite the wasm-component-ld binary)</p>",
        "id": 474321639,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727881432
    },
    {
        "content": "<p>\"simply\" updating the wasi-libc to latest tag or just <code>main</code> did not seem to help, but I'm not too familiar with tinygo build setup. Also not completely sure where <code>wasm-component-ld</code> binary fits in here.</p>",
        "id": 474324769,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727882005
    },
    {
        "content": "<p>I've filed an issue here <a href=\"https://github.com/tinygo-org/tinygo/issues/4488\">https://github.com/tinygo-org/tinygo/issues/4488</a>, btw</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/issues/4488\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1276504d18eae86444b6e5c06d94706d31273e58/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363465613262393262336164633162346334316537373165373833316431656166623332303637636430323438633738393534633937306436643530393834362f74696e79676f2d6f72672f74696e79676f2f6973737565732f34343838&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/issues/4488\" title=\"`init()` for `wasip2` reactor components · Issue #4488 · tinygo-org/tinygo\">`init()` for `wasip2` reactor components · Issue #4488 · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Currently, init() functions do not run in wasip2 reactor components run in Wasmtime 25. A recent change to wasm-tools introduced support for _initialize in component new step bytecodealliance/wasm-...</div></div></div>",
        "id": 474326632,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727882368
    },
    {
        "content": "<p>I'll also admit I don't know the particulars of TinyGo's linking process. Using wasi-sdk with rust/c/c++ components are created with the <code>wasm-component-ld</code> linker which is executed in lieu of <code>wasm-ld</code>. The <code>wasm-component-ld</code> linker links to <code>wit-component</code>, the Rust crate to create components, and the workhorse of <code>wasm-tools component new</code>. The code you linked though looks like it's executing <code>wasm-tools</code> directly, however, so the support may be entirely unrelated to the version of wasi-sdk in use.</p>\n<p>The latest version of wasi-sdk, the wasi-sdk-24 tag, does not have a <code>wasm-component-ld</code> with support for <code>_initialize</code>. The latest <code>wasm-component-ld</code>, if you install via <code>cargo install</code>, does however. Support for <code>_initialize</code> first showed up in 217 for wasm-tools.</p>",
        "id": 474327531,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727882519
    },
    {
        "content": "<p>if that helps, it seems that they use <code>wasm-ld</code> <a href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/targets/wasip2.json#L8\">https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/targets/wasip2.json#L8</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/targets/wasip2.json#L8\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d56e1310a3e01dcdaad31a14dd25a65d7787d4d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306235636333643738316564306330656339376231313036633661653835356437316236373531636133366662326363643432333161646336373639353235312f74696e79676f2d6f72672f74696e79676f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/targets/wasip2.json#L8\" title=\"tinygo/targets/wasip2.json at ef4f46f1d1550beb62324d750c496b2b4a7f76d0 · tinygo-org/tinygo\">tinygo/targets/wasip2.json at ef4f46f1d1550beb62324d750c496b2b4a7f76d0 · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Go compiler for small places. Microcontrollers, WebAssembly (WASM/WASI), and command-line tools. Based on LLVM. - tinygo-org/tinygo</div></div></div>",
        "id": 474327589,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727882523
    },
    {
        "content": "<p>so perhaps the fix is to change the linker to <code>wasm-component-ld</code>?</p>",
        "id": 474327766,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727882551
    },
    {
        "content": "<p><code>unexpected: linker wasm-component-ld should be ld.lld or wasm-ld</code></p>",
        "id": 474328110,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727882606
    },
    {
        "content": "<p>I don't think so, it looks like TinyGo is doing some wasm transforms like asyncify which wouldn't work with a component. They're also executing <code>wasm-tools component new</code> which means that <code>wasm-component-ld</code> isn't needed.</p>",
        "id": 474328182,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727882618
    },
    {
        "content": "<p>If you're sure that your newer version of <code>wasm-tools</code> was used during linking for the component then at least the way I might be able to help would be to capture the <code>wasm-tools component new</code> command. For example what was the input module and what was the output?</p>",
        "id": 474328473,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727882665
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/-7W6EmlfHQh6EQRdfxQtlm0g/in.wasm\">in.wasm</a><br>\n<a href=\"/user_uploads/15107/E1cdJtYl1uM_iHmjjUwC31qP/out.wasm\">out.wasm</a></p>\n<p>here's the captured input and output Wasm used for <code>wasm-tools component new</code></p>\n<p>really appreciate the help!</p>",
        "id": 474331036,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727883237
    },
    {
        "content": "<p>It looks like <code>in.wasm</code> doesn't export <code>_initialize</code>?</p>",
        "id": 474332189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727883576
    },
    {
        "content": "<p>well, yeah, it looks like they wouldn't <a href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/src/runtime/runtime_wasm_wasip2.go#L14-L26\">https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/src/runtime/runtime_wasm_wasip2.go#L14-L26</a> :D</p>\n<p>looks like this could be the actual issue here (they simply never exported the function)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/src/runtime/runtime_wasm_wasip2.go#L14-L26\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5d56e1310a3e01dcdaad31a14dd25a65d7787d4d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306235636333643738316564306330656339376231313036633661653835356437316236373531636133366662326363643432333161646336373639353235312f74696e79676f2d6f72672f74696e79676f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/blob/ef4f46f1d1550beb62324d750c496b2b4a7f76d0/src/runtime/runtime_wasm_wasip2.go#L14-L26\" title=\"tinygo/src/runtime/runtime_wasm_wasip2.go at ef4f46f1d1550beb62324d750c496b2b4a7f76d0 · tinygo-org/tinygo\">tinygo/src/runtime/runtime_wasm_wasip2.go at ef4f46f1d1550beb62324d750c496b2b4a7f76d0 · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Go compiler for small places. Microcontrollers, WebAssembly (WASM/WASI), and command-line tools. Based on LLVM. - tinygo-org/tinygo</div></div></div>",
        "id": 474334403,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727884221
    },
    {
        "content": "<p>yep, that's it, it works now! Thanks <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 474337360,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727884894
    },
    {
        "content": "<p>up-to-date <code>wasm-tools</code> and a small fix to tinygo to actually export the <code>_initialize</code> is what's necessary here</p>",
        "id": 474337522,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727884927
    },
    {
        "content": "<p><a href=\"https://github.com/tinygo-org/tinygo/pull/4490\">https://github.com/tinygo-org/tinygo/pull/4490</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tinygo-org/tinygo/pull/4490\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/225a24c39ce1bf6033e7a448a71e834eeb9d8786/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643738336538643037316533303666323261363232363535393964303438633961303333643065333230323563616331336636386639393266393562616464612f74696e79676f2d6f72672f74696e79676f2f70756c6c2f34343930&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tinygo-org/tinygo/pull/4490\" title=\"fix(wasip2): export `_initialize` by rvolosatovs · Pull Request #4490 · tinygo-org/tinygo\">fix(wasip2): export `_initialize` by rvolosatovs · Pull Request #4490 · tinygo-org/tinygo</a></div><div class=\"message_embed_description\">Closes #4488\nRefs #4482\nTurns out _initialize was not exported by wasip2 components and so init() was never called in reactors. This PR fixes that, by initializing the heap and calling all initiali...</div></div></div>",
        "id": 474339116,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727885262
    },
    {
        "content": "<p>according to <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi\">https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi</a>, it's <em>either</em> <code>_initialize</code> or <code>_start</code> that's called, but not both.<br>\nFor wasip2 command components, is <code>_initialize</code> meant to be ignored or is it meant to be called the same as for reactors?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/08396a0e9168d9d12369da12e599b59554fd7156/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393434396539373139313238366338356433613561326264643238643130633734363964303164616134323366303137353366396566343834376366656664342f576562417373656d626c792f57415349&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/application-abi.md#current-unstable-abi\" title=\"WASI/legacy/application-abi.md at main · WebAssembly/WASI\">WASI/legacy/application-abi.md at main · WebAssembly/WASI</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div>",
        "id": 474346545,
        "sender_full_name": "Roman Volosatovs",
        "timestamp": 1727886973
    },
    {
        "content": "<p>There's less of a distinction of sorts in components about commands/reactors. Currently though the _start function is not handled at all by <code>wasm-tools component new</code>. It's not recognized or called at all. All <code>wasm-tools component new</code> does is ensure that if <code>_initialize</code> is exported it's called before all exports.</p>",
        "id": 474348667,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727887575
    },
    {
        "content": "<p>In that sense TinyGo will have to protect against this internally where if <code>_start</code> is accessible via <code>wasi:cli/run</code> then it'll have to be prepared for <code>_initialize</code> to already have run.</p>",
        "id": 474348769,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1727887605
    }
]