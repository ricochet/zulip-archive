[
    {
        "content": "<p>Hello,</p>\n<p>I am running into a problem when calling a (not typed) function: \"expected 1 results, got 0\". If I set the function as typed (arg i32 and result i32, i.e. <code>&lt;i32, i32&gt;</code>) the function call works fine, the problem only happens if it's not typed.</p>\n<p>This is how I am calling it:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Vec</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">.</span><span class=\"n\">map_err</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">eyre</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">r#\"failed to call func \"{fn_name}\": {e}\"#</span><span class=\"p\">))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>Is this a common error? I couldn't find any references to it.</p>",
        "id": 470280040,
        "sender_full_name": "Lorenzo",
        "timestamp": 1726378282
    },
    {
        "content": "<p>Huh. So I looked into the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/8f941331dc294d28f95f65119f850f627a8e6a5f/crates/wasmtime/src/runtime/func.rs#L1192\">implementation</a> and it compares the expected vs actual length of <code>results</code>.<br>\nWhy is that? So this returns a i32 pointer, so I need to initialise the results as 0:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">Val</span><span class=\"p\">::</span><span class=\"n\">I32</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)];</span>\n</code></pre></div>\n<p>Not very intuitive API IMO. I assumed it would just fill an empty buffer with the results.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/8f941331dc294d28f95f65119f850f627a8e6a5f/crates/wasmtime/src/runtime/func.rs#L1192\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3c1f222bdd1cb346da3b5fb1cd9ef78882b3b0e5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383133376464346430663735663465323565326432393963306533613630303266653162333731333331306666643337616132633766636632343166393936352f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/8f941331dc294d28f95f65119f850f627a8e6a5f/crates/wasmtime/src/runtime/func.rs#L1192\" title=\"wasmtime/crates/wasmtime/src/runtime/func.rs at 8f941331dc294d28f95f65119f850f627a8e6a5f · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/func.rs at 8f941331dc294d28f95f65119f850f627a8e6a5f · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 470281291,
        "sender_full_name": "Lorenzo",
        "timestamp": 1726379140
    },
    {
        "content": "<p>Looks like you ended up finding the answer, but to confirm yes the <code>results</code> vector here needed to have an element in it to have the same length as the results.</p>\n<p>As to the unintuitive nature of the API, the <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Func.html#method.call\">signature of the function</a> actually takes <code>&amp;mut [Val]</code> which is not a resizable array so it's not possible to fill an empty <code>Vec</code> with results. What you're running into is that Rust is coercing <code>&amp;mut Vec&lt;T&gt;</code> into <code>&amp;mut [T]</code> which in this case is an empty vector. That's combining together to create this situation.</p>\n<p>One thing we could consider in Wasmtime is to have a function that doesn't take a results buffer at all and insteads returns a <code>Vec&lt;T&gt;</code>, but that has efficiency concerns since it requires reallocating a vector every time it's called. API design is quite difficult!</p>",
        "id": 470642280,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726499514
    },
    {
        "content": "<p>Thanks for the reply, that makes sense. Overall I'm happy with wasmtime. I had to move over from wasmer because I needed async support on host functions <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 470796272,
        "sender_full_name": "Lorenzo",
        "timestamp": 1726536860
    }
]