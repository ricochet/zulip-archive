[
    {
        "content": "<p>Hi! I was just wondering; why are there so many <code>+ Sync</code> requirements in the WASI implementation?<br>\nAs a test, I removed all the constraints and after refactoring one function in the filesystem implementation, the entire testsuite runs just fine</p>",
        "id": 412614383,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705090809
    },
    {
        "content": "<p>Some of them may have been added too eagerly, if they can be removed and everything still passes then I don't think there's any reason to keep them</p>",
        "id": 412617200,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705092110
    },
    {
        "content": "<p>In an attempt to perform this change I hit a snag. As said before, the preview2 testsuite builds and run without problems. But the in the CLI code, specifically <code>src/commands/run.rs</code>, many wasmtime parts come together into one single <code>Host</code> type, where the <code>+ Sync</code> <em>is</em> a requirement.</p>\n<p>AFAICS, to make it work the <code>Host</code> type would need to be split up into a <code>CoreHost</code> (preview1_ctx, wasi_threads, ..) and a <code>ComponentHost</code> (preview2_ctx, preview2_table, wasi_http, ..). Does this sound about right?</p>",
        "id": 416851856,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705692363
    },
    {
        "content": "<p>Ah ok so maybe that's where this came from... yeah if splitting up like that works that seems reasonable</p>",
        "id": 416861481,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705695984
    },
    {
        "content": "<p>although I can see where that also might make organization pretty hairy</p>",
        "id": 416861496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705695994
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/EbCsYrJQVKoyMKbYO0C8PrgT/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/EbCsYrJQVKoyMKbYO0C8PrgT/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/EbCsYrJQVKoyMKbYO0C8PrgT/image.png\"></a></div><p>How does this work exactly? I thought preview2 was componentmodel-only. But here (see arrow) it is enabled for non-components</p>",
        "id": 416863431,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705696820
    },
    {
        "content": "<p>it's the few lines above it, there's two implementations of preview1 and one goes through preview2 primitives</p>",
        "id": 416864788,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705697391
    },
    {
        "content": "<p>so that's where the implementation might get hairy</p>",
        "id": 416864809,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705697399
    },
    {
        "content": "<p>Ah, so in this case, the guest module still sees only preview0/1, but internally wasmtime then uses the preview2 as their implementation, correct?</p>",
        "id": 416865086,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705697505
    },
    {
        "content": "<p>right yeah</p>",
        "id": 416865341,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705697617
    },
    {
        "content": "<p>Hmm</p>",
        "id": 416865358,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705697625
    },
    {
        "content": "<p>I can't find anything regarding this option in the docs. Is this an internal option that's used for testing the preview2 adapter only? Or is it for production use-cases too?</p>",
        "id": 416868497,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705698835
    },
    {
        "content": "<p>If it's for testing purposes only I could probably just slap a Mutex around it and call it a day. If it's not, well then the road probably ends here.. ¯\\_(ツ)_/¯ Which would be a shame, because other than these few lines of code, I've got it working just fine</p>",
        "id": 416869030,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705699048
    },
    {
        "content": "<blockquote>\n<p>I could probably just slap a Mutex around it</p>\n</blockquote>\n<p>Nope, that doesn't work :)</p>",
        "id": 416873036,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705700714
    },
    {
        "content": "<p>Wanna put up a PR and I can try to take a look?</p>",
        "id": 416875676,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705701765
    },
    {
        "content": "<p>(with the error message)</p>",
        "id": 416875693,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705701773
    },
    {
        "content": "<p>Sure<br>\n<a href=\"https://github.com/badeend/wasmtime/commit/9fd350840e83ae103b2178516cec0510d3efb5a4\">https://github.com/badeend/wasmtime/commit/9fd350840e83ae103b2178516cec0510d3efb5a4</a><br>\n(You've got to ignore the enormous amount of code duplication for now :P )<br>\nThe problem is on lines 953-970 where I can't return a reference to the contents of the mutex, because the LockGuard is dropped before the function returns.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/badeend/wasmtime/commit/9fd350840e83ae103b2178516cec0510d3efb5a4\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f3aab8c3e6d6bc9bc624e08337d456601fab14a1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663334653833356264353666316535396131363432643133636335323165366331326463653837353466356436303939653832316262376561636265626462372f62616465656e642f7761736d74696d652f636f6d6d69742f39666433353038343065383361653130336232313738353136636563303531306433656662356134)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/badeend/wasmtime/commit/9fd350840e83ae103b2178516cec0510d3efb5a4\" title=\"DOES NOT WORK: Split up Host into CoreHost and ComponentHost · badeend/wasmtime@9fd3508\">DOES NOT WORK: Split up Host into CoreHost and ComponentHost · badeend/wasmtime@9fd3508</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to badeend/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 416879588,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705703207
    },
    {
        "content": "<p>And the branch is: <a href=\"https://github.com/badeend/wasmtime/tree/no-sync\">https://github.com/badeend/wasmtime/tree/no-sync</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/badeend/wasmtime/tree/no-sync\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/960011927dbe9659983ef640de547727ff28cef1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626130343466616636643030366236356138303961633038306133646362646565623034336135353161616134303461323861383063393233613261313932322f62616465656e642f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/badeend/wasmtime/tree/no-sync\" title=\"GitHub - badeend/wasmtime at no-sync\">GitHub - badeend/wasmtime at no-sync</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to badeend/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 416879712,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705703245
    },
    {
        "content": "<p>I won't be able to get to this today, but I'll take a crack at it next week</p>",
        "id": 416880496,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705703520
    },
    {
        "content": "<p>After thinking about it some more, I abandoned the Core/ComponentHost refactor and ended up with a much simpler solution.</p>",
        "id": 417001477,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705765851
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7802\">https://github.com/bytecodealliance/wasmtime/pull/7802</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7802\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a012d07d4233ddd4c2eff6c042793788d74811e6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313938643630386534636564613665326662373730626330623831383732366334393238343531623830333932376237303830393331633931316631383433312f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37383032)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7802\" title=\"WASI: remove unnecessary Sync constraints by badeend · Pull Request #7802 · bytecodealliance/wasmtime\">WASI: remove unnecessary Sync constraints by badeend · Pull Request #7802 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Fundamentally, preview2 is fully synchronous. So at least in theory there should be no need for all the Sync constraints. In practice it took me a while to figure out how to actually make it work. ...</div></div></div>",
        "id": 417001481,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1705765853
    },
    {
        "content": "<p>sorry just got to this, but that PR looks great and I'm glad Pat beat me to the punch on review!</p>",
        "id": 417292935,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1705948892
    },
    {
        "content": "<p>I was just now wondering why e.g. <code>ResourceTable::push</code> put a <code>Sync</code> bound on <code>T</code>. So glad to see that removed.  Thanks, <span class=\"user-mention\" data-user-id=\"378155\">@Dave Bakker (badeend)</span> !</p>",
        "id": 417296253,
        "sender_full_name": "Joel Dice",
        "timestamp": 1705950130
    }
]