[
    {
        "content": "<p>I am the developer of a simple fantasy console called MicroW8 based on WASM which is mostly used for sizecoding (for example creating visual effects in 256 bytes of code), which uses wasmtime for the native runner.</p>\n<p>Recently, I got reports that that recent releases have much worse performance on windows than releases build two years ago. I'm still trying to reduce this to a minimal test case, but from what I can see, something changed going from rust 1.64 to 1.65, dropping the wasmtime performance on windows by about 30%.</p>\n<p>You can find my ongoing test here: <a href=\"https://github.com/exoticorn/wt-regression\">https://github.com/exoticorn/wt-regression</a></p>\n<p>For me, I get the following results (on commit 9197048):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">1.64</span><span class=\"w\"> </span><span class=\"n\">bench</span>\n\n<span class=\"n\">technotunnel_upd</span><span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">3.9256</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.9273</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.9291</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">1.65</span><span class=\"w\"> </span><span class=\"n\">bench</span>\n\n<span class=\"n\">technotunnel_upd</span><span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">5.1347</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">5.1365</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">5.1385</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">30.715</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">30.791</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">30.869</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>I didn't see a performance regression on linux. But on windows, the dropped performance appears to be the same with newer versions of both wasmtime and rust.</p>\n<p>Does anyone have any idea about this? Maybe there is a simple tweak somewhere I'm missing to regain the lost performance?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/exoticorn/wt-regression\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0ac2152d9792170c6ac27f5962e4344aa4ff98aa/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393533626237656131316139386563346339623932666661383836666638663135623565363331303139663864616231666238623563613364373437386431322f65786f7469636f726e2f77742d72656772657373696f6e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/exoticorn/wt-regression\" title=\"GitHub - exoticorn/wt-regression: Investigating a wasmtime preformance regression on win32 since rust 1.65\">GitHub - exoticorn/wt-regression: Investigating a wasmtime preformance regression on win32 since rust 1.65</a></div><div class=\"message_embed_description\">Investigating a wasmtime preformance regression on win32 since rust 1.65 - exoticorn/wt-regression</div></div></div>",
        "id": 443622031,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1717957860
    },
    {
        "content": "<p>Ok, I simplified the test a bit further. I could still make the actual WASM code smaller, but it seems very much the case that calls to the <code>sin</code> function defined with <code>linker.func_wrap(\"env\", \"sin\", |v: f32| v)?;</code>(yes, that's no longer a <code>sin</code> call in the performance test) have gotten a lot slower with rust 1.65 on windows.</p>\n<p>Would a function defined with <code>func_new</code> or <code>func_new_unchecked</code> be likely faster?</p>",
        "id": 443642959,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1717968159
    },
    {
        "content": "<p>While I didn't notice any regression in the linux builds of the original application, now that I'm running the performance test on linux, I also see a bit of a slowdown with rust 1.65.</p>\n<p>So the call overhead to those provided functions probably increased across platforms.</p>",
        "id": 443700752,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718004616
    },
    {
        "content": "<p>Thanks for all the information here! Would you be up for filing an issue on the Wasmtime repo for this? This looks like something to bottom out and I want to make sure we don't lose track of it</p>",
        "id": 443802222,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718034330
    },
    {
        "content": "<p>To dig in a bit more though:</p>\n<ul>\n<li>The only change in the benchmark is rustc? Wasmtime is constant on 1.64 and 1.65?</li>\n<li>No <code>func_new_unchecked</code> is in theory slower than <code>func_wrap</code>, and <code>func_new</code> should be even slower</li>\n</ul>\n<p>And you're saying that the <code>env::sin</code> function there is what's slower? (e.g. even without <code>v.sin()</code>, it's slower as a noop?)</p>",
        "id": 443802758,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718034486
    },
    {
        "content": "<p>I also notice that this is using wasmtime 0.37, if you update wasmtime do you see the same performance regression? That would require using a newer rustc, however</p>",
        "id": 443818620,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039029
    },
    {
        "content": "<p>also: are you recompiling the wasm and the wasmtime with the different rustc versions, or just wasmtime?</p>",
        "id": 443819891,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1718039422
    },
    {
        "content": "<p>looking at the benchmarking repo it looks like rustc version was all that's changing, it's the same wasm and the same weasmtime, and the wasm looks like it's coming from a custom language</p>",
        "id": 443820029,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039466
    },
    {
        "content": "<p>I was able to reproduce locally on Windows but wasn't able to figure out how to use a profiler so couldn't go further</p>",
        "id": 443820062,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039478
    },
    {
        "content": "<p>the same wasm as in not being recompiled, and is literally the same wasm binary?</p>",
        "id": 443820182,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1718039519
    },
    {
        "content": "<p>correct</p>",
        "id": 443820245,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039527
    },
    {
        "content": "<p>the only variable was rustc</p>",
        "id": 443820269,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039533
    },
    {
        "content": "<p>and recompiling wasmtime with that rustc right? (while leaving the wasm binary as-is)</p>",
        "id": 443820353,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1718039565
    },
    {
        "content": "<p>yeah</p>",
        "id": 443820735,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039703
    },
    {
        "content": "<p>Yes, the wasm is an unchanged binary blob. I'm using wasmtime 0.37 to compare the old rust versions. With MicroW8, newer rustc and wasmtime versions did not to make a measurable performance difference, but I will do an updated version of the benchmark to verify.</p>",
        "id": 443820740,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718039704
    },
    {
        "content": "<p>nah that's ok I was just curious, it didn't look like much major in this area had changed since Wasmtime 0.37 to Wasmtime 21</p>",
        "id": 443820846,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039735
    },
    {
        "content": "<p>Wasmtime 22 (only a release branch not published yet) may be worth testing though since the host ABI is changing</p>",
        "id": 443820888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039748
    },
    {
        "content": "<p>but that'll just behave similarly to <code>func_new_unchecked</code> in terms of performance</p>",
        "id": 443820977,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039764
    },
    {
        "content": "<p>I'll also fill an issue soon, just wanted to see whether this is already known while I collect a little more info.</p>",
        "id": 443821129,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718039805
    },
    {
        "content": "<p>Not known yet as far as I know, but if you can I'd also test with the <code>release-22.0.0</code> branch of Wasmtime and see if that makes a difference</p>",
        "id": 443821758,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718039992
    },
    {
        "content": "<p>regardless this is probably a rustc/llvm thing and the best we can do in Wasmtime is figure out what's going wrong and tweak <code>#[inline]</code> and/or code structure, we probably can't fix the underlying issue (but I could be wrong too!)</p>",
        "id": 443821917,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718040020
    },
    {
        "content": "<p>I was on my mobile phone before, so I might flesh out a few replies now:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Performance.20regression.20since.20rust.201.2E65/near/443802758\">said</a>:</p>\n<blockquote>\n<p>And you're saying that the <code>env::sin</code> function there is what's slower? (e.g. even without <code>v.sin()</code>, it's slower as a noop?)</p>\n</blockquote>\n<p>The current version of the benchmark runs two different wasm binaries: <code>technotunnel.wasm</code> and <code>technotunnel_nosin.wasm</code>. The former shows a performance regression while the latter doesn't. The only difference between the two is that the latter locally defines</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">sin</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">f32</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">v</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>in WASM instead of importing the same function defined in rust. I put the source in the repository as a reference, it is indeed a custom language which essentially maps 1:1 to  wasm instructions (<a href=\"https://github.com/exoticorn/curlywas\">https://github.com/exoticorn/curlywas</a>).</p>\n<p>And I removed the actual call to <code>v.sin()</code> on the rust side and just returned <code>v</code> to make sure it's not that math function that's gotten slower.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/exoticorn/curlywas\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5bb0f75fbc900fb4fa82bb8c9af0103cdac69db8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326634363334343537383630623739336633643539363133376232666266653535383736316239303333383363646366616235633336366133323265383531312f65786f7469636f726e2f6375726c79776173&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/exoticorn/curlywas\" title=\"GitHub - exoticorn/curlywas: A curly-braces infix language that compiles to WebAssembly\">GitHub - exoticorn/curlywas: A curly-braces infix language that compiles to WebAssembly</a></div><div class=\"message_embed_description\">A curly-braces infix language that compiles to WebAssembly - exoticorn/curlywas</div></div></div>",
        "id": 443865594,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718054147
    },
    {
        "content": "<p>I added a small wasm binary to the benchmark which just calls the identity <code>env.sin</code> in a loop and sums up the return values. This is obviously very artificial, but shows the changes performance much clearer. I also quickly updated to wasmtime 21.0.1 in the <code>latest</code> branch.</p>\n<p>On this windows pc, I got the following results:</p>\n<p>wasmtime 0.37, rust 1.64:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">technotunnel_upd</span><span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">2.5457</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.5474</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.5491</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n\n<span class=\"n\">technotunnel_nosin_upd</span><span class=\"w\">  </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">2.7231</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.7244</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.7261</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n\n<span class=\"n\">simple_loop_upd</span><span class=\"w\">         </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">537.40</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">537.78</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">538.22</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>wasmtime 0.37, rust 1.65:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">technotunnel_upd</span><span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">3.4619</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.4669</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.4729</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">35.869</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">36.093</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">36.352</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">technotunnel_nosin_upd</span><span class=\"w\">  </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">2.7043</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.7063</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.7083</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.7590</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.6630</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.5724</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">simple_loop_upd</span><span class=\"w\">         </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">1.0879</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.0891</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.0900</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">101.98</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">102.69</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">103.61</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>wasmtime 0.37, rust 1.78:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">technotunnel_upd</span><span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">3.7467</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.7499</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.7528</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">7.9532</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">8.1630</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">8.3516</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">technotunnel_nosin_upd</span><span class=\"w\">  </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">2.7039</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.7059</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.7080</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">0.1189</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">0.0136</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">0.0930</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.81</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">simple_loop_upd</span><span class=\"w\">         </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">1.4500</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.4505</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.4510</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">32.539</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">33.312</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">34.042</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>wasmtime 21.0.1, rust 1.78</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">technotunnel_upd</span><span class=\"w\">        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">3.8879</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.8960</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.9051</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">3.6712</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">3.8957</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">4.1466</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">technotunnel_nosin_upd</span><span class=\"w\">  </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">1.9664</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.9669</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.9676</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">27.352</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">27.286</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">27.221</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n\n<span class=\"n\">simple_loop_upd</span><span class=\"w\">         </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">1.7066</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.7082</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">1.7097</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">17.088</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">17.555</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">17.855</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>So for the tests that are calling the imported <code>env.sin</code> function, each of these steps was a performance regression. Overall, the simple loop is more than 3x slower with the latest versions than on rust 1.64 + wasmtime 0.37. (I'll try out wasmtime 22 tomorrow)</p>\n<p>For the test without import, changing rustc versions had no influence, while the wasmtime update improved performance.</p>",
        "id": 443866833,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718054660
    },
    {
        "content": "<p>wow interesting!</p>",
        "id": 443868032,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718055207
    },
    {
        "content": "<p>And unexpected... Thanks for gathering the data though!</p>",
        "id": 443868058,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718055223
    },
    {
        "content": "<p>I just ran the benchmarks on linux on the same pc and got very similar numbers, so it's probably not platform dependent. (Maybe CPU dependent, if it is indeed caused by changes in LLVM (rust 1.65 did update to a newer LLVM version).)</p>",
        "id": 443868978,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718055684
    },
    {
        "content": "<p>oh nice, if it reproduces on Linux that'll make it much easier to investigate on our end</p>",
        "id": 443869103,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718055732
    },
    {
        "content": "<p>I have simplified the benchmark some more, putting the wasm code right into the rust source. While doing so I noticed that there was no regression when calling a <code>(i32) -&gt; i32</code> function like there was for a <code>(f32) -&gt; f32</code> function.</p>\n<p>wasmtime 22.0.0 gains back a little bit of performance compared to 21.0.1, but not that much.</p>\n<p>Another round of measurements with the latest benchmark, this time on a linux pc:</p>\n<p>wasmtime 0.37, rust 1.64</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">wasm</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">2.2450</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.2456</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">2.2462</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">3.1960</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.1972</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">3.1991</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>Back then, there was not too much overhead calling the function defined in rust vs. defined in wasm.</p>\n<p>wasmtime 0.37, rust 1.78</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">7.1093</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">7.1108</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">7.1125</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">122.27</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">122.40</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">122.51</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>wasmtime 21.0.1, rust 1.78 (branch <code>latest</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">11.948</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">11.953</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">11.959</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">68.017</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">68.102</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">68.198</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>wasmtime 22.0.0, rust 1.78 (branch <code>22.0</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">rust</span>\n<span class=\"w\">                        </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">9.4459</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">9.4482</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"w\"> </span><span class=\"mf\">9.4510</span><span class=\"w\"> </span><span class=\"n\">ms</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">21.000</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">20.957</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mf\">20.916</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>(the wasm-&gt;wasm performance was constant over all versions)</p>",
        "id": 444107484,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718143031
    },
    {
        "content": "<p>i have no real insight into this but i did find that the transition from rust 1.64 -&gt; rust 1.65 was when LLVM 15 was introduced. id be suspicious that the change is down in there somewhere, but i haven't looked deeper. <a href=\"https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1650-2022-11-03\">https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1650-2022-11-03</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1650-2022-11-03\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fded933f7af9d281abb7f5e09ce86c2bf41eb0db/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366366383561363934316634643930666364663166613164613162353433313264393966616332646333393130663434643861306136396663366437396137382f727573742d6c616e672f72757374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/stable/RELEASES.md#version-1650-2022-11-03\" title=\"rust/RELEASES.md at stable · rust-lang/rust\">rust/RELEASES.md at stable · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust-lang/rust</div></div></div>",
        "id": 444111393,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1718144863
    },
    {
        "content": "<p>I was doing some investigation of this last night (sorry should have posted earlier) and there a huge number of inefficiences we've introduced in the wasm-&gt;host call path since 0.37, the hot functions are littered with dozens of indirect calls which all end up being noops. There's definitely work to do in wasmtime orthogonal to LLVM.</p>\n<p>I also suspect that the LLVM upgrade is what \"broke\" the performance here originally. My best guess is that it has to do with the <code>catch_unwind</code> as there seemed to be more stack movement somewhat related to that. Optimizing that is theoretically possible in Rust but will require the <code>c_unwind</code> feature to stabilize, and that's actually looking like it'll stabilize in the next nightly or so of Rust</p>",
        "id": 444114405,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718146512
    },
    {
        "content": "<p>but cc <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> since in profiling I saw that the GC hooks were a huge source of slowdowns. I compared Rust 1.64.0/1.65.0 with Wasmtime 0.37 to Rust 1.78 with Wasmtime 22 (on <code>main</code>) and adding a single <code>#[cfg(feature = \"gc\")]</code> reduced the slowdown by 150%: Rust 1.65 was 30% slower than Rust 1.64, Wasmtime 22 was ~200% slower than Rust 1.64, and Wasmtime 22 with a small patch was ~40% slower than Rust 1.64.</p>",
        "id": 444114586,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718146598
    },
    {
        "content": "<p>basically I don't think we've been studiously watching the perf of wasm-&gt;host calls and we've got a lot of trait objects which can't be optimized out, especially GC-related ones, and in this case there was no GC bits anyway so it's sort of a bummer it was causing a slowdown (to recover perf I was disabling the whole <code>gc</code> feature at compile time which isn't a great solution)</p>",
        "id": 444114678,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718146654
    },
    {
        "content": "<p>I also wanted to open a more official issue for this but... busy!</p>",
        "id": 444114688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718146667
    },
    {
        "content": "<p>hm I'm not totally surprised, but also thought we had been trying to avoid these things except for when actually using GC stuff. happy to work on tweaks and brainstorm designs when we have a concrete example of a call/branch/path that was fast before but slow now.</p>\n<p>Unfortunately, I similarly don't have the cycles to do top-level investigations to chase down and discover those concrete things myself at the moment</p>",
        "id": 444116743,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1718147718
    },
    {
        "content": "<p>With a combination of <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8779\">https://github.com/bytecodealliance/wasmtime/pull/8779</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8780\">https://github.com/bytecodealliance/wasmtime/pull/8780</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8778\">https://github.com/bytecodealliance/wasmtime/pull/8778</a>, and disabling the <code>gc</code> of the wasmtime crate I'm currently seeing ~10% better performance than Rust 1.64 with wasmtime 0.37.</p>\n<p>With this diff</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/wasmtime/src/runtime/store.rs b/crates/wasmtime/src/runtime/store.rs</span>\n<span class=\"gh\">index e66f383251..72a929e10d 100644</span>\n<span class=\"gd\">--- a/crates/wasmtime/src/runtime/store.rs</span>\n<span class=\"gi\">+++ b/crates/wasmtime/src/runtime/store.rs</span>\n<span class=\"gu\">@@ -1125,13 +1125,14 @@ impl&lt;T&gt; StoreInner&lt;T&gt; {</span>\n\n<span class=\"w\"> </span>    #[inline]\n<span class=\"w\"> </span>    pub fn call_hook(&amp;mut self, s: CallHook) -&gt; Result&lt;()&gt; {\n<span class=\"gd\">-        if self.inner.pkey.is_none() &amp;&amp; self.call_hook.is_none() {</span>\n<span class=\"gd\">-            Ok(())</span>\n<span class=\"gd\">-        } else {</span>\n<span class=\"gd\">-            self.call_hook_slow_path(s)</span>\n<span class=\"gd\">-        }</span>\n<span class=\"gi\">+        // if self.inner.pkey.is_none() &amp;&amp; self.call_hook.is_none() {</span>\n<span class=\"gi\">+        Ok(())</span>\n<span class=\"gi\">+        // } else {</span>\n<span class=\"gi\">+        //     self.call_hook_slow_path(s)</span>\n<span class=\"gi\">+        // }</span>\n<span class=\"w\"> </span>    }\n\n<span class=\"gi\">+    #[inline(never)]</span>\n<span class=\"w\"> </span>    fn call_hook_slow_path(&amp;mut self, s: CallHook) -&gt; Result&lt;()&gt; {\n<span class=\"w\"> </span>        if let Some(pkey) = &amp;self.inner.pkey {\n<span class=\"w\"> </span>            let allocator = self.engine().allocator();\n</code></pre></div>\n<p>the number goes down to 50% faster than before.</p>\n<p>This final diff is possible to apply but a bit more difficult. <span class=\"user-mention\" data-user-id=\"727476\">@Dennis Ranke</span> is it reasonable to disable the <code>gc</code> feature for you? Also is on-par performance the goal here or were you looking to optimize the wasm-&gt;host path even further?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8779\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4269461a051317cc3d345448eac925cd170408c2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363566303736316665363937393738386330383866653261376634353365303731646238633237313739373166333733316336323338303433343131636462382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38373739&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8779\" title=\"Switch some asserts to debug asserts by alexcrichton · Pull Request #8779 · bytecodealliance/wasmtime\">Switch some asserts to debug asserts by alexcrichton · Pull Request #8779 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">These are on the critical path of calling from wasm to the host and while minor helps clean up the path.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8780\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a25d7e4747b0503525ddf13845921c8560e6f86e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323932313563356635353331316236636439396137613862323230633261313433656432393339316462383461343635353538376233396435626366663739342f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38373830&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8780\" title=\"Disable `AutoAssertNoGc` when `gc` is disabled by alexcrichton · Pull Request #8780 · bytecodealliance/wasmtime\">Disable `AutoAssertNoGc` when `gc` is disabled by alexcrichton · Pull Request #8780 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Statically avoids various assertions/checks when this feature is disabled.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8778\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ed5223c19e73389d43cccfa33e2aa64b6a8f194b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633830363965333863613237343130653834363535383238633339343963353066363733316333373438616633313262393535666332333962613239316136332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38373738&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8778\" title=\"Remove the `ModuleRuntimeInfo` trait by alexcrichton · Pull Request #8778 · bytecodealliance/wasmtime\">Remove the `ModuleRuntimeInfo` trait by alexcrichton · Pull Request #8778 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Replace it with an enum of the two possibilities that it can be. This removes the need to have a trait dispatch indirection in the vm module. Previously this was required as wasmtime-runtime was a ...</div></div></div>",
        "id": 444143984,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718165891
    },
    {
        "content": "<blockquote>\n<p>Optimizing that is theoretically possible in Rust but will require the <code>c_unwind</code> feature to stabilize, and that's actually looking like it'll stabilize in the next nightly or so of Rust</p>\n</blockquote>\n<p><code>extern \"C-unwind\"</code> has been stable for a while now. What isn't stable yet is the behavior of unwinding out of an <code>extern \"C\"</code> function aborting the process.</p>",
        "id": 444163461,
        "sender_full_name": "bjorn3",
        "timestamp": 1718176390
    },
    {
        "content": "<p>Oh, that sounds pretty good, thanks for looking into it!</p>\n<p>Disabling <code>gc</code> is totally fine for my use-case. I'll try your patches myself this evening.</p>\n<p>On-par performance sounds good enough for me. This use-case is A) the demo scene (ie. realtime animated graphical effects), so people are very sensitive to performance regression, as it impacts how smooth their effects run, but B) it's the sizecoding niche inside the demo scene, so people will happily inline complex expressions with many trigonometry host calls into their inner loop to save the 4 bytes of a <code>local.set</code>, <code>local.get</code> pair.</p>\n<p>All this to say: This is a very niche use-case in the WASM world, and while we appreciate any performance wins we can get, this is maybe not enough motivation for more difficult changes that gain a few more percent.</p>",
        "id": 444168245,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718177995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> true! I was seeing unwind edges and cleanups which in theory shouldn't be there so I was considering using <code>extern \"C\"</code> for \"hey llvm this function won't unwind don't try to add cleanups around this\" for internal hooks in wasmtime that should never unwind (e.g. weren't getting inlined), so yeah I was needing the abort-on-unwind behavior of <code>extern \"C\"</code> which is gated behind <code>c_unwind</code> (or more specifically I was interested in <code>nounwind</code> in the LLVM IR)</p>",
        "id": 444300664,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718216017
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"727476\">@Dennis Ranke</span> the patches have landed on <code>main</code> now so if you can kick the tires there and see how it is that should work well! (while ensuring to disable the <code>gc</code> feature)</p>",
        "id": 444300724,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718216037
    },
    {
        "content": "<p>I should also clarify I didn't actually get to the point of testing <code>nounwind</code> and its effects on perf, it was just a theory I had and couldn't bottom out</p>",
        "id": 444300950,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718216108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I just tried <code>main</code> without <code>gc</code>. Did you mean 10% faster than wasmtime 0.37 with rust 1.64 or 1.65? I'm getting 10% faster than 1.65, which is already really cool, but still some way of the 1.64 performance.</p>",
        "id": 444405320,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718265277
    },
    {
        "content": "<p>Just confirmed, but locally on Linux I see that when comparing Rust 1.64 and Wasmtime 0.37 with Rust 1.78 with Wasmtime <code>main</code>:</p>\n<ul>\n<li><code>technotunnel_upd</code> - improved 23%</li>\n<li><code>technotunnel_nosin_upd</code> - improved 50%</li>\n<li><code>simple_loop_upd</code> - regressed 141%</li>\n</ul>\n<p>I was only looking at <code>technotunnel_upd</code> numbers the other night, is your regression based on <code>simple_loop_upd</code>?</p>",
        "id": 444483256,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290048
    },
    {
        "content": "<p>Er apologies the numbers I just gave were with wasmtime with default features enabled, after disabling default features I get</p>\n<ul>\n<li><code>technotunnel_upd</code> - improved 43%</li>\n<li><code>technotunnel_nosin_upd</code> - improved 52%</li>\n<li><code>simple_loop_upd</code> - improved 3%</li>\n</ul>",
        "id": 444483796,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290197
    },
    {
        "content": "<p>You mentioned earlier you're on Windows so this could also be a Windows/Linux difference</p>",
        "id": 444483915,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290217
    },
    {
        "content": "<p>Essentially, yes. I simplified the benchmark further, which only kept the simple_loop version.</p>",
        "id": 444483988,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718290236
    },
    {
        "content": "<p>But to clarify locally I'm measuring a speedup in <code>simple_loop_upd</code> on Rust 1.78 with the <code>main</code> branch relative to Rust 1.64</p>",
        "id": 444484071,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290260
    },
    {
        "content": "<p>I can try to poke around on Windows later and see if I can reproduce Rust 1.64 still being slower than <code>main</code></p>",
        "id": 444484434,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290342
    },
    {
        "content": "<p>er, other way around, <code>main</code> still being slower than Rust 1.64</p>",
        "id": 444484458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290351
    },
    {
        "content": "<p>I can recheck with the older benchmark. I did run the performance test on Linux, too, though. (I'm not actually much of a Windows user myself, after I got the reports of regressions on Windows, I first had to spend (what felt like) multiple hours to update my windows install since I hadn't booted into it in more than a year... ;) )</p>",
        "id": 444485107,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718290543
    },
    {
        "content": "<p>Heh I know what you mean :)</p>",
        "id": 444485156,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290560
    },
    {
        "content": "<p>Does this dependency line look correct?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wasmtime\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">branch</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"main\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">false</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"wat\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"cranelift\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"runtime\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 444485329,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718290600
    },
    {
        "content": "<p>To clarify what I did I'm on <code>4dc3dc13871f7a3b66bb6732c4f381e0aa876410</code> of the <code>wt-regression</code> repository. I first ran <code>cargo +1.64.0 bench --bench wasmtime_benchmark -- --save-baseline original</code>. Then I applied this diff</p>\n<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/Cargo.toml b/Cargo.toml</span>\n<span class=\"gh\">index db47927..2b1c0ca 100644</span>\n<span class=\"gd\">--- a/Cargo.toml</span>\n<span class=\"gi\">+++ b/Cargo.toml</span>\n<span class=\"gu\">@@ -5,7 +5,8 @@ edition = \"2021\"</span>\n\n<span class=\"w\"> </span>[dependencies]\n<span class=\"w\"> </span>criterion = { version = \"0.3.0\", default-features = false }\n<span class=\"gd\">-wasmtime = \"0.37.0\"</span>\n<span class=\"gi\">+#wasmtime = \"0.37.0\"</span>\n<span class=\"gi\">+wasmtime = { path = '../wasmtime/crates/wasmtime', default-features = false, features = ['cranelift', 'runtime'] }</span>\n<span class=\"w\"> </span>anyhow = \"1\"\n\n<span class=\"w\"> </span>[[bench]]\n<span class=\"gh\">diff --git a/benches/wasmtime_benchmark.rs b/benches/wasmtime_benchmark.rs</span>\n<span class=\"gh\">index 024854c..5535ce9 100644</span>\n<span class=\"gd\">--- a/benches/wasmtime_benchmark.rs</span>\n<span class=\"gi\">+++ b/benches/wasmtime_benchmark.rs</span>\n<span class=\"gu\">@@ -6,6 +6,7 @@ fn benchmark_frame(c: &amp;mut Criterion) {</span>\n<span class=\"w\"> </span>    fn inner(c: &amp;mut Criterion, wasm: &amp;[u8], id: &amp;str) -&gt; Result&lt;()&gt; {\n<span class=\"w\"> </span>        let mut config = wasmtime::Config::new();\n<span class=\"w\"> </span>        config.cranelift_opt_level(wasmtime::OptLevel::Speed);\n<span class=\"gi\">+        // config.profiler(wasmtime::ProfilingStrategy::JitDump);</span>\n<span class=\"w\"> </span>        let engine = wasmtime::Engine::new(&amp;config)?;\n\n<span class=\"w\"> </span>        let mut store = wasmtime::Store::new(&amp;engine, ());\n<span class=\"gu\">@@ -13,7 +14,7 @@ fn benchmark_frame(c: &amp;mut Criterion) {</span>\n<span class=\"w\"> </span>        let memory = wasmtime::Memory::new(&amp;mut store, MemoryType::new(4, Some(4)))?;\n\n<span class=\"w\"> </span>        let mut linker = wasmtime::Linker::new(&amp;engine);\n<span class=\"gd\">-        linker.define(\"env\", \"memory\", memory)?;</span>\n<span class=\"gi\">+        linker.define(&amp;mut store, \"env\", \"memory\", memory)?;</span>\n\n<span class=\"w\"> </span>        let module = wasmtime::Module::new(&amp;engine, wasm)?;\n\n<span class=\"gu\">@@ -21,7 +22,7 @@ fn benchmark_frame(c: &amp;mut Criterion) {</span>\n\n<span class=\"w\"> </span>        let instance = linker.instantiate(&amp;mut store, &amp;module)?;\n\n<span class=\"gd\">-        let update = instance.get_typed_func::&lt;(), (), _&gt;(&amp;mut store, \"upd\")?;</span>\n<span class=\"gi\">+        let update = instance.get_typed_func::&lt;(), ()&gt;(&amp;mut store, \"upd\")?;</span>\n\n<span class=\"w\"> </span>        c.bench_function(id, |b| {\n<span class=\"w\"> </span>            b.iter(|| {\n<span class=\"gu\">@@ -32,7 +33,12 @@ fn benchmark_frame(c: &amp;mut Criterion) {</span>\n<span class=\"w\"> </span>        Ok(())\n<span class=\"w\"> </span>    }\n<span class=\"w\"> </span>    inner(c, include_bytes!(\"technotunnel.wasm\"), \"technotunnel_upd\").unwrap();\n<span class=\"gd\">-    inner(c, include_bytes!(\"technotunnel_nosin.wasm\"), \"technotunnel_nosin_upd\").unwrap();</span>\n<span class=\"gi\">+    inner(</span>\n<span class=\"gi\">+        c,</span>\n<span class=\"gi\">+        include_bytes!(\"technotunnel_nosin.wasm\"),</span>\n<span class=\"gi\">+        \"technotunnel_nosin_upd\",</span>\n<span class=\"gi\">+    )</span>\n<span class=\"gi\">+    .unwrap();</span>\n<span class=\"w\"> </span>    inner(c, include_bytes!(\"simple_loop.wasm\"), \"simple_loop_upd\").unwrap();\n<span class=\"w\"> </span>}\n</code></pre></div>\n<p>and ran <code>cargo bench --bench wasmtime_benchmark -- --baseline original</code></p>",
        "id": 444485489,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290650
    },
    {
        "content": "<p>Yes that features-line looks correct</p>",
        "id": 444485566,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718290672
    },
    {
        "content": "<p>Actually with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8794\">https://github.com/bytecodealliance/wasmtime/pull/8794</a> I'm seeing a 36% improvement on <code>main</code> relative to 1.64, an improvement over the 3% above</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8794\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c977a3ee6c493f6671c3aeea42b3194b571d0fa7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f326433356439643561373036386635316432366636313538663632623634313065386135323162376362633430636363316331623131346465303863626533662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38373934&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8794\" title=\"Statically disable MPK without the pooling allocator by alexcrichton · Pull Request #8794 · bytecodealliance/wasmtime\">Statically disable MPK without the pooling allocator by alexcrichton · Pull Request #8794 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">When the pooling allocator is itself disabled then there's no use for enabling MPK so this commit switches the implementation to all of the disabled versions of the primitives. This notably makes P...</div></div></div>",
        "id": 444491831,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718292063
    },
    {
        "content": "<p>Hm, I followed the same steps, just with a <code>git = \"https://github.com/bytecodealliance/wasmtime.git\"</code> dependency instead of the <code>path</code> one + I had to do a <code>cargo update</code>. With that I got the result that <code>simple_loop_upd</code> regressed by 64.694%.</p>",
        "id": 444502803,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718294697
    },
    {
        "content": "<p>Mind pushing up the state of the repo to the wt-regression repo?</p>",
        "id": 444502974,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718294734
    },
    {
        "content": "<p>That way we can compare two commits of wt-regression and try to make sure we're all sync'd up</p>",
        "id": 444503041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718294750
    },
    {
        "content": "<p>sure, one second, I'll re-run it here.</p>",
        "id": 444504795,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718295155
    },
    {
        "content": "<p>Branch name is <code>simple-loop-main</code>, but I'll just use commit ids below:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">checkout</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"n\">dc3dc13871f7a3b66bb6732c4f381e0aa876410</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">1.64</span><span class=\"w\"> </span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"n\">wasmtime_benchmark</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">save</span><span class=\"o\">-</span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">original</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">checkout</span><span class=\"w\"> </span><span class=\"mi\">529</span><span class=\"n\">af46497eb61787dd4204577831b2169efe486</span>\n<span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">bench</span><span class=\"w\"> </span><span class=\"n\">wasmtime_benchmark</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">baseline</span><span class=\"w\"> </span><span class=\"n\">original</span>\n\n<span class=\"n\">simple_loop_upd</span><span class=\"w\">         </span><span class=\"n\">time</span><span class=\"p\">:</span><span class=\"w\">   </span><span class=\"p\">[</span><span class=\"mf\">636.11</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">636.17</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"mf\">636.27</span><span class=\"w\"> </span><span class=\"err\">µ</span><span class=\"n\">s</span><span class=\"p\">]</span>\n<span class=\"w\">                        </span><span class=\"n\">change</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"o\">+</span><span class=\"mf\">69.564</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">69.720</span><span class=\"o\">%</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mf\">69.850</span><span class=\"o\">%</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0.00</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mf\">0.05</span><span class=\"p\">)</span>\n<span class=\"w\">                        </span><span class=\"n\">Performance</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">regressed</span><span class=\"p\">.</span>\n</code></pre></div>",
        "id": 444505371,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718295326
    },
    {
        "content": "<p>nice, I'll poke around later</p>",
        "id": 444505571,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718295372
    },
    {
        "content": "<p>with those instructions I get an 87% slowdown on <code>simple_loop_upd</code>, meaning <code>main</code> is slower. </p>\n<p>Looks like we're catching things at the wrong time though:</p>\n<ul>\n<li>A - <code>c65666c50a231bf4998419f6306e87b1fb18d586</code>, the commit used by wt-regression, is 87% slower than 1.64</li>\n<li>B - <code>9f29c6e92629a8552f57fa6b2cec1371bc34f9e8</code>, the commit before A, is 12% faster than 1.64</li>\n<li>C - <code>515fa4de012591e4edbc2548870ad377d0b5f3bc</code>, the commit after A, is 37% faster than 1.64</li>\n</ul>\n<p>Can you try re-updating to current <code>main</code>? (which is C, one commit after the one you're using). Basically this is all boiling down to <code>Store::call_hook</code> and the performance impact of that feature. It may point towards needing a Cargo feature to disable it (but on-by-default like gc)</p>",
        "id": 444521311,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718299923
    },
    {
        "content": "<p>(sorry sent a message soon so I just updated my prior message)</p>",
        "id": 444521820,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718300084
    },
    {
        "content": "<p>I <em>can</em> confirm that B (<code>9f29c6e92629a8552f57fa6b2cec1371bc34f9e8</code>) is indeed a little faster than 1.64, which is amazing! However, C (<code>515fa4de012591e4edbc2548870ad377d0b5f3bc</code>) is still 64% slower than 1.64 for me.</p>\n<p>I updated the branch to C.</p>",
        "id": 444531056,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718302865
    },
    {
        "content": "<p>Interesting! Using <code>d58b3b730c4e2ae71ee708304a2574a97f770e1f</code> which is the latest commit of the wt-regression repository I see a 36% improvement over Rust 1.64, and looks like you're seeing a 64% slowdown. My guess is it may have to do with CPU differences? Are you on x64 or arm64?</p>",
        "id": 444544242,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306699
    },
    {
        "content": "<p>Also you're testing on Linux, not macos?</p>",
        "id": 444544291,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306709
    },
    {
        "content": "<p>Yes, this is all on Linux.</p>",
        "id": 444544735,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718306789
    },
    {
        "content": "<p>x64?</p>",
        "id": 444544796,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306800
    },
    {
        "content": "<p>yes</p>",
        "id": 444544875,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718306817
    },
    {
        "content": "<p>what cpu?</p>",
        "id": 444544904,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306822
    },
    {
        "content": "<p>I'm testing on <code>Intel(R) Core(TM) i9-14900K</code> myself</p>",
        "id": 444544961,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306832
    },
    {
        "content": "<p>AMD Ryzen 7 7700</p>",
        "id": 444545062,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718306850
    },
    {
        "content": "<p>mk I think this may just be cpu differences then and how good branch predictors and caches and such are</p>",
        "id": 444545188,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306873
    },
    {
        "content": "<p>nevertheless I'll land something on <code>main</code> to remove all the call hook things</p>",
        "id": 444545284,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718306885
    },
    {
        "content": "<p>Oh look at that: On  a i5-9400F I indeed see a 30% improvement over 1.64. Benchmarking is hard.</p>",
        "id": 444546963,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718307448
    },
    {
        "content": "<p>with <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8795\">https://github.com/bytecodealliance/wasmtime/pull/8795</a> the AMD performance should improve, although I'm not sure if it will return to being on-part with 1.64</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8795\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d1ada315af9155e41347270320390adddaf6377/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396632373837333630646132356530393630373532666436346638346630383832376166656134613732366130396131323733376131326531306438393634622f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38373935&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8795\" title=\"Add a compile-time feature for call hooks by alexcrichton · Pull Request #8795 · bytecodealliance/wasmtime\">Add a compile-time feature for call hooks by alexcrichton · Pull Request #8795 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit moves the Store::call_hook API behind a Cargo feature named call-hook. This helps speed up the path from wasm into the host by avoiding branches at the start and the end of the executio...</div></div></div>",
        "id": 444547286,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307545
    },
    {
        "content": "<p>it's basically another crate feature for you to disable, but with <code>default-features = false</code> you'll already have it disabled</p>",
        "id": 444547323,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307560
    },
    {
        "content": "<p>It's -33.333% on AMD with that commit!</p>\n<p>This is really amazing, given that I was fully prepared to accept \"It's some change in LLVM, there's not much we can do.\" :)</p>",
        "id": 444548255,
        "sender_full_name": "Dennis Ranke",
        "timestamp": 1718307888
    },
    {
        "content": "<p>nice!</p>",
        "id": 444548362,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307932
    },
    {
        "content": "<p>sometimes a change in a different part of the system is the final motivation you need to change parts of your own system :)</p>",
        "id": 444548418,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307957
    },
    {
        "content": "<p>this helps fix a lot of cruft which accidentally snuck in on this path over the releases</p>",
        "id": 444548498,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307970
    },
    {
        "content": "<p>so great fixes to have regardless</p>",
        "id": 444548508,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718307974
    },
    {
        "content": "<p>One thing I'll note on this as well now is that after some follow-up fixes it's no longer necessary to disable default features to get the perf improvements here, they're now present in builds by default</p>",
        "id": 445024180,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718575143
    }
]