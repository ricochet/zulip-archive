[
    {
        "content": "<p>Hey folks. Hope this is the right place to ask this. Let me know if there is a better venue if not.</p>\n<p>I am writing a program in Rust which has a WASM based plugin system. I am trying to figure out if wasmtime or wasmer is the best way to go in terms of a runtime.</p>\n<p>One of the core requirements of this Rust application is that it needs to run both natively and in the browser (with the application itself being compiled to WASM). </p>\n<p>In the wasmer crate, they have a JS feature which allows you to do this by  using the execution  javascript environments own WASM compiler instread of cranelift etc ( <a href=\"https://docs.rs/wasmer/latest/wasmer/#overview-of-the-features\">https://docs.rs/wasmer/latest/wasmer/#overview-of-the-features</a>).</p>\n<blockquote>\n<p>Run Wasmer in a JavaScript environment — With the js Cargo feature, it is possible to compile a Rust program using Wasmer to WebAssembly. In this context, the resulting WebAssembly module will expect to run in a JavaScript environment, like a browser, Node.js, Deno and so on. In this specific scenario, there is no engines or compilers available, it’s the one available in the JavaScript environment that will be used.</p>\n</blockquote>\n<p>I was wondering if wasmtime had a similar feature / ability? I think I would much rather use wasmtime but this would be a deal-breaker if not possible</p>",
        "id": 403352347,
        "sender_full_name": "Stuart Lynn",
        "timestamp": 1700563257
    },
    {
        "content": "<p>I would recommend looking into using the <a href=\"https://component-model.bytecodealliance.org/\">WebAssembly Component Model</a> instead of targeting a specific runtime. That way you get the ability to use the results in any runtime implementing the component model, instead of being at the mercy of a specific runtime's trajectory.</p>\n<p>Right now, there are pretty solid implementations in wasmtime and JS (via <a href=\"https://github.com/bytecodealliance/jco\">JCO</a>), but at least WAMR and WasmEdge are working on implementations as well</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/203db12e15f1a7188573f0ddb4933991c4f1ae9e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363336393063633434653838303138306531646238323939623166313033346339393633303165393165336364323337653730643032346534306134643431352f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</div></div></div>",
        "id": 403362956,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1700566942
    }
]