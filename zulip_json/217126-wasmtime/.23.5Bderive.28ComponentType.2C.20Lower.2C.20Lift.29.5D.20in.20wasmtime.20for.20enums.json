[
    {
        "content": "<p>For my wasm components, on the rust host, I have types that I am using #[derive(ComponentType, Lower, Lift)] on to be able to pass to web assembly. But, I am have case issue with only the enums/variant type. </p>\n<p>For example in the wit file, if I have </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">expression</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">time</span><span class=\"o\">-</span><span class=\"n\">based</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">-</span><span class=\"n\">based</span><span class=\"o\">-</span><span class=\"n\">sliding</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">expression</span><span class=\"o\">-</span><span class=\"n\">D</span><span class=\"o\">-</span><span class=\"n\">T</span><span class=\"o\">-</span><span class=\"n\">O</span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">count</span><span class=\"o\">-</span><span class=\"n\">based</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"o\">-</span><span class=\"n\">based</span><span class=\"o\">-</span><span class=\"n\">sliding</span><span class=\"o\">-</span><span class=\"n\">window</span><span class=\"o\">-</span><span class=\"n\">expression</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>and the rust type on host </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Debug, Deserialize, PartialEq, Serialize, ComponentType, Lower, Lift)]</span>\n<span class=\"cp\">#[component(variant)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">WindowExpression</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">TimeBased</span><span class=\"p\">(</span><span class=\"n\">TimeBasedSlidingWindowExpressionDTO</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">CountBased</span><span class=\"p\">(</span><span class=\"n\">CountBasedSlidingWindowExpression</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I get a type mismatch error: expected variant case named TimeBased, found time-based</p>\n<p>I'm not sure how to debug where it is creating the time-based variant. Any idea why this might be happening?</p>",
        "id": 445339378,
        "sender_full_name": "Div",
        "timestamp": 1718711899
    },
    {
        "content": "<p>also, on the host</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">world</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"join\"</span><span class=\"p\">,</span>\n\n<span class=\"w\">    </span><span class=\"n\">path</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"wit/operators.wit\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">with</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"component:operators/types\"</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">crate</span><span class=\"p\">::</span><span class=\"n\">interface_types</span><span class=\"p\">::</span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"c1\">// this is for the rust types with enum above</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"k\">async</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">true</span><span class=\"p\">,</span>\n\n<span class=\"p\">});</span>\n</code></pre></div>",
        "id": 445341804,
        "sender_full_name": "Div",
        "timestamp": 1718712679
    },
    {
        "content": "<p>I believe you need to add <code>#[component(name = \"...\")]</code> attributes, e.g.:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Debug, Deserialize, PartialEq, Serialize, ComponentType, Lower, Lift)]</span>\n<span class=\"cp\">#[component(variant)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">WindowExpression</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"time-based\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">TimeBased</span><span class=\"p\">(</span><span class=\"n\">TimeBasedSlidingWindowExpressionDTO</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"count-based\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">CountBased</span><span class=\"p\">(</span><span class=\"n\">CountBasedSlidingWindowExpression</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 445361875,
        "sender_full_name": "Joel Dice",
        "timestamp": 1718718549
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/.23.5Bderive.28ComponentType.2C.20Lower.2C.20Lift.29.5D.20in.20wasmtime.20for.20enums/near/445361875\">said</a>:</p>\n<blockquote>\n<p>I believe you need to add <code>#[component(name = \"...\")]</code> attributes, e.g.:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[derive(Clone, Debug, Deserialize, PartialEq, Serialize, ComponentType, Lower, Lift)]</span>\n<span class=\"cp\">#[component(variant)]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">enum</span><span class=\"w\"> </span><span class=\"nc\">WindowExpression</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"time-based\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">TimeBased</span><span class=\"p\">(</span><span class=\"n\">TimeBasedSlidingWindowExpressionDTO</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"cp\">#[component(name = </span><span class=\"s\">\"count-based\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">    </span><span class=\"n\">CountBased</span><span class=\"p\">(</span><span class=\"n\">CountBasedSlidingWindowExpression</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>works, thank you!</p>",
        "id": 446877512,
        "sender_full_name": "Div",
        "timestamp": 1719320937
    }
]