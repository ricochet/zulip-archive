[
    {
        "content": "<p>I noticed when executing a component that has an import function, that the bindings use <code>anyhow::Result</code> which the user might not have as a dependency. I was wondering if a fix for this would be welcome or if the <code>bindgen!</code> macro is under so much development that I'd just be getting in the way.</p>",
        "id": 329465382,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677081582
    },
    {
        "content": "<p>ah yeah any <code>anyhow</code> paths should be referenced through <code>wasmtime::component::__internal::anyhow</code>, but it's likely one was missed! PRs more than welcome to fix that of course</p>",
        "id": 329466163,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677081728
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> unfortunately I think the issue is a bit more complex. The <code>MyComponentImports</code> trait that <code>bindgen!</code> creates needs to be referenced directly by the user. This means the user has to name the return type which is hardcoded to be <code>anyhow::Result&lt;T&gt;</code> where <code>T</code> is the return type of the import function. So I don't think there's really any easy fix - this is sort of by design...</p>",
        "id": 329466875,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677081915
    },
    {
        "content": "<p>oh true, did you have a particular fix in mind?</p>",
        "id": 329466994,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677081944
    },
    {
        "content": "<p>The only one that comes to mind is having those functions return <code>Result&lt;T, Box&lt;dyn std::error::Error&gt;&gt;</code> and have the <code>bindgen!</code> macro able to be configured to take some other error type... But that doesn't seem so nice</p>",
        "id": 329467321,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677082026
    },
    {
        "content": "<p>heh yeah <code>anyhow</code> is intentional since it threads all the way into Wasmtime -- do you think we should perhaps publicly reexport <code>anyhow</code> from wasmtime for consumption?</p>",
        "id": 329467499,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677082080
    },
    {
        "content": "<p>It seems you're comfortable with having anyhow be a part of the public API, so that would make sense I think</p>",
        "id": 329467799,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677082133
    },
    {
        "content": "<p>Perhaps a <code>wasmtime::component::Result</code>?</p>",
        "id": 329468137,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677082206
    },
    {
        "content": "<p>yeah I think that'd be fine</p>",
        "id": 329468375,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677082266
    },
    {
        "content": "<p>we're tied at the hip to <code>anyhow</code> now matter what</p>",
        "id": 329468408,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677082272
    },
    {
        "content": "<p>I think doing <code>wasmtime::Result</code> is also fine</p>",
        "id": 329468471,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1677082288
    },
    {
        "content": "<p>I can make a PR for that.</p>",
        "id": 329468852,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677082365
    },
    {
        "content": "<p>PR is up. <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\">https://github.com/bytecodealliance/wasmtime/pull/5853</a></p>\n<p>I added a question on whether this is the right approach or we should be relying on the <code>trappable_error_type</code> option.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/19e59972bae432c844bbbf7d5ed1106ef377b2c3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373264383864363833626233353031616461653431373366613763373430356335646561393064396532333865303964356331336165656164386333316138612f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35383533)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5853\" title=\"Result alias for convienient use of anyhow::Error without depending on anyhow by rylev 路 Pull Request #5853 路 bytecodealliance/wasmtime\">Result alias for convienient use of anyhow::Error without depending on anyhow by rylev 路 Pull Request #5853 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">As discussed on Zulip, the bindgen! macro assumes the usage of anyhow. This adds a type alias to wasmtime for std::result::Result&lt;T, anyhow::Error&gt; that allows users to use wasmtime::Result where a...</div></div></div>",
        "id": 329486698,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1677086697
    }
]