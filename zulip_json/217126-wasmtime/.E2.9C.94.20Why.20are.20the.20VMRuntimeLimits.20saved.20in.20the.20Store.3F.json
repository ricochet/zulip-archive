[
    {
        "content": "<p>It’s currently the case that all <code>Instance</code>s of a <code>Store</code> share the same <code>VMRuntimeLimits</code> object, which is stored in the <code>Store</code> (more concretely, the <code>StoreOpaque</code>). Each <code>VMContext</code> then contains a pointer to this shared object.<br>\nI was wondering if there is a particular reason for this design?<br>\nFor example, this design means that every access to the current stack limit now requires an additional pointer indirection, as the stack limit is saved in the <code>VMRuntimeLimits</code>.<br>\nOne place I see where the current design seems to be helpful is in functions like <code>Store::gc</code>: The latter requires access to the  <code>VMRuntimeLimits</code>. As far as I can tell, a <code>Store</code> has no notion of what the most recently executing <code>Instance</code> is, meaning that if the <code>VMRuntimeLimits</code> were stored per-<code>Instance</code> rather than per-<code>Store</code>, <code>Store::gc</code> wouldn’t actually be able to determine which <code>VMRuntimeLimits</code> corresponds to the most recent execution of wasm.</p>\n<p>In summary, my questions are:</p>\n<ol>\n<li>Is there a particular reason for sharing a single  <code>VMRuntimeLimits</code> object in the <code>Store</code>, instead of saving them per <code>Instance</code>? Or is this just some historical coincidence?</li>\n<li>Is it true that a <code>Store</code> itself has no notion of the most recently executing <code>Instance</code>?</li>\n</ol>\n<p>I'm not suggesting to change the current design, I'm just  asking this because I'm working on related code and trying to understand the current design.</p>",
        "id": 419705438,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1707059281
    },
    {
        "content": "<p>Hm, I'm now realizing that <code>VMRuntimeLimits</code> contains some fields that are probably supposed to be global to the <code>Store</code>, such as <code>fuel_consumed</code>. I was mostly looking at the <code>last_*</code> values and <code>stack_limit</code> in <code>VMRuntimeLimits</code>, which seem to be properties of a particular <code>Instance</code> rather than the whole <code>Store</code> when wondering about this.</p>",
        "id": 419705817,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1707059666
    },
    {
        "content": "<blockquote>\n<p>Is there a particular reason for sharing a single VMRuntimeLimits object in the Store, instead of saving them per Instance? Or is this just some historical coincidence?</p>\n</blockquote>\n<p>The reason for this is that the <code>Store&lt;T&gt;</code> is intended as shared state amongst a group of instances and semantically configuring options at the <code>Store&lt;T&gt;</code> level is defined as affecting all instances. In that sense it's part of the API contract that all instances refer to the same runtime limits, so not a historical coincidence but required today.</p>\n<p>One major reason for this is that it enables linking instances together. For example one instance's import can be provided by another instance's export. That can be configured in host code and there's no need for special trampolines when crossing instances. </p>\n<p>All that being said we have not heavily scritinized or optimized our stack checks, so if the double indirection is something you're seeing hot in profiles I think it'd be good to try to explore alternative solutions!</p>\n<blockquote>\n<p>Is it true that a Store itself has no notion of the most recently executing Instance?</p>\n</blockquote>\n<p>Correct. This ties into the above a bit where a <code>Store</code> is sort of a soup of instances/functions/etc and so instance identity isn't really a thing and instead it's all about the contents of the <code>Store</code></p>",
        "id": 419856887,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1707144747
    },
    {
        "content": "<p>also I believe there are things in the runtime limits that get mutated, and those mutations need to be seen by all instances in the store. iirc fuel and/or epochs is like this</p>",
        "id": 419938761,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1707171755
    },
    {
        "content": "<p>Thanks for both of your answers! My originally impression was that the <code>stack_limit</code> and <code>last_wasm_*</code> fields in <code>VMRuntimeLimits</code> were conceptually describing aspects of wasm execution inside a specific <code>Instance</code>, and that it was just a happy coincidence that you can share (this part of) the <code>VMRuntimeLimits</code> between the different <code>Instances</code>, even when execution alternates between different instances inside the same <code>Store</code>. But thanks to Alex' explanation, I understand now that my conceptual view on this just wasn't accurate. </p>\n<p>I have no reason to believe that the pointer indirection makes any meaningful performance difference (and haven't measured it). My train of thought was more like \"oh, doesn't some of the data in here conceptually belong somewhere else?\" followed by \"oh, the current design also means that you have this additional indirection at every <code>stack_limit</code> check\". That just got me curious about the reasons for the current design.</p>",
        "id": 419947738,
        "sender_full_name": "Frank Emrich",
        "timestamp": 1707176159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590021\">Frank Emrich</span> has marked this topic as resolved.</p>",
        "id": 419947833,
        "sender_full_name": "Notification Bot",
        "timestamp": 1707176196
    }
]