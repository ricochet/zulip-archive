[
    {
        "content": "<p>Is it a deliberate decision to pass functions like <code>path_open</code> a <code>GuestPtr&lt;'_, str&gt;</code> rather than resolving that to a <code>&amp;str</code> in the wrapper?</p>",
        "id": 191746067,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585143851
    },
    {
        "content": "<p>Currently yes, since obtaining <code>&amp;str</code> is unsafe and requires manually tracking borrows. That's why whenever you want to obtain a <code>&amp;str</code>, you'required to invoke</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">GuestBorrows</span>::<span class=\"n\">new</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"o\">&amp;*</span><span class=\"n\">ptr</span><span class=\"p\">.</span><span class=\"n\">as_raw</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">bc</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n</pre></div>\n\n\n<p>This way we're trying to avoid any overlapping borrows that may occur.</p>",
        "id": 191747070,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585144221
    },
    {
        "content": "<p>Now, I'm not sure how valid or difficult it would be to push the resolution to the layer above the trait method such as <code>path_open</code></p>",
        "id": 191747241,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585144297
    },
    {
        "content": "<p>I'm worried it might become quite tricky to properly track borrows then, although in case of strings, they are meant to be immutable (for now at least) and we create a new borrow checker instance per each resolution of <code>&amp;str</code></p>",
        "id": 191747419,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585144363
    },
    {
        "content": "<p>Would it help if we could assume that no witx API will have aliasing of any mutable references?</p>",
        "id": 191747656,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585144464
    },
    {
        "content": "<p>It probably would in part, but what about reentrancy e.g., recursive calls, etc?</p>",
        "id": 191747761,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585144512
    },
    {
        "content": "<p>Ah, interesting. So nothing in WASI currently is recursive, but in the general case, witx APIs could be.</p>",
        "id": 191747926,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585144576
    },
    {
        "content": "<p>Yep, that was the motivating factor behind the current design.</p>",
        "id": 191748323,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585144714
    },
    {
        "content": "<p>Hmm, but even with recursive functions, how could you get aliasing between a mutable buffer and another pointer in the same scope?</p>",
        "id": 191748792,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585144908
    },
    {
        "content": "<p>Hmm, so assuming you could get <code>&amp;str</code> to some region in guest's memory, and then from WASI's host function you'd want to call back in guest's memory again, that would potentially require some intricate mechanism for tracking borrows, wouldn't it? At least that's how I understood it when chatting with <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> about it.</p>",
        "id": 191749915,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585145321
    },
    {
        "content": "<p>yes this is protections in general against bugs in wasmtime</p>",
        "id": 191750067,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1585145387
    },
    {
        "content": "<p>even without recursion once you have <code>&amp;str</code> you can't modify the contents, but using the APIs of <code>Memory</code> it's very easy to modify the contents with an accidentally aliasing guest mutable pointer</p>",
        "id": 191750141,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1585145407
    },
    {
        "content": "<p>acquisition of <code>&amp;str</code> is a pretty unsafe operation (basically just runs into <a href=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html#memory-and-safety\" title=\"https://bytecodealliance.github.io/wasmtime/api/wasmtime/struct.Memory.html#memory-and-safety\">these examples</a>)</p>",
        "id": 191750216,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1585145440
    },
    {
        "content": "<p>We could however copy out the contents of that region into a <code>String</code> and pass that around, but I'm worried this might be somewhat heavy and unnecessary at times?</p>",
        "id": 191751494,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585145979
    },
    {
        "content": "<p>it's true that is almost always safe, yeah</p>",
        "id": 191752654,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1585146452
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> do you think passing paths as <code>String</code> would be something we could consider?</p>",
        "id": 191752998,
        "sender_full_name": "Jakub Konka",
        "timestamp": 1585146588
    },
    {
        "content": "<p>I wouldn't rule it out, but it doesn't seem like something we need to do right now.</p>",
        "id": 191960303,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585264016
    },
    {
        "content": "<p>I'd like to think a bit and see what other ideas we can come up with.</p>",
        "id": 191960620,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585264319
    },
    {
        "content": "<p>Such as, what if we added a parameter to <code>from_witx</code> which could say \"I promise that none of my implementations will re-enter (on penalty of undefined behavior)\"</p>",
        "id": 191960681,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585264344
    },
    {
        "content": "<p>\"or call <code>memory.grow</code> or equivalent\"</p>",
        "id": 191960809,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1585264471
    }
]