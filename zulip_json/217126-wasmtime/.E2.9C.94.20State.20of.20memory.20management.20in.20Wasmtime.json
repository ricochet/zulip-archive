[
    {
        "content": "<p>A hopefully quick question. My understanding is that Wasmtime uses <code>mmap</code> in 3 places:</p>\n<ol>\n<li>During compilation for all of the generated code(which is marked executable) and other bits (like data segments to load into LinearMemory)</li>\n<li>Linear Memory (memory provided to Wasm modules via <code>memory.grow</code>, <code>load</code> and <code>store</code> instructions and friends).</li>\n<li>Async stacks (The seperate stack WebAssembly executes on) are also <code>mmap</code>.</li>\n</ol>\n<p>There are currently configuration options to use custom allocators from embedders for 2 and 3.</p>\n<p>Does that sound correct? Are there other locations where <code>mmap</code> is used? Thanks in advance!</p>",
        "id": 396321149,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697126848
    },
    {
        "content": "<p>two other cases off the top of my head:</p>\n<ul>\n<li>wasmtime will call <code>malloc</code> for various things which will call <code>mmap</code></li>\n<li>depending on configuration, <code>mmap</code> can be used for cow memory images</li>\n</ul>",
        "id": 396322420,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697127270
    },
    {
        "content": "<blockquote>\n<p>wasmtime will call malloc for various things which will call mmap</p>\n</blockquote>\n<p>Is this different than usage of Rust allocator?</p>",
        "id": 396323783,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697127735
    },
    {
        "content": "<p>nope</p>",
        "id": 396323814,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697127750
    },
    {
        "content": "<p>Cool - thanks! That was all I wanted to double check. Appreciate the rapid response <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 396323877,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697127776
    },
    {
        "content": "<p><a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.memory_init_cow\">https://docs.rs/wasmtime/latest/wasmtime/struct.Config.html#method.memory_init_cow</a></p>",
        "id": 396323918,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697127793
    },
    {
        "content": "<p>^ info about the cow memory images</p>",
        "id": 396323934,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697127800
    },
    {
        "content": "<p>Thanks I was just going to look that up.</p>",
        "id": 396324158,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697127884
    },
    {
        "content": "<p>Do you have a code pointer for where this happens (no worries I can also go hunt it down)</p>",
        "id": 396324246,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697127919
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/738d41eaf2e257f776dc5643b19e41ae0a3e2700/crates/runtime/src/cow.rs#L97\">https://github.com/bytecodealliance/wasmtime/blob/738d41eaf2e257f776dc5643b19e41ae0a3e2700/crates/runtime/src/cow.rs#L97</a></p>",
        "id": 396324485,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697128010
    },
    {
        "content": "<p>Is that it?</p>",
        "id": 396324493,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697128012
    },
    {
        "content": "<p>Does that still work if <code>with_host_memory</code> is being used?</p>",
        "id": 396324600,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697128058
    },
    {
        "content": "<p>Looks like not: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/738d41eaf2e257f776dc5643b19e41ae0a3e2700/crates/wasmtime/src/trampoline/memory.rs#L127\">https://github.com/bytecodealliance/wasmtime/blob/738d41eaf2e257f776dc5643b19e41ae0a3e2700/crates/wasmtime/src/trampoline/memory.rs#L127</a></p>",
        "id": 396325231,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697128302
    },
    {
        "content": "<p>I haven't ever actually poked at the cow memory images implementation myself, so I'd just do exactly what you are doing to answer these questions, which is dig in and read the code</p>",
        "id": 396325471,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697128401
    },
    {
        "content": "<p>so: good luck!</p>",
        "id": 396325488,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697128413
    },
    {
        "content": "<p>Seems like if a custom host memory is being used those cow images should be disabled. Anyways, thanks for the help! Looks like I should plumb another config option through the C-API</p>",
        "id": 396325631,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697128459
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"610749\">Tyler Rockwood</span> has marked this topic as resolved.</p>",
        "id": 396325641,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697128465
    },
    {
        "content": "<p>I haven't dug into the low-level details, but my high level understanding is that when you instantiate a module or component from a .cwasm file, Wasmtime will try to COW the memory image in that file.</p>",
        "id": 396325655,
        "sender_full_name": "Joel Dice",
        "timestamp": 1697128475
    },
    {
        "content": "<p>One thing perhaps worth noting is that whilen COW uses mmap it always does so with MMAP_FIXED. If your custom host memory is not page aligned then you should disable COW</p>",
        "id": 396427728,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697175351
    },
    {
        "content": "<p>Custom host memory doesn't support COW at all, so I wonder if we should have the config assert that cow is not on with custom host memory.</p>\n<p>Ref: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/738d41eaf2e257f776dc5643b19e41ae0a3e2700/crates/wasmtime/src/trampoline/memory.rs#L127\">https://github.com/bytecodealliance/wasmtime/blob/738d41eaf2e257f776dc5643b19e41ae0a3e2700/crates/wasmtime/src/trampoline/memory.rs#L127</a></p>",
        "id": 396948521,
        "sender_full_name": "Tyler Rockwood",
        "timestamp": 1697477738
    },
    {
        "content": "<p>that's a good point yeah, that should probably assert that it's <code>None</code> and whenever a custom memory is set in <code>Config</code> it additionally validates that cow is disabled</p>",
        "id": 396948702,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1697477834
    }
]