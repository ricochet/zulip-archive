[
    {
        "content": "<p>Currently playing around with components, trying to understand how everything fits together. I think I understand the gist of it, but I really struggle with running a function exported from an interface.</p>\n<p>I'm using this WIT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">cluster</span>:<span class=\"nc\">main</span><span class=\"o\">@</span><span class=\"mf\">0.1.0</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">test</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">message</span>: <span class=\"nc\">string</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">runnable</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">run</span>: <span class=\"nc\">func</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">cluster</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">runnable</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>If, instead of <code>export runnable;</code>, I use <code>export run: func();</code>, I can use <code>instance.get_typed_func::&lt;(), ()&gt;(&amp;mut store, \"run\")</code> on the instance of the component to get a function I can then execute.<br>\nHowever, how do I get this run function if the world is instead exporting this <code>runnable</code> interface?</p>\n<p>Using the same invocation, <code>get_typed_func</code> returns an <code>Err</code>. Instead of <code>\"run\"</code>, I have also tried <code>\"runnable/run\"</code>, <code>\"cluster:main/run\"</code>, and some other variations to no avail. The documentation is not particularly helpful here, the <code>Instance::exports</code> function does not appear very helpful either. The option to list everything that is being exported would be quite useful here.</p>",
        "id": 428228426,
        "sender_full_name": "Xandaros",
        "timestamp": 1711060063
    },
    {
        "content": "<p>You can do this with the wasm-tools cli command e.g. <code>wasm-tools dump &lt;wasm&gt; | grep Export</code></p>",
        "id": 428232459,
        "sender_full_name": "Lann Martin",
        "timestamp": 1711062297
    },
    {
        "content": "<p>Programmatically there is also a more recently added introspection mechanism that gives more detail. You can access that via <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Linker.html#method.substituted_component_type\">https://docs.rs/wasmtime/latest/wasmtime/component/struct.Linker.html#method.substituted_component_type</a></p>",
        "id": 428232811,
        "sender_full_name": "Lann Martin",
        "timestamp": 1711062536
    },
    {
        "content": "<p>Aha! Thank you very much!</p>\n<p>I did try <code>wasm-tools component wit</code>, but that wasn't very helpful. With <code>wasm-tools dump</code>, I do find <code>cluster:main/runnable@0.1.0#run</code>, but that is not immediately runnable like that, either.<br>\nWith the introspection, though, I noticed that it's a separate instance, and I can get the function with</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">instance</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">exports</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"s\">\"cluster:main/runnable@0.1.0\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"s\">\"run\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>This does mean I need to know the exact version, but I suppose I can use the introspection API to match it more loosely.</p>\n<p>I will say, though, <code>substituted_component_type</code> is not something I would have thought useful from the name, nor would I have expected to look for something in Linker. It makes sense in hindsight, though.</p>",
        "id": 428234619,
        "sender_full_name": "Xandaros",
        "timestamp": 1711063742
    },
    {
        "content": "<p>FWIW the main branch has <a href=\"https://github.com/bytecodealliance/wasmtime/blob/ba1a7120e722699d788d62cc6d5eb9974aa5c78a/crates/wasmtime/src/runtime/component/component.rs#L351\"><code>Component::component_type</code></a> which should be much more discoverable</p>",
        "id": 428235635,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711064319
    },
    {
        "content": "<p>Oh yeah, that is much better. Especially with that documentation - very nice</p>",
        "id": 428237147,
        "sender_full_name": "Xandaros",
        "timestamp": 1711065407
    }
]