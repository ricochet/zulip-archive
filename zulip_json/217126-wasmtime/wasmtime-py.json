[
    {
        "content": "<p>Hey all! I'm looking at the <a href=\"https://github.com/bytecodealliance/wasmtime-py\">wasmtime-py</a> repo and wondering a few things related to contributing. I've been looking to do some open source contributions for a while and the wasm community seems like a great place to do so. I'm a python developer mostly with no Rust experience so looks like I could help with the wasmtime-py repo if there are opportunities there.</p>\n<p>A few questions:</p>\n<ol>\n<li>Are there any prior discussions of the repo? Looking for information on what files are autogen what aren't, how it's setup etc. Looking at contributor docs and I'm not groking what is what. (I'm not a codegen or ctypes expert, so learning)</li>\n<li>What are the high priority things needed / to be fixed for the repo? Wondering what a new contributor could start to help with.</li>\n<li>How intertwined is this with the CPython work and the <a class=\"stream-topic\" data-stream-id=\"223391\" href=\"/#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings\">#wasm &gt; Python guest runtime and bindings</a> convo?</li>\n</ol>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1898d48c603de9782f475569ba92c0b8a24d1adf\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306538613533626534616138323164366637613431336630636562313866613333383130306365323434643933333431373930393261323934383731666466302f62797465636f6465616c6c69616e63652f7761736d74696d652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py\" title=\"GitHub - bytecodealliance/wasmtime-py: Python WebAssembly runtime powered by Wasmtime\">GitHub - bytecodealliance/wasmtime-py: Python WebAssembly runtime powered by Wasmtime</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 355821151,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683216145
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> who seems to be the most active contributor?</p>",
        "id": 355821335,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683216181
    },
    {
        "content": "<p>Hello! The wasmtime-py repo could definitely do with some love, so help is appreciated! Currently there aren't a ton of docs and I think most of the design is just sitting in my head, so in terms of how best to start that may be it, helping document what you're learning as you come up to speed. I should also clarify that I myself am no Pythonista and I would consider myself as barely knowing Python. In that sense if you're a Python expert I'd be more than happy to have you weigh in on what's going on around wasmtime-py.</p>\n<p>I see you've also found the guest side of things which is good to be aware of as well. The intersection between the two projects doesn't currently exist in any concrete form, but in the hypothetical the intersection is the component model and how types are represented in Python.</p>\n<p>Anyway, for your questions:</p>\n<blockquote>\n<p>Are there any prior discussions of the repo? Looking for information on what files are autogen what aren't, how it's setup etc.</p>\n</blockquote>\n<p>Not currently. Maybe some bits and pieces in the issues, but nothing \"formal\". I'd recommend following what CI does from <code>.github/workflows/*.yml</code>. The <code>ci/cbindgen.py</code> script generates typed cffi bindings from the Wasmtime c-api header file, and otherwise the <code>ci/build-rust.py</code> will build component-related bindgen files.</p>\n<blockquote>\n<p>What are the high priority things needed / to be fixed for the repo? </p>\n</blockquote>\n<p>I don't have anything off the top of my head, but some possible ideas are:</p>\n<ul>\n<li>More examples of how to do things</li>\n<li>Perhaps better documentation since not everything is up-to-snuff</li>\n<li>There may be missing functions in the C API not bound in wasmtime-py, I forget though</li>\n</ul>\n<p>In general I find this sort of use is best driven by your own personal needs, but you can also peruse the issue tracker as well! (I'm not sure if there's a ton there though)</p>\n<blockquote>\n<p>How intertwined is this with the CPython work and the #wasm &gt; Python guest runtime and bindings convo?</p>\n</blockquote>\n<p>Not a ton, but definitely some with respect to how component model types are represented. Ideally bindgen sources would be shared as well, but I don't think things are advanced to quite that point yet.</p>",
        "id": 355824699,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683216829
    },
    {
        "content": "<p>Regarding the intersection of host and guest binding generation for Python: as I briefly discussed with Alex, I'm planning to split the <code>wasmtime-py</code> type binding generator into its own crate so it can be reused by <code>componentize-py</code> on the guest side, probably tomorrow.</p>",
        "id": 355827876,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683217605
    },
    {
        "content": "<p>Thanks Alex &amp; Joel!</p>\n<p>I'll take some time this weekend to dig in and get things running locally / fiddle with the ci stuff.</p>",
        "id": 355842896,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683221423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> how is componentize related to the podcast Brett did on RealPython? Is this the main effort to do WASM compiling from Python?</p>",
        "id": 355843858,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683221666
    },
    {
        "content": "<p>Brett's been attending our meetings, but I haven't had a chance to listen to that podcast.  CPython already has upstream WASI support, and there's also Pyodide for targeting the browser and Node.js.  So I wouldn't necessarily call this the \"main\" Python-&gt;Wasm effort.  This one is primarily focused on targeting the Wasm Component Model with Python.</p>",
        "id": 355845605,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683222083
    },
    {
        "content": "<p>Took a look around and at the PR open for speed improvements. I’m going to look into that more this week and the comments. </p>\n<p>Def outside my comfort zone but no better way to learn than to do.</p>",
        "id": 356380552,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683414336
    },
    {
        "content": "<p>Is it possible to use a <code>.wasm</code> file with wasmtime-py instead of a <code>.wat</code> file?</p>",
        "id": 358610152,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684203842
    },
    {
        "content": "<p>It looks like currently no, but we could extend this here to skip this step if the bytes passed in are already a wasmbinary format. <a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/main/wasmtime/_module.py#L28\">https://github.com/bytecodealliance/wasmtime-py/blob/main/wasmtime/_module.py#L28</a></p>\n<p>However we would probably have to put a flag in or something to allow it to skip compiling and it would pass only if the instance passed in is bytes or bytearray.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py/blob/main/wasmtime/_module.py#L28\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b2d694aa8eb74451d808a4c516808c2f312d3abc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656239353332336666663136633738306262613661353737353934376430363230383134616435636638363135313964633939333865646331363439626234652f62797465636f6465616c6c69616e63652f7761736d74696d652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/main/wasmtime/_module.py#L28\" title=\"wasmtime-py/_module.py at main · bytecodealliance/wasmtime-py\">wasmtime-py/_module.py at main · bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 358611372,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684204789
    },
    {
        "content": "<p>Currently it should support both binary and text format, where the text format is automatically converted to binary</p>",
        "id": 358613129,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684206302
    },
    {
        "content": "<p>Looks like bytes is automatically taken to wat2wasm. If wat2wasm recielves a wasm bytes does it do nothing?</p>\n<p>Looks like I can pass in a bytearray and it will skip the wat2wasm.</p>",
        "id": 358613697,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684206816
    },
    {
        "content": "<p>Yes wat2wasm is a noop if binary wasm is passed to it</p>",
        "id": 358625088,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684214839
    },
    {
        "content": "<p>Note that it's also checking the first byte, which if it's 0 indicates binary wasm</p>",
        "id": 358625147,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684214868
    },
    {
        "content": "<p>Ok a couple other questions as I'm entering and not finding helpful documentation on. Is there a way to generate a <code>*.wit</code> file from a<code>*.wasm</code> file? or a <code>*.wat</code> file?</p>\n<p>I'm trying to mount arbitrary wasm/wat in a python process but want to create a definition of that mounted module such that someone could type check it and see what the expected params to pass in are and expected output is.</p>\n<p>Seems to only be possible if they pass me a <code>*.wit</code> file as well.</p>",
        "id": 358726808,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684242679
    },
    {
        "content": "<p>Looks like someone was asking same question over in wasi land: <a href=\"#narrow/stream/219900-wasi/topic/Create.20WIT.20from.20wasm.20binary/near/358635878\">https://bytecodealliance.zulipchat.com/#narrow/stream/219900-wasi/topic/Create.20WIT.20from.20wasm.20binary/near/358635878</a></p>",
        "id": 358728621,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684243023
    },
    {
        "content": "<p>The <code>wasm-tools component wit</code> command parses a component <code>.wasm</code>/<code>.wat</code> and prints its interface as WIT</p>",
        "id": 358729832,
        "sender_full_name": "Lann Martin",
        "timestamp": 1684243283
    },
    {
        "content": "<p>I imagine doing something similar programmatically in Python would require writing bindings for various crates in <code>wasm-tools</code></p>",
        "id": 358730237,
        "sender_full_name": "Lann Martin",
        "timestamp": 1684243360
    },
    {
        "content": "<p><code>wasmtime-py</code> generates bindings based on WIT data extracted from the binary form of the component type in a .wasm file: <a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/95998108fd9c72cb8ffc2779b018576f9b75a332/rust/bindgen/src/bindgen.rs#L80\">https://github.com/bytecodealliance/wasmtime-py/blob/95998108fd9c72cb8ffc2779b018576f9b75a332/rust/bindgen/src/bindgen.rs#L80</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py/blob/95998108fd9c72cb8ffc2779b018576f9b75a332/rust/bindgen/src/bindgen.rs#L80\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b2d694aa8eb74451d808a4c516808c2f312d3abc\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656239353332336666663136633738306262613661353737353934376430363230383134616435636638363135313964633939333865646331363439626234652f62797465636f6465616c6c69616e63652f7761736d74696d652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/95998108fd9c72cb8ffc2779b018576f9b75a332/rust/bindgen/src/bindgen.rs#L80\" title=\"wasmtime-py/bindgen.rs at 95998108fd9c72cb8ffc2779b018576f9b75a332 · bytecodealliance/wasmtime-py\">wasmtime-py/bindgen.rs at 95998108fd9c72cb8ffc2779b018576f9b75a332 · bytecodealliance/wasmtime-py</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 358732315,
        "sender_full_name": "Joel Dice",
        "timestamp": 1684243779
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/217126-wasmtime/topic/wasmtime-py/near/358732315\">said</a>:</p>\n<blockquote>\n<p><code>wasmtime-py</code> generates bindings based on WIT data extracted from the binary form of the component type in a .wasm file: <a href=\"https://github.com/bytecodealliance/wasmtime-py/blob/95998108fd9c72cb8ffc2779b018576f9b75a332/rust/bindgen/src/bindgen.rs#L80\">https://github.com/bytecodealliance/wasmtime-py/blob/95998108fd9c72cb8ffc2779b018576f9b75a332/rust/bindgen/src/bindgen.rs#L80</a></p>\n</blockquote>\n<p>Oh I missed this. This will be great for ahead of time bindgen. </p>\n<p>We will need a JIT something that allows us to have a <code>.wasm</code> or <code>.wat</code> file in a variable and extract the imports / exports with typing information so we can at runtime evaluate  a wasm file before execution with some params provided.</p>\n<p>It looks like we'll need to add bindings for the python to be able to hook into the <code>wasm-tools component wit</code> similar to what <code>bindgen.rs</code> is doing.</p>",
        "id": 358736106,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684244527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/wasmtime-py/near/358730237\">said</a>:</p>\n<blockquote>\n<p>I imagine doing something similar programmatically in Python would require writing bindings for various crates in <code>wasm-tools</code></p>\n</blockquote>\n<p>Thanks Lann! I imagine you are right. We will need bindings for this.</p>",
        "id": 358736338,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684244571
    },
    {
        "content": "<p>Was trying to get it going locally but running to issues on <code>ci/build-rust.py</code> :</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error<span class=\"o\">[</span>E0425<span class=\"o\">]</span>:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"k\">function</span>,<span class=\"w\"> </span>tuple<span class=\"w\"> </span>struct<span class=\"w\"> </span>or<span class=\"w\"> </span>tuple<span class=\"w\"> </span>variant<span class=\"w\"> </span><span class=\"sb\">`</span>Err<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n<span class=\"w\">    </span>--&gt;<span class=\"w\"> </span>/Users/&lt;user&gt;/.cargo/registry/src/github.com-1ecc6299db9ec823/wasi-0.11.0+wasi-snapshot-preview1/src/lib_generated.rs:2147:14\n<span class=\"w\">     </span><span class=\"p\">|</span>\n<span class=\"m\">2147</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span>Err<span class=\"o\">(</span>Errno<span class=\"o\">(</span>ret<span class=\"w\"> </span>as<span class=\"w\"> </span>u16<span class=\"o\">))</span>,\n<span class=\"w\">     </span><span class=\"p\">|</span><span class=\"w\">              </span>^^^<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n\nerror<span class=\"o\">[</span>E0425<span class=\"o\">]</span>:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"k\">function</span>,<span class=\"w\"> </span>tuple<span class=\"w\"> </span>struct<span class=\"w\"> </span>or<span class=\"w\"> </span>tuple<span class=\"w\"> </span>variant<span class=\"w\"> </span><span class=\"sb\">`</span>Ok<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n<span class=\"w\">    </span>--&gt;<span class=\"w\"> </span>/Users/&lt;user&gt;/.cargo/registry/src/github.com-1ecc6299db9ec823/wasi-0.11.0+wasi-snapshot-preview1/src/lib_generated.rs:2160:14\n<span class=\"w\">     </span><span class=\"p\">|</span>\n<span class=\"m\">2160</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span><span class=\"nv\">0</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span>Ok<span class=\"o\">(())</span>,\n<span class=\"w\">     </span><span class=\"p\">|</span><span class=\"w\">              </span>^^<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n\nerror<span class=\"o\">[</span>E0425<span class=\"o\">]</span>:<span class=\"w\"> </span>cannot<span class=\"w\"> </span>find<span class=\"w\"> </span><span class=\"k\">function</span>,<span class=\"w\"> </span>tuple<span class=\"w\"> </span>struct<span class=\"w\"> </span>or<span class=\"w\"> </span>tuple<span class=\"w\"> </span>variant<span class=\"w\"> </span><span class=\"sb\">`</span>Err<span class=\"sb\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n<span class=\"w\">    </span>--&gt;<span class=\"w\"> </span>/Users/&lt;user&gt;/.cargo/registry/src/github.com-1ecc6299db9ec823/wasi-0.11.0+wasi-snapshot-preview1/src/lib_generated.rs:2161:14\n<span class=\"w\">     </span><span class=\"p\">|</span>\n<span class=\"m\">2161</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span><span class=\"nv\">_</span><span class=\"w\"> </span><span class=\"o\">=</span>&gt;<span class=\"w\"> </span>Err<span class=\"o\">(</span>Errno<span class=\"o\">(</span>ret<span class=\"w\"> </span>as<span class=\"w\"> </span>u16<span class=\"o\">))</span>,\n<span class=\"w\">     </span><span class=\"p\">|</span><span class=\"w\">              </span>^^^<span class=\"w\"> </span>not<span class=\"w\"> </span>found<span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span>this<span class=\"w\"> </span>scope\n</code></pre></div>\n<p>Lots of these cannot find function in this scope.</p>",
        "id": 359954044,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684614184
    },
    {
        "content": "<p>I think this probably means you need the wasm32-wasi rust target installed</p>",
        "id": 360291111,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684766000
    },
    {
        "content": "<p>I think that should be amongst the first error messages</p>",
        "id": 360291167,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684766010
    },
    {
        "content": "<p>Is that different than <code>rustup target add wasm32-wasi</code> ? Cause that was added. I'll have to see if I can capture those errors into a file to get to beginning. So many of them it's beyond history of terminal haha.</p>",
        "id": 360354156,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684782066
    },
    {
        "content": "<p>oh yeah that should have done it, in that case I'd take a look at the first errors</p>",
        "id": 360354579,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1684782185
    },
    {
        "content": "<p>If you're doing anything involving the WASI preview 1 -&gt; 2 adapter, you'll also need the <code>wasm32-unknown-unknown</code> target</p>",
        "id": 360360383,
        "sender_full_name": "Joel Dice",
        "timestamp": 1684784223
    },
    {
        "content": "<p>Hi! I'm trying to get WASM components working with wasmtime-py.</p>\n<p>I'm following the tutorial below, but it seems to be broken:<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime-py\">https://github.com/bytecodealliance/wasmtime-py</a></p>\n<p>Specifically, when I try to embed the WIT file in my WAT code --<br>\n<code>wasm-tools component new demo.wat --wit demo.wit -o demo.wasm</code></p>\n<p>-- I'm told that wasm-tools doesn't accept a --wit argument. I'm running the latest release of wasm-tools (1.0.35), so I guessed that this argument has been removed. I then tried:</p>\n<p><code> wasm-tools component embed demo.wit --world demo demo.wat -o demo.wasm</code></p>\n<p>but the provided *.wit file doesn't work. When I tweak it to more recent syntax --</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">local</span>:<span class=\"nc\">demo</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">demo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">python</span>: <span class=\"nc\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">print</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">s</span>: <span class=\"nc\">string</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">run</span>: <span class=\"nc\">func</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>-- I can embed the *.wit file successfully and produce a <code>demo.wasm</code> file.</p>\n<p>Now, when I try the next command in the tutorial, which is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"n\">python</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"p\">.</span><span class=\"n\">bindgen</span><span class=\"w\"> </span><span class=\"n\">demo</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">out</span><span class=\"o\">-</span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"n\">demo</span>\n</code></pre></div>\n<p>I get the following error:<br>\n``<br>\nRuntimeError: failed to parse the input component</p>\n<p>Caused by:<br>\n    attempted to parse a wasm module with a component parser</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Can</span><span class=\"w\"> </span><span class=\"n\">anyone</span><span class=\"w\"> </span><span class=\"n\">give</span><span class=\"w\"> </span><span class=\"n\">me</span><span class=\"w\"> </span><span class=\"n\">any</span><span class=\"w\"> </span><span class=\"n\">pointers</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">what</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"o\">'</span><span class=\"na\">m</span><span class=\"w\"> </span><span class=\"n\">doing</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"o\">?</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-py\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9441f89e667b0bb0d4374721f29de12432f65cc4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316436663964363537623061663735393039623564306332386135306261643261653733626335393039383363373662656261376366346134383638343939302f62797465636f6465616c6c69616e63652f7761736d74696d652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-py\" title=\"GitHub - bytecodealliance/wasmtime-py: Python WebAssembly runtime powered by Wasmtime\">GitHub - bytecodealliance/wasmtime-py: Python WebAssembly runtime powered by Wasmtime</a></div><div class=\"message_embed_description\">Python WebAssembly runtime powered by Wasmtime. Contribute to bytecodealliance/wasmtime-py development by creating an account on GitHub.</div></div></div>",
        "id": 367178457,
        "sender_full_name": "hax10",
        "timestamp": 1687009897
    }
]