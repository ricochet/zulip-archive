[
    {
        "content": "<p>I'm trying to figure out how to deal with the fact that a Store owns it's data. With how my application works, I need to make a Store only borrow it's state while using it and then return the state. Also the thing that owns the Store must be <code>'static</code>, so I can't get away with a lifetime here.</p>\n<p><code>Store::into_data</code> probably isn't the right solution since it would destroy any vm internal state.</p>\n<p>I can't move the application state into the Store because I may destroy the current Store and move app state to a new store at runtime.</p>",
        "id": 393365837,
        "sender_full_name": "i509VCB",
        "timestamp": 1695779544
    },
    {
        "content": "<p>The Store documentation also seems to mention it should be a short lived object, but in my application the Store may be around for a very long time</p>",
        "id": 393366646,
        "sender_full_name": "i509VCB",
        "timestamp": 1695779916
    },
    {
        "content": "<p><a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\">https://doc.rust-lang.org/std/mem/fn.replace.html</a> perhaps?</p>",
        "id": 393373239,
        "sender_full_name": "Lann Martin",
        "timestamp": 1695782544
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Have.20a.20Store.20borrow.20it's.20state.2E/near/393373239\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://doc.rust-lang.org/std/mem/fn.replace.html\">https://doc.rust-lang.org/std/mem/fn.replace.html</a> perhaps?</p>\n</blockquote>\n<p>I'm not sure mem::replace is going to solve my issue, let me type up something quickly</p>",
        "id": 393375328,
        "sender_full_name": "i509VCB",
        "timestamp": 1695783534
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">App</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">state</span>: <span class=\"nc\">State</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"c1\">// most of the time a runtime will exist, but it can be replaced and exist for a short time with no runtime.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">// However T needs to reference stuff in State. This would result in a self referential type.</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"c1\">//</span>\n<span class=\"w\">    </span><span class=\"n\">runtime</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Ideally I'd prefer to avoid using ouroboros which would make a self referential type and instead or resorting to unsafe</p>",
        "id": 393376063,
        "sender_full_name": "i509VCB",
        "timestamp": 1695783848
    },
    {
        "content": "<p>Although I'm not sure ouroboros is even capable of describing a self referential type which may cease being self referential in the future</p>",
        "id": 393376176,
        "sender_full_name": "i509VCB",
        "timestamp": 1695783910
    },
    {
        "content": "<p>Actually scratch the code example I wrote, I need something more like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">App</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">some_data</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">runtime</span>: <span class=\"nb\">Option</span><span class=\"o\">&lt;</span><span class=\"n\">Store</span><span class=\"o\">&lt;</span><span class=\"n\">App</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"c1\">// where App is &amp;mut self pretty much</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 393386687,
        "sender_full_name": "i509VCB",
        "timestamp": 1695788126
    }
]