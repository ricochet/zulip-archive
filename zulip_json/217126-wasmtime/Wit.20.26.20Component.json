[
    {
        "content": "<p>After having built a component I would like to make use of it from a Rust host. My question is: what dependencies do I have to use?<br>\nMy current assumption is to use a dependency like <code>wasmtime = { version = \"9.0.4\", features = [\"component-model\"] }</code>. </p>\n<p>This works fine to call functions <strong>but types like records do not seem to be recognized</strong>, e.g. I am not able to use <strong><em>Test</em></strong> from the following interface:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface decoding {\n  record test {\n    t1: u32,\n  }\n}\n\ndefault world decoder {\n  export exports: self.decoding\n}\n</code></pre></div>",
        "id": 367871218,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687256043
    },
    {
        "content": "<p>someone more qualified should answer, but my understanding is that most tooling uses the wit syntax of wasmtime-8 and the new syntax is used by wasmtime-11 (current main branch) and I'm entirely unsure what to do about wasmtime 9 and 10</p>",
        "id": 367871935,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1687256204
    },
    {
        "content": "<p>also wit.md hasn't been updated and I only know about the new syntax because wasi-host uses it internally, I would also like to know where the new wit format is documented</p>",
        "id": 367873296,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1687256493
    },
    {
        "content": "<p>In theory all you need is <code>wasmtime</code>-the-crate once you have the component itself you'd like to run. The syntax you're showing here should be compatible with Wasmtime 9 (not Wasmtime 10 though). There may be bugs in <code>bindgen!</code>, though, so it's recommended to use the latest Wasmtime (10 being released today) if possible</p>",
        "id": 367951578,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687271895
    },
    {
        "content": "<p>Thank you, sounds reasonable. I will test/experiment with Wasmtime 10. In case, something seems still weird, I will come back if that is ok.</p>",
        "id": 368123389,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687328242
    },
    {
        "content": "<p>..having tried a <a href=\"https://github.com/Finfalter/componenthost/tree/main\">minimal example</a> based on <code>wasmtime = { version = \"10.0.0\", features = [\"component-model\"] }</code>, my first impression is that quite a few things have changed:</p>\n<ol>\n<li>Without <strong>package</strong> specifier <code>bindgen!</code> refuses to compile now</li>\n<li>A <code>default</code> world refuses to compile</li>\n</ol>\n<p>My initial problem, though, persists: regardless what <strong>types</strong> I define in the interface, they <strong>do not seem to be defined/considered</strong> . For example, the <strong>record</strong> <code>mytest</code>, the <strong>type</strong> <code>t2</code> and the <strong>union</strong> <code>fancyunion</code> are not generated for the following interface:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>// without `package` specifier this does not compile\npackage sth:local\n\ninterface decoding {\n  record mytest {\n    t1: u32,\n  }\n\n  type t2 = tuple&lt;u32, u64&gt;\n\n  union fancyunion {\n    u64,\n    string,\n  }\n\n  my-function: func() -&gt; (a: u32, b: float32)\n}\n\n// `default world decoder` does NOT compile\nworld decoder {\n  export decoding\n}\n</code></pre></div>\n<p>When I <code>cargo expand</code> there is no hint to mentioned types except in a closing string. The function definition of <code>my-function</code>, in contrast, is generated as expected. Based on everything I see in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#the-wit-format\">general description of WIT</a> as well as in the <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/records.rs\">examples</a> my expectation is that type definitions should be generated. How am I wrong?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Finfalter/componenthost/tree/main\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/66d8f03bc2f94fdb66c3592c461403527169361f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316430356466376437346630386434653639623163626566386539336139313432626164303666306464666533653135643634356236653032356263313232642f46696e66616c7465722f636f6d706f6e656e74686f7374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Finfalter/componenthost/tree/main\" title=\"GitHub - Finfalter/componenthost: Minimal example of wasmtime about generating the wit for a component\">GitHub - Finfalter/componenthost: Minimal example of wasmtime about generating the wit for a component</a></div><div class=\"message_embed_description\">Minimal example of wasmtime about generating the wit for a component - GitHub - Finfalter/componenthost: Minimal example of wasmtime about generating the wit for a component</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#the-wit-format\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f535b1f979fcda7ec75354e26968a5fbdbb634b7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373763333066373934303661336134663266313136623935343931343935353261356233343930666539383439613035376365383761383436613665393236392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#the-wit-format\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/design/mvp/WIT.md at main · WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/records.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/983fefd5aa904f53a3e169fb66069dc438d1d823\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343465653563333839666235653233656539613437633363323864323962313932333435356566356339353833616662643264303266643934373765316339632f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/records.rs\" title=\"wit-bindgen/tests/runtime/records.rs at main · bytecodealliance/wit-bindgen\">wit-bindgen/tests/runtime/records.rs at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/tests/runtime/records.rs at main · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 368139361,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687332880
    },
    {
        "content": "<p>just curious, does anything change if my-function uses and/or returns the other types in the interface? I have never tried defining types that are used nowhere in a function</p>",
        "id": 368209250,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1687348304
    },
    {
        "content": "<p>Oh yes types are generated on a liveness basis right now and those aren't live so they aren't generated.</p>",
        "id": 368232144,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687352951
    },
    {
        "content": "<p>Confirmed! Following Ramon's suggestion, e.g. <code>my-function: func(my: mytest) -&gt; t2</code>, it shows up in <code>cargo expand</code> now and I can <code>use</code> it <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span> <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 368262306,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687358543
    },
    {
        "content": "<p>May I ask you for a further hint? Given I have the following interface (based on previous discussion):</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>interface decode {\n  record some-handle {\n    name: string,\n    id1: u64,\n    id2: u32,\n  }\n  decode-given-handle: func(handles: list&lt;some-handle&gt;, payload: list&lt;u8&gt;) -&gt; list&lt;tuple&lt;string&gt;&gt;\n}\n\nworld decoder {\n  export decode\n}\n</code></pre></div>\n<p>The essentials are: The <strong>list of a record shall be passed as parameter to a function</strong>. The compiler expects a <strong>&amp;[&amp;T]</strong> which is also nicely illustrated in the <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists.rs\">examples</a>. </p>\n<p>My problem is: I do not know how to call the corresponding function such that the compiler accepts it. My usual error message is like:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>the<span class=\"w\"> </span>size<span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span>values<span class=\"w\"> </span>of<span class=\"w\"> </span><span class=\"nb\">type</span><span class=\"w\"> </span><span class=\"sb\">`</span><span class=\"o\">[</span><span class=\"p\">&amp;</span>SomeHandle<span class=\"o\">]</span><span class=\"sb\">`</span><span class=\"w\"> </span>cannot<span class=\"w\"> </span>be<span class=\"w\"> </span>known<span class=\"w\"> </span>at<span class=\"w\"> </span>compilation<span class=\"w\"> </span><span class=\"nb\">time</span>\n</code></pre></div>\n<p>How would you call function <code>decode_given_handle</code> from a Rust host?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/983fefd5aa904f53a3e169fb66069dc438d1d823\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343465653563333839666235653233656539613437633363323864323962313932333435356566356339353833616662643264303266643934373765316339632f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/lists.rs\" title=\"wit-bindgen/tests/runtime/lists.rs at main · bytecodealliance/wit-bindgen\">wit-bindgen/tests/runtime/lists.rs at main · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - wit-bindgen/tests/runtime/lists.rs at main · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 368468670,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687423091
    },
    {
        "content": "<p>ok, that works (finally):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// let some_handles_ref :&amp;Vec&lt;SomeHandle&gt; ..</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">some_handle_refs</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;&amp;</span><span class=\"n\">SomeHandle</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">some_handles_ref</span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">collect</span><span class=\"p\">();</span>\n<span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">interface0</span><span class=\"p\">.</span><span class=\"n\">call_decode_given_handle</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">some_handle_refs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 368487220,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1687426635
    }
]