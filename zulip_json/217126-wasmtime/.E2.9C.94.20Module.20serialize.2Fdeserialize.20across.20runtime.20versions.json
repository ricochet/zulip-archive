[
    {
        "content": "<p>Hi, I wonder if it's possible to  load a pre-compiled module which was serialized by a different version of wasmtime? The use case is to upgrade wasmtime runtime without re-generating all the AOTs. I'm aware there's the <code>precompile_compatibility_hash</code> function, but want to get a bit more details behind it. Thanks!</p>",
        "id": 396567819,
        "sender_full_name": "anb",
        "timestamp": 1697229360
    },
    {
        "content": "<p>there is an option to ignore that hash that makes it possible, but its dangerous</p>",
        "id": 396567889,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1697229386
    },
    {
        "content": "<p>the serialization format may change between versions, and we cant predict how that will invalidate the serialized artifacts</p>",
        "id": 396567943,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1697229424
    },
    {
        "content": "<p>we left that escape hatch in to ignore the compatibility hash so that we had a way to roll out a patch to something we know doesnt make a difference to that serialization format (for example, fixing a buggy isle rule in cranelift) and send those modules to an unpatches runtime</p>",
        "id": 396568067,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1697229496
    },
    {
        "content": "<p>but for anything besides that, i'd recommend not risking it unless you are willing to do a very careful audit of all the structures that get serialized into those cwasms and how they changed between versions.</p>",
        "id": 396568135,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1697229552
    },
    {
        "content": "<p>I see, that's a fair point. Thank you Pat!</p>",
        "id": 396568497,
        "sender_full_name": "anb",
        "timestamp": 1697229768
    },
    {
        "content": "<p>The <code>precompile_compatibility_hash</code> function just hashes the exact same data that the compiler uses to check compatibility, which consists primarily of the wasmtime version string and various CPU features.</p>",
        "id": 396568505,
        "sender_full_name": "Lann Martin",
        "timestamp": 1697229775
    },
    {
        "content": "<p>Guess I have to bundle multiple runtime versions into the host program, to make the upgrade smooth. Looks like 12.0 added support for that.</p>",
        "id": 396568752,
        "sender_full_name": "anb",
        "timestamp": 1697229940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"591763\">anb</span> has marked this topic as resolved.</p>",
        "id": 396571241,
        "sender_full_name": "Notification Bot",
        "timestamp": 1697231325
    },
    {
        "content": "<p>the thing I would be most scared of here is not a change to the way we package the compiled code into ELF sections (since that would <em>probably</em> fail pretty loudly when we tried to eg find a section with an old name that isn't in the file anymore)</p>\n<p>the thing I would be really scared of is something like a change to the layout of the vmctx. in this scenario, we would load the code into a <code>Module</code> just fine, but you'd get UB as soon as you called into Wasm</p>",
        "id": 396575871,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1697234165
    }
]