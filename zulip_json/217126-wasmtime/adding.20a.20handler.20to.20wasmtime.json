[
    {
        "content": "<p>I want to add a handler function to Wasmtime to be called when the wasm module calls an imprted function such as Wasi libc functions. So, wasmtime transfers the control to my handler and then my handler calls the imported function. Can you please help me how I can implement this handler for wasmtime?</p>",
        "id": 295306265,
        "sender_full_name": "julia",
        "timestamp": 1661459571
    },
    {
        "content": "<p>Does <a href=\"https://docs.rs/wasmtime/latest/wasmtime/struct.Store.html#method.call_hook\"><code>Store::call_hook</code></a> do the trick for you ?</p>",
        "id": 295376543,
        "sender_full_name": "Alphyr",
        "timestamp": 1661502890
    },
    {
        "content": "<p>Thanks for your reply. <br>\nI need the mechanism like ptrace, is it the similar to it? I couldn't find an example for it</p>",
        "id": 295541561,
        "sender_full_name": "julia",
        "timestamp": 1661570652
    },
    {
        "content": "<p>Wasmtime doesn't support singlestepping through a wasm function. You will likely need a wasm interpreter (as opposed to compiler) for that.</p>",
        "id": 295556024,
        "sender_full_name": "bjorn3",
        "timestamp": 1661585360
    },
    {
        "content": "<p>I think my comment wasn't clear, and made you confuse, sorry for that.<br>\nLet me clarify it:<br>\nThis is what I need to do: <br>\n1.  a wasm module calls a wasi function or another imported function <br>\n2.  Regardless of which function was called, my custom function should be called (like a proxy) and this function should access to all parameter’s values<br>\n3.  Then my custom function can change parameters values and then calls the requested wasi function with the changed values<br>\nIs it possible to add this functionality to Wasmtime?</p>",
        "id": 295649653,
        "sender_full_name": "julia",
        "timestamp": 1661643602
    },
    {
        "content": "<p>This should be possibly by defining your own version of a function within a <code>Linker</code>. Calling the original function is a bit wonky but you can use <code>Linker::get</code> to get the previous version of the function to call after you've applied your ahead-of-time filtering logic. Additionally many items inserted into a <code>Linker</code> are also provided as free functions (e.g. in the case of WASI I think that should be the case, or we can at least make that be the case)</p>",
        "id": 296141407,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1661871791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  great! thanks for your reply. I should study more about the linker to get familiar with it to understand how I can implement it. thanks!</p>",
        "id": 296255983,
        "sender_full_name": "julia",
        "timestamp": 1661921789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I found out how I can add my function to a linker. But it is still confusing to me how I can access to imported function parameters when a call happens. Can you please help me with accessing argument's values of calling import functions?  You mentioned that it is possible to use Linker::get to get the previous version of the function. Is this function (get in linker) called when an import function called in the wasm module? How can this function access to imported function parameters? Can you clarify your answer a little bit more?<br>\nSorry if my question is silly because I just started to learn wasmtime structure.</p>",
        "id": 297175740,
        "sender_full_name": "julia",
        "timestamp": 1662362003
    },
    {
        "content": "<p>Hm I'm not sure I understand, when a function is added to a <code>Linker</code> it's added as a closure, and the parameters to the wasm function are the parameters to the closure, so I'm not sure how else you'd like access to the parameters?</p>\n<p>For acquiring the previous version you'd probably get the current version of the function, then close over that in the definition of the new function. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.;</span><span class=\"w\"></span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">prev_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">into_func</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">define</span><span class=\"p\">(</span><span class=\"s\">\"foo\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"bar\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">arg</span>: <span class=\"kt\">u32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"got: {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">prev_func</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span><span class=\"w\"></span>\n<span class=\"p\">})</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 297434254,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1662479693
    },
    {
        "content": "<p>or something like that</p>",
        "id": 297434356,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1662479732
    },
    {
        "content": "<p>Thanks for your reply. <br>\nI wanted my function to act like a transparent proxy for a wasm module and call when a wasi function has been called. But right now, based on your sample code, I think what you mean is that I have to import my custom function into the wasm module and call it instead of wasi function and then my custom function calls the wasi (previous) function. Is it right? </p>\n<p>I have another question, is there any function in wasmtime that calls when a wasi function is called by a wasm module?  I mean a function which transfer the control to the wasi functions in wasi_snapshot_preview1.</p>",
        "id": 297451321,
        "sender_full_name": "julia",
        "timestamp": 1662485044
    },
    {
        "content": "<p>No what I'm describing is shadowing a function in a linker where you redefine a previous item (e.g. a previously defined wasi function) with your own custom function, so when a wasm module calls that wasi function it calls your function instead.</p>\n<p>There are some simliar features to your second question but I don't think we have one precisely for that.</p>\n<p>I'd probably recommend studying the API documentation of the <code>Linker</code> type and additionally looking more into how WASI is implemented in Wasmtime today using <code>Linker</code>. Putting those two together will probably give you a better picture about how to implement what you're thinking and what the limitations are.</p>",
        "id": 297460051,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1662487852
    },
    {
        "content": "<p>Thanks for your solution. It worked and I could shadow a wasi function. However I had to use <strong>linker.func_wap</strong> instead of define (define didn’t work). I added my implementation to <strong>RunCommand</strong> implementation in <em>src/commands/run.rs</em> file. <br>\n But I still have trouble with calling the previous function. For example, I got these errors when I wanted to shadow <strong>args_sizes_get</strong> function which is a function without any argument.  Do you know what is wrong with my implementation? </p>\n<div class=\"codehilite\" data-code-language=\"error\"><pre><span></span><code>linker.func_wrap(\"wasi_snapshot_preview1\", \"args_sizes_get\",  || -&gt; (i32,i32) {\n    |                                                        ^^^^^^^^^^^^^^^ this closure implements FnOnce , not  Fn    the requirement to implement  Fn  derives from here\nprev_func.call(store,&amp;[],&amp;mut []);\nclosure is  FnOnce  because it moves the variable  store  out of its environment\n\nerror[E0277]:  RefCell&lt;wasmtime_wasi_nn::ctx::Ctx&gt;  cannot be shared between threads safely\n   --&gt; src/commands/run.rs:209:20\n ```\n</code></pre></div>",
        "id": 298313135,
        "sender_full_name": "julia",
        "timestamp": 1662958941
    }
]