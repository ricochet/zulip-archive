[
    {
        "content": "<p>Wasmtime is a pretty heavy dependency and slows down build and link times a lot when embedded into other projects.</p>\n<p>This is of course expected, it contains a full compiler and runtime.</p>\n<p>But it's really quite annoying during development, especially in a larger project where the wasm engine is only a smaller part of functionality.<br>\nwasmtime also pretty much has to be built with a higher opt level or it will be way to slow if testing includes running wasm code.</p>\n<p>Has anyone considered re-wrapping the C API in Rust bindings that remain as faithful as possible to the actual Rust API? <br>\nThat way during development wasmtime could be built once as a dynamic library (with optimizations) and then linked. <br>\nThis could  speed up incremental builds a lot.</p>\n<p>And release builds can switch back to using the actual Rust library.</p>",
        "id": 257120659,
        "sender_full_name": "theduke",
        "timestamp": 1633988934
    },
    {
        "content": "<p>AFAIK no one's done this but it's something I've wondered whether it makes sense before. This would be some tricky automation to get everything sync'd up right and feed it into the release process, but I don't think that it's unheard of and it's not like it's impossible. FWIW for the opt-level you can optimize the cranelift-codegen crate in Cargo which would probably get the lion's share of the benefit</p>",
        "id": 257122905,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1633990414
    }
]