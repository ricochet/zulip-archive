[
    {
        "content": "<p>Hi,</p>",
        "id": 424322907,
        "sender_full_name": "Chris Emerson/jugglerchris",
        "timestamp": 1709325819
    },
    {
        "content": "<p>(Sorry, hit enter too soon, and then got distracted by an idea)<br>\nI'm trying to call into a component from a dynamic language, so I'm trying to use a lot of introspection rather than knowing in advance what exports there are.  I'm now trying to get a resource type to work, but I haven't figured out how to extract the information I need.</p>\n<p>So far I can get a list of exports with <code>wasmtime::component::types::Component::exports()</code> (and recursing into <code>ComponentInstance::exports()</code>), which includes the (currently only) resource type by name:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">764</span>:<span class=\"mi\">25</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">item_name</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">item</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"s\">\"zipfile\"</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">Resource</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"n\">ResourceType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"n\">kind</span>: <span class=\"nc\">Uninstantiated</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">component</span>: <span class=\"mi\">94136215617120</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">index</span>: <span class=\"nc\">ResourceIndex</span><span class=\"p\">(</span>\n<span class=\"w\">                    </span><span class=\"mi\">4</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"p\">),</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">},</span>\n<span class=\"w\">    </span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>If I look at the functions return type (<code>Func::results()</code>), or the <code>restype.ty()</code> on the <code>Val::Resource</code>, the resource type looks like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">lib</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">984</span>:<span class=\"mi\">13</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">ty</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ResourceType</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">kind</span>: <span class=\"nc\">Guest</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">store</span>: <span class=\"nc\">StoreId</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">        </span><span class=\"n\">instance</span>: <span class=\"mi\">94036607155888</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">id</span>: <span class=\"nc\">DefinedResourceIndex</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I've tried just comparing them (with <code>==</code>) and they don't compare equal.  What am I missing to be able to tie resource types as returned from guest functions with the types in the exports?  I think I need to do this to get the list of available methods.</p>\n<p>Thanks for any help!</p>",
        "id": 424328592,
        "sender_full_name": "Chris Emerson/jugglerchris",
        "timestamp": 1709328565
    },
    {
        "content": "<p>I think you're running into two things: (1) resources are subtle and (2) we need more introspection APIs.</p>\n<p>For the first part, the subtle part about exported resources is that each time you instantiate a component it's generating fresh new types for each resource. This means that if you instantiate twice you'll also see that the same-named resource from each component does not compare equal to the other. This is similar to an uninstantiated component where that isn't equivalent to other instantiated components since fresh new types were made.</p>\n<p>For (2) we should probably have introspection APIs on an <code>Instance</code> itself so you can learn the exact type of the resource being created here.</p>",
        "id": 424329004,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709328739
    },
    {
        "content": "<p>(2) Sounds good!<br>\n(1) Also sounds good, as it probably means I'm unintentionally instantiating more than once and so if I just stop doing that, things will look good again.</p>\n<p>Oh, does the <code>Uninstantiated</code> in the first output mean I'm actually doing the opposite and comparing with exports before instantiating?</p>",
        "id": 424331753,
        "sender_full_name": "Chris Emerson/jugglerchris",
        "timestamp": 1709330118
    },
    {
        "content": "<p>Yeah that was recently added to <code>main</code> and is what's happening</p>",
        "id": 424331973,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709330221
    },
    {
        "content": "<p>Is there actually a way to get a list of exports on an instantiated component?  I keep being confused by lots of similar/same-name types.  Do I have to iterate through the uninstantiated one and then look up each name in the instantiated one?</p>",
        "id": 424334557,
        "sender_full_name": "Chris Emerson/jugglerchris",
        "timestamp": 1709331510
    },
    {
        "content": "<p>But even if there's a better way, that does seem to work - I've got a match.  Thanks again!</p>",
        "id": 424334963,
        "sender_full_name": "Chris Emerson/jugglerchris",
        "timestamp": 1709331748
    },
    {
        "content": "<p>Yes <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Instance.html#method.exports\"><code>Instance::exports</code></a> will return an iterator</p>",
        "id": 424335805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709332193
    },
    {
        "content": "<p>and if you want to drop notes here about your confusion or file issues, that'd be much appreciated! There's quite a lot more we can do in the way of documentation</p>",
        "id": 424335898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709332224
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Using.20a.20component's.20resources/near/424335805\">said</a>:</p>\n<blockquote>\n<p>Yes <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/struct.Instance.html#method.exports\"><code>Instance::exports</code></a> will return an iterator</p>\n</blockquote>\n<p>Really? I can't see an Iterator or IntoIterator there, just methods to look things up by name</p>",
        "id": 424336378,
        "sender_full_name": "Chris Emerson/jugglerchris",
        "timestamp": 1709332513
    },
    {
        "content": "<p>oh that's my bad, I lied, I forgot this is only implemented for modules</p>",
        "id": 424337041,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709332860
    },
    {
        "content": "<p>definitely something we should add though!</p>",
        "id": 424337225,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709332962
    },
    {
        "content": "<p>yaaassssss</p>",
        "id": 424687331,
        "sender_full_name": "Ralph",
        "timestamp": 1709567540
    },
    {
        "content": "<p>in the fullness of time, as they say</p>",
        "id": 424687352,
        "sender_full_name": "Ralph",
        "timestamp": 1709567549
    }
]