[
    {
        "content": "<p>I've modified a wit file I'm working with from being just a <code>string</code> to use a <code>tuple&lt;string, string&gt;</code>.<br>\nAfter this change, when I load the wasm component into wasmtime, I get a runtime error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">convert</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"p\">[</span><span class=\"n\">method</span><span class=\"p\">]</span><span class=\"n\">agg</span><span class=\"p\">.</span><span class=\"n\">apply</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"k\">type</span>\n</code></pre></div>\n<p>I'm using wasmtime <code>0.15</code>, and wit-bindgen <code>0.15</code>.<br>\nThis code was working fine when using just the <code>string</code> directly.</p>\n<p>My entire wit file looks like:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package thalo:aggregate;\n\nworld aggregate {\n    export aggregate: interface {\n        record event {\n            event: string,\n            payload: string,\n        }\n\n        record command {\n            command: string,\n            payload: string,\n        }\n\n        variant error {\n            command(string),\n            deserialize-command(tuple&lt;string, string&gt;), // This worked when it was just a (string)\n            deserialize-context(string),\n            deserialize-event(tuple&lt;string, string&gt;), // and this\n            serialize-error(string),\n            serialize-event(tuple&lt;string, string&gt;), // and this\n        }\n\n        resource agg {\n            constructor(id: string);\n            apply: func(events: list&lt;event&gt;) -&gt; result&lt;_, error&gt;;\n            handle: func(command: command) -&gt; result&lt;list&lt;event&gt;, error&gt;;\n        }\n    }\n}\n</code></pre></div>",
        "id": 404630250,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701176300
    },
    {
        "content": "<p>I think this is an error message which would result from the embedding code you're using. Can you share the rest of the Wasmtime code? Either that or can you share steps to reproduce?</p>",
        "id": 404651070,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701182851
    },
    {
        "content": "<p>Well I hope its okay if I just share the link to the Github repo. It's pretty much the same code, but I only changed some of the variants in the error enum from <code>string</code> to <code>tuple&lt;string, string&gt;</code>.</p>\n<p>I don't know what I could be doing wrong on my side, as it works before making this change, and the code compiled fine too. Just at runtime it doesn't like it.</p>\n<p>Here's where I load the component from file:<br>\n<a href=\"https://github.com/thalo-rs/thalo/blob/e64c8f28405a76a38032254ebbc0c7996b2d1e24/crates/thalo_runtime/src/module.rs#L51-L68\">https://github.com/thalo-rs/thalo/blob/e64c8f28405a76a38032254ebbc0c7996b2d1e24/crates/thalo_runtime/src/module.rs#L51-L68</a></p>\n<p>Here's the <code>aggregate.wit</code> file:<br>\n<a href=\"https://github.com/thalo-rs/thalo/blob/main/crates/thalo_runtime/wit/aggregate.wit\">https://github.com/thalo-rs/thalo/blob/main/crates/thalo_runtime/wit/aggregate.wit</a></p>\n<p>And finally the guest side implementation:<br>\n<a href=\"https://github.com/thalo-rs/thalo/blob/e64c8f28405a76a38032254ebbc0c7996b2d1e24/crates/thalo/src/macros.rs#L21-L75\">https://github.com/thalo-rs/thalo/blob/e64c8f28405a76a38032254ebbc0c7996b2d1e24/crates/thalo/src/macros.rs#L21-L75</a></p>",
        "id": 404852389,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701260419
    },
    {
        "content": "<p>It looks like you have a copy of the wit inline in the guest code: <a href=\"https://github.com/thalo-rs/thalo/blob/e64c8f28405a76a38032254ebbc0c7996b2d1e24/crates/thalo/src/macros.rs#L22\">https://github.com/thalo-rs/thalo/blob/e64c8f28405a76a38032254ebbc0c7996b2d1e24/crates/thalo/src/macros.rs#L22</a></p>",
        "id": 404866817,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701264867
    },
    {
        "content": "<p>If the two copies are out of sync you would get that sort of error.</p>",
        "id": 404866846,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701264876
    },
    {
        "content": "<p>Though i did copy the changes across so they were identical, i don't believe i did anything wrong</p>",
        "id": 404867546,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701265079
    },
    {
        "content": "<p>I have noted odd cache (?) issues with wit-bindgen-rust in the past that have prevented WIT changes from being reflected in generated code. I believe I needed some combination of <code>cargo clean</code> and restarting rust-analyzer to resolve.</p>",
        "id": 404868308,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701265310
    },
    {
        "content": "<p>Oh okay I'll give it another try in that case, could possibly be the issue</p>",
        "id": 404873701,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701266914
    },
    {
        "content": "<p>Let us know if that <em>does</em> resolve it; if there is a latent issue with wit-bindgen-rust we should try to hunt that down.</p>",
        "id": 404875168,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701267334
    },
    {
        "content": "<p>ah it worked after a cargo clean! I'll have to keep that in mind, thank you!</p>",
        "id": 404967859,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701300415
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"474928\">Ari Seyhun</span> has marked this topic as resolved.</p>",
        "id": 404967866,
        "sender_full_name": "Notification Bot",
        "timestamp": 1701300419
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/773\">https://github.com/bytecodealliance/wit-bindgen/issues/773</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/773\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bf8fff950f88885cdca3f1a468e9193709c93466\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643535613530373735643334376235363237316635303762366161373737336338366333653631383265346530303239323032346238366665356331653333652f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f373733)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/773\" title=\"rust-macro: Stale bindings 路 Issue #773 路 bytecodealliance/wit-bindgen\">rust-macro: Stale bindings 路 Issue #773 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">There seems to be some issue with wit_bindgen::generate!'s output failing to refresh under some circumstance. This is mostly a placeholder for people to report problems as I haven't seen this repro...</div></div></div>",
        "id": 404972829,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701302980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"474928\">@Ari Seyhun</span> would you happen to remember the sequence of steps you did to reproduce this? I'd be interested to dig in further to see if I can reproduce and fix the original issue if there is one in wit-bindgen</p>",
        "id": 405158302,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701363019
    },
    {
        "content": "<p>is the <code>let _ = include_bytes!(...);</code> hack still necessary in macros to pick up changes to external files?</p>",
        "id": 405161040,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701363774
    },
    {
        "content": "<p>AFAIK yes</p>",
        "id": 405161114,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701363792
    },
    {
        "content": "<p>oh wit-bindgen does <code>include_str</code> <span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 405161281,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701363837
    },
    {
        "content": "<p>I've just tried playing around with the wit types without doing any cargo clean to see if I could replicate it again in my repo, however I can't seem to replicate it now.<br>\nI'm doubting myself, if I had done something wrong, but I'm quite sure I didn't since it only worked when I did the cargo clean and without changing any code.</p>\n<p>I'll keep playing around some more to see if I can make it happen again and I'll let you know</p>",
        "id": 405265249,
        "sender_full_name": "Ari Seyhun",
        "timestamp": 1701402257
    }
]