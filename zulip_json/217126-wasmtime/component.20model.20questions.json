[
    {
        "content": "<p>Hey, I have a few Qs, pls feel free to refer me to relevant documents (the explainer doc is really long and daunting):</p>\n<ol>\n<li>\n<p>When one module calls another are all the calls just one jump or is the host sometimes involved in type conversion or figuring out where to jump?</p>\n</li>\n<li>\n<p>Can objects be passed along as mutable, if yes how is that memory managed?</p>\n</li>\n<li>\n<p>Are there some good examples of CM repos that I can run?</p>\n</li>\n</ol>\n<p>ty!</p>",
        "id": 387636958,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693217139
    },
    {
        "content": "<ol start=\"4\">\n<li>how does componentize-py work? does it just embed a wasm python runtime into the component?</li>\n</ol>",
        "id": 387676833,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693231761
    },
    {
        "content": "<blockquote>\n<p>When one module calls another are all the calls just one jump ...</p>\n</blockquote>\n<p>If I understand this right the answer is \"one jump\". Imports are resolved at instantiation time which means at runtime there's no ambiguity as to what you're calling. The component runtime does provide facilities to copy strings between components for example though, which may also be what you're asking about (unsure)</p>\n<blockquote>\n<p>Can objects be passed along as mutable, if yes how is that memory managed?</p>\n</blockquote>\n<p>No, the component model is a \"shared nothing\" system where linear memory is an implementation detail and not part of the API. </p>\n<blockquote>\n<p>Are there some good examples of CM repos that I can run?</p>\n</blockquote>\n<p>others may have other suggestions, but depending on how nitty-gritty you'd like the tests in the Wasmtime and <code>wasm-tools</code> repos may give you an idea of where to start. Also the <code>wit-bindgen</code> repo (and probably as you've found <code>componentize-py</code> tests as well). I'd also recommend the jco tests. (ok I'm just saying \"look at tests\" I think)</p>\n<blockquote>\n<p>how does componentize-py work? does it just embed a wasm python runtime into the component?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> is the expert here, but yes it currently embeds a python interpreter/runtime in the component</p>",
        "id": 387678825,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693232391
    },
    {
        "content": "<p>Expanding on Alex's answer:</p>\n<ol start=\"2\">\n<li>Resource objects can be mutated via methods (e.g. a \"setter\" method) when applicable</li>\n<li>Yes, it bundles a WASI build of CPython in every component it produces.  Eventually, I plan to add an option to have the produced component _import_ CPython instead of bundling it, if desired.</li>\n</ol>",
        "id": 387679526,
        "sender_full_name": "Joel Dice",
        "timestamp": 1693232620
    },
    {
        "content": "<p>Oh sorry that's a really good point on (2) about mutable state, the \"resource\" type is perfect for that!</p>",
        "id": 387683165,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693233620
    },
    {
        "content": "<p>great!, followup questions:</p>\n<ol>\n<li>i compiled this repo: <a href=\"https://github.com/MediosZ/component-model-demo\">https://github.com/MediosZ/component-model-demo</a> , and looked at the decompilation:<br>\na. why does the wasm take up 2mb of space?, the component there is doing something super simple, is it cuz rust is inserting it's own memory management libs inside, does this mem management make sense in terms of complexity?<br>\nb. I found the following exports:<br>\n (table (;0;) 86 86 funcref)<br>\n  (memory (;0;) 18)<br>\n  (global $__stack_pointer (;0;) (mut i32) i32.const 1048576)<br>\n  (global (;1;) i32 i32.const 1118728)<br>\n  (global (;2;) i32 i32.const 1118736)<br>\n  (export \"memory\" (memory 0))<br>\n  (export \"render\" (func $render))<br>\n  (export \"cabi_post_render\" (func $cabi_post_render))<br>\n  (export \"cabi_realloc\" (func $cabi_realloc))<br>\n  (export \"__data_end\" (global 1))<br>\n  (export \"__heap_base\" (global 2))</li>\n</ol>\n<p>what does each one of these functions do and why are they being exported? does the runtime need them in order to run the component, it seems like the only exported function here should be render, right?</p>\n<p>c. render's interface in the wit file is render: func(input: string) -&gt; string but in the wams it's, func $render (;12;) (type 4) (param i32 i32) (result i32) , how does the type conversion work and component to component calling work in this case?</p>\n<p>thanks in advance!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/MediosZ/component-model-demo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8608b615ad65b7abb8e197798bd012562bff7694\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363434353434356131613832663365306236306437656566356163373038313934633437336231646131373032393238363536383636323864303064666263322f4d6564696f735a2f636f6d706f6e656e742d6d6f64656c2d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/MediosZ/component-model-demo\" title=\"GitHub - MediosZ/component-model-demo: This repository demonstrate how to use component model with wasmtime.\">GitHub - MediosZ/component-model-demo: This repository demonstrate how to use component model with wasmtime.</a></div><div class=\"message_embed_description\">This repository demonstrate how to use component model with wasmtime. - GitHub - MediosZ/component-model-demo: This repository demonstrate how to use component model with wasmtime.</div></div></div>",
        "id": 388843751,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693760429
    },
    {
        "content": "<ol start=\"2\">\n<li>why is there a global var   (global $__stack_pointer (;0;) (mut i32) i32.const 1048576) in the wasm, is rust implementing it's own stack on top of the wasm stack?</li>\n</ol>",
        "id": 388863099,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693775547
    },
    {
        "content": "<p>cabi_realloc is necessary to allocate memory on the heap of the component to write the input string too. The wasm runtime doesn't know anything about the memory allocator used by wasm modules, so it has to call into the wasm module to allocate memory. It can't just pick an arbitrary address and write the string to.</p>",
        "id": 388864485,
        "sender_full_name": "bjorn3",
        "timestamp": 1693776494
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631453\">monkeyontheloose</span> <a href=\"#narrow/stream/217126-wasmtime/topic/component.20model.20questions/near/388863099\">said</a>:</p>\n<blockquote>\n<ol start=\"2\">\n<li>why is there a global var   (global $__stack_pointer (;0;) (mut i32) i32.const 1048576) in the wasm, is rust implementing it's own stack on top of the wasm stack?</li>\n</ol>\n</blockquote>\n<p>The wasm stack can only store primitive values like integers and floats and doesn't allow taking any references to it. As such LLVM has to create a separate stack in the wasm linear memory where stack slots that have their address taken or which are too large for the wasm stack are put. This is done by LLVM, so both rustc and clang will emit <code>__stack_pointer</code>.</p>",
        "id": 388864742,
        "sender_full_name": "bjorn3",
        "timestamp": 1693776669
    },
    {
        "content": "<p>As for how wit function signatures are lowered see <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md</a></p>",
        "id": 388865047,
        "sender_full_name": "bjorn3",
        "timestamp": 1693776931
    },
    {
        "content": "<ol start=\"3\">\n<li>\n<p>it seems like the output is way too big (1.8MB), im guessing that wasms that are compiled to run on web pages are smaller but they still compile down from rust, are all components this big?</p>\n</li>\n<li>\n<p>the canonicalABI doc is such a hard read fml... but ok, i'll do it haha</p>\n</li>\n<li>\n<p>wasm-tools print app.wasm prints a decompile of a component afaik, if i edit this file by adding some op codes and add an import would it be possible reassamble it into a new wasm? how would one go about doing that?</p>\n</li>\n</ol>",
        "id": 388871196,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693782606
    },
    {
        "content": "<p>Are you building in release mode? Also yoy may want to strip debug info. Debug info takes up a lot of space and is by default not stripped even in release mode. (user crates don't get it generated, but the debug info for the standard library is preserved) You can use the <code>strip = \"debuginfo\"</code> option in the <code>[profile.release]</code> section of <code>Cargo.toml</code> to tell rustc to strip debug info in release mode.</p>",
        "id": 389124960,
        "sender_full_name": "bjorn3",
        "timestamp": 1693899780
    },
    {
        "content": "<p>will try this, currently my most urgent question is #5, how can i wat2wasm a component?</p>",
        "id": 389158986,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693910419
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is there a way to do this?</p>",
        "id": 389396327,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1693998944
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"631453\">@monkeyontheloose</span> . As far as I am aware <code>wat2wasm</code> doesn't support the component model proposal, but you can use <code>wasm-tools</code> from <a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a>, specifically the <code>wasm-tools parse</code> command to translate from the text format into binary.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c8765f10cacc2d5a5919fd54d5a6c20a6fbda058\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616436353137383839666364623738326232653365346564663261663036313339396361386131373135376463306265633236623862326166663065336334382f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 389401301,
        "sender_full_name": "Peter Huene",
        "timestamp": 1694000726
    },
    {
        "content": "<p>thanks!</p>",
        "id": 389688674,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1694100012
    },
    {
        "content": "<p>hi, this is my new user, i was monkey before, anyways, back to my original problem, we are trying to port <a href=\"https://github.com/DelphinusLab/zkWasm\">https://github.com/DelphinusLab/zkWasm</a> (creates zkproofs for wasm) to support component model wasms, where can one read about:</p>\n<ol>\n<li>all the changes in the wat file itself</li>\n<li>what new responsibilities does the wasmtime host have during run time, or does it just try to link all the componenents in and stay out of the way</li>\n<li>basically im trying to figure out how to create a transformation from regular wasm to CM wasm for the zkwasm lib, so any material or references to people i can talk to would be super helpful </li>\n</ol>\n<p><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/DelphinusLab/zkWasm\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/79e838bc08d1e4b618c9af681439ab51dc8c4b00\\/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3530353332303332352f36663936633039302d353734302d343432362d616139622d386236643961613561303266)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/DelphinusLab/zkWasm\" title=\"GitHub - DelphinusLab/zkWasm\">GitHub - DelphinusLab/zkWasm</a></div><div class=\"message_embed_description\">Contribute to DelphinusLab/zkWasm development by creating an account on GitHub.</div></div></div>",
        "id": 403636152,
        "sender_full_name": "Mirror Mystic",
        "timestamp": 1700673855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> is there anyone that help with this? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span>   (we also have a grant budget so if anyone wants to put in some hours on this problem we would gladly reciprocate the favor)</p>",
        "id": 404672516,
        "sender_full_name": "Mirror Mystic",
        "timestamp": 1701189059
    },
    {
        "content": "<p>The project you are working on is pretty far from what most of us are involved in. I don't think there is going to be a whole lot of interest in working on such a radically different operating environment when we haven't even finished implementing the component model for our own immediate needs. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 404674546,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701189640
    },
    {
        "content": "<p>To be clear: I don't mean to discourage you from asking; just trying to set expectations from my perspective.</p>",
        "id": 404674802,
        "sender_full_name": "Lann Martin",
        "timestamp": 1701189710
    },
    {
        "content": "<p>Currently from your questions I think the answer is that precisely such documentation doesn't exist. I'd recommend exploring the component model explainer <a href=\"https://github.com/webassembly/component-model\">in the spec repository</a> and the <a href=\"https://github.com/bytecodealliance/component-docs\">component-docs repository</a> however</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/component-model\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7905ffbe77ad83c6c7e6b7b403fbcf9d363221f4\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313562346532313337346137376532613765653630653861333364636139666362363730346634353439626536633130336665376361633964623064393366652f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/component-model\" title=\"GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model\">GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/component-docs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a2983807c837812a33c8aa5156ddac28a7a1c16c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663730396139333631363938366163363462626165383666383363646439373331373532636235353234316634613437313633313832356435306436646534382f62797465636f6465616c6c69616e63652f636f6d706f6e656e742d646f6373)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/component-docs\" title=\"GitHub - bytecodealliance/component-docs: Documentation around creating and using WebAssembly Components\">GitHub - bytecodealliance/component-docs: Documentation around creating and using WebAssembly Components</a></div><div class=\"message_embed_description\">Documentation around creating and using WebAssembly Components - GitHub - bytecodealliance/component-docs: Documentation around creating and using WebAssembly Components</div></div></div>",
        "id": 404680361,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701191440
    }
]