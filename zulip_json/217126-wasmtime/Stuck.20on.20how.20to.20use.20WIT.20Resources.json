[
    {
        "content": "<p>Are there any examples of implementing a WIT Resource in the host other than at <a href=\"https://component-model.bytecodealliance.org/\">https://component-model.bytecodealliance.org/</a> ?</p>\n<p>I'm trying to have a go but I have got stuck.</p>\n<p>I have a Guest function like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>before-add-note: func(note: borrow&lt;note&gt;);\n</code></pre></div>\n<p>and a function in my rust based Host application like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">before_add_note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>N.B. <code>note</code> must be a ref in the rust function, I cannot change this to an <code>Arc</code> etc.</p>\n<p>Ideally I would like to be able to do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">before_add_note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasm_component</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">my_component_interface</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_before_add_note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasm_store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I understand that this is not possible as shown because <code>note</code> needs to be transformed into a handle for the wasm component to use.</p>\n<p>Unfortunately I cannot see how I could put <code>&amp;mut note</code> into a <code>ResourceTable</code> without causing issues with lifetimes.</p>\n<p>I guess this leaves me with the less ideal solution of cloning <code>note</code> so that I can put it into a <code>ResourceTable</code>, then copying it back later.<br>\nSomething like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">before_add_note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">note</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Note</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">note_resource</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasm_store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">note</span><span class=\"p\">.</span><span class=\"n\">clone</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasm_component</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">my_component_interface</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">call_before_add_note</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasm_store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">note_resource</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">note</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasm_store</span><span class=\"p\">.</span><span class=\"n\">data_mut</span><span class=\"p\">().</span><span class=\"n\">resource_table</span><span class=\"p\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">note_resource</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>But this does not work either.<br>\n<code>Resource&lt;T&gt;</code> is not <code>Copy</code> or <code>Clone</code> and the generated <code>call_before_add_note</code> wants <code>note: Resource&lt;Note&gt;</code>.<br>\nThis means <code>resource</code> is moved when I call <code>call_before_add_note</code> and I cannot use it with <code>ResourceTable::delete</code> later.</p>\n<p>I am not sure what I am meant to be doing at this point.</p>",
        "id": 476906804,
        "sender_full_name": "Ross Brown",
        "timestamp": 1728972987
    },
    {
        "content": "<p>This sounds more specific than being solved by a simple example, but have you seen <a href=\"https://github.com/cpetig/resource-demo/blob/main/host-wasmtime/src/main.rs\">https://github.com/cpetig/resource-demo/blob/main/host-wasmtime/src/main.rs</a> ?</p>\n<p>I tested resources on both sides in this repo. Another option could be the runtime tests in wit-bindgen, <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/resource_import_and_export.rs\">https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/resource_import_and_export.rs</a></p>\n<p>Also we use resources in veloren plugins, <a href=\"https://gitlab.com/veloren/veloren/-/blob/master/common/state/src/plugin/module.rs?ref_type=heads\">https://gitlab.com/veloren/veloren/-/blob/master/common/state/src/plugin/module.rs?ref_type=heads</a> but I think they are mostly guest side.</p>\n<p>Perhaps these examples already help, otherwise I will need to take a thorough read of your problem statement above (after work).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/resource-demo/blob/main/host-wasmtime/src/main.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6f473bcb98c51d992cd8ad9a0149cec7cd0898da/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643762323935643030346434336231356132386262663261636436373263323666323566613661313231636464393630346161393936653733623835636466662f6370657469672f7265736f757263652d64656d6f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/resource-demo/blob/main/host-wasmtime/src/main.rs\" title=\"resource-demo/host-wasmtime/src/main.rs at main 路 cpetig/resource-demo\">resource-demo/host-wasmtime/src/main.rs at main 路 cpetig/resource-demo</a></div><div class=\"message_embed_description\">A demo showing WASM component model resources in various environments - cpetig/resource-demo</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/resource_import_and_export.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b0e998e562d8a3f51a14643ec76ae8922ea2ee17/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346331366537396161376138323731643435383739316632383261666132383063393530306363346236623663383930613030353432366465666130303335392f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/main/tests/runtime/resource_import_and_export.rs\" title=\"wit-bindgen/tests/runtime/resource_import_and_export.rs at main 路 bytecodealliance/wit-bindgen\">wit-bindgen/tests/runtime/resource_import_and_export.rs at main 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gitlab.com/veloren/veloren/-/blob/master/common/state/src/plugin/module.rs?ref_type=heads\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8a8f44e2dfe66688747140ea219f007abcfa004c/68747470733a2f2f6769746c61622e636f6d2f75706c6f6164732f2d2f73797374656d2f70726f6a6563742f6176617461722f31303137343938302f76656c6f72656e2d7371756172652d6269672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gitlab.com/veloren/veloren/-/blob/master/common/state/src/plugin/module.rs?ref_type=heads\" title=\"common/state/src/plugin/module.rs 路 master 路 Veloren / veloren 路 GitLab\">common/state/src/plugin/module.rs 路 master 路 Veloren / veloren 路 GitLab</a></div><div class=\"message_embed_description\">Veloren is a multiplayer voxel RPG written in Rust. It is inspired by games such as Cube World, Legend of Zelda: Breath of the Wild, Dwarf Fortress and...</div></div></div>",
        "id": 476911120,
        "sender_full_name": "Christof Petig",
        "timestamp": 1728974391
    },
    {
        "content": "<p>I hope, ResourceTable as shown in the first link combined with Arc will solve your problem.</p>",
        "id": 476912426,
        "sender_full_name": "Christof Petig",
        "timestamp": 1728974765
    },
    {
        "content": "<p>Thanks for the links, I'll have a look.</p>\n<p>I assume I'm missing something pretty basic because I currently cannot see how the Host can maintain ownership of any Resources.</p>",
        "id": 476912450,
        "sender_full_name": "Ross Brown",
        "timestamp": 1728974776
    },
    {
        "content": "<p>I've had a look at those links but I still cannot see the correct way of doing it.</p>\n<p>If I wrapped the cloned <code>Note</code> in an <code>Arc</code> before pushing it into the <code>ResourceTable</code> I would be able access to the <code>Note</code> through the <code>Arc</code> later, but it would still be stuck in the <code>ResourceTable</code> forever.<br>\nI would not be able to call <code>ResourceTable::delete</code> to clean up because <code>note_resource</code> will have been moved.</p>",
        "id": 476925903,
        "sender_full_name": "Ross Brown",
        "timestamp": 1728978336
    },
    {
        "content": "<p>I made a minimal example of what I am trying to do:</p>\n<p><a href=\"https://github.com/rbrownwsws/wit-host-resources\">https://github.com/rbrownwsws/wit-host-resources</a></p>\n<p>You can run it with:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"nb\">cd</span><span class=\"w\"> </span>&lt;repo_root&gt;/guest\ncargo<span class=\"w\"> </span>component<span class=\"w\"> </span>build<span class=\"w\"> </span>--release\n<span class=\"nb\">cd</span><span class=\"w\"> </span>&lt;repo_root&gt;/host\ncargo<span class=\"w\"> </span>run\n</code></pre></div>\n<p>I also realised wrapping <code>Note</code> in <code>Arc</code> would not work because the generated <code>call_before_add_note</code> only accepts <code>Resource&lt;Note&gt;</code>, not <code>Resource&lt;Arc&lt;Note&gt;&gt;</code>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rbrownwsws/wit-host-resources\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ee9e2c9e36a26f841753797d7449f3b7fad81220/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396564316333666466626132306163396435326565616363353833333261353330663739373230343135323863356431393234663561353238626333373835642f7262726f776e777377732f7769742d686f73742d7265736f7572636573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rbrownwsws/wit-host-resources\" title=\"GitHub - rbrownwsws/wit-host-resources\">GitHub - rbrownwsws/wit-host-resources</a></div><div class=\"message_embed_description\">Contribute to rbrownwsws/wit-host-resources development by creating an account on GitHub.</div></div></div>",
        "id": 476959119,
        "sender_full_name": "Ross Brown",
        "timestamp": 1728988983
    },
    {
        "content": "<p>Currently Wasmtime's documentation is a bit light on examples: <a href=\"https://docs.rs/wasmtime/latest/wasmtime/component/bindgen_examples/_4_imported_resources/index.html\">this being the main one</a> for host resources.</p>\n<p>For <a href=\"https://github.com/rbrownwsws/wit-host-resources/blob/909f15b6605c74933db90d1c48bb9b41fd9bd300/host/src/main.rs#L130-L136\">this comment</a> though I think the answer is you can use <code>Resource::new_borrow</code> to pass to the function above. In general I think it's a mistake that Wasmtime doesn't have <code>Clone for Resource&lt;T&gt;</code>. I originally thought that was a bad idea but I've come to think this is not the right conclusion any more.</p>\n<p>In the <code>wasmtime-wasi</code> crate we have an <a href=\"https://github.com/bytecodealliance/wasmtime/blob/edad0bbcf3edd4e42e8004b277b28af3cf7e5981/crates/wasi/src/preview1.rs#L2617-L2625\">extension trait</a> for doing this which you can copy to use locally as well if you'd like.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rbrownwsws/wit-host-resources/blob/909f15b6605c74933db90d1c48bb9b41fd9bd300/host/src/main.rs#L130-L136\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ee9e2c9e36a26f841753797d7449f3b7fad81220/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396564316333666466626132306163396435326565616363353833333261353330663739373230343135323863356431393234663561353238626333373835642f7262726f776e777377732f7769742d686f73742d7265736f7572636573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rbrownwsws/wit-host-resources/blob/909f15b6605c74933db90d1c48bb9b41fd9bd300/host/src/main.rs#L130-L136\" title=\"wit-host-resources/host/src/main.rs at 909f15b6605c74933db90d1c48bb9b41fd9bd300 路 rbrownwsws/wit-host-resources\">wit-host-resources/host/src/main.rs at 909f15b6605c74933db90d1c48bb9b41fd9bd300 路 rbrownwsws/wit-host-resources</a></div><div class=\"message_embed_description\">Contribute to rbrownwsws/wit-host-resources development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/edad0bbcf3edd4e42e8004b277b28af3cf7e5981/crates/wasi/src/preview1.rs#L2617-L2625\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ee683fa1bdeb4dbfe64d6942d7a73daa4ae9371e/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313864306362646330306134333636653166373732316463346266343030326431393636643762623933653932663164663738393161623363613732303462662f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/edad0bbcf3edd4e42e8004b277b28af3cf7e5981/crates/wasi/src/preview1.rs#L2617-L2625\" title=\"wasmtime/crates/wasi/src/preview1.rs at edad0bbcf3edd4e42e8004b277b28af3cf7e5981 路 bytecodealliance/wasmtime\">wasmtime/crates/wasi/src/preview1.rs at edad0bbcf3edd4e42e8004b277b28af3cf7e5981 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 477305864,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1729115165
    },
    {
        "content": "<p>Thanks for the help <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, that works for me <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>.</p>\n<p>I found <code>Resource::new_borrow</code>, but as I am not familiar with the internals of  Wasmtime/<code>ResourceTable</code> I was worried that manually creating one might break things in a non-obvious way.</p>\n<p>In a future version of Wasmtime I think it would be nice to make it more obvious what the correct way is e.g.:</p>\n<ul>\n<li>\n<p>have a method like: <code>Resource&lt;T&gt;::as_borrowed(&amp;self) -&gt; Resource&lt;T&gt;</code><br>\nsimilar to the native rust <code>AsRef&lt;T&gt;::as_ref(&amp;self) -&gt; &amp;T</code>.</p>\n</li>\n<li>\n<p>alter <code>bindgen!</code> so <code>my_func: func(arg: borrow&lt;my-type&gt;)</code> generates <code>fn call_my_func(&amp;self,  mut store: S, arg: &amp;mut Resource&lt;MyType&gt;)</code> and calls <code>Resource::new_borrow</code> for you under the hood.</p>\n</li>\n<li>\n<p>have <code>OwnedResource&lt;T&gt;</code> and <code>BorrowedResource&lt;T&gt;</code> types with <code>BorrowedResource</code> implementing <code>Clone</code> / <code>Copy</code></p>\n</li>\n</ul>",
        "id": 477329814,
        "sender_full_name": "Ross Brown",
        "timestamp": 1729129281
    },
    {
        "content": "<p>Yeah threading the needle on these APIs has been really tricky. It's tough to capture all the nuance in Rust as it's not a 100% match to various Rust concepts despite being similar. Not to say the current API is the best by any means! At the very least I think adding <code>.as_borrowed()</code> or similar is a great idea. The other ideas seem reasonable to me but would need some testing to see what it would be like to implement them.</p>",
        "id": 477813570,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1729349724
    }
]