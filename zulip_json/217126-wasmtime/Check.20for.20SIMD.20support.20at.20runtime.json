[
    {
        "content": "<p>Is it possible to check if the CPU supports SIMD at runtime? <a href=\"https://github.com/lapce/lapce/issues/1041\">https://github.com/lapce/lapce/issues/1041</a><br>\nOne solution that I found is to check the <code>flags</code> in <code>proc/cpuinfo</code> but I wonder if there's a better solution?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lapce/lapce/issues/1041\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f9efa1179e5742113343459cd920ad39d3fb966c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633763666237396264626565656234333736616535366632663138386339363266623562336539656431636335373638316238383364326336666132386561642f6c617063652f6c617063652f6973737565732f31303431)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lapce/lapce/issues/1041\" title=\"Wasmtime panic for processors without SIMD support · Issue #1041 · lapce/lapce\">Wasmtime panic for processors without SIMD support · Issue #1041 · lapce/lapce</a></div><div class=\"message_embed_description\">When starting Lapce (built from master) with plugins installed (in the following, only lapce-rust is installed), the console shows a panic related to wasmtime's use of SIMD: lsimons@bestever:~/work...</div></div></div>",
        "id": 347452846,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1680794776
    },
    {
        "content": "<p>IMHO, the right solution here is to build fallbacks for CPUs that only have SSE2 -- <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3810\">https://github.com/bytecodealliance/wasmtime/issues/3810</a> tracks that</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3810\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e95341c73b85e3d0e1c4e19c1f163d7e5f025713\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353234656331616437663163376130326537373034333862633537623031663566613130333436303362323764643165333533363961353665373639316530662f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33383130)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3810\" title=\"Cranelift: support vector instructions without optional ISA extensions · Issue #3810 · bytecodealliance/wasmtime\">Cranelift: support vector instructions without optional ISA extensions · Issue #3810 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">In #3809, a new extension to our fuzzing found that some of our Wasm-SIMD support requires nominally optional ISA features, at least on x86-64. I think we should try to have fallbacks such that we ...</div></div></div>",
        "id": 347466647,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680798276
    },
    {
        "content": "<p>We could also build the plumbing in Wasmtime to check this at startup, as you suggest, but IMHO that's a little more surprising: it means that we accept different modules based on some property of the environment that we don't control</p>",
        "id": 347466843,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1680798340
    }
]