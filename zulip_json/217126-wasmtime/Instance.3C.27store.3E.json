[
    {
        "content": "<p>So I was thinking... since</p>\n<ol>\n<li>everything lives in a <code>Store</code> and we don't drop instances, for example, until the store is dropped at which point they're all dropped at once, and </li>\n<li>we have a bunch of sort of unknown-whether-its-totally-safe unsafe code hiding inside <code>runtime</code> and <code>jit</code>,</li>\n</ol>\n<p>what do folks think of making <code>Instance</code> into <code>Instance&lt;'store&gt;</code> and plumbing that through everywhere, so that when you ask for a module's memory for example, you get a <code>VMMemoryDefinition&lt;'store&gt;</code> rather than a thing that contains an unsafe raw pointer. This would clean up a lot of the unsafe pointer dereferences we have internally, and we could also remove a bunch of internal  refcounting, I think.</p>\n<p>I would need to dig in a bit further to see how feasible this really is, but figured it was worth getting feedback about the idea first. +cc <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 190111932,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1583784409
    },
    {
        "content": "<p>Usually <code>'a</code> means some sort of stack lifetime, so would that work here? I think it makes sense that conceptually everything lives as part of the same <code>Store</code>, but the actual lifetime I feel may be best dynamic rather than stack-based</p>",
        "id": 190175432,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583849281
    },
    {
        "content": "<p>I can't quite envision this, though, so I'm not entirely sure how it would work out</p>",
        "id": 190175491,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583849303
    },
    {
        "content": "<p>Making the raw pointers safer though would indeed be nice!</p>",
        "id": 190175509,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1583849316
    },
    {
        "content": "<p>yeah, I think you're right in that we wouldn't want to force <code>Store</code> to be on <code>main</code>'s frame and never move or be boxed up into a structure...</p>\n<p>we could do a \"dynamic borrow\" type thing where you provide the <code>&amp;'a Store</code> when accessing some method to get back a <code>&amp;'a Instance</code>, but this is seeming less and less appealing. It might even require dynamic checks that this is the <em>right</em> store, at which point we might as well just keep our refcounting.</p>",
        "id": 190195674,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1583858732
    }
]