[
    {
        "content": "<p>Why does the pulley VM only have 32 registers if each register is encoded by 1 byte? You could have 256 registers without making the encoding any longer</p>",
        "id": 456230072,
        "sender_full_name": "kmeakin",
        "timestamp": 1722723555
    },
    {
        "content": "<p>That would make the <code>MachineState</code> much larger without significantly reducing the amount of instructions that need to be executed. And a larger <code>MachineState</code> would take up more space in the L1 cache, reducing the space for actually useful data.</p>",
        "id": 456294455,
        "sender_full_name": "bjorn3",
        "timestamp": 1722764930
    },
    {
        "content": "<p>I don't know if the above is the actual reason why 32 registers was chosen though.</p>",
        "id": 456294519,
        "sender_full_name": "bjorn3",
        "timestamp": 1722764982
    },
    {
        "content": "<p>I believe 32 was chosen to match aarch64 and riscv64 for now, but AFAIK it hasn't been scientifically chosen. The encoding of opcoes is relatively inefficient right now and the hope is to encode 3 operands in 15 bits via a u16 in the future. Each register taking a single byte is mostly just for ease right now</p>",
        "id": 456397673,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1722808729
    },
    {
        "content": "<p>That makes sense</p>",
        "id": 456398094,
        "sender_full_name": "kmeakin",
        "timestamp": 1722809069
    },
    {
        "content": "<p>Would add a few extra instructions to extract registers from instruction stream but I guess saving 1 byte per instruction makes up for it</p>",
        "id": 456398172,
        "sender_full_name": "kmeakin",
        "timestamp": 1722809136
    },
    {
        "content": "<p>I really like the higher order macro trick for declaring instructions btw. Never seen that before but I'll look for excuses to use it in future</p>",
        "id": 456398282,
        "sender_full_name": "kmeakin",
        "timestamp": 1722809226
    },
    {
        "content": "<p>heh not exactly the most readable but it is quite nice for keeping things in sync!</p>",
        "id": 456398997,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1722809889
    },
    {
        "content": "<p>Yeah, it is as Alex says. 32 seemed like \"enough\" and we can (eventually) shave a byte off of <code>a = b op c</code>-style instructions.</p>\n<p>will be really nice to get the rest of pulley landed (cranelift backend and runtime integration) so that we can start tweaking things and determine which is more important: more registers or smaller instructions</p>",
        "id": 456732898,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1722903570
    },
    {
        "content": "<p>working on landing those other parts soon</p>",
        "id": 456732922,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1722903586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Pulley.20registers/near/456732898\">said</a>:</p>\n<blockquote>\n<p>Yeah, it is as Alex says. 32 seemed like \"enough\" and we can (eventually) shave a byte off of <code>a = b op c</code>-style instructions.</p>\n<p>will be really nice to get the rest of pulley landed (cranelift backend and runtime integration) so that we can start tweaking things and determine which is more important: more registers or smaller instructions</p>\n</blockquote>\n<p>You could go even further and have 2-byte encodings for <code>dst = op dst src2</code> for registers <code>x0-x15</code> (1 byte for opcode, 4 bits for each register). IIRC RISC-V has something similar for their 2 byte compressed ISA</p>",
        "id": 457218159,
        "sender_full_name": "kmeakin",
        "timestamp": 1723071147
    },
    {
        "content": "<p>indeed, I've also thought about that kind of thing as well haha</p>",
        "id": 457218628,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723071327
    },
    {
        "content": "<p>fyi, I'm taking a look at the binary operands bitpacking PR now, but I think I'd prefer waiting to land it until after the cranelift backend lands, just so minimize churn/rebasing on that larger, fiddly amount of code</p>",
        "id": 457218783,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723071382
    },
    {
        "content": "<p>sure. no problem</p>",
        "id": 457218833,
        "sender_full_name": "kmeakin",
        "timestamp": 1723071400
    },
    {
        "content": "<p>I'm just writing some filetests right now and then the backend should be ready to be made into a PR</p>",
        "id": 457218852,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723071407
    },
    {
        "content": "<p>(and here is the PR introducing the pulley backend to cranelift: <a href=\"https://github.com/bytecodealliance/wasmtime/pull/9089\">https://github.com/bytecodealliance/wasmtime/pull/9089</a>)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/9089\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e17eebc6ee1e9ebae5da1a56eadf50c3cee4b926/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376161326239643364303437333239316237306231353635336534663865633236326164353833326661656332633866653739613634343030343434396464302f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f39303839&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/9089\" title=\"Cranelift: Add a new backend for emitting Pulley bytecode by fitzgen · Pull Request #9089 · bytecodealliance/wasmtime\">Cranelift: Add a new backend for emitting Pulley bytecode by fitzgen · Pull Request #9089 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit adds two new backends for Cranelift that emits 32- and 64-bit Pulley\nbytecode. The backends are both actually the same, with a common implementation\nliving in cranelift/codegen/src/isa/...</div></div></div>",
        "id": 457231832,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723077126
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> I'm still a bit confused about stack manipulation instructions.<br>\nI believe instructions to increment/decrement the SP directly are unecessary, because the increment/decrement can be done in the push/pop instruction</p>",
        "id": 459533386,
        "sender_full_name": "kmeakin",
        "timestamp": 1723224718
    },
    {
        "content": "<p>I'm looking at the tests from <br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/blob/ee57c2b0994e58bdd7cbdaa30e72d1a85a800fee/cranelift/filetests/filetests/isa/pulley32/call.clif\">https://github.com/bytecodealliance/wasmtime/blob/ee57c2b0994e58bdd7cbdaa30e72d1a85a800fee/cranelift/filetests/filetests/isa/pulley32/call.clif</a><br>\nand it seems to me like the adjustment to the SP is always <code>word_size * number_of_regs</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/ee57c2b0994e58bdd7cbdaa30e72d1a85a800fee/cranelift/filetests/filetests/isa/pulley32/call.clif\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e595add2213b0eee653c8775bd8e70e8440c8dbb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626231666139656538303030653035353161353839336132376335626539663961323230643835373234393336643834646534323330616534666630376536302f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/ee57c2b0994e58bdd7cbdaa30e72d1a85a800fee/cranelift/filetests/filetests/isa/pulley32/call.clif\" title=\"wasmtime/cranelift/filetests/filetests/isa/pulley32/call.clif at ee57c2b0994e58bdd7cbdaa30e72d1a85a800fee · bytecodealliance/wasmtime\">wasmtime/cranelift/filetests/filetests/isa/pulley32/call.clif at ee57c2b0994e58bdd7cbdaa30e72d1a85a800fee · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 459533622,
        "sender_full_name": "kmeakin",
        "timestamp": 1723224787
    },
    {
        "content": "<p>eg:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">11</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"w\"> </span><span class=\"n\">d0</span><span class=\"w\">                        </span><span class=\"n\">xconst8</span><span class=\"w\"> </span><span class=\"n\">spilltmp0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">48</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">14</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">12</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">23</span><span class=\"w\">                     </span><span class=\"n\">xadd32</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">spilltmp0</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">18</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">e</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                        </span><span class=\"n\">xconst8</span><span class=\"w\"> </span><span class=\"n\">x15</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">1</span><span class=\"n\">b</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                        </span><span class=\"n\">store64</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x15</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">1</span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">08</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                     </span><span class=\"n\">store64_offset8</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x15</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">22</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                     </span><span class=\"n\">store64_offset8</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">16</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x15</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">26</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">18</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                     </span><span class=\"n\">store64_offset8</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">24</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x15</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">2</span><span class=\"n\">a</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                     </span><span class=\"n\">store64_offset8</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x15</span>\n<span class=\"p\">;</span><span class=\"w\">       </span><span class=\"mi\">2</span><span class=\"n\">e</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"w\"> </span><span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"n\">f</span><span class=\"w\">                     </span><span class=\"n\">store64_offset8</span><span class=\"w\"> </span><span class=\"n\">sp</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x15</span>\n</code></pre></div>\n<p>subtracts 48 from SP, then writes 6 registers to the stack</p>",
        "id": 459533821,
        "sender_full_name": "kmeakin",
        "timestamp": 1723224847
    },
    {
        "content": "<p>but you could just have a <code>push</code> instr that also updated the SP</p>",
        "id": 459533871,
        "sender_full_name": "kmeakin",
        "timestamp": 1723224867
    },
    {
        "content": "<p>so 6 push instrs would decrement the SP by 8 bytes each, and at the end the result is the SP is decremented by 48</p>",
        "id": 459533960,
        "sender_full_name": "kmeakin",
        "timestamp": 1723224905
    },
    {
        "content": "<p>yeah I guess if you still have to do the moves of each register into the allocated stack space, then it is still N instructions. my b, I hadn't been thinking about each store.</p>\n<p>we could I guess add a variable number of registers to be spilled into the allocated stack space, or have a few variations with a fixed numbers of registers to spill, but those are both starting to get pretty funky </p>\n<p>so I think a <code>push</code> instruction could indeed make sense. that said, I think we still want to fold <code>push lr; push fp; fp = sp</code> into a single macro instruction</p>",
        "id": 459534812,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225216
    },
    {
        "content": "<blockquote>\n<p>so I think a <code>push</code> instruction could indeed make sense. that said, I think we still want to fold <code>push lr; push fp; fp = sp</code> into a single macro instruction<br>\nYes I agree a macro instruction to do the prologue/epilogue would be good but I dont think it would need a size argument</p>\n</blockquote>",
        "id": 459534981,
        "sender_full_name": "kmeakin",
        "timestamp": 1723225276
    },
    {
        "content": "<p>yep</p>",
        "id": 459535021,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225289
    },
    {
        "content": "<blockquote>\n<p>we could I guess add a variable number of registers to be spilled into the allocated stack space, or have a few variations with a fixed numbers of registers to spill, but those are both starting to get pretty funky<br>\nLike the old Arm32 instructions that could push/pop a whole list of regs in 1 instruction?</p>\n</blockquote>",
        "id": 459535214,
        "sender_full_name": "kmeakin",
        "timestamp": 1723225346
    },
    {
        "content": "<p>I am not familiar with arm32, but that sounds right</p>",
        "id": 459535261,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225368
    },
    {
        "content": "<p><a href=\"https://developer.arm.com/documentation/dui0802/b/A32-and-T32-Instructions/PUSH-and-POP\">https://developer.arm.com/documentation/dui0802/b/A32-and-T32-Instructions/PUSH-and-POP</a></p>",
        "id": 459535394,
        "sender_full_name": "kmeakin",
        "timestamp": 1723225410
    },
    {
        "content": "<p>yeah exactly like that. encoding-wise we would do something like <code>&lt;opcode&gt; &lt;length&gt; (&lt;reg&gt;)^length</code></p>",
        "id": 459535573,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225473
    },
    {
        "content": "<p>where <code>(&lt;reg&gt;)^length</code> is <code>length</code> repetitions of <code>&lt;reg&gt;</code>, in case that isn't clear</p>",
        "id": 459535631,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225500
    },
    {
        "content": "<p>They abandoned it in the 32-&gt;64bit transition because it raised awkward questions like \"what happens if an interrupt is recieved in the middle?\" but we should have no such worries</p>",
        "id": 459535709,
        "sender_full_name": "kmeakin",
        "timestamp": 1723225529
    },
    {
        "content": "<p>heh, nice</p>",
        "id": 459535838,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Pulley.20registers/near/459535573\">said</a>:</p>\n<blockquote>\n<p>yeah exactly like that. encoding-wise we would do something like <code>&lt;opcode&gt; &lt;length&gt; (&lt;reg&gt;)^length</code></p>\n</blockquote>\n<p>what about a <code>u32</code> bitmask? Set the nth bit to 1 to push register n</p>",
        "id": 459535921,
        "sender_full_name": "kmeakin",
        "timestamp": 1723225604
    },
    {
        "content": "<p>ooo I like that</p>",
        "id": 459535945,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225613
    },
    {
        "content": "<p>nice</p>",
        "id": 459535950,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225615
    },
    {
        "content": "<p>also, fyi: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/bitset/src/scalar.rs#L47\">https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/bitset/src/scalar.rs#L47</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/bitset/src/scalar.rs#L47\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e595add2213b0eee653c8775bd8e70e8440c8dbb/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626231666139656538303030653035353161353839336132376335626539663961323230643835373234393336643834646534323330616534666630376536302f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/bitset/src/scalar.rs#L47\" title=\"wasmtime/cranelift/bitset/src/scalar.rs at main · bytecodealliance/wasmtime\">wasmtime/cranelift/bitset/src/scalar.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 459536726,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723225851
    },
    {
        "content": "<p>ah nice, i was already trying to figure out the bit twiddling myself</p>",
        "id": 459544365,
        "sender_full_name": "kmeakin",
        "timestamp": 1723227582
    },
    {
        "content": "<p>I could foresee us eventually adding <code>unchecked_*</code> variants to that type as well, if the various <code>assert!(..)</code>s end up being too expensive during decoding or whatever</p>\n<p>but we can cross that bridge when we get to it, ofc</p>",
        "id": 459545259,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723227752
    },
    {
        "content": "<p>eg <code>unchecked_insert</code> that doesn't assert that the value inserted is in the range of the scalar backing storage</p>",
        "id": 459545451,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1723227792
    }
]