[
    {
        "content": "<p>Heya people, quick double checking my understanding: The only reason why wasmtime splits type canonicalization into a ModuleTypes and TypeRegistry “phase” is so that a parsed module can be cached on disk and loaded back in a different session right?</p>",
        "id": 480857857,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730877673
    },
    {
        "content": "<p>or is there some other idk component model requirement for this?</p>",
        "id": 480857906,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730877698
    },
    {
        "content": "<p>Yes the main motivation for this is AOT compilation (in one form or another). This enables creating a separate artifact from an engine which can later get merged into an engine and loaded at runtime. Nothing to do with components, just the compilation model that we have</p>",
        "id": 480947450,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1730907546
    },
    {
        "content": "<p>yeah, to add a little more color:</p>\n<ul>\n<li><code>ModuleTypes</code> is all compile-time stuff and is dedupes types within the scope of just a single module or component graph</li>\n<li><code>TypeRegistry</code> is all runtime stuff and dedupes types within the scope of a whole engine</li>\n</ul>",
        "id": 480963004,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1730912342
    },
    {
        "content": "<p>it might even make sense to rename these things to like <code>CompileTimeTypes</code> and <code>RuntimeTypes</code> or something</p>",
        "id": 480963141,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1730912391
    },
    {
        "content": "<p>aye alright thanks for taking the time :) thats what I figured too <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 480981687,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730919272
    },
    {
        "content": "<p>ive been wondering since Ive seen firefox do just do global type canonicalization but given wasmtime cares more about instantiation time than compilation that checks out</p>",
        "id": 480981969,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730919398
    },
    {
        "content": "<p>I CAN LEARN WHEN I'M DEAD</p>",
        "id": 480989163,
        "sender_full_name": "Lann Martin",
        "timestamp": 1730922419
    },
    {
        "content": "<p>wait...</p>",
        "id": 480989164,
        "sender_full_name": "Lann Martin",
        "timestamp": 1730922420
    },
    {
        "content": "<p>for future reference: there is one more advantage to this two-step process i realized after implementing a half-assed oneshot system yesterday. building up rec groups first and then canonicalizing them through hash consing is much much cleaner than trying to do it all at once</p>",
        "id": 481129460,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730988839
    },
    {
        "content": "<p>so i went with copying your implementation after all :) we’ll see if that needs tweaking for my needs when I get around to benchmarking</p>",
        "id": 481129646,
        "sender_full_name": "Jonas Kruckenberg",
        "timestamp": 1730988891
    }
]