[
    {
        "content": "<p>How do we feel about <code>wasmtime-wasi</code> re-exporting <code>cap-std</code> and <code>wasi-cap-std-sync</code>? As a wasmtime embedder that is configuring WASI, it is quite annoying to wrangle all these types and dependencies from different crates.</p>\n<p>Also, ideally I would just be able to call <code>wasi_ctx_builder.preopen_dir(path_to_dir, path_to_expose_it_as)</code> without needing to actually do the preopen myself before passing it to the builder (which is where all these other deps start coming in).</p>\n<p>Are we cool with these API additions? If so, I can whip up a PR.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span></p>",
        "id": 231847600,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616695060
    },
    {
        "content": "<p>cap-std is ok with that; it's public interface is closely tied to std's interface, so it's pretty stable</p>",
        "id": 231847865,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1616695155
    },
    {
        "content": "<p>I'm less confident about wasi-cap-std-sync, though I don't have specific concerns I can articulate</p>",
        "id": 231848038,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1616695210
    },
    {
        "content": "<p>wasi-cap-std-sync's traits are likely to evolve, but maybe that's ok</p>",
        "id": 231848383,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1616695322
    },
    {
        "content": "<p>i think its fine to re-export them using a cargo feature.</p>",
        "id": 231849339,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616695666
    },
    {
        "content": "<p>the reason cap-std-sync is a separate crate is that one day cap-std-async will exist.</p>",
        "id": 231849430,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616695689
    },
    {
        "content": "<p>so, if wasmtime-wasi wants to export wasi-cap-std-sync::WasiCtxBuilder as sync::WasiCtxBuilder, thats cool.</p>",
        "id": 231849587,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616695745
    },
    {
        "content": "<p>it can be a default feature, it is just something that some embedders (read: me, one day soon) may want to turn off</p>",
        "id": 231849650,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616695777
    },
    {
        "content": "<p>the usability right now is not good at all, and re-exporting would go a long way to improve that - make the way you are supposed to use it obvious for users who dont know the whole twisty network of crates and future plans.</p>",
        "id": 231849813,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616695825
    },
    {
        "content": "<p>what about not doing the re-exporting, but having the <code>preopen_dir</code> builder method do the preopening, rather than taking an already preopened dir? that would eliminate the need to worry about deps completely, afaik</p>",
        "id": 231856686,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616698462
    },
    {
        "content": "<p>Is there a downside to reexporting? Regardless of their stability they're a public dependency of <code>wasmtime-wasi</code> and I think fitzgen's got a good point that wrangling a bunch of crates with disparate versions isn't the most enjoyable thing to do</p>",
        "id": 231857255,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616698656
    },
    {
        "content": "<p>although I think ideally we'd refactor the wasmtime-wasi crate to have an api which has fewer transitive crates as public dependencies</p>",
        "id": 231857309,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1616698679
    },
    {
        "content": "<p>Yea we can fold the preopening into the builder so all Wasmtime-wasi has to re-export is the builder.</p>",
        "id": 231873181,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616705067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> should i make those changes to wasmtime-wasi or will you?</p>",
        "id": 231876946,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616706816
    },
    {
        "content": "<p>if you have cycles now, go for it, I'm a bit busy making benchmarks/demos for my wasm summit talk at the moment</p>",
        "id": 231878229,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616707368
    },
    {
        "content": "<p>ok. ill take care of it in a little bit. im on openssl 1.1.1k duty right now, apparently</p>",
        "id": 231879103,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616707765
    },
    {
        "content": "<p>thanks!</p>",
        "id": 231881417,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616708808
    },
    {
        "content": "<p>quick question: <code>wasmtime_wasi::Wasi::new</code> still takes a store as a parameter, but I want to add it to a <code>Config</code>, not a <code>Linker</code>. Can I just use a dummy store?</p>",
        "id": 231881542,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616708874
    },
    {
        "content": "<p>hm wait but I can't make a <code>Store</code> yet because I'm still building the <code>Config</code> for my <code>Engine</code>...</p>",
        "id": 231881778,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616708978
    },
    {
        "content": "<p>Oh sorry, I missed this convo. Yeah, with <code>Wasi::add_to_config</code> you call <code>Wasi::set_context</code> to set the WasiCtx in the store</p>",
        "id": 231882758,
        "sender_full_name": "Peter Huene",
        "timestamp": 1616709485
    },
    {
        "content": "<p>i agree it's pretty confusing having two ways to do this</p>",
        "id": 231882786,
        "sender_full_name": "Peter Huene",
        "timestamp": 1616709503
    },
    {
        "content": "<p>when using the functions defined in a config, we never actually create an instance of <code>Wasi</code></p>",
        "id": 231882866,
        "sender_full_name": "Peter Huene",
        "timestamp": 1616709569
    },
    {
        "content": "<p>which itself is just a holder of <code>Func</code></p>",
        "id": 231882888,
        "sender_full_name": "Peter Huene",
        "timestamp": 1616709588
    },
    {
        "content": "<p>okay, got everything working now, thanks :)</p>",
        "id": 231886106,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1616711272
    },
    {
        "content": "<p>make sure you do <code>store.add(Rc::new(RefCell::new(wasi_ctx))</code></p>",
        "id": 231887121,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616711796
    },
    {
        "content": "<p>or else it will fail at runtime</p>",
        "id": 231887128,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616711800
    },
    {
        "content": "<p><code>Wasi::set_context</code> encapsulates that</p>",
        "id": 231887240,
        "sender_full_name": "Peter Huene",
        "timestamp": 1616711877
    },
    {
        "content": "<p>oh cool</p>",
        "id": 231887289,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616711891
    },
    {
        "content": "<p>idk why i didnt see that, you said it right there</p>",
        "id": 231887334,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616711912
    },
    {
        "content": "<p>i blame openssl</p>",
        "id": 231887346,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616711921
    },
    {
        "content": "<p>:shakes fist at openssl:</p>",
        "id": 231887390,
        "sender_full_name": "Peter Huene",
        "timestamp": 1616711951
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2776\">https://github.com/bytecodealliance/wasmtime/pull/2776</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/2776\" style=\"background-image: url(https://avatars.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/2776\" title=\"`wasmtime-wasi` usability: re-exports of common siblings by pchickey 路 Pull Request #2776 路 bytecodealliance/wasmtime\">`wasmtime-wasi` usability: re-exports of common siblings by pchickey 路 Pull Request #2776 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Until more impls come along, every user of wasmtime-wasi is going to use wasi-cap-std-sync as their WasiCtxBuilder. Rather than make our users track a dependency on an additional crate, re-export i...</div></div></div>",
        "id": 231895371,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1616717236
    }
]