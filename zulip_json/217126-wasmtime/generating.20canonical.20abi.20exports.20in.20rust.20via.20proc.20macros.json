[
    {
        "content": "<p>Hello! I want to write a proc attribute macro in Rust which compiles the corresponding wasm export (with interface types) for a given Rust function. For example, the user might enter something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">struct</span> <span class=\"nc\">Input</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">s</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">i</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">a</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">b</span>: <span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">c</span>: <span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n\n<span class=\"cp\">#[wasi_fn]</span><span class=\"w\"></span>\n<span class=\"k\">fn</span> <span class=\"nf\">mapper</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nc\">Input</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">a</span>: <span class=\"nc\">input</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">b</span>: <span class=\"nc\">input</span><span class=\"p\">.</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"mf\">123.234</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">c</span>: <span class=\"nc\">format</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"hello {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">.</span><span class=\"n\">s</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>That should generate the correct export along with the interface type lifting/lowering semantics corresponding to the canonical abi.</p>\n<p>My hope is that I could reuse some of the existing canonical binding generation code in the witx-bindgen project.  If anyone is very comfortable with that code and believes it's possible to reuse, I would greatly appreciate any pointers you might have.</p>\n<p>Thanks!</p>",
        "id": 255269022,
        "sender_full_name": "Carl Sverre",
        "timestamp": 1632852121
    },
    {
        "content": "<p>I guess you could generate a WITX snippet from your proc-macro and then internally pass that to <code>witx-bindgen</code></p>",
        "id": 255272139,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1632853190
    },
    {
        "content": "<p>you'd have to make sure that the rust code shape matches what witx-bindgen is going to want tho</p>",
        "id": 255272234,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1632853212
    },
    {
        "content": "<p>Unfortunately rust procedural macros don't have the capability to do what you want since they only have the AST, not type information (such as the definition of <code>Input</code> and <code>Output</code>). This is why <code>witx-bindgen</code> works off the <code>*.witx</code> document, which does have type information, as opposed to the Rust syntax tree. One day I want <code>#[witx_bindgen]</code> to exist but there's so much else to otherwise get done with <code>witx-bindgen</code> it may take awhile...</p>",
        "id": 255273564,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1632853696
    },
    {
        "content": "<p>Otherwise though it should be somewhat easy-ish to use the <code>witx_bindgen_gen_rust_wasm</code> crate directly to generate Rust code if you can massage the input into a <code>witx2::Interface</code>-lookalike thing</p>",
        "id": 255273632,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1632853723
    },
    {
        "content": "<p>good feedback - I am fine with the user needing to annotate the other types they are using as well... I'm surprised I can't get that information at compile time about the shapes of Input and Output.</p>",
        "id": 255273922,
        "sender_full_name": "Carl Sverre",
        "timestamp": 1632853830
    },
    {
        "content": "<p>So I have a somewhat working first pass.  Will keep cleaning it up. Note - this is just to demo an idea more than be a final solution. Obviously going directly from rust -&gt; rust is better than going through witx :).</p>",
        "id": 255321817,
        "sender_full_name": "Carl Sverre",
        "timestamp": 1632874708
    },
    {
        "content": "<p><a href=\"https://github.com/carlsverre/wasi-witx-sandbox/pull/4\">https://github.com/carlsverre/wasi-witx-sandbox/pull/4</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/carlsverre/wasi-witx-sandbox/pull/4\" style=\"background-image: url(https://opengraph.githubassets.com/d3e20b4e6c7bdcc26fd8b8814a4b7abeecd6d8500a7a67349895cc32a73113fa/carlsverre/wasi-witx-sandbox/pull/4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/carlsverre/wasi-witx-sandbox/pull/4\" title=\"Wasi interface macro by carlsverre 路 Pull Request #4 路 carlsverre/wasi-witx-sandbox\">Wasi interface macro by carlsverre 路 Pull Request #4 路 carlsverre/wasi-witx-sandbox</a></div><div class=\"message_embed_description\">This PR creates a macro called wasi_interface which compiles WASM exports for a rust module without needing to define WITX. This makes it very easy to define WASM functions which take and return in...</div></div></div>",
        "id": 255321821,
        "sender_full_name": "Carl Sverre",
        "timestamp": 1632874710
    }
]