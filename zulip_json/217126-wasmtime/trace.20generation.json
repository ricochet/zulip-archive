[
    {
        "content": "<p>Hey, </p>\n<p>I'm trying to replace wasmi with wasmtime in the following ZKWASM project <a href=\"https://github.com/DelphinusLab/zkWasm\">https://github.com/DelphinusLab/zkWasm</a>, in order to do that I need to get execution traces working with wasmtime, specifically traces for opcodes that run, memory read/writes and jumps.<br>\nAs I understand wasmtime doesn't offer these features atm right?, I'd would love to be referred to relevant materials, src code, articles, libs and people that could help me code such a trace generator for wasmtime</p>\n<p><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/DelphinusLab/zkWasm\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/79e838bc08d1e4b618c9af681439ab51dc8c4b00\\/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3530353332303332352f36663936633039302d353734302d343432362d616139622d386236643961613561303266)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/DelphinusLab/zkWasm\" title=\"GitHub - DelphinusLab/zkWasm\">GitHub - DelphinusLab/zkWasm</a></div><div class=\"message_embed_description\">Contribute to DelphinusLab/zkWasm development by creating an account on GitHub.</div></div></div>",
        "id": 375976545,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689591640
    },
    {
        "content": "<p>Could you clarify what you mean by a trace? Are you looking for something like a backtrace for all memory/jump opcodes that execute?</p>",
        "id": 376045990,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689604252
    },
    {
        "content": "<p>more like a trace of execution, all of the opcodes/memory/jumps that happened during the execution of code</p>",
        "id": 376054281,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689605653
    },
    {
        "content": "<p>Do you mean like a <code>Vec&lt;u32&gt;</code> where each entry is the address of an opcode within the original wasm file? </p>\n<p>In either case though I don't believe wasmtime currently supports this feature. I'm not sure there's prior art to draw on either, but if you're interested in seeing what it might take to implement it I'd recommend reading over wasmtime's cranelift lowering and how it interacts with the host through the <code>VMContext</code></p>",
        "id": 376054861,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689605762
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/DRNbamzfb0t15ej8lzr7LxtG/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/DRNbamzfb0t15ej8lzr7LxtG/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/DRNbamzfb0t15ej8lzr7LxtG/image.png\"></a></div><p>I mean something like this</p>",
        "id": 376059133,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689606358
    },
    {
        "content": "<p>ah sorry I don't know how to understand that picture myself (maybe others do?), but my guess is that Wasmtime doesn't currently have the native support to produce something like that</p>",
        "id": 376059963,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689606473
    },
    {
        "content": "<p>yeah the picture isn't so clear, sorry, it's basicly every opcode that ran in an execution. So your recommending that I read about cranelift lowering? Who would be the expert on that?</p>",
        "id": 376061138,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689606675
    },
    {
        "content": "<p>Yes I'd recommend reading up on the translation wasmtime does from wasm to cranelift. </p>\n<p>I'll also point out though that while we can help with questions here if you're looking for more of a mentor relationship with a much higher bandwidth for questions about the code and implementation details I think it'd be best to line that up first. I'm not available for that myself. Without having someone set up ahead of time there may be some time between when questions are asked here and when someone gets to them, and some questions may go un-answered if they require a lot of context to boot up on and a chunk of time to answer as well</p>",
        "id": 376062421,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1689606900
    },
    {
        "content": "<p>yeah I know these are difficult questions, I can arrange for some kind of payment if needed for someone that is well equipped to answer this question, pls lmk if there is someone that might be relevant for this, i feel like it has to be someone who has experience with cranelift?</p>\n<p>Q: would it be possible to turn off the JIT in cranelift so that instructions aren't turned into machine code? &lt;- we prob need this for the trace</p>",
        "id": 376064963,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689607305
    },
    {
        "content": "<p>I don't think payment is needed, this is mostly a question of bandwidth of team members -- I too have not much bandwidth available, but every once in a while I can answer a question on Zulip</p>",
        "id": 376065521,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689607384
    },
    {
        "content": "<p>to your question: no, there's no way to turn off JIT (or AOT) -- wasmtime+cranelift is fundamentally based on compiled code</p>",
        "id": 376065646,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689607406
    },
    {
        "content": "<p>to add tracing you'd want to insert calls to a \"libcall\" (call back into the runtime) at every point in the compiled code that you've executed another op</p>",
        "id": 376065756,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689607426
    },
    {
        "content": "<p>this is theoretically possible -- see <code>translate_after_op</code> in cranelift/wasm/src/code_translator.rs (I think)</p>",
        "id": 376066183,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689607487
    },
    {
        "content": "<p>it'd just be really slow :-)</p>",
        "id": 376066212,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689607491
    },
    {
        "content": "<p>speed is definitely not a problem for us, because the proving stage is way slower,<br>\ni can't find translate_after_op in the whole repo, maybe there is a typo? would you be able to get the effects of the machine instruction by using libcall?</p>",
        "id": 376096749,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689611246
    },
    {
        "content": "<p>I don't remember the exact name but there is a hook that runs after translating every op, you'll have to find it by reading the code starting from <code>FuncEnvironment</code></p>",
        "id": 376097508,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689611400
    },
    {
        "content": "<p>I think the easiest way to do this would be to add a script that inserts Wasm-level instrumentation before giving Wasmtime the Wasm. it could be done on a per-block level (or minimum spanning tree back edge if you want to get fancy)</p>",
        "id": 376103244,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689612664
    },
    {
        "content": "<p>then have your wasmtime embedding provide the host hooks that the instrumentation calls into</p>",
        "id": 376103353,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689612689
    },
    {
        "content": "<p>this wouldn't require any changes to wasmtime itself</p>",
        "id": 376103408,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689612701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>  will i be able to get the SP, memory access and results after each instruction this way?</p>",
        "id": 376114989,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689615341
    },
    {
        "content": "<p>ah I thought you just wanted a trace of each wasm instruction executed.</p>\n<p>this method will only give you wasm-level traces, not machine-level traces</p>",
        "id": 376115233,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1689615390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"631453\">@monkeyontheloose</span> do you mean the machine SP, or the wasm virtual machine SP?</p>",
        "id": 376115421,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689615441
    },
    {
        "content": "<p>the VM SP and the VM memory</p>",
        "id": 376115488,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689615459
    },
    {
        "content": "<p>you can model that as part of instrumentation that you add to the wasm then -- I agree with <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> , that's the more elegant and overall simpler approach</p>",
        "id": 376117975,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1689616045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/376103244\">said</a>:</p>\n<blockquote>\n<p>I think the easiest way to do this would be to add a script that inserts Wasm-level instrumentation before giving Wasmtime the Wasm. it could be done on a per-block level (or minimum spanning tree back edge if you want to get fancy)</p>\n</blockquote>\n<p>hey <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>  how would this design look like? is the plan to add a callback after each instruction? how will this work for jumps?</p>",
        "id": 376580104,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689756579
    },
    {
        "content": "<p>also what would be the best way to implement this? what tools should i use, articles i should read? <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 376698982,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1689779031
    },
    {
        "content": "<p>Given the suggestion of implementing this in pure wasm rather than wasmtime itself, you might be better off taking the discussion to a larger community, like the general wasm discord server (invite link here: <a href=\"https://webassembly.org/community/resources/\">https://webassembly.org/community/resources/</a>)</p>",
        "id": 376701428,
        "sender_full_name": "Lann Martin",
        "timestamp": 1689779457
    },
    {
        "content": "<p>thanks for the help guys, took this to the wasm discord, i guess you can wrap all the opcodes in a wasm file with tracing opcodes that call an imported function for logging, and with this create a full stack trace - total noob here but thats what im thinking right now</p>",
        "id": 377939299,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1690150443
    },
    {
        "content": "<p>Q: do you guys think it might be possible to create full traces by running wasmtime in debug mode?</p>",
        "id": 378102833,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1690198552
    },
    {
        "content": "<p>I'm guessing by \"debug mode\" you mean something like setting <code>RUST_LOG=debug</code> in the environment? no, wasmtime tries to generate fast native code, so it doesn't call out to a runtime library or logging function for each wasm instruction. there is no way to trace the executed instructions except by changing what code is generated, and the easiest way to do that in this case is to modify the wasm you're running to do its own logging. that's especially important since wasmtime is an optimizing compiler and will re-order or delete instructions if it can do so without changing the results of the program, so even trying to trace what it actually ran would not give you the answer you're looking for.</p>",
        "id": 378252315,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1690227417
    },
    {
        "content": "<p>Q1. is there no way to turn off the wasmtime compiler optimizer?<br>\nQ2. Can you run wasmtime in debug mode by connecting to a debugger (I am a noob in this area), like step by step, opcode by opcode?<br>\nQ3. I'm researching how to add log calls to make the wasm log it self, but it seems like a complex and patchy solution, what communities can I leverage for help on getting this done except webassembly.org's discord/reddit and stackoverflow, is there a place where really good wasm devs hang out?</p>\n<p>ty!</p>",
        "id": 379258896,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1690481345
    },
    {
        "content": "<p>Q1: No, many peephole optimizations happen while lowering from clif ir to machine code. These optimizations can't be disabled. Lowering from wasm to clif ir also erases all stack manipulation opcodes.<br>\nQ2: In debug mode the line tables applying to wasm are transformed into line tables applying to the produced machine code. The actual machine code is not affected, so if two source lines get lowered into a single instruction, only one of them wil be preserved in the final line table and if an instruction is optinized away, the respective line in the line table will be gone too if that was the only instruction at that line.</p>",
        "id": 379441244,
        "sender_full_name": "bjorn3",
        "timestamp": 1690539205
    },
    {
        "content": "<p>Question just to make sure I understand this correctly, is wasmtime the only runtime that implements component model wasm? Are there any runtime that are working or planning on support it?</p>\n<p>Also, how does the component model work? is the host VM responsible for all the conversions? how do the executables differ from reg wasm?</p>",
        "id": 382642928,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1691417180
    },
    {
        "content": "<blockquote>\n<p>is the host VM responsible for all the conversions?</p>\n</blockquote>\n<p>Not necessarily. If a guest component is calling another guest component, the host may not be involved at all (apart from anything a particular VM may do to facilitate any core module-&gt;module export call).</p>",
        "id": 382660815,
        "sender_full_name": "Lann Martin",
        "timestamp": 1691420083
    },
    {
        "content": "<blockquote>\n<p>how do the executables differ from reg wasm?</p>\n</blockquote>\n<p>Yes. This is probably the best explanation of how they differ: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md</a></p>",
        "id": 382680913,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1691423050
    },
    {
        "content": "<p>in addition to wasmtime, <code>jco transpile</code> is an implementation the component model for js engines <a href=\"https://github.com/bytecodealliance/jco\">https://github.com/bytecodealliance/jco</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/67c62e32eca233a685ff6f27a4034b4e906bc441\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636365363265613837623765646437306633623935396635326530646530366539383837356139316532616262316363396137313766636538346561363231362f62797465636f6465616c6c69616e63652f6a636f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco\" title=\"GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components\">GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - GitHub - bytecodealliance/jco: JavaScript tooling for working with WebAssembly Components</div></div></div>",
        "id": 382693625,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1691425210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590805\">Ryan Levick (rylev)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/382680913\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>how do the executables differ from reg wasm?</p>\n</blockquote>\n<p>Yes. This is probably the best explanation of how they differ: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Explainer.md</a></p>\n</blockquote>\n<p>I was wondering about how the binarys differ, is there a wasm2wat tool for component model wasm?</p>",
        "id": 384454283,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1691922918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/382693625\">said</a>:</p>\n<blockquote>\n<p>in addition to wasmtime, <code>jco transpile</code> is an implementation the component model for js engines <a href=\"https://github.com/bytecodealliance/jco\">https://github.com/bytecodealliance/jco</a></p>\n</blockquote>\n<p>I mean are there any other wasm runtimes that are planning to support the component model? like ones that run on the host not on the browser</p>",
        "id": 384455251,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1691923150
    },
    {
        "content": "<p>the <code>wasm-tools</code> cli can perform wat to/from binary conversion and various other useful operations on components</p>",
        "id": 384826104,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692028276
    },
    {
        "content": "<p>jco works for node.js and other js engines running outside the browser. but as far as standalone wasm engines, to my knowledge none have shipped component support yet.</p>",
        "id": 384826304,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1692028320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631453\">monkeyontheloose</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/384454283\">said</a>:</p>\n<blockquote>\n<p>is there a wasm2wat tool for component model wasm?</p>\n</blockquote>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7770f4a1022d61e9813054443e180712298875af\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363463656663313364626433343737313633306136313032396134343538643432663231383534353731666430346237393666663136386532326239303233352f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 385236078,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1692114609
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/376103244\">said</a>:</p>\n<blockquote>\n<p>I think the easiest way to do this would be to add a script that inserts Wasm-level instrumentation before giving Wasmtime the Wasm. it could be done on a per-block level (or minimum spanning tree back edge if you want to get fancy)</p>\n</blockquote>\n<p>hey, im trying to implement this, what would be the best way to get this done? I want to support components and aslo use python, i know wasm-tools can decompile/compile into txt format, but I don't know what tools would be best to parse this txt in python, where do i search for lib that just does this? do i need to create bindings for wasm-tools libs?</p>",
        "id": 391921550,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1695132729
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"631453\">monkeyontheloose</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/391921550\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"253990\">fitzgen (he/him)</span> <a href=\"#narrow/stream/217126-wasmtime/topic/trace.20generation/near/376103244\">said</a>:</p>\n<blockquote>\n<p>I think the easiest way to do this would be to add a script that inserts Wasm-level instrumentation before giving Wasmtime the Wasm. it could be done on a per-block level (or minimum spanning tree back edge if you want to get fancy)</p>\n</blockquote>\n<p>hey, im trying to implement this, what would be the best way to get this done? I want to support components and aslo use python, i know wasm-tools can decompile/compile into txt format, but I don't know what tools would be best to parse this txt in python, where do i search for lib that just does this? do i need to create bindings for wasm-tools libs?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> can someone help me with this pls <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 392349999,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1695311418
    },
    {
        "content": "<p>Many of us are unlikely to have the time to mentor you on this task unfortunately (although someone else can jump in at any time of course).  I don't have much to offer over what was said already, but this will likely require a good investment of time on your part if you'd like to see this work get done</p>",
        "id": 392363729,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695316382
    },
    {
        "content": "<p>sure, im going to get this done, you don't have to mentor me,  i'm just asking about what libs are currently available (dono how to search for this, i asked bard and it hallucinates) that might help me with this task of loading  wasm code (with and without component model) into python and then recompiling (not sure this is the right word) it</p>",
        "id": 392365074,
        "sender_full_name": "monkeyontheloose",
        "timestamp": 1695316908
    },
    {
        "content": "<p>I'd recomend looking at <a href=\"https://github.com/bytecodealliance/wasm-tools\">this repository</a>. That's all in Rust, however. I don't know if there are libraries for Python.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/78be1495631b537a56b71350821d57cbe2b482a2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306436303031623064613136336139653334666530666632633733386562633234383832653663393639323062366366623732313530653236633432306438382f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 392365649,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695317145
    }
]