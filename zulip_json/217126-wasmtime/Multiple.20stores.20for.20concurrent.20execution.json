[
    {
        "content": "<p>I would like to run multiple concurrent functions from a bundle of linked modules. No memory is used from these modules, only non-mutable access to store data. In that case, can I link/instantiate modules once and bind them into a Linker and finally clone the linker and use it with another store that references the same data with an Arc?</p>",
        "id": 471204214,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726649369
    },
    {
        "content": "<p>Can you use <code>Arc&lt;YourSharedData&gt;</code> as the <code>T</code> of <code>Linker</code>?</p>",
        "id": 471205277,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1726649662
    },
    {
        "content": "<p>Yup, that's the plan.</p>",
        "id": 471219961,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726653828
    },
    {
        "content": "<p>In that case, can I create a new Store each time I want to call a Func or do I need to keep it consistent with previous module instantiation and registration calls?</p>",
        "id": 471220413,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726653957
    },
    {
        "content": "<p>(considering I'm not using Globals or Memory)</p>",
        "id": 471220568,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726653995
    },
    {
        "content": "<p>If the Module is truly stateless, you could probably get away with keeping only a fixed set (e.g. one per thread) of stores &amp; module-instances. And reuse them to call the module exports on</p>",
        "id": 471221406,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1726654271
    },
    {
        "content": "<p>So I need to create module instances for each thread. Is there a cheaper way? If only Store were clonable...</p>",
        "id": 471221833,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726654408
    },
    {
        "content": "<p>Also maybe of interest is: <code>InstancePre</code></p>",
        "id": 471221879,
        "sender_full_name": "Dave Bakker (badeend)",
        "timestamp": 1726654423
    },
    {
        "content": "<p>aha, cool!</p>",
        "id": 471222057,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726654473
    },
    {
        "content": "<p>So I can pre-instantiate modules once and then clone it to each thread.</p>",
        "id": 471222132,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726654498
    },
    {
        "content": "<p>much better, thanks :-)</p>",
        "id": 471222211,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726654519
    },
    {
        "content": "<p>I can confirm you'll want an instance-per-thread model at least here because you can only call functions on instances and an instance cannot itself be used concurrently on more than one thread at a time. Creation of a <code>Store</code> should be cheap so if you find that being a hot spot let us know so we can optimize it</p>",
        "id": 471281189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1726671792
    },
    {
        "content": "<p>I was wondering: if I receive a func as return type from a call, is there a way to call it on a different store, given that such stores have no memory/globals and instance were imported the same way in all stores?</p>",
        "id": 471436517,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726735484
    },
    {
        "content": "<p>Could you clarify what you mean by \"receive a func as return type\"? Are you referring to the function references proposal?</p>",
        "id": 471496573,
        "sender_full_name": "Lann Martin",
        "timestamp": 1726755278
    },
    {
        "content": "<p>Yup. I noticed \"Val\" can contain a variant Val::Func(Option&lt;Func&gt;).</p>",
        "id": 471505003,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726757713
    },
    {
        "content": "<p>No, a <code>Func</code> is associated with a particular <code>Store</code>. Especially a <code>Func</code> that represents an underlying Wasm function.</p>\n<p>A <code>Store</code> is the lifetime/context/data for a set of Wasm instances, so if the <code>Store</code> goes away or the wrong <code>Store</code> is paired with some operation, we can't really do anything</p>",
        "id": 471505778,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726757941
    },
    {
        "content": "<p>Ok, I see. Is there a way to resolve a Func pointer back to the function name, if it's exported? The \"one instance-set/store per thread\" model is getting very strict if what starts in one thread must always live in the same thread for the whole duration of the pool.</p>",
        "id": 471507369,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726758364
    },
    {
        "content": "<p>you can have multiple stores on a single thread, and you can also send a store to a different thread, it just isn't <code>Sync</code></p>",
        "id": 471507574,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726758429
    },
    {
        "content": "<p>regarding function names: I don't think we expose anything like that. it gets a little tricky where a function can be defined in one module and given a name there, and then imported in another module and given a different name there, so I'm not sure which name we would expose as the canonical one in this case. but we could probably create something to expose the name from the custom names section, if any</p>",
        "id": 471508038,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726758563
    },
    {
        "content": "<p>Could you say more about what you're trying to do? It could be reasonable - for example - for a module to return the name of a func it \"knows\" it exports and the host could call that dynamically on a different instance of that module</p>",
        "id": 471508917,
        "sender_full_name": "Lann Martin",
        "timestamp": 1726758828
    },
    {
        "content": "<p>My current situation is this: I would like to build modules that can manage higher order functions (as in: return function ptrs, receive function ptrs as parameters) and I would like to possibly run such higher order functions in a concurrent way, possibly making use of multiple threads.</p>",
        "id": 471509587,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726759015
    },
    {
        "content": "<p>Initially, I thought that this would only resolve in having one Store for each thread, but since function pointers only make sense in the same Store they came from, I think I've hit a wall.</p>",
        "id": 471510466,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726759299
    },
    {
        "content": "<p>sharing and calling function references from the same instance, concurrently across threads is fundamentally impossible in Wasm without the <a href=\"http://github.com/WebAssembly/shared-everything-threads\">shared-everything proposal</a>, which is still very much in flux at the standards level, and not implemented in wasmtime yet</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"http://github.com/WebAssembly/shared-everything-threads\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b46ddd0aabcab828c7e5edab93ba5b67a3825766/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396436336336663035336262333166386664343131363465383431373266643536306463393262653335346631333630353961303466393463323164396666352f576562417373656d626c792f7368617265642d65766572797468696e672d74687265616473&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"http://github.com/WebAssembly/shared-everything-threads\" title=\"GitHub - WebAssembly/shared-everything-threads: A draft proposal for spawning threads in WebAssembly\">GitHub - WebAssembly/shared-everything-threads: A draft proposal for spawning threads in WebAssembly</a></div><div class=\"message_embed_description\">A draft proposal for spawning threads in WebAssembly - WebAssembly/shared-everything-threads</div></div></div>",
        "id": 471510484,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726759304
    },
    {
        "content": "<p>the proposal is currently in phase 1 out of 5: <a href=\"https://github.com/WebAssembly/proposals?tab=readme-ov-file#phase-1---feature-proposal-cg\">https://github.com/WebAssembly/proposals?tab=readme-ov-file#phase-1---feature-proposal-cg</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/proposals?tab=readme-ov-file#phase-1---feature-proposal-cg\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3af73a45c91017eafdc502e2753dc035d7f4a4b8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393136313737656361306632653034343330613535373466613034303838643565643230393466393665353733666162323664333235336439666135623031612f576562417373656d626c792f70726f706f73616c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/proposals?tab=readme-ov-file#phase-1---feature-proposal-cg\" title=\"GitHub - WebAssembly/proposals: Tracking WebAssembly proposals\">GitHub - WebAssembly/proposals: Tracking WebAssembly proposals</a></div><div class=\"message_embed_description\">Tracking WebAssembly proposals. Contribute to WebAssembly/proposals development by creating an account on GitHub.</div></div></div>",
        "id": 471510860,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726759429
    },
    {
        "content": "<p>I see. Thanks for your support, it really helped to avoid going in the wrong direction :-)</p>",
        "id": 471511577,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726759662
    },
    {
        "content": "<p>good luck!</p>",
        "id": 471511746,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1726759710
    },
    {
        "content": "<p>hehe</p>",
        "id": 471511892,
        "sender_full_name": "Giacomo C.",
        "timestamp": 1726759752
    }
]