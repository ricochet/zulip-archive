[
    {
        "content": "<p>Is anyone around who can explain how the <code>bindings</code> module in crates/wasi/src/preview2/mod.rs works?</p>",
        "id": 391018953,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694725972
    },
    {
        "content": "<p>I can try giving it a stab!</p>",
        "id": 391019586,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694726306
    },
    {
        "content": "<p>although as I read it now I fear I may not be of much help</p>",
        "id": 391019737,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694726388
    },
    {
        "content": "<p>oh now I'm thinking it may be to have only some methods async</p>",
        "id": 391019889,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694726449
    },
    {
        "content": "<p>I'm gonna fiddle</p>",
        "id": 391019898,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694726454
    },
    {
        "content": "<p>i could explain it, but im not really around</p>",
        "id": 391021743,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727381
    },
    {
        "content": "<p>but i can be around :)</p>",
        "id": 391021751,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727384
    },
    {
        "content": "<p>its convoluted, because when i wrote it we didn't have a way to say \"just make some of these generated bindings async, keep the rest sync\". i think alex did actually add that recently</p>",
        "id": 391021791,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727419
    },
    {
        "content": "<p>I got some errors where I needed to use <code>_internal_clocks::wasi::io::poll::Pollable</code> insteaed of <code>_internal_io::wasi::io::poll::Pollable</code>.</p>",
        "id": 391021886,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694727479
    },
    {
        "content": "<p>but basically: for the poll, stream, and filesystem interfaces, we do actually need to do tokio-async things in the methods. (we shouldn't in filesystem, but we do for tokio implementation reasons, to move the blocking calls to a worker thread while the thread running the host call itself can yield)</p>",
        "id": 391021889,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727480
    },
    {
        "content": "<p>oh</p>",
        "id": 391021941,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727488
    },
    {
        "content": "<p>hmm.</p>",
        "id": 391021961,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727499
    },
    {
        "content": "<p>i think this is probably something about that approach that broke when we moved to resources.</p>",
        "id": 391021981,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727509
    },
    {
        "content": "<p>it used to be those types were \"the same\" because they were <code>type Pollable = u32</code> in both modules.</p>",
        "id": 391022019,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727525
    },
    {
        "content": "<p>I've tried to clean this up a bit in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7044\">this PR</a> (sorry just came back here)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7044\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/929efca91ae51f7c96b5d927447269f8a27aaed2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313766363535343735343537643066376132626565393239356262623563396531613830393938336439363862643937666136353662626664343265303033632f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37303434)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7044\" title=\"Simplify bindings generation for preview2 WASI by alexcrichton 路 Pull Request #7044 路 bytecodealliance/wasmtime\">Simplify bindings generation for preview2 WASI by alexcrichton 路 Pull Request #7044 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit attempts to simplify the preview2::bindings module by consolidating everything into a single invocation of bindgen!. Previously this was separated out (I think) to handle some methods b...</div></div></div>",
        "id": 391022028,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727534
    },
    {
        "content": "<p>but now theyre unique t ypes in each position</p>",
        "id": 391022030,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727537
    },
    {
        "content": "<p>ah, that makes sense</p>",
        "id": 391022051,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694727551
    },
    {
        "content": "<p>I think that can be fixed with more stuff specified in <code>with: { ... }</code></p>",
        "id": 391022087,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727577
    },
    {
        "content": "<p>the idea is that <code>with</code> should allow you to redirect any types you are <code>use</code> ing</p>",
        "id": 391022094,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727582
    },
    {
        "content": "<p>yeah</p>",
        "id": 391022102,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727586
    },
    {
        "content": "<p>my above PR should also fix it since there's only one invocation of <code>bindgen!</code></p>",
        "id": 391022131,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727600
    },
    {
        "content": "<p>modulo the sync bits which may need a <code>with: { ... }</code></p>",
        "id": 391022180,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727608
    },
    {
        "content": "<p>yes, so the other thing going on in there is we need sync interfaces that dispatch to the async interfaces via preview2's private tokio runtime, in order to support users of wasmtime who are in synchronous rust</p>",
        "id": 391022285,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727677
    },
    {
        "content": "<p>those should be able to use <code>with</code></p>",
        "id": 391022291,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727682
    },
    {
        "content": "<p>thanks for the cleanup PR alex</p>",
        "id": 391022323,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727704
    },
    {
        "content": "<p>Should <code>read</code> and <code>write</code> be sync, since they're non-blocking?</p>",
        "id": 391022332,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694727712
    },
    {
        "content": "<p>i think <code>read</code> still is technically async for filesystem reads</p>",
        "id": 391022500,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727815
    },
    {
        "content": "<p>but <code>write</code> can maybe be sync now?</p>",
        "id": 391022521,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727827
    },
    {
        "content": "<p>filesystem writes got taken care of by the flush changes, but theres still a special case for reads where they need to be done with a blocking syscall because epoll cant do files</p>",
        "id": 391022598,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727857
    },
    {
        "content": "<p>so they need to get moved to the blocking thread (spawn_blocking)</p>",
        "id": 391022608,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727865
    },
    {
        "content": "<p>I was under the impression that even <code>read</code> was non-blocking because tokio would read into a buffer on another thread</p>",
        "id": 391022624,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694727875
    },
    {
        "content": "<p>we cant do things that way for... reasons</p>",
        "id": 391022642,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727890
    },
    {
        "content": "<p>i forget what they are, precisely, at this exact moment</p>",
        "id": 391022661,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727897
    },
    {
        "content": "<p>but i remember alex and i scratched our heads pretty hard about this earlier this summer and we decided we cant do it</p>",
        "id": 391022705,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727922
    },
    {
        "content": "<p>it's probably worth revisiting now yeah though</p>",
        "id": 391022720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727935
    },
    {
        "content": "<p>in theory I think read/write should be able to be sync methods in rust since they can't block in rust</p>",
        "id": 391022731,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727943
    },
    {
        "content": "<p>might require some fiddling in the source since I think I just saw an <code>.await</code> in there</p>",
        "id": 391022748,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694727956
    },
    {
        "content": "<p>ok. im gonna step away and let you two take care of revisiting that for now, and go back to http streams</p>",
        "id": 391022829,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694727987
    },
    {
        "content": "<p>but first ill sign off that PR above</p>",
        "id": 391022934,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694728039
    },
    {
        "content": "<p>I cherry-picked that PR into my local branch and it's Working For Me</p>",
        "id": 391025220,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694729340
    },
    {
        "content": "<p>Oh, also, the reason <code>read</code> and <code>write</code> need be async is that those are the <em>file</em> read and write methods, which are basically <code>pread</code> and <code>pwrite</code>, so yeah, they're doing I/O, and should be async in the bindings.</p>",
        "id": 391025474,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694729515
    },
    {
        "content": "<p>So it's all good.</p>",
        "id": 391025559,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694729547
    },
    {
        "content": "<p>I've got a follow-up commit though to remove async from <code>check-write</code>, <code>flush</code>, and <code>write-zeros</code></p>",
        "id": 391025575,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694729557
    },
    {
        "content": "<p>technically we could make <code>write</code> non-async too but right now bindgen can't differentiate between the fs <code>write</code> function and the io <code>write</code> function</p>",
        "id": 391025616,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694729584
    },
    {
        "content": "<p>ah, I was just figuring that out. These names aren't qualified, so we have some collisions.</p>",
        "id": 391025675,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694729617
    },
    {
        "content": "<p>I can work on improving that tomorrow</p>",
        "id": 391025815,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694729695
    },
    {
        "content": "<p>As a quick heads up, with the bindings cleanup patch, and moving filesystem functions into the resource impl:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0195</span><span class=\"p\">]</span>: <span class=\"nc\">lifetime</span><span class=\"w\"> </span><span class=\"n\">parameters</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">advise</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span><span class=\"w\"> </span><span class=\"n\">declaration</span>\n<span class=\"w\">   </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">preview2</span><span class=\"o\">/</span><span class=\"n\">host</span><span class=\"o\">/</span><span class=\"n\">filesystem</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">33</span>:<span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">31</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"cp\">#[async_trait::async_trait]</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"o\">---------------------------</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"k\">where</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">clause</span><span class=\"w\"> </span><span class=\"n\">might</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"k\">trait</span>\n<span class=\"mi\">32</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">   </span><span class=\"k\">impl</span><span class=\"o\">&lt;</span><span class=\"n\">T</span>: <span class=\"nc\">WasiView</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">HostDescriptor</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"mi\">33</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">           </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">advise</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">__________________</span><span class=\"o\">^</span>\n<span class=\"mi\">34</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span>\n<span class=\"mi\">35</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">fd</span>: <span class=\"nc\">Resource</span><span class=\"o\">&lt;</span><span class=\"n\">types</span>::<span class=\"n\">Descriptor</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"mi\">36</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">offset</span>: <span class=\"nc\">types</span>::<span class=\"n\">Filesize</span><span class=\"p\">,</span>\n<span class=\"mi\">37</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">len</span>: <span class=\"nc\">types</span>::<span class=\"n\">Filesize</span><span class=\"p\">,</span>\n<span class=\"mi\">38</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">             </span><span class=\"n\">advice</span>: <span class=\"nc\">types</span>::<span class=\"n\">Advice</span><span class=\"p\">,</span>\n<span class=\"mi\">39</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">types</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_________</span><span class=\"o\">^</span><span class=\"w\"> </span><span class=\"n\">lifetimes</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">trait</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"w\">   </span>::: <span class=\"nc\">crates</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">preview2</span><span class=\"o\">/</span><span class=\"k\">mod</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">143</span>:<span class=\"mi\">7</span>\n<span class=\"w\">    </span><span class=\"o\">|</span>\n<span class=\"mi\">143</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">       </span><span class=\"p\">});</span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">lifetimes</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">method</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"k\">trait</span>\n</code></pre></div>",
        "id": 391026575,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694730135
    },
    {
        "content": "<p>It seems to be expecting <code>advise</code> and all the other functions to be sync, even though they're in the list of async fns</p>",
        "id": 391026615,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694730169
    },
    {
        "content": "<p>oh I think it's because the methods changed</p>",
        "id": 391027503,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694730671
    },
    {
        "content": "<p>you'll probably need them to be <code>[method]descriptor.advise</code></p>",
        "id": 391027514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694730682
    },
    {
        "content": "<p>e.g. <code>\"[method]descriptor.advise\"</code></p>",
        "id": 391027524,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694730689
    },
    {
        "content": "<p>Where do I use that syntax?</p>",
        "id": 391028491,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694731246
    },
    {
        "content": "<p>Oh, in the <code>only_imports</code> list. That works.</p>",
        "id": 391028695,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694731346
    },
    {
        "content": "<p>ah yeah</p>",
        "id": 391028709,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694731351
    },
    {
        "content": "<p>oh hey that'd solve the namespacing issue too heh</p>",
        "id": 391028720,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694731361
    },
    {
        "content": "<p>albeit indirectly</p>",
        "id": 391028722,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694731363
    },
    {
        "content": "<p>sweet, I got all of the <code>HostDescriptor</code> impl compiling</p>",
        "id": 391029084,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694731634
    },
    {
        "content": "<p>All of wasmtime-wasi now compiles!</p>",
        "id": 391233653,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694801243
    },
    {
        "content": "<p>It appears that wasmtime-wasi-http is pulling in the wasmtime-wasi bindings for polling and streams. Does it make sense for me to jump in and port that code to the new poll interfaces?</p>",
        "id": 391233929,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694801347
    },
    {
        "content": "<p>I'd naively say that whatever passes CI and gets WASI on resources is good enough for now</p>",
        "id": 391236687,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802234
    },
    {
        "content": "<p>but that's without knowing many specifics</p>",
        "id": 391236716,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802239
    },
    {
        "content": "<p>wasmtime-wasi-http doesn't compile right now and it looks like the easiest thing might be for me to just upgrade its poll and streams to resources too, so I'm now doing that</p>",
        "id": 391238699,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694802637
    },
    {
        "content": "<p>I'm reading over the PR to early-review</p>",
        "id": 391238799,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802663
    },
    {
        "content": "<p>I want to make a cleanup pass and hopefully find some way to factor out all those <code>Resource::new_borrow(fd.rep())</code> things, but it should be in a readable state.</p>",
        "id": 391239343,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694802833
    },
    {
        "content": "<p>yeah I was seeing that -- that's because there's two <code>Descriptor</code> types for example, right?</p>",
        "id": 391239598,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802922
    },
    {
        "content": "<p>one async and one sync?</p>",
        "id": 391239605,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802924
    },
    {
        "content": "<p>Yeah, that's one big source of them</p>",
        "id": 391239650,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694802943
    },
    {
        "content": "<p>kk I can try to fix that with more features in <code>bindgen!</code></p>",
        "id": 391239712,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802963
    },
    {
        "content": "<p>The other is that <code>Resource</code> doesn't have <code>Clone</code> and sometimes we need to pass the same borrowed resource to multiple calls that need <code>Resource</code></p>",
        "id": 391239751,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694802968
    },
    {
        "content": "<p>(not for this PR but for later)</p>",
        "id": 391239761,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694802969
    },
    {
        "content": "<p>ok intersting, I hesitate to add <code>Clone</code> as it doesn't seem obviously correct, but it also doesn't seem obviously wrong</p>",
        "id": 391239874,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803006
    },
    {
        "content": "<p>Yeah, same</p>",
        "id": 391239891,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694803012
    },
    {
        "content": "<p>This is an example of that right?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">input_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">table_mut</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">push_input_stream_child</span><span class=\"p\">(</span><span class=\"n\">input</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Resource</span>::<span class=\"o\">&lt;</span><span class=\"n\">tcp</span>::<span class=\"n\">TcpSocket</span><span class=\"o\">&gt;</span>::<span class=\"n\">new_borrow</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">rep</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">output_stream</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">table_mut</span><span class=\"p\">()</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">push_output_stream_child</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Resource</span>::<span class=\"o\">&lt;</span><span class=\"n\">tcp</span>::<span class=\"n\">TcpSocket</span><span class=\"o\">&gt;</span>::<span class=\"n\">new_borrow</span><span class=\"p\">(</span><span class=\"n\">this</span><span class=\"p\">.</span><span class=\"n\">rep</span><span class=\"p\">()))</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>",
        "id": 391239939,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803035
    },
    {
        "content": "<p>yeah</p>",
        "id": 391239981,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694803052
    },
    {
        "content": "<p>kk</p>",
        "id": 391240015,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803066
    },
    {
        "content": "<p>that's tricky b/c we're probably not managing the actual table entry there?</p>",
        "id": 391240121,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803090
    },
    {
        "content": "<p>actually, lemme read up a bit on this</p>",
        "id": 391240189,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803121
    },
    {
        "content": "<p>so question for you, <code>finish-connect: func() -&gt; result&lt;tuple&lt;input-stream, output-stream&gt;, error-code&gt;</code> -- is the intent that <code>finish-connect</code> sort of \"consumes self\"?</p>",
        "id": 391240372,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803204
    },
    {
        "content": "<p>No, the socket handle remains live after <code>finish-connect</code>, users need it to do getsockopt/setsockopt-like things</p>",
        "id": 391240483,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694803248
    },
    {
        "content": "<p>mk, but I think it may be a bug still then, where if you call that and then close the original socket?</p>",
        "id": 391240547,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803273
    },
    {
        "content": "<p>hm I need to read more on <code>.push_input_stream_child</code></p>",
        "id": 391240594,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803289
    },
    {
        "content": "<p>hm ok this may need to get updated over time</p>",
        "id": 391240792,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803360
    },
    {
        "content": "<p>this is the child/parent relationships where you can't destroy the parent if the child is still alive</p>",
        "id": 391240819,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803371
    },
    {
        "content": "<p>I know we intentionally did this for <code>pollable</code> which is more-or-less a child-like resource though</p>",
        "id": 391240959,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803434
    },
    {
        "content": "<p>it's sort of beyond component-model semantics but that's not the end of the world</p>",
        "id": 391241049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803461
    },
    {
        "content": "<p>When we designed the API, we imagined they'd have reference-counting-like behavior, where you could drop the socket handle and keep the streams live.</p>",
        "id": 391241489,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694803665
    },
    {
        "content": "<p>yeah that seems more appropriate for sockets</p>",
        "id": 391241712,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803743
    },
    {
        "content": "<p>But right now I'm just trying to work within the existing <code>push_input_stream_child</code> behavior.</p>",
        "id": 391241715,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694803744
    },
    {
        "content": "<p>nah yeah that's fine</p>",
        "id": 391241742,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803752
    },
    {
        "content": "<p>we may want to change the <code>drop_*</code> methods which delete from the table to reference count in the table itself</p>",
        "id": 391241778,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803767
    },
    {
        "content": "<p>so for example if you connect and then drop the socket that's ok, but the table entry is kept alive until the two other streams are also dropped and then it's finally actually removed from the table</p>",
        "id": 391241823,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803788
    },
    {
        "content": "<p>I think we have all the hooks to implement that and shouldn't be too bad (no need to do it in this PR of course)</p>",
        "id": 391241851,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694803799
    },
    {
        "content": "<p>Ok, I did some porting of wasi-http but I'm encountering stuff that I don't know what to do with, so I'm going to ask around for help on those parts.</p>",
        "id": 391251867,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694807630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> , i believe you can ignore error coming from the legacy modules (<a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-http/src/component_impl.rs\">this file</a>) as those will be completely removed really soon.</p>",
        "id": 391252754,
        "sender_full_name": "Eduardo Rodrigues",
        "timestamp": 1694807948
    },
    {
        "content": "<p>Oh, awesome. That should clear up a lot of it.</p>",
        "id": 391252815,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694807979
    },
    {
        "content": "<p>this change looks really great so far, all of the host changes are really simple and mechanical</p>",
        "id": 391262735,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1694811664
    },
    {
        "content": "<p>updating the preview1 adapter is... complex. Handles aren't cloneable or even dupable, so a lot of adapter code that just throws around <code>u32</code> code needs to be restructured</p>",
        "id": 391279783,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694818875
    },
    {
        "content": "<p>One option could be to add an off-by-default option to the rust generator to add <code>Copy</code> and remove the <code>Drop</code> implementation to assist with this</p>",
        "id": 391280394,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1694819034
    },
    {
        "content": "<p>arg, so close</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n      <span class=\"nc\">unsupported</span><span class=\"w\"> </span><span class=\"n\">section</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">adapter</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">build</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">232</span>:<span class=\"mi\">10</span>\n</code></pre></div>\n<p><span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 391296934,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694826026
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I'm seeing crates/test-programs/wasi-tests/src/bin/sleep.rs fail with \"unknown handle index 1048096', crates/test-programs/tests/wasi-preview2-components.rs:284:30\". 1048096 happens to be the address of the <code>Pollable</code>  in the guest. It looks like a disagreement about the lowering of <code>list&lt;borrow&lt;Pollable&gt;&gt;</code> between the Rust guest bindings where it's an array of <code>&amp;Pollable</code> and the host bindings which appear to want an array of <code>Pollable</code>.</p>",
        "id": 391718275,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695048929
    },
    {
        "content": "<p>got a command to repro?</p>",
        "id": 391718762,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049062
    },
    {
        "content": "<p>definitely sounds like a bindgen issue</p>",
        "id": 391718778,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049067
    },
    {
        "content": "<p>on the PR branch, <code>cargo test --features \"test-programs/test_programs\" --package test-programs sleep</code></p>",
        "id": 391718867,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695049086
    },
    {
        "content": "<p>hm ok I get a failure</p>",
        "id": 391719590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049291
    },
    {
        "content": "<p>not <code>unknown handle index</code> though</p>",
        "id": 391719683,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049301
    },
    {
        "content": "<p>Do you have my latest branch changes?</p>",
        "id": 391719880,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695049351
    },
    {
        "content": "<p>yeah</p>",
        "id": 391719992,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049390
    },
    {
        "content": "<p>er, 6dea64a708b25bb1c29216e050ddfeb512d3af29</p>",
        "id": 391720026,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049398
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">subscribe</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x000ffe20</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x000ffea8</span>\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">poll</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">FAILED</span>\n\n<span class=\"n\">failures</span>:\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">preopen</span>: <span class=\"nc\">TempDir</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/var/folders/70/cx6_8hz93jz7kj_km0_5c9_40000gn/T/wasi_components_sleep_ZBEXxT\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">sleep</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x217824</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">shim</span><span class=\"o\">!</span><span class=\"n\">indirect</span><span class=\"o\">-</span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">-</span><span class=\"n\">poll</span><span class=\"o\">-</span><span class=\"n\">list</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x137a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sleep</span>::<span class=\"n\">wasi</span>::<span class=\"n\">io</span>::<span class=\"n\">poll</span>::<span class=\"n\">poll_list</span>::<span class=\"n\">h0c3ff0fbc74b0bb0</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1a68</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sleep</span>::<span class=\"n\">main</span>::<span class=\"n\">h05f297b3af9f1f16</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">18</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x1ce4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h59e587ee50bf110f</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"o\">/</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1110</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h68fc03414118ad34</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">sys_common</span><span class=\"o\">/</span><span class=\"n\">backtrace</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">135</span>:<span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>:  <span class=\"mh\">0xefe</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h30274f7edf3867b2</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">166</span>:<span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0x3b3b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"n\">impls</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h644be9b9b3cfec3d</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"o\">/</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">284</span>:<span class=\"mi\">13</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">do_call</span>::<span class=\"n\">h1664f3cfdc3cc4ba</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">500</span>:<span class=\"mi\">40</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">h92522218794dbe07</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">464</span>:<span class=\"mi\">19</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">catch_unwind</span>::<span class=\"n\">h09082efce4044946</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panic</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">142</span>:<span class=\"mi\">14</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start_internal</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h96d2e1cd5d5fb964</span>\n<span class=\"n\">error</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">preview2</span><span class=\"o\">-</span><span class=\"n\">components</span><span class=\"err\">`</span>\n</code></pre></div>",
        "id": 391720167,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049441
    },
    {
        "content": "<p>that's all I'm seeing</p>",
        "id": 391720183,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049443
    },
    {
        "content": "<p>something looks suppressed by accident</p>",
        "id": 391720255,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049457
    },
    {
        "content": "<p>I think stdout is being switched to nonblocking</p>",
        "id": 391720361,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049492
    },
    {
        "content": "<p>b/c I saw a panic about that</p>",
        "id": 391720370,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049495
    },
    {
        "content": "<p>huh, I'm not sure what's happening</p>",
        "id": 391720717,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695049603
    },
    {
        "content": "<p>intermittently I see </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">test</span>\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">subscribe</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">14</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x000ffe20</span>\n<span class=\"p\">[</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">list</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x000ffea8</span>\n<span class=\"n\">calling</span><span class=\"w\"> </span><span class=\"n\">poll</span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">FAILED</span>\n\n<span class=\"n\">failures</span>:\n\n<span class=\"o\">----</span><span class=\"w\"> </span><span class=\"n\">sleep</span><span class=\"w\"> </span><span class=\"n\">stdout</span><span class=\"w\"> </span><span class=\"o\">----</span>\n<span class=\"n\">preopen</span>: <span class=\"nc\">TempDir</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">path</span>: <span class=\"s\">\"/var/folders/70/cx6_8hz93jz7kj_km0_5c9_40000gn/T/wasi_components_sleep_7s0B4k\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">sleep</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">called</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Result</span>::<span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"nb\">Err</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">value</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n    <span class=\"mi\">0</span>: <span class=\"mh\">0x217824</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">-</span><span class=\"n\">component</span>:<span class=\"nc\">shim</span><span class=\"o\">!</span><span class=\"n\">indirect</span><span class=\"o\">-</span><span class=\"n\">wasi</span>:<span class=\"nc\">io</span><span class=\"o\">/</span><span class=\"n\">poll</span><span class=\"o\">-</span><span class=\"n\">poll</span><span class=\"o\">-</span><span class=\"n\">list</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"mh\">0x137a</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sleep</span>::<span class=\"n\">wasi</span>::<span class=\"n\">io</span>::<span class=\"n\">poll</span>::<span class=\"n\">poll_list</span>::<span class=\"n\">h0c3ff0fbc74b0bb0</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">3</span>:<span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"mh\">0x1a68</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sleep</span>::<span class=\"n\">main</span>::<span class=\"n\">h05f297b3af9f1f16</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">Users</span><span class=\"o\">/</span><span class=\"n\">alex</span><span class=\"o\">/</span><span class=\"n\">code</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">tests</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">bin</span><span class=\"o\">/</span><span class=\"n\">sleep</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">18</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">3</span>: <span class=\"mh\">0x1ce4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h59e587ee50bf110f</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"o\">/</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">250</span>:<span class=\"mi\">5</span>\n<span class=\"w\">    </span><span class=\"mi\">4</span>: <span class=\"mh\">0x1110</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">sys_common</span>::<span class=\"n\">backtrace</span>::<span class=\"n\">__rust_begin_short_backtrace</span>::<span class=\"n\">h68fc03414118ad34</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">sys_common</span><span class=\"o\">/</span><span class=\"n\">backerror</span>: <span class=\"nc\">io</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"n\">listing</span><span class=\"w\"> </span><span class=\"n\">tests</span>: <span class=\"nc\">Os</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">code</span>: <span class=\"mi\">35</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">kind</span>: <span class=\"nc\">WouldBlock</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">message</span>: <span class=\"s\">\"Resource temporarily unavailable\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">trace</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">135</span>:<span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"mi\">5</span>:  <span class=\"mh\">0xefe</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">rt</span>::<span class=\"n\">lang_start</span>::<span class=\"p\">{{</span><span class=\"n\">closure</span><span class=\"p\">}}</span>::<span class=\"n\">h30274f7edf3867b2</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">rt</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">166</span>:<span class=\"mi\">18</span>\n<span class=\"w\">    </span><span class=\"mi\">6</span>: <span class=\"mh\">0x3b3b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"n\">impls</span>::<span class=\"o\">&lt;</span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">core</span>::<span class=\"n\">ops</span>::<span class=\"n\">function</span>::<span class=\"nb\">FnOnce</span><span class=\"o\">&lt;</span><span class=\"n\">A</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">F</span><span class=\"o\">&gt;</span>::<span class=\"n\">call_once</span>::<span class=\"n\">h644be9b9b3cfec3d</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">core</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">ops</span><span class=\"o\">/</span><span class=\"n\">function</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">284</span>:<span class=\"mi\">13</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">do_call</span>::<span class=\"n\">h1664f3cfdc3cc4ba</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">500</span>:<span class=\"mi\">40</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panicking</span>::<span class=\"kr\">try</span>::<span class=\"n\">h92522218794dbe07</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panicking</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">464</span>:<span class=\"mi\">19</span><span class=\"w\">              </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">panic</span>::<span class=\"n\">catch_unwind</span>::<span class=\"n\">h09082efce4044946</span>\n<span class=\"w\">                    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">rustc</span><span class=\"o\">/</span><span class=\"mi\">5680</span><span class=\"n\">fa18feaa87f3ff04063800aec256c3d4b4be</span><span class=\"o\">/</span><span class=\"n\">library</span><span class=\"o\">/</span><span class=\"n\">std</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">panic</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">1</span><span class=\"n\">error</span>: <span class=\"nc\">test</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">rerun</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"o\">-</span><span class=\"n\">programs</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">preview2</span><span class=\"o\">-</span><span class=\"n\">components</span><span class=\"err\">`</span>\n</code></pre></div>",
        "id": 391720855,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049649
    },
    {
        "content": "<p>which is rust panicking about stdout being nonblocking I think</p>",
        "id": 391720885,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049659
    },
    {
        "content": "<p>which would also explain the truncated error</p>",
        "id": 391720919,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049669
    },
    {
        "content": "<p>I have enabled <code>inherit_stdout</code> and <code>inherit_stderr</code> for that test, just to be able to see the debug prints. Maybe the test is consuming the host process stdout and stderr.</p>",
        "id": 391721191,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695049751
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/crates/test-programs/tests/wasi-preview2-components.rs b/crates/test-programs/tes</span>\nts/wasi-preview2-components.rs\n<span class=\"gh\">index 7834562b6..1ff6a6ff5 100644</span>\n<span class=\"gd\">--- a/crates/test-programs/tests/wasi-preview2-components.rs</span>\n<span class=\"gi\">+++ b/crates/test-programs/tests/wasi-preview2-components.rs</span>\n<span class=\"gu\">@@ -281,7 +281,7 @@ async fn sched_yield() {</span>\n<span class=\"w\"> </span>}\n<span class=\"w\"> </span>#[test_log::test(tokio::test(flavor = \"multi_thread\"))]\n<span class=\"w\"> </span>async fn sleep() {\n<span class=\"gd\">-    run(\"sleep\", false).await.unwrap()</span>\n<span class=\"gi\">+    run(\"sleep\", true).await.unwrap() // FIXME: temporarily enable stdio for debugging</span>\n<span class=\"w\"> </span>}\n<span class=\"w\"> </span>#[test_log::test(tokio::test(flavor = \"multi_thread\"))]\n<span class=\"w\"> </span>async fn stdio() {\n</code></pre></div>",
        "id": 391721314,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695049787
    },
    {
        "content": "<p>Maybe revert that part, and see if it fixes the test harness stdio?</p>",
        "id": 391721472,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695049822
    },
    {
        "content": "<p>hm no this appears to be macos specific</p>",
        "id": 391721556,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049850
    },
    {
        "content": "<p>on Linux I get the full error with an unknown handle</p>",
        "id": 391721590,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049859
    },
    {
        "content": "<p>I'll hunt down the macos bug later</p>",
        "id": 391721622,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695049866
    },
    {
        "content": "<p>ok yeah definitely a bug in bindgen</p>",
        "id": 391722382,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695050097
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">foo</span>:<span class=\"nc\">bar</span>\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">x</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">y</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">list</span><span class=\"o\">&lt;</span><span class=\"n\">borrow</span><span class=\"o\">&lt;</span><span class=\"n\">x</span><span class=\"o\">&gt;&gt;</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>generates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">y</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kp\">&amp;</span><span class=\"p\">[</span><span class=\"o\">&amp;</span><span class=\"n\">X</span><span class=\"p\">])</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"cp\">#[allow(unused_imports)]</span>\n<span class=\"w\">    </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wit_bindgen</span>::<span class=\"n\">rt</span>::<span class=\"p\">{</span><span class=\"n\">alloc</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">string</span>::<span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">vec</span>::<span class=\"nb\">Vec</span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">vec0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ptr0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec0</span><span class=\"p\">.</span><span class=\"n\">as_ptr</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec0</span><span class=\"p\">.</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">        </span><span class=\"cp\">#[link(wasm_import_module = </span><span class=\"s\">\"$root\"</span><span class=\"cp\">)]</span>\n<span class=\"w\">        </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"cp\">#[link_name = </span><span class=\"s\">\"y\"</span><span class=\"cp\">]</span>\n<span class=\"w\">            </span><span class=\"k\">fn</span> <span class=\"nf\">wit_import</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n\n<span class=\"w\">        </span><span class=\"cp\">#[cfg(not(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">))]</span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">wit_import</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"fm\">unreachable!</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n<span class=\"w\">        </span><span class=\"n\">wit_import</span><span class=\"p\">(</span><span class=\"n\">ptr0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 391722502,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695050133
    },
    {
        "content": "<p>I'd hand-write the bindings for <code>poll_list</code> for now instead</p>",
        "id": 391722733,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695050199
    },
    {
        "content": "<p>while I work on this</p>",
        "id": 391722743,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695050200
    },
    {
        "content": "<p>Ok, I can do that. The adapter already does this, so it's straightforward.</p>",
        "id": 391722859,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695050239
    },
    {
        "content": "<p>mind giving a thumbs up on <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/669\">https://github.com/bytecodealliance/wit-bindgen/pull/669</a>? The fix for this will use some bits there</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/669\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/40821a8e72f91f58ecf329b3d324b7afe49680a1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346531303461323666356664343965323561343462373133366638383830353865363631383432313935336361303733356666643937396562373563363764662f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363639)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/669\" title=\"Fix taking owned resource handles in Rust imports by alexcrichton 路 Pull Request #669 路 bytecodealliance/wit-bindgen\">Fix taking owned resource handles in Rust imports by alexcrichton 路 Pull Request #669 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">I went ahead and did a bit more refactoring at the logic here since I think the old conditions aren't as applicable any more (they haven't aged well)\nCloses #668</div></div></div>",
        "id": 391724956,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695050851
    },
    {
        "content": "<p>/me looks</p>",
        "id": 391725200,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695050919
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span></p>",
        "id": 391725686,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695051060
    },
    {
        "content": "<p>ok I think <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/670\">https://github.com/bytecodealliance/wit-bindgen/pull/670</a> fixes the issue here</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/670\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/53eef245871098589d0d23f7e2ef5706fd3ffcd9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306236353933623730333332666335616565636536353863356331613861646135396138666637643832663536626538303733306536353337326135653835612f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363730)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/670\" title=\"Fix generated bindings for list-of-borrows by alexcrichton 路 Pull Request #670 路 bytecodealliance/wit-bindgen\">Fix generated bindings for list-of-borrows by alexcrichton 路 Pull Request #670 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This commit fixes an issue for imported functions taking list&lt;borrow&lt;T&gt;&gt; arguments. Previously they were erroneously passed through as lists-of-pointers and now they're correctly mapped to list-of-...</div></div></div>",
        "id": 391747487,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695058736
    },
    {
        "content": "<p>although if possible I'd still recommend decoupling that PR from yours</p>",
        "id": 391747514,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695058749
    },
    {
        "content": "<p>and just leave a comment for it to get cleaned up later</p>",
        "id": 391747540,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695058759
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 391748169,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695058929
    },
    {
        "content": "<p>Did you mention earlier that it might be possible to unify the resource types between the sync and async bindings? Right now, running commands on the wasmtime CLI on my branch fails because the stdio stream types now involve resources, and the wasmtime CLI uses the sync bindings, so it's expecting different resource types.</p>",
        "id": 391748552,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695059069
    },
    {
        "content": "<p>can't do that yet but I'm going to work on that next</p>",
        "id": 391753368,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695061143
    },
    {
        "content": "<p>ok, cool, yeah, no rush there</p>",
        "id": 391753629,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695061252
    },
    {
        "content": "<p>ok my truncated error message this morning was <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7058\">https://github.com/bytecodealliance/wasmtime/pull/7058</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7058\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/082060a7c643f5f5a42db3eaf29c80cad462793a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313330363864323137333334613235363636316433323763333266663865613530313736363064333938343764623364616134643865666161633339323166622f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37303538)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7058\" title=\"Force usage of a worker thread for stdin on all platforms by alexcrichton 路 Pull Request #7058 路 bytecodealliance/wasmtime\">Force usage of a worker thread for stdin on all platforms by alexcrichton 路 Pull Request #7058 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit is a follow-up to #6833 to remove the unix module for handling stdio which sets stdin to nonblocking mode. I've just now discovered that on macOS at least configuring O_NONBLOCK for std...</div></div></div>",
        "id": 391767746,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695067877
    },
    {
        "content": "<p>With my latest push, all of test-programs passes!</p>",
        "id": 391778942,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695072998
    },
    {
        "content": "<p>I compiled a wit-bindgen with <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/670\">bytecodealliance/wit-bindgen#670</a> and copied in the bindings, so I can confirm that that fixes the problem I was seeing.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/670\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c84c950e12b6e2f993db60a6aba471a11edb043a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363862333065663863306564656461653438373834666333353630393665643637383537343662336331303862373334633930316263613864346635333535352f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363730)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/670\" title=\"Fix generated bindings for list-of-borrows by alexcrichton 路 Pull Request #670 路 bytecodealliance/wit-bindgen\">Fix generated bindings for list-of-borrows by alexcrichton 路 Pull Request #670 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This commit fixes an issue for imported functions taking list&lt;borrow&lt;T&gt;&gt; arguments. Previously they were erroneously passed through as lists-of-pointers and now they're correctly mapped to list-of-...</div></div></div>",
        "id": 391779417,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695073242
    },
    {
        "content": "<p>nice</p>",
        "id": 391779520,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695073306
    },
    {
        "content": "<p>once that's in I can publish so it can get pulled in</p>",
        "id": 391779550,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695073319
    },
    {
        "content": "<p>ok wit-bindgen is now published</p>",
        "id": 391783717,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695075377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> I've got some cleanups and various changes to the preview1 adapter, would you like me to PR them or would it be ok to push up to the PR?</p>",
        "id": 391958987,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143687
    },
    {
        "content": "<p>or alternatively if you're working on this area I'll let you go gangbuster</p>",
        "id": 391959008,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143698
    },
    {
        "content": "<p>I'm in the middle of trying to reorganize things to fix the <code>&amp;mut Descriptors</code> problem</p>",
        "id": 391959085,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695143728
    },
    {
        "content": "<p>ok I'll wait for that</p>",
        "id": 391959127,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143744
    },
    {
        "content": "<p>I had a rough idea there which was to use <code>&amp;[RefCell&lt;Descriptor&gt;]</code></p>",
        "id": 391959219,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143764
    },
    {
        "content": "<p>and then <code>get_file</code> etc methods would return <code>Result&lt;Ref&lt;'_, File&gt;&gt;</code></p>",
        "id": 391959255,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143777
    },
    {
        "content": "<p>I didn't actually implement it fully though</p>",
        "id": 391959277,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143783
    },
    {
        "content": "<p>Oh, interesting. That might be better than my idea, which was to make <code>descriptors()</code> and <code>descriptors_mut()</code> take a closure that gets passed the <code>Descriptors</code> object.</p>",
        "id": 391959476,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695143879
    },
    {
        "content": "<p>yeah my thinking was that ideally we shy away from all <code>unsafe</code> code and stick to libstd/libcore primitives if possible</p>",
        "id": 391959777,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695143988
    },
    {
        "content": "<p>That's obviously good in theory, but I keep trying to use <code>RefCell</code> in various ways and it keeps not working :-}.</p>",
        "id": 391959950,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695144033
    },
    {
        "content": "<p>But your idea of pushing it down into the array might work out better.</p>",
        "id": 391959987,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695144050
    },
    {
        "content": "<p>nah yeah I know what you mean</p>",
        "id": 391959993,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695144052
    },
    {
        "content": "<p>How would the <code>&amp;[RefCell&lt;Descriptor&gt;]</code> case handle adding a new descriptor to the table?</p>",
        "id": 391960299,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1695144171
    },
    {
        "content": "<p>oh I thought we already had unsafe bits for that</p>",
        "id": 391960441,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695144226
    },
    {
        "content": "<p>like a cap pointer which we bumped and <code>ptr::write</code>-ed the new value into</p>",
        "id": 391960469,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695144237
    },
    {
        "content": "<p>ah yeah <code>push</code> is already unsafe in that regard which I think is fine to keep</p>",
        "id": 391960588,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695144281
    },
    {
        "content": "<p>ok I've pushed up configuration of resources in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/7069\">https://github.com/bytecodealliance/wasmtime/pull/7069</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/7069\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/36fc2332cf4b7f18b5949e9a2b1ebb9ba49366b9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646630353661336431343137663361313731393534316562346536323736383262303038353539393264333966636431646234363966333139396535356366382f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f37303639)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/7069\" title=\"Support resource maps in `component::bindgen!` by alexcrichton 路 Pull Request #7069 路 bytecodealliance/wasmtime\">Support resource maps in `component::bindgen!` by alexcrichton 路 Pull Request #7069 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit adds support to component::bindgen! to specify resource types using the with key of the macro. This can be used to configure the T of Resource&lt;T&gt; to use a preexisting type rather than u...</div></div></div>",
        "id": 392172976,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1695234651
    }
]