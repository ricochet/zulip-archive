[
    {
        "content": "<p>Hi, I've been toying with wasmtime for a few days and have run into something that has me puzzled.<br>\nFor context, my host has a rust object (couple of fields and a map) and it starts a wasm guest to get some decision, and the logic I went for is:</p>\n<ul>\n<li>host creates a Store with the object</li>\n<li>host links, instantiates and run an exported function</li>\n<li>guest uses an imported function to asks the hosts the size of the serialized rust object</li>\n<li>guest allocates a buffer to receive the serialized object</li>\n<li>guest uses a second imported function so the host copies the object into the aforementioned buffer<br>\nAnd of course, I run into an issue with borrowing the caller twice, because I need the stored object to read from and the memory to write to.<br>\nThe <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html\">docs</a> seem to acknowledge that:<blockquote>\n<p>Note that all of these consider the entire store context as borrowed for the duration of the call or the duration of the returned slice. This largely means that while the function is running you’ll be unable to borrow anything else from the store. This includes getting access to the T on Store&lt;T&gt;, but it also means that you can’t recursively call into WebAssembly for instance.</p>\n</blockquote>\n</li>\n</ul>\n<p>But then, am I doing something wrong here? I can of course force my way in with pointers, but that seems very dirty for a fairly simple use-case</p>",
        "id": 389042848,
        "sender_full_name": "Guillaume Quintard",
        "timestamp": 1693856264
    },
    {
        "content": "<p>I think you might want <a href=\"https://docs.wasmtime.dev/api/wasmtime/struct.Memory.html#method.data_and_store_mut\"><code>data_and_store_mut</code></a> perhaps?</p>",
        "id": 389044219,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1693857245
    },
    {
        "content": "<p>ahem, yes, that's it. I should have RTFM'd better. Thank you <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> !</p>",
        "id": 389211668,
        "sender_full_name": "Guillaume Quintard",
        "timestamp": 1693926158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"646663\">Guillaume Quintard</span> has marked this topic as resolved.</p>",
        "id": 389211704,
        "sender_full_name": "Notification Bot",
        "timestamp": 1693926173
    }
]