[
    {
        "content": "<p>I played around with generating a <code>wasm</code> module with the component model for a plugin system which I'd like to design.<br>\nI'm just playing around if the tech stack works for my case.<br>\nSince the ecosystem is bleeding edge and moving fast, I don't know the idiomatic patterns for the stack yet.<br>\nThis is why I'd like to get a review from the engineers here. If it works out I hope it clarifies stuff for other people also.</p>\n<p>I started with following documentation in these repositories.<br>\n<a href=\"https://github.com/WebAssembly/component-model\">https://github.com/WebAssembly/component-model</a><br>\n<a href=\"https://github.com/bytecodealliance/wit-bindgen/\">https://github.com/bytecodealliance/wit-bindgen/</a><br>\n<a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a><br>\n<a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a><br>\n<a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md</a><br>\n<a href=\"https://docs.wasmtime.dev\">https://docs.wasmtime.dev</a></p>\n<p>And the crate docs<br>\n<a href=\"https://docs.rs/wasmtime-wasi/10.0.1/wasmtime_wasi/\">https://docs.rs/wasmtime-wasi/10.0.1/wasmtime_wasi/</a><br>\n<a href=\"https://docs.rs/wasmtime/10.0.1/wasmtime/\">https://docs.rs/wasmtime/10.0.1/wasmtime/</a></p>\n<p>Also reading source code from these two repositories helped<br>\n<a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a><br>\n<a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<p>About the adapters when compiling component model <code>wasm</code> files I've used this source to retrieve them.<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/dev\">https://github.com/bytecodealliance/wasmtime/releases/tag/dev</a></p>\n<p>I started with trying to generate bindings for a simple <code>wit</code> file and get a <code>component-model</code> compiled <code>wasm</code> file.<br>\nTo do this I've used a different crate since I suppose that the plugin writers would do the same.</p>\n<p>Dependencies of the <code>transformer</code> crate is as follows:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[package]</span>\n<span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"transformer\"</span>\n<span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.1.0\"</span>\n<span class=\"n\">edition</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"2021\"</span>\n\n<span class=\"k\">[dependencies]</span>\n<span class=\"n\">wit-bindgen</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"https://github.com/bytecodealliance/wit-bindgen\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">rev</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"8ceb28d\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">'cdylib'</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>The <code>wit</code> file (a simple one which do not deal with error handling or complex types yet)</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>// Transformer\n//\n// package-decl ::= 'package' id ':' id ('@' valid-semver)?\n// &lt;name-of-the-module&gt;:&lt;name-of-the-world&gt;\npackage field33:transformer\n\n// Transformer world\nworld transformer {\n  // Gets data transforms it and returns.\n  //\n  // Meant to be called from the host on demand.\n  export transform: func(input: string) -&gt; string\n}\n</code></pre></div>\n<p><code>lib.rs</code> (Here I wanted to test WASI and getting an input in then returning something)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">File</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">io</span>::<span class=\"n\">prelude</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n\n<span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"transformer\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">MyTransformer</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Transformer</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">MyTransformer</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">transform</span><span class=\"p\">(</span><span class=\"n\">input</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">// format!(\"Transformed, {}!\", input)</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Create a file</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Write to the file</span>\n<span class=\"w\">        </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">write_all</span><span class=\"p\">(</span><span class=\"s\">b\"Hello, WASI!\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Read the file</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">File</span>::<span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s\">\"test.txt\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">String</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"n\">file</span><span class=\"p\">.</span><span class=\"n\">read_to_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">        </span><span class=\"c1\">// Print the contents</span>\n<span class=\"w\">        </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"{input} {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">contents</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export_transformer</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">MyTransformer</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>This concludes the source of my plugin crate.</p>\n<p>The compilation is done with the command:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--target<span class=\"w\"> </span>wasm32-wasi<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span>wasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>../target/wasm32-wasi/debug/transformer.wasm<span class=\"w\"> </span>-o<span class=\"w\"> </span>transformer.wasm<span class=\"w\"> </span>--adapt<span class=\"w\"> </span><span class=\"nv\">wasi_snapshot_preview1</span><span class=\"o\">=</span>./wasi_snapshot_preview1.reactor.wasm\n</code></pre></div>\n<p><code>wasi_snapshot_preview1.reactor.wasm</code> adapter is retrieved from <a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/dev\">https://github.com/bytecodealliance/wasmtime/releases/tag/dev</a></p>\n<p>I do not yet know the differences between the command and reactor adapters but I've chosen the working one.</p>\n<p>Now my module is successfully compiled I need to run it in a toy runtime.</p>\n<p>Here I mostly followed the  <a href=\"https://github.com/bytecodealliance/preview2-prototyping\">https://github.com/bytecodealliance/preview2-prototyping</a> source code. </p>\n<p>I initially had a problem with dependencies and needed to pin some stuff but I think this issue is pretty temporary if we think how fast the project moves.</p>\n<p>Here are the dependencies for my toy runtime crate.</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[dependencies]</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"=10.0.1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"component-model\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"c1\"># TODO: Follow updates</span>\n<span class=\"n\">wasmtime-wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"=10.0.1\"</span>\n<span class=\"n\">cap-fs-ext</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"=1.0.15\"</span>\n<span class=\"n\">cap-primitives</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"=1.0.15\"</span>\n<span class=\"n\">cap-std</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"=1.0.15\"</span>\n\n<span class=\"n\">anyhow</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span>\n<span class=\"n\">tokio</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1.11.0\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"rt-multi-thread\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"macros\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>And the meat of it (<code>main.rs</code>): </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"nb\">Result</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"o\">*</span><span class=\"p\">;</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"p\">{</span><span class=\"n\">wasi</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"p\">};</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">PluginCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">table</span>: <span class=\"nc\">Table</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>: <span class=\"nc\">WasiCtx</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">WasiView</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">PluginCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">Table</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">table_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Table</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">table</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ctx</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">ctx_mut</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">wasi</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[tokio::main]</span>\n<span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">dir</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cap_std</span>::<span class=\"n\">fs</span>::<span class=\"n\">Dir</span>::<span class=\"n\">open_ambient_dir</span><span class=\"p\">(</span><span class=\"s\">\".\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cap_std</span>::<span class=\"n\">ambient_authority</span><span class=\"p\">()).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx_builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">WasiCtxBuilder</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">inherit_stdio</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">push_preopened_dir</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">dir</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">DirPerms</span>::<span class=\"n\">all</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"n\">wasmtime_wasi</span>::<span class=\"n\">preview2</span>::<span class=\"n\">FilePerms</span>::<span class=\"n\">all</span><span class=\"p\">(),</span>\n<span class=\"w\">            </span><span class=\"s\">\".\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">set_args</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"nb\">Vec</span>::<span class=\"o\">&lt;</span><span class=\"nb\">String</span><span class=\"o\">&gt;</span>::<span class=\"n\">new</span><span class=\"p\">());</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">table</span>: <span class=\"nc\">Table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Table</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">wasi_ctx_builder</span><span class=\"p\">.</span><span class=\"n\">build</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">default</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_backtrace_details</span><span class=\"p\">(</span><span class=\"n\">wasmtime</span>::<span class=\"n\">WasmBacktraceDetails</span>::<span class=\"n\">Enable</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">async_support</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"transformer/transformer.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">wasi</span>::<span class=\"n\">command</span>::<span class=\"n\">add_to_linker</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PluginCtx</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"p\">});</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// let (wasi, instance) =</span>\n<span class=\"w\">    </span><span class=\"c1\">//     wasi::command::Command::instantiate_async(&amp;mut store, &amp;component, &amp;linker).await?;</span>\n<span class=\"w\">    </span><span class=\"c1\">// let result = wasi.call_run(&amp;mut store).await.unwrap().unwrap();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">.</span><span class=\"n\">get_func</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"transform\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">().</span><span class=\"n\">into_boxed_str</span><span class=\"p\">())];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">Val</span>::<span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"s\">\"runtime\"</span><span class=\"p\">.</span><span class=\"n\">to_owned</span><span class=\"p\">().</span><span class=\"n\">into_boxed_str</span><span class=\"p\">())];</span>\n<span class=\"w\">    </span><span class=\"n\">func</span><span class=\"p\">.</span><span class=\"n\">call_async</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">params</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">results</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"k\">await</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"fm\">dbg!</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm receiving the result of </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"o\">[</span>rt/src/main.rs:68<span class=\"o\">]</span><span class=\"w\"> </span><span class=\"nv\">results</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">[</span>\n<span class=\"w\">    </span>String<span class=\"o\">(</span>\n<span class=\"w\">        </span><span class=\"s2\">\"runtime Hello, WASI!\"</span>,\n<span class=\"w\">    </span><span class=\"o\">)</span>,\n<span class=\"o\">]</span>\n</code></pre></div>\n<p>which shows that the function arguments and at least WASI functionality related to the file system works fine.</p>\n<p>Where to go from here?</p>\n<p>I would like to know if this pattern is one which is a good fundamental to build complexity over it?<br>\nAre there idiomatic or more smart patterns to achieve the same thing which I haven't realised yet?<br>\nWhat would you do better or would like to correct in this approach? </p>\n<p>I haven't played with the <code>PluginCtx</code> yet. I'm going to check that next.</p>\n<p>If you feel like commenting on it I'd be greatful. If not that is also fine I know that everybody has a limited time.</p>\n<p>Thanks in advance <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f28a511a1e6f165e71d01b6655618944a9472ef7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323065663564396439666663383564356339633435623531356264346563623436393134323866333238313238363937393639333334383139316337356465622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model\" title=\"GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model\">GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c4b76643ccad675106ae93991d00ee9b539a939e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616637313366366132316662616562353461343530316663343539616536303932306565366261306139393033646435636464376133663562313166383461322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/preview2-prototyping\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1f091229d45642ca356addb4d205f51aa205aaf2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643433383230316632633636383065356164386365313263376234616433393639313733306466343334336137353432393331343130353630353134646263392f62797465636f6465616c6c69616e63652f70726576696577322d70726f746f747970696e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/preview2-prototyping\" title=\"GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.\">GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 functions.</a></div><div class=\"message_embed_description\">Polyfill adapter for preview1-using wasm modules to call preview2 functions. - GitHub - bytecodealliance/preview2-prototyping: Polyfill adapter for preview1-using wasm modules to call preview2 func...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f2898b063b9f60ba9cc545862deff61fb6218842\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623435616565323565376438633134623462313432333230383838316365316135306130366238303263613838383864626237366462366464643738373461322f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime\" title=\"GitHub - bytecodealliance/wasmtime: A fast and secure runtime for WebAssembly\">GitHub - bytecodealliance/wasmtime: A fast and secure runtime for WebAssembly</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d4ee71b135ef33ed54a8266f657d06b5101c74b0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323530303434333437623861356530313961396237363130636466656333316533646133333964363062353539366433623938336335303737646364666133642f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f28a511a1e6f165e71d01b6655618944a9472ef7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323065663564396439666663383564356339633435623531356264346563623436393134323866333238313238363937393639333334383139316337356465622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/design/mvp/WIT.md at main · WebAssembly/component-model</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/dev\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/45eba2e502fcc2450759915b0e162fc12098cf29\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636639383466613061656365333539646536303231623163663631343763313836653737313239326336653864613435633462353361323763393334393736392f62797465636f6465616c6c69616e63652f7761736d74696d652f72656c65617365732f7461672f646576)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/releases/tag/dev\" title=\"Release dev: fuzzgen: Generate Tail Calls (#6641) · bytecodealliance/wasmtime\">Release dev: fuzzgen: Generate Tail Calls (#6641) · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 371113027,
        "sender_full_name": "alisomay",
        "timestamp": 1688125175
    },
    {
        "content": "<p>Btw I've also tried using <code>wasmtime::component::bindgen!</code> which works fine in the rt.  <span aria-label=\"party ball\" class=\"emoji emoji-1f38a\" role=\"img\" title=\"party ball\">:party_ball:</span></p>",
        "id": 371134889,
        "sender_full_name": "alisomay",
        "timestamp": 1688128994
    },
    {
        "content": "<p>I don't have time to provide a detailed code review today (taking off for vacation at noon) but everything you want to be using from preview2-prototyping repo has found a new home in the wasmtime repo - readme in p2p shows where they ended up</p>",
        "id": 371206955,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1688138833
    },
    {
        "content": "<p>the difference between a command and a reactor is whether you are expecting to export a <code>func run() -&gt; result</code> (wit syntax) via your Rust <code>fn main()</code> - if you do, the command adapter takes care of hooking those up. otherwise, use the reactor adapter</p>",
        "id": 371207528,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1688138920
    },
    {
        "content": "<p>commands are the appropriate choice if you have some existing command-line app you are porting to wasi: you instantiate the module, execute it once from the only export function <code>run</code>, and then throw it away. reactors can be instantiated, then you can call any of their export functions any number of times.</p>",
        "id": 371208485,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1688139049
    },
    {
        "content": "<p>so, more like a \"library\" than a CLI command</p>",
        "id": 371208676,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1688139077
    },
    {
        "content": "<p>your transformer is already a reactor, it just only happens to have one export.</p>",
        "id": 371210271,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1688139318
    },
    {
        "content": "<p>the remaining suggestion i have is to use wasmtime::component::bindgen! on your transformer package and then, instead of doing <code>instance.get_func</code> and <code>func.call_async</code>, you'll have something like <code>Transformer::transform(&amp;mut self, &amp;mut Store, in: Vec&lt;String&gt;) -&gt; Result&lt;Vec&lt;String&gt;&gt;</code> generated for you to use</p>",
        "id": 371211513,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1688139503
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Appreciate.20a.20code.20review.20if.20you.20have.20time/near/371206955\">said</a>:</p>\n<blockquote>\n<p>I don't have time to provide a detailed code review today (taking off for vacation at noon) but everything you want to be using from preview2-prototyping repo has found a new home in the wasmtime repo - readme in p2p shows where they ended up</p>\n</blockquote>\n<p>Great that you're taking a vacation! I hope it will be refreshing and well. <br>\nThis is good info, I might have missed that thank you.</p>",
        "id": 371488218,
        "sender_full_name": "alisomay",
        "timestamp": 1688219301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/stream/217126-wasmtime/topic/Appreciate.20a.20code.20review.20if.20you.20have.20time/near/371211513\">said</a>:</p>\n<blockquote>\n<p>the remaining suggestion i have is to use wasmtime::component::bindgen! on your transformer package and then, instead of doing <code>instance.get_func</code> and <code>func.call_async</code>, you'll have something like <code>Transformer::transform(&amp;mut self, &amp;mut Store, in: Vec&lt;String&gt;) -&gt; Result&lt;Vec&lt;String&gt;&gt;</code> generated for you to use</p>\n</blockquote>\n<p>Yes this is what I have ended up discovering!<br>\nIt is much more convenient to do it like that.</p>\n<p>Here is my checklist and where I'm at in it to see if this approach fits my use case.</p>\n<p>Works:<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span>  Create a simple plugin in Rust<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Access WASI api filesystem access from the plugin<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Export the main transformer function from the plugin to the runtime<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Call the plugin main transformer function from the runtime to receive results.<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Enable async support in the runtime so the functions from the plugin could be called as async functions.<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Generate a plugin from a wit file and implementations.<br>\n<span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span> Run a generated component model based plugin in the runtime.</p>\n<p>Didn't try yet:</p>\n<ul>\n<li>Try using external libraries a developer might commonly use in the plugin code. (Assumption: If the library compiles to <code>wasm32-wasi</code> it should work fine)</li>\n<li>Access WASI api environment variables from the plugin</li>\n<li>Access WASI api networking from the plugin ( might not be necessary but would like to try out )</li>\n</ul>\n<p>Didn't fully understand how to do yet:</p>\n<ul>\n<li>Import a function from the host application to the plugin</li>\n<li>Call the imported function from the plugin and receive results (async / sync)?</li>\n<li>Share a controlled state from host application to plugin</li>\n</ul>\n<p>Thank you for your time and interest <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 371490481,
        "sender_full_name": "alisomay",
        "timestamp": 1688219832
    },
    {
        "content": "<p>What I have recently tried out:</p>\n<p>Importing  functions from the host is not difficult.<br>\nThey can be sync and async.<br>\nA tuple of args and results could be defined. <br>\nThey need to implement these traits and a lot of tuple types do so we don't need to bother.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Params</span>: <span class=\"nc\">ComponentNamedList</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Lift</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n<span class=\"n\">Return</span>: <span class=\"nc\">ComponentNamedList</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">Lower</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span>\n</code></pre></div>\n<p>We can get a handle to the global store of host to share context between imported functions.</p>\n<p>A sync import may look like this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sync_import</span><span class=\"p\">(</span><span class=\"n\">context</span>: <span class=\"nc\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PluginCtx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\">  </span><span class=\"n\">params</span>: <span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,))</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">data</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"c1\">// A made up value to tests accessing the context.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">runtime_version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">ctx</span><span class=\"p\">.</span><span class=\"n\">runtime_version</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// A function argument which is passed in from the guest.</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"[Naive plugin log - rt v{runtime_version}]: {arg}\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The async counter part may look like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">async_import</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"n\">_context</span>: <span class=\"nc\">StoreContextMut</span><span class=\"o\">&lt;'</span><span class=\"na\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">PluginCtx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">params</span>: <span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,),</span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Box</span><span class=\"o\">&lt;</span><span class=\"k\">dyn</span><span class=\"w\"> </span><span class=\"n\">Future</span><span class=\"o\">&lt;</span><span class=\"n\">Output</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">(</span><span class=\"nb\">String</span><span class=\"p\">,),</span><span class=\"w\"> </span><span class=\"n\">anyhow</span>::<span class=\"n\">Error</span><span class=\"o\">&gt;&gt;</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">a</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">arg_1</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"k\">move</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"nb\">Ok</span><span class=\"p\">((</span><span class=\"fm\">format!</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"s\">\"This is the result of a plugin calling function (async) on rt. arg_1: {arg_1}\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"p\">),))</span>\n<span class=\"w\">    </span><span class=\"p\">};</span>\n<span class=\"w\">    </span><span class=\"nb\">Box</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Setting environment variables for the guest code through WASI is easy.<br>\nOnce the <code>WasiCtx</code> is built there is a vector of env vars are exposed. <br>\nOne can push to it.</p>\n<p>To expose the functions as imports through the mutable component linker one can call these methods.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">().</span><span class=\"n\">func_wrap</span>\n<span class=\"w\">        </span><span class=\"s\">\"my-sync-imported-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">sync_import</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">root</span><span class=\"p\">().</span><span class=\"n\">func_wrap_async</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s\">\"my-async-imported-func\"</span><span class=\"p\">,</span>\n<span class=\"w\">        </span><span class=\"n\">async_import</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>From the <code>wit</code> file they can now be used as imports and the generated code in the guest calls the functions which I've defined. Voila.</p>\n<p>I also tried a few libraries and they worked out of the box, probably anything which compiles to <code>wasm32-wasi</code> works ok.</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"n\">rio_turtle</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.8\"</span>\n<span class=\"n\">rio_api</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.8\"</span>\n<span class=\"n\">uuid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"1\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"serde\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n<span class=\"n\">chrono</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"0.4\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"serde\"</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 371735298,
        "sender_full_name": "alisomay",
        "timestamp": 1688306421
    },
    {
        "content": "<p>Next step is to try all these with a js based plugin with <a href=\"https://github.com/bytecodealliance/componentize-js\">https://github.com/bytecodealliance/componentize-js</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-js\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/dfe31e0565eddb8f1b9130300e4839e8decee031\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613530343861663332643537633764643735353331663036666136633463613762373032393939356632653461313033623333643462643562316337626434662f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d6a73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-js\" title=\"GitHub - bytecodealliance/componentize-js\">GitHub - bytecodealliance/componentize-js</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/componentize-js development by creating an account on GitHub.</div></div></div>",
        "id": 371739518,
        "sender_full_name": "alisomay",
        "timestamp": 1688307509
    }
]