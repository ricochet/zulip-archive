[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254006\">@Andy Wortman</span> just wrote up these docs on lucet's killswitch mechanism: <a href=\"https://github.com/bytecodealliance/lucet/blob/master/docs/src/lucet-runtime/killswitch.md\" title=\"https://github.com/bytecodealliance/lucet/blob/master/docs/src/lucet-runtime/killswitch.md\">https://github.com/bytecodealliance/lucet/blob/master/docs/src/lucet-runtime/killswitch.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/lucet/blob/master/docs/src/lucet-runtime/killswitch.md\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/lucet/blob/master/docs/src/lucet-runtime/killswitch.md\" title=\"bytecodealliance/lucet\">bytecodealliance/lucet</a></div><div class=\"message_embed_description\">Lucet, the Sandboxing WebAssembly Compiler. Contribute to bytecodealliance/lucet development by creating an account on GitHub.</div></div></div>",
        "id": 194330287,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587054015
    },
    {
        "content": "<p>(apropos discussion in the weekly meeting)</p>",
        "id": 194330334,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587054039
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 194330773,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1587054191
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> this is a pretty cool writeup, thanks for sharing! I think that the support implemented in <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1490\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1490\">https://github.com/bytecodealliance/wasmtime/pull/1490</a> is both sort of orthogonal and related to what y'all are doing.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1490\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1490\" title=\"Implement interrupting wasm code, reimplement stack overflow by alexcrichton · Pull Request #1490 · bytecodealliance/wasmtime\">Implement interrupting wasm code, reimplement stack overflow by alexcrichton · Pull Request #1490 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit is a relatively large change for wasmtime with two main\ngoals:\n\n\nPrimarily this enables interrupting executing wasm code with a trap,\npreventing infinite loops in wasm code. Note that r...</div></div></div>",
        "id": 194365888,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587070347
    },
    {
        "content": "<p>the main thing I see is that SIGALRM isn't needed with a technique like <a href=\"https://github.com/bytecodealliance/wasmtime/pull/1490\" title=\"https://github.com/bytecodealliance/wasmtime/pull/1490\">https://github.com/bytecodealliance/wasmtime/pull/1490</a> (where the wasm code is instrumented), but otherwise it looks like y'all are handling a lot of the complexity with returning from host calls and interrupting that</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/1490\" style=\"background-image: url(https://avatars0.githubusercontent.com/u/54038801?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/1490\" title=\"Implement interrupting wasm code, reimplement stack overflow by alexcrichton · Pull Request #1490 · bytecodealliance/wasmtime\">Implement interrupting wasm code, reimplement stack overflow by alexcrichton · Pull Request #1490 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This commit is a relatively large change for wasmtime with two main\ngoals:\n\n\nPrimarily this enables interrupting executing wasm code with a trap,\npreventing infinite loops in wasm code. Note that r...</div></div></div>",
        "id": 194365938,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587070380
    },
    {
        "content": "<p>that's something that the PR doesn't try to handle at all and leaves up to the embedder, but what y'all are doing makes sense to me</p>",
        "id": 194365978,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1587070401
    },
    {
        "content": "<p>indeed. we have to handle stack overflows in the signal handler as well.</p>",
        "id": 194366508,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1587070633
    },
    {
        "content": "<p>one edge lucet doesn't handle at the moment, which i know we (Alex/i) talked about in a wasmtime issue at some point, is recursive calls into a wasm guest. i'm pretty confident that our approach can be extended to handle that in a straightforward manner, we just haven't had that specific use case as a priority quite yet. i'd be super curious if benchmarks show much difference, whenever in the future that's a straightforward comparison :D</p>",
        "id": 194519254,
        "sender_full_name": "iximeow",
        "timestamp": 1587173224
    }
]