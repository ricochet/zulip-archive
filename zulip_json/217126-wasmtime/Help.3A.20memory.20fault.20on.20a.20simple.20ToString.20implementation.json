[
    {
        "content": "<p>I am working on a little scripting interface I want the users of my program have.<br>\nI am using AssemblyScript which is compiled to wasm and I am defining host functions in Rust using wasmtime.</p>\n<p>To test it out, I am defining a Vector2 class like this in AssemblyScript:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kr\">declare</span><span class=\"w\"> </span><span class=\"kd\">class</span><span class=\"w\"> </span><span class=\"nx\">Vector2</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"kr\">constructor</span><span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">y</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">number</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">public</span><span class=\"w\"> </span><span class=\"nx\">ToString</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"kt\">string</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>And this is how I define the ToString function in the host:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span><span class=\"s\">\"env\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"Vector2#ToString\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">WasiCtx</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"memory\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">into_memory</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"k\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">];</span>\n\n<span class=\"w\">    </span><span class=\"n\">memory</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">x_bytes</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"n\">memory</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ptr</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">y_bytes</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">::</span><span class=\"n\">from_le_bytes</span><span class=\"p\">(</span><span class=\"n\">x_bytes</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">::</span><span class=\"n\">from_le_bytes</span><span class=\"p\">(</span><span class=\"n\">y_bytes</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">result_str</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">format!</span><span class=\"p\">(</span><span class=\"s\">\"[{}, {}]\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">result_str</span><span class=\"p\">.</span><span class=\"n\">as_bytes</span><span class=\"p\">().</span><span class=\"n\">len</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Result str {} len {}\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result_str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">len</span>\n<span class=\"p\">}).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>Everything is going well until I try to console.log the value like this:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"k\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">Vector2</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"kr\">from</span><span class=\"w\"> </span><span class=\"s2\">\"./env\"</span><span class=\"p\">;</span>\n\n<span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">main</span><span class=\"p\">()</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"ow\">void</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">newVec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Vector2</span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">newVec</span><span class=\"p\">.</span><span class=\"nx\">ToString</span><span class=\"p\">();</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">val</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"nx\">main</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>Gives an error like this</p>\n<blockquote>\n<p>called <code>Result::unwrap()</code> on an <code>Err</code> value: error while executing at wasm backtrace:<br>\n    0:  0x186 - &lt;unknown&gt;!~lib/rt/common/OBJECT#get:rtSize<br>\n    1:  0x191 - &lt;unknown&gt;!~lib/string/String#get:length<br>\n    2:  0xc42 - &lt;unknown&gt;!~lib/wasi_process/writeString<br>\n    3:  0xda7 - &lt;unknown&gt;!~lib/wasi_process/WritableStream#write&lt;~lib/string/String&gt;<br>\n    4:  0xdb6 - &lt;unknown&gt;!~lib/wasi_console/wasi_console.log<br>\n    5:  0xde4 - &lt;unknown&gt;!scripts/index/main<br>\n    6:  0xe00 - &lt;unknown&gt;!start:scripts/index<br>\n    7:  0xe92 - &lt;unknown&gt;!~start</p>\n<p>Caused by:<br>\n    0: memory fault at wasm address 0x100000002 in linear memory of size 0x10000<br>\n    1: wasm trap: out of bounds memory access</p>\n</blockquote>\n<p>I am sure this has to do with how I am accessing the memory, but what is weird is that if I don't console.log the value everything works.</p>\n<p>I would appreciate any insights on this issue!</p>",
        "id": 484412534,
        "sender_full_name": "Nick Pashkov",
        "timestamp": 1732580086
    },
    {
        "content": "<p>It looks like the error here is happening before your host function is invoked, so this may be a bug in the assemblyscript runtime or compiler. Removing <code>console.log</code> or changing the source can do all sorts of things to compiled output, so if it's a compiler bug then that makes sense as a possible trigger and/or cover-up.</p>",
        "id": 484417976,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1732583889
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> thanks for your reply, the host function is actually invoked because I can see the println statement actually printing something right before the error:</p>\n<blockquote>\n<p>Result str [1, 2] len 6<br>\nthread 'main' panicked at pixa/src/scripting/mod.rs:171:14:<br>\ncalled <code>Result::unwrap()</code> on an <code>Err</code> value: error while executing at wasm backtrace:<br>\n    0:  0x186 - &lt;unknown&gt;!~lib/rt/common/OBJECT#get:rtSize<br>\n    1:  0x191 - &lt;unknown&gt;!~lib/string/String#get:length<br>\n    2:  0xc42 - &lt;unknown&gt;!~lib/wasi_process/writeString<br>\n    3:  0xda7 - &lt;unknown&gt;!~lib/wasi_process/WritableStream#write&lt;~lib/string/String&gt;<br>\n    4:  0xdb6 - &lt;unknown&gt;!~lib/wasi_console/wasi_console.log<br>\n    5:  0xde4 - &lt;unknown&gt;!scripts/index/main<br>\n    6:  0xe00 - &lt;unknown&gt;!start:scripts/index<br>\n    7:  0xe92 - &lt;unknown&gt;!~start</p>\n<p>Caused by:<br>\n    0: memory fault at wasm address 0x100000002 in linear memory of size 0x10000<br>\n    1: wasm trap: out of bounds memory access</p>\n</blockquote>\n<p>Looks like just when it is trying to get the length of the console.log parameter, something happens, also worth adding is that logging a normal string works, and so does accessing each one of the vector components:</p>\n<div class=\"codehilite\" data-code-language=\"TypeScript\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">newVec</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Vector2</span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"c1\">// Works fine, prints 1.0</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">newVec</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>\n<span class=\"w\">  </span><span class=\"c1\">// Works fine, prints 2.0</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">newVec</span><span class=\"p\">.</span><span class=\"nx\">x</span><span class=\"p\">.</span><span class=\"nx\">toString</span><span class=\"p\">());</span>\n<span class=\"w\">  </span><span class=\"c1\">// Works as well</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">\"Hello world\"</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"c1\">// Gives memory trap error</span>\n<span class=\"w\">  </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">newVec</span><span class=\"p\">.</span><span class=\"nx\">ToString</span><span class=\"p\">());</span>\n</code></pre></div>\n<p>Maybe there is something wrong with the host function definition?</p>",
        "id": 484437279,
        "sender_full_name": "Nick Pashkov",
        "timestamp": 1732598346
    },
    {
        "content": "<p>Worth adding also the constructor host function which I defined like this</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">linker</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">func_wrap</span><span class=\"p\">(</span>\n<span class=\"w\">                </span><span class=\"s\">\"env\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"s\">\"Vector2#constructor\"</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"o\">|</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Caller</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ScriptStore</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_ptr</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">f64</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">get_export</span><span class=\"p\">(</span><span class=\"s\">\"memory\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">().</span><span class=\"n\">into_memory</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">allocate_memory</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 2*8</span>\n\n<span class=\"w\">                    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_context</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">as_context_mut</span><span class=\"p\">();</span>\n\n<span class=\"w\">                    </span><span class=\"n\">memory</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">x</span><span class=\"p\">.</span><span class=\"n\">to_le_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to write x to memory\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">                    </span><span class=\"n\">memory</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store_context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">y</span><span class=\"p\">.</span><span class=\"n\">to_le_bytes</span><span class=\"p\">())</span>\n<span class=\"w\">                        </span><span class=\"p\">.</span><span class=\"n\">expect</span><span class=\"p\">(</span><span class=\"s\">\"Failed to write y to memory\"</span><span class=\"p\">);</span>\n\n<span class=\"w\">                    </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">i32</span>\n<span class=\"w\">                </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n</code></pre></div>\n<p>allocate_memory is a function to keep track of the memory offset:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">lazy_static</span><span class=\"o\">!</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"n\">MEMORY_OFFSET</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">Mutex</span><span class=\"o\">&lt;</span><span class=\"kt\">usize</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Mutex</span><span class=\"p\">::</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">fn</span><span class=\"w\"> </span><span class=\"nf\">allocate_memory</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">-&gt;</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">MEMORY_OFFSET</span><span class=\"p\">.</span><span class=\"n\">lock</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">current_offset</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">offset</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"o\">*</span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">current_offset</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 484437555,
        "sender_full_name": "Nick Pashkov",
        "timestamp": 1732598600
    },
    {
        "content": "<p>I finally fixed it, to anybody else wondering, I stumbled across this issue: <a href=\"https://github.com/AssemblyScript/assemblyscript/issues/2099\">https://github.com/AssemblyScript/assemblyscript/issues/2099</a><br>\nBasically I was not running the _start function, which I understand will initialize all the memory.<br>\nSo indeed this issue is not related to wasmtime but only AssemblyScript specific things</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/AssemblyScript/assemblyscript/issues/2099\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ab0a752b8731b82d5017e5753f3de8f2251f24d8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306364356537623938656262663533633364643130633739356638636566623730396432323265663139653036663665663566616234373434373132396431362f417373656d626c795363726970742f617373656d626c797363726970742f6973737565732f32303939&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/AssemblyScript/assemblyscript/issues/2099\" title=\"Crash when wasmtime invokes specific function · Issue #2099 · AssemblyScript/assemblyscript\">Crash when wasmtime invokes specific function · Issue #2099 · AssemblyScript/assemblyscript</a></div><div class=\"message_embed_description\">I am encountering a crash in Wasm generated with recent versions of AssemblyScript when I invoke a function other than the default entry point. Repro setup I am testing with AssemblyScript 0.19.17 ...</div></div></div>",
        "id": 484999765,
        "sender_full_name": "Nick Pashkov",
        "timestamp": 1732838616
    }
]