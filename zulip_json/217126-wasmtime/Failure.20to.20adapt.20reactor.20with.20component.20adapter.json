[
    {
        "content": "<p>Are folks able to adapt reactor wasi modules on wasmtime main?</p>\n<p>I'm looking to create a reactor go component based on the module produced here: <a href=\"https://github.com/dev-wasm/dev-wasm-go/tree/main/http\">https://github.com/dev-wasm/dev-wasm-go/tree/main/http</a></p>\n<p>I ran into the same issues that others have reported but I haven't seen a root cause and solution for it yet:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>Caused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span><span class=\"m\">0</span>:<span class=\"w\"> </span>module<span class=\"w\"> </span>requires<span class=\"w\"> </span>an<span class=\"w\"> </span>import<span class=\"w\"> </span>interface<span class=\"w\"> </span>named<span class=\"w\"> </span><span class=\"sb\">`</span>wasi_snapshot_preview1<span class=\"sb\">`</span>\n</code></pre></div>\n<p>To eliminate any differences that are go specific, I've tried to breakdown the reactor workflow for rust. Initial sanity check with <code>cargo component new foo --lib</code> works. Then I went through breaking down the steps that cargo component runs through.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># Built a reactor adapter in wasmtime</span>\n<span class=\"c1\"># note wasm-encoder and wit-bindgen deps are updated to workspace, e.g. { path = \"../wasm-tools/crates/wasm-encoder\" }</span>\n<span class=\"c1\"># reactor is the default</span>\n<span class=\"nb\">cd</span><span class=\"w\"> </span>wasmtime\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span>-p<span class=\"w\"> </span>wasi-preview1-component-adapter<span class=\"w\"> </span>--target<span class=\"w\"> </span>wasm32-unknown-unknown<span class=\"w\"> </span>--release\n\n<span class=\"c1\"># validate the adapter</span>\n<span class=\"nv\">release</span><span class=\"o\">=</span>target/wasm32-unknown-unknown/release/wasi_preview1_component_adapter.wasm\ncargo<span class=\"w\"> </span>run<span class=\"w\"> </span>-p<span class=\"w\"> </span>verify-component-adapter<span class=\"w\"> </span>--<span class=\"w\"> </span><span class=\"nv\">$release</span>\n\n<span class=\"nb\">export</span><span class=\"w\"> </span><span class=\"nv\">COMPONENT_ADAPTER</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">pwd</span><span class=\"sb\">`</span><span class=\"nv\">$release</span>\n</code></pre></div>\n<p>All good so far. I noticed there isn't a good e2e test for the adapter yet so I converted the cargo-component created lib to use bare wit-bindgen. </p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>cargo<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>smoke<span class=\"w\"> </span>--lib\n<span class=\"c1\"># hack backwards to wit-bindgen</span>\n</code></pre></div>\n<p>Modified Cargo.toml to use local wit-bindgen<br>\n<code>wit-bindgen = { path = \"../../wit-bindgen/crates/guest-rust\"}</code></p>\n<p>Modified <a href=\"http://lib.rs\">lib.rs</a> to use wit-bindgen bindgings and removed cargo-component bindings wrapper. </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"s\">\"./wit/world.wit\"</span><span class=\"p\">);</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"n\">export_example</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"n\">Component</span><span class=\"p\">);</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Example</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Say hello!</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hello_world</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># build then adapt</span>\ncargo<span class=\"w\"> </span>build<span class=\"w\"> </span>--target<span class=\"w\"> </span>wasm32-wasi<span class=\"w\"> </span>--release\nwasm-tools<span class=\"w\"> </span>component<span class=\"w\"> </span>new<span class=\"w\"> </span>-o<span class=\"w\"> </span>smoke.component.wasm<span class=\"w\"> </span>--adapt<span class=\"w\"> </span><span class=\"s2\">\"</span><span class=\"nv\">$COMPONENT_ADAPTER</span><span class=\"s2\">\"</span><span class=\"w\"> </span>target/wasm32-wasi/release/smoke.wasm\n</code></pre></div>\n<p>Same error :/</p>\n<p>Environment:<br>\nI have all tools (cargo-component, wasm-tools, wit-bindgen, wasmtime) set on latest main with the exception of wasm-tools with the resources commit reverted for compatibility with wit-bindgen. All tests in each of the projects passes. I'm falling back to using local paths for all deps so that I can have trace printlns but the original error also occurs with released versions and wasmtime on main.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dev-wasm/dev-wasm-go/tree/main/http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7c71d12066cb1196f493961fd8fa921d6d520ac9\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653661326137646166643534313038363466323137396564303263643039306562346365353330633831383333323832333262613765636635303730326563332f6465762d7761736d2f6465762d7761736d2d676f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dev-wasm/dev-wasm-go/tree/main/http\" title=\"dev-wasm-go/http at main · dev-wasm/dev-wasm-go\">dev-wasm-go/http at main · dev-wasm/dev-wasm-go</a></div><div class=\"message_embed_description\">Simple devcontainer for Golang + WASM development. Contribute to dev-wasm/dev-wasm-go development by creating an account on GitHub.</div></div></div>",
        "id": 365710262,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1686617392
    },
    {
        "content": "<p>Simple mistake. Answer here: <a href=\"#narrow/stream/206238-general/topic/Unable.20to.20create.20wasm.20component.20with.20wasm-tools/near/358507133\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Unable.20to.20create.20wasm.20component.20with.20wasm-tools/near/358507133</a></p>",
        "id": 365711242,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1686617868
    }
]