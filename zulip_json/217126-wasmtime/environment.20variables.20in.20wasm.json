[
    {
        "content": "<p>Does wasm have the concept of a runtime environment variable? I can't seem to be able to get them through <code>std::env::vars()</code>. This reddit comment says that runtime env is not a thing? <a href=\"https://www.reddit.com/r/rust/comments/y5fpnn/accessing_environment_variables_from_rust_wasm/isjaurz/\">https://www.reddit.com/r/rust/comments/y5fpnn/accessing_environment_variables_from_rust_wasm/isjaurz/</a><br>\nhowever there's a function to <code>inherit_env</code> when building <code>WasiCtxBuilder</code>.<br>\nIs it because I am only executing an exported function?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"p\">.</span><span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">module</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">handle_rpc</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">instance</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">get_typed_func</span>::<span class=\"o\">&lt;</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"handle_rpc\"</span><span class=\"p\">)</span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">msg</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">io_rx</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">serde_json</span>::<span class=\"n\">to_string</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">msg</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"fm\">writeln!</span><span class=\"p\">(</span><span class=\"n\">stdin</span><span class=\"p\">.</span><span class=\"n\">write</span><span class=\"p\">().</span><span class=\"n\">unwrap</span><span class=\"p\">(),</span><span class=\"w\"> </span><span class=\"s\">\"{msg}\"</span><span class=\"p\">);</span>\n<span class=\"w\">            </span><span class=\"p\">}</span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">handle_rpc</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">());</span>\n<span class=\"w\">        </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 326366278,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675777702
    },
    {
        "content": "<p>Wasm itself doesn't have env vars, but wasi does. You can set env vars using the WasiCtx you put in the store. (<code>wasi_ctx.push_env</code>) Or using <code>inherit_env</code> on <code>WasiCtxBuilder</code>.</p>",
        "id": 326367132,
        "sender_full_name": "bjorn3",
        "timestamp": 1675777937
    },
    {
        "content": "<p>Did you compile as wasi command (the default) or wasi reactor? If you compiled as wasi command see <a href=\"https://github.com/rust-lang/rust/issues/107635\">https://github.com/rust-lang/rust/issues/107635</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/issues/107635\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/17002d78d37686991cbd17ec8b6b8aa37d2954d2\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316232373661616638663638623939323765303631393033393665363966623734613435643431613434396234363937316265343131383933353861316431632f727573742d6c616e672f727573742f6973737565732f313037363335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/issues/107635\" title=\"Rust `1.67.0` stopped initializing the WASI environment for exported functions on `target=&quot;wasm32-wasi&quot;` 路 Issue #107635 路 rust-lang/rust\">Rust `1.67.0` stopped initializing the WASI environment for exported functions on `target=\"wasm32-wasi\"` 路 Issue #107635 路 rust-lang/rust</a></div><div class=\"message_embed_description\">The code: fn main() {} #[export_name=&quot;test&quot;] pub fn test() {} would produce the following Wasm assembly on Rust 1.66.1 compiled with cargo build --target=&quot;wasm32-wasi&quot;: ;; ... t...</div></div></div>",
        "id": 326367605,
        "sender_full_name": "bjorn3",
        "timestamp": 1675778077
    },
    {
        "content": "<p>As workaround it seems that you can add</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"k\">[lib]</span>\n<span class=\"n\">crate-type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"cdylib\"</span><span class=\"p\">]</span>\n</code></pre></div>\n<p>to <code>Cargo.toml</code> and move <code>main.rs</code> to <code>lib.rs</code>.</p>",
        "id": 326367910,
        "sender_full_name": "bjorn3",
        "timestamp": 1675778179
    },
    {
        "content": "<p>I have done as you asked and it still compiles as a command instead of a reactor (it doesn't expose <code>_initialize</code>). How do I debug/take a look at the generated wasm itself? I thought it's suppoesd to be human readable (looks like lisp) but it looks like gibberish in my text editor.</p>",
        "id": 326383655,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1675782484
    },
    {
        "content": "<p>There are both binary and text (WAT) forms. You can convert binary to WAT with the <code>wasm-tools</code> crate (the <code>print</code> subcommand).</p>",
        "id": 326395086,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675785349
    },
    {
        "content": "<p>The <code>wasm-tools dump</code> subcommand is also useful for this kind of debugging</p>",
        "id": 326395354,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675785412
    },
    {
        "content": "<p>So I used <code>wasm-tools print</code> and after some grepping I found these. I have no idea what it actually means but it does seem to me that it is trying to load some environment variables?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">hbina</span><span class=\"o\">@</span><span class=\"n\">akarin</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">g</span><span class=\"o\">/</span><span class=\"n\">lapce</span><span class=\"o\">-</span><span class=\"n\">prettier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"n\">__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"n\">lapce</span><span class=\"o\">-</span><span class=\"n\">prettier</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"mi\">47</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"environ_sizes_get\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_environ_sizes_get</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">6</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"mi\">48</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">7</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"mi\">49</span>:  <span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">8</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"mi\">50</span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasilibc_initialize_environ_eagerly</span>\n<span class=\"mi\">51</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"o\">--</span>\n<span class=\"mi\">310049</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"mi\">310050</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$handle_rpc</span><span class=\"p\">.</span><span class=\"n\">command_export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1490</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"mi\">310051</span>:    <span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span>\n<span class=\"mi\">310052</span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$handle_rpc</span>\n<span class=\"mi\">310053</span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_dtors</span>\n<span class=\"n\">hbina</span><span class=\"o\">@</span><span class=\"n\">akarin</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">g</span><span class=\"o\">/</span><span class=\"n\">lapce</span><span class=\"o\">-</span><span class=\"n\">prettier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"n\">__wasilibc_initialize_environ_eagerly</span><span class=\"w\"> </span><span class=\"n\">lapce</span><span class=\"o\">-</span><span class=\"n\">prettier</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mi\">2</span>\n<span class=\"mi\">48</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"wasi_snapshot_preview1\"</span><span class=\"w\"> </span><span class=\"s\">\"proc_exit\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__imported_wasi_snapshot_preview1_proc_exit</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">7</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"mi\">49</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">8</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"mi\">50</span>:    <span class=\"nc\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasilibc_initialize_environ_eagerly</span>\n<span class=\"mi\">51</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"mi\">52</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$_ZN10serde_json5value2de11visit_array17h02b51c85ebb372c1E</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">9</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"o\">--</span>\n<span class=\"mi\">282322</span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"cp\">$__stack_pointer</span>\n<span class=\"mi\">282323</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"mi\">282324</span>:  <span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$__wasilibc_initialize_environ_eagerly</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1311</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"mi\">282325</span><span class=\"o\">-</span><span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasilibc_initialize_environ</span>\n<span class=\"mi\">282326</span><span class=\"o\">-</span><span class=\"w\">  </span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 326980885,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1676014385
    },
    {
        "content": "<p>__wasm_call_ctors is only called by _start (for a command) or _initialize (for a reactor). If you skip _start or _initialize, the env vars won't be initialized.</p>",
        "id": 326993234,
        "sender_full_name": "bjorn3",
        "timestamp": 1676018916
    },
    {
        "content": "<p>what if my wasm exports neither?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">hbina</span><span class=\"o\">@</span><span class=\"n\">akarin</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">g</span><span class=\"o\">/</span><span class=\"n\">lapce</span><span class=\"o\">-</span><span class=\"n\">prettier</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">master</span><span class=\"p\">)</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">just</span><span class=\"w\"> </span><span class=\"n\">diagnose</span>\n<span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">build</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s\">\"wasm32-wasi\"</span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.06</span><span class=\"n\">s</span>\n<span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">print</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">lapce_prettier</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">lapce_prettier</span><span class=\"p\">.</span><span class=\"n\">txt</span>\n<span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"s\">\"_start\"</span><span class=\"w\"> </span><span class=\"n\">lapce_prettier</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n<span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"s\">\"_initialize\"</span><span class=\"w\"> </span><span class=\"n\">lapce_prettier</span><span class=\"p\">.</span><span class=\"n\">txt</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">context</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"kc\">true</span>\n</code></pre></div>\n<blockquote>\n<p>__wasm_call_ctors is only called by _start (for a command) or _initialize (for a reactor). If you skip _start or _initialize, the env vars won't be initialized.</p>\n</blockquote>\n<p>i dont think this is true? since</p>\n<ol>\n<li>it exports <code>(export \"handle_rpc\" (func $handle_rpc.command_export))</code></li>\n<li>which in turn calls </li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$handle_rpc</span><span class=\"p\">.</span><span class=\"n\">command_export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">8794</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_ctors</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$handle_rpc</span>\n<span class=\"w\">    </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"cp\">$__wasm_call_dtors</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>so every invocation of <code>handle_rpc</code> should initialize the env?</p>",
        "id": 326996908,
        "sender_full_name": "Hanif Ariffin",
        "timestamp": 1676020134
    },
    {
        "content": "<p>For older versions of wasi-sdk exports other than _start get this wrapper too, but for the latest version this is no longer the case.</p>",
        "id": 327135664,
        "sender_full_name": "bjorn3",
        "timestamp": 1676059155
    }
]