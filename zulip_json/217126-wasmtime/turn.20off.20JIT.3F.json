[
    {
        "content": "<p>I have a wasmtime embedded in a go program. I am seeing some weird things when I try to start a program.  The program's entry point is called from go and for this program:</p>\n<p>func main(){</p>\n<p>log.Printf(\"a\\n\")<br>\n   log.Printf(\"b\\n\")</p>\n<p>}</p>\n<p>One would receive the output \"a\" but nothing else and, according to the return value returned to the go level, the program exited and returned no value.</p>\n<p>Seems to me that the.problem is something in the WASM world, probably in the go/wasmtime interface.  Is there a way to turn off the JIT in crane lift?  I'm on a Mac with AARCH64 architecture.   Is there any way to get a trace from wasmtime so I can see exactly where the program exit is coming from?</p>\n<p>thanks<br>\nIan</p>",
        "id": 356125121,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683307604
    },
    {
        "content": "<p>Could you perhaps clarify a bit? You say that Wasmtime is embedded in a Go program, does that mean you're using the <code>wasmtime-go</code> bindings? You mention another Go program, but that one doesn't mention Wasmtime. Is that a program compile to wasm and running in the aforementioned embedding? If so how did you compile the Go program here?</p>\n<p>If you can run the program in the <code>wasmtime</code> CLI then you can set <code>RUST_LOG=wasi_common</code> to get a strace-sort-of-output for all syscalls. That doesn't have backtraces on it, though, which it sounds like that's what you want. Traps, which <code>proc_exit</code> in WASI corresponds to, should have backtraces on them so if you're using <code>wasmtime-go</code> you should be able to inspect a trap for its backtrace.</p>\n<p>Given all that, though, I'm not sure why you're also asking about turning off the JIT? You cannot do that with the C API (which <code>wasmtime-go</code> uses), but additionally if you turn off the JIT there's no way to run wasm unless you have a precompiled module, but at that point you're not really turning anything off, hence my confusion of why turning off the JIT is mentioned here.</p>",
        "id": 356126567,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683307952
    },
    {
        "content": "<p>Yes, I am using <code>wasmtime-go</code> and the go program I gave is one that I compiled to WASM that I was attempted to run via getting a Func that points to the start symbol and calling it.</p>",
        "id": 356127018,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683308072
    },
    {
        "content": "<p>I'd recommend reproducing that in the <code>wasmtime</code> CLI then as that should be a bit more of a controlled environment</p>",
        "id": 356127279,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683308153
    },
    {
        "content": "<p>How can I run in the CLI when I have a bunch of functions that are in the \"environment\" that are called by the wasm (guest) program???</p>",
        "id": 356127540,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683308232
    },
    {
        "content": "<p>One option is <code>--default-values-unknown-imports</code>. Another is <code>--trap-unknown-imports</code>. If neither of those works then the CLI won't work, yes</p>",
        "id": 356127936,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683308346
    },
    {
        "content": "<p>Yeah, well, I'm doing some shenanigans with linking to allow go programs to run in wasmtime.  Have there been changes to the way wasi is \"used\" by wasmtime?  I don't actually support wasi (I have my own implementation of the functions that just print something and return.)</p>",
        "id": 356129556,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683308766
    },
    {
        "content": "<p>The fact that it gets to main and <em>then</em> seems to return mysteriously makes me think it's something about the fact this is running on AARCH64.  I mean I don't see how the example can get to main() and then execute ONE LINE and not the second before returning. I am wondering if wasmtime is crashing in some way that gets trapped and then it gets returned to me in the go world as a \"returned with no value.\"<br>\n?</p>",
        "id": 356130680,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683309062
    },
    {
        "content": "<p>ah well once something executes surprisingly there's quite a lot that could be going wrong, but I think it'll be difficult to help you remotely debug without a reproduction</p>",
        "id": 356132035,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683309469
    },
    {
        "content": "<p>some messing with debuggers produced this </p>\n<p>thread '&lt;unnamed&gt;' panicked at 'assertion failed: range_start &lt; range_end', crates/cranelift/src/debug/transform/expression.rs:689:13</p>",
        "id": 356138989,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683311456
    },
    {
        "content": "<p>so it appears wasmtime itself has an assertion failure</p>",
        "id": 356139067,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683311476
    },
    {
        "content": "<p>oh yes there are known issues with Wasmtime's dwarf implementation, so it's not recommended to enable that</p>",
        "id": 356140140,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683311814
    },
    {
        "content": "<p>ok, can you slap with a link about the issue and/or how to turn off dwarf?</p>",
        "id": 356141389,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683312191
    },
    {
        "content": "<p>sorry, stupid question. I found the config switch for it.</p>",
        "id": 356141802,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683312327
    },
    {
        "content": "<p>The issue in question is <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3999\">https://github.com/bytecodealliance/wasmtime/issues/3999</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3999\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3c6e16532a8c19b768bb5c488201c2456bbe9de6\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626635636634376633663666643533336661353833643064396463663630356338666530613939306563316666363839303364626634643834303932353635302f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f33393939)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3999\" title=\"Assertion in debugger mode (left &lt; right) 路 Issue #3999 路 bytecodealliance/wasmtime\">Assertion in debugger mode (left &lt; right) 路 Issue #3999 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Test Case preinitialized.mov ( couldn't upload .wasm file so I'd changed extension to .mov, it is actually .wasm file) Steps to Reproduce RUST_BACKTRACE=1 gdb --args wasmtime run -g preinitialized....</div></div></div>",
        "id": 356142326,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683312490
    },
    {
        "content": "<blockquote>\n<p>The fact that it gets to main and then seems to return mysteriously makes me think it's something about the fact this is running on AARCH64</p>\n</blockquote>\n<p>FWIW, we've had good support for aarch64 for about three years now, and it's regularly fuzzed; I understand the impulse to suspect the complex codegen under the hood but I'd be very very surprised if a compiler bug were responsible for your program exiting early. Or at the very least, there's no reason to think aarch64 is any more suspect than other architectures -- it's actually a slightly older backend than our current x86 one.</p>\n<p>Re: \"turning off JIT\", as Alex notes you'll need a precompiled module then, and the compiler that produces that precompiled module is exactly the same compiler that produces the JIT'd code. The only difference is when the compiler runs. I suspect you're wanting an interpreter instead; unfortunately Wasmtime doesn't have a Wasm interpreter, it must compile to native.</p>",
        "id": 356153831,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1683316476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> I'm frankly not one to jump to the conclusion it's the infrastructure (wasmtime) because I was once told by a wise engineer, \"ALWAYS assume it's YOUR code that is broken.\"  However, after about 3 days of studying this and experimenting with it, the fact that the first line of code runs and later ones don't is VERY hard to explain with _some_ kind of error coming in from out of band.  I'm going to do some other experiments today and if I figure it out I'll advise.</p>",
        "id": 356297402,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683377370
    },
    {
        "content": "<p>PS: It <em>also</em> might be a problem with wasmtime-go and its use of cgo to call into the infrastructure that is rust based.  Frankly, I think cgo is a bit rickety.</p>",
        "id": 356297607,
        "sender_full_name": "Ian Smith",
        "timestamp": 1683377431
    }
]