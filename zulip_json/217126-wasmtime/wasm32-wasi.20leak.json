[
    {
        "content": "<p>When a wasm function that takes and returns a list of u8 is called &gt; 600k times we are running out of memory. I still need to setup a pure repro case of wasmtime outside of my engine.</p>\n<p>I can't say for sure if this is in how we're using wasmtime or if there is a leak in wasmtime itself. When we compile against wasm32-unknown-unknown the leak doesn't happen. There's evidently some kind of interop problem with us when wasm32-wasi is in play.</p>\n<p>Does anyone have a good tip for where to start investigating?</p>\n<p>Wit:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>step: function(me: s64, cell: list&lt;u8&gt;) -&gt; list&lt;u8&gt;\n</code></pre></div>\n<p>Rust:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen_rust</span>::<span class=\"n\">export</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"agent.wit\"</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">struct</span> <span class=\"nc\">Agent</span><span class=\"p\">;</span><span class=\"w\"></span>\n\n<span class=\"c1\">// use std::io::Cursor;</span>\n<span class=\"c1\">// use byteorder::{LittleEndian, ReadBytesExt};</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">agent</span>::<span class=\"n\">Agent</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Agent</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">step</span><span class=\"p\">(</span><span class=\"n\">_me</span>: <span class=\"kt\">i64</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">cell</span>: <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">Vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"c1\">// return first entity in cell</span>\n<span class=\"w\">        </span><span class=\"n\">cell</span><span class=\"p\">[</span><span class=\"o\">..</span><span class=\"mi\">16</span><span class=\"p\">].</span><span class=\"n\">to_vec</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 285145612,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1654537384
    },
    {
        "content": "<p>There was a <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4099\">similar use issue recently</a> reported where it had to do with the linker-inserted command/reactor bits, although whether or not that's applicable here depends on the way you're compiling. Given though that it's wasi-specific it seems likely it's the same thing</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/4099\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f483d709a354f2632d359e2b0f7f0eed9a40c8d7\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313166303739393433343266623666393534626333343165336261626534623635666531313665643562363337393465623536396535613361666639356532392f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f34303939)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/4099\" title=\"wasmtime_wasi: env leaking memory 路 Issue #4099 路 bytecodealliance/wasmtime\">wasmtime_wasi: env leaking memory 路 Issue #4099 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Note: I&#39;m not sure if my implementation is correct, so please correct me if my implementation or expectations are wrong. Test Case Example project is available here Steps to Reproduce Create a ...</div></div></div>",
        "id": 285148436,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1654538712
    },
    {
        "content": "<p>Thank you that does look very, very similar. I'm glad I asked!</p>",
        "id": 285158841,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1654543540
    }
]