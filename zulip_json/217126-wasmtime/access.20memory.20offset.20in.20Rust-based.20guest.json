[
    {
        "content": "<p>I'm trying to understand how I can direct the host to some piece of memory the guest has written some data to (both are implemented in Rust). I understand that a guest can't have direct access to the host memory, and all it knows is the offset of the memory it is assigned, but how can I go from doing something like <code>Vec::with_capacity(10)</code>, to having an offset integer that I can pass to the host for it to use in a <code>memory.data_unchecked()[offset + len]</code> call? Basically, I know how to pass len (10), but I don't know how to get the offset u32 after allocating the memory in the guest.</p>",
        "id": 195776639,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588198135
    },
    {
        "content": "<p>(assuming both sides are written in rust) was <code>Vec::with_capacity(10)</code> run on the wasm/guest side? if yes, then wasm's <code>v.as_ptr()</code> shall give you <code>offset</code> for host</p>",
        "id": 195776962,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588198360
    },
    {
        "content": "<p>wasm pointer is an int32 and direct offset in host's allocated memory</p>",
        "id": 195777706,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588198968
    },
    {
        "content": "<p>Ah interesting. Thanks <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span>. So something like this should work (some psuedo code): <a href=\"https://gist.github.com/rust-play/e790f19505cc19d2b1330f68f2e7321c\" title=\"https://gist.github.com/rust-play/e790f19505cc19d2b1330f68f2e7321c\">https://gist.github.com/rust-play/e790f19505cc19d2b1330f68f2e7321c</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/rust-play/e790f19505cc19d2b1330f68f2e7321c\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/rust-play/e790f19505cc19d2b1330f68f2e7321c\" title=\"Code shared from the Rust Playground\">Code shared from the Rust Playground</a></div><div class=\"message_embed_description\">Code shared from the Rust Playground. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 195778388,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588199492
    },
    {
        "content": "<p>not so fast :) I bet the <code>CString::new(\"foo\")</code> will be destroyed after <code>run</code> call</p>",
        "id": 195778548,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588199626
    },
    {
        "content": "<p>but yeah, you'll get the <code>offset</code></p>",
        "id": 195778607,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588199652
    },
    {
        "content": "<p>Hmm, yeah, even with <code>mem::forget</code> I still get a <code>NulError</code> because I didn't pass the length. And since I can only return a single value from the guest function, I guess that means the right approach is for the guest to call a host function that takes the offset and length as an argument, right?</p>",
        "id": 195778982,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588199963
    },
    {
        "content": "<p>there is also <code>mem.data_ptr()</code> which might be more intuitive in your case</p>",
        "id": 195778990,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588199974
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span>. One more question: how can I add the offset to the ptr from <code>mem.data_ptr()</code> to get the memory location of the string written by the guest? It seems <code>data_ptr().add(offset as usize)</code> won't work, as I get an empty string when I print the cstr from that pointer.</p>",
        "id": 195779795,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588200639
    },
    {
        "content": "<p><code>.add()</code> is right, so is <code>.offset()</code>. I'm skeptical about guest's code. Try: <code>{ static HELLO: &amp;[u8] = b\"Hello, world!\\x00\"; HELLO.as_ptr() as i32 }</code></p>",
        "id": 195780080,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588200856
    },
    {
        "content": "<p>but normally, you would write something like <code>fn run() -&gt; *const u8 {</code>in the function signature -- you don't have to cast that to i32</p>",
        "id": 195780374,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588201085
    },
    {
        "content": "<p>Yep, that worked! I wonder why <code>mem::forget</code> doesn't work in this case though.</p>",
        "id": 195780402,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588201115
    },
    {
        "content": "<p>yep, be careful, rust can trick you by moving and dropping your stuff</p>",
        "id": 195780443,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588201159
    },
    {
        "content": "<p>Returning <code>*const u8</code> won't work in this case, will it? Since <code>WasmTy</code> isn't implemented for that type?</p>",
        "id": 195780607,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588201229
    },
    {
        "content": "<p>on host side... for guest side it is fine</p>",
        "id": 195780652,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588201265
    },
    {
        "content": "<p>Aha, I see. Thanks again <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span>, I'm off to playing some more with this. It's definitely a lot of fun to work with.</p>",
        "id": 195780841,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588201419
    },
    {
        "content": "<p>Quick update for anyone who reads this in the future, <code>mem::forget</code> does work (and so does <code>ManuallyDrop</code>), I was erroneously dropping the ptr instead of the value itself.</p>",
        "id": 195806478,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588232052
    }
]