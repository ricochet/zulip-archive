[
    {
        "content": "<p>Hi guys, I got a weird but hopefully interesting question. Suppose a WASM module calls a HostFunctionl, and wasmtime or other WASM runtime implements the host function by calling an external program. Can this external program do something hacky (like look at the call stack) and infer the linear memory start address of the caller WASM module?</p>\n<p>I know it would be trivial if wasmtime just tell the external module, but from security aspect, my project want to do this in a more trusted place, if that's possible.</p>\n<p>Or if it's possible to make all Linear Memory start address 32bit aligned, will this make inference more possible? Thank you!</p>",
        "id": 436556359,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1714590220
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"710667\">@Coulson Liang</span> I don't think you need to do any reverse-engineering; the Wasmtime API on the host side lets you see slices of any exported memory, and from that you can get the address in host address space directly</p>",
        "id": 436556491,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1714590275
    },
    {
        "content": "<p>Yes I know that and tried that working. For some security reason, <strong>we want to check who is calling and where did the call come from by ourselves,</strong> without any information from the runtime, so I'm wondering if there are some hacky way to infer that information.</p>",
        "id": 436562142,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1714592855
    },
    {
        "content": "<p>Not entirely sure what you're asking: the runtime calls a host function, so it has to be trusted (any state you could use to determine the caller ultimately comes from the runtime)</p>",
        "id": 436562784,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1714593161
    },
    {
        "content": "<p>Can you describe the security problem at a higher level? What's the threat model? What's in the TCB, and what's not?</p>",
        "id": 436562811,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1714593178
    },
    {
        "content": "<p>Never mind, I just persuaded my boss to take the runtime as part of TCB, sorry for posting this weird question. Previously on other systems we look at the stack and infer where the call is from, but this doesn't make sense for Wasm at all.</p>",
        "id": 436582031,
        "sender_full_name": "Coulson Liang",
        "timestamp": 1714602159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"710667\">Coulson Liang</span> has marked this topic as resolved.</p>",
        "id": 436594685,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714609459
    }
]