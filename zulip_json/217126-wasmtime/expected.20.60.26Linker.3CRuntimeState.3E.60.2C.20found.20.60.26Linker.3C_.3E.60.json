[
    {
        "content": "<p>What to do with Linker if there's no import state or data?  I have no idea what <code>HelloWorld::add_to_linker(&amp;mut linker, |state: &amp;mut MyState| state)?;</code> would be for a WASM component that doesn't have an import. My WIT:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">eighty4</span>:<span class=\"nc\">odd</span><span class=\"o\">-</span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">even</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">lib</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"o\">-</span><span class=\"n\">odd</span><span class=\"o\">-</span><span class=\"n\">or</span><span class=\"o\">-</span><span class=\"n\">even</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">number</span>: <span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">bool</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What trait should I add to my runtime state struct?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"p\">{</span><span class=\"n\">Config</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"p\">};</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Component</span><span class=\"p\">;</span>\n\n<span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"w\">    </span><span class=\"n\">path</span>: <span class=\"s\">\"wit\"</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">RuntimeState</span><span class=\"p\">;</span>\n\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">wasmtime</span>::<span class=\"nb\">Result</span><span class=\"o\">&lt;</span><span class=\"p\">()</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"Hello, world!\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Config</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">wasm_component_model</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">config</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Component</span>::<span class=\"n\">from_file</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"./guest/golang/build/is_odd_or_even.component.wasm\"</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">linker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Linker</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Store</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">RuntimeState</span><span class=\"w\"> </span><span class=\"p\">{});</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bindings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Lib</span>::<span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">bindings</span><span class=\"p\">.</span><span class=\"n\">call_is_odd_or_even</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">26</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"26 is even\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"k\">else</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"fm\">println!</span><span class=\"p\">(</span><span class=\"s\">\"26 is odd\"</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"nb\">Ok</span><span class=\"p\">(())</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 429755668,
        "sender_full_name": "adam",
        "timestamp": 1711495586
    },
    {
        "content": "<p>You can probably skip the <code>add_to_linker</code> entirely if the world has no imports, but with no imports it should in theory have no extra trait bounds on the return value since I think the closure would largely go unused. Do you see a compile error though trying to use <code>add_to_linker</code>?</p>",
        "id": 429756442,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496060
    },
    {
        "content": "<p>I can't find add_to_linker. Is there a Rust standard way to see what generated code is created by a macro?</p>",
        "id": 429756514,
        "sender_full_name": "adam",
        "timestamp": 1711496104
    },
    {
        "content": "<p>I've personally used <a href=\"https://crates.io/crates/cargo-expand\"><code>cargo expand</code></a> before, but in this case I think it's because no <code>add_to_linker</code> is generated since there are no imports.</p>",
        "id": 429756663,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496195
    },
    {
        "content": "<p>Here's my error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">error</span><span class=\"p\">[</span><span class=\"n\">E0308</span><span class=\"p\">]</span>: <span class=\"nc\">mismatched</span><span class=\"w\"> </span><span class=\"n\">types</span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">19</span>:<span class=\"mi\">73</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">19</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">     </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bindings</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Lib</span>::<span class=\"n\">instantiate</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">store</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">component</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">linker</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                </span><span class=\"o\">----------------</span><span class=\"w\">                         </span><span class=\"o\">^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">expected</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">RuntimeState</span><span class=\"o\">&gt;</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\">                                </span><span class=\"n\">arguments</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">incorrect</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">expected</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">RuntimeState</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n<span class=\"w\">              </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">&amp;</span><span class=\"n\">wasmtime</span>::<span class=\"n\">Linker</span><span class=\"o\">&lt;</span><span class=\"n\">_</span><span class=\"o\">&gt;</span><span class=\"err\">`</span>\n<span class=\"n\">note</span>: <span class=\"nc\">associated</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">here</span>\n<span class=\"w\">  </span><span class=\"o\">-</span>-&gt; <span class=\"nc\">src</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">1</span>\n<span class=\"w\">   </span><span class=\"o\">|</span>\n<span class=\"mi\">4</span><span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"o\">!</span><span class=\"p\">();</span>\n<span class=\"w\">   </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"o\">^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^</span>\n<span class=\"w\">   </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">this</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"n\">originates</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasmtime</span>::<span class=\"n\">component</span>::<span class=\"n\">bindgen</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">Nightly</span><span class=\"w\"> </span><span class=\"n\">builds</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">Z</span><span class=\"w\"> </span><span class=\"kr\">macro</span><span class=\"o\">-</span><span class=\"n\">backtrace</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">more</span><span class=\"w\"> </span><span class=\"n\">info</span><span class=\"p\">)</span><span class=\"err\">```</span>\n</code></pre></div>",
        "id": 429756675,
        "sender_full_name": "adam",
        "timestamp": 1711496200
    },
    {
        "content": "<p>Oh that's a slightly different error, you're using <code>wasmtime::Linker</code> as opposed to <code>wasmtime::component::Linker</code></p>",
        "id": 429756733,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496246
    },
    {
        "content": "<p>(it's a bit buried in the error message)</p>",
        "id": 429756742,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496251
    },
    {
        "content": "<p><span aria-label=\"fireworks\" class=\"emoji emoji-1f386\" role=\"img\" title=\"fireworks\">:fireworks:</span> for the compile, but now I have <code>Error: import </code>wasi:io/error@0.2.0<code> has the wrong type</code> at runtime</p>",
        "id": 429756868,
        "sender_full_name": "adam",
        "timestamp": 1711496326
    },
    {
        "content": "<p>Do I need to add the WASM that I used as an adapter to the runtime?</p>",
        "id": 429756900,
        "sender_full_name": "adam",
        "timestamp": 1711496351
    },
    {
        "content": "<p>Ah yes so in this case that means that your wit world doesn't quite capture what the component fully does, which is to use WASI as well. You'll likely want to use <code>wasmtime_wasi::command::sync::add_to_linker</code></p>",
        "id": 429756936,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496388
    },
    {
        "content": "<p>for that you'll need to do a bit more as well, you can follow <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi-async/main.rs\">this example</a> but swap out the async bits for sync bits</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi-async/main.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d65c4a605fea1527517b6de36402d8201e50f906\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613637333633383038666562363665333765636330626334613861643333626435346561636561303837623063396662633366663536346464356530383238312f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/examples/wasi-async/main.rs\" title=\"wasmtime/examples/wasi-async/main.rs at main · bytecodealliance/wasmtime\">wasmtime/examples/wasi-async/main.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 429757020,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496432
    },
    {
        "content": "<p>The plot thickens</p>",
        "id": 429757021,
        "sender_full_name": "adam",
        "timestamp": 1711496432
    },
    {
        "content": "<p>If you're feeling intrepid there's also <a href=\"https://github.com/bytecodealliance/wasmtime/pull/8228\">https://github.com/bytecodealliance/wasmtime/pull/8228</a> which improves documentation here, but currently <code>wasmtime-wasi</code> is somewhat sparse on docs</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/8228\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/835c00617e3d86d012576fa795e8c29e0683bcda\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303339396562323439343334666438306462323862383232393265323537656361393439643536366333653536653038313036306665626362396461393033332f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f38323238)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/8228\" title=\"Add documentation and refactor `wasmtime-wasi` by alexcrichton · Pull Request #8228 · bytecodealliance/wasmtime\">Add documentation and refactor `wasmtime-wasi` by alexcrichton · Pull Request #8228 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Currently the wasmtime-wasi crate is pretty sparse on documentation and additionally had some papercuts in the API. I've attempted to document all the major bits with words and examples here in add...</div></div></div>",
        "id": 429757053,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496457
    },
    {
        "content": "<p>I'm confused why I need to depend on any WASI interfaces, why I have to add all the imports for the WASI adapter to the WASM component, if my function interface is just a primitive number and boolean.</p>",
        "id": 429757086,
        "sender_full_name": "adam",
        "timestamp": 1711496485
    },
    {
        "content": "<p>Could this example have worked without wasmtime-wasi if I didn't link the WASI adapter?</p>",
        "id": 429757106,
        "sender_full_name": "adam",
        "timestamp": 1711496506
    },
    {
        "content": "<p>you don't have to depend on WASI, but language runtimes often bring in WASI symbols as a dependency, for example debug printing and environment variables or various things for the runtime</p>",
        "id": 429757753,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496928
    },
    {
        "content": "<p>if you didn't link the wasi adapter then the example may work, but you may not have been able to produce a component in the first place</p>",
        "id": 429757786,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711496950
    },
    {
        "content": "<p>True story <code>Error: failed to parse WebAssembly module</code></p>",
        "id": 429757909,
        "sender_full_name": "adam",
        "timestamp": 1711497013
    },
    {
        "content": "<p>I'm kinda stumped... adding these capabilities to the WASI context because the WASM component has all these imports that my implementation code in the component doesn't use completely drops all the containerized security benefits of a WASM component that's just a pure function.</p>",
        "id": 429758609,
        "sender_full_name": "adam",
        "timestamp": 1711497561
    },
    {
        "content": "<p>Well, before drawing dramatic conclusions, I'd caution you that it seems like there's a lot going on here and there's pieces you don't fully understand. It might be worth introspecting various steps along the way to see where WASI is required and what's pulling it in. I need to go for now, but as I mentioned earlier some language runtimes pull in WASI for various purposes, and it looks like you're using TinyGo, and I'm not sure TinyGo has a way to build without WASI. Rust, however, does have a way to do that, so this is not a property of wasm or components but probably moreso the language you're using.</p>",
        "id": 429759349,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711498046
    },
    {
        "content": "<p>I built a component with wit-bindgen as well and the Rust component added more WASI dependencies that TinyGo didn't include. Thanks for the assistance, Alex. I made great progress with your help today.</p>",
        "id": 429759452,
        "sender_full_name": "adam",
        "timestamp": 1711498123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"703445\">@adam</span> definitely share the happy result tricks with tinygo here. Others might learn from your labors!</p>",
        "id": 429881654,
        "sender_full_name": "Ralph",
        "timestamp": 1711551836
    }
]