[
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> Hey,</p>\n<p>A few months ago I added support for WASM and Wasmtime to Compiler Explorer. It's made it's way through the review pipeline and is now on the live website! (<a href=\"https://godbolt.org/z/q6TMTKE95\">Example</a>)</p>\n<p>It doesen't have all of the nice features that <code>wasmtime explore</code> has, but my main goal was to quickly be able to look at what other engines emit for any given piece of wasm. I'm planning on adding support for a few more engines in the future.</p>\n<p>Currently we only have version 20.0.1 which was the latest when I started this work, but now that It's in, it should be fairly easy to add new versions.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/q6TMTKE95\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4bf336f7597f851df0732b12f8d4b7b383508ec8/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/q6TMTKE95\" title=\"Compiler Explorer - WASM\">Compiler Explorer - WASM</a></div><div class=\"message_embed_description\">(module\n    (func $square (param i32) (result i32)\n        local.get 0 ;; pull the input value and push it to the stack\n        local.get 0 ;; square function needs the same number twice\n        i32.mul ;; mul operation expects two numbers from the stack\n    )\n\n    ;; factorial(n) returns the factorial of n.\n    (func $factorial (export \"factorial\") (param $n i32) (result i32)\n        (if (result i32)\n            (i32.le_s (local.get $n) (i32.const 1))\n            (then (i32.const 1))\n            (else\n                (i32.mul\n                    (local.get $n)\n                    (call $factorial (i32.sub (local.get $n) (i32.const 1)))))\n        )\n    )\n)\n    </div></div></div>",
        "id": 444325414,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1718223924
    },
    {
        "content": "<p>Whoa that's awesome!</p>",
        "id": 444327770,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718224628
    },
    {
        "content": "<p>I've actually wanted something like this in the past where I'd start with a small Rust function and then pipe it through both llvm and wasmtime and see what pops out, and this makes that even closer to a reality :)</p>",
        "id": 444327844,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718224661
    },
    {
        "content": "<p>Thanks so much for working on this! Also if you know of anything we can do upstream to help this let us know</p>",
        "id": 444328055,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1718224722
    },
    {
        "content": "<p>The only thing it's missing is debug info to match line numbers to assembly instructions, like we have in <code>wasmtime explore</code>. I haven't been keeping up with developments on that, so not sure how easy it is to port that.</p>\n<p>I'd also like at some point to get a way to view the CLIF IR output, but I think that's just wiring stuff up in the CE side.</p>\n<p>Otherwise it's pretty much \"done\"</p>",
        "id": 444329188,
        "sender_full_name": "Afonso Bordado",
        "timestamp": 1718225140
    }
]