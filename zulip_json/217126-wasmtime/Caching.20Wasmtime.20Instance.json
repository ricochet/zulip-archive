[
    {
        "content": "<p>From docs I see that store should be short lived but can I cache <code>Wasmtim::Instance</code> inside a long-lived (unbounded) object ?</p>",
        "id": 480101574,
        "sender_full_name": "spino17",
        "timestamp": 1730487320
    },
    {
        "content": "<p>An instance lives within a store; but if you want to cache the work done to instantiate (linking/resolving imports), you can create an <code>InstancePre</code> and use that to create instances in new stores</p>",
        "id": 480102273,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730487641
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> for the response. What I meant by caching is that if I don't have an instance I would create store and make the instance and then cache it, so that next time I would not even have to make a new store if I already have an instance. By the APIs, I don't see why this can't be done as Instance does require a mutable ref to store but then returns a completely owned instance which should not care store getting dropped (and being short lived).</p>",
        "id": 480102818,
        "sender_full_name": "spino17",
        "timestamp": 1730487864
    },
    {
        "content": "<p>If you throw away the Store you won't be able to do anything useful with the Instance; calling into it will require the Store again.</p>",
        "id": 480103879,
        "sender_full_name": "Lann Martin",
        "timestamp": 1730488373
    },
    {
        "content": "<p>the purpose of InstancePre is that it makes the process of instantiation extremely fast and low-cost.</p>",
        "id": 480104059,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488453
    },
    {
        "content": "<p>Ohh right <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> . Sorry, I overlooked that. Then I believe using <code>InstancePre</code> is the way to it! Thanks <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> for the suggestion and thanks <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> for pointing this out.</p>",
        "id": 480104161,
        "sender_full_name": "spino17",
        "timestamp": 1730488503
    },
    {
        "content": "<p>if you're going to reuse something including all the mutable state (i.e. linear memory, globals, tables) you should  give ownership of of (Store, Instance) in some datastructure and then take it back out of there (getting ownership of store back) later so you can use it</p>",
        "id": 480104216,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488526
    },
    {
        "content": "<p>if you arent trying to reuse the state, then you should drop the store and create a new one.</p>",
        "id": 480104243,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Caching.20Wasmtime.20Instance/near/480104059\">said</a>:</p>\n<blockquote>\n<p>the purpose of InstancePre is that it makes the process of instantiation extremely fast and low-cost.</p>\n</blockquote>\n<p>So this is infact used for performance gains ? I am looking exactly for that and seemed that Instance creation if it's frequent might be dragging the performance down.</p>",
        "id": 480104268,
        "sender_full_name": "spino17",
        "timestamp": 1730488550
    },
    {
        "content": "<p>InstancePre.instantiate is the fastest possible path to an instance. its not zero-cost - nothing really is - but its as low cost as we know how to make it.</p>",
        "id": 480104375,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488590
    },
    {
        "content": "<p>ohh okay, makes sense. Can instance allocation be also useful along with this ?</p>",
        "id": 480104475,
        "sender_full_name": "spino17",
        "timestamp": 1730488632
    },
    {
        "content": "<p>for e.g. cloud services that make a new instance of the same module or component on every http request, we use a pooling allocator (setup in config, docs there) and InstancePre to minimize instantiation time</p>",
        "id": 480104508,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488647
    },
    {
        "content": "<p>but interally it uses mutex which again is posing a bottleneck</p>",
        "id": 480104520,
        "sender_full_name": "spino17",
        "timestamp": 1730488653
    },
    {
        "content": "<p>yes, the idea of a pooling allocator is that it amortizes as many of the memory setup steps up front as possible</p>",
        "id": 480104653,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488695
    },
    {
        "content": "<p>what uses a mutex, and where?</p>",
        "id": 480104661,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253992\">Pat Hickey</span> <a href=\"#narrow/channel/217126-wasmtime/topic/Caching.20Wasmtime.20Instance/near/480104653\">said</a>:</p>\n<blockquote>\n<p>yes, the idea of a pooling allocator is that it amortizes as many of the memory setup steps up front as possible</p>\n</blockquote>\n<p>pooling allocator uses mutex: <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/index_allocator.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/index_allocator.rs</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/index_allocator.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6b0b6085c635bd2121448d0fbbc4bb82246b282f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336131663163396532613633663932383234363461386363356464383861623762376133613232313132653964323663373439643066333462663438323538302f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/index_allocator.rs\" title=\"wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/index_allocator.rs at main · bytecodealliance/wasmtime\">wasmtime/crates/wasmtime/src/runtime/vm/instance/allocator/pooling/index_allocator.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 480104753,
        "sender_full_name": "spino17",
        "timestamp": 1730488739
    },
    {
        "content": "<p>You are almost certainly bottlenecking on memory management before any mutex contention</p>",
        "id": 480104759,
        "sender_full_name": "Lann Martin",
        "timestamp": 1730488742
    },
    {
        "content": "<p>yes thats using a mutex so that slot bookeeping is maintained correctly. the critical section is just on manipulation of the slot datastructure (Inner) and not on any other part of initialization</p>",
        "id": 480105030,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488858
    },
    {
        "content": "<p>agreed with lann, we have never seen a system where that is a bottleneck</p>",
        "id": 480105070,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730488877
    },
    {
        "content": "<p>ohh okay, so let me use <code>InstancePre</code> and run my benchmarks again. Thanks again people!</p>",
        "id": 480105127,
        "sender_full_name": "spino17",
        "timestamp": 1730488903
    },
    {
        "content": "<p>wasmtime has many large production users that depend on that path being as efficient as possible, and we put a ton of engineering into making it as fast as we can</p>",
        "id": 480105602,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730489085
    },
    {
        "content": "<p>yeah <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span> absolutely <span aria-label=\"100\" class=\"emoji emoji-1f4af\" role=\"img\" title=\"100\">:100:</span> In fact I got to this pooling allocator through one of the official blogs: <a href=\"https://bytecodealliance.org/articles/wasmtime-10-performance\">https://bytecodealliance.org/articles/wasmtime-10-performance</a> which itself is quite interesting. Thanks again for the help, will try out the pooling allocator + InstancePre and see how it plays out.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.org/articles/wasmtime-10-performance\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b666ca74a20745aca2566cd241108afdcfa09d04/68747470733a2f2f62797465636f6465616c6c69616e63652e6f72672f696d616765732f6176617461722e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.org/articles/wasmtime-10-performance\" title=\"Wasmtime 1.0: A Look at Performance\">Wasmtime 1.0: A Look at Performance</a></div><div class=\"message_embed_description\">In preparation for our upcoming release of Wasmtime 1.0 on September20, we have prepared two blog posts describing the work we have putinto the compiler and runtime recently. This first post will describeperformance-related projects: mak...</div></div></div>",
        "id": 480105924,
        "sender_full_name": "spino17",
        "timestamp": 1730489211
    },
    {
        "content": "<p>I just have one doubt, my engine has async config</p>",
        "id": 480106151,
        "sender_full_name": "spino17",
        "timestamp": 1730489301
    },
    {
        "content": "<p>over 2 years ago. time flies!</p>",
        "id": 480106156,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730489304
    },
    {
        "content": "<blockquote>\n<p>I just have one doubt, my engine has async config</p>\n</blockquote>\n<p>Not a problem</p>",
        "id": 480106196,
        "sender_full_name": "Lann Martin",
        "timestamp": 1730489322
    },
    {
        "content": "<p>everything will be fine in async, all of the prod users are using async too</p>",
        "id": 480106204,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1730489324
    },
    {
        "content": "<p>ohh okay, perfect! let me try then. Thanks again for the help and the amazing Wasmtime project!</p>",
        "id": 480106303,
        "sender_full_name": "spino17",
        "timestamp": 1730489373
    }
]