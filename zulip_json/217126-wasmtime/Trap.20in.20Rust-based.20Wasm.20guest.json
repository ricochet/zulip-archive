[
    {
        "content": "<p>I've read through the <a href=\"https://bytecodealliance.github.io/wasmtime/wasm-rust.html\" title=\"https://bytecodealliance.github.io/wasmtime/wasm-rust.html\">Writing WebAssembly in Rust</a> part of the Wasmtime guide. It's not clear to me how I can have a function called by the host trap using rust code. From reading the <a href=\"https://docs.rs/wasmtime/0.16.0/wasmtime/struct.Func.html#method.wrap\" title=\"https://docs.rs/wasmtime/0.16.0/wasmtime/struct.Func.html#method.wrap\">Func#wrap</a> documentation, it mentions I can use <code>Result&lt;T, Trap&gt;</code> to handle functions that can trap, but it also specifies that the WebAssembly return type in such a case is <code>T</code>. So, my question is, how can I bubble up errors from a Wasm function written in Rust?</p>",
        "id": 196748406,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588845139
    },
    {
        "content": "<p>If you call a rust function, which returns Result&lt;T, Trap&gt;, from webassembly, it will either return T or cause a Trap (which will <br>\ninterrupt the execution).</p>",
        "id": 196751328,
        "sender_full_name": "Maciej Kot",
        "timestamp": 1588847060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266161\">@Maciej Kot</span> thank you for that. I'm still not entirely sure that answers my question, but that could well be because of my misunderstanding of terminology here. Just to clarify, I'm writing a Wasm function in Rust (e.g. compiling <code>cdylib</code> using <code>wasm32-unknown-unknown</code> target). So my question is, what should the signature of the Rust function be that gets compiled to Wasm, to be able to manually trigger traps/errors/exceptions from within that Rust/Wasm function, to allow whatever runtime is running the wasm code to catch those errors and distinguish them from regular return values of that function.</p>",
        "id": 196760581,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588853193
    },
    {
        "content": "<p>So it not a trap. Trap \"poisons\" current instance sometimes without chance of recovery. There is exception handling proposal for WebAssembly -- it might be a better fit. Basically you need to do it by yourself atm, e.g. as rust does: via your own \"Result\"-like structure for the layer between host and guest code.</p>",
        "id": 196777249,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1588861257
    },
    {
        "content": "<p>Ah right, that's the context I was missing, so traps aren't the solution here, and exceptions aren't available yet. Using something like a serialized data structure which includes error details makes sense. Thank you <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span>.</p>",
        "id": 196782057,
        "sender_full_name": "Jean Mertz",
        "timestamp": 1588863273
    }
]