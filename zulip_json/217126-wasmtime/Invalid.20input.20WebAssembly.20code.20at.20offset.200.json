[
    {
        "content": "<p>After having updated <code>cargo-component-bindings</code> and <code>wasmtime</code>, I have difficulties to run my component in Python:</p>\n<p>I build the component running <code>cargo component build --release --target wasm32-unknown-unknown</code> with dependencies <strong><code>cargo-component-bindings = \"0.5.0\"</code></strong> and generate Python bindings running <code>python -m wasmtime.bindgen the-component.wasm --out-dir the-bindings</code> under <strong><code>wasmtime==15.0.0</code></strong>. </p>\n<p>The error message says</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>wasmtime._error.WasmtimeError:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>parse<span class=\"w\"> </span>WebAssembly<span class=\"w\"> </span>module\n\nCaused<span class=\"w\"> </span>by:\n<span class=\"w\">    </span>Invalid<span class=\"w\"> </span>input<span class=\"w\"> </span>WebAssembly<span class=\"w\"> </span>code<span class=\"w\"> </span>at<span class=\"w\"> </span>offset<span class=\"w\"> </span><span class=\"m\">0</span>:<span class=\"w\"> </span>unknown<span class=\"w\"> </span>binary<span class=\"w\"> </span>version<span class=\"w\"> </span>and<span class=\"w\"> </span>encoding<span class=\"w\"> </span>combination:<span class=\"w\"> </span>0xd<span class=\"w\"> </span>and<span class=\"w\"> </span>0x1,<span class=\"w\"> </span>note:<span class=\"w\"> </span>encoded<span class=\"w\"> </span>as<span class=\"w\"> </span>a<span class=\"w\"> </span>component<span class=\"w\"> </span>but<span class=\"w\"> </span>the<span class=\"w\"> </span>WebAssembly<span class=\"w\"> </span>component<span class=\"w\"> </span>model<span class=\"w\"> </span>feature<span class=\"w\"> </span>is<span class=\"w\"> </span>not<span class=\"w\"> </span>enabled<span class=\"w\"> </span>-<span class=\"w\"> </span><span class=\"nb\">enable</span><span class=\"w\"> </span>the<span class=\"w\"> </span>feature<span class=\"w\"> </span>to<span class=\"w\"> </span>allow<span class=\"w\"> </span>component<span class=\"w\"> </span>validation\n</code></pre></div>\n<p>Even though the error message is pretty clear, I am not sure where to enable <em>\"the feature\"</em>.<br>\nIn the past, I could then run my component smoothly in Python. </p>\n<p>Is used versioning supposed to be compatible?<br>\nThank you very much for any hint.</p>",
        "id": 404661580,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1701185762
    },
    {
        "content": "<p>wasmtime-py is using the c api to wasmtime, which is not built with the <code>component-model</code> feature enabled</p>",
        "id": 404664915,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1701186757
    },
    {
        "content": "<p>which is mostly because the c api doesnt yet have any of the component interfaces of wasmtime available - they havent been written yet. im not sure if someone was working on it or not.</p>",
        "id": 404665167,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1701186842
    },
    {
        "content": "<p>hm although this is generating bindings rather than running the component so that in theory should work, <span class=\"user-mention\" data-user-id=\"595146\">@Christoph Brewing</span> would you be able to make a small repo showcasing a repro?</p>",
        "id": 404679112,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701191030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> Good idea. I will try to repeat the problem with an isolated toy example. Give time me until tomorrow.</p>",
        "id": 404703467,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1701199731
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <br>\nI was able to isolate the problem without a standalone example: <br>\nWhen crafting the Python bindings, <code>python -m wasmtime.bindgen the-component.wasm --out-dir the-bindings</code>, among other things, a file is generated which closely mimics my component. The name of the file usually is <strong>root.core0.wasm</strong>. </p>\n<p>Executing the Python host with this file works. Executing the Python host <strong>based on the original component fails</strong>. I also observe that the sizes of both files slightly differ. My original component is 27.755 KB of size where root.core0.wasm is 27.751 KB of size.</p>\n<p>My original assumption was that the Python bindings generator merely copies and rename my component. Yet, it seems to modify it. The anticipated use-case is to have many wasm components (all sharing the same interface) which can be instantiated based on a respective configuration. </p>\n<p>Is that a stable behavior? I mean, will it be this way for long? Does it even have to be that way? I am sure that, in the past, I just called the Python bindings with the (original) component.</p>",
        "id": 404812183,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1701247081
    },
    {
        "content": "<p>Ah ok you're running into expected behavior for the Python generator right now. The input component has a different binary format than the <code>root.N.wasm</code> file which is a core wasm module. The <code>root.N.wasm</code> was originally present inside of the source component and takes up the majority of the space as you've seen, but they're not the same and aren't intended to be the same.</p>\n<p>At this time Python bindings only work with the single component that was provided as input. You can't, at runtime, supply a component without rerunning bindinge. Supporting that style of embedding would require implementing support for the component model in Wasmtime's C API and then binding that in Python.</p>",
        "id": 404903002,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701274782
    },
    {
        "content": "<p>good to know, thanks! Is that on the general path, I mean, implementing support for the component model in Wasmtime's C API and the corresponding Python bindings?</p>",
        "id": 405094937,
        "sender_full_name": "Christoph Brewing",
        "timestamp": 1701342885
    },
    {
        "content": "<p>I'd love to see someone update <code>wasmtime-py</code> to support resources and arbitrarily-composed components, which would presumably require extending Wasmtime's C API (although using the Rust API via <a href=\"https://pyo3.rs\">Py03</a> might also be an option).  I'm not volunteering for it, though, and I don't think anyone else has, either.</p>",
        "id": 405135483,
        "sender_full_name": "Joel Dice",
        "timestamp": 1701356330
    },
    {
        "content": "<p>Yes integrating the component model with the C API is desired and there was discussion a day or so about it <a href=\"#narrow/stream/217126-wasmtime/topic/Component.20Model.20C-API/near/403504952\">here</a></p>",
        "id": 405145986,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1701359407
    }
]