[
    {
        "content": "<p>Hi.  Is there any sort of guarantee that serialized modules from previous versions of Wasmtime will be deserializable in future versions?  I am updating my product's embedded version of Wasmtime to the latest in <code>main</code> (3.0.0) and noticed that there has been a breaking change in the serialization format (the old <code>HEADER</code> value is no longer present).  I'm a little confused about what assumptions to make around this.</p>\n<p>In the Wasmtime code, I see:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">match</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">config</span><span class=\"p\">().</span><span class=\"n\">module_version</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ModuleVersionStrategy</span>::<span class=\"n\">WasmtimeVersion</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"kt\">str</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"fm\">env!</span><span class=\"p\">(</span><span class=\"s\">\"CARGO_PKG_VERSION\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"s\">\"Module was compiled with incompatible Wasmtime version '{}'\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ModuleVersionStrategy</span>::<span class=\"n\">Custom</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"kt\">str</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">version</span><span class=\"p\">)</span><span class=\"o\">?</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">version</span><span class=\"w\"> </span><span class=\"o\">!=</span><span class=\"w\"> </span><span class=\"n\">v</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"n\">bail</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"s\">\"Module was compiled with incompatible version '{}'\"</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"n\">version</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">ModuleVersionStrategy</span>::<span class=\"nb\">None</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"cm\">/* ignore the version info, accept all */</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>This seems to indicate that, by default, Wasmtime will not deserialize modules that came from a previous version.  However, it also seems that it is allowable to set the ModuleVersionStrategy to <code>None</code>, which overrides this.</p>\n<p>The use case is that, for efficiency, I pre-compile and persist the serialized version of each module so that it can be instantiated as quickly as possible when requested again.  However, in future versions of our product, we plan to upgrade Wasmtime, and  new versions would ideally need to be able to deserialize modules that were created from before.</p>",
        "id": 311665645,
        "sender_full_name": "Pete Vetere",
        "timestamp": 1669136907
    },
    {
        "content": "<p>Wasmtime's AOT artifacts are only usable by the exact release of Wasmtime, and the <code>ModuleVersionStrategy</code> is an escape hatch where \"if you know what you're doing\" you can subvert that if necessary</p>",
        "id": 311666328,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669137110
    },
    {
        "content": "<p>by default though 3.0.0 artifacts are only consumable by 3.0.0, nothing else</p>",
        "id": 311666363,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669137121
    },
    {
        "content": "<p>Thanks, Alex.  In that case, is there some way to \"decompile\" an AOT artifact back to a .wasm file?</p>",
        "id": 311672694,
        "sender_full_name": "Pete Vetere",
        "timestamp": 1669139095
    },
    {
        "content": "<p>I'm pretty confident there is not</p>",
        "id": 311673895,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669139494
    },
    {
        "content": "<p>Correct, there is no way of doing that</p>",
        "id": 311676117,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669140086
    },
    {
        "content": "<p>what Fastly does is to save the wasm modules and then each time a new version of wasmtime is built-in it recompiles the wasm mdoules</p>",
        "id": 311676285,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1669140128
    },
    {
        "content": "<p>Ok, thank you!</p>",
        "id": 311692928,
        "sender_full_name": "Pete Vetere",
        "timestamp": 1669145570
    }
]