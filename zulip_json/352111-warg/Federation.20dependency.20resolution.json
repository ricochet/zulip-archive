[
    {
        "content": "<ul>\n<li>Registry \"BA\" has packages <code>wasi:http</code> and <code>wasi:core</code><ul>\n<li><code>wasi:http@1.0.0</code> contains an unlocked import dep on <code>wasi:core@1.0.0</code></li>\n</ul>\n</li>\n<li>Registry \"Fermyon\" mirrors package <code>wasi:http</code> from registry BA, naming it <code>ba:wasi:http</code></li>\n<li>Fermyon also has a package <code>wasi:core</code> which <strong>may or may not</strong> be mirrored from BA.</li>\n<li>A client fetches <code>ba:wasi:http@1.0.0</code> from Fermyon. Should the unlocked dependency resolve to Fermyon's <code>wasi:core</code> or BA's <code>wasi:core</code>?</li>\n</ul>",
        "id": 394908719,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696449801
    },
    {
        "content": "<p>It seems like the answer has to include \"Fermyon\" at least as some kind of opt-in choice (if not the default or only option)  in order to capture some of the use-cases we are going for.</p>",
        "id": 394908959,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696449919
    },
    {
        "content": "<p>but you also would clearly want an option for Fermyon to mirror BA's <code>wasi:core</code> as <code>ba:wasi:core</code> and somehow signal to the client that it should use that to resolve <code>wasi:http@1.0.0</code>'s dep on <code>wasi:core</code> (as we discussed in the meeting)</p>",
        "id": 394910120,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696450478
    },
    {
        "content": "<p>Perhaps, the default behavior would be... <code>ba:wasi:http</code> originates from Registry \"BA\" and carries the context of that Registry which would resolve imports in the context of the source Registry. But if a package <code>fermyon:http</code> (published to \"Fermyon\" registry) imports <code>wasi:core</code> it would be resolve in the context of the \"Fermyon\" registry. How does that feel?</p>",
        "id": 394910488,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696450683
    },
    {
        "content": "<p>Thinking about how that would be implemented, the implication is that a registry can instruct a client to remap any unlocked dependency to any other package, right?</p>",
        "id": 394910731,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696450807
    },
    {
        "content": "<p>I was thinking the re-mapping would only be to make it possible for name conflicts to be resolved for packages published to its own registry. Not re-mapping other registries' packages imports to different ones and creating different binaries.</p>",
        "id": 394911139,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451026
    },
    {
        "content": "<p>You could override that behavior in the CLI and remap things as you see fit. But I was thinking for Registry default behavior instructing the client.</p>",
        "id": 394911283,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451083
    },
    {
        "content": "<p>I'm not certain about this. But how I was thinking about it, at the moment.</p>",
        "id": 394911355,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451128
    },
    {
        "content": "<p>OK, so this server-side mapping would be something like \"everything named <code>ba:X</code> is mirrored from BA <code>X</code> and any dependencies you see from a <code>ba:*</code> package should be remapped to <code>ba:</code>\"?</p>",
        "id": 394911828,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696451355
    },
    {
        "content": "<p>There are trade-offs. If registry federating and re-mapping doesn't change how packages sourced from other registries resolve and compile, that might be a good thing.</p>",
        "id": 394911851,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451364
    },
    {
        "content": "<p>If that is what we're shooting for then I think we probably <em>do</em> need a \"namespace mapping\" log to maintain our transparency security model</p>",
        "id": 394912404,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696451583
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/352111-warg/topic/Federation.20dependency.20resolution/near/394911828\">said</a>:</p>\n<blockquote>\n<p>OK, so this server-side mapping would be something like \"everything named <code>ba:X</code> is mirrored from BA <code>X</code> and any dependencies you see from a <code>ba:*</code> package should be remapped to <code>ba:</code>\"?</p>\n</blockquote>\n<p>In this registry,<code>ba</code> namespace is for <code>registry.bytecodealliance.org</code> packages that also use <code>ba</code> namespace. For packages originating from that <code>ba</code> source registry, they would resolve just as if that was the registry you were talking to.</p>",
        "id": 394912626,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451700
    },
    {
        "content": "<p>They would carry the context of the source registry.</p>",
        "id": 394912684,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451728
    },
    {
        "content": "<p>So the re-mapping is really only for resolving name conflicts and disambiguating imports for packages published to your registry.</p>",
        "id": 394912928,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451841
    },
    {
        "content": "<p>And not changing the behavior of imported packages and how they resolve their imports.</p>",
        "id": 394913092,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451901
    },
    {
        "content": "<p>That's how I was thinking about it. But again, I'm not certain.</p>",
        "id": 394913145,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696451932
    },
    {
        "content": "<p>Thinking that through, if your registry changes the mappings, the packages in your registry could change behavior. That does suggest that this should be a verifiable log.</p>",
        "id": 394913420,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696452056
    },
    {
        "content": "<p>Do you think the registry should be able to change the behavior of how other registries' packages resolve their imports? Through importing it to your registry. Or just have that capability explicitly done in the CLI with remapping client-side?</p>",
        "id": 394913831,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696452271
    },
    {
        "content": "<p>I guess that is a fundamental question about what we mean by \"mirroring\"</p>",
        "id": 394914288,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696452488
    },
    {
        "content": "<p>Suppose it could also be an option that the registry specifies how the client should resolve imports from packages sourced from another registry. But not sure if we want that or not.</p>",
        "id": 394914482,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696452605
    },
    {
        "content": "<p>Thus far, I was not listing re-mapping other registries' package imports to new ones as a use case for federation. But it may be one. I'm not sure if that is desired behavior or not.</p>",
        "id": 394914974,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696452865
    },
    {
        "content": "<p>Well, we don't have any way to ensure namespace uniqueness between registries. We either need a way to remap or we need to declare that you're just out of luck if you end up with a conflict <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 394915091,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696452930
    },
    {
        "content": "<p>I suspect there are also reasons to <em>intentionally</em> shadow another registry's namespace(s) too</p>",
        "id": 394915227,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696452992
    },
    {
        "content": "<p>Yeah, it a mechanism of control. I could imagine it could be useful.</p>",
        "id": 394915346,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696453064
    },
    {
        "content": "<p>I'm also not sure what feature we are providing to users by telling them that we are mirroring another registry, if not to do that kind of remapping.</p>",
        "id": 394915535,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696453147
    },
    {
        "content": "<p>Without remapping, you have could have following other benefits: privacy of network activity, increased availability through replication/caching, data locality by having the API/Content local within a datacenter or network, and implementing access control policies.</p>",
        "id": 394916104,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696453431
    },
    {
        "content": "<p>But also, you'd really be talking to your \"home\" registry. Having mirroring simplifies the dev experience of accessing packages from across other registries.</p>",
        "id": 394916433,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696453605
    },
    {
        "content": "<p>I could see remapping as something that might be useful. But not the primary motivator.</p>",
        "id": 394916494,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696453641
    },
    {
        "content": "<p>Sure but we don't need any new features to do \"transparent mirroring\"; a registry can just periodically sync upstream logs</p>",
        "id": 394916579,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696453682
    },
    {
        "content": "<p>Not sure I follow that last statement about not needing any new features. Can you elaborate?</p>",
        "id": 394916713,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696453763
    },
    {
        "content": "<p>I mean protocol features</p>",
        "id": 394916815,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696453805
    },
    {
        "content": "<p>The mirroring server would still need to learn to sync</p>",
        "id": 394916847,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696453826
    },
    {
        "content": "<p>You mean there wouldn't need to any changes to the logs and protobufs. Just API changes and server/client changes. Correct?</p>",
        "id": 394916922,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696453878
    },
    {
        "content": "<p>Not even API changes necessarily; a mirroring server could use the existing API</p>",
        "id": 394916970,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696453912
    },
    {
        "content": "<p>Might want some sort of \"bulk fetch\" in practice but not necessary at current scales</p>",
        "id": 394917039,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696453936
    },
    {
        "content": "<p>I think we need to communicate to the client the mapping of namespaces to which registry. And have the client communicate what registry it wants to request data from, sort of a proxy.</p>",
        "id": 394917210,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454035
    },
    {
        "content": "<p>There are a few options on the API changes.</p>",
        "id": 394917437,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454156
    },
    {
        "content": "<p>hmm yeah if you wanted client-initiated lazy mirroring then you'd need another endpoint</p>",
        "id": 394917523,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696454201
    },
    {
        "content": "<p>that seems like it could be an entirely different API surface tho; it would only be applicable to certain kinds of registries</p>",
        "id": 394917554,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696454222
    },
    {
        "content": "<p>Do you think we would need a verifiable log for the namespace mapping to which source registry?</p>",
        "id": 394917558,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454224
    },
    {
        "content": "<p>Kyle suggested largely keeping the current API and adding an HTTP Header in the request which specified which registry domain you were talking about.</p>",
        "id": 394917621,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454270
    },
    {
        "content": "<p>well, so apart from the \"please mirror that registry\" API, would this mirroring registry need to indicate that its doing any of this mirroring to clients?</p>",
        "id": 394917622,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696454270
    },
    {
        "content": "<p>The registry would need to indicate to the client if it is aware of a namespace and can fulfill the requests for its packages.</p>",
        "id": 394917821,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454357
    },
    {
        "content": "<p>I feel like I'm missing something implicit in this proposal; would the mirror registry include mirrored package logs in its transparency log?</p>",
        "id": 394918379,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696454670
    },
    {
        "content": "<p>Trying to avoid that, if we can. The client would request the operator and package logs and proof bundles for each registry mirror, but asking for those through the home registry that is mirroring those registries.</p>",
        "id": 394918723,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454845
    },
    {
        "content": "<p>That could either be done as separate HTTP requests in parallel (with an HTTP header indicating the registry) or changing the API to do it in a single request.</p>",
        "id": 394918764,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454875
    },
    {
        "content": "<p>I'm curious how that feels to you and if you see issues.</p>",
        "id": 394918888,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696454935
    },
    {
        "content": "<p>hmm ok so lets split that up into two parts:</p>",
        "id": 394919185,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455066
    },
    {
        "content": "<p>ignoring mirroring for a moment, a registry could say \"namespace X is actually managed by the BA registry\"</p>",
        "id": 394919248,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455106
    },
    {
        "content": "<p>a redirect, more or less</p>",
        "id": 394919261,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455116
    },
    {
        "content": "<p>Yeah, redirect/proxy</p>",
        "id": 394919312,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455128
    },
    {
        "content": "<p>in the just-redirecting world, if the registry had its own package that pointed into that namespace, the client would see the redirect and fetch from the other registry</p>",
        "id": 394919594,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455288
    },
    {
        "content": "<p>layered on top of that is this warg-flavored \"caching proxy\", which semantically is the same as talking to the other registry</p>",
        "id": 394919678,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455340
    },
    {
        "content": "<p>Yeah</p>",
        "id": 394919701,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455356
    },
    {
        "content": "<p>can these be framed as two orthogonal features? I can see them being useful in different combinations</p>",
        "id": 394919816,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455412
    },
    {
        "content": "<p>By two features, do you mean redirect and caching being two different features?</p>",
        "id": 394919924,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455470
    },
    {
        "content": "<p>yeah, \"namespace X actually means registry Y\" and \"I can proxy registry Y for you\"</p>",
        "id": 394919996,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455501
    },
    {
        "content": "<p>I can easily imagine just wanting the proxy, or want to deploy the proxy and the registry-with-redirects separately</p>",
        "id": 394920092,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455585
    },
    {
        "content": "<p>Yeah, I think it is easy to think of them as different features if we go the route with using an HTTP header and keeping the API largely the same.</p>",
        "id": 394920172,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455608
    },
    {
        "content": "<p>By redirect, do you mean an HTTP redirect or a mapping a namespace to a Registry?</p>",
        "id": 394920213,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455632
    },
    {
        "content": "<p>I wasn't thinking of using HTTP redirects</p>",
        "id": 394920335,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455692
    },
    {
        "content": "<p>I'm not sure if it would be an http redirect per se (though it would be nice if it could somehow be that simple)</p>",
        "id": 394920341,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455695
    },
    {
        "content": "<p>but a \"warg redirect\"</p>",
        "id": 394920353,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455701
    },
    {
        "content": "<p>Yeah, conceptually a redirect.</p>",
        "id": 394920392,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455721
    },
    {
        "content": "<p>splitting them up also hopefully makes it easier to understand the security implications</p>",
        "id": 394920456,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455742
    },
    {
        "content": "<p>like I can pretty easily see how the proxy part can be done securely</p>",
        "id": 394920546,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455785
    },
    {
        "content": "<p>without really changing much fundamentally</p>",
        "id": 394920571,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696455802
    },
    {
        "content": "<p>Yeah, and the HTTP header specifying the Registry domain has a simplicity to it.</p>",
        "id": 394920604,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696455832
    },
    {
        "content": "<p>I suppose another benefit of thinking of it as two different features is that client may chose its own mappings and want to proxy the requests through its home Registry. That was related to the question that I asked today on where the mapping should live for namespaces to which Registry. Client-side or server-side. Doesn't need to be exclusive to one or the other.</p>",
        "id": 394920935,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696456009
    },
    {
        "content": "<p>It sounds like the proxy feature is OK by you? And we are still figuring out the mapping feature?</p>",
        "id": 394921089,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696456107
    },
    {
        "content": "<p>yep</p>",
        "id": 394921126,
        "sender_full_name": "Lann Martin",
        "timestamp": 1696456134
    },
    {
        "content": "<p>That gets us most of the way there. I think.</p>",
        "id": 394921204,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1696456186
    }
]