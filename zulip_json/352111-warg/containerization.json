[
    {
        "content": "<p>Hi everyone, as mentioned a bit in the meeting, I have been looking to get involved helping out initially with general topic of containerization / running nicely in different cloud environments. Will have a relatively simple PR soon that sets up a Dockerfile / Docker Compose which should be helpful for both dev/testing now, and prod environments later. Will post updates here about it and any other follow up PRs.</p>",
        "id": 352927917,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1682536405
    },
    {
        "content": "<p>Initial containerization attempt: <a href=\"https://github.com/bytecodealliance/registry/pull/96\">https://github.com/bytecodealliance/registry/pull/96</a>. <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>, it is set up with postgres and has placeholders for running a database migration.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/registry/pull/96\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/95e4470132ce0b167e484f8c00e94d34cb18a66b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336135613063396362343366316238656363323736636337623837363030353435343566626438303638353835623739636463323862336131663637353435332f62797465636f6465616c6c69616e63652f72656769737472792f70756c6c2f3936)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/registry/pull/96\" title=\"Create initial containerization by kriswuollett · Pull Request #96 · bytecodealliance/registry\">Create initial containerization by kriswuollett · Pull Request #96 · bytecodealliance/registry</a></div><div class=\"message_embed_description\">created Dockerfile and Docker Copmose files to cover server, client, and potential utilities like database migration package\nadded local-infra.sh script to act as both documentation and ease of use...</div></div></div>",
        "id": 352988257,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1682553074
    },
    {
        "content": "<p>As mentioned during wg meeting, I'm nearing completion on creating a PR to optionally add health check endpoints to the server. Since I'm new to Rust, I'm not sure if it was intended or not, but the server partially moves itself during the run method because items in its config member gets moved? Which leads me to follow ups: 1) should config just be used as a parameter object for new, or 2) should things in server/config be \"taken\" out of optional or made copies when needed like for address for binding? I came across it since I wasn't able to refer to itself since partially moved when optionally adding another listener setup like the existing code.</p>",
        "id": 357584598,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1683811347
    },
    {
        "content": "<p>Or perhaps that is when I was playing with the code and had changed &amp;mut self to &amp;self if no reason to move the listeners to self.</p>",
        "id": 357586789,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1683811812
    },
    {
        "content": "<p>Is there a reason the health check isn't added into the server next to the other APIs using the patterns they do to get access to what they need?</p>",
        "id": 357592106,
        "sender_full_name": "Robin Brown",
        "timestamp": 1683812835
    },
    {
        "content": "<p>I can make it work, I'm just wondering if partially moving self is intended. Although contrived, doesn't that mean a server could only be \"run once\".</p>",
        "id": 357595297,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1683813457
    },
    {
        "content": "<p>once you call run on a server the server variable isn't usable anymore that is?</p>",
        "id": 357595612,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1683813512
    },
    {
        "content": "<p>Yes, it is intended</p>",
        "id": 357598277,
        "sender_full_name": "Lann Martin",
        "timestamp": 1683814045
    },
    {
        "content": "<p>I don't think it matters for the registry server at this moment, but enforcing that a server can only be run once is <em>great</em>: it means you never have to worry about someone trying to do that, so you don't have to care about the state of the server after shutdown</p>",
        "id": 357598588,
        "sender_full_name": "Lann Martin",
        "timestamp": 1683814104
    },
    {
        "content": "<p>Actually it probably does matter because of how <code>listener</code> is managed</p>",
        "id": 357599743,
        "sender_full_name": "Lann Martin",
        "timestamp": 1683814247
    },
    {
        "content": "<p>ok. well i'll get the PR up soon that will probably have to change the listener storage thing</p>",
        "id": 357604259,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1683815024
    },
    {
        "content": "<p>Basic health checks / lifecycle draft PR posted: <a href=\"https://github.com/bytecodealliance/registry/pull/111\">https://github.com/bytecodealliance/registry/pull/111</a>. I could possibly split it into separate server listener refactor and health check PRs. Still need to verify health check endpoints work as expected and maybe add tests, but would be good to see if this refactoring approach is appropriate.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/registry/pull/111\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b81b8dcc75d2ed54317d826d74284f0ceef033a3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383765373534356566303666346539353863313563353038336537306336386234666564616134343332323464633832656136636264656537373161613736352f62797465636f6465616c6c69616e63652f72656769737472792f70756c6c2f313131)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/registry/pull/111\" title=\"Add lifecycle management with optional health check endpoints by kriswuollett · Pull Request #111 · bytecodealliance/registry\">Add lifecycle management with optional health check endpoints by kriswuollett · Pull Request #111 · bytecodealliance/registry</a></div><div class=\"message_embed_description\">progress on #81\nrefactors server bind/run methods into start/join in order to return endpoint socket addresses from start for testing\nhealth checks if enabled can optionally be bound to another por...</div></div></div>",
        "id": 357706359,
        "sender_full_name": "Kristopher Wuollett",
        "timestamp": 1683842788
    }
]