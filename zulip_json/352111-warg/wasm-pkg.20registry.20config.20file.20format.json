[
    {
        "content": "<p>I have <a href=\"https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files\">a draft PR</a>  up reworking the ad-hoc config file introduced by <code>wasm-pkg-loader</code> into a new <code>wasm-pkg-common</code> crate (along with some common packaging-related types).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cb3aec753b2237d19e48c7c442524e9ecbadccd6/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3234353733343f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files\" title=\"Add wasm-pkg-common crate by lann · Pull Request #25 · bytecodealliance/wasm-pkg-tools\">Add wasm-pkg-common crate by lann · Pull Request #25 · bytecodealliance/wasm-pkg-tools</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/wasm-pkg-tools development by creating an account on GitHub.</div></div></div>",
        "id": 441037991,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716902097
    },
    {
        "content": "<p>tldr:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Override default registry</span>\n<span class=\"n\">default_registry</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bytecodealliance.org\"</span><span class=\"w\"> </span><span class=\"c1\"># this is the hard-coded default</span>\n\n<span class=\"k\">[package_registries]</span>\n<span class=\"c1\"># Namespace prefix mapping is made more explicit with wildcard syntax</span>\n<span class=\"s2\">\"wasi:*\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wasi.dev\"</span>\n<span class=\"c1\"># Allow mapping individual packages too</span>\n<span class=\"s2\">\"example:foo\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"example.com\"</span>\n\n<span class=\"k\">[registry.</span><span class=\"s2\">\"bytecodealliance.org\"</span><span class=\"k\">]</span>\n<span class=\"c1\"># Optional backend type will override automatic detection (`.well-known/wasm-pkg/registry.json`)</span>\n<span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"warg\"</span>\n\n<span class=\"c1\"># Backend-specific config is opaque to the wasm-pkg-common crate; individual \"sources\" will parse these</span>\n<span class=\"k\">[registry.</span><span class=\"s2\">\"wasi.dev\"</span><span class=\"k\">.oci]</span>\n<span class=\"n\">url</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://private-registry.example.com\"</span>\n<span class=\"n\">auth</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">username</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"open\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">password</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"sesame\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Alternative syntax with inline backend config table</span>\n<span class=\"k\">[registry.</span><span class=\"s2\">\"wa.dev\"</span><span class=\"k\">]</span>\n<span class=\"c1\"># type = \"warg\" &lt;- implicit due to well-known config</span>\n<span class=\"n\">warg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">auth_token</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"top_secret\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n</code></pre></div>",
        "id": 441039191,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716902449
    },
    {
        "content": "<p>I don't think allowing or encouraging inline passwords/secrets is a good idea</p>",
        "id": 441045385,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716904259
    },
    {
        "content": "<p>Eh yeah that isn't really part of the change just the first thing I came up with for the example</p>",
        "id": 441046365,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716904551
    },
    {
        "content": "<blockquote>\n<p><code>Backend-specific config is opaque to the wasm-pkg-common crate; individual \"sources\" will parse these</code></p>\n</blockquote>\n<p>I haven't actually integrated this part yet, which would produce more realistic examples</p>",
        "id": 441047161,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716904749
    },
    {
        "content": "<p>Mostly interested in initial feedback on the top-level structure: <code>[package_registries]</code> and <code>[registries.&lt;name&gt;.&lt;backend&gt;]</code>. We'll probably be stuck with at least backward-compat code for whatever we land on for a while.</p>",
        "id": 441048789,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716905198
    },
    {
        "content": "<p>Ya, I'm still thinking about the <code>[package_registries]</code> bit.</p>",
        "id": 441049623,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716905421
    },
    {
        "content": "<p>I think it's good to offer people the tools to have local registry mappings, but the more we encourage people to do so, the more likely it is that when they go to push something its dependencies aren't compatible with the registry it's being published to in a way that breaks resolving</p>",
        "id": 441049825,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716905476
    },
    {
        "content": "<p>I agree that it doesn't make a lot of sense at the global level, but I think its probably a requirement at the workspace level.</p>",
        "id": 441050621,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716905745
    },
    {
        "content": "<p>Implicit here is the idea that this config file format would also apply to workspaces (e.g. <code>./.wasm-pkg/config.toml</code>)</p>",
        "id": 441050825,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716905803
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files#diff-6c0858bfb1633845930b97569b9f9dd27862be071a56ea31cc00025a55094fe6R54-R62\">https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files#diff-6c0858bfb1633845930b97569b9f9dd27862be071a56ea31cc00025a55094fe6R54-R62</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files#diff-6c0858bfb1633845930b97569b9f9dd27862be071a56ea31cc00025a55094fe6R54-R62\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/cb3aec753b2237d19e48c7c442524e9ecbadccd6/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3234353733343f733d34303026763d34&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-pkg-tools/pull/25/files#diff-6c0858bfb1633845930b97569b9f9dd27862be071a56ea31cc00025a55094fe6R54-R62\" title=\"Add wasm-pkg-common crate by lann · Pull Request #25 · bytecodealliance/wasm-pkg-tools\">Add wasm-pkg-common crate by lann · Pull Request #25 · bytecodealliance/wasm-pkg-tools</a></div><div class=\"message_embed_description\">I want to solidify a config format as at least a medium-term compatibility guarantee; we can always introduce a config file versioning scheme for revisions later if needed, but its nice to avoid to...</div></div></div>",
        "id": 441051230,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716905939
    },
    {
        "content": "<p>Sure, the risk of making packages that aren't valid in your home registry is still present though.</p>",
        "id": 441063770,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716909812
    },
    {
        "content": "<p>I'm not sure about the granularity here, does it make sense to make all mappings package-level and offer wildcards? I'd be tempted to let people only configure whole namespaces initially.</p>",
        "id": 441063985,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716909878
    },
    {
        "content": "<p>In that same vein, what do you think about making this initial version rather minimal and expand as we have use cases / requests for things?</p>",
        "id": 441064051,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716909905
    },
    {
        "content": "<p>Also, as an aside: I'd be interested in a workspace-level config that says \"don't use any defaults from anywhere else everything must be specified here\" that projects interested in high amounts of reproducibility can turn on.</p>",
        "id": 441064190,
        "sender_full_name": "Robin Brown",
        "timestamp": 1716909953
    },
    {
        "content": "<p>Admittedly the feature is currently driven by the very simple need to be able to override the registry for the root component, but I do think that the ability to patch single dependencies is too useful to ignore.</p>",
        "id": 441064352,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716909993
    },
    {
        "content": "<p>If you patch in an incompatible component then composition will (hopefully/usually) fail, right?</p>",
        "id": 441064697,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716910112
    },
    {
        "content": "<p>I guess an open question is whether a single overridden component's own dependencies would then be taken from that registry? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 441064968,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716910200
    },
    {
        "content": "<p>actually that question applies equally to namespace overrides</p>",
        "id": 441065040,
        "sender_full_name": "Lann Martin",
        "timestamp": 1716910210
    },
    {
        "content": "<p>Updated PR based on feedback:</p>\n<div class=\"codehilite\" data-code-language=\"TOML\"><pre><span></span><code><span class=\"c1\"># Override default registry</span>\n<span class=\"n\">default_registry</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"bytecodealliance.org\"</span><span class=\"w\"> </span><span class=\"c1\"># this is the hard-coded default</span>\n\n<span class=\"k\">[namespace_registries]</span>\n<span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"wasi.dev\"</span>\n\n<span class=\"k\">[package_registry_overrides]</span>\n<span class=\"s2\">\"example:foo\"</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"example.com\"</span>\n\n<span class=\"k\">[registry.</span><span class=\"s2\">\"bytecodealliance.org\"</span><span class=\"k\">]</span>\n<span class=\"c1\"># Optional backend type will override automatic detection (`.well-known/wasm-pkg/registry.json`)</span>\n<span class=\"n\">type</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"warg\"</span>\n<span class=\"n\">warg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">url</span><span class=\"w\"> </span><span class=\"p\">=</span><span class=\"w\"> </span><span class=\"s2\">\"https://warg.example.com\"</span><span class=\"w\"> </span><span class=\"p\">}</span>\n\n<span class=\"c1\"># Backend-specific config is opaque to the wasm-pkg-common crate; individual \"sources\" will parse these</span>\n<span class=\"k\">[registry.</span><span class=\"s2\">\"wasi.dev\"</span><span class=\"k\">.oci]</span>\n<span class=\"n\">registry</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s2\">\"private-registry.example.com\"</span>\n</code></pre></div>",
        "id": 441308878,
        "sender_full_name": "Lann Martin",
        "timestamp": 1717013738
    }
]