[
    {
        "content": "<p>Ok so been toying around with some things.  I'm curious if this following makes sense or if I need to think about this stuff a bit more first.  Let's say we have component A:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">locked</span><span class=\"w\"> </span><span class=\"s\">\"foo:base@1.0.0\"</span><span class=\"w\"> </span><span class=\"n\">integrity</span><span class=\"w\"> </span><span class=\"s\">\"as;ldfkj\"</span><span class=\"p\">)(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>And the package <code>foo:base</code> in the registry has the following definition:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"cp\">$numbers</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span>\n<span class=\"w\">      </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"cp\">$firstInstance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"cp\">$numbers</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"left\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"right\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"adder\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>Is it incredibly naive to just fetch all component defs from the registry and then insert those definitions in the top level of Component A and finally replace import statements with aliases to the top level definitions?</p>",
        "id": 376773218,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689795464
    },
    {
        "content": "<p>essentially the operation on fetched imports would be more of a \"bundling\" than a composition or a linking</p>",
        "id": 376777400,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689796584
    },
    {
        "content": "<p>imports are resolved when the component is instantiated, which would happen in a new top level \"linking\" component</p>",
        "id": 376783160,
        "sender_full_name": "Lann Martin",
        "timestamp": 1689798220
    },
    {
        "content": "<p>So say we've got a chain of n components.  I guess they'd all be dropped into the top level \"linking\" component, and then instantiated and fed in from the bottom component nodes in the dep tree up to the component doing the top level imports</p>",
        "id": 376788121,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689799876
    },
    {
        "content": "<p>Yeah so if you have package deps A-&gt;B-&gt;C, then the new root component would do something like (pseudo-code):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"p\">()</span>\n<span class=\"n\">b</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">B</span><span class=\"p\">(</span><span class=\"n\">c</span>: <span class=\"nc\">c</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">A</span><span class=\"p\">(</span><span class=\"n\">b</span>: <span class=\"nc\">b</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">some</span><span class=\"w\"> </span><span class=\"n\">stuff</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">probably</span><span class=\"o\">&gt;</span>\n</code></pre></div>",
        "id": 376789615,
        "sender_full_name": "Lann Martin",
        "timestamp": 1689800399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"269506\">@Brian</span> has been working on a \"linker script\" that looks a bit like <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 376790464,
        "sender_full_name": "Lann Martin",
        "timestamp": 1689800661
    },
    {
        "content": "<p>(or did, the last I saw)</p>",
        "id": 376790484,
        "sender_full_name": "Lann Martin",
        "timestamp": 1689800667
    },
    {
        "content": "<p>Ah makes sense.  Think I see the path forward for now</p>",
        "id": 376791902,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689801149
    },
    {
        "content": "<p>Alright so i wrote a script that imports <code>wasm-compose</code> and based on import statements, composes components in the warg cache.  The above example generated the following wat file</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"left\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"right\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">unlocked</span><span class=\"w\"> </span><span class=\"s\">\"foo:add/bar\"</span><span class=\"w\"> </span><span class=\"n\">range</span><span class=\"w\"> </span><span class=\"s\">\"^1.0.0\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"adder\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"cp\">$numbers</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">        </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">add</span>\n<span class=\"w\">      </span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"cp\">$firstInstance</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"cp\">$numbers</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"cp\">$firstInstance</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"left\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"right\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"numby\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"s\">\"numby\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"s\">\"foo:add/bar\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"numby\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span><span class=\"err\">```</span>\n</code></pre></div>",
        "id": 377120379,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689890203
    },
    {
        "content": "<p>hopefully will be easy to get jco to use my branch of wasm-tools to allow the impl import syntax and maybe we can execute the result of doing a registry install</p>",
        "id": 377121238,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689890552
    },
    {
        "content": "<p>and it wasn't awful to get jco to execute it... just had to link a local version of wasmtime and wit-bindgen each of which used my branch of wasm-tools.  so anyways, i think we can make transitive dep trees now and do an install which composes all of the deps into one binary.  just need to generalize a few hardcoded things so that it's dynamic and works outside of the example i'm creating right now.</p>",
        "id": 377356091,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1689956348
    },
    {
        "content": "<p>Considering how to further iterate on this... I'm thinking perhaps implementation imports should be added in the component index so that that way they can be instantiated and utilized in the component that is doing the importing.</p>",
        "id": 378216737,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1690218638
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">locked</span><span class=\"w\"> </span><span class=\"s\">\"foo:base@1.0.0\"</span><span class=\"w\"> </span><span class=\"n\">integrity</span><span class=\"w\"> </span><span class=\"s\">\"as;ldfkj\"</span><span class=\"p\">)(</span><span class=\"n\">func</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">things</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">exports</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 378217015,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1690218707
    },
    {
        "content": "<p>Is the component index here the registries index of components? or do you mean the index space within components?</p>",
        "id": 378217785,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690218879
    },
    {
        "content": "<p>The latter</p>",
        "id": 378217893,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1690218915
    },
    {
        "content": "<p>And just to be clear, by implementation imports do you mean component or instance imports?</p>",
        "id": 378218291,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690218992
    },
    {
        "content": "<p>By implementation import i mean imports using the syntax proposed here <a href=\"https://github.com/WebAssembly/component-model/compare/main...add-impl-imports\">https://github.com/WebAssembly/component-model/compare/main...add-impl-imports</a>.  In my head I've been thinking of these exclusively as component imports, rather than instance imports</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/compare/main...add-impl-imports\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/286e0531672c105c79e5acfda33f70ae1be78575\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353039623163666132353537323734383261363266626130333536306630326463346535613630383636306632366635333336343831666539303661653139382f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/compare/main...add-impl-imports\" title=\"Comparing main...add-impl-imports · WebAssembly/component-model\">Comparing main...add-impl-imports · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - Comparing main...add-impl-imports · WebAssembly/component-model</div></div></div>",
        "id": 378219136,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1690219166
    },
    {
        "content": "<p>I think most of the times components import each other, they'll want to import some instance and not a specific component that they decide internally how to instantiate. This is what enables us to de-duplicate imports by providing the same instance to instance imports whereas if two components did their own instantiation (which is reasonable sometimes) we can't do that.</p>",
        "id": 378220710,
        "sender_full_name": "Robin Brown",
        "timestamp": 1690219500
    }
]