[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> (and anyone else): I finally got around to writing up a draft proposal for \"split wasm\". The biggest open questions for me are how to handle data segments, including whether we want to split all of them or just passives: <a href=\"https://hackmd.io/@lann/HJ_f7geai\">https://hackmd.io/@lann/HJ_f7geai</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/@lann/HJ_f7geai\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/be5883ebc78216e6d97b1f14ef5fbbb5049814a8\\/68747470733a2f2f7777772e67726176617461722e636f6d2f6176617461722f35386537303761353133356136613738313666373336386266643564396134663f733d343030)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/@lann/HJ_f7geai\" title=\"Wasm split - HackMD\">Wasm split - HackMD</a></div><div class=\"message_embed_description\"># Wasm split  :::info Since this is largely about size efficiency we will only define this splitting</div></div></div>",
        "id": 327093888,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676046532
    },
    {
        "content": "<p>I'll look it over on Monday as Fastly has the day off today.</p>",
        "id": 327118121,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676053301
    },
    {
        "content": "<p>This looks great, thanks for writing it up! Regarding the active/passive segments open question, I think we can split the whole section as one for now.</p>\n<p>The active segments would come from the code that virtualizes the file system, while, in theory, the passive segments are from the files being virtualized. So it would mean a change to the \"virtualizer\" would mean a new hash of the section even if the files being virtualized don't change, but I would assume that would happen fairly frequently and might even be desired if the virtualizer code changes how it interprets the passive segments.</p>",
        "id": 327622937,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676314818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>  I think one of the goals of this splitting is for each virtualized file's content to be its own \"fragment\", which I believe implies splitting out individual data <em>segments</em>, right?</p>",
        "id": 327623794,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676315077
    },
    {
        "content": "<p>individual data segments, yes, but there's only one section</p>",
        "id": 327623849,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315095
    },
    {
        "content": "<p>i don't know how this scheme would apply to items within a section</p>",
        "id": 327623915,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315114
    },
    {
        "content": "<p>I'm just trying to parse your comment \"split the whole section as one\"</p>",
        "id": 327623942,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676315123
    },
    {
        "content": "<p>meaning the whole of the data section</p>",
        "id": 327623989,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315138
    },
    {
        "content": "<p>So split the top-level section and then split out its segments as well?</p>",
        "id": 327624219,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676315204
    },
    {
        "content": "<p>ok so i see what you mean with wanting to split each passive segment, so we can reuse storage of large files seldomly updated; do you propose extending this spec for a specific format of the data section?</p>",
        "id": 327625267,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315570
    },
    {
        "content": "<p>as the way i'm reading it right now the split data section is in its entirety (a single entry vs. a vector of split data segment items)</p>",
        "id": 327625563,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315651
    },
    {
        "content": "<p>Oh yes, I rewrote that a couple of times and the heading is poorly worded in its current state</p>",
        "id": 327625707,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676315702
    },
    {
        "content": "<p>Oh I see the comments now in the \"split data section\", sorry</p>",
        "id": 327625824,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315744
    },
    {
        "content": "<p>my brain sees light gray text and goes \"nah, not important\"</p>",
        "id": 327625861,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315760
    },
    {
        "content": "<p>There, I made it colorful <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 327626094,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676315824
    },
    {
        "content": "<p>thanks <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 327626146,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315848
    },
    {
        "content": "<p>Splitting passive data segments is in part to help dedupe data, but we've also discussed it in terms of local development tooling that makes it easier to work with \"static assets\"</p>",
        "id": 327626421,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676315921
    },
    {
        "content": "<p>i think we could just opt for all data segments, active or passive; the active ones will rarely change with a stable \"virtualizer\" implementation, i would hope</p>",
        "id": 327626424,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676315922
    },
    {
        "content": "<p>it'd also mean less things to record if we don't need to differentiate in the split format for active vs. passive, just keep it a section header of (id, size, digest, len) followed by an array of size len containing (size, digest) for each segment in order</p>",
        "id": 327627806,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676316340
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> Seems reasonable. I'll write that up.</p>",
        "id": 327628421,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676316461
    },
    {
        "content": "<p>Can we define the canonical splitting as splitting out all segments, but allow split wasms to inline things that are small if they want?</p>",
        "id": 327629168,
        "sender_full_name": "Robin Brown",
        "timestamp": 1676316661
    },
    {
        "content": "<p>Yes, good point. You only have to follow the canonical split strictly in order to hash, and that only requires a little bookkeeping in memory</p>",
        "id": 327630101,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676316866
    },
    {
        "content": "<p>ok so perhaps each entry in the segments array having a preamble byte that signifies inline or split? with inline being just vec(byte) (doesn't need its own digest since they're inline) so we don't recreate the entire data section format here?</p>",
        "id": 327630644,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676317003
    },
    {
        "content": "<p>The notation is a little wonky but I think it gets the basic idea across: <a href=\"https://hackmd.io/AKlx0_jYQoSIqnOKk3lJSg?both#Split-data-section\">https://hackmd.io/AKlx0_jYQoSIqnOKk3lJSg?both#Split-data-section</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/AKlx0_jYQoSIqnOKk3lJSg?both#Split-data-section\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/AKlx0_jYQoSIqnOKk3lJSg?both#Split-data-section\" title=\"Wasm split - HackMD\">Wasm split - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 327636790,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676318936
    },
    {
        "content": "<p>As an alternative the segment headers could be encoded generically as a <code>seghdr:vec(byte)</code>, which would reduce required knowledge of the core spec for the <del>split algo</del> splice algo, but not the split algo</p>",
        "id": 327637684,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676319286
    },
    {
        "content": "<p>One of the reasons I was preferring just a <code>vec(byte)</code> to <code>core:data</code> is that the latter requires the splicer to know the format of <code>core:data</code> to read how many bytes it needs to just copy into the final artifact; it itself doesn't really care if it's a passive or active segment.</p>\n<p>Perhaps this format of a split section could be generalized to a \"split item section\" where it can represent <em>any</em> section containing items that may be split out?</p>",
        "id": 327644261,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676321952
    },
    {
        "content": "<p>I can do that, but it only really simplifies the splice algorithm. Canonical split still needs to know how much segment header to copy before it gets to the \"real\" content</p>",
        "id": 327653209,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676325284
    },
    {
        "content": "<p>right, the splitter will need to understand the item format to even calculate the hash / determine what can be inlined vs. split, but i was imagining the splicer to be a (somewhat) dumb adapter that sits between the split file format and something like <code>wasmparser</code>, which it will understand the item format and validate. i don't have a strong opinion on it.</p>",
        "id": 327655375,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676326194
    },
    {
        "content": "<p>Yeah I suppose there is some advantage in simplifying splice if the hash calculation is handled by some outer process</p>",
        "id": 327655500,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676326249
    },
    {
        "content": "<p>I'll make another pass on that section of the proposal tomorrow</p>",
        "id": 327655559,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676326285
    },
    {
        "content": "<p>that said, i don't think we'll really need a generalized \"split item section\" if ultimately it's just the data section we do the most splitting on (at least in terms of sections with a vec of items; modules and component sections in a component will obviously also support splitting, but those are single item)</p>",
        "id": 327655805,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676326367
    },
    {
        "content": "<p>I started writing a TODO to myself and just made the change instead</p>",
        "id": 327656539,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676326713
    },
    {
        "content": "<p>Updated the proposal to use a single \"split section\" ID that includes the original section ID as its first field. This is more consistent with the new split data segment approach and reduces the impact on the core spec to a single reserved section ID. Also tried to clarify throughout that splitting is mandatory for hash calculation but optional for actual content storage.</p>",
        "id": 327794966,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676386365
    },
    {
        "content": "<p>If this looks good I'll plan on updating <a href=\"https://github.com/fermyon/wasm-splice\">my old prototype</a> to implement this proposal</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/wasm-splice\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2bf0ffc42eca8e16f630aea0c281c82c7c76664c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366438613530386365323335373038636335613764626364663236353835373037316466626163663439363538356637303737646335333833333035323237302f6665726d796f6e2f7761736d2d73706c696365)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/wasm-splice\" title=\"GitHub - fermyon/wasm-splice\">GitHub - fermyon/wasm-splice</a></div><div class=\"message_embed_description\">Contribute to fermyon/wasm-splice development by creating an account on GitHub.</div></div></div>",
        "id": 327796227,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676386660
    },
    {
        "content": "<p>nice job!  i'm trying to understand what are the implications of this optimization in <code>datasegmentsplitopt</code> in which the bytes can either be stored inline or out-of-line, while the hash is always calculated as-if it's stored out-of-line.  so, iiuc, when i start with a hash (either for the root component stored in a registry or from a <code>typeddigest</code>), it's not simply the content hash of the blob, it's the content hash of the blob as-if the blob had out-of-lined all its data segments.  iiuc, what this means is that we need the storage service used to store registry contents to be a general key-value store (because, from the storage service's perspective, our split-content-hash is just an arbitrary string), as opposed to a content-addressable system.  if that's right, does that perhaps limit us in the systems we can use to store split components and rule out pure content-addressed systems?</p>\n<p>(fwiw, i was assuming that, to have this maybe-inline-maybe-not optimization, we'd need to specify the exact criteria in the canonical splitting algorithm so that the our hashes are always the hashes of the actual bytes.)</p>",
        "id": 327878613,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1676410676
    },
    {
        "content": "<p>Yeah, if you wanted to use a content-addressed store \"natively\" you would need to stick to the \"canonical fully split\" form. That does make the inlining option less appealing.</p>",
        "id": 327880351,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676411395
    },
    {
        "content": "<p>I don't have a good sense of how <em>many</em> data segments we should expect in general. I've seen some pretty heavy fragmentation from wizer+dotnet iirc; if there are a lot of small segments the OCI protocol overhead might eat away at the deduplication savings</p>",
        "id": 327880726,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676411542
    },
    {
        "content": "<p>I guess that would be an argument in favor of splitting only passive segments</p>",
        "id": 327880804,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676411579
    },
    {
        "content": "<p>I think the canonical split algorithm could also make the canonical decision of whether to split or not based on byte length (e.g.: data segments don't get split out unless they are bigger than X bytes).  if we version the split format up front, then we could have different magic constants and criteria for different versions over time based on experience</p>",
        "id": 328085741,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1676487599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> was your \"I think so\" in zoom a pro-splitting stance?</p>",
        "id": 328097996,
        "sender_full_name": "Lann Martin",
        "timestamp": 1676491396
    },
    {
        "content": "<p>oh sorry, no that was in response to the question if clients would cache the content-addressed data by the digest so that it can be reused between multiple split components</p>",
        "id": 328101859,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676492666
    },
    {
        "content": "<p>but i am pro-splitting in general if that's the question</p>",
        "id": 328101918,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676492694
    },
    {
        "content": "<p>sorry i missed some context having to chase the dog down the street</p>",
        "id": 328101954,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676492704
    },
    {
        "content": "<p>thankfully we (i rounded up two neighbors to help) caught her</p>",
        "id": 328102004,
        "sender_full_name": "Peter Huene",
        "timestamp": 1676492726
    }
]