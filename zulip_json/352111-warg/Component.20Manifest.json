[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> looking at <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md</a> ; do you know if it is intended to have the same section ordering constraints as the core spec (non-custom sections have a fixed order; custom sections can be interleaved anywhere)?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/99bd50a64f9792776cbac4f9aad8716577d17502\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633763666532613632383433376166333432636432626466646431653438613733316536363539343666356366356466616664356138653763313237336436652f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md\" title=\"component-model/Binary.md at main · WebAssembly/component-model\">component-model/Binary.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/Binary.md at main · WebAssembly/component-model</div></div></div>",
        "id": 310496364,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668630812
    },
    {
        "content": "<p>With the component model, there's no constraint on section ordering at all.</p>",
        "id": 310496426,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668630834
    },
    {
        "content": "<p>index spaces are built up incrementally as a result</p>",
        "id": 310496513,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668630854
    },
    {
        "content": "<p>so the only requirement is that indexes are valid where they are read (i.e. if they refer to another section, that section must precede it)</p>",
        "id": 310496593,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668630885
    },
    {
        "content": "<p>ah ok that makes sense</p>",
        "id": 310496621,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668630898
    },
    {
        "content": "<p>in terms of being able to explode a component into individual sections, the original order would need to be maintained in a manifest of some sort for full fidelity (not unlike layer orders in an OCI)</p>",
        "id": 310497248,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668631129
    },
    {
        "content": "<p>I'm thinking about which sections we actually care to split out - if its just custom sections there may be a compact encoding where you squash each consecutive run of non-custom sections into a single (length, hash)</p>",
        "id": 310497639,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631238
    },
    {
        "content": "<p>The simplest approach would be to include <em>every</em> section in the manifest, but that would be a lot of entries</p>",
        "id": 310497951,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631339
    },
    {
        "content": "<p>perhaps we design it such that both are supported: can list each section if desired but also consecutive sections as a single entry; thus we don't have to bake in the \"important\" section semantics into the manifest structure itself</p>",
        "id": 310498306,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668631450
    },
    {
        "content": "<p>That makes sense; a toolchain may know that a particular data section should be split, but that's not something you can really determine from the binary itself</p>",
        "id": 310498510,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631525
    },
    {
        "content": "<p>perhaps we just say that each entry is a stream of 1 or more wasm sections (each section header describes the size, so it inherently can be read until the \"end\" of the current stream), for which the hash is of the entire stream of bytes?</p>",
        "id": 310498917,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668631681
    },
    {
        "content": "<p>Just confirming: after the header, all content <em>must</em> be sections of the form <code>&lt;type*1&gt; &lt;size*4&gt; &lt;content*size&gt;</code>, right?</p>",
        "id": 310498979,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631691
    },
    {
        "content": "<p>right</p>",
        "id": 310498990,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668631700
    },
    {
        "content": "<blockquote>\n<p>perhaps we just say that each entry is a stream of 1 or more wasm sections (each section header describes the size, so it inherently can be read until the \"end\" of the current stream), for which the hash is of the entire stream of bytes?</p>\n</blockquote>\n<p>It would be useful to know the labels of at least some custom sections; in particular if we are embedding package metadata in one of them the registry indexer would like to be able to identify that</p>",
        "id": 310499352,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631846
    },
    {
        "content": "<p>or signatures</p>",
        "id": 310499411,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631875
    },
    {
        "content": "<p>yeah definitely should be in such a manifest so that the tools can decide to skip fetching sections not relevant to them (e.g. custom)</p>",
        "id": 310499449,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668631888
    },
    {
        "content": "<p>so the types, and if custom, names</p>",
        "id": 310499501,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668631909
    },
    {
        "content": "<p>something like the output of <code>wasm-tools objdump</code> (conceptually)</p>",
        "id": 310499678,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668631991
    },
    {
        "content": "<p>yeah i think that'd make sense</p>",
        "id": 310499961,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668632096
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">manifest</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">version</span>:<span class=\"kt\">u8</span>  <span class=\"nc\">vec</span><span class=\"o\">&lt;</span><span class=\"n\">entry</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">entry</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">vec</span><span class=\"o\">&lt;</span><span class=\"n\">section</span><span class=\"o\">&gt;</span><span class=\"w\">  </span><span class=\"n\">digest</span>:<span class=\"nc\">vec</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"n\">section</span><span class=\"w\"> </span>:<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">type</span>:<span class=\"kt\">u8</span>  <span class=\"nc\">size</span>:<span class=\"kt\">u32</span>  <span class=\"nc\">label</span>:<span class=\"nc\">string</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 310502715,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668633190
    },
    {
        "content": "<p>Not sure how to deal with labels for hashing; the hash could include all the section content (including the label) or the label could be separate</p>",
        "id": 310503574,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668633608
    },
    {
        "content": "<p>Possibly safer to include it in the hashing and treat the <code>section.label</code> as arbitrary entry metadata? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 310503838,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668633726
    },
    {
        "content": "<p>is the label going to be anything other than the custom section name or do we think it'll be arbitrary?</p>",
        "id": 310505812,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668634532
    },
    {
        "content": "<p>I'm thinking about the \"component VFS\" with files in individual data sections</p>",
        "id": 310505960,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668634585
    },
    {
        "content": "<p>hmm, so data segments might be defined in the component via a nested module (i.e. there's no name to associate) or (eventually when we support it) imported with a specific name, which would mean it'd appear in an import section along with other importable items</p>",
        "id": 310506268,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668634723
    },
    {
        "content": "<p>i'm not sure there'd be useful information we could extract for a label there</p>",
        "id": 310506294,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668634733
    },
    {
        "content": "<p>components don't have data sections either, so i'm not sure what Luke is thinking for this tooling (possibly a nested core module that implements the <code>wasi:filesystem</code> interface?)</p>",
        "id": 310506695,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668634916
    },
    {
        "content": "<p>so from the manifest perspective it'd appear as a core module section</p>",
        "id": 310506764,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668634932
    },
    {
        "content": "<p>which goes to the point of whether or not we need to explode nested sections ( <span aria-label=\"exploding head\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"exploding head\">:exploding_head:</span>)</p>",
        "id": 310506872,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668634976
    },
    {
        "content": "<p>yeah, this is exactly where my understanding of this gets very hazy...</p>",
        "id": 310507265,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668635123
    },
    {
        "content": "<p>glad I'm not the only one</p>",
        "id": 310507298,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668635140
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> some thoughts on the above conversation?</p>",
        "id": 310507444,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668635199
    },
    {
        "content": "<p>If we added data imports to core modules (a fairly minor core spec change) and added data sections to components (no reason not to, also i expect an easy addition), then that could solve this problem.  However, if we want to be able to de-dupe nested components (components nested in components, which i think will be common in a deployment registry, because what were originally external package references in the development registry will have been \"bundled\"), then I think we'll want to recursively explode components.  And once we can recursively explode components, might as well explode modules, and now we don't have the original problem.  How to represent recursive-explosion is its own tricky question, though ( <span aria-label=\"mind blown\" class=\"emoji emoji-1f92f\" role=\"img\" title=\"mind blown\">:mind_blown:</span> indeed)</p>",
        "id": 310520036,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1668641042
    },
    {
        "content": "<p>Assuming module data imports and component data sections, could a nested module data section be mechanically extracted into a root component data section?</p>",
        "id": 310614848,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668693639
    },
    {
        "content": "<p>Thinking about this a bit more, here's a scheme that seems pretty simple and has some nice properties:</p>\n<p>Define a new <a href=\"https://webassembly.github.io/spec/core/binary/modules.html#sections\">section id</a> for an \"external\" section, where an \"external\" section is a section that is meant to be replaced in-place by <em>another</em> section whose contents are stored out-of-line.  The format of an external section would be:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">section</span><span class=\"o\">-</span><span class=\"n\">id</span>:<span class=\"nc\">byte</span><span class=\"w\"> </span><span class=\"n\">size</span>:<span class=\"kt\">u32</span> <span class=\"nc\">custom</span><span class=\"o\">-</span><span class=\"n\">section</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">?</span>:<span class=\"nc\">name</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">contents</span>:<span class=\"nc\">hash</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where:</p>\n<p>* The <code>section-id</code> and <code>size</code> are that of the <em>other</em> section that we want to replace the containing external section with, thereby allowing the out-of-line file to contain only the section <em>contents</em> (otherwise we'd have to stash the <code>section-id</code> and <code>size</code> in the file, which will be a problem for static assets)<br>\n * <code>custom-section-name</code> is only present if <code>section-id = 0</code> (i.e., this is a <a href=\"https://webassembly.github.io/spec/core/binary/modules.html#custom-section\">custom section</a>).  The reason is, as above, to allow the out-of-line file to simply be the <em>contents</em> of the metadata file.<br>\n  * <code>hash</code> is a <a href=\"https://webassembly.github.io/spec/core/syntax/values.html#syntax-name\"><code>name</code></a> (a length + UTF-8 string) matching (for the sake of argument, open to alternatives) the <a href=\"https://www.w3.org/TR/SRI/#the-integrity-attribute\"><code>hash-expression</code></a> grammar.</p>\n<p>This should work recursively: I start at a root component and then can recursively follow external sections into files containing other components and core modules.</p>\n<p>What's neat about this approach is that an external section says precisely what it is meant to be replaced with, but it doesn't say how to find it, leaving that up to a higher-level to say how to track down a blob with the requisite content hash.  Thus, there can be a separate manifest (say, an OCI Artifact manifest) that lists a set of hashes and the exact format of this manifest doesn't have to be fixed because it's not included in any of these content hashes; the root <code>.wasm</code> <em>is</em> the manifest and a component package release can simply use the content-hash of the root <code>.wasm</code>.  The package release's URL would thus be the key for locating the backing storage (say, identifying an OCI Artifact which contained all the requisite hashes).</p>\n<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> WDYT?</p>",
        "id": 310668719,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1668708706
    },
    {
        "content": "<p>I like the approach. Would we want to account for the data section \"type\" field (i.e. \"passive\") similarly to the custom section name to allow VFS file contents to match external sections contents?</p>",
        "id": 310671407,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668709581
    },
    {
        "content": "<p>or, brainstorming a more general approach:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">section</span><span class=\"o\">-</span><span class=\"n\">id</span>:<span class=\"nc\">byte</span><span class=\"w\"> </span><span class=\"n\">size</span>:<span class=\"kt\">u32</span> <span class=\"nc\">content</span><span class=\"o\">-</span><span class=\"n\">prefix</span>:<span class=\"nc\">vec</span><span class=\"o\">&lt;</span><span class=\"n\">byte</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">contents</span>:<span class=\"nc\">hash</span><span class=\"w\"></span>\n</code></pre></div>\n<p>where <code>content-prefix</code> is inlined just before the external contents</p>",
        "id": 310672015,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668709781
    },
    {
        "content": "<p>Oh right; great point and yeah, great generalization!</p>",
        "id": 310686922,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1668714539
    },
    {
        "content": "<p>This would require bumping the core wasm binary format version, wouldn't it?</p>",
        "id": 310691329,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668716030
    },
    {
        "content": "<p>(sorry for slow reply; i need to fix my notification prefs.) i think we have a couple of options of how to frame this, but none should require bumping the \"version\" since, at the end of the day, we're not breaking any existing modules, just offering new options.  one way to frame this is that we're proposing a new section to the module (and component) binary format, just like several existing wasm proposals (e.g., exception-handling).  some hosts may not implement this section (for a long time or forever), but that's also fine and could be spec'd as such.  but this probably requires us to actually make a proposal to the core wasm CG and maybe it gets shot down.  as a fallback, we could frame this as a compression format that is logically decompressed <em>before</em> the core wasm binary format gets decoded, in the same way as core wasm doesn't know anything about gzip/brotli, despite browsers serving core wasm compressed by these</p>",
        "id": 310916181,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1668803763
    },
    {
        "content": "<p>I think it would at least mean that a \"split\" module would potentially no longer be well formed for existing impls. For example it seems that a data count section would no longer be valid if its data section \"disappeared\" (from the perspective of an external-section-naive impl). More to the point it would potentially invalidate <code>table.init</code> instructions, at worst silently giving them a different section than intended</p>",
        "id": 310920136,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668805235
    },
    {
        "content": "<p>Maybe they could be <code>.wazm</code> files <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 310921726,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668805826
    },
    {
        "content": "<p>I personally don't see the need to have modules in a different format; I would imagine a new wasm parser that can be given one of these \"manifests\" and capable of fetching/verifying sections as defined in the manifest, but provide a unified <code>wasmparser</code>-like streaming interface where it doesn't matter where the sections come from; consumers of the parser can't tell if it's a single file or reconstituted from multiple streams as it doesn't matter to them at all (the offsets given to the callers would be as if it were a single file too). to me this really isn't that much different from an OCI image, but instead of layering a file system on top of another, it's a single file with sequential sections.</p>",
        "id": 310924002,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668806705
    },
    {
        "content": "<p>Are you talking about Luke's scheme above (<a href=\"#narrow/stream/352111-warg/topic/Component.20Manifest/near/310668719\">https://bytecodealliance.zulipchat.com/#narrow/stream/352111-warg/topic/Component.20Manifest/near/310668719</a>)?</p>",
        "id": 310924562,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668806924
    },
    {
        "content": "<p>i am, but more generally i think changes to the core spec to support a registry splitting a module's contents, personally, to be a non-starter</p>",
        "id": 310925055,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668807117
    },
    {
        "content": "<p>OK, sure. So this would be a new file type, maybe with an additional magic header</p>",
        "id": 310925478,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668807309
    },
    {
        "content": "<p>we're talking for the \"manifest\" here, right?</p>",
        "id": 310926874,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668807861
    },
    {
        "content": "<p>We don't really need a manifest under this design; you still need to be able to bundle files but that can be anything from OCI to a tarball as long as it allows some kind of content-addressed lookup</p>",
        "id": 310927241,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668808019
    },
    {
        "content": "<p>Hashing the root \"wasm-like object\" recursively protects external sections</p>",
        "id": 310927401,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668808081
    },
    {
        "content": "<p>Its sort of an \"intrusive manifest\"</p>",
        "id": 310927629,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668808171
    },
    {
        "content": "<p>accomplishing this by extending the component/core specs to have a concept of external section or by a completely different file format (i.e a discrete manifest that, with the right tooling, can produce a component / module based on a manifest)?</p>",
        "id": 310929030,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668808712
    },
    {
        "content": "<p>i seem to have gotten lost on exactly which of those approaches is being discussed here</p>",
        "id": 310929393,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668808852
    },
    {
        "content": "<p>I'm talking about the external sections approach</p>",
        "id": 310929939,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668809059
    },
    {
        "content": "<p>ok i'm on the same page now; that said, I'm quite hesitant to take dependencies on core spec proposals to move this work forward</p>",
        "id": 310930579,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668809326
    },
    {
        "content": "<p>Right, so one option is to say it is a new binary format that just references the wasm binary encoding spec</p>",
        "id": 310931128,
        "sender_full_name": "Lann Martin",
        "timestamp": 1668809530
    },
    {
        "content": "<p>that's not really the approach we take for core proposals in the tooling, though; for the various core proposals, including ones like the now-defunct module linking and interface types proposals, we just bake encoding/decoding support in and hide the decoding of it behind a runtime feature flag. i think that approach would work here just fine, it's just up until now we haven't had to touch anything core-related in the implementation of the component model and that's been nice from a maintenance perspective. at any rate, my hesitancy isn't a blocker (it does remind me of Alex being hesitant to having a discrete component binary AST in the tooling way back when)</p>",
        "id": 310932485,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668810042
    },
    {
        "content": "<p>i do realize we need a core spec proposal for data segment imports anyway for this VFS machinery to work as Luke described (it'd also probably need a non-trapping variant of <code>memory.init</code> to signal EOF of the segment offset, perhaps?)</p>",
        "id": 310932993,
        "sender_full_name": "Peter Huene",
        "timestamp": 1668810251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span>  <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span>  I put together a prototype to make sure I understood the approach: <a href=\"https://github.com/lann/wasm-splice/\">https://github.com/lann/wasm-splice/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/lann/wasm-splice/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/13e22b6663832ec458d0eb805536a2311d7e1849\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646333336438616534616132303630323530623762343936373633646566316663643533376637663930663035623761316230393934313564373661343961352f6c616e6e2f7761736d2d73706c696365)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/lann/wasm-splice/\" title=\"GitHub - lann/wasm-splice\">GitHub - lann/wasm-splice</a></div><div class=\"message_embed_description\">Contribute to lann/wasm-splice development by creating an account on GitHub.</div></div></div>",
        "id": 311410559,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669045488
    },
    {
        "content": "<p>It just uses custom <code>@external-section</code> sections rather than a new section ID</p>",
        "id": 311410958,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669045608
    },
    {
        "content": "<p>Great prototype Lann; looks good to me!  You're probably already thinking this, but I could imagine wanting a flag for <code>wasm-split</code> that says to recursively split out all nested components, modules, passive data segments and custom sections (without me having to explicitly enumerate them).</p>\n<p>Agreed that we shouldn't take any dependency on the core wasm changes, so probably Lann was right above in suggesting that we have something in the wasm binary that indicates \"this contains expanded sections\" and probably an extension change to go along with it.  Spitballing here: in the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md#component-definitions\"><code>layer</code> field</a>, where <code>0</code> means \"core module\", <code>1</code> means \"component\", we could add <code>2</code> to be a core module with external sections and <code>3</code> to be a component with external sections.  And then the \"decoding\" for these two new layers could perform the substitution, yielding a layer <code>0</code> or <code>1</code> binary that is then decoded as normal.</p>\n<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> one neat thing about this approach is that we don't block on adding data imports to core wasm; we're using these expanded sections to roughly achieve the same effect, with the added bonus that they work symmetrically for custom sections and any other random section that we one day think is duplicative and want to split out.  Also, since the contents of the external data segments are known to the containing module at build time, in theory there shouldn't be a need for a dynamic way to probe their size; it could be statically known per-data-segment-index.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md#component-definitions\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/20ccf653cc45ac29ac1301bbc1d417331ff8e73a\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363733373430343238353064613435343734393731343564356438396539366530353066303864336435656461333233313534663232323562306365396362362f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/Binary.md#component-definitions\" title=\"component-model/Binary.md at main · WebAssembly/component-model\">component-model/Binary.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/Binary.md at main · WebAssembly/component-model</div></div></div>",
        "id": 311466357,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1669061331
    },
    {
        "content": "<p>As <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> and I just discussed: the presence of an external section (with a unique section ID) would effectively be that flag that \"this contains external sections\"; implementations that don't know what to do with that section type will need to fail anyway</p>",
        "id": 311468246,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669062125
    },
    {
        "content": "<p>either way it's a proposal, so i think one on the core spec or one where we have a different AST format (i.e. different preamble) that's a strict superset of the core spec is mostly semantics; my concerns around these dependencies has waned</p>",
        "id": 311468559,
        "sender_full_name": "Peter Huene",
        "timestamp": 1669062256
    },
    {
        "content": "<p>i might now lean towards having a different AST format that are strict module and component supersets so we don't have to put external sections into the component model proposal itself, much like you both describe above</p>",
        "id": 311468826,
        "sender_full_name": "Peter Huene",
        "timestamp": 1669062397
    },
    {
        "content": "<p>sorry for the spinning of the wheels here</p>",
        "id": 311468854,
        "sender_full_name": "Peter Huene",
        "timestamp": 1669062413
    },
    {
        "content": "<p>I don't have a strong opinion either way. Would we prefer using a bit from <code>layer</code> (which would make it part of the component proposal?) or using a different magic prefix?</p>",
        "id": 311469162,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669062553
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> i now see how external sections alone could fully implement a VFS as the VFS implementation will have static knowledge of the data; when the data changes, it needs a new VFS implementation tied to that data (which itself is referenced externally by a digest, so even if the VFS implementation were somehow generic, i.e. without statically-known segment sizes, it would need to change _anyway_)</p>",
        "id": 311470761,
        "sender_full_name": "Peter Huene",
        "timestamp": 1669063171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> i think the magic would remain the same and we can simply bump the layer as luke describes; i like this because it means these external section proposals can be decoupled from either core and component specs and really only implemented by things like registry tooling (or other places where split components/modules might be relevant)</p>",
        "id": 311472243,
        "sender_full_name": "Peter Huene",
        "timestamp": 1669063601
    },
    {
        "content": "<p>sgtm, thanks for all the careful thought on the option space here.  and it seems like we can course-correct if we discover new reasons to prefer one of these other variations we've discussed while keeping the meat of the idea the same</p>",
        "id": 311473751,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1669064260
    },
    {
        "content": "<p>Updated the prototype to set <code>layer |= 2</code> and use a new section ID <code>0x5E</code> (for 5ection External). Interesting to note that I couldn't use <code>0xE5</code> because <code>wasmparser</code> rejects IDs &gt;= <code>0x80</code>. I don't see any rationale for that in the specs but there are some related cases in the conformance test suite <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 311606603,
        "sender_full_name": "Lann Martin",
        "timestamp": 1669127825
    },
    {
        "content": "<p>Sounds great; <code>0x5E</code> seems unlikely to collide with core wasm any time soon.  I expect the <code>wasmparser</code> limitation is trying to be conservative and preserving the optionality of the byte one day in the future being \"upgraded\" to a variable-length LEB128, in which case you need the high bit unused.</p>",
        "id": 311660223,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1669135287
    },
    {
        "content": "<p>added an issue for the component-model to include some of what is discussed in this thread: <a href=\"https://github.com/WebAssembly/component-model/issues/138\">https://github.com/WebAssembly/component-model/issues/138</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/issues/138\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/19d962d1ba96bdf0b6339b8b60ab9aadddfee197\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373863373139373433633633336634613536323036383235616137376433396664326331343036336131363335343630656463333831373264323135666331642f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c2f6973737565732f313338)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/issues/138\" title=\"Async and streamable data segments · Issue #138 · WebAssembly/component-model\">Async and streamable data segments · Issue #138 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">How should components bundle static assets? We have seen several early incantations of this for WebAssembly modules, e.g. emscripten file systems. Many languages have a concept of embedding data, e...</div></div></div>",
        "id": 313189713,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1669858807
    }
]