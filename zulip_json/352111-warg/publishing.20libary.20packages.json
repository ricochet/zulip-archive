[
    {
        "content": "<p>Do I understand correctly that is expected for each component implementing a world from a wit file to be it's own package in warg, and the wit file also being published to a separate package encoded in it's own wasm file?<br>\nIf that's the case, is there a standard way in warg to describe the relationship between the implementation components and the wit component? </p>\n<p>Or is there a way to merge the implementation .wasm components with the wasm encoded wit?</p>\n<p>Or can a package  consist of multiple wasm files?</p>",
        "id": 420242632,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707309542
    },
    {
        "content": "<p>Has been helpful writing this down.</p>\n<p>Library users only ever import the interface definitions from the wit component.<br>\nImplementations are only specified when composing components.</p>\n<p>Correct?</p>",
        "id": 420247357,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707311103
    },
    {
        "content": "<p>What happens when specifying conflicting implementations i.e. two components  each specify an implementation for a subset of the interfaces, but these subsets intersect?</p>",
        "id": 420251473,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707312426
    },
    {
        "content": "<p>Great questions! Some of these answers are still being figured out. Here are some partial answers.</p>\n<p>A single Wasm binary is what you publish with Warg. However, that binary could be composed of other components that either are bundled in the binary or just referenced with an import statement that needs to be resolved by the registry. So a single Wasm binary could be a composition of multiple Wasm binaries.</p>\n<p>A Wasm component binary could be just the binary representation of a WIT text file. Or it could have an implementation of those interfaces. Both are publishable components.</p>\n<p>You might want to publish interfaces by themselves if you want them to be reused and targeted by multiple component implementations.</p>",
        "id": 420312874,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1707329543
    },
    {
        "content": "<p>If a wit file is intended to have multiple implementations (like the WASI specs) then you would publish it as a standalone binary-encoded wit package. If you just want a representation of a particular component's imports/exports then you don't need a separate package; components are self-describing in that way.</p>",
        "id": 420463471,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707400785
    },
    {
        "content": "<p>I think I missed this, but do we have a way to create a \"binary-encoded wit package\" right now? with no implementations, just the module with the world(s)?</p>",
        "id": 420467177,
        "sender_full_name": "Ralph",
        "timestamp": 1707401818
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> <br>\nHow would I import  a \"implementation\" without a separate wit component defining it's interfaces?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">add</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I create a component with <code>cargo component</code> which confines to the adder world, I then get this fairly unhelpful wit back.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">release</span><span class=\"o\">/</span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">add</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 420467784,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707401997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/352111-warg/topic/publishing.20libary.20packages/near/420467177\">said</a>:</p>\n<blockquote>\n<p>I think I missed this, but do we have a way to create a \"binary-encoded wit package\" right now? with no implementations, just the module with the world(s)?</p>\n</blockquote>\n<p><a href=\"https://crates.io/crates/wit\">https://crates.io/crates/wit</a></p>",
        "id": 420467860,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1707402012
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"o\">/</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">w</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>",
        "id": 420468140,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707402105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"674089\">@Paul Scheduikat</span> </p>\n<p>There's some rough edges importing implementations right now. I know <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> and <span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> are working through the issues.</p>",
        "id": 420469143,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1707402374
    },
    {
        "content": "<p>no, this is great! I had missed that you could create an <em>interface-only</em> module</p>",
        "id": 420469274,
        "sender_full_name": "Ralph",
        "timestamp": 1707402421
    },
    {
        "content": "<p>That's wonderful!!!!</p>",
        "id": 420469305,
        "sender_full_name": "Ralph",
        "timestamp": 1707402429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479055\">@Calvin Prewitt</span> The interface types are probably already contained in the binary is there a way to convert them to wit?</p>",
        "id": 420469667,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707402557
    },
    {
        "content": "<p>I do know you can extract them easily enough, but it's .wit-to-module that I'd missed.....</p>",
        "id": 420469805,
        "sender_full_name": "Ralph",
        "timestamp": 1707402596
    },
    {
        "content": "<p>wasm-tools component wit HelloWorld.wasm<br>\npackage root:root;</p>\n<p>world root {<br>\n}</p>",
        "id": 420470463,
        "sender_full_name": "Ralph",
        "timestamp": 1707402768
    },
    {
        "content": "<p>but THAT has an implementation.....</p>",
        "id": 420470520,
        "sender_full_name": "Ralph",
        "timestamp": 1707402782
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"674089\">@Paul Scheduikat</span> I believe this prints a component's interface as wit: <code>wasm-tools component wit component.wasm</code></p>",
        "id": 420471049,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707402948
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"674089\">@Paul Scheduikat</span> The tooling will get more integrated and easier for workflows. But <code>wasm-tools component wit filepath/filename.wasm</code> will print to to stdoout.</p>",
        "id": 420471278,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1707403007
    },
    {
        "content": "<p>I just ran it on <code>wasi:http</code> encoded as binary and outputted to <code>.wit</code> text file. Works as expected.</p>",
        "id": 420471428,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1707403054
    },
    {
        "content": "<p>Doc comments will survive the roundtrip to binary and back to <code>.wit</code> text file. But you will end up with a single <code>.wit</code> file and lose the original directory structure of separate <code>.wit</code> files.</p>",
        "id": 420471964,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1707403212
    },
    {
        "content": "<p>Only for interface components for implementations it doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">root</span>:<span class=\"nc\">component</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">root</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">calculate</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>It is contained in the binary tho:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">tools</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"n\">wit</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">t</span>\n<span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">        </span><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span>\n<span class=\"w\">            </span><span class=\"p\">(</span><span class=\"n\">instance</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"a\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"b\"</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">)))</span>\n<span class=\"w\">              </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">            </span><span class=\"p\">)</span>\n<span class=\"w\">          </span><span class=\"p\">)</span>\n<span class=\"w\">          </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"example:calculate/add\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">        </span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"root:component/root\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">    </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"root\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"n\">producers</span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"n\">processed</span><span class=\"o\">-</span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"s\">\"wit-component\"</span><span class=\"w\"> </span><span class=\"s\">\"0.20.1\"</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</code></pre></div>",
        "id": 420472008,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707403225
    },
    {
        "content": "<p>AH, yes, is there an issue for that?</p>",
        "id": 420472102,
        "sender_full_name": "Ralph",
        "timestamp": 1707403264
    },
    {
        "content": "<p>Sorry in your example what does your original component's wit look like?</p>",
        "id": 420472842,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707403492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">example</span>:<span class=\"nc\">calculate</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 420473123,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707403574
    },
    {
        "content": "<p>It's not that it \"only works for interface components\".  It's that the binary you printed has a different wit than the wit you used to create the component.</p>",
        "id": 420474162,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707403906
    },
    {
        "content": "<p>Paul, are you testing out the component book example?</p>",
        "id": 420474265,
        "sender_full_name": "Ralph",
        "timestamp": 1707403931
    },
    {
        "content": "<p>Yes rust component example</p>",
        "id": 420474327,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707403950
    },
    {
        "content": "<p>Sorry I know that's confusing.  But if you look at the <code>wat</code> you shared, that is a component that exports a component type that is described by the wit you shared,  which is a different component than the one described by the wit</p>",
        "id": 420474417,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707403977
    },
    {
        "content": "<p>The tool could recurse into the nested interfaces. You wouldn't always want to do that unconditionally but it is functionality that could be added.</p>",
        "id": 420475070,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707404163
    },
    {
        "content": "<p>Are you using cargo-component?  It seems like your <code>wat</code> was handwritten</p>",
        "id": 420475542,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404288
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/352111-warg/topic/publishing.20libary.20packages/near/420475070\">said</a>:</p>\n<blockquote>\n<p>The tool could recurse into the nested interfaces. You wouldn't always want to do that unconditionally but it is functionality that could be added.</p>\n</blockquote>\n<p>it would be nice to be able to pass a <code>--tree</code> option to recurse, though in many cases those interfaces are not exposed to the outside caller.</p>",
        "id": 420475546,
        "sender_full_name": "Ralph",
        "timestamp": 1707404289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> <br>\nNo cargo component.</p>",
        "id": 420475654,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707404328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"486181\">Daniel Macovei</span> <a href=\"#narrow/stream/352111-warg/topic/publishing.20libary.20packages/near/420475542\">said</a>:</p>\n<blockquote>\n<p>Are you using cargo-component?  It seems like your <code>wat</code> was handwritten</p>\n</blockquote>\n<p>he's doing the book's wat example: <a href=\"https://component-model.bytecodealliance.org/tutorial.html\">https://component-model.bytecodealliance.org/tutorial.html</a></p>",
        "id": 420475746,
        "sender_full_name": "Ralph",
        "timestamp": 1707404354
    },
    {
        "content": "<p>Correct, <span class=\"user-mention\" data-user-id=\"674089\">@Paul Scheduikat</span> ?</p>",
        "id": 420475772,
        "sender_full_name": "Ralph",
        "timestamp": 1707404360
    },
    {
        "content": "<p>Was surprised there aren't any wasi interfaces in your output</p>",
        "id": 420475906,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404398
    },
    {
        "content": "<p>Basically, Paul is user testing the tutorial for us :-) we need to take notes and file prs and issues :-)</p>",
        "id": 420476111,
        "sender_full_name": "Ralph",
        "timestamp": 1707404440
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> You only get those if your code is directly runnable.</p>",
        "id": 420476200,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707404462
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> The tutorial works, there is just just no example of composing multiple self written packages together.</p>",
        "id": 420476933,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707404653
    },
    {
        "content": "<p>^^</p>",
        "id": 420476976,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404665
    },
    {
        "content": "<p>right, this is interesting!</p>",
        "id": 420476995,
        "sender_full_name": "Ralph",
        "timestamp": 1707404671
    },
    {
        "content": "<p>great!</p>",
        "id": 420477008,
        "sender_full_name": "Ralph",
        "timestamp": 1707404675
    },
    {
        "content": "<p>It's a little tricky because composition is the intersection of using several tools together here.  You're asking about warg, cargo-component, wasm-tools component wit, and then there are also a variety of ways to perform the composition.</p>",
        "id": 420477397,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404796
    },
    {
        "content": "<p>I'll see about doing that later today and submit a pr to the doc repo</p>",
        "id": 420477444,
        "sender_full_name": "Ralph",
        "timestamp": 1707404811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> is right, but that shouldn't bother us too much at this point methinhks. once language tooling kicks in, that will all change anyway....</p>",
        "id": 420477534,
        "sender_full_name": "Ralph",
        "timestamp": 1707404836
    },
    {
        "content": "<p>Yes this use case definitely is something we care about making more intuitive, it's just going to take some time I think.  Folks are aware it's not intuitive</p>",
        "id": 420477643,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404876
    },
    {
        "content": "<p>But specifically I think one of the take aways is that while wasm-tools could support recursion when it prints wit, probably a common point of confusion is that the top level wit for a binary generated by cargo-component <em>exports</em> the wit that you use to create the binary, meaning it <em>is not</em> going to have the same wit you used generate the component</p>",
        "id": 420477977,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404980
    },
    {
        "content": "<p>One needs to understand that to start playing around with composition</p>",
        "id": 420478026,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707404995
    },
    {
        "content": "<p>And that probably isn't clear from the component book</p>",
        "id": 420478050,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707405002
    },
    {
        "content": "<p>squillace@idiopath:~/work/hello-wasi-http/target/wasm32-wasi/debug$ wasm-tools component wit hello_wasi_http.wasm<br>\npackage root:component;</p>\n<p>world root {<br>\n  import wasi:io/error@0.2.0;<br>\n  import wasi:io/streams@0.2.0;<br>\n  import wasi:cli/stdout@0.2.0;<br>\n  import wasi:cli/stderr@0.2.0;<br>\n  import wasi:cli/stdin@0.2.0;<br>\n  import wasi:http/types@0.2.0;</p>\n<p>export wasi:http/incoming-handler@0.2.0;<br>\n}</p>",
        "id": 420478741,
        "sender_full_name": "Ralph",
        "timestamp": 1707405175
    },
    {
        "content": "<p>if it were a composed component, you'd be right, only the top level things would be visible; I like the tree idea, though....</p>",
        "id": 420478855,
        "sender_full_name": "Ralph",
        "timestamp": 1707405209
    },
    {
        "content": "<p>that's Dan's rust wasi:http hello world</p>",
        "id": 420478937,
        "sender_full_name": "Ralph",
        "timestamp": 1707405233
    },
    {
        "content": "<p>lemme go find the wit: <br>\n<a href=\"/user_uploads/15107/7MUXIPREd-1p7eHioEI2BDjc/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/7MUXIPREd-1p7eHioEI2BDjc/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/7MUXIPREd-1p7eHioEI2BDjc/image.png\"></a></div>",
        "id": 420479118,
        "sender_full_name": "Ralph",
        "timestamp": 1707405282
    },
    {
        "content": "<p>hmm if you have the code available it looks like that one might actually have several wit files</p>",
        "id": 420479472,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707405382
    },
    {
        "content": "<p>Dan had this one running throughout the RC flow, so early on you had to have the wit to compile, and it hasn't been rearranged: <a href=\"https://github.com/sunfishcode/hello-wasi-http\">https://github.com/sunfishcode/hello-wasi-http</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sunfishcode/hello-wasi-http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fa36c47887a9d645890975830588bb9d4190ee96\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333333356337666533623235663435343738313134316464633334336361346433393138343165313066616166636636626532343831646231613666356335632f73756e66697368636f64652f68656c6c6f2d776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sunfishcode/hello-wasi-http\" title=\"GitHub - sunfishcode/hello-wasi-http\">GitHub - sunfishcode/hello-wasi-http</a></div><div class=\"message_embed_description\">Contribute to sunfishcode/hello-wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 420479723,
        "sender_full_name": "Ralph",
        "timestamp": 1707405463
    },
    {
        "content": "<p>which was why I was asking whether we even could now build only wit files!</p>",
        "id": 420479900,
        "sender_full_name": "Ralph",
        "timestamp": 1707405509
    },
    {
        "content": "<p>I was \"used to\" having to have the physical .wit to build</p>",
        "id": 420479953,
        "sender_full_name": "Ralph",
        "timestamp": 1707405525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> <br>\nI still don't really understand how I would do this. The following is loosely contrived from the tutorial, but simplified and I now want to split it up in two packages.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">docs</span>:<span class=\"nc\">add</span><span class=\"p\">;</span>\n\n<span class=\"n\">interface</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">add</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">b</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">u32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">adder</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>The adder world is then built to a component with <code>cargo component</code>.</p>\n<p>This results in the <code>adder.wasm</code> file implementing the adder world.</p>\n<p>I then create a new project (component) with <code>cargo component new</code> and only copy over the <code>adder.wasm</code> file.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">package</span><span class=\"w\"> </span><span class=\"n\">docs</span>:<span class=\"nc\">calculator</span><span class=\"p\">;</span>\n\n<span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">calculator</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">docs</span>:<span class=\"nc\">add</span>:<span class=\"nc\">add</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>What are the steps to implement the calculator world?</p>",
        "id": 420480384,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707405647
    },
    {
        "content": "<p>So that's the part where you write rust code in your <code>cargo component</code> project</p>",
        "id": 420480780,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707405763
    },
    {
        "content": "<p>The rust code isn't included in the docs, but you would import the bindings in your <code>lib.rs</code> and reference the interfaces you're implementing from <code>bindings</code>.  This is the part where the <code>cargo-component</code> docs are your friend <a href=\"https://github.com/bytecodealliance/cargo-component?tab=readme-ov-file#getting-started\">https://github.com/bytecodealliance/cargo-component?tab=readme-ov-file#getting-started</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component?tab=readme-ov-file#getting-started\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f17c09d9684534460c5921b3d5b1baa85111405d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336563323666316462626532633266336632643539653066303965316365393431636533333564346364653063366338316665613731623836363435653931342f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component?tab=readme-ov-file#getting-started\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components bas...</div></div></div>",
        "id": 420481098,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707405853
    },
    {
        "content": "<p>As a meta-point, this thread might get more relevant eyeballs in <a class=\"stream\" data-stream-id=\"327223\" href=\"/#narrow/stream/327223-wit-bindgen\">#wit-bindgen</a></p>",
        "id": 420481124,
        "sender_full_name": "Lann Martin",
        "timestamp": 1707405863
    },
    {
        "content": "<p>agreed; can you move it? I'm not a zulip master, I confess.</p>",
        "id": 420481233,
        "sender_full_name": "Ralph",
        "timestamp": 1707405897
    },
    {
        "content": "<p>#bleg</p>",
        "id": 420481239,
        "sender_full_name": "Ralph",
        "timestamp": 1707405900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span>  But I need the type information for <code>docs:add:add;</code>to be able to use it in rust. I now only have adder.wasm which although it contains the type information isn't easily usable.</p>",
        "id": 420481360,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707405927
    },
    {
        "content": "<p><code>cargo-component</code> leverages <code>wit-bindgen</code> which creates the rust types you need from your wit and exposes them in the <code>bindings</code> module it generates for you</p>",
        "id": 420481572,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707405980
    },
    {
        "content": "<p>in the link i shared there's this snippet</p>",
        "id": 420481898,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707406074
    },
    {
        "content": "<p>I do get that I can copy over the wit interface declaration from the other project, but as I have learned now I should be able to import it with just the <code>adder.wasm</code> file.</p>",
        "id": 420481914,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707406077
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">mod</span> <span class=\"nn\">bindings</span><span class=\"p\">;</span>\n\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">bindings</span>::<span class=\"n\">Guest</span><span class=\"p\">;</span>\n\n<span class=\"k\">struct</span> <span class=\"nc\">Component</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Guest</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">Component</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"sd\">/// Say hello!</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">hello_world</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">()</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 420481918,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707406079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> I do understand how to implement components in rust.</p>",
        "id": 420482792,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707406285
    },
    {
        "content": "<p>Sorry it's a little confusing what you're trying to import where.  A little later on I can try and push an example that recreates the example in the book.  Without having looked too closely at it though you need to create two different cargo-component projects, one for the calculator, and one for adder, and then compose the output binaries</p>",
        "id": 420482841,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707406298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674089\">Paul Scheduikat</span> <a href=\"#narrow/stream/352111-warg/topic/publishing.20libary.20packages/near/420482792\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"486181\">Daniel Macovei</span> I do understand how to implement components in rust.</p>\n</blockquote>\n<p>Sure thing, sorry for mistaking that as the point of confusion</p>",
        "id": 420482910,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1707406318
    },
    {
        "content": "<p>I think the point is the book doesn't discuss the \"composing\" or \"binding together\" of the components, am I correct, Paul?</p>",
        "id": 420483062,
        "sender_full_name": "Ralph",
        "timestamp": 1707406358
    },
    {
        "content": "<p>I know how I would compose these two packages together. </p>\n<blockquote>\n<p>If a wit file is intended to have multiple implementations (like the WASI specs) then you would publish it as a standalone binary-encoded wit package. If you just want a representation of a particular component's imports/exports then you don't need a separate package; components are self-describing in that way.</p>\n</blockquote>\n<p>I don't understand how I would go about it when downloading just a implementation <code>wasm</code> component from a registry, without a separate wit package defining the interfaces.</p>",
        "id": 420483910,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707406602
    },
    {
        "content": "<p>EXACTLY</p>",
        "id": 420484126,
        "sender_full_name": "Ralph",
        "timestamp": 1707406663
    },
    {
        "content": "<p>up to now, I've been copying around the wit files for implementations; the question is how to <em>reference</em> those types by pointing at an interface-only component module.</p>",
        "id": 420484309,
        "sender_full_name": "Ralph",
        "timestamp": 1707406706
    },
    {
        "content": "<p>Let's ignore the registry part for a moment, because that is just a location. First we should be able to replicate this locally and document that in the book.</p>",
        "id": 420484479,
        "sender_full_name": "Ralph",
        "timestamp": 1707406764
    },
    {
        "content": "<p>Agree registry is irrelevant here.</p>",
        "id": 420484634,
        "sender_full_name": "Paul Scheduikat",
        "timestamp": 1707406805
    }
]