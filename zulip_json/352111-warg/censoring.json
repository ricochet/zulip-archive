[
    {
        "content": "<p>How will censoring of entries for legal or ethical reasons be handled? For example if a version of a component contains copyrighted or illegal material, or if someone invokes their GDPR right to erasure, or someone is at risk of being doxed through information stored in a component. Has any thought been given to that? Will there be something like a thombstone with a specific format that can replace a log entry at any time in a way that still passes validation through a special case? Or will it be handled in some other way?</p>",
        "id": 325877157,
        "sender_full_name": "bjorn3",
        "timestamp": 1675541222
    },
    {
        "content": "<p>There are two different scenarios here:<br>\nIn one, a release's \"content\" is all that needs to be taken down; in this case the release would be marked \"yanked\" and the registry would stop serving / delete its content.<br>\nIn another, something about a package name or release metadata must be taken down. Hopefully this would be rare, but certainly a court could compel a registry to do so. In that case - under the current design - the entire package log would need to be removed and presumably replaced (triggering warnings and requiring user intervention for consumers). There is room in the protocol for tombstoning a single release's entry but the log semantics would need to be updated to allow for that.</p>",
        "id": 326133135,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675692897
    },
    {
        "content": "<p>The information in the cryptographic data structures is kept <strong>very</strong> minimal.<br>\nAdditionally, the strategy Lann describes for content takedown can also work for other pieces of metadata that we refer to as hashes instead of including in the content of the log directly. This actually includes package names, which we don't include directly in logs and instead refer to by hash. Other future metadata like a \"rationale\" or \"context\" field for a given event could also be included via hash-indirection with the content stored separately. It's my hope that by being cautious here and employing this indirection we can stay ahead of any concerns that might make us need to rewrite the whole log.</p>",
        "id": 326185523,
        "sender_full_name": "Robin Brown",
        "timestamp": 1675701210
    },
    {
        "content": "<blockquote>\n<p>This actually includes package names, which we don't include directly in logs and instead refer to by hash.</p>\n</blockquote>\n<p>You mean directly hashing the package name? That would be crackable using something like hashcat given enough compute power, right? Or do you mean some kind of scheme which has a commitment to a specific name while only being able to crack it with knowledge of a separately stored salt that can be censored if necessary?</p>",
        "id": 326190011,
        "sender_full_name": "bjorn3",
        "timestamp": 1675702413
    },
    {
        "content": "<p>It is an interesting idea but I am not aware of any case where the hash of censored content also needs to be censored.</p>",
        "id": 326196241,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675704094
    },
    {
        "content": "<p>If the package name is simple enough for the hash to be crackable in reasonable time, you will need to censor the hash itself too to prevent being able to get the information anyway, right?</p>",
        "id": 326198315,
        "sender_full_name": "bjorn3",
        "timestamp": 1675704700
    },
    {
        "content": "<p>If it was a <em>security</em> issue, yes</p>",
        "id": 326199283,
        "sender_full_name": "Lann Martin",
        "timestamp": 1675704929
    }
]