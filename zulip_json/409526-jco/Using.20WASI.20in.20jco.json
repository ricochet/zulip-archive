[
    {
        "content": "<p>I am trying to wrap my head around using WASI with the component model and have some questions. Lets say I have a component written in Rust like:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package wasm-version-tests:component;\n\ninterface clients {\n  resource wasm-version-tests-client {\n    constructor();\n    hello-world: func() -&gt; string;\n  }\n}\n\n\nworld wasm-version-tests {\n  export clients;\n}\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wit_bindgen</span>::<span class=\"n\">generate</span><span class=\"o\">!</span><span class=\"p\">({</span>\n<span class=\"n\">world</span>: <span class=\"s\">\"wasm-version-tests\"</span><span class=\"p\">,</span>\n<span class=\"n\">exports</span>: <span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"s\">\"wasm-version-tests:component/clients/wasm-version-tests-client\"</span>: <span class=\"nc\">WasmVersionTestsClients</span><span class=\"p\">,</span>\n<span class=\"p\">},</span>\n<span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">exports</span>::<span class=\"n\">wasm_version_tests</span>::<span class=\"n\">component</span>::<span class=\"n\">clients</span>::<span class=\"n\">GuestWasmVersionTestsClient</span><span class=\"p\">;</span>\n\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WasmVersionTestsClients</span><span class=\"p\">;</span>\n\n<span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">GuestWasmVersionTestsClient</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WasmVersionTestsClients</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">fetch_url</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">url</span>: <span class=\"nb\">String</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nb\">String</span> <span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"c1\">//Pretend fetch is doing an http call</span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">);</span>\n<span class=\"w\">        </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"s\">\"Hello World\"</span><span class=\"p\">.</span><span class=\"n\">to_string</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"k\">fn</span> <span class=\"nf\">new</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">Self</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">WasmVersionTestsClients</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>This component performs an <code>http</code> call. If I compile this to <code>wasm32-wasi</code> and use <code>jco transpile</code>  on the resulting binary, will the <code>wasi:http</code> shim automatically be included? Or do I need to specify an <code>import wasi:http</code> statement in my <code>.wit</code> file and use the imported <code>wasi:http</code> functions to handle all <code>http</code> traffic? I know in the <code>wasm-bindgen</code> era several crates (http ones specifically) had special compilation flags for <code>wasm32</code> targets that let them work directly with the bindings, but as far as I can tell that doesn't seem to be a thing yet for <code>wit</code> and the component model.</p>",
        "id": 411101346,
        "sender_full_name": "Landon James",
        "timestamp": 1704326952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"678052\">@Landon James</span> in order to depend on HTTP in WASI, you do indeed need to directly specify you depend on it.</p>",
        "id": 411182047,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704371956
    },
    {
        "content": "<p>What we did in the <code>surf</code> crate (one of the HTTP crates from the <code>wasm-bindgen</code> era) was to just assume that if you compiled with the bindgen flag on, that the <code>js-sys</code>/<code>web-sys</code> APIs would be present. This really wasn't great.</p>",
        "id": 411182334,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704372071
    },
    {
        "content": "<p>Actually, let me walk back my earlier statement a little bit perhaps</p>",
        "id": 411182381,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704372094
    },
    {
        "content": "<p>if you want to use <code>wasi:http</code> in Rust, you do need to import it directly. <code>jco</code> knows how to provide that interface, so you'll generally be fine if you do that.</p>",
        "id": 411182495,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704372129
    },
    {
        "content": "<p>A different way of doing this could be to just use the Rust stdlib's TCP abstraction, and bring your own HTTP stack. Doing this natively for WASI Preview 2 is likely going to be some work because afaik there are no async Rust runtimes which directly support it yet (the stdlib doesn't either). But it <em>is</em> possible to support it by targeting WASI Preview 1 and using the compat shim to allow it to work on Preview 2.</p>",
        "id": 411182846,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704372273
    },
    {
        "content": "<p>wrt <code>jco</code>: targeting Node.js should give you access to TCP sockets (though I think we might still be missing the TCP bind syscall in the implementation) - while targeting the browser will only give you access to the high-level HTTP interfaces (but the browser impl has been temporarily de-prioritized in favor of getting Node.js over the finish line first)</p>",
        "id": 411183032,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704372359
    },
    {
        "content": "<p>Does that... make sense?</p>",
        "id": 411183087,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1704372366
    },
    {
        "content": "<p>Yes I think that (mostly) makes sense, thank you! My one clarifying question would be around:</p>\n<blockquote>\n<p>if you want to use wasi:http in Rust, you do need to import it directly. jco knows how to provide that interface, so you'll generally be fine if you do that.</p>\n</blockquote>\n<p>I am assuming that this means importing the <a href=\"https://crates.io/crates/wasmtime-wasi-http\"><code>wasmtime-wasi-http</code> crate</a> and using the functions from there to make my <code>http</code> calls? But I would not need to import the <code>wasi:http</code> wit definitions from <a href=\"https://github.com/WebAssembly/wasi-http\">https://github.com/WebAssembly/wasi-http</a> unless I wanted to include those types in my component's public API?</p>\n<p>Non-jco related sidenote: importing <code>wasmtime-wasi-http</code> to my project and building for <code>wasm32-wasi</code> causes several build failures via the <code>wasmtime-fiber</code> crate:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>error:<span class=\"w\"> </span>fibers<span class=\"w\"> </span>are<span class=\"w\"> </span>not<span class=\"w\"> </span>supported<span class=\"w\"> </span>on<span class=\"w\"> </span>this<span class=\"w\"> </span>platform\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>/Users/lnj/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-fiber-16.0.0/src/lib.rs:17:9\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">17</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>compile_error!<span class=\"o\">(</span><span class=\"s2\">\"fibers are not supported on this platform\"</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">         </span>^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nerror<span class=\"o\">[</span>E0433<span class=\"o\">]</span>:<span class=\"w\"> </span>failed<span class=\"w\"> </span>to<span class=\"w\"> </span>resolve:<span class=\"w\"> </span>use<span class=\"w\"> </span>of<span class=\"w\"> </span>undeclared<span class=\"w\"> </span>crate<span class=\"w\"> </span>or<span class=\"w\"> </span>module<span class=\"w\"> </span><span class=\"sb\">`</span>imp<span class=\"sb\">`</span>\n<span class=\"w\">  </span>--&gt;<span class=\"w\"> </span>/Users/lnj/.cargo/registry/src/index.crates.io-6f17d22bba15001f/wasmtime-fiber-16.0.0/src/lib.rs:27:17\n<span class=\"w\">   </span><span class=\"p\">|</span>\n<span class=\"m\">27</span><span class=\"w\"> </span><span class=\"p\">|</span><span class=\"w\">         </span>Ok<span class=\"o\">(</span>Self<span class=\"o\">(</span>imp::FiberStack::new<span class=\"o\">(</span>size<span class=\"o\">)</span>?<span class=\"o\">))</span>\n<span class=\"w\">   </span><span class=\"p\">|</span><span class=\"w\">                 </span>^^^<span class=\"w\"> </span>use<span class=\"w\"> </span>of<span class=\"w\"> </span>undeclared<span class=\"w\"> </span>crate<span class=\"w\"> </span>or<span class=\"w\"> </span>module<span class=\"w\"> </span><span class=\"sb\">`</span>imp<span class=\"sb\">`</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1030c6e5848a6ff4c674a6e128d06b4d6fc3c254\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653737623431643438366633383532373435653139303735363862313965303839343039383061313234393533373238623038656334373563613537366164332f576562417373656d626c792f776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http\" title=\"GitHub - WebAssembly/wasi-http\">GitHub - WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 411411365,
        "sender_full_name": "Landon James",
        "timestamp": 1704478342
    },
    {
        "content": "<p>wasmtime-wasi-http depends on wasmtime, so it will only build for the platforms wasmtime builds for</p>",
        "id": 411534220,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704570846
    },
    {
        "content": "<p>it is a host implementation of wasi-http</p>",
        "id": 411534234,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704570866
    },
    {
        "content": "<p>if you are trying to use wasi-http interfaces from webassembly, you should use wit-bindgen in your crate</p>",
        "id": 411534251,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704570890
    },
    {
        "content": "<p>with the wasi-http wits</p>",
        "id": 411534267,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1704570904
    },
    {
        "content": "<p>Got this all figured out and documented in <a href=\"https://github.com/landonxjames/wasi-http-test\">this repo</a>. Thanks for all the help!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/landonxjames/wasi-http-test\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2dd052f3b020b5e18638dd4a08416a4be2a00606\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383131393166396639333331666438336564353061323161643330376334613462333637613537313262656363396335623235623034626465343031363738382f6c616e646f6e786a616d65732f776173692d687474702d74657374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/landonxjames/wasi-http-test\" title=\"GitHub - landonxjames/wasi-http-test\">GitHub - landonxjames/wasi-http-test</a></div><div class=\"message_embed_description\">Contribute to landonxjames/wasi-http-test development by creating an account on GitHub.</div></div></div>",
        "id": 412050398,
        "sender_full_name": "Landon James",
        "timestamp": 1704853793
    },
    {
        "content": "<p>Funnily enough, I happen to be doing something similar and ended up with a codebase very similar to yours -- one thing I wanted to ask is how you built those generated typescript bindings? I used only <code>incoming-handler</code> so I just wrote the minimal required type declarations by hand. </p>\n<p>I did a tiny bit of searching around <code>jco</code> and <code>componentize-js</code> underneath to see if there was something for that (generating type declarations) but didn't find anything.</p>",
        "id": 412050971,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1704854143
    },
    {
        "content": "<p>Thankfully thats one of the easier steps, you can look through the <code>build</code> script in that repo's <code>package.json</code> for the full steps, but the gist of it is:</p>\n<ul>\n<li>Build the wasm binary with Rust</li>\n<li>Run <code>wasm-tools component new</code> on that binary to get the component metadata in there</li>\n<li>Then pull in <code>jco</code> via your package manager and run something along the lines of :</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>npx<span class=\"w\"> </span>jco<span class=\"w\"> </span>transpile<span class=\"w\"> </span>./path/to/your/componentized/binary<span class=\"w\"> </span>-o<span class=\"w\">  </span>./path/to/output<span class=\"w\"> </span>--no-namespaced-exports\n</code></pre></div>\n<p>And it will output the typescript definitions. In my repo that is everything in <a href=\"https://github.com/landonxjames/wasi-http-test/tree/58550dd6927d69fabcb4228eea7ff18b917626e3/src/generated-js-runtime-bindings\">this directory</a>. Note that the <code>--no-namespaced-exports</code> flag is required because <code>jco</code> by default generates some code that is just barely not typescript compatible.</p>",
        "id": 412052123,
        "sender_full_name": "Landon James",
        "timestamp": 1704854786
    },
    {
        "content": "<p>Thanks for the tips and spelling it out in detail, I'll see if I can work that into my flow!</p>",
        "id": 412056351,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1704857369
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"678052\">@Landon James</span> if I already have a 12_05 component, I should just be able to use this directly, yes? In other words, I should just be able to jco transpile and directly use it.</p>",
        "id": 412123100,
        "sender_full_name": "Ralph",
        "timestamp": 1704886898
    },
    {
        "content": "<p>Oh hey <span class=\"user-mention\" data-user-id=\"678052\">@Landon James</span> if you're interested in the code that I ended up with, it's up here after a bunch of polishing: </p>\n<p><a href=\"https://github.com/wasmCloud/wasmCloud/pull/1300/files\">https://github.com/wasmCloud/wasmCloud/pull/1300/files</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wasmCloud/wasmCloud/pull/1300/files\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bd0632c933ac849587b2546693ee76559eb5217c\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3132333936383132373f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wasmCloud/wasmCloud/pull/1300/files\" title=\"feat(examples): add typescript http echo actor by vados-cosmonic · Pull Request #1300 · wasmCloud/wasmCloud\">feat(examples): add typescript http echo actor by vados-cosmonic · Pull Request #1300 · wasmCloud/wasmCloud</a></div><div class=\"message_embed_description\">Feature or Problem\n\nAs Javascript support for WebAssembly progresses along with the jco toolchain, it&#39;s possible to build actors that work with the wasmcloud ecosystem, leveraging the existing ...</div></div></div>",
        "id": 412196068,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1704910681
    },
    {
        "content": "<p>hopefully it's pretty easy to follow -- I ended up copying type definitions from <code>jco</code> explicitly, the ones in there are pretty complete so I didn't have to work too hard -- just some typescript type declaration wrangling</p>",
        "id": 412196251,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1704910742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/409526-jco/topic/Using.20WASI.20in.20jco/near/412123100\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"678052\">Landon James</span> if I already have a 12_05 component, I should just be able to use this directly, yes? In other words, I should just be able to jco transpile and directly use it.</p>\n</blockquote>\n<p>Yep that is my understanding! <code>jco</code> makes it pretty easy to transpile the js bindings from any wasm (component) binary.</p>",
        "id": 412202180,
        "sender_full_name": "Landon James",
        "timestamp": 1704913283
    }
]