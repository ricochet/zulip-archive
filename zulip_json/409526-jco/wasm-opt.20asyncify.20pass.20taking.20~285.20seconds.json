[
    {
        "content": "<p>Hey all, did some exploration after the meeting today and it looks like even with <code>-O0</code> and <code>--asyncify</code> the actual <code>wasm-opt</code> asyncify pass takes ~285 seconds. </p>\n<p>Here's some of the debug output:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">STDERR</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">reading</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">reading</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">XXXXXXV5Q0g2</span><span class=\"o\">/</span><span class=\"k\">in</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Loading</span><span class=\"w\"> </span><span class=\"o\">'/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">XXXXXXV5Q0g2</span><span class=\"o\">/</span><span class=\"k\">in</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">'..</span><span class=\"p\">.</span>\n<span class=\"n\">warning</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"n\">subsection</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"mi\">11208202</span>\n<span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">passes</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"n\">PassRunner</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">passes</span>\n<span class=\"p\">[</span><span class=\"n\">PassRunner</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">asyncify</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mf\">285.411</span><span class=\"w\"> </span><span class=\"n\">seconds</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"n\">PassRunner</span><span class=\"p\">]</span><span class=\"w\">   </span><span class=\"p\">(</span><span class=\"n\">validating</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"n\">PassRunner</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">passes</span><span class=\"w\"> </span><span class=\"n\">took</span><span class=\"w\"> </span><span class=\"mf\">285.411</span><span class=\"w\"> </span><span class=\"n\">seconds</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"n\">PassRunner</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kr\">final</span><span class=\"w\"> </span><span class=\"n\">validation</span><span class=\"p\">)</span>\n<span class=\"n\">writing</span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"n\">writing</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">XXXXXXV5Q0g2</span><span class=\"o\">/</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Opening</span><span class=\"w\"> </span><span class=\"o\">'/</span><span class=\"n\">tmp</span><span class=\"o\">/</span><span class=\"n\">XXXXXXV5Q0g2</span><span class=\"o\">/</span><span class=\"n\">out</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"o\">'</span>\n</code></pre></div>\n<p>I think there might not be a way to get past this for <code>asyncify</code> itself, so unless someone has some insight into some other flags I should be using, we may have to do some combination of the following:</p>\n<ul>\n<li>Prioritize testing with JSPI</li>\n<li>Commit one or more pre-built asyncify binary to the repo</li>\n</ul>\n<p>Committing just one more binary (and possibly writing it in some other language like Rust) which has all the tests we'd like to do <em>might</em> not be a terrible solution after all, as opposed to using the ability to dynamically build the JS components during the tests.</p>",
        "id": 492561131,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1736360479
    },
    {
        "content": "<p>An optimized approach might be to splice in asyncify compatible functions in the ComponentizeJS splicer itself</p>",
        "id": 492585461,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1736370881
    },
    {
        "content": "<p>ie having ComponentizeJS have an \"asyncify aware\" output mode</p>",
        "id": 492585496,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1736370898
    },
    {
        "content": "<p>Ah thanks that's a good idea -- this is quickly becoming a separate effort worth doing, but in that direction one thing I'll do just to verify that pre-asyncify'd starlingmonkey works properly, then start looking at the slicer. </p>\n<p>Will put this on the back burner though for now!</p>",
        "id": 492646035,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1736405551
    }
]