[
    {
        "content": "<p>Hi, while testing wit-bindgen for Kotlin guests, I noticed that <code>jco transpile</code>d program fails to construct imported resource when the corresponding <code>[resource-drop]</code> function is not imported (it is sometimes removed by the compiler DCE when calls to it are proven unreachable). </p>\n<p>Looking through the code, <code>jco transpile</code> doesn't initialise <code>handleTables</code> for such resource in <a href=\"https://github.com/bytecodealliance/jco/blob/6555ea388ce62e2f3816f9cef1c9210b06e40d5c/crates/js-component-bindgen/src/transpile_bindgen.rs#L752\">trampoline_bindgen.rs</a>. Then on runtime, when calling imported resource <code>constructor</code>,  generated JS function ...</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">resourceTransferOwn</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">fromRid</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">toRid</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">rscTableRemove</span><span class=\"p\">(</span><span class=\"n\">handleTables</span><span class=\"p\">[</span><span class=\"n\">fromRid</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">handle</span><span class=\"p\">);</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">rscTableCreateOwn</span><span class=\"p\">(</span><span class=\"n\">handleTables</span><span class=\"p\">[</span><span class=\"n\">toRid</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">rep</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>... evaluates <code>handleTables[toRid]</code> to <code>undefined</code>,  causing the construction to crash.</p>\n<p>Forcing <code>\"[resource-drop]...\"</code> import to stay alive solves the issue. Is this is a requirement for binding generators to keep resource-drops imports alive or a <code>jco transpile</code> issue?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/6555ea388ce62e2f3816f9cef1c9210b06e40d5c/crates/js-component-bindgen/src/transpile_bindgen.rs#L752\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d64b398913ac1bee5a960eb26518f49b8aa9aec0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323264383564613361633135623637366438636265363334393766303438396466623436343130623136636433333664316338643961393135386363316239662f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/6555ea388ce62e2f3816f9cef1c9210b06e40d5c/crates/js-component-bindgen/src/transpile_bindgen.rs#L752\" title=\"jco/crates/js-component-bindgen/src/transpile_bindgen.rs at 6555ea388ce62e2f3816f9cef1c9210b06e40d5c · bytecodealliance/jco\">jco/crates/js-component-bindgen/src/transpile_bindgen.rs at 6555ea388ce62e2f3816f9cef1c9210b06e40d5c · bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 435368194,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1714044688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"587245\">@Slava Kuzmich</span> this sounds like a Jco bug to me, are you able to share the binary that is causing the issue? Does the resource have no functions at all then that it's table isn't being initialized by its functions?</p>",
        "id": 435438431,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714067180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> I've attached binaries for both cases: with and without <code>\"[resource-drop]x\"</code> (never actually called). Testing setup requires swapping one core module in the final artefact (due to WasmGC). I've included these core files and README with repro steps.</p>\n<p>Resource is </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">constructor</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">s32</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">get</span><span class=\"o\">-</span><span class=\"n\">a</span>: <span class=\"nc\">func</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">s32</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">set</span><span class=\"o\">-</span><span class=\"n\">a</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">a</span>: <span class=\"nc\">s32</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">add</span>: <span class=\"nc\">static</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">x</span>: <span class=\"nc\">x</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">a</span>: <span class=\"nc\">s32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">x</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>But only <code>constructor</code> and <code>get-a</code> are actually called.<br>\n<a href=\"/user_uploads/15107/SigbpKbJlSg-Fg7hfNprsylb/jco_repro.zip\">jco_repro.zip</a></p>",
        "id": 435466665,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1714078611
    },
    {
        "content": "<p>I've traced that <code>ensure_resource_table</code>  is called for this resource with RID 18 only in \"ok\" case and only when handling <code>Trampoline::ResourceDrop</code></p>",
        "id": 435468235,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1714079279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"587245\">@Slava Kuzmich</span> thanks for sharing this - I tried running the replication but it doesn't seem to match the expectation. In the fail case I get a GC error, even when copying the core Wasm, while in the ok case I get a Wasm core erro, and when running <code>--tracing</code> in Jco transpile I can't see any other calls at all, or any resource calls. The core Wasms might not be lining up properly in the replication I think for the GC copy.</p>\n<p>Can you confirm which version of Jco you are using? I'm just releasing Jco 1.2.0, it would be great to ensure the replication is fully working on that one.</p>",
        "id": 435651160,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714161732
    },
    {
        "content": "<p>Thanks for looking into it! I've checked with jco 1.2.1, the problem reproduced in the same way:</p>\n<ul>\n<li>ok case successfully prints 51 lines of logs with \"210\" at the end, indicating that it called the resource</li>\n<li>fail case prints 50 lines of logs with the error message at at the end:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">file</span>:<span class=\"sd\">///Users/skuzmich/Downloads/jco_repro/fail/out/kco-wasm-wasi.mjs:81</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">free</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"n\">T_FLAG</span><span class=\"p\">;</span>\n<span class=\"w\">                    </span><span class=\"o\">^</span>\n\n<span class=\"n\">TypeError</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">read</span><span class=\"w\"> </span><span class=\"n\">properties</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">undefined</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">reading</span><span class=\"w\"> </span><span class=\"sc\">'0'</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">rscTableCreateOwn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">file</span>:<span class=\"sd\">///Users/skuzmich/Downloads/jco_repro/fail/out/kco-wasm-wasi.mjs:81:21)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">resourceTransferOwn</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">file</span>:<span class=\"sd\">///Users/skuzmich/Downloads/jco_repro/fail/out/kco-wasm-wasi.mjs:114:10)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span>:<span class=\"c1\">//wasm/437a0c32:wasm-function[10]:0x1c3</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">kco</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"n\">Jsiface</span><span class=\"p\">.</span><span class=\"n\">constructorX</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span>:<span class=\"c1\">//wasm/&lt;kco&gt;-00082e3e:wasm-function[536]:0xb6be)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">kco</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"n\">TestExportsImpl</span><span class=\"p\">.</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span>:<span class=\"c1\">//wasm/&lt;kco&gt;-00082e3e:wasm-function[515]:0xb07e)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">kco</span><span class=\"o\">&gt;</span><span class=\"p\">.</span><span class=\"n\">__wasm_export_test</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">wasm</span>:<span class=\"c1\">//wasm/&lt;kco&gt;-00082e3e:wasm-function[607]:0xe230)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"p\">.</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">file</span>:<span class=\"sd\">///Users/skuzmich/Downloads/jco_repro/fail/out/kco-wasm-wasi.mjs:4080:35)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">eval</span><span class=\"p\">]</span>:<span class=\"mi\">1</span>:<span class=\"mi\">54</span>\n</code></pre></div>\n<p>What kind of GC errors do you get? Note that Node.js v22.0.0 is needed, as previous versions don't have the final GC support.</p>\n<blockquote>\n<p>The core Wasms might not be lining up properly in the replication I think for the GC copy.</p>\n</blockquote>\n<p>It lines up for me. Note that both ok and fail cases have separate respective core files. Also, jco needs to run with <code>--base-cutoff 0</code>, otherwise core files could be named differently.</p>",
        "id": 436005171,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1714385544
    },
    {
        "content": "<p>when I follow the steps exactly I get this in the failing case:</p>",
        "id": 436136783,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714423831
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasm</span>:<span class=\"c1\">//wasm/952a0726:1</span>\n\n\n<span class=\"n\">RuntimeError</span>: <span class=\"nc\">unreachable</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span>:<span class=\"c1\">//wasm/952a0726:wasm-function[30]:0x517</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">Object</span><span class=\"p\">.</span><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">file</span>:<span class=\"sd\">///Users/gbedford/Projects/jco/out/kco-wasm-wasi.js:4173:35)</span>\n<span class=\"w\">    </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">file</span>:<span class=\"sd\">///Users/gbedford/Projects/jco/test.mjs:3:6</span>\n\n<span class=\"n\">Node</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"w\"> </span><span class=\"n\">v22</span><span class=\"p\">.</span><span class=\"mf\">0.0</span>\n</code></pre></div>",
        "id": 436136793,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714423834
    },
    {
        "content": "<p>where the unreachable is the call at</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"n\">test</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">exports9</span><span class=\"p\">[</span><span class=\"o\">'</span><span class=\"na\">cm</span>:<span class=\"nc\">example</span><span class=\"o\">/</span><span class=\"n\">test</span>#<span class=\"n\">test</span><span class=\"o\">'</span><span class=\"p\">]();</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 436136848,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714423855
    },
    {
        "content": "<p>no other calls happen</p>",
        "id": 436136873,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714423867
    },
    {
        "content": "<p>ohh wait I finally got it to work, yeah the base64 cutoff and Node.js versions were quite specific</p>",
        "id": 436137069,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714423937
    },
    {
        "content": "<p>looking into it now</p>",
        "id": 436137092,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714423942
    },
    {
        "content": "<p>So on further thought here I think the crash is actually valid</p>",
        "id": 436141793,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714425694
    },
    {
        "content": "<p>If you have a resource that is never dropped, that's not valid</p>",
        "id": 436141827,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714425706
    },
    {
        "content": "<p>Now certainly, there should be a better error</p>",
        "id": 436141847,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714425712
    },
    {
        "content": "<p>but from a component model perspective, creating a resource and never disposing it seems odd</p>",
        "id": 436142023,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714425767
    },
    {
        "content": "<p>I've posted a fix in <a href=\"https://github.com/bytecodealliance/jco/pull/430\">https://github.com/bytecodealliance/jco/pull/430</a>, but I can't land it without properly understanding what is going on here</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/430\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ea70be2cfb5c2408b0d12d1fe8c6b9628ffeef43/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333637633366653739643266346634333966616130663930383037326562653962653135656536393563386536303364303264353936626666646138306633392f62797465636f6465616c6c69616e63652f6a636f2f70756c6c2f343330&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/430\" title=\"fix: support uninitialized resource transfer by guybedford · Pull Request #430 · bytecodealliance/jco\">fix: support uninitialized resource transfer by guybedford · Pull Request #430 · bytecodealliance/jco</a></div><div class=\"message_embed_description\">This adds support for uninitialized resource table transfer. In rare edge cases where the target table is not otherwise referenced by any bindgen code and the resource is never dropped, it is possi...</div></div></div>",
        "id": 436142864,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714426080
    },
    {
        "content": "<p>specifically, what is the composition scenario here that results in an own transfer but not a drop?</p>",
        "id": 436142964,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714426106
    },
    {
        "content": "<p>After further thought, if this component works in Wasmtime it has to work in Jco, so I've gone ahead and published the fix in <a href=\"mailto:jco@1.2.2\">jco@1.2.2</a>.</p>",
        "id": 436167787,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714437962
    },
    {
        "content": "<p>Thanks a lot for the fix!</p>\n<p>In the attached example resource is leaked by accident.<br>\nI haven't found any indication that leaking resource is not valid in the spec. Also, there could be programs that don't leak resources, but also never drop. For example, constructing a resource and processing it in an infinite loop:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">var</span><span class=\"w\"> </span><span class=\"n\">resource</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">R</span><span class=\"p\">();</span>\n<span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">resource</span><span class=\"p\">.</span><span class=\"n\">tick</span><span class=\"p\">();</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>We can't call the drop here, as the resource is needed \"forever\".</p>",
        "id": 436208112,
        "sender_full_name": "Slava Kuzmich",
        "timestamp": 1714460601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"587245\">Slava Kuzmich</span> has marked this topic as resolved.</p>",
        "id": 436208143,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714460613
    },
    {
        "content": "<p>thanks for clarifying, yes a singleton resource is similar to the component lifetime itself, and there may be use cases there</p>",
        "id": 436304997,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714492900
    }
]