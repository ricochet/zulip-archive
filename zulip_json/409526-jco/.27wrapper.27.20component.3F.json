[
    {
        "content": "<p>Hello! I'm experimenting with <code>jco</code> as an alternative to <code>wasm-pack</code> for providing JS bindings to a library I'm writing. The library is written in Rust as a bunch of separate crates, and I was hoping I could:</p>\n<ol>\n<li>wrap each of the crates in a component to expose their functionality individually</li>\n<li>create a 'wrapper' component which just imports/exports all of their functionality.<br>\nI was thinking I could then use <code>jco transpile</code> on the wrapper component to get nice JS bindings with types and stuff, rather than having to write a bunch of bindings by hand like I do for <code>wasm-pack</code>. Plus the component could be used from other languages, too.</li>\n</ol>\n<p>I've been trying to do this for a little while and have got a bit stuck, so figured it's time to ask!</p>\n<ol>\n<li>Is this actually possible? and what would be the right incantation of wasm-tools to generate a WASM file from the WIT (which really only contains imports/exports in the world)</li>\n<li>Is this a good idea? I'm not actually sure it's easier than just writing the bindings by hand (since I need to write the component impls), but there are several other benefits...</li>\n<li>I have no idea if this is possible, but it would be _really_ cool if I could separate out the instantiation of all the separate components, so that e.g. a JS user importing <code>@bsull/library/foo</code> didn't also have to instantiate <code>@bsull/library/bar</code>, etc. That might be a pipe dream and require a manual wrapper library though?</li>\n</ol>\n<p>aside, I've been impressed with how much all of the tooling 'just works' so far (when I get things lined up correctly), thanks for that!</p>",
        "id": 476510168,
        "sender_full_name": "Ben Sully",
        "timestamp": 1728725592
    }
]