[
    {
        "content": "<p>This question is in the context of a component that is transpiled for use in the browser.</p>\n<p>Consider a variant definition in wit:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"o\">-</span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">typea</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">typeb</span><span class=\"p\">(</span><span class=\"n\">list</span><span class=\"o\">&lt;</span><span class=\"kt\">u8</span><span class=\"o\">&gt;</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I notice that when js bindings are generated for this, we get an object with a variant-like shape:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">tag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"typea\"</span>\n<span class=\"w\">     </span><span class=\"n\">val</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"some_value\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>An <code>option</code> is, according to these <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#types\">component-model docs</a>, semantically equivalent to the variant:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">option</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">none</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">some</span><span class=\"p\">(</span><span class=\"n\">ty</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Therefore, I think I should expect that if a function returns an <code>option&lt;string&gt;</code> according to <code>wit</code>, that generated js bindings would unpack the object into a javascript object with a particular \"optional\" structure, such as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">tag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"Some\"</span>\n<span class=\"w\">     </span><span class=\"n\">val</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"some_value\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">{</span>\n<span class=\"w\">     </span><span class=\"n\">tag</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"s\">\"None\"</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I would prefer this! </p>\n<p>But instead, in this <code>option&lt;string&gt;</code> example, we would simply either get a result of type <code>string | undefined</code>. This seems incorrect to me. Shouldn't <code>undefined</code> be reserved for uninitialized variables and the like, rather than the None case of a valid response?</p>\n<p>Open to hearing some alternative opinions here.</p>\n<p>Thanks,<br>\nJames</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#types\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/4158ee91d9e9e65cec4e69f418d888a79921a7b8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313037626463636130313332356335633361633933623036396662393663663464333130303738666362353366653232613361656164383831326338326433392f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#types\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 462224517,
        "sender_full_name": "James Mart",
        "timestamp": 1723589669
    },
    {
        "content": "<p>The mapping of the very common variants option and result to Java script uses a special representation as the more idiomatic way: option uses null for none, result an exception for error. Both provide the happy path value directly.</p>",
        "id": 462269861,
        "sender_full_name": "Christof Petig",
        "timestamp": 1723615440
    }
]