[
    {
        "content": "<p>When I run a built http incoming-request handler component via <code>jco serve</code> there are no errors. But when I attempt to run the same .wasm with <code>wasmtime serve</code> it results in the error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">cli</span><span class=\"o\">/</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"o\">@</span><span class=\"mf\">0.2.2</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">instance</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">terminal</span><span class=\"o\">-</span><span class=\"n\">input</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">wrong</span><span class=\"w\"> </span><span class=\"k\">type</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">resource</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">missing</span>\n</code></pre></div>\n<p>The part which ties back to this topic title is that I have commented out the terminal imports from the wit files used during the <code>jco componentize</code>.</p>\n<p>example;</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"n\">rg</span><span class=\"w\"> </span><span class=\"s\">\"import terminal\"</span>\n<span class=\"n\">deps</span><span class=\"o\">/</span><span class=\"n\">wasi_cli</span><span class=\"o\">@</span><span class=\"mf\">0.2.0.</span><span class=\"n\">wit</span>\n<span class=\"mi\">109</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-input;</span>\n<span class=\"mi\">110</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-output;</span>\n<span class=\"mi\">111</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-stdin;</span>\n<span class=\"mi\">112</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-stdout;</span>\n<span class=\"mi\">113</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-stderr;</span>\n<span class=\"mi\">138</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-input;</span>\n<span class=\"mi\">139</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-output;</span>\n<span class=\"mi\">140</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-stdin;</span>\n<span class=\"mi\">141</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-stdout;</span>\n<span class=\"mi\">142</span><span class=\"p\">:</span><span class=\"w\">  </span><span class=\"c1\">// import terminal-stderr;</span>\n</code></pre></div>\n<p>So why is it being imported by the component wasm?</p>",
        "id": 484805936,
        "sender_full_name": "Tylr",
        "timestamp": 1732745038
    },
    {
        "content": "<p>Wasmtime doesn't enable the WASI capabilities by default. Perhaps try <code>wasmtime serve -S common</code>? Alternatively you can build a pure server component with Jco using the <code>--disable all</code> flag, since by default we support console logging on the server implementation.</p>",
        "id": 484810544,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1732747554
    },
    {
        "content": "<p>adding <code>-S common</code> fixed the error from wasmtime.<br>\nBut why did I need the terminal-input import? afaik it isnt being used by my component, and is removed from the wit files.<br>\nDo I need to run some sort of treeshaking / optimizer like <code>jco opt</code> to have the terminal declarations removed?</p>",
        "id": 484811054,
        "sender_full_name": "Tylr",
        "timestamp": 1732747897
    },
    {
        "content": "<p>If you run componentize with <code>disable</code> for all features then you can build a pure component with no WASI imports. By default we use WASI logging to be able to support displaying error messages as well as supporting <code>console.log</code> etc, which is on by default for debugging purposes.</p>",
        "id": 484811588,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1732748226
    },
    {
        "content": "<p>Ill play with the options and see what i can glean</p>",
        "id": 484813210,
        "sender_full_name": "Tylr",
        "timestamp": 1732749263
    },
    {
        "content": "<p>Hi all. I'm having trouble getting a JavaScript component to use a Rust component. I put together a minimal project and put all the details in this readme: <a href=\"https://github.com/cataggar/StarlingMonkey15/blob/rs-ts-rs/README.md\">https://github.com/cataggar/StarlingMonkey15/blob/rs-ts-rs/README.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cataggar/StarlingMonkey15/blob/rs-ts-rs/README.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/fd473091a2c74d0dca782d30090e221b0ed599b8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663863376439303131643038326432316365306539326132636661316166613362316564336132343038303333353735626665396531386431323261343136352f63617461676761722f537461726c696e674d6f6e6b65793135&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cataggar/StarlingMonkey15/blob/rs-ts-rs/README.md\" title=\"StarlingMonkey15/README.md at rs-ts-rs · cataggar/StarlingMonkey15\">StarlingMonkey15/README.md at rs-ts-rs · cataggar/StarlingMonkey15</a></div><div class=\"message_embed_description\">https://github.com/bytecodealliance/StarlingMonkey/issues/15 - cataggar/StarlingMonkey15</div></div></div>",
        "id": 485532523,
        "sender_full_name": "Cameron Taggart",
        "timestamp": 1733104761
    }
]