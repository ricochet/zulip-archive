[
    {
        "content": "<p>I am trying to understand WASI/Storage options with JCO and I guess the current state of what is available. I am trying to figure out how to preserve some state between executions of incoming-request from my wasm component. My example use case is that I want to provide 'connector' objects which make API calls with keys, or oauth tokens. I need to allow customers to define the behaviors for these in javascript and wasm allows a way to sandbox the customer code, constrain access and resources without having to configure larger complex security stacks around containers, all while providing a browser based runtime for them to test/assert their code. To accomplish this I need to load some minimal state and allow the code to update this state (like for an oauth refresh token exchange it needs to set the new token). I see the following options available,</p>\n<p>1) WASI HTTP + External Service<br>\nSend an http request to an external storage to load the needed state on each request. For example I could provide credentials via env args + wasi ctx and communicate to redis to load or update state, perform locks, etc. componentize js supports this binding and I can use the 'fetch' api within the js code and how the wasm runtime fulfill the request. The issue I dislike about this is that it requires more security configuration outside the runtime. (I would like to keep the security configurations and access setup close to the runtime and not split between an external system and the runtime).</p>\n<p>2) WASI keyvalue<br>\nThere is a wasi draft for keyvalue storage, while it appears some support for this is enabled in wasmtime, it is not in the list of features from componentize-js and I dont see it in the bindings setup for jco.</p>\n<p>2) WASI filesystem<br>\nIts possible I could mock a virtual filesystem with the runtime and use the file access to load and set state. However it seems this is <a href=\"https://github.com/bytecodealliance/ComponentizeJS/tree/main?tab=readme-ov-file#:~:text=The%20following%20APIs%20are%20available%3A\">not in the features yet</a> for componentizejs, and it also doesn't seem to be the direction others intend given the keyvalue draft exists.</p>\n<p>4) Custom export/import<br>\nI could add my own keyvalue binding and update componentize-js with my own linker, but this is starting to become too complex for my current knowledge, and with changes in the lbiraries I predict this would become a pain point to maintain and is a more difficult approach if im still learning.</p>\n<p>5) Implement the keyvalue component in another language and compose my own wasm file with this one. Ive been reading through the componentizejs <a href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/main/crates/spidermonkey-embedding-splicer/src/bindgen.rs#L568\">bindgen.rs</a> but I do not yet understand the relations to know what functions would be available and or how to reference them for import from the js ctx. Would step 5 be as simple as taking a wasm component which implemented keyvalue and transpile it, and assume the runtime has the feature enabled? (im not sure if it can just assume host provided functions like that and still handle the types correctly?) Maybe the componentEmbed is somehow involved?</p>\n<p>Does anyone have a suggested approach for a simple way to allow state read and update from the wasm component + jco?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/tree/main?tab=readme-ov-file#:~:text=The%20following%20APIs%20are%20available%3A\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/86e51b217608cc53f5a0e140116151848d413f70/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336536396336646230313636363631343538393433373263343562646332613232663431663038346235616666373133313665633334363338643130653865322f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a53&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/tree/main?tab=readme-ov-file#:~:text=The%20following%20APIs%20are%20available%3A\" title=\"GitHub - bytecodealliance/ComponentizeJS: JS -&gt; WebAssembly Component\">GitHub - bytecodealliance/ComponentizeJS: JS -&gt; WebAssembly Component</a></div><div class=\"message_embed_description\">JS -&gt; WebAssembly Component. Contribute to bytecodealliance/ComponentizeJS development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/main/crates/spidermonkey-embedding-splicer/src/bindgen.rs#L568\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/86e51b217608cc53f5a0e140116151848d413f70/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336536396336646230313636363631343538393433373263343562646332613232663431663038346235616666373133313665633334363338643130653865322f62797465636f6465616c6c69616e63652f436f6d706f6e656e74697a654a53&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/ComponentizeJS/blob/main/crates/spidermonkey-embedding-splicer/src/bindgen.rs#L568\" title=\"ComponentizeJS/crates/spidermonkey-embedding-splicer/src/bindgen.rs at main 路 bytecodealliance/ComponentizeJS\">ComponentizeJS/crates/spidermonkey-embedding-splicer/src/bindgen.rs at main 路 bytecodealliance/ComponentizeJS</a></div><div class=\"message_embed_description\">JS -&gt; WebAssembly Component. Contribute to bytecodealliance/ComponentizeJS development by creating an account on GitHub.</div></div></div>",
        "id": 487111082,
        "sender_full_name": "Tylr",
        "timestamp": 1733782745
    },
    {
        "content": "<p>Hey Tylr, as you've noticed, you're going to have to rely on <em>something</em> for component-external storage. All the routes that you've outlined <em>are</em> possible (great writeup/exploration!) but since that isn't quite jco's concern, you do need to provide some sort of storage to the component.</p>\n<p>One thing I want to note is that it <em>is</em> possible to reuse (though not recommended) the component for serving requests if you make an embedding/thing that runs the component (for example see <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L489\">the code behind <code>wasmtime serve</code></a>, you <em>could</em> choose to re-use the instantiated module though it's really not recommended)</p>\n<p>There are a few companies who <em>add</em> functionality to components (like storage) greater -- I'm biased of course since I work at the company that maintains wasmCloud, but this might be a great time to slot your component into the existing frameworks and give them a shot!</p>\n<p>That said, maybe we can start to narrow down these choices by narrowing down what kind of storage you expect to be able to access from the component? What is the shape of the outside world you want to see? Obviously keyvalue and filesystem are very different expectations.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L489\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3eefadd7d0a63c80e2ec58d11a01acf615d96da7/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636364666130646339356531393565356266376436663838656138626633366162626462656662626233623937346431666638613863643866303461393539392f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L489\" title=\"wasmtime/src/commands/serve.rs at main 路 bytecodealliance/wasmtime\">wasmtime/src/commands/serve.rs at main 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 487138787,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1733795834
    },
    {
        "content": "<p>I think what i want is the <a href=\"https://github.com/WebAssembly/wasi-keyvalue/blob/main/wit/store.wit#L71\">bucket resource</a> from the wasi keyvalue. I want the runtime to provide the interface so the user defined code does not need to know the implementations which fulfill the storage.</p>\n<p>As for how this pertains to jco, I think is my confusion around how to import a function the host runtime will provide. It looks like wasmtime <a href=\"https://github.com/bytecodealliance/wasmtime/blob/438c0329562d36acad1dbc270ee1b5ec96227703/src/commands/serve.rs#L197\">includes the wasi keyvalue interface in the linker</a>. Ive added the wit file for the store and imported it in my component and have generated the types from it. However upon execution of the wasm component via <code>wasmtime serve -S common</code> I get the following error</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"nc\">component</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">instance</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">keyvalue</span><span class=\"o\">/</span><span class=\"n\">store</span><span class=\"o\">@</span><span class=\"mf\">0.2.0</span><span class=\"o\">-</span><span class=\"n\">draft</span><span class=\"err\">`</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">matching</span><span class=\"w\"> </span><span class=\"n\">implementation</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">linker</span>\n</code></pre></div>\n<p>I think there are two possible issues,<br>\n1) I have the wrong import name for jco to know which function im referencing.<br>\n2) jco will not bind my function at all because it is not in the list of known host interface bindings.</p>\n<p>Im not sure if either or both are the issue. Trying to read through all the code of the spidermonkey bindings crate, the jco bindings and shims to understand, but it's.. a lot to comprehend/learn <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> </p>\n<p>As for existing store examples you mentioned;</p>\n<p>I see the <a href=\"https://workers.wasmlabs.dev/docs/features/key-value\">vmware implementation</a> appears to append the data in the request response. Im guessing their implementation predated the wasi k/v draft? But the issue I have with it they already admitted, it cannot handle concurrent requests with state changes. (they probably ensure ordered processing via a queue or something to work around, but i'd like to stay close to the proposed wasi specs if possible and not alter the incoming-request interface).</p>\n<p>It looks like the wasmcloud implementation rolls its own approach with those wrpc interface files. I see some references to NATS in the wasmcloud site, so im guessing either the wasmcloud runtime implements the host function directly for import, <em>or</em> it just defined the tcp behavior to communicate to what ever protocol NATS is talking. My instinct is that wasmcloud is doing this second approach given it would allow a lot of flexibility without having to rework the runtime code to provide more interfaces from the host. If that second scenario is the case it falls into the same scenario for having to defer security to the mechanisms available in NATS, and doesn't provide a simple way to test it all without having the NATS running or some mock server.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-keyvalue/blob/main/wit/store.wit#L71\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/28aea13538d6d482a42cbdaa06db1b296c41e277/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616335383738653738303564306633383461383831383533666162353738376336356463373762616137333739376161343738633533623964383332363066652f576562417373656d626c792f776173692d6b657976616c7565&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-keyvalue/blob/main/wit/store.wit#L71\" title=\"wasi-keyvalue/wit/store.wit at main 路 WebAssembly/wasi-keyvalue\">wasi-keyvalue/wit/store.wit at main 路 WebAssembly/wasi-keyvalue</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-keyvalue development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/438c0329562d36acad1dbc270ee1b5ec96227703/src/commands/serve.rs#L197\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/2c3492fe33b1dbb2294309199f20db13da304d1d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363237333730356439336661303965666461306332663034346563393236616666613133623836396139393234656133633863343365313039313164623434312f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/438c0329562d36acad1dbc270ee1b5ec96227703/src/commands/serve.rs#L197\" title=\"wasmtime/src/commands/serve.rs at 438c0329562d36acad1dbc270ee1b5ec96227703 路 bytecodealliance/wasmtime\">wasmtime/src/commands/serve.rs at 438c0329562d36acad1dbc270ee1b5ec96227703 路 bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div>",
        "id": 487313888,
        "sender_full_name": "Tylr",
        "timestamp": 1733854457
    },
    {
        "content": "<p>Been reading all I can find before typing out a reply. Sorry slow response <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 487314066,
        "sender_full_name": "Tylr",
        "timestamp": 1733854519
    },
    {
        "content": "<p>Ah, I guess the nats approach would be simpler if you swap the component out for a mock and compose your wasm with something like this example <a href=\"https://github.com/bytecodealliance/jco/blob/main/examples/guides/04-importing-and-reusing-components.md\">https://github.com/bytecodealliance/jco/blob/main/examples/guides/04-importing-and-reusing-components.md</a></p>\n<p>It wouldn't allow true state updates, but could be mocked with predefined responses for the test cases.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/main/examples/guides/04-importing-and-reusing-components.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/9c1c1c37cb24fb3a8d44c9797a831c4914b87058/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623130363130393132376364333062366130316566306238303262353034346361613865646532653262306563383365306632363333366161393839646333652f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/main/examples/guides/04-importing-and-reusing-components.md\" title=\"jco/examples/guides/04-importing-and-reusing-components.md at main 路 bytecodealliance/jco\">jco/examples/guides/04-importing-and-reusing-components.md at main 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 487321129,
        "sender_full_name": "Tylr",
        "timestamp": 1733857006
    },
    {
        "content": "<p>As for your wasmtime issue, though you're right that wasi keyvalue is built into the linker, it's actually not enabled by <code>-S Common</code>, you need <code>-S keyvalue</code></p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">serve</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">help</span>\n<span class=\"n\">Available</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"n\">options</span><span class=\"p\">:</span>\n\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                            </span><span class=\"n\">cli</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">CLI</span><span class=\"w\"> </span><span class=\"n\">APIs</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">including</span><span class=\"w\"> </span><span class=\"n\">filesystems</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">sockets</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">clocks</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">random</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">             </span><span class=\"n\">cli</span><span class=\"o\">-</span><span class=\"n\">exit</span><span class=\"o\">-</span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">APIs</span><span class=\"w\"> </span><span class=\"n\">marked</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">unstable</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">cli</span><span class=\"o\">-</span><span class=\"n\">exit</span><span class=\"o\">-</span><span class=\"n\">with</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                         </span><span class=\"n\">common</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Deprecated</span><span class=\"w\"> </span><span class=\"n\">alias</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">cli</span><span class=\"err\">`</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                             </span><span class=\"n\">nn</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">neural</span><span class=\"w\"> </span><span class=\"n\">network</span><span class=\"w\"> </span><span class=\"n\">API</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">experimental</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                        </span><span class=\"n\">threads</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">threading</span><span class=\"w\"> </span><span class=\"n\">API</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">experimental</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                           </span><span class=\"n\">http</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">HTTP</span><span class=\"w\"> </span><span class=\"n\">API</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">experimental</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                         </span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"n\">API</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">experimental</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                       </span><span class=\"n\">keyvalue</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">API</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">experimental</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                       </span><span class=\"n\">listenfd</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Inherit</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">file</span><span class=\"w\"> </span><span class=\"n\">descriptors</span><span class=\"w\"> </span><span class=\"n\">following</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">systemd</span><span class=\"w\"> </span><span class=\"n\">listen</span><span class=\"w\"> </span><span class=\"n\">fd</span><span class=\"w\"> </span><span class=\"n\">specification</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">UNIX</span><span class=\"w\"> </span><span class=\"n\">only</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                        </span><span class=\"n\">tcplisten</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Grant</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"n\">TCP</span><span class=\"w\"> </span><span class=\"n\">listen</span><span class=\"w\"> </span><span class=\"n\">socket</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                       </span><span class=\"n\">preview2</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Implement</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">CLI</span><span class=\"w\"> </span><span class=\"n\">APIs</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">preview2</span><span class=\"w\"> </span><span class=\"n\">primitives</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">experimental</span><span class=\"p\">).</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">             </span><span class=\"n\">nn</span><span class=\"o\">-</span><span class=\"n\">graph</span><span class=\"o\">=&lt;</span><span class=\"n\">format</span><span class=\"o\">&gt;</span><span class=\"p\">::</span><span class=\"o\">&lt;</span><span class=\"n\">dir</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Pre</span><span class=\"o\">-</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"n\">machine</span><span class=\"w\"> </span><span class=\"n\">learning</span><span class=\"w\"> </span><span class=\"n\">graphs</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">.</span><span class=\"n\">e</span><span class=\"p\">.,</span><span class=\"w\"> </span><span class=\"n\">models</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">nn</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                </span><span class=\"n\">inherit</span><span class=\"o\">-</span><span class=\"n\">network</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Flag</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">preview2</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">inherit</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"o\">'</span><span class=\"na\">s</span><span class=\"w\"> </span><span class=\"n\">network</span><span class=\"w\"> </span><span class=\"n\">within</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">guest</span><span class=\"w\"> </span><span class=\"n\">so</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">full</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">addresses</span><span class=\"o\">/</span><span class=\"n\">ports</span><span class=\"o\">/</span><span class=\"n\">etc</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">           </span><span class=\"n\">allow</span><span class=\"o\">-</span><span class=\"n\">ip</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">lookup</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Indicates</span><span class=\"w\"> </span><span class=\"n\">whether</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">sockets</span><span class=\"o\">/</span><span class=\"n\">ip</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"o\">-</span><span class=\"n\">lookup</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                            </span><span class=\"n\">tcp</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Indicates</span><span class=\"w\"> </span><span class=\"n\">whether</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">sockets</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">TCP</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                            </span><span class=\"n\">udp</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Indicates</span><span class=\"w\"> </span><span class=\"n\">whether</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi</span><span class=\"p\">:</span><span class=\"nc\">sockets</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">UDP</span><span class=\"w\"> </span><span class=\"n\">support</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">enabled</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">             </span><span class=\"n\">network</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">APIs</span><span class=\"w\"> </span><span class=\"n\">marked</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"o\">@</span><span class=\"n\">unstable</span><span class=\"p\">(</span><span class=\"n\">feature</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">network</span><span class=\"o\">-</span><span class=\"n\">error</span><span class=\"o\">-</span><span class=\"n\">code</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                       </span><span class=\"n\">preview0</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Allows</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">wasi_unstable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">                    </span><span class=\"n\">inherit</span><span class=\"o\">-</span><span class=\"n\">env</span><span class=\"p\">[</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"o\">|</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Inherit</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">environment</span><span class=\"w\"> </span><span class=\"n\">variables</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">parent</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\">              </span><span class=\"n\">config</span><span class=\"o\">-</span><span class=\"n\">var</span><span class=\"o\">=&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;=&lt;</span><span class=\"n\">val</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Pass</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"w\"> </span><span class=\"n\">config</span><span class=\"w\"> </span><span class=\"n\">variable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">program</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">keyvalue</span><span class=\"o\">-</span><span class=\"k\">in</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"o\">-</span><span class=\"n\">data</span><span class=\"o\">=&lt;</span><span class=\"n\">name</span><span class=\"o\">&gt;=&lt;</span><span class=\"n\">val</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">Preset</span><span class=\"w\"> </span><span class=\"n\">data</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">In</span><span class=\"o\">-</span><span class=\"n\">Memory</span><span class=\"w\"> </span><span class=\"n\">provider</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">WASI</span><span class=\"w\"> </span><span class=\"n\">key</span><span class=\"o\">-</span><span class=\"n\">value</span><span class=\"w\"> </span><span class=\"n\">API</span><span class=\"p\">.</span>\n\n<span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">help</span><span class=\"o\">-</span><span class=\"n\">long</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">see</span><span class=\"w\"> </span><span class=\"n\">longer</span><span class=\"o\">-</span><span class=\"n\">form</span><span class=\"w\"> </span><span class=\"n\">explanations</span>\n</code></pre></div>\n<p>I've been using <code>-S common</code> as a habit but looks like it's been deprecated!</p>",
        "id": 487997281,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1733881193
    },
    {
        "content": "<blockquote>\n<p>I see the <a href=\"https://workers.wasmlabs.dev/docs/features/key-value\">vmware implementation</a> appears to append the data in the request response. Im guessing their implementation predated the wasi k/v draft?</p>\n</blockquote>\n<p>I'm not sure/don't know what actually happened but but that seems like a plausible explanation...</p>\n<blockquote>\n<p>It looks like the wasmcloud implementation rolls its own approach with those wrpc interface files. I see some references to NATS in the wasmcloud site, so im guessing either the wasmcloud runtime implements the host function directly for import, <em>or</em> it just defined the tcp behavior to communicate to what ever protocol NATS is talking. My instinct is that wasmcloud is doing this second approach given it would allow a lot of flexibility without having to rework the runtime code to provide more interfaces from the host. If that second scenario is the case it falls into the same scenario for having to defer security to the mechanisms available in NATS, and doesn't provide a simple way to test it all without having the NATS running or some mock server.</p>\n</blockquote>\n<p>Ah so you don't need the <code>wrpc</code> interface files -- you can use WASI as normal and be able to connect. That said, you're right about NATS being a dependency of wasmCloud, we take your component, and run it in a host that uses NATS for communication, but you don't have to manage the NATS instance for small deployments -- <code>wash up</code>will get you started, and <code>wash start component file:///....</code> will start your component. But I'll avoid getting into the details here.</p>\n<p>And yes, the point of wasmCloud providers is to be able to dynamically provide interfaces to components that need them! The providers themselves are written in languages like Rust or Go, and they export interfaces that components import.</p>\n<p>Agreed that it's also <em>not</em> the easiest/simplest way to test your component -- If you're trying to test in a purely offline fashion I think the composition approach is probably the easiest! Building a component that mocks the interface you're trying to import and using it during the test is a great way to do it and test quickly.</p>",
        "id": 487997745,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1733881498
    },
    {
        "content": "<p>Im trying to figure out how to use some wasi implementations with jco and why I cannot currently use the keyvalue wasi spec.<br>\nMy understanding is as follows, <code>jco</code> <a href=\"https://github.com/bytecodealliance/jco/blob/main/src/cmd/componentize.js#L11\">calls</a> <code>componentize-js</code>. This library then splices js code into the source based on the declared imports and exports from the source js. I think this step is providing compatible C api interfaces to be able to invoke the functions from the host.</p>\n<p>Componentize js then invokes <code>weval</code> which invokes <code>wizer</code> which runs wasmtime to execute the <code>starling monkey</code> wasm (which is the spider monkey javascript runtime compiled into web assembly). I think it provides the javascript source files by sharing a directly created in /tmp with the wasmtime runtime and the embedding code from the componentize spliced js, and.... something at this point? The levels of this stack are harder to follow in this. Somehow the final component includes the source js embedded and the starling monkey runtime, after some 'tree shaking' from weval+wizer ?  <span aria-label=\"melting face\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melting face\">:melting_face:</span></p>\n<p>Im not sure at what point in this chain the missing bindings for the the wasi spec I want are. It appears at times ive found it but then I see some examples from wasmCloud which seems like the host imports are magically found and bound just by declaring them in the imports (which would make sense else you would have to re-declare the whole way up for every custom function given by the host.</p>\n<p>While jco might fail the typings I can skip the type check like documented in the wasmcloud notes on keyvalue store. But how do I get the steps in between to tell me which imports are available to know where I differ from the expected host provided wasi interfaces?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/blob/main/src/cmd/componentize.js#L11\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/00e32fd236a4837923cab9f8758c79d84949778b/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373039353239363136353733383539343339316639633334653463353963373739626139343938636464623738363133383234356634316637383436326235332f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/blob/main/src/cmd/componentize.js#L11\" title=\"jco/src/cmd/componentize.js at main 路 bytecodealliance/jco\">jco/src/cmd/componentize.js at main 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript toolchain for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 488691977,
        "sender_full_name": "Tylr",
        "timestamp": 1734027314
    },
    {
        "content": "<p>Note that <code>weval</code> is only used if AOT is on -- if it's it's not then the functionality is mostly the same (<code>wizer</code> is called).</p>\n<p>Basically, the StarlingMonkey interpreter is compiled to WebAssembly (not interactively of course!) and your JS code is loaded along with polyfills and generated code in order to form the \"full\" component.</p>\n<blockquote>\n<p>... the final component includes the source js embedded and the starling monkey runtime, after some 'tree shaking' from weval+wizer ? <span aria-label=\"melt\" class=\"emoji emoji-1fae0\" role=\"img\" title=\"melt\">:melt:</span> </p>\n</blockquote>\n<p>Correct!</p>\n<blockquote>\n<p>Im not sure at what point in this chain the missing bindings for the the wasi spec I want are. It appears at times ive found it but then I see some examples from wasmCloud which seems like the host imports are magically found and bound just by declaring them in the imports (which would make sense else you would have to re-declare the whole way up for every custom function given by the host.</p>\n</blockquote>\n<p>Yes, so the bindings <em>are</em> \"magically\" found -- they're automatically generated when you run <code>jco componentize</code> and inserted. The imports are what glues the generated code to your JS code that acts as the component.</p>\n<p>Note that typings are <em>not</em> required -- they are for TS integration (and to be honest, the're not even for components to use, the current <code>jco types</code> command was meant for host side usage, not \"guest\" -- a new subcommand is being added soon), you can ignore them if it makes things simpler and write JS.</p>\n<p>Generally, the imports that are available map to the <code>import</code>s in your WIT. Unfortunately exactly <em>how</em> all of the WIT maps to JS is not well documented, but this is where generating TS typings can help (even if they're kind of \"wrong\" for now). </p>\n<p>Do you have this in a public repo anywhere where we could help?</p>",
        "id": 489267035,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734362959
    },
    {
        "content": "<p>Ill commit the src later today. Thank you for the reply.</p>",
        "id": 489304919,
        "sender_full_name": "Tylr",
        "timestamp": 1734372788
    },
    {
        "content": "<p>Here is the src im working from <a href=\"https://github.com/tylerhjones/wasm-lambda/blob/main/index.ts#L8\">https://github.com/tylerhjones/wasm-lambda/blob/main/index.ts#L8</a><br>\nive tried various imports with draft, draft2, sans draft, etc.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tylerhjones/wasm-lambda/blob/main/index.ts#L8\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6cbd29ef8d5507969d2070b39941c455a81764fc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653630353239626236333634393463663963393731396139386564303933636136313963333639646665323662643063356262663236663963316361663133392f74796c6572686a6f6e65732f7761736d2d6c616d626461&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tylerhjones/wasm-lambda/blob/main/index.ts#L8\" title=\"wasm-lambda/index.ts at main 路 tylerhjones/wasm-lambda\">wasm-lambda/index.ts at main 路 tylerhjones/wasm-lambda</a></div><div class=\"message_embed_description\">Contribute to tylerhjones/wasm-lambda development by creating an account on GitHub.</div></div></div>",
        "id": 489390930,
        "sender_full_name": "Tylr",
        "timestamp": 1734403177
    },
    {
        "content": "<p>Hey so <span class=\"user-mention\" data-user-id=\"782420\">@Tylr</span> yup, so here's what's happening that is actually quite confusing. </p>\n<p>The current <code>jco types</code> output is actually meant to be used for <em>host</em>-side integrations, which means at present it's got a bit of a weird setup -- the bindings that are generated are  somewhat painful to use. You end up having to import the <a href=\"https://github.com/wasmCloud/wasmCloud/blob/main/examples/typescript/components/http-password-checker/src/api.ts#L18\">namespace all at once</a> sometimes.</p>\n<p>If you look at the <a href=\"https://github.com/tylerhjones/wasm-lambda/blob/main/types/interfaces/wasi-keyvalue-store.d.ts\">generated types</a>, what turns out to be a namespace there <em>should</em> actually be a regular ES module if you're using it from \"guest\" (component) code... So actually the import <em>should</em> look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">open</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"wasi:keyvalue/store@0.2.0-draft\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<p><code>tsc</code> is going to complain, but this code would work in regular JS.</p>\n<p>We actually <em>just</em> landed a PR to fix this and introduce a <a href=\"https://github.com/bytecodealliance/jco/pull/528\">new <code>guest-types</code> command</a>, so more improvements are coming to this area (once a new <code>jco</code> release is made you can use the new <code>guest-types</code> command and then get more reasonable looking modules)... BUT if you want to use the current iteration w/ the generated types (which are TS <code>namespace</code>s), you'd need code that looks like this I think:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">WasiKeyvalueStore</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"wasi:keyvalue/store@0.2.0-draft\"</span><span class=\"p\">;</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wasmCloud/wasmCloud/blob/main/examples/typescript/components/http-password-checker/src/api.ts#L18\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/16762fc1438fdc6db4a0ad2e5782897700aa9a1f/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f3330343430333639322f31643761333062662d366433642d346161312d386663322d333663623031303938346463&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wasmCloud/wasmCloud/blob/main/examples/typescript/components/http-password-checker/src/api.ts#L18\" title=\"wasmCloud/examples/typescript/components/http-password-checker/src/api.ts at main 路 wasmCloud/wasmCloud\">wasmCloud/examples/typescript/components/http-password-checker/src/api.ts at main 路 wasmCloud/wasmCloud</a></div><div class=\"message_embed_description\">wasmCloud is an open source Cloud Native Computing Foundation (CNCF) project that enables teams to build, manage, and scale polyglot apps across any cloud, K8s, or edge. - wasmCloud/wasmCloud</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tylerhjones/wasm-lambda/blob/main/types/interfaces/wasi-keyvalue-store.d.ts\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/6cbd29ef8d5507969d2070b39941c455a81764fc/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653630353239626236333634393463663963393731396139386564303933636136313963333639646665323662643063356262663236663963316361663133392f74796c6572686a6f6e65732f7761736d2d6c616d626461&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tylerhjones/wasm-lambda/blob/main/types/interfaces/wasi-keyvalue-store.d.ts\" title=\"wasm-lambda/types/interfaces/wasi-keyvalue-store.d.ts at main 路 tylerhjones/wasm-lambda\">wasm-lambda/types/interfaces/wasi-keyvalue-store.d.ts at main 路 tylerhjones/wasm-lambda</a></div><div class=\"message_embed_description\">Contribute to tylerhjones/wasm-lambda development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/528\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/5a2589fa3f80480e2504bdc43872f1493512acde/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373138616262323732356335313830636565363665376430653166313135343433366235663134666566613334326336323934373436623735653662613064312f62797465636f6465616c6c69616e63652f6a636f2f70756c6c2f353238&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/528\" title=\"feat: add module declaration support by lachieh 路 Pull Request #528 路 bytecodealliance/jco\">feat: add module declaration support by lachieh 路 Pull Request #528 路 bytecodealliance/jco</a></div><div class=\"message_embed_description\">Adds a --declare-imports option to the jco types command.\nCloses #439</div></div></div>",
        "id": 489511881,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734449116
    },
    {
        "content": "<p>Let me try it and make a PR to your project real quick</p>",
        "id": 489511937,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734449130
    },
    {
        "content": "<p>Ah I also just found another issue... the <code>wasi:keyvalue</code> WIT that was in use was the wrong type actually -- it was based off of what is on <a href=\"https://github.com/WebAssembly/wasi-keyvalue/blob/main/wit/store.wit#L120\"><code>main</code> right now</a> (that's a link to a function that actually changed!) and we needed <code>wasi:keyvalue</code> WIT at the release time.</p>\n<p>I updated the README to use <code>wkg wit fetch</code> which is much easier than fetching them all individually, should have shown that from the start!</p>\n<p>I also filled out <code>package.json</code>'s <code>serve</code></p>\n<p>Once I got your component building (which I think it was before...?), and ran it with <code>wasmtime</code> it executed properly though of course it couldn't connect to redis.</p>\n<p>Here's a PR with everything opened against your repo:</p>\n<p><a href=\"https://github.com/tylerhjones/wasm-lambda/pull/2\">https://github.com/tylerhjones/wasm-lambda/pull/2</a></p>\n<p>Apologies for the bumpy ride here, thanks for continuing to tinker -- you weren't far from the goal there, and the ergonomics are going to improve for this stuff soon.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-keyvalue/blob/main/wit/store.wit#L120\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c9cc8ca8b1d51e56283fdbc1a068d5ca5654f712/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f383162356238303463363661666564623237313838633738383535643066323737626164363863653766323465613230633837333861643561643433326264372f576562417373656d626c792f776173692d6b657976616c7565&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-keyvalue/blob/main/wit/store.wit#L120\" title=\"wasi-keyvalue/wit/store.wit at main 路 WebAssembly/wasi-keyvalue\">wasi-keyvalue/wit/store.wit at main 路 WebAssembly/wasi-keyvalue</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-keyvalue development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tylerhjones/wasm-lambda/pull/2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f853cb46f031259642e25e44c5a584b9e100b94a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313732326432306466383262373933366262303166336262653061383963666561303066373539633433613037653036376366316639373430323634346266662f74796c6572686a6f6e65732f7761736d2d6c616d6264612f70756c6c2f32&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tylerhjones/wasm-lambda/pull/2\" title=\"refactor: use unergonomic ts types, add wasmtime serve by vados-cosmonic 路 Pull Request #2 路 tylerhjones/wasm-lambda\">refactor: use unergonomic ts types, add wasmtime serve by vados-cosmonic 路 Pull Request #2 路 tylerhjones/wasm-lambda</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 489518168,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734450820
    },
    {
        "content": "<p>Thanks! Ill take another attempt with these changes today</p>",
        "id": 489519191,
        "sender_full_name": "Tylr",
        "timestamp": 1734451094
    },
    {
        "content": "<p>It works! But I need more reading before any followup. I don't really understand the <a href=\"https://wasmbyexample.dev/examples/wasi-introduction/wasi-introduction.all.en-us#:~:text=Guests%20are%20the%20WebAssembly%20modules,tasks%20on%20the%20guests'%20behalf.\">guest-host</a> differences and their relation to these js modules/types enough to know how you reached the conclusion the import was the issue.</p>\n<p>The closest hint I got was when I included the declared import in the bundling, the resulting js was invalid. But the types imports appear (to my limited js knowledge) the same. Both declare a namespace and both export types and a function from that namespace. So what makes it different for the incoming/outgoing request usages? Is it that 'fetch' bindings are setup special and avoided me having to declare the import to use outgoing-request and the incoming-request is exported so it didn't need to resolve any import from the host?</p>",
        "id": 489593636,
        "sender_full_name": "Tylr",
        "timestamp": 1734480304
    },
    {
        "content": "<blockquote>\n<p>It works! But I need more reading before any followup. I don't really understand the guest-host differences and their relation to these js modules/types enough to know how you reached the conclusion the import was the issue.</p>\n</blockquote>\n<p>Yeah this is more about the <em>kind</em> of emedding you're doing. Currently <code>jco types</code> is for use in <em>transpiled</em> environments (integrating with NodeJS or the browser) -- not when writing a guest WebAssembly component.</p>\n<p>I happen to know that <code>jco types</code> needs that kind of weird wrapping because I've run into it before working on components for wasmCloud (and my colleague <span class=\"user-mention\" data-user-id=\"712279\">@Lachlan Heywood</span> actually contributed the new <code>guest-types</code> subcommand to <code>jco</code>), so outside of iterating and/or <code>tsc</code> is happy and the component actually works (though again, <code>jco types</code> is the wrong thing!) -- it's not surprising.</p>\n<blockquote>\n<p>So what makes it different for the incoming/outgoing request usages? </p>\n</blockquote>\n<p>Here, the difference is how the toolchain (<code>componentize-js</code> underneath, and StarlingMonkey underneath that) deals with <code>export</code>ing functionality versus <code>import</code>ing functionality.</p>\n<blockquote>\n<p>Is it that 'fetch' bindings are setup special and avoided me having to declare the import to use outgoing-request and the incoming-request is exported so it didn't need to resolve any import from the host?</p>\n</blockquote>\n<p>Yes, this understanding is exactly right, <code>fetch</code> bindings are a special case -- for example right now if you build <em>any</em> JS component, you always get an <code>import wasi:http/outgoing-handler</code> automatically IIRC, this is because you could <code>fetch()</code> at any time.</p>",
        "id": 489621087,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1734498610
    },
    {
        "content": "<p>gotcha, thanks for the explanations <span aria-label=\"bow\" class=\"emoji emoji-1f647\" role=\"img\" title=\"bow\">:bow:</span></p>",
        "id": 489799731,
        "sender_full_name": "Tylr",
        "timestamp": 1734540309
    }
]