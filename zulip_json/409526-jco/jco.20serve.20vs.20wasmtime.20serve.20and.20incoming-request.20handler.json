[
    {
        "content": "<p>[Im trying to better understand use cases behind the jco serve command and the wasmtime serve command. It seems like wasmtime creates a new memory block for each request <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L485\">https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L485</a> while jco serve wraps the incoming request handler from the component in a new wasm and keeps the memory around because the wasm is still using the same 'store' while running.</p>\n<p>While this seems to conflict with this statement about <a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly#:~:text=With%20this%2C%20we%20can%20provide%20a%20new%20instance%20on%20each%20request%2C%20which%20means%20there%E2%80%99s%20no%20state%20lying%20around%20between%20requests.\">isolated requests</a>. I can imagine how persisting some memory between requests is beneficial, for example aws lambdas do this while they are 'hot', losing memory once the vm is terminated or a new one instantiated.</p>\n<p>Was this the intended case behind jco serve command persisting state between requests, that having some memory in place is beneficial? Or was to defer other setup to the wasm runtime and avoid including an http server library with the jco library?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L485\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a15b562f8b756d8e7308ec14dd583efe7ab0ac0f/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f306333646466383134393865366230636666636633306664623436613533653932636433633961636463373831386139616132663834633230333734313530362f62797465636f6465616c6c69616e63652f7761736d74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/src/commands/serve.rs#L485\" title=\"wasmtime/src/commands/serve.rs at main · bytecodealliance/wasmtime\">wasmtime/src/commands/serve.rs at main · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A lightweight WebAssembly runtime that is fast, secure, and standards-compliant - bytecodealliance/wasmtime</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly#:~:text=With%20this%2C%20we%20can%20provide%20a%20new%20instance%20on%20each%20request%2C%20which%20means%20there%E2%80%99s%20no%20state%20lying%20around%20between%20requests.\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b0cea62b89ccf6d34ec3a4a8d45332741ed2f3f8/68747470733a2f2f62797465636f6465616c6c69616e63652e6f72672f61727469636c65732f696d672f323032312d30362d30322d6a732d6f6e2d7761736d2f66656174757265645f696d6167652e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.org/articles/making-javascript-run-fast-on-webassembly#:~:text=With%20this%2C%20we%20can%20provide%20a%20new%20instance%20on%20each%20request%2C%20which%20means%20there%E2%80%99s%20no%20state%20lying%20around%20between%20requests.\" title=\"Making JavaScript run fast on WebAssembly\">Making JavaScript run fast on WebAssembly</a></div><div class=\"message_embed_description\">JavaScript in the browser runs many times faster than it did two decades ago. And that happened because the browser vendors spent that time working on intensive performance optimizations.</div></div></div>",
        "id": 486195351,
        "sender_full_name": "Tylr",
        "timestamp": 1733354211
    },
    {
        "content": "<p>This is today, just an implementation shortcut for Jco serve, and we should probably be following Wasmtime behaviour of per-request isolation.</p>",
        "id": 486196183,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1733354665
    },
    {
        "content": "<p>or at the very least making that configurable</p>",
        "id": 486196197,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1733354676
    },
    {
        "content": "<p>Mostly though, it is better to use <code>wasmtime serve</code> and Jco serve is merely a proof of implementation of another approach, that may also be useful in environments Wasmtime can't run</p>",
        "id": 486196336,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1733354757
    },
    {
        "content": "<p>we should probably warn that it's mostly good for testing as opposed to production workflows</p>",
        "id": 486196400,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1733354768
    },
    {
        "content": "<p>Are there examples or discussions around snapshotting the state up to a point and answering new requests from this previous snapshot point? For example a configuration / setup step where you want to allow the first request to define 'state' or behavior, and subsequent requests to always start from that post-setup state?</p>\n<p>Like combining the initialization from <a href=\"https://github.com/bytecodealliance/wizer?tab=readme-ov-file#caveats\">wizer</a>. I imagine something like <code>jco run</code> or <code>jco serve</code> with <code>--save-snapshot-on-exit</code> and output a new memory state component to resume from?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wizer?tab=readme-ov-file#caveats\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/09948790edb5a3f5bcc30a512057c0c7235561a3/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623738383932613230346338366562333038623133383934393733373762643334613631656234616265383161643763313965613465363839383634326534302f62797465636f6465616c6c69616e63652f77697a6572&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wizer?tab=readme-ov-file#caveats\" title=\"GitHub - bytecodealliance/wizer: The WebAssembly Pre-Initializer\">GitHub - bytecodealliance/wizer: The WebAssembly Pre-Initializer</a></div><div class=\"message_embed_description\">The WebAssembly Pre-Initializer. Contribute to bytecodealliance/wizer development by creating an account on GitHub.</div></div></div>",
        "id": 486197108,
        "sender_full_name": "Tylr",
        "timestamp": 1733355166
    },
    {
        "content": "<p>a dynamic snapshotting framework is certainly a common discussion, but no one has put forward a complete approach yet. <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> has a piece of this picture in <a href=\"https://github.com/dicej/component-init\">https://github.com/dicej/component-init</a> which could in theory plug into Jco as its execution environment due to it allowing the interpreter to be implemented as a trait.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/component-init\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/50927dd00d1e6d54f2753e3a28b58d88cd883782/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343231656137626361623833323561613162373663376562633534363531333863656535646339373932633439653931343662393539663037613162653661302f646963656a2f636f6d706f6e656e742d696e6974&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/component-init\" title=\"GitHub - dicej/component-init: WebAssembly Component Pre-initializer\">GitHub - dicej/component-init: WebAssembly Component Pre-initializer</a></div><div class=\"message_embed_description\">WebAssembly Component Pre-initializer. Contribute to dicej/component-init development by creating an account on GitHub.</div></div></div>",
        "id": 486199673,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1733356675
    },
    {
        "content": "<p>Thanks for the link, ill read through their approach</p>",
        "id": 486200379,
        "sender_full_name": "Tylr",
        "timestamp": 1733357033
    }
]