[
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"763329\">@Ben Sully</span> ! What you're describing is definitely possible -- both (1) and (2).</p>\n<p>Which you <em>should</em> do seems to depend on your use case (i.e. how the functionality should be split), etc, but you can take a module and <code>jco transpile</code> it very easily these days. There's <a href=\"https://github.com/bytecodealliance/jco/pull/507\">a PR that will land soon</a> with examples you can look at.</p>\n<p>You can also reference the <a href=\"https://github.com/bytecodealliance/component-docs/pull/146\">PR on the component-book documentation</a> that explains more about the process.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/507\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/318f9730fb3c39e220e1a92e2cbd5d5df15379e0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f656533373130613732623236613733383837313665333430616432356661653134383134623962316262343036306239303363323038656434333762656264332f62797465636f6465616c6c69616e63652f6a636f2f70756c6c2f353037&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/507\" title=\"chore(examples): add examples by vados-cosmonic · Pull Request #507 · bytecodealliance/jco\">chore(examples): add examples by vados-cosmonic · Pull Request #507 · bytecodealliance/jco</a></div><div class=\"message_embed_description\">This commit adds examples to the jco, some of which are/will be referenced from the component-model book (https://component-model.bytecodealliance.org/).</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/component-docs/pull/146\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d01c43bc772affd006eb15354a2b7acca8ae6545/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313236626237303463316333303830356131663830383564366134646234323136623461376265396131373361653463653962636136316564383536373161392f62797465636f6465616c6c69616e63652f636f6d706f6e656e742d646f63732f70756c6c2f313436&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/component-docs/pull/146\" title=\"feat: improve JS lang docs by vados-cosmonic · Pull Request #146 · bytecodealliance/component-docs\">feat: improve JS lang docs by vados-cosmonic · Pull Request #146 · bytecodealliance/component-docs</a></div><div class=\"message_embed_description\">We read every piece of feedback, and take your input very seriously.</div></div></div>",
        "id": 477253039,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1729095225
    },
    {
        "content": "<p>Generally, you <em>should</em> be able to just build the Rust code into a component, and run it through <code>jco transpile</code> and publish those libraries and be able to call them.</p>\n<p>One of the great benefits of course being that you can model (and iterate on) <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\">the interfaces</a> for individual components as you go.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/1d138c1a136c4d97a6ed407655728584951a5dab/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643066623161663862326262383362613663363133653733363235646262343065646663633338613433633361353134373264626235353862663238306365352f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 477253588,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1729095390
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"598440\">@Victor Adossi</span> , thanks for taking a look! I've been using <code>jco transpile</code> with some success already actually, and I think since asking this I've realised that just creating the smaller components is a better way to go than _also_ creating a separate 'big' component. I think if I wanted to do that I'd be better off doing it for each language.</p>\n<p>My original idea, since I'm here, was to have multiple smaller components (say <code>adder</code>, <code>subtracter</code>, <code>multiplier</code>, etc), then one big component which literally just looked like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">everything</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">bsull</span><span class=\"p\">:</span><span class=\"nc\">adder</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">bsull</span><span class=\"p\">:</span><span class=\"nc\">adder</span><span class=\"o\">/</span><span class=\"n\">add</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">bsull</span><span class=\"p\">:</span><span class=\"nc\">subtracter</span><span class=\"o\">/</span><span class=\"n\">subtract</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"n\">bsull</span><span class=\"p\">:</span><span class=\"nc\">subtracter</span><span class=\"o\">/</span><span class=\"n\">subtract</span><span class=\"p\">;</span>\n\n<span class=\"w\">    </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">etc</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I wouldn't need to use <code>cargo-component</code> or any language specific tooling, just create an 'empty' component which imports or embeds the dependencies. Then I could use <code>jco transpile</code> to turn it into a single JS package. Bonus points if the jco-generated bindings provide separate entrypoints for each component (to mimc code-splitting &amp; avoid loading unnecessary WASM blobs for users only using <code>add</code>)</p>\n<p>I think I can achieve something similar right now though so we're all good!</p>",
        "id": 477256208,
        "sender_full_name": "Ben Sully",
        "timestamp": 1729096257
    },
    {
        "content": "<p>Yeah that sounds reasonable to me, though I <em>think</em> that if you were building the components together it <em>might</em> be easier to build a rust-side component that re-exports everything and then your <code>world</code> would be all <code>export</code>s.</p>\n<p>That said either should work -- feel free to make another thread if you run into any issues!</p>",
        "id": 477256599,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1729096401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> has marked this topic as resolved.</p>",
        "id": 477256607,
        "sender_full_name": "Notification Bot",
        "timestamp": 1729096403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"763329\">Ben Sully</span> has marked this topic as unresolved.</p>",
        "id": 477257094,
        "sender_full_name": "Notification Bot",
        "timestamp": 1729096571
    },
    {
        "content": "<p>I did try the Rust way first but the <code>import</code>ed bindings were different types to the <code>export</code>ed ones so I would have had to write a _ton_ of boilerplate to do the type conversions <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> Perhaps I missed something though!</p>",
        "id": 477257096,
        "sender_full_name": "Ben Sully",
        "timestamp": 1729096571
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"598440\">Victor Adossi</span> has marked this topic as unresolved.</p>",
        "id": 477257177,
        "sender_full_name": "Notification Bot",
        "timestamp": 1729096601
    },
    {
        "content": "<p>Ah yes that does happen, if you define separate types i.e. not in some shared parent WIT then yes, you do have to end up converting those types, which can be pretty inconvenient. I thought you might run into more issues importing and exporting (which can be an issue when using <code>resource</code>s), but glad it worked out OK!</p>",
        "id": 477257428,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1729096690
    },
    {
        "content": "<p>Understood, perhaps I'll try the parent WIT thing one day <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> thanks again!</p>",
        "id": 477257515,
        "sender_full_name": "Ben Sully",
        "timestamp": 1729096737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"763329\">Ben Sully</span> has marked this topic as resolved.</p>",
        "id": 477257534,
        "sender_full_name": "Notification Bot",
        "timestamp": 1729096743
    }
]