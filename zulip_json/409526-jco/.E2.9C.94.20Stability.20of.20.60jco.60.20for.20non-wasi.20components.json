[
    {
        "content": "<p>Hi there!</p>\n<p>We have a few rust libraries that target Node.js using <a href=\"https://nodejs.org/api/n-api.html\">N-API</a>, and are currently exploring how to provide browser-compatible wasm builds, and components and jco look super promising.</p>\n<p>I'm wondering how stable it is for projects that don't need wasi (they are isolated from the OS/runtime — e.g. one of them is a praser), but need to run both in the browser and Node.js.</p>\n<p>The readme mentions <code>* WASI Preview2 support in Node.js ([undergoing stabilization](https://github.com/bytecodealliance/jco/milestone/1)) &amp; browsers (experimental).</code>, but is that for WASI Preview 2? Or should I read it as \"the entire jco should be considered experimental when targeting browsers\"?</p>",
        "id": 445465348,
        "sender_full_name": "Patricio Palladino",
        "timestamp": 1718746242
    },
    {
        "content": "<p>jco is only for wasi, if you want to compile your rust code that doesn't require wasi into something browsers can run, you want wasm-bindgen</p>",
        "id": 445467405,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1718747247
    },
    {
        "content": "<p>Thanks for the question, Jco's transpilation layer is stable and this is reflected in the 1.x status and the project will be following semver for all features except for <code>jco componentize</code> which is still unstable. With regards to WASI support, that is also stable in Node.js, it is just the browser WASI support that is still experimental.</p>",
        "id": 445467658,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1718747360
    },
    {
        "content": "<p>as an example, swc has <a href=\"https://swc.rs/docs/usage/core\">https://swc.rs/docs/usage/core</a> and <a href=\"https://swc.rs/docs/usage/wasm\">https://swc.rs/docs/usage/wasm</a> which are compiled from the same codebase, but one is napi and the other is wasm</p>",
        "id": 445467660,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1718747361
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"550770\">@Ramon Klass</span> , is it limited to wasi? do you include \"wasm components\" in your definition of what wasi is? I'm still trying to make up my mind about how to distinguish the scope of each project. I understand the difference at the technical level, but the line is fuzzy at the product (and especially docs) level</p>",
        "id": 445467973,
        "sender_full_name": "Patricio Palladino",
        "timestamp": 1718747513
    },
    {
        "content": "<p>using components even without wasi (as in the set of standard interfaces), would allow us to run the components on other stacks, which is also a longer-term goal of ours</p>",
        "id": 445468100,
        "sender_full_name": "Patricio Palladino",
        "timestamp": 1718747576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"553681\">Guy Bedford</span> <a href=\"#narrow/stream/409526-jco/topic/Stability.20of.20.60jco.60.20for.20non-wasi.20components/near/445467658\">said</a>:</p>\n<blockquote>\n<p>hanks for the question, Jco's transpilation layer is stable and this is reflected in the 1.x status and the project will be following semver for all features except for <code>jco componentize</code> which is still unstable. With regards to WASI support, that is also stable in Node.js, it is just the browser WASI support that is still experimental.</p>\n</blockquote>\n<p>Thanks for your answer! So if transpiled component doesn't need <code>@bytecodealliance/preview2-shim</code> it should be sable in the browser, right?</p>",
        "id": 445468349,
        "sender_full_name": "Patricio Palladino",
        "timestamp": 1718747710
    },
    {
        "content": "<p>Just as an interesting data point to the conversation, supporting multiple platforms using N-API can be pretty annoying, so wasm components+jco can be an amazing alternative to it.</p>\n<p>So what started as a \"let's make this run in the browser\" effort, is now turning into \"can we do everything with wasm components?\"</p>",
        "id": 445468814,
        "sender_full_name": "Patricio Palladino",
        "timestamp": 1718747932
    },
    {
        "content": "<blockquote>\n<p>Thanks for your answer! So if transpiled component doesn't need <code>@bytecodealliance/preview2-shim</code> it should be sable in the browser, right?</p>\n</blockquote>\n<p>Yes exactly. Note that WASI Preview2 is stable itself, so some users just write their own preview2 implementations as necessary to support functionality in the browser - it's only the browser implementation of preview2 that is unstable currently.</p>",
        "id": 445605931,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1718808094
    },
    {
        "content": "<p>Thanks for your confirmation. And thanks a ton for your work on jco</p>",
        "id": 445634610,
        "sender_full_name": "Patricio Palladino",
        "timestamp": 1718810284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"729723\">Patricio Palladino</span> has marked this topic as resolved.</p>",
        "id": 445637865,
        "sender_full_name": "Notification Bot",
        "timestamp": 1718810632
    }
]