[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> First, thanks for your work on WASI-virt, and sorry for such a long message. </p>\n<p><strong>tl;dr</strong> I'm going down a path that will have me rewriting basically all of <code>WASI-virt</code>'s virtual adapter component, and I'd like to avoid that if possible. Your insight on if we could get <code>WASI-Virt</code> to do what I need would be <em>super</em> helpful.</p>\n<p>I'm working on a <a href=\"https://github.com/fermyon/spin-test\">testing solution for <code>spin</code></a> which does a bunch of virtualization (not only of the Spin world but of WASI imports). Right now I'm <em>not</em> using WASI-virt because the virtualization pattern I need differs pretty substantially from how <code>WASI-virt</code> works in a few ways:</p>\n<ul>\n<li>The current approach of synthesizing a component that matches statically known virtualization configuration is not what I need for <code>spin-test</code>. Basically all the configuration for how virtualization should happen, happens dynamically after instantiation.  For example, the component which encodes all the test logic can do dynamic configuration (e.g., imagine a test which sets an environment variable before invoking the Spin app or writes the contents of a file that will be mounted into the app).</li>\n<li>Second, the WASI virtualization component needs imports that can be used during this dynamic configuration. In other words, the virtualization behavior will change dynamically depending on the return value of imports into the virtualization component. Specifically the virtualization component has an import <code>get_manifest</code> which can be used to read the <code>spin.toml</code> manifest (a manifest file for a Spin app) which has implications on how wasi works (such as which files are mounted). </li>\n</ul>\n<p>My main concern is that <code>WASI-virt</code> has to jump through some interesting hoops to get static configuration working (such as allowing for its read only memory to be changed post-facto) which are all irrelevant in a world of dynamic configuration.</p>\n<p><strong>Question</strong>: Do you have any thoughts on how difficult it would be to change WASI-virt to allow for this use case?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fermyon/spin-test\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/af15f61987f45bdbe3e4eacbaf22a309bc3907d0/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373131383038346235366232326666333564303535306161336434326336633735313738626435313230316339663962626563343366353231346263646161322f6665726d796f6e2f7370696e2d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fermyon/spin-test\" title=\"GitHub - fermyon/spin-test: A utility for testing Spin applications\">GitHub - fermyon/spin-test: A utility for testing Spin applications</a></div><div class=\"message_embed_description\">A utility for testing Spin applications. Contribute to fermyon/spin-test development by creating an account on GitHub.</div></div></div>",
        "id": 435599192,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1714142164
    },
    {
        "content": "<p>I think I mostly get the use case here, and have a suggestion for how we might map that into an extension of the current WASI Virt architecture. Let me know how the following sounds or if you have further feedback and we can see if we can iterate on an approach here.</p>\n<p>Instead of designing for an imported function, what if WASI Virt could export a dynamic configuration update function? So basically it would be a custom export, which at composition time could be configured whether or not it should be exposed to the top-level component exports of the component being virtualized.</p>\n<p>Then, this function could take the full configuration scheme for WASI Virt, and update in place its internal static configuration to reflect the dynamic configuration update.</p>\n<p>The hard part here mostly seems to be the composition story, but perhaps there's a simple way we could define that when you do a composition of a component with a virtualization, this function could somehow be specially marked in that composition to be directly merged and exposed instead of satisfying the component imports.</p>\n<p>Does something like that sound like it would be able to be used for your use case?</p>",
        "id": 436150907,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1714429475
    }
]