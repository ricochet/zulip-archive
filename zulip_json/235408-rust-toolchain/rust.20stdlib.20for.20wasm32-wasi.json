[
    {
        "content": "<p>Probably this is not the right forum to ask, but it's in a section called rust-toolchain so i'll take advantage of that.</p>\n<p>What's the story behind stdlib support for <code>wasm32-wasi</code> targets? It seems to me that while the target is available in <code>stable</code> rust, the stdlib implementation is by far not stable, as it now assumes that whatever we build with a \"latest\" rust toolchain we deployed on a modern VM that handles those functions.</p>\n<p>Case in point, memcpy support doesn't exist in WASM as an intrinsic. Once it's added, the rust toolchain will assumes that the WASM VMs have supports for a wasi-function that's called whenever that operation is needed (or threads, or any other example that's similar).</p>\n<p>But that means that newly compiled rust <code>wasm32-wasi</code> programs will not work anymore on old VMs that don't have those wasi methods or wasm capabilities (e.g. atomics later) exposed. </p>\n<p>So my question here is what does it mean for wasm32-wasi to be in stable rust as a target? <br>\nWhat's the plan to evolve it to have more features in a stable way? (is there one?)<br>\nIs there some place where I can read these things as right now this differs in terms of support of _stability_ guarantees stable rust targets.</p>",
        "id": 229849013,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615470065
    },
    {
        "content": "<p>For adding new wasm instructions, the similar is somewhat analogous to how x86 adds new instructions all the time too.</p>",
        "id": 229850507,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615470709
    },
    {
        "content": "<p>Rust has things like <code>-C target-feature=+avx2</code> to let users specify which kind of platform to target, and wasm targets will have similar things, as we add the memcpy operator and other things.</p>",
        "id": 229850637,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615470763
    },
    {
        "content": "<p>Then there's the question of what the defaults should be. This is a complex decision even on mature targets like x86, and it'll be somewhat complex on wasm too.</p>",
        "id": 229850805,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615470842
    },
    {
        "content": "<p>Does this mean that the defaults are whatever's now in rust's stdlib implementation for wasm32-wasi (given it's in stable?)</p>",
        "id": 229850952,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615470892
    },
    {
        "content": "<p>That's the default today. My understanding is that these defaults can change over time, even for mature platforms like x86.</p>",
        "id": 229851086,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615470941
    },
    {
        "content": "<p>Is there some place where i can read about this process? I didn't find anything on github</p>",
        "id": 229851224,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615470983
    },
    {
        "content": "<p>For wasm targets, there's some discussion (eg. <a href=\"https://github.com/WebAssembly/tool-conventions/issues/158\">here</a>) about how we should set defaults, and I think the high-level consensus is \"when features are standardized (phase 4) and all \"major\" engines support them\", for some definitinon of \"major\"</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/issues/158\" style=\"background-image: url(https://avatars.githubusercontent.com/u/11578470?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/issues/158\" title=\"Enabling features by default in LLVM 路 Issue #158 路 WebAssembly/tool-conventions\">Enabling features by default in LLVM 路 Issue #158 路 WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">I know we discussed this a while ago, but I forget what exactly we came up with @aheejin @dschuff @sbc100 @sunfishcode. IIRC, it wasn&#39;t too different from enabling new features once the followi...</div></div></div>",
        "id": 229851291,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615471028
    },
    {
        "content": "<p>Ok, thanks I'll continue this discussion there, because it's making things a bit (significantly) harder for IOT -type use-cases to change defaults at this type of pace</p>",
        "id": 229913051,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615491804
    },
    {
        "content": "<p>To be honest, the WASM instructions are slightly less of an issue, the worrying part to me is the WASI component that's under a \"preview\" namespace, but in stable rust <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 229913435,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615491963
    },
    {
        "content": "<p>And it has a history of changing that namespace  from <code>unstable-....</code> to <code>preview</code> even tho some VMs didn't change the \"env\" where the wasi functios were exported under</p>",
        "id": 229913630,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492040
    },
    {
        "content": "<p>Well, the underlying situation is that WASI is still evolving.</p>",
        "id": 229913650,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492052
    },
    {
        "content": "<p>We get a lot of feedback from people about this, and perhaps in 2021 people aren't used to seeing systems at the very beginning of being designed, but that's what WASI is.</p>",
        "id": 229913773,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492091
    },
    {
        "content": "<p>I understand that, that's clear, what's not clear is what it means for rustc to allow these types of \"evolving\" platforms be in stable rust <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229913774,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492092
    },
    {
        "content": "<p>Is there something you're looking to do that this makes harder, or is it just about communication?</p>",
        "id": 229913855,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492132
    },
    {
        "content": "<p>To be honest, i don't m ind the evolution too much for these use-cases, what would be really nice would be for stdlib to rustc basically and have guarantees around how they may change.<br>\nnow this means i am tied to some rustc version that happened to ship with a lib that's supported by some targets people may be interested in</p>",
        "id": 229913930,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492166
    },
    {
        "content": "<p>so if i upgrade rust now, it's a die roll if wasm32-wasi still works in this version exactly like in the last version basically, even tho that platform is a \"stable\" rust target</p>",
        "id": 229914001,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492198
    },
    {
        "content": "<p>As the minimum req. features from WASM engines may evolve from a release to another</p>",
        "id": 229914147,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492237
    },
    {
        "content": "<p>At a first glance, the only way I see that we could do that would be to just remove wasm32-wasi from stable Rust</p>",
        "id": 229914336,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492317
    },
    {
        "content": "<p>An alternative is allowing users of rust to specify the stdlib version they are intereted to use. That would also solve it (predictability is also nice), but now users in this scenario can't use new language features because the stdlib ships together with new rustc releases without a way to use a different one.</p>",
        "id": 229914342,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492319
    },
    {
        "content": "<p>Part of the reason WASI isn't evolving at the pace that everyone would like it to is that we have limited development resources.</p>",
        "id": 229914525,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492390
    },
    {
        "content": "<p>It's a very small number of people doing all this work.</p>",
        "id": 229914549,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492404
    },
    {
        "content": "<p>I would be really interested to contribute, but. haven't really found a lot of ways on how to contribute.</p>",
        "id": 229914592,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492427
    },
    {
        "content": "<p>Most meetings i've seen scheduled are focused on wasm itself (e.g. rust wasm group) and not wasi</p>",
        "id": 229914608,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492439
    },
    {
        "content": "<p>Well, let's say we wanted a feature like a rustc command-line flag to select which WASI snapshot is in use</p>",
        "id": 229914770,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492496
    },
    {
        "content": "<p>Similar to target-cpu flags like +avx2, but for WASI</p>",
        "id": 229914825,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492518
    },
    {
        "content": "<p>That would be also a good approach, like +threads</p>",
        "id": 229914972,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492563
    },
    {
        "content": "<p>That's something where, if someone wanted to work on it, I'd say, let's touch base before anyone goes off and does a bunch of work, but it's mostly just a bunch of work :-)</p>",
        "id": 229915051,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492589
    },
    {
        "content": "<p>What's the best way to propose such a thing? RFC in rustc?</p>",
        "id": 229915201,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492653
    },
    {
        "content": "<p>That's a good question. I myself am not super familiar with the Rust RFC landscape</p>",
        "id": 229915372,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492708
    },
    {
        "content": "<p>Is there an RFC tracker for <code>std</code>?</p>",
        "id": 229915401,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492725
    },
    {
        "content": "<p>of couse, it's on zulip that's why i didn't find anything on stdlib <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 229915563,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492794
    },
    {
        "content": "<p>I was looking around the rust discord server</p>",
        "id": 229915626,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492807
    },
    {
        "content": "<p>Ok, let me start a discussion with them on this before starting to write a RFC, as an issue may be sufficient</p>",
        "id": 229915733,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492842
    },
    {
        "content": "<p>An issue sounds good!</p>",
        "id": 229915876,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615492889
    },
    {
        "content": "<p>Tho, I'm sad to report that the t-libs mentioend here: <a href=\"https://www.rust-lang.org/governance/teams/library\">https://www.rust-lang.org/governance/teams/library</a> is not a thing. that exists in the rust-lang discord <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.rust-lang.org/governance/teams/library\" style=\"background-image: url(https://www.rust-lang.org/static/images/rust-social-wide.jpg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.rust-lang.org/governance/teams/library\" title=\"Library team\">Library team</a></div><div class=\"message_embed_description\">A language empowering everyone to build reliable and efficient software.</div></div></div>",
        "id": 229916244,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615492998
    },
    {
        "content": "<p>So many channels <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 229916612,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615493132
    },
    {
        "content": "<p>It's ok i'll figure it out. Thanks for the help</p>",
        "id": 229916682,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1615493161
    },
    {
        "content": "<p>yw!</p>",
        "id": 229916760,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1615493176
    },
    {
        "content": "<p>its worth noting that there are tiers of support for targets in Rust that are sort of orthogonal to stable/beta/nightly versions of the Rust compiler and std library: <a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html\">https://doc.rust-lang.org/nightly/rustc/platform-support.html</a></p>\n<p><code>wasm32-wasi</code> is <a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support.html#tier-2\">tier 2</a></p>",
        "id": 230552982,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1615914588
    }
]