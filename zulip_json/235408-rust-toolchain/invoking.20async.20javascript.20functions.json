[
    {
        "content": "<p>So I've been reading <a href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\">this blog post</a> by <span class=\"user-mention\" data-user-id=\"617931\">@Dirk BÃ¤umer</span> and working through it. I am exploring a vscode extension and I wanted to define about 4 modules using WIT and then implement some of them in Rust and some in typescript. Unfortunately, I will need async functions, and I gather they are not supported by WIT yet.</p>\n<p>I'm finding the relationship of wasm-bindgen, WIT, and wasm-pack fairly confusing. What would be a recommended setup for the above? Can I combine WIT + wasm-bindgen into one project?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9bb85dafc61473ba3e902edea6bc8176eaaee20/68747470733a2f2f636f64652e76697375616c73747564696f2e636f6d2f6f70656e6772617068696d672f6f70656e67726170682d626c6f672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://code.visualstudio.com/blogs/2023/06/05/vscode-wasm-wasi\" title=\"VS Code and WebAssemblies\">VS Code and WebAssemblies</a></div><div class=\"message_embed_description\">Running WebAssemblies in VS Code for the Web.</div></div></div>",
        "id": 446470448,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719174599
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414623\">@nikomatsakis</span> Oh that blog post is fairly out of date. The recent series by Dirk (<a href=\"https://code.visualstudio.com/blogs/2024/05/08/wasm\">part 1</a>, <a href=\"https://code.visualstudio.com/blogs/2024/06/07/wasm-part2\">part 2</a>) should be more up to date, and I would recommend reading instead.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://code.visualstudio.com/blogs/2024/05/08/wasm\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9bb85dafc61473ba3e902edea6bc8176eaaee20/68747470733a2f2f636f64652e76697375616c73747564696f2e636f6d2f6f70656e6772617068696d672f6f70656e67726170682d626c6f672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://code.visualstudio.com/blogs/2024/05/08/wasm\" title=\"VS Code Extensions and WebAssembly\">VS Code Extensions and WebAssembly</a></div><div class=\"message_embed_description\">Using WebAssembly for Extension Development.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://code.visualstudio.com/blogs/2024/06/07/wasm-part2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9bb85dafc61473ba3e902edea6bc8176eaaee20/68747470733a2f2f636f64652e76697375616c73747564696f2e636f6d2f6f70656e6772617068696d672f6f70656e67726170682d626c6f672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://code.visualstudio.com/blogs/2024/06/07/wasm-part2\" title=\"VS Code Extensions and WebAssembly - Part Two\">VS Code Extensions and WebAssembly - Part Two</a></div><div class=\"message_embed_description\">Use WebAssembly in VS Code extensions to run in a separate worker, or write a language server with a language that compiles to WebAssembly.</div></div></div>",
        "id": 446489626,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1719187350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414623\">nikomatsakis</span> <a href=\"#narrow/stream/235408-rust-toolchain/topic/invoking.20async.20javascript.20functions/near/446470448\">said</a>:</p>\n<blockquote>\n<p>I'm finding the relationship of wasm-bindgen, WIT, and wasm-pack fairly confusing. What would be a recommended setup for the above? Can I combine WIT + wasm-bindgen into one project?</p>\n</blockquote>\n<p><code>wasm-bindgen</code> and <code>wasm-pack</code> are tools which I believe even predate WASI 0.1. The equivalent of these for WASI 0.2 would be <a href=\"https://github.com/bytecodealliance/wit-bindgen\"><code>wit-bindgen</code></a> and <a href=\"https://github.com/bytecodealliance/cargo-component\"><code>cargo-component</code></a>. These are designed for WIT, Wasm Components, and WASI 0.2.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/07fe036842fbf9597e119c0a96f7db06b46bb6c8/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643333376261306664343766663061343639373935383666313933643833356665623735323361383165396462396239333839626563386633616666313031642f62797465636f6465616c6c69616e63652f7769742d62696e6467656e&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - bytecodealliance/wit-bindgen</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/cargo-component\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c32014dbb6ddd13e1e4714ba3582a2cac59f2920/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343964393437343634643730383662376266313464356637353766313961656463353232346261393264323466333237376666656132363930306334646365622f62797465636f6465616c6c69616e63652f636172676f2d636f6d706f6e656e74&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/cargo-component\" title=\"GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.\">GitHub - bytecodealliance/cargo-component: A Cargo subcommand for creating WebAssembly components based on the component model proposal.</a></div><div class=\"message_embed_description\">A Cargo subcommand for creating WebAssembly components based on the component model proposal. - bytecodealliance/cargo-component</div></div></div>",
        "id": 446489817,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1719187498
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414623\">nikomatsakis</span> <a href=\"#narrow/stream/235408-rust-toolchain/topic/invoking.20async.20javascript.20functions/near/446470448\">said</a>:</p>\n<blockquote>\n<p>Unfortunately, I will need async functions, and I gather they are not supported by WIT yet.</p>\n</blockquote>\n<p>The answer here is nuanced: async functions <em>are</em> supported by WIT. Just not yet as a first-class construct. Instead WASI APIs currently use an <a href=\"https://blog.yoshuawuyts.com/building-an-async-runtime-for-wasi/\">epoll-like system</a> based on a <a href=\"https://docs.rs/wasi/latest/wasi/clocks/monotonic_clock/fn.subscribe_duration.html\"><code>Pollable</code> type</a> which requires a little bit of effort to correctly design for.</p>",
        "id": 446490462,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1719188045
    },
    {
        "content": "<p>However, that said - my understanding is that the VS Code extension API currently does <em>not</em> support async functionality.</p>",
        "id": 446490535,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1719188125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"344849\">@Yoshua Wuyts</span> I think I gave the wrong link, I read the more recent ones too</p>",
        "id": 446575247,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719224379
    },
    {
        "content": "<p>My conclusion after doing a bit more digging was that I should just use sync functions in WIT</p>",
        "id": 446575312,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719224402
    },
    {
        "content": "<p>and setup \"completion callbacks\"</p>",
        "id": 446575357,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719224407
    },
    {
        "content": "<p>perhaps writing a future on the Rust side if I want to model it</p>",
        "id": 446575416,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719224424
    },
    {
        "content": "<p>I've read your blog post as well but I'll re-read</p>",
        "id": 446575526,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719224444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"414623\">nikomatsakis</span> <a href=\"#narrow/stream/235408-rust-toolchain/topic/invoking.20async.20javascript.20functions/near/446575312\">said</a>:</p>\n<blockquote>\n<p>My conclusion after doing a bit more digging was that I should just use sync functions in WIT</p>\n</blockquote>\n<p>basically it seemed like async in WIT was still a WIP but I wanted to be on the \"new hotness\" train, and my needs I <em>think</em> are relatively simple</p>",
        "id": 446575633,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719224480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"414623\">@nikomatsakis</span> using the technique outlined here you can do the following:</p>\n<ul>\n<li>define the API in WIT as sync</li>\n<li>implement the sync API using Async API provided by VS Code or some other module.</li>\n</ul>\n<p>VS Code's component model implementation will take care of the necessary synchronization.</p>",
        "id": 446598632,
        "sender_full_name": "Dirk BÃ¤umer",
        "timestamp": 1719231358
    },
    {
        "content": "<p>I don't follow that last part</p>",
        "id": 446611476,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719234695
    },
    {
        "content": "<p>What is \"Async API provided by VS Code\" and where can I learn more about it?</p>",
        "id": 446611597,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719234718
    },
    {
        "content": "<p>I think they are just referring to the host's call into wasm being async. I am not familiar with vscode's specific implementation but Wasmtime's async feature lets you call (async host) -&gt; (sync guest) -&gt; (async host) where the guest has \"no idea\" it is in an async stack.</p>",
        "id": 446613092,
        "sender_full_name": "Lann Martin",
        "timestamp": 1719235111
    },
    {
        "content": "<p>...though it isn't clear to me that vscode has any way to inject your own host imports into the runtime, so I'm not sure how relevant that really is...</p>",
        "id": 446615073,
        "sender_full_name": "Lann Martin",
        "timestamp": 1719235666
    },
    {
        "content": "<p>Anyway you are correct that you have to roll your own async/concurrency today.</p>",
        "id": 446615810,
        "sender_full_name": "Lann Martin",
        "timestamp": 1719235867
    },
    {
        "content": "<p>VS Code's API in the extension host is usually async (see for example the FileSytem API). WASM imports can currently only be sync, however by running the WASM code in a worker and using SharedArrayBuffers and Atomics WASM imports can be implemented in an async fashion. We use this to implement the WASI preview1 for VS Code.</p>",
        "id": 446691923,
        "sender_full_name": "Dirk BÃ¤umer",
        "timestamp": 1719255506
    },
    {
        "content": "<p>I tried to setup a callback in wasi but I did something wrong...</p>\n<p><a class=\"stream-topic\" data-stream-id=\"206238\" href=\"/#narrow/stream/206238-general/topic/how.20to.20manage.20callbacks\">#general &gt; how to manage callbacks</a> </p>\n<p>not sure what though :)</p>",
        "id": 447469943,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1719492609
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"617931\">@Dirk BÃ¤umer</span> is the wasm-component-model-async  the one that demonstrates how to use webworkers here?</p>",
        "id": 450807886,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720730578
    },
    {
        "content": "<p>or maybe I'm confused</p>",
        "id": 450808125,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720730692
    },
    {
        "content": "<p>I'm trying to remember what I was trying to do even :)</p>",
        "id": 450808136,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720730697
    },
    {
        "content": "<p>I don't know what you're trying to do either :), but I know that Jco's <a href=\"https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim\">preview2-shim</a> demonstrates how to call async JS functions via web workers.  Other options are to use <a href=\"https://kripken.github.io/blog/wasm/2019/07/16/asyncify.html\">asyncify</a> or wait for <a href=\"https://v8.dev/blog/jspi\">JSPI</a> to be standardized.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b2551fe5523e21e278bb5acfdbaed0f4b6d0ab27/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313834313530363538383031653830336633356535386537666437366639393132623737626634623762343932656637646361303732663930393839653437342f62797465636f6465616c6c69616e63652f6a636f&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/tree/main/packages/preview2-shim\" title=\"jco/packages/preview2-shim at main Â· bytecodealliance/jco\">jco/packages/preview2-shim at main Â· bytecodealliance/jco</a></div><div class=\"message_embed_description\">JavaScript tooling for working with WebAssembly Components - bytecodealliance/jco</div></div></div>",
        "id": 450808935,
        "sender_full_name": "Joel Dice",
        "timestamp": 1720731007
    },
    {
        "content": "<p>I was hoping to build a VSCode extension that consists of a mix of typescript + rust -- but I'm more and more thinking i'll just stick to TypeScript.</p>",
        "id": 450809199,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731128
    },
    {
        "content": "<p>I don't have a real <em>need</em> to use Rust, I just like it :)</p>",
        "id": 450809266,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731159
    },
    {
        "content": "<p>The key thing is that I expect the Rust code will need to call into async typescript functions (and vice versa)</p>",
        "id": 450809348,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731192
    },
    {
        "content": "<p>I was hoping I could use a webworker to hide that or something without too much pain</p>",
        "id": 450809365,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731202
    },
    {
        "content": "<p>anyway, thanks! asyncify etc looks cool. Count me as an eager future user, I guess, of better async interop...</p>",
        "id": 450809421,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731225
    },
    {
        "content": "<p>webworkers would definitely work, but no guarantees about the \"without too much pain\" part.</p>",
        "id": 450809511,
        "sender_full_name": "Joel Dice",
        "timestamp": 1720731248
    },
    {
        "content": "<p>it seems like I'd have to write various low-level primtiives to do the blocking etc</p>",
        "id": 450809569,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731272
    },
    {
        "content": "<p>that...doesn't seem worth it</p>",
        "id": 450809576,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731278
    },
    {
        "content": "<p>Yeah, if you look at the <code>preview2-shim</code> code, it's not simple</p>",
        "id": 450809633,
        "sender_full_name": "Joel Dice",
        "timestamp": 1720731300
    },
    {
        "content": "<p>I guess vscode's <a href=\"https://code.visualstudio.com/blogs/2024/06/07/wasm-part2\">worker support</a> is meant to ease this</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://code.visualstudio.com/blogs/2024/06/07/wasm-part2\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a9bb85dafc61473ba3e902edea6bc8176eaaee20/68747470733a2f2f636f64652e76697375616c73747564696f2e636f6d2f6f70656e6772617068696d672f6f70656e67726170682d626c6f672e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://code.visualstudio.com/blogs/2024/06/07/wasm-part2\" title=\"VS Code Extensions and WebAssembly - Part Two\">VS Code Extensions and WebAssembly - Part Two</a></div><div class=\"message_embed_description\">Use WebAssembly in VS Code extensions to run in a separate worker, or write a language server with a language that compiles to WebAssembly.</div></div></div>",
        "id": 450809830,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731385
    },
    {
        "content": "<p>now that I'm re-reading that blog post, I see that the point is that they've done the hard work ...</p>",
        "id": 450809951,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731452
    },
    {
        "content": "<p>...still. I think i'm going to stick with typescript for now.</p>",
        "id": 450809982,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731471
    },
    {
        "content": "<p>Thanks again!</p>",
        "id": 450809987,
        "sender_full_name": "nikomatsakis",
        "timestamp": 1720731476
    }
]