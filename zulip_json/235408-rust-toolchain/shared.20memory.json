[
    {
        "content": "<p>Is there a way to build rust with shared memory support in wasm32-wasi?</p>\n<p>the only flags I could find are:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Features</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">rustc</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">target</span>:\n    <span class=\"nc\">simd128</span><span class=\"w\">             </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"mi\">128</span><span class=\"o\">-</span><span class=\"n\">bit</span><span class=\"w\"> </span><span class=\"n\">SIMD</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">atomics</span><span class=\"w\">             </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">Atomics</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">nontrapping</span><span class=\"o\">-</span><span class=\"n\">fptoint</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">non</span><span class=\"o\">-</span><span class=\"n\">trapping</span><span class=\"w\"> </span><span class=\"n\">float</span><span class=\"o\">-</span><span class=\"n\">to</span><span class=\"o\">-</span><span class=\"n\">int</span><span class=\"w\"> </span><span class=\"n\">conversion</span><span class=\"w\"> </span><span class=\"n\">operators</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">crt</span><span class=\"o\">-</span><span class=\"k\">static</span><span class=\"w\">          </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enables</span><span class=\"w\"> </span><span class=\"n\">C</span><span class=\"w\"> </span><span class=\"n\">Run</span><span class=\"o\">-</span><span class=\"n\">time</span><span class=\"w\"> </span><span class=\"n\">Libraries</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">statically</span><span class=\"w\"> </span><span class=\"n\">linked</span><span class=\"p\">.</span><span class=\"w\"></span>\n\n<span class=\"n\">Code</span><span class=\"o\">-</span><span class=\"n\">generation</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">supported</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">LLVM</span><span class=\"w\"> </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">target</span>:\n    <span class=\"nc\">bulk</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"w\">         </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">bulk</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">operations</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">exception</span><span class=\"o\">-</span><span class=\"n\">handling</span><span class=\"w\">  </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">Wasm</span><span class=\"w\"> </span><span class=\"n\">exception</span><span class=\"w\"> </span><span class=\"n\">handling</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">multivalue</span><span class=\"w\">          </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">multivalue</span><span class=\"w\"> </span><span class=\"n\">blocks</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">functions</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">mutable</span><span class=\"o\">-</span><span class=\"n\">globals</span><span class=\"w\">     </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">mutable</span><span class=\"w\"> </span><span class=\"n\">globals</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">reference</span><span class=\"o\">-</span><span class=\"n\">types</span><span class=\"w\">     </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">reference</span><span class=\"w\"> </span><span class=\"n\">types</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\">        </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">relaxed</span><span class=\"o\">-</span><span class=\"n\">simd</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">sign</span><span class=\"o\">-</span><span class=\"n\">ext</span><span class=\"w\">            </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">sign</span><span class=\"w\"> </span><span class=\"n\">extension</span><span class=\"w\"> </span><span class=\"n\">operators</span><span class=\"p\">.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">tail</span><span class=\"o\">-</span><span class=\"n\">call</span><span class=\"w\">           </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">Enable</span><span class=\"w\"> </span><span class=\"n\">tail</span><span class=\"w\"> </span><span class=\"n\">call</span><span class=\"w\"> </span><span class=\"n\">instructions</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 291609772,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659375952
    },
    {
        "content": "<p>Essentially I'm looking to re-create this in rust, but it seems that the main memory has to be shared in order for the example to work, otherwise each thread in wamr will get it's own memory. <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/multi-thread/wasm-apps/main.c\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/multi-thread/wasm-apps/main.c</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/multi-thread/wasm-apps/main.c\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7f76e5ef8b1bd53ab169b6461a7f5bf1ff636556\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313530316638383534346635303838353037633939393866636535323866653233663533366133626532363662363237653630333831663236646331336337312f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/multi-thread/wasm-apps/main.c\" title=\"wasm-micro-runtime/main.c at main · bytecodealliance/wasm-micro-runtime\">wasm-micro-runtime/main.c at main · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 291610320,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659376228
    },
    {
        "content": "<p>Shouldn't <code>atomics</code> also enable shared_memory?</p>",
        "id": 291692640,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659437672
    },
    {
        "content": "<p>I'm not sure if shared memory is even implemented by the rust toolchain. AFAIR last time I checked, it wasn't.</p>",
        "id": 291723214,
        "sender_full_name": "Marcin Kolny",
        "timestamp": 1659453295
    },
    {
        "content": "<p>I thought that's more a thing that the code generator does, so it should be ok to just pass a setting on to LLVM? Not familiar with what part of the toolchain does what bits</p>",
        "id": 291726141,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659454485
    },
    {
        "content": "<p>I'd be up for doing some work to enable this, but it's not clear to me at this point what the gaps are to enable this so the wamr binary memory has the shared flag on it</p>",
        "id": 291726257,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659454554
    },
    {
        "content": "<p>Now I'm a bit more confused, it seems like <code>-shared-memory</code> is forwarded from here: <a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/back/linker.rs#L1210\">https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/back/linker.rs#L1210</a></p>\n<p>However, my binary doesn't have the shared memory set when adding <code>+atomics</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/back/linker.rs#L1210\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8f5749da91345b7c6cf231b2a0329d613035ce70\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643733313430636236633331353261393537353565303732666666653630336537303634613636633534353533376134326666633438396162616362383737332f727573742d6c616e672f72757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/master/compiler/rustc_codegen_ssa/src/back/linker.rs#L1210\" title=\"rust/linker.rs at master · rust-lang/rust\">rust/linker.rs at master · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust/linker.rs at master · rust-lang/rust</div></div></div>",
        "id": 291969523,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659594342
    },
    {
        "content": "<p>Ok so it's clear now what's happening. If the program depends on rust's stdlib, then it won't compile with shared memory as that's not supported.</p>\n<p>I've discovered this by having <code>.cargo/config</code> do:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">[</span><span class=\"n\">build</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">rustflags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"-C\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"target-cpu=native\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n\n<span class=\"p\">[</span><span class=\"n\">target</span><span class=\"p\">.</span><span class=\"n\">wasm32</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"p\">]</span><span class=\"w\"></span>\n<span class=\"n\">rustflags</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"s\">\"-Ctarget-feature=+atomics,+bulk-memory\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"-Clink_args=--shared-memory\"</span><span class=\"p\">]</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And then it fails with a linker error. In order to fix it I've had to compile with <code>#![nostd]</code> and add a dummy panic handler.</p>\n<p>More specifically the error is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">note</span>: <span class=\"nc\">rust</span><span class=\"o\">-</span><span class=\"n\">lld</span>: <span class=\"nc\">error</span>: <span class=\"o\">--</span><span class=\"n\">shared</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">disallowed</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">std</span><span class=\"o\">-</span><span class=\"n\">f45c87023ba188f4</span><span class=\"p\">.</span><span class=\"n\">std</span><span class=\"p\">.</span><span class=\"mi\">4</span><span class=\"n\">d6b15f2</span><span class=\"o\">-</span><span class=\"n\">cgu</span><span class=\"p\">.</span><span class=\"mf\">0.</span><span class=\"n\">rcgu</span><span class=\"p\">.</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">because</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">was</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">compiled</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">atomics</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">bulk</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">features</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 291972043,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659596424
    },
    {
        "content": "<p>You have to recompile the standard library of you enable shared memory. By default it is compiled with the assumption that wasm is single threaded. You can use <code>-Zbuild-std=std</code> as cargo argument for this. I don't think you need <code>-Clink-args=--shared-memory</code> in that case.</p>",
        "id": 291998347,
        "sender_full_name": "bjorn3",
        "timestamp": 1659615212
    },
    {
        "content": "<p>Oh yes, I have tried but wasm32-wasi doesn't compile with shared memory on:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">s_common</span><span class=\"o\">/</span><span class=\"n\">thread_parker</span><span class=\"o\">/</span><span class=\"n\">futex</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">4</span>:<span class=\"mi\">17</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">use</span><span class=\"w\"> </span><span class=\"k\">crate</span>::<span class=\"n\">sys</span>::<span class=\"n\">futex</span>::<span class=\"p\">{</span><span class=\"n\">futex_wait</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">futex_wake</span><span class=\"p\">};</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"o\">|</span><span class=\"w\">                 </span><span class=\"o\">^^^^^</span><span class=\"w\"> </span><span class=\"n\">could</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">futex</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">sys</span><span class=\"err\">`</span><span class=\"w\"></span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sys</span><span class=\"o\">/</span><span class=\"n\">wasi</span><span class=\"o\">/</span><span class=\"n\">os</span><span class=\"p\">.</span><span class=\"n\">rs</span>:<span class=\"mi\">149</span>:<span class=\"mi\">22</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\"></span>\n<span class=\"mi\">149</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">         </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">_guard</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">env_lock</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">|</span><span class=\"w\">                      </span><span class=\"o\">^^^^^^^^</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">found</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">this</span><span class=\"w\"> </span><span class=\"n\">scope</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I'll have to dig a bit deeper to see what's missing here. Maybe some impl needs to be stolen from <code>wasm32-unknown-unknown</code> target.</p>\n<p><code>env_lock</code> is now defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">#[cfg(not(target_feature = </span><span class=\"s\">\"atomics\"</span><span class=\"cp\">))]</span><span class=\"w\"></span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">env_lock</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"n\">Any</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// No need for a lock if we're single-threaded, but this function will need</span>\n<span class=\"w\">    </span><span class=\"c1\">// to get implemented for multi-threaded scenarios</span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 292002677,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659617536
    },
    {
        "content": "<p>Not sure if wasm32-unknown-unknown should even have access to env (only WASI should)</p>",
        "id": 292009585,
        "sender_full_name": "Marcin Kolny",
        "timestamp": 1659620862
    },
    {
        "content": "<p>Oh yes, I mean for futex stuff. I'll look into it when I get some more time</p>",
        "id": 292009734,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1659620905
    },
    {
        "content": "<p>ah yeah, that one probably can be copied from wasm-unknown-unknown <a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/wasm/atomics/futex.rs\">from what I see</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/wasm/atomics/futex.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2af3a906e5cfbbbe34078b50f6757e47ebbe06f1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303864633639363835323166393966393166383839303836333638333639633564353261653261643030313764366138343035656462643362316362316233632f727573742d6c616e672f72757374)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/master/library/std/src/sys/wasm/atomics/futex.rs\" title=\"rust/futex.rs at master · rust-lang/rust\">rust/futex.rs at master · rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust/futex.rs at master · rust-lang/rust</div></div></div>",
        "id": 292056035,
        "sender_full_name": "Marcin Kolny",
        "timestamp": 1659640358
    }
]