[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> In another thread you mentioned thread-local storage.</p>\n<p>Thinking about that, on the one hand it would be possible for the code inside the sandbox to handle that completely itself if it allocates thread indexes and reserves memory for TLS. On the other hand, given support for multiple linear memories, it'd be fun if each thread could simply have its own small linear memory <em>in addition</em> to the main shared linear memory. Then it'd be straightforward for each thread to have a \"TLS memory\".</p>",
        "id": 286383223,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399213
    },
    {
        "content": "<p>One complication with that other hand is that linear memories are not first-class. Each load and store has to decide which memory it's referencing in a static immediate field.</p>",
        "id": 286383300,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655399270
    },
    {
        "content": "<p>That would preclude taking the address of a thread-local variable and doing anything non-local with it.</p>",
        "id": 286383388,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655399296
    },
    {
        "content": "<p>Ah, I forgot it had to be an <em>immediate</em>.</p>",
        "id": 286383410,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399311
    },
    {
        "content": "<p>(If we had a mechanism by which you could have a linear memory that is actually overlapping with the main shared linear memory, that could potentially help with that.)</p>",
        "id": 286383496,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399363
    },
    {
        "content": "<p>That aside, would something go horribly wrong if there <em>were</em> a way to have a first-class linear memory object?</p>",
        "id": 286383520,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399386
    },
    {
        "content": "<p>Linear memories being non-first-class allows JITs to generate specialized code in several situations.</p>",
        "id": 286383971,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655399598
    },
    {
        "content": "<p>Fair.</p>",
        "id": 286383988,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399606
    },
    {
        "content": "<p>I <em>think</em> we could do this without first-class linear memories though.</p>",
        "id": 286384006,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399619
    },
    {
        "content": "<p>Declare a linear memory that consists of a reference to a range of an existing linear memory, and when starting a thread have the ability to say \"when this thread references memory N that's this new linear memory\".</p>",
        "id": 286384196,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399711
    },
    {
        "content": "<p>Then if you want to reference TLS as a generic pointer you translate to the shared linear memory.</p>",
        "id": 286384302,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655399763
    },
    {
        "content": "<p>All that aside, in the absence of first-class linear memory, it might well be easier and more efficient to just give threads a base address in the main linear memory.</p>",
        "id": 286384780,
        "sender_full_name": "Josh Triplett",
        "timestamp": 1655400021
    },
    {
        "content": "<p>In the instance-per-thread model, this is done with wasm globals, which are per-instance and thus per-thread. In the multiple-threads-in-a-single-instance model, this is expected to be done by having a flag which indicates which globals are thread-local.</p>",
        "id": 286397671,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655405736
    },
    {
        "content": "<p>Thread-local wasm globals act much like \"tls registers\" in many platform ABIs. They're basically per-thread pointers.</p>",
        "id": 286397811,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655405782
    },
    {
        "content": "<p>That allows them to point to a thread's TLS data in a shared address space, which is a simpler model than threads having different base addresses in the address space.</p>",
        "id": 286397933,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1655405833
    }
]