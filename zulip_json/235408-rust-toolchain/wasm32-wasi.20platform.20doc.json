[
    {
        "content": "<p>I was thinking it might be nice to have a wasm32-wasi document in the rustc guide section on platform support, similar to how <a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support/wasm64-unknown-unknown.html\">https://doc.rust-lang.org/nightly/rustc/platform-support/wasm64-unknown-unknown.html</a> exists for wasm64-unknown-unknown (which, full disclosure, I have no idea how it relates to wasm32-wasi)</p>",
        "id": 291363738,
        "sender_full_name": "bstrie",
        "timestamp": 1659119426
    },
    {
        "content": "<p>I'd be willing to make the PR adding it, but I don't know enough about the target to answer all the questions in the requirements section: <a href=\"https://doc.rust-lang.org/nightly/rustc/platform-support/TEMPLATE.html#requirements\">https://doc.rust-lang.org/nightly/rustc/platform-support/TEMPLATE.html#requirements</a></p>",
        "id": 291363990,
        "sender_full_name": "bstrie",
        "timestamp": 1659119551
    },
    {
        "content": "<p>Here's what I might recommend to write for that:</p>\n<hr>\n<h2>Requirements</h2>\n<p>This target is cross-compiled and represents bindings to <a href=\"https://github.com/webassembly/wasi\">WASI</a>  host imports available to WebAssembly. This target supports <code>std</code>, although some functions are stubbed out to unconditionally return errors for platform features not supported by WASI yet. For example <code>std::thread::spawn</code> will panic because WASI does not support spawning a thread. At this time <code>std::fs</code> should work and some of <code>std::net</code> should work. The exact support provided by <code>std</code> will evolve over time as WASI evolves and gains functionality.</p>\n<p>This target is relatively stable but WASI itself is not 100% stable yet. This Rust target will continue to evolve with the upstream evolution of the WASI standard, in particular around the signatures and names of host imported functions. </p>\n<p>The WebAssembly binaries produced by this target can run in a number of WebAssembly runtimes which support WASI. For example there are some browser polyfills for WASI, node.js has an experimental <code>wasi</code> module, and non-JS runtime such as Wasmtime support WASI out-of-the-box. The general intention is that WASI binaries do not need extra \"host glue\" in the form of JS glue code or otherwise code necessary to run the WebAssembly modules.</p>\n<p>This target is currently single-threaded and generally does not support the <code>atomics</code> feature of WebAssembly.</p>\n<p>This target links to <a href=\"https://github.com/WebAssembly/wasi-libc\">wasi-libc</a> for core functionality such as memory allocation and handling of \"preopened\" paths. This is also done to assist in interoperating Rust code with other languages such as C when they're all compiled to the <code>wasm32-wasi</code> target.</p>\n<p>Notable target features for <code>wasm32-wasi</code> include:</p>\n<ul>\n<li><code>+bulk-memory</code> - enables the <a href=\"https://github.com/webassembly/bulk-memory-operations\">bulk memory operations proposal</a>, namely the <code>memory.copy</code> instruction</li>\n<li><code>+simd128</code> - enables the <a href=\"https://github.com/webassembly/simd\">simd proposal</a> which includes a number of operations for 128-bit simd types in the <a href=\"https://doc.rust-lang.org/core/arch/wasm32/\"><code>core::arch::wasm32</code> module</a></li>\n<li><code>+sign-ext</code> - enables some miscellaneous <a href=\"https://github.com/webassembly/sign-extension-ops\">sign extension instructions</a> for more efficient low-level operations</li>\n<li><code>+nontrapping-fptoint</code> - enables the <a href=\"https://github.com/WebAssembly/nontrapping-float-to-int-conversions\">nontrapping float-to-int proposal</a> which improves codegen and efficiency of <code>f32 as i32</code> casts in Rust for example</li>\n</ul>\n<p>This target does not support <code>panic=unwind</code> at this time.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/wasi\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/5cffb54b981213fc024ea51904539af75fa16c6d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613663356631326338303961303936316363623338623961616132386662303461343232386461303065376161666536386261393262363436383862383339342f576562417373656d626c792f57415349)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/wasi\" title=\"GitHub - WebAssembly/WASI: WebAssembly System Interface\">GitHub - WebAssembly/WASI: WebAssembly System Interface</a></div><div class=\"message_embed_description\">WebAssembly System Interface. Contribute to WebAssembly/WASI development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1c185ceaab5c92dc552f2e63d36ca1251dfc13ab\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643263626235366637386636306166656138616261366464373865633333623937353037633134373337623462613735623865383935643039616631346530322f576562417373656d626c792f776173692d6c696263)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc\" title=\"GitHub - WebAssembly/wasi-libc: WASI libc implementation for WebAssembly\">GitHub - WebAssembly/wasi-libc: WASI libc implementation for WebAssembly</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/bulk-memory-operations\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/c1a35310e9e93efb8649a405d372e409dcba54db\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353238323934326664623461333338653933623231613463323563313533363466353935663333386233306636643535636630383061663661303332646161652f576562417373656d626c792f62756c6b2d6d656d6f72792d6f7065726174696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/bulk-memory-operations\" title=\"GitHub - WebAssembly/bulk-memory-operations: Bulk memory operations\">GitHub - WebAssembly/bulk-memory-operations: Bulk memory operations</a></div><div class=\"message_embed_description\">Bulk memory operations. Contribute to WebAssembly/bulk-memory-operations development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/simd\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cfc929ab213d8c9134aa60e59e932dd488d18a40\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663533343235346462303530333631653633653738393466306630626565363134336533366533386262333763643335366635336632313136336534326336342f576562417373656d626c792f73696d64)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/simd\" title=\"GitHub - WebAssembly/simd: Branch of the spec repo scoped to discussion of SIMD in WebAssembly\">GitHub - WebAssembly/simd: Branch of the spec repo scoped to discussion of SIMD in WebAssembly</a></div><div class=\"message_embed_description\">Branch of the spec repo scoped to discussion of SIMD in WebAssembly  - GitHub - WebAssembly/simd: Branch of the spec repo scoped to discussion of SIMD in WebAssembly</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/webassembly/sign-extension-ops\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7d1590598a005624a43fe27c72284682eba7ab70\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633962333835613434323465336339386431646330653665393332303238306263306462363964646134316437353865316430376136373133396264633263652f576562417373656d626c792f7369676e2d657874656e73696f6e2d6f7073)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/webassembly/sign-extension-ops\" title=\"GitHub - WebAssembly/sign-extension-ops: Sign-extension opcodes\">GitHub - WebAssembly/sign-extension-ops: Sign-extension opcodes</a></div><div class=\"message_embed_description\">Sign-extension opcodes. Contribute to WebAssembly/sign-extension-ops development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/nontrapping-float-to-int-conversions\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/94799fd47aa8bc1525cdf819e4691c19ca9c127f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633466333830396431376430316135376635633333646237616639666437653232316163303262326464646138303331383563386630396134646532616432352f576562417373656d626c792f6e6f6e7472617070696e672d666c6f61742d746f2d696e742d636f6e76657273696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/nontrapping-float-to-int-conversions\" title=\"GitHub - WebAssembly/nontrapping-float-to-int-conversions: Proposal to add non-trapping float-to-int conversions to WebAssembly\">GitHub - WebAssembly/nontrapping-float-to-int-conversions: Proposal to add non-trapping float-to-int conversions to WebAssembly</a></div><div class=\"message_embed_description\">Proposal to add non-trapping float-to-int conversions to WebAssembly - GitHub - WebAssembly/nontrapping-float-to-int-conversions: Proposal to add non-trapping float-to-int conversions to WebAssembly</div></div></div>",
        "id": 291365339,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1659120186
    },
    {
        "content": "<p>er hit enter too soon editing more in now</p>",
        "id": 291365366,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1659120211
    },
    {
        "content": "<p>ok filled out a bit more now, and happy to field questions from upstream if there are any about that</p>",
        "id": 291366270,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1659120683
    },
    {
        "content": "<p>Awesome, I'll definitely file a PR with this info, thanks Alex! Would you mind if I specified you and/or Dan as the target maintainers?</p>",
        "id": 291370858,
        "sender_full_name": "bstrie",
        "timestamp": 1659123214
    },
    {
        "content": "<p>Sure yeah, I don't mind being listed</p>",
        "id": 291371430,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1659123525
    }
]