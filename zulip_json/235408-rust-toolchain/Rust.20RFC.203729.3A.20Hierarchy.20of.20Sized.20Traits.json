[
    {
        "content": "<p>FYI <a href=\"https://github.com/rust-lang/rfcs/pull/3729#issue-2662434146\">Rust RFC 3729</a> is up. Oli (Scherer) was telling me about this, and how it will make it possible to teach the Rust compiler about externrefs, which should be useful for our Rust bindgen.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rfcs/pull/3729#issue-2662434146\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/df81d0db34d337c8e203275de56b5bd3a402ee50/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363639613961316539383232393265323735656365353463366333313862366361306237613537323064333861376366363937633363303833383039656661612f727573742d6c616e672f726663732f70756c6c2f33373239&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rfcs/pull/3729#issue-2662434146\" title=\"Hierarchy of Sized traits by davidtwco 路 Pull Request #3729 路 rust-lang/rfcs\">Hierarchy of Sized traits by davidtwco 路 Pull Request #3729 路 rust-lang/rfcs</a></div><div class=\"message_embed_description\">All of Rust&#39;s types are either sized, which implement the Sized trait and have a statically known size during compilation, or unsized, which do not implement the Sized trait and are assumed to ...</div></div></div>",
        "id": 483046566,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1731942419
    },
    {
        "content": "<p>Raising it here since this seems relevant for us. Want to make sure that at least <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, and <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> have seen this.</p>",
        "id": 483047479,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1731942621
    },
    {
        "content": "<p>This might also be relevant to the way Rust interacts with Wasm GC types I believe.</p>",
        "id": 483047721,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1731942687
    },
    {
        "content": "<p>I suspect that this certainly doesn't hurt the future externref story for Rust but I also don't think it will necessarily trivially unlock it. For example it's possible to have an <code>externref</code> function parameter or local variable but it's not possible to take the address of it (without further language/codegen changes). Basically the fact that <code>externref</code> effectively lives in a different address space makes it particularly problematic.</p>\n<p>If it's possible to use this RFC to statically have a type that can be used in function parameters, function locals, and returns, but NOT be able to use it in structs/enums then that'd be perfect for externref. Effectively externref won't work for now in structs/enums because it can't live in memory and it basically doesn't make sense to even construct a value of those types. As a primitive though it can possibly be useful</p>",
        "id": 483066445,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1731947049
    },
    {
        "content": "<p>I seeeee - ty for looking into this and sharing your analysis!</p>",
        "id": 483311419,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1732035645
    }
]