[
    {
        "content": "<p>I notice rust 1.70 enabled the target features sign-ext and mutable-global by default. This is .. a little disruptive but we can adapt. I want to make a testcase that exhibits uses of both of these features, however, and am struggling a bit. I can do <code>sign-ext</code> by using some inline <code>asm!</code> to pick out the required instruction, but I'm wondering: is there a rust construct that causes a mutable global export? If I make a normal <code>mut static</code> and <code>#[no_mangle]</code> it, I think it exports an immutable global that has a linear-memory address of the mutable variable. Is the only viable approach here to write a module in <code>.wat</code>?</p>",
        "id": 380528227,
        "sender_full_name": "Graydon Hoare",
        "timestamp": 1690851322
    },
    {
        "content": "<p>I can't figure out anything to put in <code>global_asm!</code> that might work</p>",
        "id": 380530593,
        "sender_full_name": "Graydon Hoare",
        "timestamp": 1690852143
    },
    {
        "content": "<p>Yeah rust and llvm have no native ability to export globals in wasm, so you'll need probably global asm to get the linking metadata to be present</p>",
        "id": 380571538,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1690871449
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-preview1-component-adapter/build.rs\">https://github.com/bytecodealliance/wasmtime/blob/main/crates/wasi-preview1-component-adapter/build.rs</a></p>",
        "id": 380724418,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1690900514
    },
    {
        "content": "<p>and when that fails you can roll your own object file</p>",
        "id": 380724589,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1690900538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> I'm trying to find an example of <code>global_asm</code> with wasm and coming up short -- it doesn't look like I can jam arbitrary wat in there -- what's the supported syntax?</p>",
        "id": 380782150,
        "sender_full_name": "Graydon Hoare",
        "timestamp": 1690909969
    },
    {
        "content": "<p>oh geez I guess I can infer something by reading this <a href=\"https://llvm.org/doxygen/WebAssemblyAsmParser_8cpp_source.html\">https://llvm.org/doxygen/WebAssemblyAsmParser_8cpp_source.html</a></p>",
        "id": 380782857,
        "sender_full_name": "Graydon Hoare",
        "timestamp": 1690910116
    },
    {
        "content": "<p>Yeah <code>global_asm!</code> has funky syntax and honestly I'm not so sure of it myself. I think last I checked I was poking around various test cases in LLVM to figure out what to do since I don't think it's documented anywhere. It's definitely not arbitrary s-expr wasm stuff</p>",
        "id": 380920175,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1690958499
    },
    {
        "content": "<p>ok. I wound up just using a utility crate we use to programmatically build wasms. who knows if any rust constructs actually correspond! haha</p>",
        "id": 381244961,
        "sender_full_name": "Graydon Hoare",
        "timestamp": 1690997832
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"634398\">Graydon Hoare</span> has marked this topic as resolved.</p>",
        "id": 381575609,
        "sender_full_name": "Notification Bot",
        "timestamp": 1691086489
    }
]