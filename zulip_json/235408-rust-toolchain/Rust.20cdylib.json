[
    {
        "content": "<p>In C:</p>\n<ul>\n<li><code>-shared</code> means to produce a shared-everything dynamic library (with a <code>dylink.0</code>, PIC, imported memory, etc.)</li>\n<li><code>-mexec-model=reactor</code> means to produce a \"reactor-style\" Wasm module (no <code>dylink.0</code>, no PIC, exported memory, etc.).</li>\n</ul>\n<p>In Rust:</p>\n<ul>\n<li><code>cdylib</code> means to produce a \"reactor-style\" Wasm module</li>\n<li>there is no way to produce a shared-everything dynamic library (AFAICT)</li>\n</ul>\n<p>Should we be thinking about a plan to add shared-everything dynamic linking support for Rust? I don't know of anyone that urgently needs it, but if we will eventually need it, perhaps we should start thinking about how we'll get there?</p>",
        "id": 424768205,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709596049
    },
    {
        "content": "<p>I think it'd be fine to redefine <code>cdylib</code> on the <code>wasm32-wasip2</code> target and beyond, but beyond that I don't know of a great way to deal with <code>-mexec-model</code>.</p>\n<p>The closest equivalent I can think of is <code>#![windows_subsystem = \"...\"]</code> at the crate level</p>",
        "id": 424768526,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709596206
    },
    {
        "content": "<p>How hard would it be to add a new crate-type?</p>",
        "id": 424768735,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709596323
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/235408-rust-toolchain/topic/Rust.20cdylib/near/424768205\">said</a>:</p>\n<blockquote>\n<p>...</p>\n<ul>\n<li>there is no way to produce a shared-everything dynamic library (AFAICT)</li>\n</ul>\n<p>Should we be thinking about a plan to add shared-everything dynamic linking support for Rust? I don't know of anyone that urgently needs it, but if we will eventually need it, perhaps we should start thinking about how we'll get there?</p>\n</blockquote>\n<p>You can do it today with some black magic, e.g.: <code>RUSTFLAGS=\"-C relocation-model=pic\" cargo +nightly build -Zbuild-std=panic_abort,std --release --target=wasm32-wasi</code> and <code>crate-type = [ \"staticlib\" ]</code> to build a PIC .a file, which you can then run through <code>clang -shared -Wl,--whole-archive &lt;name&gt;.a --Wl,--no-whole-archive</code>.  What could be easier? :)</p>",
        "id": 424769116,
        "sender_full_name": "Joel Dice",
        "timestamp": 1709596552
    },
    {
        "content": "<p>Just making \"-C relocation-model=pic\" the default for <code>wasm32-wasip2</code> would be a big step forward</p>",
        "id": 424769282,
        "sender_full_name": "Joel Dice",
        "timestamp": 1709596655
    },
    {
        "content": "<p>To do even that though, we should have something to migrate existing users to.</p>",
        "id": 424769354,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709596689
    },
    {
        "content": "<p>I suspect adding a new crate type would be a very big ask</p>",
        "id": 424769458,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709596763
    },
    {
        "content": "<p>that's integrated in tons and tons of rust tooling</p>",
        "id": 424769474,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709596772
    },
    {
        "content": "<p>alternatively we could make <code>#![no_main]</code> work for executables perhaps</p>",
        "id": 424769504,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709596796
    },
    {
        "content": "<p>to map to the \"reactor\" case</p>",
        "id": 424769517,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709596801
    },
    {
        "content": "<p>Ooh, that's an interesting idea.</p>",
        "id": 424769591,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709596822
    },
    {
        "content": "<p>Hmm, <code>no_start</code> means something subtly different on other architectures. It looks like what we might want is the  <a href=\"https://github.com/rust-lang/rfcs/pull/2735\"><code>#![no_entry]</code> proposal</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rfcs/pull/2735\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bc3e59687b7a46fc91746e63432706994306bf69\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633365393835663962363362333635616431633836383237346437353637613238346138343836353764393038376563343864303831396537356363653166322f727573742d6c616e672f726663732f70756c6c2f32373335)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rfcs/pull/2735\" title=\"RFC: Add `no_entry` attribute to omit entry point symbol by joshtriplett 路 Pull Request #2735 路 rust-lang/rfcs\">RFC: Add `no_entry` attribute to omit entry point symbol by joshtriplett 路 Pull Request #2735 路 rust-lang/rfcs</a></div><div class=\"message_embed_description\">This allows people to write their own entry point, without needing to\nmanually link or create a .cargo/config with target-specific linker\narguments.</div></div></div>",
        "id": 424772586,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709598483
    },
    {
        "content": "<p>it might be best to have <code>#![wasm_something = \"something\"]</code> perhaps to sidestep portability concerns</p>",
        "id": 424773640,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709599127
    },
    {
        "content": "<p>we don't really want to force any other platform to worry about this</p>",
        "id": 424773648,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709599135
    },
    {
        "content": "<p>I'm not sure if we want to persist the \"command\" and \"reactor\" terminology though?</p>",
        "id": 424773668,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709599147
    },
    {
        "content": "<p>perhaps <code>#![wasm_no_start]</code> on the crate</p>",
        "id": 424773761,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709599188
    },
    {
        "content": "<p>Yeah, I was never a huge fan of \"reactor\", and would be happy to use some other term.</p>",
        "id": 424773763,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709599192
    },
    {
        "content": "<p>with <code>wasm_no_start</code> we perhaps wouldn't have to give it a name even</p>",
        "id": 424773819,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709599210
    },
    {
        "content": "<p>it's all just wasm binaries with or without a start</p>",
        "id": 424773833,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709599219
    },
    {
        "content": "<p>What about <code>#![wasm_exec = \"exports\"]</code>, which is sort of short for \"the way you execute the code is, you call the exports\"?</p>",
        "id": 424774019,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709599346
    },
    {
        "content": "<p>I like the idea of the terminology, but reading <code>#![wasm_exec = \"exports\"]</code> as a standalone thing doesn't do a great job of conveying that, so we might want some wordsmithing there</p>",
        "id": 424778945,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602825
    },
    {
        "content": "<p>\"world\"?</p>",
        "id": 424778972,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709602850
    },
    {
        "content": "<p><code>#![wasm_entry = \"exports\"]</code> maybe? defaulted to <code>\"main\"</code>?</p>",
        "id": 424778976,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602853
    },
    {
        "content": "<p>Or maybe we can do some more magic and infer this from the world the bindings are generated from.</p>",
        "id": 424779008,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709602891
    },
    {
        "content": "<p>hm I think we need knowledge before that</p>",
        "id": 424779024,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602912
    },
    {
        "content": "<p>b/c right now <code>wasm-component-ld</code> picks the adapter based on <code>_start</code> or not</p>",
        "id": 424779035,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602922
    },
    {
        "content": "<p>e.g. <a href=\"https://github.com/alexcrichton/wasm-component-ld/blob/bb42edd9b985208c2f73ea147aa1fd19ccc1958a/src/main.rs#L83-L99\">this</a></p>",
        "id": 424779104,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602947
    },
    {
        "content": "<p>so I think rustc needs to know about the shape of generated code</p>",
        "id": 424779115,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602960
    },
    {
        "content": "<p>and rustc won't have total knowledge of linked libraries for example</p>",
        "id": 424779121,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709602970
    },
    {
        "content": "<p>All we really need to know is if you have <code>wasi:cli/run@0.2.0</code></p>",
        "id": 424779159,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709603006
    },
    {
        "content": "<p>that's part of the adapter though, so rustc will never see that</p>",
        "id": 424779183,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709603024
    },
    {
        "content": "<p>I'd be ok waiting on these changes until we don't have an adapter anymore</p>",
        "id": 424779244,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709603052
    },
    {
        "content": "<p>If that makes it simpler</p>",
        "id": 424779257,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709603065
    },
    {
        "content": "<p>but even then where would <code>wasi:cli/run@0.2.0</code> be referenced?</p>",
        "id": 424779271,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709603083
    },
    {
        "content": "<p>e.g. as a rust programmer you're \"just\" doing <code>fn main() {}</code></p>",
        "id": 424779284,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709603094
    },
    {
        "content": "<p>so I feel like we need a source-level annotation of whether that's expected or not for the compiler</p>",
        "id": 424779312,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1709603109
    },
    {
        "content": "<p>Hmm, yeah.</p>",
        "id": 424779357,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1709603144
    }
]