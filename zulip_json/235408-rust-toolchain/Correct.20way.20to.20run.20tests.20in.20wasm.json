[
    {
        "content": "<p>I was thinking a nice thing I could do with WASMTime is to have rust (rust compiled to WASM) <code>[test]</code> tests for testing various bindings and interaction with the host program (by calling exposed functions, etc.). </p>\n<p>It all works well if tests pass, however on <code>panic!</code> or a failed <code>assert!</code> the wasm program just stops execution. This is unlike <code>panic!</code> in a normal program where if uncaught you get the panic message still.</p>\n<p>What's the correct way to run rust tests that are compiled to WASM? Does this even make sense?</p>",
        "id": 206611963,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597170310
    },
    {
        "content": "<p>There are various advantages to doing this (having rust tests in WASM), such as getting a test executor out of the box, but the drawbacks seem a bit big and I don't know if anyone has tried this or was able to deal with these things.</p>",
        "id": 206612135,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597170385
    },
    {
        "content": "<p><del>It exits with \"Failed to invoke function\" error, but I don't know what function that is yet.</del> This was the other VM, wasm3 that reports that, wasmtime just silently exits with no error returned.</p>",
        "id": 206613040,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597170814
    },
    {
        "content": "<p>is it a bin (not lib) for \"wasm32-wasi\" target?</p>",
        "id": 206613295,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597170925
    },
    {
        "content": "<p>/me checks if <code>cargo build --target wasm32-wasi --test ...</code> works</p>",
        "id": 206613514,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597171020
    },
    {
        "content": "<p>So the wasm code is build like this: <code>cargo build --release --target wasm32-wasi --tests</code></p>",
        "id": 206613544,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597171027
    },
    {
        "content": "<p>But whenever a test fails (try panic! or assert!(false) inside of one, the wasmtime VM just exits and doesn't continue executing remaining tests.</p>",
        "id": 206613613,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597171063
    },
    {
        "content": "<p>On a successful run:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">always_fail_test</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\">  </span><span class=\"n\">good_test</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206613706,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597171095
    },
    {
        "content": "<p>the <code>always_fail_test</code> in this case does nothing, however if i have <code>panic!(\"asdf\");</code> in it, the output is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">running</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">tests</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">always_fail_test</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206613879,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597171195
    },
    {
        "content": "<p>Then it quits the VM, returning from the invoked function, not printing it failed and not executing the other test.</p>",
        "id": 206613991,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597171236
    },
    {
        "content": "<p>there are many restrictions on what \"wasm32\" target can do, e.g. as listed in <a href=\"https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library/test/src/lib.rs\">https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library/test/src/lib.rs</a> -- I bet it is threads support?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library/test/src/lib.rs\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/5430905?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-lang/rust/blob/f3a9de9b08659e20ce7c282ed77bc43ddd149107/library/test/src/lib.rs\" title=\"rust-lang/rust\">rust-lang/rust</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software. - rust-lang/rust</div></div></div>",
        "id": 206616162,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172206
    },
    {
        "content": "<p>Aren't tests from a module effectively running on a single threead?</p>",
        "id": 206616246,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172252
    },
    {
        "content": "<p>They pass ok if no test asserts/fails</p>",
        "id": 206616296,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172278
    },
    {
        "content": "<p>in wasm or native?</p>",
        "id": 206616361,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172290
    },
    {
        "content": "<p>In native (and wasm)</p>",
        "id": 206616378,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172301
    },
    {
        "content": "<p>I guess that should make them fail even if no test fails (if it's threads)</p>",
        "id": 206616409,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172318
    },
    {
        "content": "<p>But you do bring a good point, I guess nobody tried it</p>",
        "id": 206616434,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172332
    },
    {
        "content": "<p>\"By default, all tests are run in parallel.\"</p>",
        "id": 206616442,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172337
    },
    {
        "content": "<p>Hmm, but they do work just fine if tests pass (i see the output, etc,) As far as I know the current std thread impl panics at initialization. Maybe that mechanism kicks in after one of them fails/takes too long? But that's still suspicious.</p>",
        "id": 206616515,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172377
    },
    {
        "content": "<p>in wasm, if thing goes <code>unreachable</code> the thread is effectively dead</p>",
        "id": 206616692,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172439
    },
    {
        "content": "<p>if process single threaded -- it is dead too</p>",
        "id": 206616764,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172480
    },
    {
        "content": "<p>I see, the thing that confuses me is how i am able to get the successful output from WASM, as I'd expect it to reach <code>unreachable</code> regardless of test results.</p>",
        "id": 206616968,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172548
    },
    {
        "content": "<p>/me thinks term \"poisoned\" fits here better</p>",
        "id": 206616980,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172552
    },
    {
        "content": "<p>I could run it with <code>test_threads=1</code>? Not sure if this is different from what concurrency returns in the context of a WASM VM</p>",
        "id": 206617645,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597172905
    },
    {
        "content": "<p>does it match when <code>--test_threads=1</code> used on native test runs?</p>",
        "id": 206617766,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1597172983
    },
    {
        "content": "<p>It seems so, I didn't run this rust program on a native test run as it depends on methods that are only available to it through VM bindings, so I didn't test it in any other way than a WASM binary</p>",
        "id": 206617901,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597173048
    },
    {
        "content": "<p>Maybe what I need is: <a href=\"https://github.com/japaric/utest\">https://github.com/japaric/utest</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/japaric/utest\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/5018213?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/japaric/utest\" title=\"japaric/utest\">japaric/utest</a></div><div class=\"message_embed_description\">Unit `#[test]`ing for microcontrollers and other `no_std` systems - japaric/utest</div></div></div>",
        "id": 206619117,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597173686
    },
    {
        "content": "<p>But to ask another way, does anyone have a way of running unit [tests] in WASM?</p>",
        "id": 206620284,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597174285
    },
    {
        "content": "<p>we (fastly folks) do not</p>",
        "id": 206623173,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1597175761
    },
    {
        "content": "<p>its a significant gap that we have not figured out a detailed plan to address.</p>",
        "id": 206623401,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1597175858
    },
    {
        "content": "<p>Just to follow-up on this, I generated 1000 #[test] methods that pass, and i can run them successfully with wasmtime, so i am starting to believe it may not be thread related, or if it is thread-related this is triggered once an assert/panic occurs</p>",
        "id": 206624180,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597176207
    },
    {
        "content": "<p>One not so ideal way of doing it in a CI environment is to just search for <code>test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out</code> in the output after the test module is executed, if that's missing, mark it as failed and debugging starts (not ideal at all)</p>",
        "id": 206624317,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597176264
    },
    {
        "content": "<p>Final lines of my experiment: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">good_test995</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">good_test996</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">good_test997</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">good_test998</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">good_test999</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">ok</span><span class=\"w\"></span>\n\n<span class=\"n\">test</span><span class=\"w\"> </span><span class=\"n\">result</span>: <span class=\"nc\">ok</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"mi\">1000</span><span class=\"w\"> </span><span class=\"n\">passed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">failed</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">ignored</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">measured</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"n\">filtered</span><span class=\"w\"> </span><span class=\"n\">out</span><span class=\"w\"></span>\n\n<span class=\"nb\">Result</span>: <span class=\"mi\">0</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 206624431,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597176333
    },
    {
        "content": "<p>It's kind of all-or-nothing, but on the bright-side we can execute them. </p>\n<p><span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span>  if you want to team-up for a more proper solution to this we would likely want to colaborate on a solution, as it's quite annoying. Building our own test runner seems an easy way out, just as utest did, but with less knobs would be great.</p>",
        "id": 206624657,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597176468
    },
    {
        "content": "<p>hey, sorry, i never got back to this. <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> says that tests \"just work\" if you use <code>cargo wasi</code></p>",
        "id": 207308154,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1597780724
    },
    {
        "content": "<p>i was not aware of this!</p>",
        "id": 207308169,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1597780731
    },
    {
        "content": "<p>I didn't know about cargo wasi. But how would they work if in the tests i'm caling stuff that I exposed throught the WasmtimeVM from my host program. Something like <code>AlexsHostProgramDoStuff(.....)</code> and this exists only there. From what I can tell cargo wasi just automagically launches a wasmtime standalone VM, but that doesn't have my extra exposed functions to the vm <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 207318880,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597786139
    },
    {
        "content": "<p>yeah, there's no story for that yet afaik</p>",
        "id": 207318943,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1597786180
    },
    {
        "content": "<p>I guess they work if they are standalone, tho that's bringing up the question, what build settings does cargo wasi use for that wasmtime to not insta-bail on failure</p>",
        "id": 207318972,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597786196
    },
    {
        "content": "<p>I don't know what that would look like.</p>",
        "id": 207318976,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1597786198
    },
    {
        "content": "<p>Because then I can compile wasmtime the same way in my test setup, and have my exposed functions be there, and just run the tests generated by <code>cargo build --test --target wasm32-wasi</code></p>",
        "id": 207319049,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597786229
    },
    {
        "content": "<p>It seems to me that right now wasmtime could run tests, if compiled / booted-up properly (something I likely don't do).</p>",
        "id": 207319193,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597786318
    },
    {
        "content": "<p>Unless cargo wasi does some extra stuff to patch the test runner before compilation (I didn't check this). Will do some more investigation. Thanks.</p>",
        "id": 207319262,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1597786342
    }
]