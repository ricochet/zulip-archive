[
    {
        "content": "<p>Published this today on the Rust blog: <a href=\"https://blog.rust-lang.org/2024/04/09/updates-to-rusts-wasi-targets.html\">https://blog.rust-lang.org/2024/04/09/updates-to-rusts-wasi-targets.html</a> - FYI for people here tracking Rust toolchain work</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://blog.rust-lang.org/2024/04/09/updates-to-rusts-wasi-targets.html\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/147ecc3caab69e5abda8478c67ed1c5c29a30233\\/68747470733a2f2f7777772e727573742d6c616e672e6f72672f7374617469632f696d616765732f727573742d736f6369616c2d776964652e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://blog.rust-lang.org/2024/04/09/updates-to-rusts-wasi-targets.html\" title=\"Changes to Rust's WASI targets | Rust Blog\">Changes to Rust's WASI targets | Rust Blog</a></div><div class=\"message_embed_description\">Empowering everyone to build reliable and efficient software.</div></div></div>",
        "id": 432351047,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1712700731
    },
    {
        "content": "<p>Purely out of curiosity, do you know if anybody is blogging/Tweeting/Tooting about the implementation details of Rust toolchain work as they go? I'm particularly interested in how much y'all expect to build upon <code>wasi-libc</code> vs. implement directly against the WASI ABI, and how the nascent async work is likely to interact with this â€” e.g. everything stays on forks for now, a separate <code>wasm32-wasip3</code> target ASAP, or somehow allowing tinkering with async on the wasip2 target?</p>",
        "id": 432378121,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1712714437
    },
    {
        "content": "<p><span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span><span aria-label=\"man bowing\" class=\"emoji emoji-1f647-200d-2642\" role=\"img\" title=\"man bowing\">:man_bowing:</span></p>",
        "id": 432378158,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1712714446
    },
    {
        "content": "<p>FWIW, I very much expect Rust's <code>std</code> will continue to build upon <code>wasi-libc</code>.  It can't use the WASI ABI directly without sacrificing interoperability with C code, since <code>wasi-libc</code> is the one responsible for mapping POSIX-style file descriptors to WASI resource handles.  If Rust's <code>std</code> tried to do that itself, it would end up with a mapping that's incompatible with <code>wasi-libc</code>'s , preventing Rust and C code from passing descriptors back and forth.</p>",
        "id": 432515213,
        "sender_full_name": "Joel Dice",
        "timestamp": 1712758850
    },
    {
        "content": "<p>Oh, someone on Reddit asked a really good question about how to migrate existing <code>cfg</code>'s targeting <code>target_os = \"wasi\"</code> to continue working on the new target: <a href=\"https://www.reddit.com/r/rust/comments/1f9qbpv/comment/llqyh9i/\">https://www.reddit.com/r/rust/comments/1f9qbpv/comment/llqyh9i/</a></p>\n<p>I responded, but I'm wondering if perhaps we should file a PR to the announcement post to include this info?</p>",
        "id": 468250783,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725644622
    },
    {
        "content": "<p>This seems something other folks will start running into as well</p>",
        "id": 468250884,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725644648
    },
    {
        "content": "<p>if backwards compat is needed then <code>target_os = \"wasi\", not(target_env = \"p2\")</code> will suffice</p>",
        "id": 468251805,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725644901
    },
    {
        "content": "<p>that's, however, not necessarily future-compatible with a p3, so there's a tradeoff</p>",
        "id": 468251856,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725644916
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/235408-rust-toolchain/topic/.5Bpost.5D.20Changes.20to.20Rust's.20WASI.20targets/near/468251805\">said</a>:</p>\n<blockquote>\n<p>if backwards compat is needed then <code>target_os = \"wasi\", not(target_env = \"p2\")</code> will suffice</p>\n</blockquote>\n<p>wait, can you explain why that's better than passing <code>target_env = \"p1\"</code> ?</p>",
        "id": 468252050,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725644966
    },
    {
        "content": "<p>I assume there's a reason, but not sure I get it?</p>",
        "id": 468252102,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725644985
    },
    {
        "content": "<p>oh the difference is that <code>target_env = \"p1\"</code> was added recently, something like 1.80.0 IIRC</p>",
        "id": 468252287,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725645023
    },
    {
        "content": "<p>oh like that!</p>",
        "id": 468252328,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725645032
    },
    {
        "content": "<p>so if a crate wants to support rustc 1.79.0 and prior with p1 you can't rely on <code>target_env = \"p1\"</code></p>",
        "id": 468252354,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725645041
    },
    {
        "content": "<p>the \"official\" way to select p1, however, is <code>target_env = \"p1\"</code> for sure</p>",
        "id": 468252390,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725645051
    },
    {
        "content": "<p>wait, can't we just tell people to do</p>",
        "id": 468252931,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725645190
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">target_os</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"wasi\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"p\">(</span><span class=\"n\">target_env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"p2\"</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"p\">(</span><span class=\"n\">target_env</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"p3\"</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 468252981,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725645205
    },
    {
        "content": "<p>for like, Ultimate Backwards Compat</p>",
        "id": 468253106,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725645234
    },
    {
        "content": "<p>(at the cost of readability I guess)</p>",
        "id": 468253140,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725645241
    },
    {
        "content": "<p>(updated the comment to include the line about backwards-compat)</p>",
        "id": 468253759,
        "sender_full_name": "Yoshua Wuyts",
        "timestamp": 1725645394
    },
    {
        "content": "<p>oh I wouldn't recommend that</p>",
        "id": 468260775,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725647398
    },
    {
        "content": "<p>mostly b/c <code>target_env = \"p3\"</code> doesn't actually exist yet</p>",
        "id": 468260848,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725647405
    },
    {
        "content": "<p>and it also doesn't include a theoretical <code>target_env = \"p4\"</code></p>",
        "id": 468260887,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1725647416
    }
]