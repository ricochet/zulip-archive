[
    {
        "content": "<p>I'm trying to update my <a href=\"https://github.com/Kylebrown9/template-compiler\">template compiler project</a> and its tests to the latest versions of <code>wasmtime</code> and <code>wasm-tools</code>. However, after resolving some WIT syntax and minor API changes, I'm getting stuck on the new export validation naming rules (as seen <a href=\"https://github.com/bytecodealliance/wasm-tools/blob/d3b111810c20dd4e254f3fcfc1c02673c195ef5e/tests/local/component-model/type-export-restrictions.wast#L148\">here</a>).</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"params\"</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">realloc</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"apply\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">func</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x40b</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>From what I'm reading, I think I need to export the record type holding my parameters (in this case there are no params, it has no fields). However, when I add that logic and an additional export before the function export the problem doesn't go away.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"params\"</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">realloc</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"params\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"apply\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">func</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">valid</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x416</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>What does the component need to look like for this to work?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Kylebrown9/template-compiler\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/aef9139b1296024948ca696c63bc01f3be887dd5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653166633763613164303266616561346236336435333036326466626132643763396632396234353432633237626436633264626135316339626662666634612f4b796c6562726f776e392f74656d706c6174652d636f6d70696c6572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Kylebrown9/template-compiler\" title=\"GitHub - Kylebrown9/template-compiler\">GitHub - Kylebrown9/template-compiler</a></div><div class=\"message_embed_description\">Contribute to Kylebrown9/template-compiler development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/d3b111810c20dd4e254f3fcfc1c02673c195ef5e/tests/local/component-model/type-export-restrictions.wast#L148\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/77dc6c478fd67c605dd405d669f62fcfa27673e8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373633663733313032303835353539643031353762306463633938616534306438303564383335353162363439383262613036636561626562383962653632342f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/d3b111810c20dd4e254f3fcfc1c02673c195ef5e/tests/local/component-model/type-export-restrictions.wast#L148\" title=\"wasm-tools/tests/local/component-model/type-export-restrictions.wast at d3b111810c20dd4e254f3fcfc1c02673c195ef5e · bytecodealliance/wasm-tools\">wasm-tools/tests/local/component-model/type-export-restrictions.wast at d3b111810c20dd4e254f3fcfc1c02673c195ef5e · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 369035154,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687559570
    },
    {
        "content": "<p>I've also tried splitting up the export sections to match the tests more closely but get an even more confusing error.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">component</span>\n<span class=\"w\">  </span><span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">record</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"params\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">2</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"s\">\"params\"</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">canon</span><span class=\"w\"> </span><span class=\"n\">lift</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">core</span><span class=\"w\"> </span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">string</span><span class=\"o\">-</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">utf8</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">realloc</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"s\">\"apply\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">parse</span><span class=\"w\"> </span><span class=\"n\">WebAssembly</span><span class=\"w\"> </span><span class=\"n\">module</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"nc\">type</span><span class=\"w\"> </span><span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">function</span><span class=\"w\"> </span><span class=\"k\">type</span> <span class=\"p\">(</span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">offset</span><span class=\"w\"> </span><span class=\"mh\">0x40f</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 369035626,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687559830
    },
    {
        "content": "<p>I'm also don't understand why <code>wasmprinter</code> is labeling the indices the way it does and why splitting sections up behaves so strangely.</p>",
        "id": 369035800,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687559920
    },
    {
        "content": "<p>it's subtle, but the fix here is to change <code>(param \"params\" 0)</code> to <code>(param \"params\" 1)</code></p>",
        "id": 369039802,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687561852
    },
    {
        "content": "<p>indices in comments like <code>(;0;)</code> mean that the item is introducing and defining index 0, and those comments can in theory be replaced with <code>$foo</code> for human-readability</p>",
        "id": 369039865,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687561893
    },
    {
        "content": "<p>indicies like <code>(type 1)</code> are referring to the index 1</p>",
        "id": 369039878,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687561902
    },
    {
        "content": "<p>as for sections, at least for now in components the seconds are often interspersed and occur frequently, often with 1 element in them, which is why everything looks jumbled up</p>",
        "id": 369039957,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687561935
    },
    {
        "content": "<p>the text format preserves the order in the original binary</p>",
        "id": 369039975,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1687561940
    },
    {
        "content": "<p>Do exports introduce new indices in their respective index spaces? If so, I think that's the concept/detail I was missing.</p>",
        "id": 370111967,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687880249
    },
    {
        "content": "<p>Thanks for your help! The upgrade was successful with the index change you suggested.<br>\n<a href=\"https://github.com/Kylebrown9/template-compiler/pull/2\">https://github.com/Kylebrown9/template-compiler/pull/2</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Kylebrown9/template-compiler/pull/2\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/cc4bc3a52aa74ac893f725fa2685483719992395\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646533363837633438303862613161383566363438613439373338376663616632323262336562396463343066376238326130626462346236313139626330662f4b796c6562726f776e392f74656d706c6174652d636f6d70696c65722f70756c6c2f32)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Kylebrown9/template-compiler/pull/2\" title=\"Update dependencies by Kylebrown9 · Pull Request #2 · Kylebrown9/template-compiler\">Update dependencies by Kylebrown9 · Pull Request #2 · Kylebrown9/template-compiler</a></div><div class=\"message_embed_description\">Update dependencies and make changes to support Wasmtime 10.</div></div></div>",
        "id": 370112267,
        "sender_full_name": "Robin Brown",
        "timestamp": 1687880291
    }
]