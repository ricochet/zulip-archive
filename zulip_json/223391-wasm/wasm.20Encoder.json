[
    {
        "content": "<p>I have a question. I use the Wasm Encoder Create and I want to create a record type. But how can I create an instance of a type which holds the actual values? If I have a record with two integers, how can I save 35 for integer 1 and 129 for integer 2 but not only integers like strings as well as all the other types?</p>",
        "id": 406365029,
        "sender_full_name": "Reyrey",
        "timestamp": 1701888306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"671577\">@Reyrey</span> you would push the values onto the stack in field order and then emit a <code>struct.new</code> instruction: <a href=\"https://docs.rs/wasm-encoder/latest/wasm_encoder/enum.Instruction.html#variant.StructNew\">https://docs.rs/wasm-encoder/latest/wasm_encoder/enum.Instruction.html#variant.StructNew</a></p>",
        "id": 407299063,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1702320105
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> first of all thank you for helping me I have only one question: do i have to put all Fields in the Strack using the memory section where they the values are pushed in field order and then put the u32 in <a href=\"http://struct.new\">struct.new</a></p>",
        "id": 407704349,
        "sender_full_name": "Reyrey",
        "timestamp": 1702466597
    },
    {
        "content": "<p>not in any in-memory stack, on the operand stack. eg the <code>i32.const 1</code> instruction pushes the value <code>1</code> onto the operand stack, <code>i32.add</code> pops two <code>i32</code>s from the stack and pushes one <code>i32</code> onto the stack, etc. you just need to make sure the struct's fields' values are on the stack before executing the <code>struct.new</code> instruction</p>",
        "id": 407763365,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1702484632
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span>  i made a wat format that shows how i understand it let wat_code = \"(module<br>\n  (type $Person (struct<br>\n  (field $id i32)<br>\n  (field $age i32)<br>\n  (field $team i32)<br>\n  (field $tt f32)<br>\n))<br>\n  (func (type 0)<br>\n  i32.const 1<br>\n  i32.const 56<br>\n  i32.const 3<br>\n  f32.const 4.5<br>\n<a href=\"http://struct.new\">struct.new</a> $Person)<br>\n  (export \\\"f\\\" (func 0)))\"; then how would i do it for a record type that holds strings, char and s32 because a record would hold an s32</p>",
        "id": 407812544,
        "sender_full_name": "Reyrey",
        "timestamp": 1702502570
    },
    {
        "content": "<p>wasm gc types can only hold wasm types like i32/i64/etc. and those types aren't signed or unsigned, it is operations on them that determine how the bits are interperted. there are no wasm string types.</p>\n<p>records are a component-model thing, which is unrelated to wasm gc</p>",
        "id": 407812858,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1702502715
    },
    {
        "content": "<p>ah i understand so for a record do i have to have imports or inst it possible to save values for a record type field or do i have to come up with a complet diffrent approach <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span></p>",
        "id": 407814776,
        "sender_full_name": "Reyrey",
        "timestamp": 1702503575
    },
    {
        "content": "<p>in the component model, records are lowered to scalar wasm types according to the canonical ABI: <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md</a></p>",
        "id": 407814948,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1702503650
    },
    {
        "content": "<p>they don't use gc at all (for now, maybe in a while they will optionally use wasm gc if that is what the wasm module wants)</p>",
        "id": 407815009,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1702503680
    },
    {
        "content": "<p>ah so i have to ultilize the abi for reading component-level values into and out of linear memory. are there some ressources that could help me accomplish that</p>",
        "id": 407817881,
        "sender_full_name": "Reyrey",
        "timestamp": 1702504870
    },
    {
        "content": "<p>you probably want to use wit-bindgen to generate the boilerplate: <a href=\"https://github.com/bytecodealliance/wit-bindgen/\">https://github.com/bytecodealliance/wit-bindgen/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fd387b0666790fb5d3f28be1b2e5df11dd8d1cfb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336437353436623462656538393966323133613764666430336336626263393261396335626363353339333832653465326665376437663034623166396538362f62797465636f6465616c6c69616e63652f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/\" title=\"GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - bytecodealliance/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div>",
        "id": 407828178,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1702509786
    },
    {
        "content": "<p>I can't because of the project I'm contributing to and I, want the macro I'm building to be runtime agnostic so we can have different runtimes that work with it the wit-bindgen project from my knowledge only works with wasmtime but thanks for guiding me through that all really appreciate it</p>",
        "id": 407834077,
        "sender_full_name": "Reyrey",
        "timestamp": 1702512965
    },
    {
        "content": "<p>FWIW, <code>wit-bindgen</code> is not <code>wasmtime</code>-specific (it also works great with <code>jco</code>).  It <em>is</em> intended for runtimes that support the component model, although technically you could run a guest that uses <code>wit-bindgen</code>-generated bindings in a host runtime that doesn't support the component model if you're willing to handle the ABI marshaling (on the host side) yourself.</p>",
        "id": 407838233,
        "sender_full_name": "Joel Dice",
        "timestamp": 1702515019
    },
    {
        "content": "<p>I was under the impression that with-bindgen only supported Wasmtime, as I saw that the Wasmer project had to create their own fork of the with-bindgen project. However, I am now curious as to what runtimes with-bindgen currently supports. Are Wasmtime and JCO the only ones, or are there others, such as V8 or Wazero? And if they are not supported, then am I correct in understanding that I would need to handle the ABI marshaling myself?</p>",
        "id": 407914163,
        "sender_full_name": "Reyrey",
        "timestamp": 1702544983
    },
    {
        "content": "<p>Wasmer didn't have to fork wit-bindgen: wit-bindgen is designed to support easy extension with different codegen backends, and adding one for Wasmer wasn't a problem from an engineering perspective.</p>\n<p>As you can read in <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/306#issuecomment-1233535831\">this comment</a> by the project lead, they chose to fork because they were unhappy we didn't want to take on complexity to give them the ability to make the Wasmer support easily discoverable. As you might see, the entire arguments for integrating Wasmer bindings revolve around benefits for them, with just a vague \"collaboration is better\" statement that's not even backed by any concrete benefits we as maintainers of wit-bindgen might derive from this integration.</p>\n<p>In the meantime, wasmtime bindings have been removed from the wit-bindgen repository, because keeping them there wasn't a good fit for our development practices. Meaning any runtime maintaining a bindings backend wouldn't even be somehow less supported than wasmtime.</p>\n<p>This is all to say that I would encourage you to look into using wit-bindgen if all that's blocking you is this perceived issue with supporting other runtimes.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/issues/306#issuecomment-1233535831\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3e20c44bd8c8e603d3d33955976e297c1aabfe36\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616463396263323564313764343864303630333365393931396337323537316461633332656663373761333466656663356261613930613661656231353636322f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f6973737565732f333036)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/306#issuecomment-1233535831\" title=\"Wasmer bindings 路 Issue #306 路 bytecodealliance/wit-bindgen\">Wasmer bindings 路 Issue #306 路 bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">I'm opening this issue to follow up on the PR that we created a few months ago adding support for Wasmer bindings: #173, given that the project has already matured a bit. Right now the wit-bindgen ...</div></div></div>",
        "id": 407951778,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1702557784
    },
    {
        "content": "<p><code>jco</code> runs on V8 by way of NodeJS.  Wazero does not yet have CM support AFAIK, so you'd need to handle the ABI marshaling yourself there.</p>",
        "id": 407994441,
        "sender_full_name": "Joel Dice",
        "timestamp": 1702570394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"234973\">Till Schneidereit</span> <a href=\"#narrow/stream/223391-wasm/topic/wasm.20Encoder/near/407951778\">said</a>:</p>\n<blockquote>\n<p>Wasmer didn't have to fork wit-bindgen: wit-bindgen is designed to support easy extension with different codegen backends, and adding one for Wasmer wasn't a problem from an engineering perspective.</p>\n<p>As you can read in <a href=\"https://github.com/bytecodealliance/wit-bindgen/issues/306#issuecomment-1233535831\">this comment</a> by the project lead, they chose to fork because they were unhappy we didn't want to take on complexity to give them the ability to make the Wasmer support easily discoverable. As you might see, the entire arguments for integrating Wasmer bindings revolve around benefits for them, with just a vague \"collaboration is better\" statement that's not even backed by any concrete benefits we as maintainers of wit-bindgen might derive from this integration.</p>\n<p>In the meantime, wasmtime bindings have been removed from the wit-bindgen repository, because keeping them there wasn't a good fit for our development practices. Meaning any runtime maintaining a bindings backend wouldn't even be somehow less supported than wasmtime.</p>\n<p>This is all to say that I would encourage you to look into using wit-bindgen if all that's blocking you is this perceived issue with supporting other runtimes.</p>\n</blockquote>\n<p>This makes the WIT project even more powerful, as it allows for greater flexibility. I was previously under the impression that this feature was only available for wasmruntime. Knowing this, I am now considering using the WIT project for my contribution. Our project focuses on simplicity, aiming to create a plugin system using wasm that does not overwhelm the user with complexity. To achieve this, we want to use a procedural macro on a type that can generate a record type when the user compiles their own project to wasm. We can then read these from the host application. Do you think that the WIT project would be suitable for this use case?</p>",
        "id": 408173403,
        "sender_full_name": "Reyrey",
        "timestamp": 1702641810
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/223391-wasm/topic/wasm.20Encoder/near/407994441\">said</a>:</p>\n<blockquote>\n<p><code>jco</code> runs on V8 by way of NodeJS.  Wazero does not yet have CM support AFAIK, so you'd need to handle the ABI marshaling yourself there.</p>\n</blockquote>\n<p>To clarify, if various runtimes are already compatible, then the only prerequisite for a runtime is that it must be able to support the CM. In this case, we would only need to create the bindings part. If I have understood you correctly, otherwise we would be required to manage the ABI on our own.</p>",
        "id": 408173460,
        "sender_full_name": "Reyrey",
        "timestamp": 1702641834
    },
    {
        "content": "<p>There's a lot more to the CM than just the ABI, so adding full CM support to a runtime is a fairly large project, but if you're only interested in the ABI you could either write a host bindings generator for the runtime of interest or write bindings by hand.  In any case you might want to play around with the <code>wasmtime::component::bindgen</code> Rust macro, using e.g. <code>cargo expand</code> to see what it generates and get an idea of what's required to satisfy the ABI.  And as Nick mentioned earlier, the \"official\" reference is available at <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md\">https://github.com/WebAssembly/component-model/blob/main/design/mvp/CanonicalABI.md</a></p>",
        "id": 408201511,
        "sender_full_name": "Joel Dice",
        "timestamp": 1702652207
    }
]