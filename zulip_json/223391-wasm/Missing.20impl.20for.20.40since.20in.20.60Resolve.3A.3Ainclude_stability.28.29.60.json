[
    {
        "content": "<p>Hey all,  want to make sure I'm not missing anything obvious before I submit a PR, but is <code>@since</code> actually just missing implementation here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/263b697a442273ef9848e73546c770f5b7f6e2a9/crates/wit-parser/src/resolve.rs#L1334\">https://github.com/bytecodealliance/wasm-tools/blob/263b697a442273ef9848e73546c770f5b7f6e2a9/crates/wit-parser/src/resolve.rs#L1334</a></p>\n<p>Is this just not finished yet? It should actually be checking the <code>since</code> and <code>feature</code> members of <code>Stability::Stable</code> but I think this isn't implemented yet (and needs to be)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/blob/263b697a442273ef9848e73546c770f5b7f6e2a9/crates/wit-parser/src/resolve.rs#L1334\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/0fe015dc13608cc709dae982ede754daecb87549/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353539643863343161633364663161383032376366356262613238336437303833363363383533356463633939653664323538613861656238333535613531652f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/blob/263b697a442273ef9848e73546c770f5b7f6e2a9/crates/wit-parser/src/resolve.rs#L1334\" title=\"wasm-tools/crates/wit-parser/src/resolve.rs at 263b697a442273ef9848e73546c770f5b7f6e2a9 · bytecodealliance/wasm-tools\">wasm-tools/crates/wit-parser/src/resolve.rs at 263b697a442273ef9848e73546c770f5b7f6e2a9 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\"> CLI and Rust libraries for low-level manipulation of WebAssembly modules  - bytecodealliance/wasm-tools</div></div></div>",
        "id": 452175637,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721246295
    },
    {
        "content": "<p>Are you thinking that the packages version would be checked against <code>@since</code> and the item would be omitted if the package's version was too small?</p>",
        "id": 452176978,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721246710
    },
    {
        "content": "<p>Otherwise though it's intentional that currenly the version number on <code>@since</code> is ignored there, but I may be missing a use case</p>",
        "id": 452177058,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721246728
    },
    {
        "content": "<p>Yup that's exactly what I was thinking! Given a file like this:</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>package test:feature-gates@0.2.1;\n\ninterface foo {\n  a: func();\n\n  @since(version = 0.2.1)\n  b: func();\n\n  @since(version = 0.2.2)\n  c: func();\n\n  @unstable(feature = fancier-foo)\n  d: func();\n}\n</code></pre></div>\n<p>I was thinking that both <code>c</code> <em>and</em> <code>d</code> should be missing.</p>",
        "id": 452242899,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721276608
    },
    {
        "content": "<p>Ah the full context might be more useful -- I'm working on <a href=\"https://github.com/bytecodealliance/jco/pull/459\">adding feature gate support to <code>jco</code></a> and this is exactly my test case. </p>\n<p><code>@unstable</code> works great, but what I was finding was that <code>c</code> still shows up (when I'd expect it not to). Though I do think that the case is a bit contrived -- normally the user would get an entirely <em>new</em> WIT (with <code>c</code> included, where as in the past it wasn't present)...</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/jco/pull/459\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/a44ee7c58c99d6a64a7d8846fc75afa730d0f968/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313037373566653762613833613164366563643161393865363334353363343633336666346366376135623633373564363435616436616538303639323664392f62797465636f6465616c6c69616e63652f6a636f2f70756c6c2f343539&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/jco/pull/459\" title=\"feat: support semver aware exclusions by vados-cosmonic · Pull Request #459 · bytecodealliance/jco\">feat: support semver aware exclusions by vados-cosmonic · Pull Request #459 · bytecodealliance/jco</a></div><div class=\"message_embed_description\">This PR updates jco to support the @since, @after and @unstable annotations as implemented by the upstream Rust tooling.\nCurrently there are a few issues left to address:\n\n We likely need an upstre...</div></div></div>",
        "id": 452243127,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721276718
    },
    {
        "content": "<p>I could personally go either way on this. On one hand it seems fine to add. On the other hand I'm doubtful this will show up in practice. Using <code>@since</code> with a future version number seems akin to retroactively modifying a release which generally isn't great practice.</p>",
        "id": 452360180,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721312952
    },
    {
        "content": "<p>Yeah I could definitely see/understand that. Then the ideal use case is generally:</p>\n<ul>\n<li>New version of a WIT contract is released (ex. <code>0.2.1</code>)</li>\n<li>Users download updated WIT files for <code>0.2.0</code>to <code>0.2.1</code> somehow</li>\n<li>WIT contract for <code>0.2.1</code> contains <code>@since(0.2.1)</code> annotations <em>and</em> <code>@since(0.2.0)</code> annotations</li>\n</ul>\n<p>I think what makes me think this usecase is intended is when reading the <a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#feature-gates\">WIT design</a>:</p>\n<blockquote>\n<p>Thus, when building a component targeting, e.g., <code>0.2.1</code>, <code>b</code> can be used, but <code>c</code> cannot. An important expectation set by the <code>@since</code> gate is that, once applied to an item, the item is not modified incompatibly going forward (according to general semantic versioning rules).</p>\n</blockquote>\n<p>How would anyone targeting <code>0.2.1</code> ever even see <code>c</code>(in that example), unless it was added to the WIT for <code>0.2.1</code> itself? Is there a targeting mechanism I'm missing?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#feature-gates\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8ddab016a3bab732fc202bc23086dc0acd99ffbd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616437643630356336363835353466623137306462656237333533343864623961343065613365623737623937633562643534653933393462303737626262642f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/main/design/mvp/WIT.md#feature-gates\" title=\"component-model/design/mvp/WIT.md at main · WebAssembly/component-model\">component-model/design/mvp/WIT.md at main · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 452363446,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721313856
    },
    {
        "content": "<p>I think this is something that I didn't fully understand when reading over the original PR for this. To me targetting an older version is done by checking out the WIT files as they were during that release. That's different than taking the latest WIT files and setting a version of \"ignore everything above this version\". </p>\n<p>To me it's much more robust and reliable to use the older WIT files rather than always using the newest WIT files in a situation like this.</p>",
        "id": 452364302,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721314106
    },
    {
        "content": "<p>This is probably something I should have raised on the original PR though</p>",
        "id": 452364347,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721314124
    },
    {
        "content": "<blockquote>\n<p>To me it's much more robust and reliable to use the older WIT files rather than always using the newest WIT files in a situation like this.</p>\n</blockquote>\n<p>Yeah so that definitely makes sense to me -- I think that's the sort of... PL/toolchain default -- you can't use the new features by virtue of them not being present. I think this is a more natural flow.</p>\n<blockquote>\n<p>That's different than taking the latest WIT files and setting a version of \"ignore everything above this version\".</p>\n</blockquote>\n<p>Do we think there could be a different way in the future to do this targeting? For example if the host knows of <code>0.2.2</code>, and the component only knows of <code>0.2.1</code>, is this a way (unfortunately somewhat dependent on people using <code>@since</code> quite religiously and correctly) for the same WIT file to support both interfaces for \"free\"?</p>",
        "id": 452364986,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721314312
    },
    {
        "content": "<p>Yes that sort of support is already implemented in Wasmtime and planned for other runtimes</p>",
        "id": 452366109,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721314586
    },
    {
        "content": "<p>It's not fully documented in the component-model itself but <a href=\"https://github.com/WebAssembly/component-model/blob/3ae88c0c5a4e298de6efb63f0a7374ab0523a9b9/design/mvp/BuildTargets.md#interface-name-canonicalization\">with this section</a> the idea is that if two version numbers canonicalize to the same string then that's what the runtime will support</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/3ae88c0c5a4e298de6efb63f0a7374ab0523a9b9/design/mvp/BuildTargets.md#interface-name-canonicalization\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8ddab016a3bab732fc202bc23086dc0acd99ffbd/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616437643630356336363835353466623137306462656237333533343864623961343065613365623737623937633562643534653933393462303737626262642f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/3ae88c0c5a4e298de6efb63f0a7374ab0523a9b9/design/mvp/BuildTargets.md#interface-name-canonicalization\" title=\"component-model/design/mvp/BuildTargets.md at 3ae88c0c5a4e298de6efb63f0a7374ab0523a9b9 · WebAssembly/component-model\">component-model/design/mvp/BuildTargets.md at 3ae88c0c5a4e298de6efb63f0a7374ab0523a9b9 · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - WebAssembly/component-model</div></div></div>",
        "id": 452366283,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721314630
    },
    {
        "content": "<p>so 0.2.1 and 0.2.2 both canonicalize to \"0.2\" so the runtime would support both</p>",
        "id": 452366350,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721314645
    },
    {
        "content": "<p>Ah yes -- I do remember seeing that in a PR (relatively recently?) IIRC!</p>",
        "id": 452366704,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721314717
    },
    {
        "content": "<p>Here's another possibility -- Does it seem reasonable to make this a <em>bug</em>?</p>",
        "id": 452367315,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721314851
    },
    {
        "content": "<p>i.e. error if a version number that is higher than the current package is used?</p>",
        "id": 452367377,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721314871
    },
    {
        "content": "<p>I think that might be reasonable yeah</p>",
        "id": 452367936,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721314990
    },
    {
        "content": "<p>help catch mistakes and/or raise more awareness of this issue on issue trackers</p>",
        "id": 452367961,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721315000
    },
    {
        "content": "<p>Thinking that maybe <span class=\"user-mention\" data-user-id=\"344849\">@Yoshua Wuyts</span> and <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> might want to weigh in on this as well. Seems like we could really go any one of the following ways:</p>\n<ul>\n<li>Allow (&amp; implement) future versions to be specified in old WIT versions</li>\n<li>Leave it unimplemented (this <em>feels</em> like sort of a bug, because the information ends up missing)</li>\n<li>Make it an error to try to do <code>@since</code> on a future version</li>\n</ul>",
        "id": 452368013,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721315011
    },
    {
        "content": "<p>Yep, I'm also fine with making it a bug -- I can't imagine a use case yet where a package at <code>x</code> would include code that targeted <code>x + 1</code>... Feels like in that case people should just be <em>using</em> <code>x + 1</code>, as we've discussed...</p>\n<p>The only thing that sort of occurs to me is monkey/hot patching, but seems like a shaky rationale (given that if you can change the existing WIT file, then you can probably upgrade it).</p>",
        "id": 452369194,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721315225
    },
    {
        "content": "<p>yeah I think it's best to start more conservatively with a strict error here and it can always be relaxed in the future if necessary</p>",
        "id": 452376566,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1721316934
    },
    {
        "content": "<p>OK I've got a first cut at the PR here:</p>\n<p><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1689\">https://github.com/bytecodealliance/wasm-tools/pull/1689</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools/pull/1689\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/3269ca5e08e5501b4894b90fe378905d2db3fd1d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333564613564643231333831636662343062383961376565616334326234303565353534663335313035643530343339303330633035646535366636373937302f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c732f70756c6c2f31363839&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools/pull/1689\" title=\"fix(wit-parser): improve checking for stable feature gates by vados-cosmonic · Pull Request #1689 · bytecodealliance/wasm-tools\">fix(wit-parser): improve checking for stable feature gates by vados-cosmonic · Pull Request #1689 · bytecodealliance/wasm-tools</a></div><div class=\"message_embed_description\">This commit introduces some extra checking (and panicking) for feature gates that are stable (i.e. Stability::Stable) AKA @since with a version and/or features specified.\nThere are two primary chan...</div></div></div>",
        "id": 452403901,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1721324693
    }
]