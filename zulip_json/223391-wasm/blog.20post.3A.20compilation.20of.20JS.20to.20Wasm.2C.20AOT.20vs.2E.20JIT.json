[
    {
        "content": "<p>I've just posted a blog post here: <a href=\"https://cfallin.org/blog/2024/08/27/aot-js/\">https://cfallin.org/blog/2024/08/27/aot-js/</a></p>\n<p>(this is the first in a pair of posts about the weval-based JS compilation work I've been doing; second half will come tomorrow)</p>",
        "id": 465484913,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724772842
    },
    {
        "content": "<p>as it was morning here, I'm WAITING, CHRIS</p>",
        "id": 465760095,
        "sender_full_name": "Ralph",
        "timestamp": 1724850052
    },
    {
        "content": "<p>Unfortunately my blog is only open 9am-5pm Pacific time, weekdays, with federal holidays and other random vacations excluded; your request is being processed :-)</p>",
        "id": 465811849,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724863297
    },
    {
        "content": "<p>Alright, a followup with the next part, about weval itself: <a href=\"https://cfallin.org/blog/2024/08/28/weval/\">https://cfallin.org/blog/2024/08/28/weval/</a></p>",
        "id": 465812093,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724863379
    },
    {
        "content": "<p>I think you might be out of business hours right now but  ahumble feature request for your blog: automatic dark mode</p>",
        "id": 466163496,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1724995655
    },
    {
        "content": "<p>if anyone can tell me how to do that with a hacked up Jekyll site generator tree from 2014, that only works with a very specific version of Ruby and various gems locked in place via nix-shell, I'm all ears!</p>",
        "id": 466165935,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724996841
    },
    {
        "content": "<p>(my html skills are current circa 1998)</p>",
        "id": 466165950,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1724996851
    },
    {
        "content": "<p>Specific Jekyll and specific ruby version, both outdated, is way too real <span aria-label=\"sob\" class=\"emoji emoji-1f62d\" role=\"img\" title=\"sob\">:sob:</span></p>",
        "id": 466288702,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1725030274
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> <a href=\"#narrow/stream/223391-wasm/topic/blog.20post.3A.20compilation.20of.20JS.20to.20Wasm.2C.20AOT.20vs.2E.20JIT/near/466165935\">said</a>:</p>\n<blockquote>\n<p>if anyone can tell me how to do that with a hacked up Jekyll site generator tree from 2014, that only works with a very specific version of Ruby and various gems locked in place via nix-shell, I'm all ears!</p>\n</blockquote>\n<p>FWIW, it is a CSS only change to be responsive to the system light-dark preference. Override the styles for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme#examples\">prefers-color-scheme</a> media query :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme#examples\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d1458923d9e958200387f84e96afd92a33caed8b/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e63643663346135612e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme#examples\" title=\"prefers-color-scheme - CSS: Cascading Style Sheets | MDN\">prefers-color-scheme - CSS: Cascading Style Sheets | MDN</a></div><div class=\"message_embed_description\">The prefers-color-scheme CSS media feature is used to detect if a user has requested light or dark color themes.\n  A user indicates their preference through an operating system setting (e.g. light or dark mode) or a user agent setting.</div></div></div>",
        "id": 466291098,
        "sender_full_name": "Milan",
        "timestamp": 1725030963
    },
    {
        "content": "<p>The trick for that being... you'll have to reconfigure all those styles :)</p>\n<p>Also if the source is open I'm happy to contribute!</p>",
        "id": 466425827,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1725072590
    },
    {
        "content": "<p>Wow just realized my own blog didn't have it, and it was amazingly easy to add with <code>prefers-color-scheme</code>. CSS in 2024, amazing</p>",
        "id": 466434506,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1725076107
    },
    {
        "content": "<p>These blog posts aren't for the faint of heart. I think I've read the \"JavaScript compilation\" parts 1 and 2 about three times already and I'm still a bit hazy on the details.</p>",
        "id": 468534959,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725786251
    },
    {
        "content": "<p>Looking at the second post, I'm still confused about how pre-compiling a corpus of ICs can possibly work for object shapes.</p>",
        "id": 468536464,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725787015
    },
    {
        "content": "<p>Says I have this code:</p>\n<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">obj</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"nx\">foo</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">42</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">bar</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">\"Hello world\"</span><span class=\"w\"> </span><span class=\"p\">};</span>\n\n<span class=\"c1\">// ...</span>\n\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">x</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">obj</span><span class=\"p\">.</span><span class=\"nx\">foo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">3</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>To properly optimize this code, the JIT needs the following information:</p>\n<ul>\n<li><code>obj</code> has the shape (Number, String).</li>\n<li><code>foo</code> is the first element of that shape.</li>\n<li>Therefore <code>obj.foo</code> is a Number.</li>\n</ul>",
        "id": 468537314,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725787290
    },
    {
        "content": "<p>How can you possibly encode this in pre-compiled ICs? What do the ICs look like? I can imagine an IC that's like:</p>\n<div class=\"codehilite\" data-code-language=\"txt\"><pre><span></span><code>GuardShape obj, (Number, String)\nGuardField obj, \"foo\", 0\nLoadNumberField obj, 0\n</code></pre></div>\n<p>But then wouldn't you need thousands of ICs for any field access anywhere in your code? Even if you're only covering shapes with up to four fields that's already thousands of possible shapes. Doing a linked list search through those can't possibly be more efficient that a hashmap access.</p>",
        "id": 468538226,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725787789
    },
    {
        "content": "<p>Second question</p>",
        "id": 468543346,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725790206
    },
    {
        "content": "<p>Regarding weval, I'm a little surprised you had to go through so much trouble with the <code>update_context</code> intrinsic.</p>",
        "id": 468543794,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725790402
    },
    {
        "content": "<p>Does SpiderMonkey's bytecode not have a concept of EBBs? Because if so, it feels like you could just have a <code>run_ebb</code> function that takes a slice of bytecode instructions as a parameter and loops over them, and add an annotation to unroll that loop.</p>",
        "id": 468543800,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725790416
    },
    {
        "content": "<p>(Plus the annotation you currently use to mark that slice as constant.)</p>",
        "id": 468543946,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725790526
    },
    {
        "content": "<p>I believe polymorphic inline caches can have arguments which indicate eg the offset of the field to access and the expected type and then the inline cache itself would use those arguments instead of hard coding them. This allows generating a single polymorphic inline cache for each shape of inline cache we want rather than fully specializing it.</p>",
        "id": 468580578,
        "sender_full_name": "bjorn3",
        "timestamp": 1725806426
    },
    {
        "content": "<blockquote>\n<p>This allows generating a single polymorphic inline cache for each shape of inline cache</p>\n</blockquote>\n<p>If the field offset and type are passed as arguments, I'm not sure I have a model of what you mean by \"each shape of inline cache\" here.</p>",
        "id": 468585546,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1725808921
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"354194\">@Olivier FAURE</span> , I'd recommend you read the 2023 paper on CacheIR, linked in my blog posts, for more information on how that part of SpiderMonkey works.</p>\n<p>In a little more detail: your conception of what an \"object shape\" is is a little off, and also you're missing the notion of parameterized ICs. The idea is that the IC <em>code</em> is constant, and known ahead of time, but it is parameterized on runtime values in the \"stub data\" that are attached when the IC chain is filled out. The IC for a simple property access (no weird corner cases) is: check the shape pointer (encodes mapping from field names to offsets); load offset. And both the shape pointer and offset are in teh stub data, so we have <em>one</em> IC body that we can use for every property access everywhere.</p>",
        "id": 468632901,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1725831412
    },
    {
        "content": "<p>Re: SpiderMonkey bytecode and EBBs: I think there may be such a property but it's fairly irrelevant: the entire point of the weval-based approach is that we do <em>not</em> know anything about the interpreter or the code it's interpreting, beyond the one intrinsic to denote \"change of PC\". More complex intermeshing of properties limits the scope of applicability and makes reasoning about bugs much harder.</p>",
        "id": 468633013,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1725831508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span> The weval transform is incredibly cool. Some of my earlier work (on Foundry and ARTIQ) used similar principles, but it didn't go as far, and I'm really happy to see this research. I hope one day I'll be able to apply it.</p>",
        "id": 469191114,
        "sender_full_name": "Catherine (whitequark)",
        "timestamp": 1725996154
    },
    {
        "content": "<p>So, reading the 2023 paper...</p>\n<blockquote>\n<p>In addition to operands, CacheIR stubs have stub fields, which are values associated with and used within the stub. For Baseline ICs, stub fields facilitate the sharing of native code for stubs that are identical except for offsets and pointer values, and simplify the process of integrating stubs into the garbage collector.</p>\n</blockquote>\n<p>So... My understanding of what happens when you execute <code>let x = foo.bar</code>:</p>\n<ul>\n<li>The interpreter / compiled code reaches a dynamic jump instruction pointing to the IC chain.</li>\n<li>The first stub in the IC chain has a pointer to some x86/ARM/etc code which is jumped to.</li>\n<li>The code starts with some \"guard\" instructions that checks that the <code>foo</code> object has the expected shape/hidden-class/etc. \"Shape\" in that context means a specific set of field names and types, so if the IC was generated for a shape <code>baz: Number, bar: Object</code> and foo currently has shape <code>baz: String, bar: Object</code>, you're out of luck, even though the binary code would work the same in principle. (On the plus side, because shapes are immutable, that check is a single pointer compare.)</li>\n<li>If the guard instruction exits, it jumps to the next IC in the chain.</li>\n<li>If the guard instruction fall through, the rest of the IC's binary is executed. In that case, the binary being executed is \"add an offset to the base pointer, load the resulting address, return the value to the main code\".</li>\n</ul>\n<p>Regarding stub fields specifically, the IC stub includes both a pointer to x86 executable code, and some additional variables that the executable code can read; in the case of the field access above, those additional variables are \"a pointer to the immutable shape, and a field offset\".</p>",
        "id": 480916183,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1730898371
    },
    {
        "content": "<p>So to answer my own question, the \"executable code\" parts of the ICs can be precompiled because they're massively shared between ICs. Even if your program has thousands of shapes, it only needs one <code>brneq reg1 reg2; load reg1+reg3; ret;</code> chunk of executable code. Each callsite can store pointers to that code alongside different values for reg2 (shape pointer) and reg3 (offset), and <em>these</em> values can be generated dynamically.</p>",
        "id": 480917037,
        "sender_full_name": "Olivier FAURE",
        "timestamp": 1730898692
    },
    {
        "content": "<p>Yep, that’s pretty much it!</p>",
        "id": 480947388,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1730907525
    }
]