[
    {
        "content": "<p>In my current WIP wasm component to manage a wayland compositor I've been thinking of integrating wgpu under the hood but I realize some things like <code>Buffer::map</code> will require a copy between the runtime and the host. I was wondering if there was any proposal to allow WIT to describe a host owned slice (or block of memory) that the runtime can write into?</p>\n<p>I'd think something like a <code>slice&lt;u8&gt;</code>. In my use case with wgpu I'd probably make the buffer resource have a function like <code>func slice() -&gt; option&lt;slice&lt;u8&gt;&gt;</code> to get the slice.</p>\n<p>However I do realize that there might be a use case for the runtime owning a slice vs always having it borrowed out like in Rust.</p>",
        "id": 395586647,
        "sender_full_name": "i509VCB",
        "timestamp": 1696810079
    },
    {
        "content": "<p>Actually it might be a footgun to have a function the runtime calls to get a slice from inside the host? In rust this would probably double borrow the state?</p>",
        "id": 395586794,
        "sender_full_name": "i509VCB",
        "timestamp": 1696810191
    },
    {
        "content": "<p>Wasm does appear to have untyped memory, but I imagine that exposing that raw memory is a huge footgun</p>",
        "id": 395587707,
        "sender_full_name": "i509VCB",
        "timestamp": 1696810855
    },
    {
        "content": "<p>As you've seen WIT doesn't currently have a <code>slice</code> type and there currently isn't a design/proposal to add one. If you're interested in this though opening an issue on the component-model repository with more information might be a good next step. It's unlikely this will be added in the near future though</p>",
        "id": 395604970,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696820814
    },
    {
        "content": "<p>Okay I will make an issue when I can.</p>\n<p>I guess for now is there an unsafe way of sorts to have the host give the runtime raw memory via the component model?</p>",
        "id": 395607277,
        "sender_full_name": "i509VCB",
        "timestamp": 1696821895
    },
    {
        "content": "<p>Wasmtime has a WasmVec type for this  but that's the closest you'll get and it's not easy to use</p>",
        "id": 395616126,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1696826626
    },
    {
        "content": "<p>Another option is to model the buffer as a <code>resource</code>, which lets you pass around handles. That avoids the copying, but the downside is that you can't directly load/store to the buffer from the API; all accesses must go through function calls.</p>",
        "id": 395727873,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1696866879
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254083\">Dan Gohman</span> <a href=\"#narrow/stream/223391-wasm/topic/Slices.20in.20WIT/near/395727873\">said</a>:</p>\n<blockquote>\n<p>Another option is to model the buffer as a <code>resource</code>, which lets you pass around handles. That avoids the copying, but the downside is that you can't directly load/store to the buffer from the API; all accesses must go through function calls.</p>\n</blockquote>\n<p>I'm not sure that this would solve the issue of copies</p>\n<div class=\"codehilite\" data-code-language=\"wit\"><pre><span></span><code>resource buffer {\n    get: func(offset: u64) -&gt; u8\n\n    set: func(offset: u64, write: u8)\n}\n</code></pre></div>\n<p>If a buffer looked like this, you'd be limited to single reads and writes which would definitely result in a huge amount of context switches in and out of the wasm runtime</p>",
        "id": 395730137,
        "sender_full_name": "i509VCB",
        "timestamp": 1696867652
    }
]