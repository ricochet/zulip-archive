[
    {
        "content": "<p>Why is there no mention of volatile, specifically for loads in <a href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\">https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md</a> ?  How does shared memory loads avoid a loop check load being lifted out of the loop without the idea of <code>volatile</code> ?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/06340259f73fa0444826865e00a06b9ac5cd7e5a/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f316230633238336566346231316664336232363766386230376338626637336434383938646436396661666330343436366234653462363461633763356465632f576562417373656d626c792f74687265616473&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\" title=\"threads/proposals/threads/Overview.md at main · WebAssembly/threads\">threads/proposals/threads/Overview.md at main · WebAssembly/threads</a></div><div class=\"message_embed_description\">Threads and Atomics in WebAssembly. Contribute to WebAssembly/threads development by creating an account on GitHub.</div></div></div>",
        "id": 484066590,
        "sender_full_name": "Scott Waye",
        "timestamp": 1732369869
    },
    {
        "content": "<p>The short answer is, volatile is for talking to memory mapped I/O, while atomic is the thing to use for talking to other threads. If a loop check is a load of memory that will be stored to from another thread, it should be atomic, not volatile.</p>",
        "id": 484070633,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1732373465
    },
    {
        "content": "<p>Thanks, so clang would never lift (fi that's the right verb)<code>i32.atomic.load8_u</code>for example ?</p>",
        "id": 484071020,
        "sender_full_name": "Scott Waye",
        "timestamp": 1732373825
    },
    {
        "content": "<p>sorry, I got that wrong</p>",
        "id": 484072164,
        "sender_full_name": "Scott Waye",
        "timestamp": 1732374855
    },
    {
        "content": "<p>What I think I want to ask is that an LLVM IR <code>load atomic require</code> is what should be used in the scenario?</p>",
        "id": 484072511,
        "sender_full_name": "Scott Waye",
        "timestamp": 1732375182
    },
    {
        "content": "<p>Clang will typically not hoist atomic loads from loops (though it can do so if it believes eg. that it would be UB to store to the memory location from another thread).</p>",
        "id": 484073100,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1732375602
    },
    {
        "content": "<p>LLVM's documentation for memory ordering is <a href=\"https://llvm.org/docs/LangRef.html#ordering\">here</a>.</p>",
        "id": 484073524,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1732375931
    }
]