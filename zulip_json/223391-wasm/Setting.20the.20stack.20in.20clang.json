[
    {
        "content": "<p>I am trying to run some code from two different native threads at the same time. WAVM supports this case fine, but it seems clang will use the same stack for both threads and thus crash the code horribly.</p>",
        "id": 213807259,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603123141
    },
    {
        "content": "<p>Is there a way to set a custom stack for one of the threads? I was pointed at --export __stack_pointer to get access to the stack pointer global and overwriting it, but it seems the symbol is not actually exported if you do this.</p>",
        "id": 213807362,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603123194
    },
    {
        "content": "<p>Any other trick I might use to set a new stack?</p>",
        "id": 213807435,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603123208
    },
    {
        "content": "<p>The <a href=\"#narrow/stream/206238-general/topic/Obtaining.20stack_pointer.3F\">https://bytecodealliance.zulipchat.com/#narrow/stream/206238-general/topic/Obtaining.20stack_pointer.3F</a> might be helpful</p>",
        "id": 213808175,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1603123537
    },
    {
        "content": "<p>Well, it's saying this doesn't work, that's all I got from it?</p>",
        "id": 213808378,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603123630
    },
    {
        "content": "<p>correct, you can export your own utility functions to mingle with mutable global though</p>",
        "id": 213808536,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1603123697
    },
    {
        "content": "<p>I read elsewhere that you can't actually access globals in clang though, do I need to implement them directly in wat instead or something?</p>",
        "id": 213808668,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603123775
    },
    {
        "content": "<p>setting a new stack in LLVM compiled code at this moment is more like a hack</p>",
        "id": 213808708,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1603123796
    },
    {
        "content": "<p>Well, I'm working on a longer-term project where I am hoping the tooling will catch up with me eventually, but I need the hack to be able to do the work for now.</p>",
        "id": 213808881,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603123871
    },
    {
        "content": "<p>so if the runtime will do wasm stack switching it can also do shadow stack as well</p>",
        "id": 213809058,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1603123945
    },
    {
        "content": "<p>How do you plan to switch wasm call stack?</p>",
        "id": 213809209,
        "sender_full_name": "Yury Delendik",
        "timestamp": 1603124025
    },
    {
        "content": "<p>Just allocating a bit of memory and pointing the stack pointer for my extra thread there, and keeping the main stack for the main thread.</p>",
        "id": 213809319,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603124065
    },
    {
        "content": "<p>(I need to do audio processing, which happens in a background thread on the native side, the rest happens in a main thread.)</p>",
        "id": 213809371,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603124094
    },
    {
        "content": "<p>But the main question is, how do I actually do that in practice. If I had the global, I could use the API on the native side to set it, I guess. But it does not get exported. I could just assume it is global 0, but not sure if the WAVM API would let me do that... Doing it on the WASM side would be slightly easier since then I can actually allocate the memory too, but I don't know how to access the global then?</p>",
        "id": 213810271,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603124506
    },
    {
        "content": "<p>Finally managed to create a function in a WAT file that I got to link that sets __stack_pointer, and it works. Thanks!</p>",
        "id": 213857347,
        "sender_full_name": "Dag Ågren",
        "timestamp": 1603148598
    }
]