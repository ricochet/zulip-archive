[
    {
        "content": "<p>Like Calvin's topic, but for Python.<br>\nPlease reply or DM me if you're interested in meeting and collaborating on Python guest component tooling.<br>\nIf you already expressed interest in my earlier discussion of a Python guest binding generator in the #wit-bindgen stream, I'll assume you're interested in this, as well :)</p>",
        "id": 338691522,
        "sender_full_name": "Joel Dice",
        "timestamp": 1677618242
    },
    {
        "content": "<p>Myself and <span class=\"user-mention\" data-user-id=\"486181\">@Daniel Macovei</span> are interested in Python guest</p>",
        "id": 338691775,
        "sender_full_name": "Calvin Prewitt",
        "timestamp": 1677618325
    },
    {
        "content": "<p>We don't currently have a Python Bytecode Alliance project for Componentizing Python. It'd be great for this group to talk about what approaches they're using and how to make an equivalent to Componentize-JS.</p>",
        "id": 338692333,
        "sender_full_name": "Robin Brown",
        "timestamp": 1677618512
    },
    {
        "content": "<p>Please post your availability here if you're planning to join us: <a href=\"https://www.when2meet.com/?19002194-nc5IB\">https://www.when2meet.com/?19002194-nc5IB</a></p>",
        "id": 338694139,
        "sender_full_name": "Joel Dice",
        "timestamp": 1677619210
    },
    {
        "content": "<p>Definitely interested.</p>",
        "id": 338694599,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1677619404
    },
    {
        "content": "<p>I went ahead and scheduled this for Friday at noon ET / 9am PT.  We'll meet at <a href=\"https://meet.jit.si/PythonGuestComponents-2023-03-10\">https://meet.jit.si/PythonGuestComponents-2023-03-10</a><br>\nDM me your email address if you'd like an email invitation.  See you then!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonGuestComponents-2023-03-10\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonGuestComponents-2023-03-10\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div>",
        "id": 339902494,
        "sender_full_name": "Joel Dice",
        "timestamp": 1678117388
    },
    {
        "content": "<p>Reminder: we're meeting at <a href=\"https://meet.jit.si/PythonGuestComponents-2023-03-10\">https://meet.jit.si/PythonGuestComponents-2023-03-10</a> in about 10 minutes.  Agenda and notes here: <a href=\"https://hackmd.io/q5SWcHt1TWaYWcMtt-xI9g\">https://hackmd.io/q5SWcHt1TWaYWcMtt-xI9g</a><br>\nSee you soon!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonGuestComponents-2023-03-10\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonGuestComponents-2023-03-10\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/q5SWcHt1TWaYWcMtt-xI9g\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/q5SWcHt1TWaYWcMtt-xI9g\" title=\"Python Component Tooling Meeting 2023-03-10 - HackMD\">Python Component Tooling Meeting 2023-03-10 - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 340913320,
        "sender_full_name": "Joel Dice",
        "timestamp": 1678466922
    },
    {
        "content": "<p>I'd like to schedule the next Python Component Tooling meeting for Thursday at 1pm ET (10am PT).  Let me know if you'd like to attend but that time doesn't work, in which case I can reschedule.  Agenda and notes here: <a href=\"https://hackmd.io/4l5OFAwISZuXl6MtdxOlEA\">https://hackmd.io/4l5OFAwISZuXl6MtdxOlEA</a><br>\n<span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> FYI</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/4l5OFAwISZuXl6MtdxOlEA\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/4l5OFAwISZuXl6MtdxOlEA\" title=\"Python Component Tooling Meeting 2023-03-23 - HackMD\">Python Component Tooling Meeting 2023-03-23 - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 343388878,
        "sender_full_name": "Joel Dice",
        "timestamp": 1679409225
    },
    {
        "content": "<p>I can make it, but I will have to move a (not critical) meeting to do so. So we can keep the time if it works for folks, but I won't complain if it moves either. <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 343498394,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1679425756
    },
    {
        "content": "<p>Folks who would like to attend: please indicate your availability here: <a href=\"https://www.when2meet.com/?19300681-boaTm\">https://www.when2meet.com/?19300681-boaTm</a>.  I'll move it if there's another time that works so Brett doesn't have to shuffle his schedule.</p>",
        "id": 343739217,
        "sender_full_name": "Joel Dice",
        "timestamp": 1679505356
    },
    {
        "content": "<p>Looks like everyone's available at 3pm ET (noon PT) -- let's meet then at <a href=\"https://meet.jit.si/PythonComponentTooling-2023-03-23\">https://meet.jit.si/PythonComponentTooling-2023-03-23</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonComponentTooling-2023-03-23\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonComponentTooling-2023-03-23\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div>",
        "id": 343975933,
        "sender_full_name": "Joel Dice",
        "timestamp": 1679577331
    },
    {
        "content": "<p><span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span> This is starting in a couple of minutes.</p>",
        "id": 344075305,
        "sender_full_name": "Joel Dice",
        "timestamp": 1679597919
    },
    {
        "content": "<p>I forgot one part of the numpy / pandas work yesterday that was a pretty big missing piece. Numpy requires setjmp/longjmp and one extension in pandas is C++ and requires exceptions (specifically __cxa_allocate_exception/__cxa_throw). I just stubbed them out for now to get them to compile. I don't know exactly when they get triggered during use though. setjmp/longjmp has showed up in other work as well (Ruby, Lua) so we'll likely need a general solution for them at some point.</p>",
        "id": 344281467,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1679668346
    },
    {
        "content": "<p>BTW, just for the last hour or so before I go on vacation, I thought I'd see what it might take to get SciPy compiled. This looks like a much bigger problem. Numpy could be compiled without the LAPACK/BLAS libraries, but it looks like SciPy requires them. And.... they need a FORTRAN compiler. I haven't found any information about compiling FORTRAN to WASM using anything but Emscripten.</p>",
        "id": 344350280,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1679685290
    },
    {
        "content": "<p>Yep, we were once asked if we wanted to fund work to make a Fortran compiler work under WebAssembly <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span></p>",
        "id": 344385432,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1679699895
    },
    {
        "content": "<p>I'd be curious to know whether Flang or LFortran are mature enough to meet SciPy's needs, and whether they can be made to target wasm32-wasi.</p>",
        "id": 344387192,
        "sender_full_name": "Joel Dice",
        "timestamp": 1679700929
    },
    {
        "content": "<p>Apparently LFortran can translate Fortran code to C++ code, which is interesting.</p>",
        "id": 344387319,
        "sender_full_name": "Joel Dice",
        "timestamp": 1679701016
    },
    {
        "content": "<p>Would 3pm ET (noon PT) on Thursday work for the next Python Component Tooling meeting?  If so, let's meet then at <a href=\"https://meet.jit.si/PythonGuestComponents-2023-04-06\">https://meet.jit.si/PythonGuestComponents-2023-04-06</a>.<br>\n<span class=\"user-mention\" data-user-id=\"553432\">@Asen Alexandrov</span> FYI</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonGuestComponents-2023-04-06\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonGuestComponents-2023-04-06\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div>",
        "id": 346861611,
        "sender_full_name": "Joel Dice",
        "timestamp": 1680616621
    },
    {
        "content": "<p>We'll meet at the above Jitsi room in ~45 minutes.  Agenda and notes here: <a href=\"https://hackmd.io/kdXktZ8DQriSAvlm_YOfJw\">https://hackmd.io/kdXktZ8DQriSAvlm_YOfJw</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/kdXktZ8DQriSAvlm_YOfJw\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/kdXktZ8DQriSAvlm_YOfJw\" title=\"Python Component Tooling Meeting 2023-04-06 - HackMD\">Python Component Tooling Meeting 2023-04-06 - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 347489318,
        "sender_full_name": "Joel Dice",
        "timestamp": 1680804912
    },
    {
        "content": "<p>I've learned a few more things about how dynamic linking might work, and what steps we might take next, from discussion with Luke Wagner, Alex Crichton, and others.<br>\nIn particular, I didn't understand that components can already contain multiple core wasm modules, with the component defining how to link together their imports and exports. Together with toolchain conventions, possibly matching what's in the <a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\">existing Emscripten support for dynamic linking</a>, something like wit-component or componentize-py could synthesize the right glue to make <code>dlopen</code> work.<br>\nSuggested next steps are to dig into those Emscripten conventions and also to understand <a href=\"https://pyodide.org/en/stable/development/new-packages.html#structure-of-a-pyodide-package\">how Pyodide uses Emscripten's conventions</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f8d9361c37595f4eb54a982b8df4b84837c7e57e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f366366623330313965653564616361643366363531666661346462336230653535373239393836653130303130666433346536663362333834656563623435662f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/DynamicLinking.md\" title=\"tool-conventions/DynamicLinking.md at main · WebAssembly/tool-conventions\">tool-conventions/DynamicLinking.md at main · WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - tool-conventions/DynamicLinking.md at main · WebAssembly/tool-conventions</div></div></div>",
        "id": 348295725,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1681157260
    },
    {
        "content": "<p>Shall we meet on Thursday at 3pm ET (noon PT)?  If that works for everyone, we'll meet at <a href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\">https://meet.jit.si/PythonGuestComponents-2023-05-04</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div>",
        "id": 354914009,
        "sender_full_name": "Joel Dice",
        "timestamp": 1682956946
    },
    {
        "content": "<p>Also, <a href=\"https://github.com/dicej/componentize-py\">componentize-py</a> is now feature-complete, i.e. it should be able to handle arbitrary WIT worlds.  However, the generated bindings are not particularly ergonomic or idiomatic, so the big remaining TODO is to factor out <code>wasmtime-py</code> type binding generator and reuse it.  I'd also like some feedback on how to convert from Python exceptions to WIT <code>result</code>s and vice-versa.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/componentize-py\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9651dfacf10da3022734e4150fdb8b02414d702f\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633933373366313161393163633562373335386366376130633930643237313439313339373738333762663661383166386133366435643039353239333063632f646963656a2f636f6d706f6e656e74697a652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/componentize-py\" title=\"GitHub - dicej/componentize-py\">GitHub - dicej/componentize-py</a></div><div class=\"message_embed_description\">Contribute to dicej/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 354914886,
        "sender_full_name": "Joel Dice",
        "timestamp": 1682957163
    },
    {
        "content": "<p>One more update: Jamey and I have a pretty solid plan for \"dynamic\" linking which I think will fit the Python ecosystem's needs very nicely.  We should have an RFC up for feedback by Thursday.</p>",
        "id": 354915350,
        "sender_full_name": "Joel Dice",
        "timestamp": 1682957299
    },
    {
        "content": "<p>By the way, I'm putting this stream on the highlight in the \"Future work\" of an article we'll publish today or tomorrow at WasmLabs. Let me know if you find this inappropriate and I will remove the reference - <a href=\"https://se2-bindings.wasm-labs.pages.dev/articles/wasm-host-to-python/#future-work\">https://se2-bindings.wasm-labs.pages.dev/articles/wasm-host-to-python/#future-work</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://se2-bindings.wasm-labs.pages.dev/articles/wasm-host-to-python/#future-work\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2ea3a0045dd1e0c4e54890e861caf3b6891185e9\\/68747470733a2f2f7761736d6c6162732e6465762f7374617469632f696d616765732f6f672f7761736d2d686f73742d746f2d707974686f6e2e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://se2-bindings.wasm-labs.pages.dev/articles/wasm-host-to-python/#future-work\" title=\"Extending web applications with WebAssembly and Python\">Extending web applications with WebAssembly and Python</a></div><div class=\"message_embed_description\">How to leverage Python and WebAssembly to securely extend your web application capabilities using Suborbital and Wasm Labs tooling and language runtimes.</div></div></div>",
        "id": 355704807,
        "sender_full_name": "Asen Alexandrov",
        "timestamp": 1683190524
    },
    {
        "content": "<p>why would this be \"inappropriate\"? It's a good post about how you do this right now.</p>",
        "id": 355793562,
        "sender_full_name": "Ralph",
        "timestamp": 1683210716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"268586\">Ralph</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/355793562\">said</a>:</p>\n<blockquote>\n<p>why would this be \"inappropriate\"? It's a good post about how you do this right now.</p>\n</blockquote>\n<p>By \"inappropriate\" I meant pointing people to this Zulip stream for further digging. I  personally cannot think of a reason against this, but I prefer to ask before I put someone in the lime light.</p>",
        "id": 355796495,
        "sender_full_name": "Asen Alexandrov",
        "timestamp": 1683211266
    },
    {
        "content": "<p>Yeah no worries, this is a public Zulip instance and the intent is to have lots of folks take a look and discuss here, so no need to avoid linking it!</p>",
        "id": 355806559,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1683213103
    },
    {
        "content": "<p>We'll be meeting in a few minutes at <a href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\">https://meet.jit.si/PythonGuestComponents-2023-05-04</a>.  Agenda and notes here: <a href=\"https://hackmd.io/vJeeNh1KSvq1449O5OqL7w\">https://hackmd.io/vJeeNh1KSvq1449O5OqL7w</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div>",
        "id": 355834398,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683219169
    },
    {
        "content": "<p>Oops, sorry, not in a few minutes -- I had it on my calendar wrong.  It's two hours from now: noon PT / 3pm ET</p>",
        "id": 355836482,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683219686
    },
    {
        "content": "<p>Could you please grand permission to the hackmd doc?</p>",
        "id": 355838389,
        "sender_full_name": "Mossaka (Joe)",
        "timestamp": 1683220231
    },
    {
        "content": "<p>Done; thanks for the reminder.</p>",
        "id": 355839624,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683220552
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/355834398\">said</a>:</p>\n<blockquote>\n<p>We'll be meeting in a few minutes at <a href=\"https://meet.jit.si/PythonGuestComponents-2023-05-04\">https://meet.jit.si/PythonGuestComponents-2023-05-04</a>.  Agenda and notes here: <a href=\"https://hackmd.io/vJeeNh1KSvq1449O5OqL7w\">https://hackmd.io/vJeeNh1KSvq1449O5OqL7w</a></p>\n</blockquote>\n<p>I guess you shouldn't feel too bad about this, I missed the meeting because I had it in my calendar as 3pm Central...</p>",
        "id": 355875293,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683230877
    },
    {
        "content": "<p>Sorry for the confusion.  I'm going to start using <a href=\"https://zulip.com/help/format-your-message-using-markdown#global-times\">https://zulip.com/help/format-your-message-using-markdown#global-times</a> from now on.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://zulip.com/help/format-your-message-using-markdown#global-times\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/df83b8ca6f665e54aab5f8f261d9ceb696f2f5c3\\/68747470733a2f2f7a756c6970636861742e636f6d2f7374617469632f696d616765732f6c6f676f2f7a756c69702d69636f6e2d313238783132382e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://zulip.com/help/format-your-message-using-markdown#global-times\" title=\"Message formatting | Zulip help center\">Message formatting | Zulip help center</a></div><div class=\"message_embed_description\">Zulip uses Markdown to allow you to easily format your messages. Even if you've never heard of Markdown, you are probably familiar with basic Markdown formatting, such as using * at the start of a line in a bulleted list, or around text to indicate emphasis. | This page provides an overview of all the formatting available in Zulip. There is a convenient message formatting reference in the Zulip app that you can use whenever you need a reminder of the formatting syntax below. | In Zulip, you can make text bold or italic, or cross it out with strikethrough.</div></div></div>",
        "id": 355877870,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683231716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> , <span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> , <span class=\"user-mention\" data-user-id=\"504918\">@Jamey Sharp</span> I missed the meeding, but I can give you an empirical answer to this</p>\n<blockquote>\n<p>does wasi-sdk expose a C preprocessor symbol or something with the SDK version so we can extract it while building cpython/wheels?</p>\n</blockquote>\n<p>It does not. Was looking for this a month ago, but had to end up relying on the build script that sets up the SDK to also provide its version as a define/env_var where it was later needed for packaging.  I only found the <code>__clang_version__</code> among the defines, when building with wasi-sdk.</p>",
        "id": 355881958,
        "sender_full_name": "Asen Alexandrov",
        "timestamp": 1683233152
    },
    {
        "content": "<p>Question for the Python experts: What's the most idiomatic way to generate Python bindings for the following WIT world?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">oops</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">oh</span><span class=\"o\">-</span><span class=\"n\">no</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">      </span><span class=\"n\">yikes</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>I'm thinking something like what <code>wasmtime-py</code> currently generates, extended to make <code>error</code> usable as an exception which may be raised:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">ErrorOops</span>:\n    <span class=\"nc\">pass</span>\n\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">ErrorOhNo</span>:\n    <span class=\"nc\">value</span>: <span class=\"kt\">str</span>\n\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">ErrorYikes</span>:\n    <span class=\"nc\">pass</span>\n\n<span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"n\">class</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">Exception</span><span class=\"p\">)</span>:\n    <span class=\"nc\">value</span>: <span class=\"nc\">Union</span><span class=\"p\">[</span><span class=\"n\">ErrorOops</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorOhNo</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ErrorYikes</span><span class=\"p\">]</span>\n\n#<span class=\"w\"> </span><span class=\"n\">May</span><span class=\"w\"> </span><span class=\"n\">raise</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">Error</span><span class=\"err\">`</span>\n<span class=\"n\">def</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"nc\">int</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">int</span>: <span class=\"o\">..</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>The drawback of doing this is that <code>Error</code> doesn't appear in the type signature of <code>bar</code> due <a href=\"https://peps.python.org/pep-0484/#exceptions\">https://peps.python.org/pep-0484/#exceptions</a>, whereas it _would_ if we didn't try to \"exception-ify\" the <code>result</code>.  I assume the above is more idiomatic than <code>def bar(n: int) -&gt; Result[int, Error]</code>, though.</p>",
        "id": 356099847,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683301355
    },
    {
        "content": "<p>Not a python expert, and not sure I grasp the quesiton 100%. But I typically use DocStrings to convey to users what kind of Exceptions a function could throw vs the statically typed <code>throws x</code> that Java provides. If I'm not mistaken the base exception class already accepts a string so <code>ErrorOhNo</code> would have that by default.</p>\n<p>I structure my exceptions similar to the way airflow codebase does:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Error Exception Type Binding\"\"\"</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorOops</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorOhNo</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorYikes</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Function binding that may throw Exceptions [Error, ErrorOops, ErrorOhNo, ErrorYikes]\"\"\"</span><span class=\"s2\">\"</span>\n    <span class=\"o\">...</span>\n</code></pre></div>\n<p>Then the type hints on bar would show the docstring.</p>\n<p><a href=\"https://github.com/apache/airflow/blob/v1-10-stable/airflow/exceptions.py\">Airflow Exception Definition File</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/apache/airflow/blob/v1-10-stable/airflow/exceptions.py\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/338aae2ba2fe1d4344ec4ed15f63cc407419a956\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393235363765376533356564373433316339393266386431633062303636363138363465343163393635613430396665373961643063393062346234633337322f6170616368652f616972666c6f77)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/apache/airflow/blob/v1-10-stable/airflow/exceptions.py\" title=\"airflow/exceptions.py at v1-10-stable · apache/airflow\">airflow/exceptions.py at v1-10-stable · apache/airflow</a></div><div class=\"message_embed_description\">Apache Airflow - A platform to programmatically author, schedule, and monitor workflows - airflow/exceptions.py at v1-10-stable · apache/airflow</div></div></div>",
        "id": 356124218,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683307357
    },
    {
        "content": "<p>I do believe python users would rather do:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">ErrorOops</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</code></pre></div>\n<p>than</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">ErrorOops</span><span class=\"p\">):</span>\n  <span class=\"n\">exception</span> <span class=\"n\">case</span><span class=\"o\">...</span>\n</code></pre></div>",
        "id": 356125790,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683307782
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"614177\">Shannon Duncan (shadowcodex)</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/356124218\">said</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Error Exception Type Binding\"\"\"</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorOops</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorOhNo</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ErrorYikes</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"w\">    </span><span class=\"sd\">\"\"\"Function binding that may throw Exceptions [Error, ErrorOops, ErrorOhNo, ErrorYikes]\"\"\"</span><span class=\"s2\">\"</span>\n    <span class=\"o\">...</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>This feels right to me. I don't think making the exceptions as dataclasses would be required. Python exceptions take any number of arguments which are accessible through the <code>args</code> attribute already. Of course, there is no one-true documentation format for documenting the exceptions (I personally like the numpy docstring style, but there are others).</p>",
        "id": 356128941,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683308602
    },
    {
        "content": "<p>The reason I was using <code>@dataclass</code> is that <code>wasmtime-py</code> currently uses it when generating Python types from WIT <code>variant</code>s, <code>record</code>s, etc. and I'm trying to be consistent with that approach.  Ideally we'd have some static type checking to verify that <code>ErrorOhNo</code> has a payload but <code>ErrorOops</code> does not, for example, and your IDE could warn you if you mixed them up.</p>",
        "id": 356131124,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683309202
    },
    {
        "content": "<p>Likewise, <code>wasmtime-py</code> uses <code>Union</code> when generating code for WIT <code>variant</code>s and I'm trying to be consistent with that.  Could be that <code>wasmtime-py</code>'s generation could use improvement, though, so I'm certainly open to that.  I have basically zero Python experience, so I'll defer to just about anybody on this :)</p>",
        "id": 356131587,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683309347
    },
    {
        "content": "<p>I'm hoping to dig into <code>wasmtime-py</code> this weekend. I'll try and keep an eye out for that and see if there are some improvements we can recommend. My plan is over the next few weeks to ramp up and start contributing to <code>wasmtime-py</code>.</p>",
        "id": 356132144,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683309492
    },
    {
        "content": "<p><code>variant</code>s and <code>record</code>s are more formal data structures, so to me it makes sense for them to be dataclasses. Exceptions in Python are typically less formal. It seems like in most cases, they just get a message passed to them. I do wonder if making an Exception a dataclass would break any of the existing Exception class behaviors. I don't know off-hand. We may have to defer to <span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> on that one.</p>",
        "id": 356134925,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683310285
    },
    {
        "content": "<p>Yeah, where it gets interesting is when an <code>variant</code> is used as the <code>err</code> case of a <code>result</code> _and_ elsewhere, e.g. as a parameter to a function or a field in a <code>record</code>.  So it may not _only_ be used as an exception.</p>",
        "id": 356136012,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683310594
    },
    {
        "content": "<p>I see that <code>wasmtime-py</code> defines this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">               </span><span class=\"n\">T</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"sc\">'T'</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"w\">                </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"nb\">Ok</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">])</span>:\n                    <span class=\"nc\">value</span>: <span class=\"nc\">T</span>\n<span class=\"w\">                </span><span class=\"n\">E</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"sc\">'E'</span><span class=\"p\">)</span>\n<span class=\"w\">                </span><span class=\"o\">@</span><span class=\"n\">dataclass</span>\n<span class=\"w\">                </span><span class=\"n\">class</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">E</span><span class=\"p\">])</span>:\n                    <span class=\"nc\">value</span>: <span class=\"nc\">E</span>\n\n<span class=\"w\">                </span><span class=\"nb\">Result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">Ok</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"nb\">Err</span><span class=\"p\">[</span><span class=\"n\">E</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>Perhaps only <code>Err</code> needs to extend <code>Exception</code>, in which case we don't any <code>variant</code> or its cases to extend it.  I.e. you can <code>raise Err(ErrorOhNo(\"trouble\"))</code> but not <code>raise ErrorOhNo(\"trouble\")</code>.</p>",
        "id": 356136673,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683310818
    },
    {
        "content": "<p>I played around a bit with dataclass and Exception. It doesn't appear to have any obvious ill effects. You still get an <code>args</code> attribute with the values. The <code>repr</code> value is slightly different because dataclass adds the names of the fields, but I don't see that as a problem. You might want to add <code>frozen=True</code> to the dataclass call so that the fields can't be written to. If you write to the <code>value</code> field, the <code>args</code> attribute no longer matches.</p>",
        "id": 356157513,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683317902
    },
    {
        "content": "<p>I don't think I have ever seen an exception written as a dataclass. Exceptions can have attributes on them, but for the common case where extra data isn't useful in code itself, the inheritance hierarchy conveys the important information and you provide a human-readable message.</p>\n<p>And returning a <code>Result</code> type isn't done in Python; you raise exceptions as necessary and can document what exceptions you explicitly raise.</p>\n<p>I'm also not sure what information you're trying convey with your <code>error</code> variant. Am I to view each individual variant as a bit of information for a larger error type, or each their own type of error that are grouped together for typing convenience? My brain reads it as the latter, so I would assume it would be something more like:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Oops</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OhNo</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span>  <span class=\"c1\"># I don't see a name for the parameter to the `oh-no` variant.</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Yikes</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</code></pre></div>\n<p>Now you could have an <code>error</code> base class that they all inherit from:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code><span class=\"k\">class</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Oops</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">OhNo</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Yikes</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n</code></pre></div>\n<p>Having a common exception class for an overall API that has multiple, custom exceptions is common.</p>",
        "id": 357114028,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1683672442
    },
    {
        "content": "<p>Thanks for the input, everybody.  In case it wasn't clear: componentize-py needs to be able to generate Python bindings for arbitrary WIT files, and those WIT files aren't necessarily designed with Python (or any specific programming language) in mind.  So when it gets something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">foo</span>: <span class=\"nc\">interface</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">variant</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">oops</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">oh</span><span class=\"o\">-</span><span class=\"n\">no</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">),</span>\n<span class=\"w\">      </span><span class=\"n\">yikes</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">struct</span> <span class=\"nc\">foo</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">x</span>: <span class=\"kt\">u32</span><span class=\"p\">,</span>\n<span class=\"w\">      </span><span class=\"n\">what</span>: <span class=\"nc\">error</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n\n<span class=\"w\">    </span><span class=\"n\">bar</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">n</span>: <span class=\"kt\">u32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">result</span><span class=\"o\">&lt;</span><span class=\"kt\">u32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">error</span><span class=\"o\">&gt;</span>\n<span class=\"w\">    </span><span class=\"n\">baz</span>: <span class=\"nc\">func</span><span class=\"p\">(</span><span class=\"n\">e</span>: <span class=\"nc\">error</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"nc\">foo</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>... it needs to do the best it can.  What information is the <code>error</code> variant trying to convey?  Who knows?  Imagine somebody else wrote it and we have no idea what they were trying to convey.  That's <code>componetize-py</code>'s perspective -- it gets WIT someone else wrote and generates Python bindings for it.  So the question is: what's the most idiomatic Python code it can generate from WIT files which may be entirely un-Pythonic (e.g. using variants, records, u32s, or who knows what to represent errors)?</p>",
        "id": 357121693,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683676458
    },
    {
        "content": "<p>I still feel like <span class=\"user-mention\" data-user-id=\"614177\">@Shannon Duncan (shadowcodex)</span> 's overall exception hierarchy is the correct way, but maybe just add the dataclass features like you originally had to add formal definitions of the payload. As Brett mentioned, I've never seen exceptions as dataclasses before either, but they might be needed to make this work on both sides. While it's a little sketchy, maybe add an <code>args</code> property to the base exception class as well to return a tuple that contains the data value. That way <code>e.args</code> and <code>e.value</code> won't get out of sync.</p>",
        "id": 357361226,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683739611
    },
    {
        "content": "<p>I'm really interested in solving the \"run untrusted Python code in a WASM sandbox inside my Python programs\" problem. I wrote up some notes on what I'm looking to solve here: <a href=\"https://gist.github.com/simonw/b9a1f080714785b7ee16c7d04db12210\">https://gist.github.com/simonw/b9a1f080714785b7ee16c7d04db12210</a></p>\n<p>Short version: I want to be able to say \"result = execute_untrusted_python(untrusted_code_string, memory_limit_in_bytes=8196, time_limit_in_seconds=1.0)\" and get back the result of executing that code in a safe sandbox, with enforced memory and time limits.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/simonw/b9a1f080714785b7ee16c7d04db12210\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/simonw/b9a1f080714785b7ee16c7d04db12210\" title=\"python-in-wasm.md\">python-in-wasm.md</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 357363874,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683740409
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"447413\">@Kevin Smith</span> <span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> </p>\n<p>Is the real challenge here that we only know it’s an exception cause the wit says error? But if it says <code>e</code> or <code>problem</code> or some other random word we would skip the exception stuff all together?</p>\n<p>To me it isn’t obvious yet how from a WIT we could generate any exception classes. We only know this case cause of how the variants are spelled, in future edge case they could label their error variant as X or something.</p>\n<p>Does WIT have any formal way of handling error/exceptions/etc?</p>",
        "id": 357364160,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683740496
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"614177\">@Shannon Duncan (shadowcodex)</span> the name is not relevant -- it's the fact that the type is used as the second type argument to <code>result</code>.  I.e. any time we have <code>result&lt;T, E&gt;</code>, where <code>T</code> and <code>E</code> are types, we need to treat <code>E</code> as an \"error\" type.</p>",
        "id": 357365221,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683740797
    },
    {
        "content": "<p>So yes, WIT's formal way of representing failures is using <code>result</code>, similar to how Rust and ML-style languages do it.</p>",
        "id": 357366104,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683741047
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"616400\">Simon Willison</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357363874\">said</a>:</p>\n<blockquote>\n<p>Short version: I want to be able to say \"result = execute_untrusted_python(untrusted_code_string, memory_limit_in_bytes=8196, time_limit_in_seconds=1.0)\" and get back the result of executing that code in a safe sandbox, with enforced memory and time limits.</p>\n</blockquote>\n<p>You can do this to some extent now, but there are limitations. When you are submitting code to the WASM Python instance, you are running a completely separate Python instance than the original interpreter (including a completely separate standard library and installed packages). Using a package like wasmtime-py will allow you to run a python.wasm file inside your Python interpreter and it will be completely sandboxed (although you can allow file system access to specific directories if you wish). You will need to write one export function to execute the submitted Python code and return the result. There is an example very similar to this in <code>udf_impl.c</code> at <a href=\"https://github.com/singlestore-labs/python-wasi/tree/main/udf\">https://github.com/singlestore-labs/python-wasi/tree/main/udf</a>. I'd have to double-check the wasmtime-py API, but I'm pretty sure you can set memory limits. Timeouts would likely have to be done using async or threads in your application.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/singlestore-labs/python-wasi/tree/main/udf\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4396b16665940acbf6bc715d425821cb0e477bdf\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363735643532343065343137306439333039623934356565323938376665326631353130626233633136363634373230366135633135393133326164373433362f73696e676c6573746f72652d6c6162732f707974686f6e2d77617369)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/singlestore-labs/python-wasi/tree/main/udf\" title=\"python-wasi/udf at main · singlestore-labs/python-wasi\">python-wasi/udf at main · singlestore-labs/python-wasi</a></div><div class=\"message_embed_description\">Utilities for building CPython for the WASI platform - python-wasi/udf at main · singlestore-labs/python-wasi</div></div></div>",
        "id": 357366867,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683741260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"614177\">@Shannon Duncan (shadowcodex)</span> That is a good point. It may be that wasmtime-py's way of doing this is best we can do.</p>",
        "id": 357367157,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683741347
    },
    {
        "content": "<p>Completely separate Python instance is exactly what I'm after - I want it to have access to the Python standard library, but I don't need it to have access to any of my other code other than what I pass into it</p>",
        "id": 357367248,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683741366
    },
    {
        "content": "<p>The problem I've been having with this is that I don't know very much C at all, so I've been hoping to stumble across an example that does exactly what I'm looking for - I'm confident I'm far from the only person who wants to solve this problem, \"python in a sandbox\" is a thing that's been wanted by the wider Python community for decades</p>",
        "id": 357367531,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683741453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"616400\">@Simon Willison</span> The UDF example I pointed to is pretty much what you want, but it does take some work to put the pieces together. Although, if you build python.wasm in that parent project, then run <code>build.sh</code> in the udf directory, you're pretty close to having it.</p>",
        "id": 357368097,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1683741591
    },
    {
        "content": "<p>It's frustrating because I'm 100% this is possible using existing Python WASM runtimes and the python.wasm build from <a href=\"https://github.com/vmware-labs/webassembly-language-runtimes/releases/tag/python%2F3.11.3%2B20230428-7d1b259\">https://github.com/vmware-labs/webassembly-language-runtimes/releases/tag/python%2F3.11.3%2B20230428-7d1b259</a> - but actually figuring out how to do it has mostly defeated me, bare this example here which uses a tmp filesystem in a way I'd rather avoid: <a href=\"https://til.simonwillison.net/webassembly/python-in-a-wasm-sandbox\">https://til.simonwillison.net/webassembly/python-in-a-wasm-sandbox</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/vmware-labs/webassembly-language-runtimes/releases/tag/python%2F3.11.3%2B20230428-7d1b259\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ac5a187b83b9b318f51048b47b97bfca11298cce\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f613263653265623131323935386362626131613730346230656532373832613462333431323333626230343566333165636630653532363438356266656634392f766d776172652d6c6162732f776562617373656d626c792d6c616e67756167652d72756e74696d65732f72656c65617365732f7461672f707974686f6e2f332e31312e3325324232303233303432382d37643162323539)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/vmware-labs/webassembly-language-runtimes/releases/tag/python%2F3.11.3%2B20230428-7d1b259\" title=\"Release python/3.11.3+20230428-7d1b259 · vmware-labs/webassembly-language-runtimes\">Release python/3.11.3+20230428-7d1b259 · vmware-labs/webassembly-language-runtimes</a></div><div class=\"message_embed_description\">Wasm Language Runtimes provides popular language runtimes (Ruby, Python, …) precompiled to WebAssembly that are tested for compatibility and kept up to date when new versions of upstream languages are released - Release python/3.11.3+20230428-7d1b259 · vmware-labs/webassembly-language-runtimes</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://til.simonwillison.net/webassembly/python-in-a-wasm-sandbox\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/46e443913d6a276209c0aa2cb126a6dd9aab4fb0\\/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f74696c2e73696d6f6e77696c6c69736f6e2e6e65742f35663565306133363664633533623332353130346539646639643636306334362e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://til.simonwillison.net/webassembly/python-in-a-wasm-sandbox\" title=\"Run Python code in a WebAssembly sandbox\">Run Python code in a WebAssembly sandbox</a></div><div class=\"message_embed_description\">I've been trying to figure this out for ages. Tim Bart responded to [my call for help on Hacker News](https://news.ycombinator.com/item?id=34598024) with [this extremely useful code example](https://g</div></div></div>",
        "id": 357368150,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683741602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"616400\">@Simon Willison</span> <code>wasmtime-py</code> + <code>componentize-py</code> should do what you need and not require writing any C or Rust code.  You would need to write a bit of WIT to represent the interface the host uses to talk to the guest running in the sandbox, but otherwise it would be pure Python on both sides.</p>",
        "id": 357368234,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683741610
    },
    {
        "content": "<p>This <a href=\"https://github.com/dicej/componentize-py\">https://github.com/dicej/componentize-py</a> ? interesting, hadn't seen that one</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/componentize-py\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bea1afa5809bd588e1a51f50f1dbf66f29b9798c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666338643762656435636131623031656162323232613932343537313866383463363839626231663465613763383561653665656337326132373266376662612f646963656a2f636f6d706f6e656e74697a652d7079)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/componentize-py\" title=\"GitHub - dicej/componentize-py\">GitHub - dicej/componentize-py</a></div><div class=\"message_embed_description\">Contribute to dicej/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 357368594,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683741709
    },
    {
        "content": "<p>Yes, it's quite new and still under development, but it works.</p>",
        "id": 357368906,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683741775
    },
    {
        "content": "<p>My next goal is to publish artifacts to pypi so you can <code>pip install</code> it.</p>",
        "id": 357369014,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683741804
    },
    {
        "content": "<p>I have a strong hunch that there is massive, pent-up demand for an easy way to safely run untrusted Python and JavaScript code using wasmtime-py / wasmer-python / etc, and the first project to release a \"pip install\" package that can do this (and hide all of the WASM / WIT / etc details) will find themselves with a massively popular project</p>",
        "id": 357369061,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683741822
    },
    {
        "content": "<p>The tricky bit would be hiding the WIT details.  We'd need some way to generate WIT from Python code, I guess.</p>",
        "id": 357369296,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683741872
    },
    {
        "content": "<p>(which can't be done in the general case, but could be done for a subset of cases)</p>",
        "id": 357369395,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683741896
    },
    {
        "content": "<p>it's frustrating because it feels like this should be one of the most obvious and useful applications of WASM, but it's way too hard to figure out how to do it right now</p>\n<p>I would hope I don't need to learn WIT - I only want one function exposed to me, \"run_python_code_in_sandbox_and_return_stringified_result(untrusted_string_of_python_code)\" - basically I want a safe eval() alternative</p>",
        "id": 357369509,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683741925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357365221\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"614177\">Shannon Duncan (shadowcodex)</span> the name is not relevant -- it's the fact that the type is used as the second type argument to <code>result</code>.  I.e. any time we have <code>result&lt;T, E&gt;</code>, where <code>T</code> and <code>E</code> are types, we need to treat <code>E</code> as an \"error\" type.</p>\n</blockquote>\n<p>Thanks Joel, I'm learning <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> more and more!  If that's the case I believe E should be of type <code>Exception</code>.  Saw some discussion on some forum somewhere about adding dataclass attribute to Exception but I think that effects the <code>__str__</code> dundermethod.</p>",
        "id": 357369988,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683742070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"616400\">@Simon Willison</span>  I agree it sounds great.  I think the main thing missing is a sort of reverse binding generator which, instead of generating Python from WIT, generates WIT from (a subset of) Python.  Not a trivial project, but doable.</p>",
        "id": 357370255,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683742137
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357369296\">said</a>:</p>\n<blockquote>\n<p>The tricky bit would be hiding the WIT details.  We'd need some way to generate WIT from Python code, I guess.</p>\n</blockquote>\n<p>Wonder if function decorators could help solve this.</p>",
        "id": 357370306,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683742154
    },
    {
        "content": "<p>I think I want something much simpler than that - literally a version of eval() that I can call where the arbitrary code I pass to it is evaluated in a WASM sandbox</p>",
        "id": 357370422,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683742187
    },
    {
        "content": "<p>Right; I mean that the Python-&gt;WIT thing would happen under the hood and not be exposed to the app developer.</p>",
        "id": 357370625,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683742243
    },
    {
        "content": "<p>That would solve the problem I have today - I'd be happy to adopt some brilliant future solution that lets me use function decorators and generates WIT and suchlike, but honestly I just want to run eval(\"3 * 5\") and get back 15 safe in the knowledge that untrusted code can't break my application or takeover my computer</p>",
        "id": 357370646,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683742252
    },
    {
        "content": "<p>oh, actually I see what you're saying now -- we just want to pass a string of Python code to the sandboxed interpreter and have it eval'd there.  Yeah,, that wouldn't need any WIT stuff.</p>",
        "id": 357370815,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683742309
    },
    {
        "content": "<p>So we could use <code>componentize-py</code> today to generate a component with a simple, general-purpose interface, e.g. <code>func eval(code: string) -&gt; result&lt;string, string&gt;</code>.  You'd need to deserialize (unpickle?) the result according to the expected Python type, I guess.</p>",
        "id": 357371523,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683742513
    },
    {
        "content": "<p>Yup, that would solve my problem perfectly - I'm completely fine rolling my own serialization/deserialization stuff on top of that</p>",
        "id": 357372737,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683742827
    },
    {
        "content": "<p>I'd probably use JSON for that to avoid any security concerns involving pickle</p>",
        "id": 357372789,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683742849
    },
    {
        "content": "<p>If I have some time this week, I'll put together a proof-of-concept for this and report back.  I haven't actually used <code>wasmtime-py</code> yet, so this is a good excuse to try it out.</p>",
        "id": 357375965,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683743712
    },
    {
        "content": "<p>that would be amazing! Can't wait to see what you come up with</p>",
        "id": 357376444,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683743858
    },
    {
        "content": "<p>Another potential stepping stone on the way to compenetize-py as the sandboxing mechanism for running python could be using a runtime like Deno with pyodide. I submitted a trivial patch to pyodide so that you can run pyodide in Deno via the npm compatibility layer. That way you can use Deno to sandbox the io and WASM to sandbox the python runtime. Still needs some docs but added <a href=\"https://github.com/pyodide/pyodide/issues/3420#issuecomment-1542742906\">some examples to the pyodide issue on Deno support</a>.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/pyodide/pyodide/issues/3420#issuecomment-1542742906\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fc1d8050bd053d9e3f761c1a6e2e325b95e47438\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666362393730663031346139306439616435636231643138316434323731666166633739316161383231393839373665303833663938633063343032386238382f70796f646964652f70796f646964652f6973737565732f33343230)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/pyodide/pyodide/issues/3420#issuecomment-1542742906\" title=\"Deno support · Issue #3420 · pyodide/pyodide\">Deno support · Issue #3420 · pyodide/pyodide</a></div><div class=\"message_embed_description\">Deno support was discussed in #1477 (comment) and I think it would be good to add it and have some minimal tests in CI. As discussed in the linked PR only a few minor fixes are needed. I'll open a ...</div></div></div>",
        "id": 357397345,
        "sender_full_name": "Milan",
        "timestamp": 1683750128
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// example.ts</span>\n<span class=\"n\">import</span><span class=\"w\"> </span><span class=\"n\">pyodideModule</span><span class=\"w\"> </span><span class=\"n\">from</span><span class=\"w\"> </span><span class=\"s\">\"npm:pyodide/pyodide.js\"</span><span class=\"p\">;</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">loadPyodide</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">pyodideModule</span><span class=\"p\">;</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">pyodide</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">loadPyodide</span><span class=\"p\">();</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">pyodide</span><span class=\"p\">.</span><span class=\"n\">runPythonAsync</span><span class=\"p\">(</span><span class=\"err\">`</span>\n<span class=\"mi\">3</span><span class=\"o\">+</span><span class=\"mi\">4</span>\n<span class=\"err\">`</span><span class=\"p\">);</span>\n<span class=\"n\">console</span><span class=\"p\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s\">\"result:\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">result</span><span class=\"p\">.</span><span class=\"n\">toString</span><span class=\"p\">());</span>\n</code></pre></div>\n<p>Yeah that's exactly what I want to be able to do - I'd love to be able to do that in Python, not just in JavaScript</p>",
        "id": 357398144,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683750388
    },
    {
        "content": "<p>Although I realize that the catch with Pyodide is that it doesn't provide an easy way to restrict memory usage - I guess because that's protection that browsers already provide. For server-side code I want the ability to restrict to a specific number of MBs of available memory for the untrusted code to operate in</p>",
        "id": 357400111,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683751000
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"616400\">Simon Willison</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357400111\">said</a>:</p>\n<blockquote>\n<p>Although I realize that the catch with Pyodide is that it doesn't provide an easy way to restrict memory usage - I guess because that's protection that browsers already provide. For server-side code I want the ability to restrict to a specific number of MBs of available memory for the untrusted code to operate in</p>\n</blockquote>\n<p>Yeah that has to be provided by the runtime. Browsers vs wasmtime.</p>",
        "id": 357406434,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1683753609
    },
    {
        "content": "<p>Wrote up an experiment I did running Pyodide inside Deno inside a Python subprocess: <a href=\"https://til.simonwillison.net/deno/pyodide-sandbox\">https://til.simonwillison.net/deno/pyodide-sandbox</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://til.simonwillison.net/deno/pyodide-sandbox\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/32aae3441d8959cb692485dba57fe64624ac40bc\\/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f74696c2e73696d6f6e77696c6c69736f6e2e6e65742f63333162303636373964383936393435653466616637303734363566366362632e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://til.simonwillison.net/deno/pyodide-sandbox\" title=\"Running Python code in a Pyodide sandbox via Deno\">Running Python code in a Pyodide sandbox via Deno</a></div><div class=\"message_embed_description\">I continue to seek a solution to the Python sandbox problem. I want to run an untrusted piece of Python code in a sandbox, with limits on memory and time.\n\nPrevious attempt: [Run Python code in a WebA</div></div></div>",
        "id": 357409431,
        "sender_full_name": "Simon Willison",
        "timestamp": 1683755025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"614177\">Shannon Duncan (shadowcodex)</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357369988\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357365221\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"614177\">Shannon Duncan (shadowcodex)</span> the name is not relevant -- it's the fact that the type is used as the second type argument to <code>result</code>.  I.e. any time we have <code>result&lt;T, E&gt;</code>, where <code>T</code> and <code>E</code> are types, we need to treat <code>E</code> as an \"error\" type.</p>\n</blockquote>\n<p>Thanks Joel, I'm learning <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> more and more!  If that's the case I believe E should be of type <code>Exception</code>.  Saw some discussion on some forum somewhere about adding dataclass attribute to Exception but I think that effects the <code>__str__</code> dundermethod.</p>\n</blockquote>\n<p>You <strong>must</strong> inherit from <code>Exception</code> if you are going to raise an exception. And as I said, I have never seen an exception class be a dataclass, so you're in uncharted territory in terms of compatibility.</p>",
        "id": 357415483,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1683758089
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"447413\">Kevin Smith</span> <a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357361226\">said</a>:</p>\n<blockquote>\n<p>I still feel like <span class=\"user-mention silent\" data-user-id=\"614177\">Shannon Duncan (shadowcodex)</span> 's overall exception hierarchy is the correct way, but maybe just add the dataclass features like you originally had to add formal definitions of the payload. As Brett mentioned, I've never seen exceptions as dataclasses before either, but they might be needed to make this work on both sides. While it's a little sketchy, maybe add an <code>args</code> property to the base exception class as well to return a tuple that contains the data value. That way <code>e.args</code> and <code>e.value</code> won't get out of sync.</p>\n</blockquote>\n<p>Every Python exception already has an <code>args</code> attribute thanks to <code>Exception</code>:<br>\n``python</p>\n<blockquote>\n<blockquote>\n<blockquote>\n<p>try:<br>\n...     raise RuntimeError(\"I have an args\")<br>\n... except RuntimeError as exc:<br>\n...     print(dir(exc))<br>\n...     print(exc.args)<br>\n...<br>\n['__cause__', '__class__', '__context__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__setstate__', '__sizeof__', '__str__', '__subclasshook__', '__suppress_context__', '__traceback__', 'add_note', 'args', 'with_traceback']<br>\n('I have an args',)</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">And</span><span class=\"w\"> </span><span class=\"n\">you</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">pass</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">arbitrary</span><span class=\"w\"> </span><span class=\"n\">number</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">arguments</span>:\n<span class=\"err\">```</span><span class=\"n\">python</span>\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kr\">try</span>:\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">     </span><span class=\"n\">raise</span><span class=\"w\"> </span><span class=\"n\">RuntimeError</span><span class=\"p\">(</span><span class=\"s\">\"I have an args\"</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">RuntimeError</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">exc</span>:\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">     </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">     </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">cause__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">class__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">context__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">delattr__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">dict__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">dir__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">doc__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">eq__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">format__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">ge__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">getattribute__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">getstate__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">gt__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">hash__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">init__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">init_subclass__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">le__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">lt__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">ne__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">new__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">reduce__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">reduce_ex__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">repr__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">setattr__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">setstate__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">sizeof__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">str__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">subclasshook__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">suppress_context__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">traceback__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">add_note</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">args</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">with_traceback</span><span class=\"o\">'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">I</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">'</span><span class=\"p\">,)</span>\n<span class=\"o\">&gt;&gt;&gt;</span><span class=\"w\"> </span><span class=\"kr\">try</span>:\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">     </span><span class=\"n\">raise</span><span class=\"w\"> </span><span class=\"n\">RuntimeError</span><span class=\"p\">(</span><span class=\"s\">\"I have an args\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"so many args\"</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">except</span><span class=\"w\"> </span><span class=\"n\">RuntimeError</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">exc</span>:\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">     </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">dir</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">))</span>\n<span class=\"o\">..</span><span class=\"p\">.</span><span class=\"w\">     </span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"o\">..</span><span class=\"p\">.</span>\n<span class=\"p\">[</span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">cause__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">class__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">context__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">delattr__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">dict__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">dir__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">doc__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">eq__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">format__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">ge__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">getattribute__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">getstate__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">gt__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">hash__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">init__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">init_subclass__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">le__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">lt__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">ne__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">new__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">reduce__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">reduce_ex__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">repr__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">setattr__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">setstate__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">sizeof__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">str__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">subclasshook__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">suppress_context__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">__</span><span class=\"na\">traceback__</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">add_note</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">args</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">with_traceback</span><span class=\"o\">'</span><span class=\"p\">]</span>\n<span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">I</span><span class=\"w\"> </span><span class=\"n\">have</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">so</span><span class=\"w\"> </span><span class=\"n\">many</span><span class=\"w\"> </span><span class=\"n\">args</span><span class=\"o\">'</span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 357415735,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1683758218
    },
    {
        "content": "<p>Here's what I ended up doing in <code>componentize-py</code> (happy to change it if there's a better option that works in all cases):<br>\nI started with how <code>wasmtime-py</code> currently represents <code>result</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>                <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s1\">'T'</span><span class=\"p\">)</span>\n                <span class=\"nd\">@dataclass</span>\n                <span class=\"k\">class</span> <span class=\"nc\">Ok</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]):</span>\n                    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span>\n                <span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s1\">'E'</span><span class=\"p\">)</span>\n                <span class=\"nd\">@dataclass</span>\n                <span class=\"k\">class</span> <span class=\"nc\">Err</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">E</span><span class=\"p\">]):</span>\n                    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">E</span>\n\n                <span class=\"n\">Result</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"n\">E</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>And made the smallest change that could possibly work, which is to make <code>Err</code> extend <code>Exception</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Python\"><pre><span></span><code>                <span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s1\">'T'</span><span class=\"p\">)</span>\n                <span class=\"nd\">@dataclass</span>\n                <span class=\"k\">class</span> <span class=\"nc\">Ok</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]):</span>\n                    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">T</span>\n                <span class=\"n\">E</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s1\">'E'</span><span class=\"p\">)</span>\n                <span class=\"nd\">@dataclass</span>\n                <span class=\"k\">class</span> <span class=\"nc\">Err</span><span class=\"p\">(</span><span class=\"n\">Generic</span><span class=\"p\">[</span><span class=\"n\">E</span><span class=\"p\">],</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n                    <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">E</span>\n\n                <span class=\"n\">Result</span> <span class=\"o\">=</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Ok</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">],</span> <span class=\"n\">Err</span><span class=\"p\">[</span><span class=\"n\">E</span><span class=\"p\">]]</span>\n</code></pre></div>\n<p>That means the <code>E</code> type need not extend <code>Exception</code>.  So values of type <code>E</code> can't, in general, be <code>raise</code>d, but values of type <code>Err[E]</code> can.  For exports, <code>componentize-py</code> will catch <code>Err</code>s and turn them into <code>result</code>s to pass back to the host.  For imports, if the host returns an error, it will be wrapped in an <code>Err</code> and <code>raise</code>d.</p>",
        "id": 357418040,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683759491
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> (or anyone else who knows): Is it possible to build CPython 3.11.x for WASI on Windows without resorting to WSL?  I was up until 1AM last night trying everything I could think of (MSYS2, Cygwin, various flavors of Visual Studio) but never got it working.  Building the bootstrap <code>python.exe</code> was trouble-free using <code>build.bat</code>, and I was able to use the <code>configure</code> script to configure for <code>wasm32-unknown-wasi</code>, but was never able to <code>make</code> without either compiler or missing file errors.<br>\nFor context, I'm setting up CI for <code>componentize-py</code>.  Worst case, I can just build using Linux, publish the result, and use it on Windows.</p>",
        "id": 357592957,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683813001
    },
    {
        "content": "<p><a href=\"#narrow/stream/223391-wasm/topic/Python.20guest.20runtime.20and.20bindings/near/357592957\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"223391\" href=\"/#narrow/stream/223391-wasm/topic/Interpreted.20Language.20Guests\">#wasm &gt; Interpreted Language Guests</a> by <span class=\"user-mention silent\" data-user-id=\"509936\">Joel Dice</span>.</p>",
        "id": 357593241,
        "sender_full_name": "Notification Bot",
        "timestamp": 1683813046
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span>  I have never tried to do a cross-compile under Windows, so I have no clue what would be involved (I have always done it via Linux in CI or WSL; see <a href=\"https://github.com/brettcannon/cpython-wasi-build\">https://github.com/brettcannon/cpython-wasi-build</a> for how I have currently automated it)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/brettcannon/cpython-wasi-build\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bb2c92ca8f539f90103edb8d3b55152f988b165d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663861316136663233323463613365656531623966343834663936633533613331343834333733646261363636633831616164313933353231623030383837382f627265747463616e6e6f6e2f63707974686f6e2d776173692d6275696c64)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/brettcannon/cpython-wasi-build\" title=\"GitHub - brettcannon/cpython-wasi-build: Unofficial WASI builds of CPython\">GitHub - brettcannon/cpython-wasi-build: Unofficial WASI builds of CPython</a></div><div class=\"message_embed_description\">Unofficial WASI builds of CPython. Contribute to brettcannon/cpython-wasi-build development by creating an account on GitHub.</div></div></div>",
        "id": 357670361,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1683829661
    },
    {
        "content": "<p>Ok, no worries.  If WSL is required on Windows, that's fine -- just wanted to make sure I wasn't missing anything.</p>",
        "id": 357670754,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683829764
    },
    {
        "content": "<p>people build things on windows?</p>",
        "id": 357681918,
        "sender_full_name": "Ralph",
        "timestamp": 1683833468
    },
    {
        "content": "<p>that's news to me</p>",
        "id": 357681928,
        "sender_full_name": "Ralph",
        "timestamp": 1683833471
    },
    {
        "content": "<p>In case anyone wants to try <code>componentize-py</code> out, there are now pre-built binaries available: <a href=\"https://github.com/dicej/componentize-py/releases/tag/canary\">https://github.com/dicej/componentize-py/releases/tag/canary</a></p>\n<div class=\"codehilite\" data-code-language=\"Bash Session\"><pre><span></span><code><span class=\"gp\"> $ </span>curl<span class=\"w\"> </span>-Ls<span class=\"w\"> </span>https://github.com/dicej/componentize-py/releases/download/canary/componentize-py-canary-macos-aarch64.tar.gz<span class=\"p\">|</span>tar<span class=\"w\"> </span>xz\n<span class=\"gp\"> $ </span>./componentize-py<span class=\"w\"> </span>--help\n<span class=\"go\">A utility to convert Python apps into Wasm components</span>\n\n<span class=\"go\">Usage: componentize-py [OPTIONS] &lt;COMMAND&gt;</span>\n\n<span class=\"go\">Commands:</span>\n<span class=\"go\">  componentize  Generate a component from the specified Python app and its dependencies</span>\n<span class=\"go\">  bindings      Generate Python bindings for the world and write them to the specified directory</span>\n<span class=\"go\">  help          Print this message or the help of the given subcommand(s)</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  -d, --wit-path &lt;WIT_PATH&gt;  File or directory containing WIT document(s) [default: wit]</span>\n<span class=\"go\">  -w, --world &lt;WORLD&gt;        Name of world to target (or default world if `None`)</span>\n<span class=\"go\">  -q, --quiet                Disable non-error output</span>\n<span class=\"go\">  -h, --help                 Print help</span>\n<span class=\"go\">  -V, --version              Print version</span>\n</code></pre></div>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/componentize-py/releases/tag/canary\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d4f24b185b955e81c1984f53f09e815524980bd0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663937393839316131323232646666383939393431333662333833343833633364373435396331373265623530333038643139616361623736313066386637312f646963656a2f636f6d706f6e656e74697a652d70792f72656c65617365732f7461672f63616e617279)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/componentize-py/releases/tag/canary\" title=\"Release canary · dicej/componentize-py\">Release canary · dicej/componentize-py</a></div><div class=\"message_embed_description\">Contribute to dicej/componentize-py development by creating an account on GitHub.</div></div></div>",
        "id": 357708771,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683844081
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> I will give it a shot, I am trying to find a way to run arbitrary python code from our rust code. I read <a href=\"https://wasmlabs.dev/articles/wasm-host-to-python/\">https://wasmlabs.dev/articles/wasm-host-to-python/</a> and ended up here. Does componentize need to have the python code when building or it would be possible to load the code at runtime?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://wasmlabs.dev/articles/wasm-host-to-python/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2ea3a0045dd1e0c4e54890e861caf3b6891185e9\\/68747470733a2f2f7761736d6c6162732e6465762f7374617469632f696d616765732f6f672f7761736d2d686f73742d746f2d707974686f6e2e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://wasmlabs.dev/articles/wasm-host-to-python/\" title=\"Extending web applications with WebAssembly and Python\">Extending web applications with WebAssembly and Python</a></div><div class=\"message_embed_description\">How to leverage Python and WebAssembly to securely extend your web application capabilities using Suborbital and Wasm Labs tooling and language runtimes.</div></div></div>",
        "id": 357876101,
        "sender_full_name": "Emile Fugulin",
        "timestamp": 1683899172
    },
    {
        "content": "<p>Currently it wants the Python code while building, although you can always inject code using <code>eval</code> at runtime.</p>",
        "id": 357886360,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683901170
    },
    {
        "content": "<p>BTW, I'm planning to make <code>componentize-py</code> usable as a Python library, hopefully next week.  Then you'll be able to <code>pip install</code> it and write code that generates and runs (via <code>wasmtime-py</code>) components on-the-fly.</p>",
        "id": 357887107,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683901293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"616400\">@Simon Willison</span> I spent some time this morning creating a <code>wasmtime-py</code>/<code>componentize-py</code> demo per our earlier conversation: <a href=\"https://github.com/dicej/component-sandbox-demo\">https://github.com/dicej/component-sandbox-demo</a>.  Unfortunately, it doesn't actually work yet, since <code>wasmtime</code> does not yet have a built-in WASI Preview 2 implementation (work in progress: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\">https://github.com/bytecodealliance/wasmtime/issues/6370</a>).  There's also a bug where the binding generator sometimes uses Python keywords as identifiers, but that should be easy to fix.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/component-sandbox-demo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e31f72a03f0baa5adf35d4c01af1d95cb4736c94\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393033613564333637356435353932323462626634613933616262306239376537656664396137643634373535623939383637393132373531663235613337382f646963656a2f636f6d706f6e656e742d73616e64626f782d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/component-sandbox-demo\" title=\"GitHub - dicej/component-sandbox-demo\">GitHub - dicej/component-sandbox-demo</a></div><div class=\"message_embed_description\">Contribute to dicej/component-sandbox-demo development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/582269420ace609de018e82ede94ee425fad2ae8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303164616531613061666537316564353837623136323332643766336163383533666133353265363037396633336338393235393463633763306134646462342f62797465636f6465616c6c69616e63652f7761736d74696d652f6973737565732f36333730)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/6370\" title=\"Land WASI Preview 2 support into Wasmtime · Issue #6370 · bytecodealliance/wasmtime\">Land WASI Preview 2 support into Wasmtime · Issue #6370 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">We have been working on a prototype of what WASI Preview 2 support will look like in Wasmtime for 7 months now! https://github.com/bytecodealliance/preview2-prototyping/ The work is not yet totally...</div></div></div>",
        "id": 357923059,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683907598
    },
    {
        "content": "<p>Per <span class=\"user-mention\" data-user-id=\"590805\">@Ryan Levick (rylev)</span> 's suggestion, I'm going to try adding an option to <code>componentize-py</code> to replace all the WASI imports with trapping stubs and see how far that gets us.  Longer-term, we'll want a general-purpose \"virutal WASI\" component which provides e.g. a virtual, in-memory filesystem, etc. for this kind of application.</p>",
        "id": 357937166,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683910850
    },
    {
        "content": "<p>I've added a <code>--stub-wasi</code> option to <code>componentize-py</code>, and have updated the above demo, which now works.</p>",
        "id": 357985055,
        "sender_full_name": "Joel Dice",
        "timestamp": 1683925217
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> and all, I'd love to get your thoughts about benefits to understanding how your work here might integrate with <a href=\"https://github.com/microsoft/vscode-wasm\">https://github.com/microsoft/vscode-wasm</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/vscode-wasm\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b9999a9582e96eff340d3907ba4f9e98f006457c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353939333936646436336166636163303636343034383836306463663761623265323539353534333433656465653232613631303634376562393035376434382f6d6963726f736f66742f7673636f64652d7761736d)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/vscode-wasm\" title=\"GitHub - microsoft/vscode-wasm: A WASI implementation that uses VS Code's extension host as the implementing API\">GitHub - microsoft/vscode-wasm: A WASI implementation that uses VS Code's extension host as the implementing API</a></div><div class=\"message_embed_description\">A WASI implementation that uses VS Code&#39;s extension host as the implementing API - GitHub - microsoft/vscode-wasm: A WASI implementation that uses VS Code&#39;s extension host as the implementi...</div></div></div>",
        "id": 358478569,
        "sender_full_name": "Ralph",
        "timestamp": 1684161302
    },
    {
        "content": "<p>open ended question. I haven't had the chance to think deeply about it yet myself, so.... just throwing that out there.</p>",
        "id": 358478694,
        "sender_full_name": "Ralph",
        "timestamp": 1684161334
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> I'll confess I don't know much about VSCode, and I can't quite tell what that project is for.  Does it support hosting WASI Preview 2 components, or just WASI Preview 1 modules?  If the former, then <code>componentize-py</code> could certainly integrate nicely with it.</p>",
        "id": 358505617,
        "sender_full_name": "Joel Dice",
        "timestamp": 1684166973
    },
    {
        "content": "<p>it hosts preview 1 at the moment using wasi shims sitting on top of node (vscode's engine). In addition, it brings debugging wire-up directly into the ide oob. Very slick, and if we can wire things up to share, that would be coolio. Of course, it will eventually move to preview 2, but I've asked them to enable the javascript experience as well first.</p>",
        "id": 358507004,
        "sender_full_name": "Ralph",
        "timestamp": 1684167258
    },
    {
        "content": "<p>open ended conversation here, but at some point we should set up a demo and chat/noodle for all the python heads....</p>",
        "id": 358507148,
        "sender_full_name": "Ralph",
        "timestamp": 1684167285
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/2BX5-zcMsUAQ1Pwbf5tdJw3M/python.gif\">python.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/2BX5-zcMsUAQ1Pwbf5tdJw3M/python.gif\" title=\"python.gif\"><img src=\"/user_uploads/15107/2BX5-zcMsUAQ1Pwbf5tdJw3M/python.gif\"></a></div>",
        "id": 358507273,
        "sender_full_name": "Ralph",
        "timestamp": 1684167314
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/BfkrDlDyStbqIvovEEG04lNn/webshell.gif\">webshell.gif</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/BfkrDlDyStbqIvovEEG04lNn/webshell.gif\" title=\"webshell.gif\"><img src=\"/user_uploads/15107/BfkrDlDyStbqIvovEEG04lNn/webshell.gif\"></a></div>",
        "id": 358507394,
        "sender_full_name": "Ralph",
        "timestamp": 1684167345
    },
    {
        "content": "<p>those are just quick examples; it's not finished or smooth yet, so the ultimate form of experience is entirely malleable</p>",
        "id": 358507569,
        "sender_full_name": "Ralph",
        "timestamp": 1684167378
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> don't worry about the VS Code stuff; I work on it and it's why I'm here, so it's being looked after (and to <span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> : the more important thing is installing Python projects which is a separate concern).</p>\n<p>As for name clashes with keywords, FYI the convention in Python is to add a traililng <code>_</code> to a name to avoid the clash.</p>",
        "id": 358579447,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1684188261
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> Thanks for componentize-py and the demo repos!  Is there a way I could bring in 3rd party libraries that have c-extensions (specifically, numpy) in my component?  Specifically, I'm getting  \"Original error was: No module named 'numpy.core._multiarray_umath'\".  I'm thinking that it's either (a) not actually possible using the wasmtime/componentize tool chain, or (b) that some part of that chain needs to be built with the correct wheels.</p>",
        "id": 358801961,
        "sender_full_name": "Pamela McA'Nulty",
        "timestamp": 1684258051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"617792\">@Pamela McA'Nulty</span> I'm glad you asked, because that's what I'm working on at the moment (details here: <a href=\"https://hackmd.io/IlY4lICRRNy9wQbNLdb2Wg\">https://hackmd.io/IlY4lICRRNy9wQbNLdb2Wg</a>).  Unfortunately, it's not possible yet, but I hope to make it possible in the near future.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/IlY4lICRRNy9wQbNLdb2Wg\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/IlY4lICRRNy9wQbNLdb2Wg\" title=\"Shared-Everything Linking RFC - HackMD\">Shared-Everything Linking RFC - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 358802422,
        "sender_full_name": "Joel Dice",
        "timestamp": 1684258169
    },
    {
        "content": "<p>(left a comment with a question on the hackmd)</p>",
        "id": 358829124,
        "sender_full_name": "bjorn3",
        "timestamp": 1684265077
    },
    {
        "content": "<p>How does <time datetime=\"2023-05-25T19:00:00Z\">2023-05-25T13:00:00-06:00</time> sound for our next meeting?  Let me know if you'd like to attend and that doesn't work for you.</p>",
        "id": 360596891,
        "sender_full_name": "Joel Dice",
        "timestamp": 1684862964
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> are y'all doing official calendar invites?</p>",
        "id": 360649097,
        "sender_full_name": "Shannon Duncan (shadowcodex)",
        "timestamp": 1684880666
    },
    {
        "content": "<p>Not yet, but I can start doing that.  I'll create one and add you if you DM me your email address.</p>",
        "id": 360649352,
        "sender_full_name": "Joel Dice",
        "timestamp": 1684880790
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> what's this meeting about? running python apps in webassembly runtimes? or embedding runtimes in python apps?</p>",
        "id": 360672698,
        "sender_full_name": "wayne",
        "timestamp": 1684894706
    },
    {
        "content": "<p>It's about running Python apps in WebAssembly runtimes, yes, and specifically constructing components implemented in Python that follow the Component Model (<a href=\"https://github.com/WebAssembly/component-model/\">https://github.com/WebAssembly/component-model/</a>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7aa56cb17ba4ec21e2bda9e174b378b57f49eb7b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f386461613565373539326136656630623338336333323763623932386435356231353764663266646365666231643030316364643132366534326163306533632f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/\" title=\"GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model\">GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - GitHub - WebAssembly/component-model: Repository for design and specification of the Component Model</div></div></div>",
        "id": 360699841,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1684909698
    },
    {
        "content": "<p>Planning to meet in about 30 minutes at <a href=\"https://meet.jit.si/PythonComponentTooling\">https://meet.jit.si/PythonComponentTooling</a><br>\nAgenda and notes here: <a href=\"https://hackmd.io/ZXNfJqvFQ0KvaWRImWSnqg\">https://hackmd.io/ZXNfJqvFQ0KvaWRImWSnqg</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonComponentTooling\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonComponentTooling\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/ZXNfJqvFQ0KvaWRImWSnqg\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/ZXNfJqvFQ0KvaWRImWSnqg\" title=\"Python Component Tooling Meeting 2023-05-25 - HackMD\">Python Component Tooling Meeting 2023-05-25 - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 361138339,
        "sender_full_name": "Joel Dice",
        "timestamp": 1685039591
    },
    {
        "content": "<p>I should have mentioned in the meeting that I was using wasix when building numpy, so that might have paved over some issues that they may want to fix in a more permanent way like Brett did with Python itself. That could add to the number of changes needed for WASI.</p>",
        "id": 361153892,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1685044296
    },
    {
        "content": "<p>I assume there's a meeting today?</p>",
        "id": 364641538,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1686247468
    },
    {
        "content": "<p>Yes, 45 minutes from now at <a href=\"https://meet.jit.si/PythonComponentTooling\">https://meet.jit.si/PythonComponentTooling</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonComponentTooling\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonComponentTooling\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div>",
        "id": 364644038,
        "sender_full_name": "Joel Dice",
        "timestamp": 1686248139
    },
    {
        "content": "<p>Will post an agenda here shortly: <a href=\"https://hackmd.io/HXrhjkMXRI20jU9x46UK2A\">https://hackmd.io/HXrhjkMXRI20jU9x46UK2A</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/HXrhjkMXRI20jU9x46UK2A\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/HXrhjkMXRI20jU9x46UK2A\" title=\"Python Component Tooling Meeting 2023-06-08 - HackMD\">Python Component Tooling Meeting 2023-06-08 - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 364644412,
        "sender_full_name": "Joel Dice",
        "timestamp": 1686248240
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> <span class=\"user-mention\" data-user-id=\"533867\">@Kushal Das</span> I've managed to build a WASI <code>libpython3.11.so</code> and call into it via the C API from another .so: <a href=\"https://github.com/dicej/component-linking-demo\">https://github.com/dicej/component-linking-demo</a>.  Now I'm trying to <code>import ujson</code>, which is somewhat predictably failing, considering only <code>ujson.cpython-311-darwin.so</code> is in <code>sys.path</code>.  So I'm trying to figure out what the appropriate file name(s) for a WASI build of <code>ujson</code> might be (<code>ujson.cpython-311-wasi.so</code>, maybe?).  When I add debug logging to trace all file opens and stats, I don't see anything, so it's not clear to me that <code>importlib</code> is looking for _anything_ on the filesystem.  Any advice for debugging?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dicej/component-linking-demo\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/aa49b93bef2cea2332acf8cdc382f9903c577225\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623039666139313131626338326333366333373035383639333963383863346134353262363639366363393166386233656239363865343766373965623836642f646963656a2f636f6d706f6e656e742d6c696e6b696e672d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dicej/component-linking-demo\" title=\"GitHub - dicej/component-linking-demo: Demo of shared-everything linking using the WebAssembly Component Model\">GitHub - dicej/component-linking-demo: Demo of shared-everything linking using the WebAssembly Component Model</a></div><div class=\"message_embed_description\">Demo of shared-everything linking using the WebAssembly Component Model - GitHub - dicej/component-linking-demo: Demo of shared-everything linking using the WebAssembly Component Model</div></div></div>",
        "id": 365948067,
        "sender_full_name": "Joel Dice",
        "timestamp": 1686678551
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">❯</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">run_wasi</span><span class=\"p\">.</span><span class=\"n\">sh</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">c</span><span class=\"w\"> </span><span class=\"s\">\"import importlib.machinery; print(importlib.machinery.EXTENSION_SUFFIXES)\"</span>\n<span class=\"p\">[]</span>\n</code></pre></div>\n<p>Looks like it's completely disabled ATM for extension modules since no one expected it to work. <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> I opened <a href=\"https://github.com/python/cpython/issues/105738\">https://github.com/python/cpython/issues/105738</a> to fix it.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/python/cpython/issues/105738\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9822b770d2bef4c5b852fe7e01d50e62604ccaca\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633131323138356330636465656232363636633962313262633430383030333632336162636530653034636534323561376630643733306439356135663139362f707974686f6e2f63707974686f6e2f6973737565732f313035373338)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/python/cpython/issues/105738\" title=\"Add experimental support for importing extension modules compiled for WASI · Issue #105738 · python/cpython\">Add experimental support for importing extension modules compiled for WASI · Issue #105738 · python/cpython</a></div><div class=\"message_embed_description\">❯ ./run_wasi.sh -c \"import importlib.machinery; print(importlib.machinery.EXTENSION_SUFFIXES)\" [] See https://bytecodealliance.zulipchat.com/#narrow/stream/223391-wasm/topic/Python.20guest.20runtim...</div></div></div>",
        "id": 365959488,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1686681356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> would an experimental build or patch work? I'm realizing I don't know if I can even fix this upstream due to the lack of <code>dlopen()</code> to even build against. But I can probably give you a patch to apply to Python's source to test this out.</p>",
        "id": 365960985,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1686681721
    },
    {
        "content": "<p>Yes, a patch would be great.  I've already forked the cpython repo to make it build with a patched version of wasi-sdk 21.  Just trying to get everything working before I start opening upstream PRs.</p>",
        "id": 365968103,
        "sender_full_name": "Joel Dice",
        "timestamp": 1686683348
    },
    {
        "content": "<p>Python meeting today at <time datetime=\"2023-06-22T07:00:00Z\">2023-06-22T01:00:00-06:00</time> at <a href=\"https://meet.jit.si/PythonComponentTooling\">https://meet.jit.si/PythonComponentTooling</a>.  Feel free to add to the agenda: <a href=\"https://hackmd.io/DpFFGyoYRtq5UBfv1ZCT8Q\">https://hackmd.io/DpFFGyoYRtq5UBfv1ZCT8Q</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://meet.jit.si/PythonComponentTooling\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/050c7e43c0fc5dfcc5ba4105d6e634252586c236\\/68747470733a2f2f6d6565742e6a69742e73692f696d616765732f6a697473696c6f676f2e706e673f763d31)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://meet.jit.si/PythonComponentTooling\" title=\"Jitsi Meet\">Jitsi Meet</a></div><div class=\"message_embed_description\">Join a WebRTC video conference powered by the Jitsi Videobridge</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://hackmd.io/DpFFGyoYRtq5UBfv1ZCT8Q\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b37ce5483ca5f88093e39486a76c6a2b768cd6a5\\/68747470733a2f2f6861636b6d642e696f2f696d616765732f6d656469612f4861636b4d442d6f672e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://hackmd.io/DpFFGyoYRtq5UBfv1ZCT8Q\" title=\"Python Component Tooling Meeting - 2023-06-22 - HackMD\">Python Component Tooling Meeting - 2023-06-22 - HackMD</a></div><div class=\"message_embed_description\">or</div></div></div>",
        "id": 368566060,
        "sender_full_name": "Joel Dice",
        "timestamp": 1687441868
    },
    {
        "content": "<p>I think you meant <time datetime=\"2023-06-22T19:00:00Z\">2023-06-22T12:00:00-07:00</time>?</p>",
        "id": 368622855,
        "sender_full_name": "Jamey Sharp",
        "timestamp": 1687450695
    },
    {
        "content": "<p>Yes <span aria-label=\"point up\" class=\"emoji emoji-1f446\" role=\"img\" title=\"point up\">:point_up:</span></p>",
        "id": 368635193,
        "sender_full_name": "Joel Dice",
        "timestamp": 1687453104
    },
    {
        "content": "<p>FYI, further discussion of Python guest tooling will happen in <a class=\"stream\" data-stream-id=\"394175\" href=\"/#narrow/stream/394175-SIG-Guest-Languages\">#SIG-Guest-Languages</a></p>",
        "id": 372905840,
        "sender_full_name": "Joel Dice",
        "timestamp": 1688651555
    },
    {
        "content": "<p>Our next Python SIG meeting is on Thursday, July 20. <span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> will be on vacation. Does anyone have any agenda items for that meeting?</p>",
        "id": 376149958,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1689624696
    },
    {
        "content": "<p>If no one has agenda items for tomorrow's meeting, we can cancel this one. Any objections?</p>",
        "id": 376677189,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1689775278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> is out again this week. If anyone has anything to discuss, I can host the meeting. I've been out of the Wasm loop for a little while because of other project priorities, so I don't have anything new right now. Just let me know if you have a reason to meet this week.</p>",
        "id": 381263215,
        "sender_full_name": "Kevin Smith",
        "timestamp": 1691001919
    },
    {
        "content": "<p>Only thing I had was I tried to compile MicroPython via WASI but failed due to its use of <code>setjmp.h</code>. I was going to ask what the status of the exceptions proposal was since it seems that's necessary to fix that for WASI-libc?</p>",
        "id": 381267854,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1691002929
    },
    {
        "content": "<p>Let's shift meeting announcements/scheduling over to a topic in <a class=\"stream\" data-stream-id=\"394175\" href=\"/#narrow/stream/394175-SIG-Guest-Languages\">#SIG-Guest-Languages</a> in the future.</p>",
        "id": 381947703,
        "sender_full_name": "Robin Brown",
        "timestamp": 1691174470
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"595471\">@Brett Cannon</span> I put the threads proposal on the main group agenda for next Tuesday. I'll also add on exceptions too.</p>",
        "id": 381948175,
        "sender_full_name": "Robin Brown",
        "timestamp": 1691174566
    }
]