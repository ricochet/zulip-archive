[
    {
        "content": "<p>Is anyone interested in multi-memory in Wasm up for a chat?<br>\nI'm interested in learning about the status of <a href=\"https://github.com/WebAssembly/multi-memory\">https://github.com/WebAssembly/multi-memory</a> and any other projects in this space.<br>\nParticularly, it seems very useful to be able to have some of the memory of a wasm module shared with the host and possibly with other wasm modules, allowing zero copy semantics for that memory.<br>\nThis seems possible to achieve with memory mapping, but multi-memory might be a good way to make the semantics clearer.<br>\nAnyway, hope someone else is interested in this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/multi-memory\" style=\"background-image: url(https://opengraph.githubassets.com/6661f250b35b08da9f70243bb227f83f563351fea7e979188d6fec87244c8924/WebAssembly/multi-memory)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/multi-memory\" title=\"WebAssembly/multi-memory\">WebAssembly/multi-memory</a></div><div class=\"message_embed_description\">Multiple per-module memories for Wasm. Contribute to WebAssembly/multi-memory development by creating an account on GitHub.</div></div></div>",
        "id": 245121830,
        "sender_full_name": "J Pratt (they/them)",
        "timestamp": 1625627105
    },
    {
        "content": "<p>Hi! I'm interested in that, too. From <a href=\"https://github.com/WebAssembly/proposals\">the proposals doc</a>, that spec is in the \"implementation phase\". From the <a href=\"https://docs.wasmtime.dev/stability-wasm-proposals-support.html\">wasmtime docs</a>, it seems to be supported there. I haven't played with it myself yet, thanks for the reminder :D</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/proposals\" style=\"background-image: url(https://opengraph.githubassets.com/70f8d3e78de59f48a041c328418eb6065462d3d90a5b0d1d18e22e52b52d495b/WebAssembly/proposals)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/proposals\" title=\"WebAssembly/proposals\">WebAssembly/proposals</a></div><div class=\"message_embed_description\">Tracking WebAssembly proposals. Contribute to WebAssembly/proposals development by creating an account on GitHub.</div></div></div>",
        "id": 245140151,
        "sender_full_name": "Stephan Renatus",
        "timestamp": 1625643371
    },
    {
        "content": "<p>I have to admit I'm a bit surprised it's supported by Wasmtime. I had only used it through wasmtime-go, and the configurable doesn't seem to be supported there yet (am I missing something?).</p>",
        "id": 245140279,
        "sender_full_name": "Stephan Renatus",
        "timestamp": 1625643458
    },
    {
        "content": "<p>from rust, you can enable it with <a href=\"https://docs.rs/wasmtime/0.28.0/wasmtime/struct.Config.html#method.wasm_multi_memory\">https://docs.rs/wasmtime/0.28.0/wasmtime/struct.Config.html#method.wasm_multi_memory</a></p>\n<p>I think the go api is similar, but I'm not too familiar with it</p>",
        "id": 245204050,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1625673951
    },
    {
        "content": "<p>It looks like it's an oversight that it's missing from the C API and therefore all the (non-Rust) embeddings.</p>",
        "id": 245207593,
        "sender_full_name": "Peter Huene",
        "timestamp": 1625675641
    },
    {
        "content": "<p>I've opened an issue to add it: <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3066\">https://github.com/bytecodealliance/wasmtime/issues/3066</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/issues/3066\" style=\"background-image: url(https://opengraph.githubassets.com/ca45873429750c1b01c5e0d123ee0f8bb4d57b9ace9f059dc7172a1660e62454/bytecodealliance/wasmtime/issues/3066)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/issues/3066\" title=\"wasmtime_config_wasm_multi_memory_set is missing · Issue #3066 · bytecodealliance/wasmtime\">wasmtime_config_wasm_multi_memory_set is missing · Issue #3066 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">It appears that wasmtime_config_wasm_multi_memory_set is missing from the C API and therefore all the non-Rust language embeddings. This means that the other language embeddings can&#39;t enable mu...</div></div></div>",
        "id": 245208241,
        "sender_full_name": "Peter Huene",
        "timestamp": 1625675960
    },
    {
        "content": "<p>Thanks for work on that, too! <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span></p>",
        "id": 245412466,
        "sender_full_name": "Stephan Renatus",
        "timestamp": 1625817629
    },
    {
        "content": "<p><a href=\"https://github.com/bytecodealliance/wasmtime-go/pull/91\">https://github.com/bytecodealliance/wasmtime-go/pull/91</a> review would be great <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime-go/pull/91\" style=\"background-image: url(https://opengraph.githubassets.com/cc37a9f57de17b49ca51f235e190017f3fc9daa0bc26dde9c9d1d467b8813140/bytecodealliance/wasmtime-go/pull/91)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime-go/pull/91\" title=\"config: expose MultiMemory setting by srenatus · Pull Request #91 · bytecodealliance/wasmtime-go\">config: expose MultiMemory setting by srenatus · Pull Request #91 · bytecodealliance/wasmtime-go</a></div><div class=\"message_embed_description\">Fixes #89.</div></div></div>",
        "id": 245672407,
        "sender_full_name": "Stephan Renatus",
        "timestamp": 1626088482
    },
    {
        "content": "<p>Following up on multi-memory:</p>\n<p>What's the current story for how the usage of this will be from Rust (and other languages)?</p>\n<p>I've read some claims that LLVM already supports multiple address spaces (for AVR + Harvard arch) using either fat pointers or assumptions about read/write/executable data.</p>\n<p>Source: <a href=\"https://users.rust-lang.org/t/rust-wasm-multi-memory-feature/54798/6\">https://users.rust-lang.org/t/rust-wasm-multi-memory-feature/54798/6</a></p>\n<p>I'm reading <a href=\"https://github.com/WebAssembly/multi-memory/blob/master/proposals/multi-memory/Overview.md\">https://github.com/WebAssembly/multi-memory/blob/master/proposals/multi-memory/Overview.md</a></p>\n<p>To find out more, but it seems focused on the WASM side, without particular concern for making this accessible for compilers.</p>\n<p>Is the main usage going to be via a special 'copy from memory A to memory B' function +/ instruction?</p>\n<p>(Thanks again for the help last time)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://users.rust-lang.org/t/rust-wasm-multi-memory-feature/54798/6\" style=\"background-image: url(https://aws1.discourse-cdn.com/business5/uploads/rust_lang/original/2X/8/83e41956eccfd67ad6ff76f15a2c22e58db31d4f.svg)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://users.rust-lang.org/t/rust-wasm-multi-memory-feature/54798/6\" title=\"Rust &amp; Wasm multi-memory feature\">Rust &amp; Wasm multi-memory feature</a></div><div class=\"message_embed_description\">Pardon me if I'm wrong, but as far as I can tell the WASM multi-memory proposal doesn't exactly use fat pointers. There's simply a new immediate added to the memory instructions which indicates which memory to operate on - so the compiler has to know which ops go to which memory during compilation, which complicates things. That's why I was talking about special syntaxes.   One use-case I was hoping to explore was to expose shared memory between modules while also giving each their own private h...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/multi-memory/blob/master/proposals/multi-memory/Overview.md\" style=\"background-image: url(https://opengraph.githubassets.com/6661f250b35b08da9f70243bb227f83f563351fea7e979188d6fec87244c8924/WebAssembly/multi-memory)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/multi-memory/blob/master/proposals/multi-memory/Overview.md\" title=\"multi-memory/Overview.md at master · WebAssembly/multi-memory\">multi-memory/Overview.md at master · WebAssembly/multi-memory</a></div><div class=\"message_embed_description\">Multiple per-module memories for Wasm. Contribute to WebAssembly/multi-memory development by creating an account on GitHub.</div></div></div>",
        "id": 248176514,
        "sender_full_name": "J Pratt (they/them)",
        "timestamp": 1627957853
    },
    {
        "content": "<p>Would a custom allocator suffice? This would be predominantly used to share data between wasm module and something else (another wasm module or some other component). Some sort of a custom allocator would be sufficient I'd think.</p>",
        "id": 248200323,
        "sender_full_name": "Alexandru Ene",
        "timestamp": 1627983468
    },
    {
        "content": "<p>At this time AFAIK there are not plans to add language support to Rust for multi-memory and wasm. My assumption has been that multi-memory will come about at some sort of toolilng later as opposed to compiled in. That being said we'll probably follow whatever clang/C does in this regard</p>",
        "id": 248224712,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1627999298
    },
    {
        "content": "<p>I wonder if doing this in wasm64 might actually not be preposterously hard? It seems like it should be possible to reserve a few bytes of each pointer to denote the memory, and at least support, say, 4 or 8 memories</p>",
        "id": 248225422,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1627999609
    },
    {
        "content": "<p>Interesting idea; the hardest part would be making that efficient at load/store time (we really wouldn't want a load/store to such a pointer to require unpacking it each time). Also IIUC multimemory only has <a href=\"https://webassembly.github.io/multi-memory/core/binary/instructions.html#binary-memarg\">static memory indices</a>; wouldn't this require a dynamically-indexed variant?</p>\n<p>I guess given the latter, an interesting option might be a <code>memarg</code> variant that basically says \"take the memory index from the top N bits of the pointer, dynamically\". I have no idea what the history of the multimemory proposal looks like or if that's already been discussed though?</p>",
        "id": 248253369,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628012165
    },
    {
        "content": "<p>I have a few questions...</p>\n<p>Since the multimemory proposal doesn't modify pointer values, the compiler needs to know the required <code>memidx</code> for all load and store instructions. I can imagine this being controlled by a global flag set by the user (via a new system API), but that won't work when operating on pointers with different indexes.</p>\n<blockquote>\n<p>My assumption has been that multi-memory will come about at some sort of toolilng later as opposed to compiled in. </p>\n</blockquote>\n<p>I just can't see how developers will be able to use multimemory without some new language affordances. A custom allocator will almost certainly be required, but ultimately we need some way to tie index info to individual pointers; something like:</p>\n<div class=\"codehilite\" data-code-language=\"C++\"><pre><span></span><code><span class=\"k\">template</span><span class=\"o\">&lt;</span><span class=\"k\">typename</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>\n<span class=\"k\">struct</span> <span class=\"nc\">IndexedPtr</span> <span class=\"p\">{</span>\n  <span class=\"n\">T</span> <span class=\"o\">*</span><span class=\"n\">ptr</span><span class=\"p\">;</span>\n  <span class=\"kt\">uint32_t</span> <span class=\"n\">idx</span><span class=\"p\">;</span>\n  <span class=\"c1\">// could this use 'asm' style methods to implement indexed wasm ops?</span>\n<span class=\"p\">};</span>\n\n<span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">malloc</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">);</span>  <span class=\"c1\">// normal pointer; compiler will use index 0 for ops using p1</span>\n<span class=\"n\">IndexedPtr</span><span class=\"o\">&lt;</span><span class=\"kt\">char</span><span class=\"o\">&gt;</span> <span class=\"o\">*</span><span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">mallocIndexed</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">);</span>  <span class=\"c1\">// compiler somehow knows to set memidx for ops using p2</span>\n</code></pre></div>\n<p>And for languages that can't provide pointer type aliasing, this probably gets a lot more cumbersome.</p>\n<p><span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>: Presumably we wouldn't want to reserve any indexing bits from 32 bit pointers, since that would dramatically curtail the available addressing space. Maybe using a single bit to indicate that an index value follows in the next byte/word (i.e. pointers would take 40 or 64 bits but each segment can only address up to 2Gb) would be acceptable?</p>\n<p>On efficiency: the proposal already requires that <code>memarg</code> is inspected, with index extraction and alignment shift required for non-zero indexing. Would pulling an index from the pointer be all that much slower?</p>",
        "id": 248935201,
        "sender_full_name": "Michael Martin",
        "timestamp": 1628564457
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"427188\">Michael Martin</span> <a href=\"#narrow/stream/223391-wasm/topic/Multi-memory.20.2F.20shared.20memory/near/248935201\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span>: Presumably we wouldn't want to reserve any indexing bits from 32 bit pointers, since that would dramatically curtail the available addressing space. Maybe using a single bit to indicate that an index value follows in the next byte/word (i.e. pointers would take 40 or 64 bits but each segment can only address up to 2Gb) would be acceptable?</p>\n</blockquote>\n<p>Right, my thought was in the context of Till's question \" wonder if doing this in wasm64 might actually not be preposterously hard?\"; I think it would only really make sense with 64-bit pointers.</p>\n<blockquote>\n<p>On efficiency: the proposal already requires that <code>memarg</code> is inspected, with index extraction and alignment shift required for non-zero indexing. Would pulling an index from the pointer be all that much slower?</p>\n</blockquote>\n<p>The key distinction is that existing opcodes in the multimemory proposal take a <em>static</em> <code>memarg</code> (see the spec link above) so this can be inspected, and potentially resolved to a baked-in base address (or at least a fixed-offset load from a memory-base-pointers table). In contrast, taking bits from the pointer implies dynamic indexing, with at least a bounds-check of some sort. A little bit of overhead but maybe not too bad, I'm not sure.</p>",
        "id": 248941646,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628572937
    },
    {
        "content": "<p>Ok, that makes sense. I'm still curious as to the higher-level direction for multimemory, though. Absent a 64 bit VM, the current proposal doesn't seem to be particularly useful for developers without further details of how to indexed memory ops will be plumbed into the development langauge(s). Do you know if there's somewhere I can find out more about this?</p>",
        "id": 248943492,
        "sender_full_name": "Michael Martin",
        "timestamp": 1628575382
    },
    {
        "content": "<p>my understanding is that in its present form it's still pretty useful in a multi-module situation; e.g. imagine one wants to link a DAG of modules into a single Wasm module, one could include each memory from the original modules and rewrite code to refer to the appropriate memory</p>",
        "id": 248944060,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628576155
    },
    {
        "content": "<p>but cc <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> for more thoughts on that as I have a fairly surface-level understanding</p>",
        "id": 248944105,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628576172
    },
    {
        "content": "<p>Yeah my impression of multi-memory was that it is mostly a tooling/runtime thing that won't necessarily be exposed to languages themselves. For example I don't know how we'd implement this in Rust or how it'd be surfaced in Rust.</p>",
        "id": 249000208,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628612080
    },
    {
        "content": "<p>I could <em>maybe</em> imagine like memcpy intrinsics in/out of statically-allocated memories, but much more than that seems a bit implausible to me (e.g.  a <code>Vec&lt;T&gt;</code> located in a foreign address space seems dubious to implement but also somewhat dubious in motivation as well)</p>",
        "id": 249000312,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1628612125
    },
    {
        "content": "<blockquote>\n<p>... but also somewhat dubious in motivation as well</p>\n</blockquote>\n<p>Our use case is to share (preferably) read-only memory between modules that have their own module-specific working memory. The prime example is a static ML model being shared between isolated runtimes/modules performing different inference calculations. Such models may be quite large and the overhead of copying them for each inference is prohibitive.</p>\n<p>For this case a statically reserved space in the standard wasm memory would suffice, but that needs to be mapped onto the existing, external ML model (which may be achievable with POSIX virtual memory manipulation by the wasm host).</p>",
        "id": 249544281,
        "sender_full_name": "Michael Martin",
        "timestamp": 1629084033
    },
    {
        "content": "<p>(For context, I work with Michael Martin)</p>\n<p>In addition to this we have a second use case where there's a large data store that different modules should all read from, but not write to.<br>\nWe'd ideally like to avoid keeping copies of the data store per module.<br>\nWe'd also like to enforce that the modules can't write to the data store.</p>\n<p>This could be something that Multi-memory support could help with, particularly with something similar to memory mapping between the modules or linking the modules together (though this is less desirable, the modules are not coupled).</p>",
        "id": 249675848,
        "sender_full_name": "J Pratt (they/them)",
        "timestamp": 1629172013
    }
]