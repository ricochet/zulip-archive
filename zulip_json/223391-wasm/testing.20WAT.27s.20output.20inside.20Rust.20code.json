[
    {
        "content": "<p>I write my first wasm implementation for my programming language. The output of the WAT using <code>wasm2wat</code> is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$add</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i64</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kt\">i64</span><span class=\"p\">.</span><span class=\"n\">add</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"add\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$add</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I want to test this using <code>assert</code> inside my rust code. What is the best way to do that? Is there any library that I can use? </p>\n<p>Currently, I use walrus' <code>emit_wasm()</code> to produce wasm buffer.</p>",
        "id": 234426577,
        "sender_full_name": "Rizary",
        "timestamp": 1618362847
    },
    {
        "content": "<p>I would take a look at <a href=\"https://docs.wasmtime.dev/lang-rust.html\">https://docs.wasmtime.dev/lang-rust.html</a>: it has an example of how to embed Wasmtime in your Rust program and call your <code>add</code> function`.</p>",
        "id": 234522263,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1618414699
    },
    {
        "content": "<p>Thank you for the link. I have seen it but it seems we should have <code>.wat</code> file first to do that. What I want is more like  <code>my_language -&gt; wasm -&gt; wat</code> or <code>my_language -&gt; wat</code> but in buffer. Similar to what <code>emit_wasm()</code> function does, but to produce <code>wat</code> based on wasm spec.</p>",
        "id": 234602997,
        "sender_full_name": "Rizary",
        "timestamp": 1618450529
    },
    {
        "content": "<p>Are you looking for <a href=\"https://docs.rs/wasmtime/0.26.0/wasmtime/struct.Module.html#method.new\"><code>Module::new</code></a>? I guess you could use <code>Module::from_binary</code> directly if you already have the compiled Wasm bytes available.</p>",
        "id": 234701392,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1618501501
    },
    {
        "content": "<p>You can use the <code>wasmprinter</code> crate to disassemble a wasm buffer into wat: <a href=\"https://docs.rs/wasmprinter/0.2.25/wasmprinter/\">https://docs.rs/wasmprinter/0.2.25/wasmprinter/</a></p>",
        "id": 234750271,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1618519813
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/223391-wasm/topic/testing.20WAT's.20output.20inside.20Rust.20code/near/234701392\">said</a>:</p>\n<blockquote>\n<p>Are you looking for <a href=\"https://docs.rs/wasmtime/0.26.0/wasmtime/struct.Module.html#method.new\"><code>Module::new</code></a>? I guess you could use <code>Module::from_binary</code> directly if you already have the compiled Wasm bytes available.</p>\n</blockquote>\n<p>Yes, thank for the suggestion.</p>",
        "id": 235269315,
        "sender_full_name": "Rizary",
        "timestamp": 1618877641
    },
    {
        "content": "<p>@_<strong>fitzgen (he&#x2F;him)|253990</strong> <a href=\"#narrow/stream/223391-wasm/topic/testing.20WAT's.20output.20inside.20Rust.20code/near/234750271\">said</a>:</p>\n<blockquote>\n<p>You can use the <code>wasmprinter</code> crate to disassemble a wasm buffer into wat: <a href=\"https://docs.rs/wasmprinter/0.2.25/wasmprinter/\">https://docs.rs/wasmprinter/0.2.25/wasmprinter/</a></p>\n</blockquote>\n<p>thanks, I'll look into it.</p>",
        "id": 235269359,
        "sender_full_name": "Rizary",
        "timestamp": 1618877653
    }
]