[
    {
        "content": "<p>I use walrus library for my intermediate language. But I got stuck when I want to implement while statement. So I have this builder:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">struct</span> <span class=\"nc\">WasmBuilderVisitor</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">module</span>: <span class=\"nc\">Module</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"n\">function_builder</span>: <span class=\"nc\">Stack</span><span class=\"o\">&lt;</span><span class=\"n\">FunctionBuilder</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// BuildVisitorInner is a helper struct to keep track of functions and variables</span>\n<span class=\"w\">    </span><span class=\"n\">inner</span>: <span class=\"nc\">BuildVisitorInner</span><span class=\"o\">&lt;</span><span class=\"n\">JasmWasmBuild</span><span class=\"o\">&gt;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And my while implementation is:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">visit_while</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">condition</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">JasmExpression</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">body</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">Block</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">function_builder</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">function_builder</span><span class=\"p\">.</span><span class=\"n\">get_mut</span><span class=\"p\">().</span><span class=\"n\">func_body</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">function_builder</span><span class=\"p\">.</span><span class=\"n\">block</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\">  </span><span class=\"n\">done</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">done_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">done</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">().</span><span class=\"n\">to_owned</span><span class=\"p\">();</span><span class=\"w\"></span>\n\n<span class=\"w\">        </span><span class=\"n\">done</span><span class=\"p\">.</span><span class=\"n\">loop_</span><span class=\"p\">(</span><span class=\"nb\">None</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">loop_</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">loop_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">loop_</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"o\">&amp;</span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visit</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"w\">            </span><span class=\"n\">loop_</span><span class=\"p\">.</span><span class=\"n\">br_if</span><span class=\"p\">(</span><span class=\"n\">done_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"bp\">self</span><span class=\"p\">.</span><span class=\"n\">visits</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">body</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"n\">loop_</span><span class=\"p\">.</span><span class=\"n\">br</span><span class=\"p\">(</span><span class=\"n\">loop_id</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">});</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">});</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And I got the following error:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">requires</span><span class=\"w\"> </span><span class=\"n\">unique</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"bp\">self</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">but</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">already</span><span class=\"w\"> </span><span class=\"n\">borrowed</span><span class=\"w\"></span>\n<span class=\"n\">closure</span><span class=\"w\"> </span><span class=\"n\">construction</span><span class=\"w\"> </span><span class=\"n\">occurs</span><span class=\"w\"> </span><span class=\"n\">here</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I notice it is because of the loop_ function signature here:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">loop_</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">ty</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Into</span><span class=\"o\">&lt;</span><span class=\"n\">InstrSeqType</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">make_loop</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">FnOnce</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">InstrSeqBuilder</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"bp\">Self</span><span class=\"w\"></span>\n</code></pre></div>\n<p>And it is the problem: make_loop: <code>impl FnOnce(&amp;mut InstrSeqBuilder&lt;'_&gt;)</code>. However, I feel like it is hard for me to change how my <code>visitor</code> build is structured. Is there any suggestion for this? If I understand correctly, since there is <code>FnOnce</code>, then I cannot use both <code>loop_</code> and <code>self</code> at the same block.</p>",
        "id": 242058813,
        "sender_full_name": "Rizary",
        "timestamp": 1623242770
    }
]