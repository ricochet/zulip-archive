[
    {
        "content": "<p>Is it possible to link a C++ project compiled to wasm32-wasi into a Rust crate that uses wasm-bindgen and compiles to wasm32-unknown-unknown?</p>",
        "id": 385510328,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692207790
    },
    {
        "content": "<p>In rust due to historic accident wasm32-unknown-unknown is ABI incompatible with the wasm C ABI that rustc uses for wasm32-wasi and clang uses for all wasm targets. So if you want to directly call C++ functions from the rust crate, that isn't going to work. If you only work through the wasi interface it could work, but you did have to write a wasi implementation in rust and link the C++ code as static library. You can't link an already linked wasm module with other code.</p>",
        "id": 385526293,
        "sender_full_name": "bjorn3",
        "timestamp": 1692213838
    },
    {
        "content": "<p>Oh interesting, that's unfortunate. Thanks for the reply. What I Was trying to do is to link a C++ project (URL parser) into a Rust crate but that C++ project requires some libc functionality.</p>",
        "id": 385614458,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692257220
    },
    {
        "content": "<p>Tho it's not really relying on any syscalls, so I am wondering if I could somehow mock the syscalls and compile it to wasm32-unknown-unknown <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 385614547,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692257261
    },
    {
        "content": "<p>Would that be possible <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span>?</p>",
        "id": 385614578,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692257271
    },
    {
        "content": "<p>If you only pass primitive types like integers (32 and 64bit only), floats and pointers and don't pass any structs without a pointer indirection the abi incompatibility shouldn't hit you.</p>",
        "id": 385627918,
        "sender_full_name": "bjorn3",
        "timestamp": 1692262185
    },
    {
        "content": "<p>By the way maybe you could compile your C++ code using emscripten exporting a javascript interface and then call the exported javascript interface using wasm-bindgen from the rust code? <a href=\"https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html\">https://emscripten.org/docs/porting/connecting_cpp_and_javascript/Interacting-with-code.html</a> provides some documentation on how to export a javascript interface from emscripten. This is probably going to be slower than directly linking the C++ and rust code though.</p>",
        "id": 385628702,
        "sender_full_name": "bjorn3",
        "timestamp": 1692262432
    },
    {
        "content": "<p>By the way for a URL parser is there a reason you aren't using the javascript URL parser or the url crate? There are two versions of the URL specification (the RFC1738 one and the WHATWG one) which are different in ways that can cause security issues. Browsers and the url crate use the WHATWG version. I don't know which variant your C++ URL parser uses.</p>",
        "id": 385629257,
        "sender_full_name": "bjorn3",
        "timestamp": 1692262619
    },
    {
        "content": "<p>Hm, I think what I'd like to pass is strings (as pointers maybe)</p>",
        "id": 385655573,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692272277
    },
    {
        "content": "<p>The problem I am running into is, even if I compile the lib to wasi, it somehow complains then about</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lld</span>: <span class=\"nc\">error</span>: <span class=\"nc\">unable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">lstdc</span><span class=\"o\">++</span>\n</code></pre></div>",
        "id": 385655957,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692272431
    },
    {
        "content": "<p>Cause my lib type is <code>crate-type = [\"cdylib\"]</code></p>",
        "id": 385655997,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692272448
    },
    {
        "content": "<p>But browser also don't closely follow WHATWG unfortunately, at least Chrome and FF</p>",
        "id": 385656059,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692272481
    },
    {
        "content": "<p>I wanna link <a href=\"https://www.ada-url.com/\">https://www.ada-url.com/</a> because Node.js uses that parser and the browser's URL doesn't seem to be fully compliant with ada</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.ada-url.com/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f1fe21ffe03b624770dd9509726f1ab07b28f89f\\/68747470733a2f2f6164612d6c6b64346f786d6d6d2d6164612d75726c2e76657263656c2e6170702f6f70656e67726170682d696d6167653f30366237623336623833343734653038)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.ada-url.com/\" title=\"Ada URL\">Ada URL</a></div><div class=\"message_embed_description\">WHATWG Compliant URL parser written with focus on compliance, performance and security across multiple platforms and languages.</div></div></div>",
        "id": 385656111,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692272510
    },
    {
        "content": "<p>Cause Chrome and FF are not fully spec compliant</p>",
        "id": 385656139,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692272522
    },
    {
        "content": "<p>If you are doing URL parsing for security related purposes you did want to use the browser's URL parser rather than whatever the specification says precisely because the divergence can cause the browser to interpret URL's in ways you didn't expect.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"451533\">Dominic Elm</span> <a href=\"#narrow/stream/223391-wasm/topic/Link.20wasm32-wasi.20into.20wasm-bindgen.20project/near/385656139\">said</a>:</p>\n<blockquote>\n<p>Cause Chrome and FF are not fully spec compliant</p>\n</blockquote>\n<p>This statement surprised me because the whole reason the WHATWG URL specification exists at all afaik is to codify the divergence between actual browsers and RFC1738, but it seems there are indeed some divergences between WHATWG and some actual browsers.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"451533\">Dominic Elm</span> <a href=\"#narrow/stream/223391-wasm/topic/Link.20wasm32-wasi.20into.20wasm-bindgen.20project/near/385655957\">said</a>:</p>\n<blockquote>\n<p>The problem I am running into is, even if I compile the lib to wasi, it somehow complains then about</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">rust</span><span class=\"o\">-</span><span class=\"n\">lld</span>: <span class=\"nc\">error</span>: <span class=\"nc\">unable</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">find</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">lstdc</span><span class=\"o\">++</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Are you telling rustc where to find the library dir of the wasi-sdk using <code>-L</code>?</p>",
        "id": 385680499,
        "sender_full_name": "bjorn3",
        "timestamp": 1692281027
    },
    {
        "content": "<p>Do I have to pass the <code>-L</code> in the <code>build.rs</code>?</p>",
        "id": 385686218,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692282466
    },
    {
        "content": "<p>This is what my current <a href=\"http://build.rs\">build.rs</a> looks like</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">cc</span>::<span class=\"n\">Build</span>::<span class=\"n\">new</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">cpp</span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">compiler</span><span class=\"p\">(</span><span class=\"s\">\"/opt/wasi-sdk/build/wasi-sdk-20.10g7c0558ba4159/bin/clang++\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">flag</span><span class=\"p\">(</span><span class=\"s\">\"--sysroot=/opt/wasi-sdk/build/wasi-sdk-20.10g7c0558ba4159/share/wasi-sysroot\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">\"./ada/include\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s\">\"./ada/include/ada\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"s\">\"wasm32-wasi\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s\">\"./ada/src/ada.cpp\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s\">\"ada\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>",
        "id": 385686378,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692282507
    },
    {
        "content": "<p>But that results in the error that I posted earlier</p>",
        "id": 385686444,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692282528
    },
    {
        "content": "<p>Try adding <code>println!(\"cargo:rustc-link-search=/opt/wasi-sdk/build/wasi-sdk-20.10g7c0558ba4159/share/wasi-sysroot/lib\");</code> (I think <code>/opt/wasi-sdk/build/wasi-sdk-20.10g7c0558ba4159/share/wasi-sysroot/lib</code> would be the directory containing <code>libstdc++</code>, but if not change it to the directory that does contain it)</p>",
        "id": 385689908,
        "sender_full_name": "bjorn3",
        "timestamp": 1692283487
    },
    {
        "content": "<p>Hm yea, doesn't seem to work</p>",
        "id": 385733827,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298610
    },
    {
        "content": "<p>Tho that folder contains the following <br>\n<a href=\"/user_uploads/15107/17L_TqtwLAkENrut3aB_jtcj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/17L_TqtwLAkENrut3aB_jtcj/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/17L_TqtwLAkENrut3aB_jtcj/image.png\"></a></div>",
        "id": 385733939,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298647
    },
    {
        "content": "<p>So there is libc++.a</p>",
        "id": 385733978,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298663
    },
    {
        "content": "<p>Oh wait</p>",
        "id": 385734014,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298681
    },
    {
        "content": "<p>It's libc++</p>",
        "id": 385734063,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298685
    },
    {
        "content": "<p>Not libstdc++</p>",
        "id": 385734079,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298689
    },
    {
        "content": "<p>So maybe I can change it to use c++ as the standard lib</p>",
        "id": 385734111,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298698
    },
    {
        "content": "<p>Uhhh that worked maybe <span aria-label=\"eyes\" class=\"emoji emoji-1f440\" role=\"img\" title=\"eyes\">:eyes:</span></p>",
        "id": 385734191,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298740
    },
    {
        "content": "<p>Okay... I am a little closer</p>",
        "id": 385734751,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298925
    },
    {
        "content": "<p>Now I am seeing a few imports, prolly from the stdlib</p>",
        "id": 385734779,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298939
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/hBzRkYO3h4sD5RvhjAJn8FA_/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/hBzRkYO3h4sD5RvhjAJn8FA_/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/hBzRkYO3h4sD5RvhjAJn8FA_/image.png\"></a></div>",
        "id": 385734786,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298944
    },
    {
        "content": "<p>Any idea how I can get those or what I can do?</p>",
        "id": 385734850,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692298978
    },
    {
        "content": "<p>Ok passing <code>-fno-exceptions</code> will get rid of some</p>",
        "id": 385736024,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692299543
    },
    {
        "content": "<p>Down to these <br>\n<a href=\"/user_uploads/15107/glLkudM71nLHHKeMzAjVrW9v/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/glLkudM71nLHHKeMzAjVrW9v/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/glLkudM71nLHHKeMzAjVrW9v/image.png\"></a></div>",
        "id": 385737866,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692300385
    },
    {
        "content": "<p>Not sure what to do about those</p>",
        "id": 385737884,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692300397
    },
    {
        "content": "<p>Abort and memchr are coming from libc normally with memchr being provided for you from the rust side. You could implement abort as a panic in rust. <code>__cxa_atexit</code> allows registering a function to run when exiting the current process. Probably fine to implement it as no-op. For the rest I'm not sure what they do. You could try implementing them as panic. If that doesn't work could you run their names through a C++ name demangler like c++filt? That may make their name more readable.</p>",
        "id": 385738517,
        "sender_full_name": "bjorn3",
        "timestamp": 1692300706
    },
    {
        "content": "<p>Run what through a demangler?</p>",
        "id": 385739623,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692301278
    },
    {
        "content": "<p>I am now linking libc++</p>",
        "id": 385740474,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692301687
    },
    {
        "content": "<p>Is there a way I can also include libc so that it may find memchr?</p>",
        "id": 385740505,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692301701
    },
    {
        "content": "<p>aha <br>\n<a href=\"/user_uploads/15107/D53HWn7ielUr8CIKOK-O3BUF/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/D53HWn7ielUr8CIKOK-O3BUF/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/D53HWn7ielUr8CIKOK-O3BUF/image.png\"></a></div>",
        "id": 385741036,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692301947
    },
    {
        "content": "<p>Operators</p>",
        "id": 385741042,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692301950
    },
    {
        "content": "<p>Seems like libc++ is missing those?</p>",
        "id": 385741847,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692302327
    },
    {
        "content": "<p>Hm</p>",
        "id": 385741851,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692302328
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451533\">@Dominic Elm</span> You can try using <a href=\"https://github.com/kajacx/wasm-bridge\">wasm-bridge</a>, which is a create I built from loading and running wasm modules in Rust on the web. I have never tried it with C++, but that should not matter, as long as it's compiled to WASM correctly. The wasi support is still in progress though.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kajacx/wasm-bridge\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/36e7a9ee104fd5f45f35dd8210e4dc64c46fc3e8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323630356136366337623762616438666439313934663837386565613163633132393934363264363961353865353562346463393162663832313330643432332f6b616a6163782f7761736d2d627269646765)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kajacx/wasm-bridge\" title=\"GitHub - kajacx/wasm-bridge: Provides a single unified API to run WASM modules on the desktop using wasmtime, or on the web using js-sys.\">GitHub - kajacx/wasm-bridge: Provides a single unified API to run WASM modules on the desktop using wasmtime, or on the web using js-sys.</a></div><div class=\"message_embed_description\">Provides a single unified API to run WASM modules on the desktop using wasmtime, or on the web using js-sys. - GitHub - kajacx/wasm-bridge: Provides a single unified API to run WASM modules on the ...</div></div></div>",
        "id": 386110905,
        "sender_full_name": "Karel Hrkal (kajacx)",
        "timestamp": 1692455647
    }
]