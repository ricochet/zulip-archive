[
    {
        "content": "<p>On the current course, when the wasm tail-call feature is standardized, we'll loose the ability to pass a wasm function pointer to native Rust or C code.</p>",
        "id": 188259985,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1581725645
    },
    {
        "content": "<p>Because the tail-call feature is incompatible with the native calling conventions on Linux and Windows</p>",
        "id": 188260026,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1581725691
    },
    {
        "content": "<p>and Mac</p>",
        "id": 188260030,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1581725696
    },
    {
        "content": "<p>And the current proposal will require all exported functions to be compatible with the tail-call feature.</p>",
        "id": 188260049,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1581725725
    },
    {
        "content": "<p>Currently exported functions are also compatible with the JS ABI (for a lack of better terminology) but that doesn't stop wasm from optimizing calls to those functions when they are imported into a wasm module somewhere else.  I'm not really clued into the WASI semantics but could an exported function not have multiple entry points / ABIs, to support this use case properly?  The situation seems analogous to the JS case.</p>",
        "id": 188334255,
        "sender_full_name": "Lars Hansen",
        "timestamp": 1581877606
    },
    {
        "content": "<p>(Hm, my avatar looks like the corona virus, maybe time to update.)</p>",
        "id": 188334262,
        "sender_full_name": "Lars Hansen",
        "timestamp": 1581877637
    },
    {
        "content": "<p>It's more than just multiple entrypoints, because we need to fix up the stack pointer on return. We could do it with a wrapper function though.</p>",
        "id": 188455362,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1582036667
    }
]