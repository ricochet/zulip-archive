[
    {
        "content": "<p>The example for wasmlink with the renderer and the markdown.  In the markdown module the export is </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"render\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$render</span><span class=\"p\">.</span><span class=\"n\">command_export</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with a type of </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$render</span><span class=\"p\">.</span><span class=\"n\">command_export</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>\n<p>In the renderer the import is </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"markdown\"</span><span class=\"w\"> </span><span class=\"s\">\"render\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$renderer</span>::<span class=\"n\">markdown</span>::<span class=\"n\">render</span>::<span class=\"n\">witx_import</span>::<span class=\"n\">h556dc1094c69443f</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">8</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>with a type of </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"p\">(;</span><span class=\"mi\">8</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Why does the import take the result from a param and not a result?.  Is the result a pointer to a block of 2 i64s?</p>",
        "id": 248498604,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628179522
    },
    {
        "content": "<p>I mean the last parameter is that a pointer to 2 i64s that are populated by the markdown module, or is it a pointer to a pointer to 2 i64s and the pointer is supplied by the markdown/linker?</p>",
        "id": 248498741,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628179591
    },
    {
        "content": "<p>Forgot the online tool which is super useful, thanks for that.  I see its the first option</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">      </span><span class=\"cp\">#[link(wasm_import_module = </span><span class=\"s\">\"input\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg_attr(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">, link_name = </span><span class=\"s\">\"hello\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"cp\">#[cfg_attr(not(target_arch = </span><span class=\"s\">\"wasm32\"</span><span class=\"cp\">), link_name = </span><span class=\"s\">\"input_hello\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">fn</span> <span class=\"nf\">witx_import</span><span class=\"p\">(</span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">_</span>: <span class=\"kt\">i32</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"n\">witx_import</span><span class=\"p\">(</span><span class=\"n\">ptr0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">ptr1</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">len2</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">usize</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"nb\">String</span>::<span class=\"n\">from_utf8</span><span class=\"p\">(</span><span class=\"nb\">Vec</span>::<span class=\"n\">from_raw_parts</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">((</span><span class=\"n\">ptr1</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len2</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">len2</span><span class=\"p\">)).</span><span class=\"n\">unwrap</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">RET_AREA</span>: <span class=\"p\">[</span><span class=\"kt\">i64</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"p\">];</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 248499672,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628180078
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"395878\">@Scott Waye</span>. wasmlink is expecting the canonical ABI that witx-bindgen uses for its imports and exports. For functions that return \"multiple values\" (i.e. anything that can't fit in a single wasm value type, which a list is considered to be because it returns a pointer-length pair), the importer (caller) passes in an additional argument that is a pointer to an array of 64-bit values and the exporter (callee) returns a pointer to an array of 64-bit values of the same length.  This facilitates the adapter code that sits between the caller and callee as it does not need to explicitly allocate any space in either linear memory; the code generated by witx-bindgen handles allocating the return value space and the code generated by wasmlink ensures that what's returned by the callee is marshaled correctly to the caller.</p>",
        "id": 248505937,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628183024
    },
    {
        "content": "<p>and the utf8 array, is that memcpy'ed between the 2?</p>",
        "id": 248506317,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628183175
    },
    {
        "content": "<p>no wait, scrap that.</p>",
        "id": 248506390,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628183206
    },
    {
        "content": "<p>yes, the adapter code that wasmlink generates calls into each module to allocate space from their linear memories and uses <code>memory.copy</code> instructions to memcpy the memory between the two linear memories</p>",
        "id": 248506406,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628183216
    },
    {
        "content": "<p>ah, ok, that's why it needs canonical_abi_realloc (which I'll need to create on the c# side)</p>",
        "id": 248506462,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628183247
    },
    {
        "content": "<p>that's right</p>",
        "id": 248506479,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628183254
    },
    {
        "content": "<p>thanks</p>",
        "id": 248506510,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628183273
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"395878\">Scott Waye</span> has marked this topic as resolved.</p>",
        "id": 248506519,
        "sender_full_name": "Notification Bot",
        "timestamp": 1628183280
    },
    {
        "content": "<p>one thing to note is that there'll be a bit more churn on the ABI before this is all fully stabilized. For example, we already know that the way short reads/writes are facilitated will change a bit, from the push/pull buffers right now to a streams based interface. We're aiming to wrap this phase of churn up as quickly as we can, though</p>",
        "id": 248511067,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1628185447
    },
    {
        "content": "<p>thanks, no problem, I'm just playing.  wasmlink is completing without errors so made some progress.</p>",
        "id": 248511223,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628185552
    },
    {
        "content": "<p>Thanks for the help.  I've successfully started with a dotnet string, sent it to rust, reversed it, and passed it back.  Ship it!<br>\n<a href=\"/user_uploads/15107/tGT5OW07i8zvNLmJAuOapcxl/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/tGT5OW07i8zvNLmJAuOapcxl/image.png\" title=\"image.png\"><img src=\"/user_uploads/15107/tGT5OW07i8zvNLmJAuOapcxl/image.png\"></a></div>",
        "id": 248548724,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628204983
    },
    {
        "content": "<p>super cool work! :)</p>",
        "id": 248548831,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628205053
    },
    {
        "content": "<p>is this using mono to target wasm?</p>",
        "id": 248548850,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628205075
    },
    {
        "content": "<p>No, this is NativeAOT-LLVM</p>",
        "id": 248548971,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628205161
    },
    {
        "content": "<p>ah, nice</p>",
        "id": 248548982,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628205172
    },
    {
        "content": "<p>Its an experimental backend to <a href=\"https://github.com/dotnet/runtimelab/tree/feature/NativeAOT\">https://github.com/dotnet/runtimelab/tree/feature/NativeAOT</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/tree/feature/NativeAOT\" style=\"background-image: url(https://opengraph.githubassets.com/9fa31e1c8469e95ead01493ed228c0497505955389e28aa9d53306e817af1400/dotnet/runtimelab)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/tree/feature/NativeAOT\" title=\"GitHub - dotnet/runtimelab at feature/NativeAOT\">GitHub - dotnet/runtimelab at feature/NativeAOT</a></div><div class=\"message_embed_description\">This repo is for experimentation and exploring new ideas that may or may not make it into the main dotnet/runtime repo. - GitHub - dotnet/runtimelab at feature/NativeAOT</div></div></div>",
        "id": 248549020,
        "sender_full_name": "Scott Waye",
        "timestamp": 1628205197
    },
    {
        "content": "<p>as a fan of C# myself, it's really exciting to see work in this space</p>",
        "id": 248549250,
        "sender_full_name": "Peter Huene",
        "timestamp": 1628205358
    }
]