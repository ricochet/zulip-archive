[
    {
        "content": "<p>I'm wondering if it's possible for there to be unbounded operand stack usage within WebAssembly code.<br>\nClosest I could think is loops, which doesn't exactly happen:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">func</span>\n  <span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">5</span>\n    <span class=\"nb\">br</span> <span class=\"mi\">0</span>\n  <span class=\"k\">end</span>\n  <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The above example will implicitly pop the <code>5</code> before branching.</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">func</span>\n  <span class=\"nb\">i32.const</span> <span class=\"mi\">6</span>\n  <span class=\"k\">loop</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">5</span>\n    <span class=\"nb\">br</span> <span class=\"mi\">0</span>\n  <span class=\"k\">end</span>\n  <span class=\"nb\">unreachable</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>The above example will implicitly copy the <code>5</code> before branching, and pop the <code>6</code>. (making the stack look like <code>6 5</code> on the first loop, then <code>5 5</code> on all subsequent branches)<br>\nI'm wondering if there's any edge-cases where unbounded stack usage can happen.<br>\nBy unbounded, I don't include recursion. I mean unbounded with respect to the current call frame (not including any sub-calls' frames)</p>",
        "id": 291671278,
        "sender_full_name": "James",
        "timestamp": 1659422900
    },
    {
        "content": "<p>No, stack space is bounded. I was hoping it would be a consequence of the <a href=\"https://webassembly.github.io/spec/core/appendix/properties.html#theorems\">soundness theorem</a>, but I don't see an obvious way to get it. Instead, you can argue as follows:</p>\n<ol>\n<li>Suppose there is an execution of a function which consumes unbounded stack space. Then it must go through infinitely many configurations and execute infinitely many instructions.</li>\n<li>There are a finite number of labels in the execution of a given function. This isn't obvious from the WASM specification, but it follows because there are a finite number of continuations corresponding to suffixes of the program, and each label is determined by a block type (which is associated to some instruction from the original source, so finite) and a continuation.</li>\n<li>Without loops, the program would halt, so the <code>loop</code> instruction must be used, and in particular one of the finitely many labels must be traversed infinitely many times (and with different configurations, because otherwise the whole program would recur and not use unbounded memory).</li>\n<li>The loop starts with this operation:</li>\n</ol>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>F</mi><mo separator=\"true\">;</mo><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow><mo>↪</mo><mi>F</mi><mo separator=\"true\">;</mo><msub><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">b</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mi>m</mi></msub><mo stretchy=\"false\">{</mo><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow><mo stretchy=\"false\">}</mo><mtext> </mtext><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow></mrow><annotation encoding=\"application/x-tex\">F; \\mathit{val}^m~\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end} \\hookrightarrow\n  F; \\mathsf{label}_m\\{\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end}\\}~\\mathit{val}^m~\\mathit{instr}^\\ast~\\mathsf{end}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9432em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7387em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">;</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">label</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7387em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span><span class=\"mclose\">}</span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7387em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span></span></span></span></span></p>\n<p>and the label blocks the stack below it until it is jumped to in this operation:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">b</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mi>m</mi></msub><mo stretchy=\"false\">{</mo><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow><mo stretchy=\"false\">}</mo><mtext> </mtext><msup><mi>B</mi><mi>l</mi></msup><mo stretchy=\"false\">[</mo><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup><mtext> </mtext><mo stretchy=\"false\">(</mo><mrow><mi mathvariant=\"sans-serif\">b</mi><mi mathvariant=\"sans-serif\">r</mi></mrow><mtext> </mtext><mi>l</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">]</mo><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow><mo>↪</mo><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow></mrow><annotation encoding=\"application/x-tex\">  \\mathsf{label}_m\\{\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end}\\}~B^l[\\mathit{val}^m~(\\mathsf{br}~l)]~\\mathsf{end} \\hookrightarrow \\mathit{val}^m~\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1491em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">label</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7387em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span><span class=\"mclose\">}</span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8991em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathsf\" style=\"margin-right:0.01389em;\">br</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)]</span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">↪</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9432em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7387em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span></span></span></span></span></p>\n<p>But this is a problem, because the state <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathit{val}^m~\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9432em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.734em;\"><span style=\"top:-3.1083em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span></span></span></span> at the end of the second transition is exactly the starting state of the first transition. That means that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is the upper part of the stack, we will always either have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo separator=\"true\">,</mo><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow></mrow><annotation encoding=\"application/x-tex\">S,\\mathit{val}^m~\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9432em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.734em;\"><span style=\"top:-3.1083em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo separator=\"true\">,</mo><msub><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">a</mi><mi mathvariant=\"sans-serif\">b</mi><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">l</mi></mrow><mi>m</mi></msub><mo stretchy=\"false\">{</mo><mrow><mi mathvariant=\"sans-serif\">l</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">o</mi><mi mathvariant=\"sans-serif\">p</mi></mrow><mtext> </mtext><mrow><mi>b</mi><mi>t</mi></mrow><mtext> </mtext><msup><mrow><mi>i</mi><mi>n</mi><mi>s</mi><mi>t</mi><mi>r</mi></mrow><mo>∗</mo></msup><mtext> </mtext><mrow><mi mathvariant=\"sans-serif\">e</mi><mi mathvariant=\"sans-serif\">n</mi><mi mathvariant=\"sans-serif\">d</mi></mrow><mo stretchy=\"false\">}</mo><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">S,\\mathsf{label}_m\\{\\mathsf{loop}~\\mathit{bt}~\\mathit{instr}^\\ast~\\mathsf{end}\\},\\dots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathsf\">label</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathsf\">loop</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathit\">bt</span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">instr</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.734em;\"><span style=\"top:-3.1083em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace nobreak\"> </span><span class=\"mord\"><span class=\"mord mathsf\">end</span></span><span class=\"mclose\">}</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"minner\">…</span></span></span></span> in this loop, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is fixed and inaccessible. So we can't get an infinite number of different stack shapes; the only state we have to work with is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow><mi>v</mi><mi>a</mi><mi>l</mi></mrow><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathit{val}^m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7487em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathit\">val</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7487em;\"><span style=\"top:-3.1473em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">m</span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is predetermined from the block type of the loop label.</p>",
        "id": 291679919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659429173
    },
    {
        "content": "<p>An alternative proof is: it's intended to run on regular hardware via standard compiler analyses, so of course the size of the stack frame is statically determinable, else the spec would be broken.</p>",
        "id": 291680194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659429327
    },
    {
        "content": "<p>Thanks. Yeah, I realized that it would be pretty much impossible to determine the stack's validity with respect to its operands, if it were able to use unbounded space, since the only real operations where that could happen would likely have to be dependent on the value of the operand put in, which is not allowed by the spec--WASM instructions can be dependent on the stack's current type, but not dependent on values within the stack (this would end up having more of a... dependent type system which would be kind of infeasible to check in the general case within a reasonable amount of time and with a reasonable amount of simplicity).</p>",
        "id": 291789419,
        "sender_full_name": "James",
        "timestamp": 1659489334
    }
]