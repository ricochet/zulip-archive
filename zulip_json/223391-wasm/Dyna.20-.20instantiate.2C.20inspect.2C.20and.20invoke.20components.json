[
    {
        "content": "<p>I'd like to introduce a new project I'm working on: <a href=\"https://github.com/rylev/dyna\">dyna</a></p>\n<p>Dyna is a way to instantiate, inspect, and invoke components from within a component. If you'd like to interact with a component but can't/don't want to statically link components (using some tool like wac/wasm-tools compose), this might be the right tool for you. Here's what some Rust code looks like for calling a component (remember this code is itself running as Wasm):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// Read a component from disk</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component_bytes</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">std</span>::<span class=\"n\">fs</span>::<span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s\">\"some_component.wasm\"</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// Create a component engine and load the component</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Engine</span>::<span class=\"n\">new</span><span class=\"p\">();</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">engine</span><span class=\"p\">.</span><span class=\"n\">load_component</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">component_bytes</span><span class=\"p\">).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"c1\">// Reflect on the component to gain insight into its exports</span>\n<span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">wit</span><span class=\"p\">().</span><span class=\"n\">exports</span><span class=\"p\">().</span><span class=\"n\">iter</span><span class=\"p\">().</span><span class=\"n\">any</span><span class=\"p\">(</span><span class=\"o\">|</span><span class=\"n\">e</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"hello-world\"</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span>\n<span class=\"w\">        </span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">e</span><span class=\"p\">.</span><span class=\"n\">kind</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">Export</span>::<span class=\"n\">Function</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">f</span><span class=\"p\">.</span><span class=\"n\">params</span><span class=\"p\">.</span><span class=\"n\">is_empty</span><span class=\"p\">())</span>\n<span class=\"w\">    </span><span class=\"p\">})</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"c1\">// Call a component export and inspect its return value</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">val</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"p\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s\">\"hello-world\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[]).</span><span class=\"n\">unwrap</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"fm\">assert!</span><span class=\"p\">(</span><span class=\"fm\">matches!</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">val</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"n\">Val</span>::<span class=\"nb\">String</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"o\">==</span><span class=\"w\"> </span><span class=\"s\">\"Hello, World!\"</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Let me know what you think!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rylev/dyna\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f8c363bd1a2c2e17349425fc81a9af137187ff14\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353036336630333939653137343630613134313235313938623861316531313333343130303837333633653339626661393832383534366334313039326465342f72796c65762f64796e61)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rylev/dyna\" title=\"GitHub - rylev/dyna: Instantiate, inspect, and invoke Wasm components from within a component.\">GitHub - rylev/dyna: Instantiate, inspect, and invoke Wasm components from within a component.</a></div><div class=\"message_embed_description\">Instantiate, inspect, and invoke Wasm components from within a component. - rylev/dyna</div></div></div>",
        "id": 425091810,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1709733475
    },
    {
        "content": "<p>Can you link the target component against yourself like <code>dlopen</code> with this?</p>",
        "id": 425132921,
        "sender_full_name": "bjorn3",
        "timestamp": 1709743743
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> can you explain a bit more? What is \"yourself\" in this case?</p>",
        "id": 425136029,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1709744610
    },
    {
        "content": "<blockquote>\n<p>What is \"yourself\" in this case?</p>\n</blockquote>\n<p>The component which uses dyna to load another component.</p>",
        "id": 425136165,
        "sender_full_name": "bjorn3",
        "timestamp": 1709744650
    },
    {
        "content": "<p>Still not sure if I fully understand the question, but <code>dyna</code> is indeed like a <code>dlopen</code> for components.</p>",
        "id": 425136500,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1709744761
    },
    {
        "content": "<p>Is it possible for the component using dyna to allow the dynamically loaded component to access all exports of the component that uses dyna?</p>",
        "id": 425136972,
        "sender_full_name": "bjorn3",
        "timestamp": 1709744885
    },
    {
        "content": "<p>So component A loads component B and component B is given permission to call an export of component A.</p>",
        "id": 425137101,
        "sender_full_name": "bjorn3",
        "timestamp": 1709744931
    },
    {
        "content": "<p>Hmm... that's not currently possible, but I think it should be possible to add. Right now component B uses an entirely different engine, store, and linker from component A, but this doesn't need to be the case.</p>",
        "id": 425137359,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1709745006
    },
    {
        "content": "<p>I guess the thing that I'm not sure would work is making the instance of component A the same in both cases. This should be easy to do with two instances of component A</p>",
        "id": 425138244,
        "sender_full_name": "Ryan Levick (rylev)",
        "timestamp": 1709745266
    },
    {
        "content": "<p>This looks really interesting!  Specifically I'd be really curious to think about it from the perspective of managing registry dependencies.  Right now most components are specifying their imports as instances, with the thought being that build steps will handle importing the components, instantiating and then providing those instances as specified in the original imports.  So will be cool to think about what happens if these \"packages\" are actually specifying that they want components themselves because they have an opinion about how they're instantiated.</p>",
        "id": 425143493,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1709746968
    }
]