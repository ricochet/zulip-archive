[
    {
        "content": "<p>I'm curious to learn how to write \"raw\"/direct WebAssembly via Rust code (that would target WASI). I found <a href=\"https://crates.io/crates/wasm-encoder\">https://crates.io/crates/wasm-encoder</a> , but it talks about the various sections of a <code>.wasm</code> file w/o explaining the various sections of the file. Is there a tutorial or something like the Rust Book for WebAssembly itself? The best I can find is <a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format\">https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format</a> , but even that doesn't directly talk about things in the example given by wasm-encoder.</p>\n<p>Or is the spec the only way to learn what I'm after?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d1458923d9e958200387f84e96afd92a33caed8b/68747470733a2f2f646576656c6f7065722e6d6f7a696c6c612e6f72672f6d646e2d736f6369616c2d73686172652e63643663346135612e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://developer.mozilla.org/en-US/docs/WebAssembly/Understanding_the_text_format\" title=\"Understanding WebAssembly text format - WebAssembly | MDN\">Understanding WebAssembly text format - WebAssembly | MDN</a></div><div class=\"message_embed_description\">This finishes our high-level tour of the major components of the WebAssembly text format and how they get reflected in the WebAssembly JS API.</div></div></div>",
        "id": 449130980,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1720112143
    },
    {
        "content": "<p>A friend recently told me they enjoyed this book <a href=\"https://wasmgroundup.com/\">https://wasmgroundup.com/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://wasmgroundup.com/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/c6571db61414bae16bce6d4de3f2f19787ef155b/68747470733a2f2f7761736d67726f756e6475702e636f6d2f696d672f6f672d696d6167652d6c617267652e706e673f31&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://wasmgroundup.com/\" title=\"WebAssembly from the Ground Up\">WebAssembly from the Ground Up</a></div><div class=\"message_embed_description\">A book about WebAssembly — from hand crafting bytecodes to a real compiler for a simple programming language.</div></div></div>",
        "id": 449133470,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1720112970
    },
    {
        "content": "<p>I don't think it covers the Component Model though</p>",
        "id": 449133548,
        "sender_full_name": "Daniel Macovei",
        "timestamp": 1720112997
    },
    {
        "content": "<p>I'd recommend reading over the core wasm spec yeah. You might find <code>wasm-tools dump</code> on small files useful to help account for all the bytes in the file (it's pretty verbose output though). The <code>wasm-encoder</code> crate definitely requires background knowledge of the wasm format itself to be useful, it's not written to be a friendly starter crate for sure</p>",
        "id": 449882703,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1720448288
    },
    {
        "content": "<p>I'm starting to think targeting WAT isn't a bad idea; I can use <code>wat</code> to then compile to the binary format.</p>",
        "id": 449945892,
        "sender_full_name": "Brett Cannon",
        "timestamp": 1720462434
    },
    {
        "content": "<p>Just in case you haven't seen it, <a href=\"https://github.com/rustwasm/walrus\"><code>walrus</code></a> is great for slicing and dicing/transforming modules.</p>\n<p>In particular you might benefit from <a href=\"https://github.com/rustwasm/walrus/blob/main/examples/build-wasm-from-scratch.rs\">https://github.com/rustwasm/walrus/blob/main/examples/build-wasm-from-scratch.rs</a> , though it's working with a module rather than a component, you <em>could</em> adapt to get where you need to be.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/walrus\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/27b73956a958e381a5a4c90e4f26700771079c2d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633936363662313737643762626339386638633134623231653532343037396162653834613839313238663036313635346163323931613061356335366439332f727573747761736d2f77616c727573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/walrus\" title=\"GitHub - rustwasm/walrus: Walrus is a WebAssembly transformation library 🌊🐘\">GitHub - rustwasm/walrus: Walrus is a WebAssembly transformation library 🌊🐘</a></div><div class=\"message_embed_description\">Walrus is a WebAssembly transformation library 🌊🐘. Contribute to rustwasm/walrus development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rustwasm/walrus/blob/main/examples/build-wasm-from-scratch.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/27b73956a958e381a5a4c90e4f26700771079c2d/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633936363662313737643762626339386638633134623231653532343037396162653834613839313238663036313635346163323931613061356335366439332f727573747761736d2f77616c727573&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rustwasm/walrus/blob/main/examples/build-wasm-from-scratch.rs\" title=\"walrus/examples/build-wasm-from-scratch.rs at main · rustwasm/walrus\">walrus/examples/build-wasm-from-scratch.rs at main · rustwasm/walrus</a></div><div class=\"message_embed_description\">Walrus is a WebAssembly transformation library 🌊🐘. Contribute to rustwasm/walrus development by creating an account on GitHub.</div></div></div>",
        "id": 450203266,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1720539233
    }
]