[
    {
        "content": "<p>I was looking for good <code>global_allocator</code> replacements, for use in Rust code compiled to wasm. Wee-alloc seems to optimize for its own code size, and not for performance. Are there any other known good replacements that would be usable in Rust targeting wasm?</p>",
        "id": 269293595,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1643132325
    },
    {
        "content": "<p>There are crates for tcmalloc / mimalloc crates on <a href=\"http://crates.io\">crates.io</a>, which are all bindings to the C implementation, so that doesn't seem to be viable when compiling to wasm.</p>",
        "id": 269293666,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1643132364
    },
    {
        "content": "<p><a href=\"https://crates.io/crates/dlmalloc\">dlmalloc</a> is the other major one I know about.</p>",
        "id": 269293697,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1643132378
    },
    {
        "content": "<p>Thanks, I'll try that!</p>",
        "id": 269294242,
        "sender_full_name": "Benjamin Bouvier",
        "timestamp": 1643132572
    },
    {
        "content": "<p>I believe though the Rust-default allocator is dlmalloc, so using the crate manually probably won't have much of an impact</p>",
        "id": 269296049,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643133240
    },
    {
        "content": "<p>I'm not actually personally aware of any compiled-to-wasm allocators other than dlmalloc and wee_alloc at the moment</p>",
        "id": 269296116,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1643133253
    },
    {
        "content": "<p>emscripten has a couple too, but it might be a bit of a build nightmare linking them into Rust</p>",
        "id": 269444658,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1643216340
    },
    {
        "content": "<p>I had dreams of making a <code>wee_alloc</code> 2.0 that actually had decent performance, rather than just really good code size, and wrote <a href=\"https://github.com/fitzgen/intrusive_splay_tree\">https://github.com/fitzgen/intrusive_splay_tree</a> towards that goal, but then never actually wrote an allocator using that. <span class=\"user-mention\" data-user-id=\"254393\">@Benjamin Bouvier</span> maybe you can pick up the torch :)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fitzgen/intrusive_splay_tree\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/bedc3a6ab546ee7d066c88c798d79ebe28a84398\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346666656639643966373631646132623439643239656262386131323139666130366535333064626439393936373839343732646536373663326365633232322f6669747a67656e2f696e747275736976655f73706c61795f74726565)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fitzgen/intrusive_splay_tree\" title=\"GitHub - fitzgen/intrusive_splay_tree: An intrusive splay tree implementation that is no-std compatible and free from allocation and moves\">GitHub - fitzgen/intrusive_splay_tree: An intrusive splay tree implementation that is no-std compatible and free from allocation and moves</a></div><div class=\"message_embed_description\">An intrusive splay tree implementation that is no-std compatible and free from allocation and moves - GitHub - fitzgen/intrusive_splay_tree: An intrusive splay tree implementation that is no-std co...</div></div></div>",
        "id": 269444964,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1643216431
    },
    {
        "content": "<p><a href=\"https://github.com/wingo/walloc\">https://github.com/wingo/walloc</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/wingo/walloc\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7ed186dcbd0d48f751be5c75ff2030ce9e0324db\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353664393032666234303439303631626663643361663038373563323063646331616163656336646631656234633634303039356339653633346330663136302f77696e676f2f77616c6c6f63)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/wingo/walloc\" title=\"GitHub - wingo/walloc: A small malloc implementation, for use in WebAssembly\">GitHub - wingo/walloc: A small malloc implementation, for use in WebAssembly</a></div><div class=\"message_embed_description\">A small malloc implementation, for use in WebAssembly - GitHub - wingo/walloc: A small malloc implementation, for use in WebAssembly</div></div></div>",
        "id": 269445086,
        "sender_full_name": "Stephan Renatus",
        "timestamp": 1643216489
    },
    {
        "content": "<p>ah yes I forgot about that one. I think it is also aimed at small code size, rather than performance, so might not be what bnjbvr is looking for</p>",
        "id": 269445164,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1643216520
    },
    {
        "content": "<p>also not a crate. sorry, just a tangent.</p>",
        "id": 269446311,
        "sender_full_name": "Stephan Renatus",
        "timestamp": 1643216950
    },
    {
        "content": "<p>I have had the same concerns. I think allocation-heavy workloads suffer quite a lot at the moment.</p>\n<p><a href=\"https://github.com/microsoft/mimalloc\">mimalloc</a> is pretty small, has good performance and actually supports wasm!<br>\nI don't think the current mimalloc wrapper crates support it though, so there's probably some build/linking tinkgering required.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/mimalloc\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d914adda78b3566c7aa862cbe2e9bea235ff99fb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f636665633135663738363934643466643630663132326430353931313866353761363730656338303463616333633662343363353935373361393734336232372f6d6963726f736f66742f6d696d616c6c6f63)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/mimalloc\" title=\"GitHub - microsoft/mimalloc: mimalloc is a compact general purpose allocator with excellent performance.\">GitHub - microsoft/mimalloc: mimalloc is a compact general purpose allocator with excellent performance.</a></div><div class=\"message_embed_description\">mimalloc is a compact general purpose allocator with excellent performance. - GitHub - microsoft/mimalloc: mimalloc is a compact general purpose allocator with excellent performance.</div></div></div>",
        "id": 275846739,
        "sender_full_name": "theduke",
        "timestamp": 1647629385
    }
]