[
    {
        "content": "<p>I've been trying to figure out how to run some javascript code in a .Net app written in C#, using WebAssembly, but I'm coming up empty.  If anyone has any links to guidance on how to get this working, I would greatly appreciate it.  The why is that we have some javascript code that is used by many frontend apps, and we would love to be able to use that same code from C#.  The alternative is a rather lengthy rewrite of the entire functionality in C#.</p>",
        "id": 348806498,
        "sender_full_name": "Tim Hardy",
        "timestamp": 1681324506
    },
    {
        "content": "<p>While I certainly don't want to discourage you from using wasm, you will probably find it easier to use a JS engine like <a href=\"https://github.com/microsoft/ClearScript\">https://github.com/microsoft/ClearScript</a> in the short term</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/microsoft/ClearScript\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/0d11576bef4b2259dffa95eb73dd1b22d66217a3\\/68747470733a2f2f7265706f7369746f72792d696d616765732e67697468756275736572636f6e74656e742e636f6d2f39303235383336372f61343837636630302d356566652d313165622d386533352d613835646531373365356238)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/microsoft/ClearScript\" title=\"GitHub - microsoft/ClearScript: A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows).\">GitHub - microsoft/ClearScript: A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows).</a></div><div class=\"message_embed_description\">A library for adding scripting to .NET applications. Supports V8 (Windows, Linux, macOS) and JScript/VBScript (Windows). - GitHub - microsoft/ClearScript: A library for adding scripting to .NET app...</div></div></div>",
        "id": 348807959,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681324951
    },
    {
        "content": "<p>Indeed you should even be able to run Wasm inside ClearScript with the V8 engine <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 348808204,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681325026
    },
    {
        "content": "<p>Perhaps look into <a href=\"https://www.nuget.org/packages/Wasmtime\">https://www.nuget.org/packages/Wasmtime</a> to run the wasm from within dotnet. I'm also working in C#, may I ask which type of js code it is that you're looking to run? Personally have been thinking about a shared form data validation wasm lib.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.nuget.org/packages/Wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/dbef038986c4c841099ccc11f724502c43a281eb\\/68747470733a2f2f6e756765742e6f72672f436f6e74656e742f67616c6c6572792f696d672f64656661756c742d7061636b6167652d69636f6e2d323536783235362e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.nuget.org/packages/Wasmtime\" title=\"Wasmtime 7.0.0\">Wasmtime 7.0.0</a></div><div class=\"message_embed_description\">A .NET embedding of Wasmtime.\n\nWasmtime is a standalone runtime for WebAssembly, using the Cranelift JIT compiler.\n\nThe .NET embedding of Wasmtime enables .NET code to instantiate WebAssembly modules and to interact with them in-process.</div></div></div>",
        "id": 349116983,
        "sender_full_name": "Michael Ball",
        "timestamp": 1681393956
    },
    {
        "content": "<p>We have a rules engine we've created that works great on the front-end.  It uses sift.js, an npm package that allows mongo-shell style queries against application state.  The only thing stopping us from implementing the same rules engine in C# is that query language.  We would like to be able to use the exact same mongo query language to query app state in .Net.  I've tried to find a way to leverage the mongoDb drivers against custom objects instead of an actual database to no avail.  This question here is to see if it would be possible to just wholesale port the code we have in Javascript (inluding the sift.js npm package) to use in .Net.  The third option, which is looking like what we will have to do, is to port sift.js into either a C# or F# library that we write ourselves.</p>",
        "id": 349160619,
        "sender_full_name": "Tim Hardy",
        "timestamp": 1681403895
    },
    {
        "content": "<p>There are plenty of examples of how to run wasm from within dotnet.  Where I'm coming up empty is how to get the Javascript into a wasm.</p>",
        "id": 349161660,
        "sender_full_name": "Tim Hardy",
        "timestamp": 1681404172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"609174\">Tim Hardy</span> <a href=\"#narrow/stream/223391-wasm/topic/How.20to.20run.20Javascript.20from.20C.23.20using.20WebAssembly.3F/near/349161660\">said</a>:</p>\n<blockquote>\n<p>Where I'm coming up empty is how to get the Javascript into a wasm.</p>\n</blockquote>\n<p>Does this help? <a href=\"https://www.fermyon.com/wasm-languages/javascript\">https://www.fermyon.com/wasm-languages/javascript</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.fermyon.com/wasm-languages/javascript\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e86750ebf6befd7986644947bdfe5000ae56154d\\/68747470733a2f2f7777772e6665726d796f6e2e636f6d2f7374617469632f696d6167652f7477632d6665726d796f6e2d64656661756c742e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.fermyon.com/wasm-languages/javascript\" title=\"JavaScript in WebAssembly\">JavaScript in WebAssembly</a></div><div class=\"message_embed_description\">JavaScript can be compiled to WebAssembly. There are even multiple implementations of JavaScript WebAssembly runtimes.</div></div></div>",
        "id": 349190199,
        "sender_full_name": "Michael Ball",
        "timestamp": 1681412225
    },
    {
        "content": "<p>Does this help? <a href=\"https://www.fermyon.com/wasm-languages/javascript\">https://www.fermyon.com/wasm-languages/javascript</a></p>\n<p>I will take a look.  Thanks!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://www.fermyon.com/wasm-languages/javascript\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e86750ebf6befd7986644947bdfe5000ae56154d\\/68747470733a2f2f7777772e6665726d796f6e2e636f6d2f7374617469632f696d6167652f7477632d6665726d796f6e2d64656661756c742e6a7067)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://www.fermyon.com/wasm-languages/javascript\" title=\"JavaScript in WebAssembly\">JavaScript in WebAssembly</a></div><div class=\"message_embed_description\">JavaScript can be compiled to WebAssembly. There are even multiple implementations of JavaScript WebAssembly runtimes.</div></div></div>",
        "id": 350050720,
        "sender_full_name": "Tim Hardy",
        "timestamp": 1681508308
    },
    {
        "content": "<p>You can call javascript from c# with the experimental NativeAot-LLVM compiler and something like <a href=\"https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/tests/nativeaot/SmokeTests/HelloWasm/HelloWasm.cs#L3941\">https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/tests/nativeaot/SmokeTests/HelloWasm/HelloWasm.cs#L3941</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/tests/nativeaot/SmokeTests/HelloWasm/HelloWasm.cs#L3941\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/737cb632b59e539cd8e42b0bbfac056dae6b44a5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393165323933396235336332346361636266393530333737313165663562396663333365663336656631376165393661633363626235653539666638303530642f646f746e65742f72756e74696d656c6162)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/dotnet/runtimelab/blob/feature/NativeAOT-LLVM/src/tests/nativeaot/SmokeTests/HelloWasm/HelloWasm.cs#L3941\" title=\"runtimelab/HelloWasm.cs at feature/NativeAOT-LLVM · dotnet/runtimelab\">runtimelab/HelloWasm.cs at feature/NativeAOT-LLVM · dotnet/runtimelab</a></div><div class=\"message_embed_description\">This repo is for experimentation and exploring new ideas that may or may not make it into the main dotnet/runtime repo. - runtimelab/HelloWasm.cs at feature/NativeAOT-LLVM · dotnet/runtimelab</div></div></div>",
        "id": 351040443,
        "sender_full_name": "Scott Waye",
        "timestamp": 1681909180
    }
]