[
    {
        "content": "<p>i'm trying to wrap my head around wasm representation of different structures. how would one define/represent an object definition in wasm?  would that be a module?  or would a module more closely align with the application itself?</p>",
        "id": 350040046,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681503889
    },
    {
        "content": "<p>i.e., is a module an application? or does an application consist of multiple modules linked together? it feels more like the former.</p>",
        "id": 350040138,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681503937
    },
    {
        "content": "<p>In the pre-components world, a WASI \"command\" module is an application</p>",
        "id": 350041003,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681504236
    },
    {
        "content": "<p>There are various ways to link modules together, but nothing really standardized</p>",
        "id": 350041187,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681504315
    },
    {
        "content": "<p>The component model aims to standardize a particular way of linking modules together</p>",
        "id": 350041249,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681504329
    },
    {
        "content": "<p>ok so that sounds like roughly object == module in that sense.  (coming from a jvm background)</p>",
        "id": 350041319,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681504363
    },
    {
        "content": "<p>reading through various wast examples seem to support that.</p>",
        "id": 350041374,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681504383
    },
    {
        "content": "<p>A closer analog for JVM would be a package, probably. There aren't any (native) \"objects\" in wasm</p>",
        "id": 350041568,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681504455
    },
    {
        "content": "<p>maybe via name mangling and paramater passing i can fake out the instance method scenario.</p>",
        "id": 350041644,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681504490
    },
    {
        "content": "<p>yeah.  i've been trying to figure out how to emulate that.</p>",
        "id": 350041693,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681504510
    },
    {
        "content": "<p>There will be \"resource types\" Pretty Soon which are intended to model things like that. In the meantime I think the most common approach has been to represent object references with integer handles that are manually tracked in a table</p>",
        "id": 350041991,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681504645
    },
    {
        "content": "<p>a key distinction between Wasm and the JVM (or other OOP runtimes like .NET) is its memory storage model -- Wasm gives each module a linear store (\"C-style addressed memory\") and the main approach in core Wasm so far has been to put the runtime on top of that</p>",
        "id": 350042043,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681504673
    },
    {
        "content": "<p>e.g. with SpiderMonkey-on-Wasm, JS objects are managed by the usual SpiderMonkey GC, and this lives inside of the module and allocates storage out of the linear address space</p>",
        "id": 350042133,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681504698
    },
    {
        "content": "<p>interesting. like off-heap storage in the jvm.</p>",
        "id": 350042188,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681504727
    },
    {
        "content": "<p>a challenge with a module-is-an-object mapping instead will be that there are no first-class instances; i.e. there's no direct mapping for \"new T\"</p>",
        "id": 350042197,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681504733
    },
    {
        "content": "<p>See for example: <a href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit/types.wit#L76-L93\">https://github.com/WebAssembly/wasi-http/blob/main/wit/types.wit#L76-L93</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit/types.wit#L76-L93\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/9166f15f27d367ebcd353d5ac4d212a8dc3beb14\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336331316461663039633135376633303036373537333430313039643733626635373333303265323831386433353532373633393063626238323462616131302f576562417373656d626c792f776173692d68747470)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-http/blob/main/wit/types.wit#L76-L93\" title=\"wasi-http/types.wit at main · WebAssembly/wasi-http\">wasi-http/types.wit at main · WebAssembly/wasi-http</a></div><div class=\"message_embed_description\">Contribute to WebAssembly/wasi-http development by creating an account on GitHub.</div></div></div>",
        "id": 350042198,
        "sender_full_name": "Lann Martin",
        "timestamp": 1681504733
    },
    {
        "content": "<p>rather the shape of the instance graph is static and fixed as defined in the component</p>",
        "id": 350042232,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1681504744
    },
    {
        "content": "<p>some funky stuff there.  i love it.</p>",
        "id": 350042573,
        "sender_full_name": "Justin Lee",
        "timestamp": 1681504888
    }
]