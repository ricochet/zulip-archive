[
    {
        "content": "<p>As discussed <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3124#discussion_r684605984\">here</a>, depending on the Wasm spec interpreter as a submodule would dramatically increase the checkout size. I propose we create <a href=\"https://github.com/bytecodealliance/wasm-spec-interpreter\">https://github.com/bytecodealliance/wasm-spec-interpreter</a> as a mirror of the interpreter directory found under <a href=\"https://github.com/WebAssembly/spec\">https://github.com/WebAssembly/spec</a>. The additional benefit of this would be to allow for a place to merge in changes from various proposals and stage bug fixes. Thoughts?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3124#discussion_r684605984\" style=\"background-image: url(https://opengraph.githubassets.com/eed2d908dda2cae59f54cd3f983f05d282250471b2c4c50316b73229ab0586e6/bytecodealliance/wasmtime/pull/3124)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3124#discussion_r684605984\" title=\"Fuzz Wasmtime against the official Wasm spec interpreter by abrown · Pull Request #3124 · bytecodealliance/wasmtime\">Fuzz Wasmtime against the official Wasm spec interpreter by abrown · Pull Request #3124 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This change introduces a new fuzz target, differential_spec that compares the outputs of executing the first exported function of a Wasm module in Wasmtime and then in the official Wasm spec interp...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec\" style=\"background-image: url(https://opengraph.githubassets.com/5807f6f1eadfa518fa5e25dfc5bd103c6659d0e3e20dcaddb81a5eb5e46cc4e7/WebAssembly/spec)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec\" title=\"GitHub - WebAssembly/spec: WebAssembly specification, reference interpreter, and test suite.\">GitHub - WebAssembly/spec: WebAssembly specification, reference interpreter, and test suite.</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - GitHub - WebAssembly/spec: WebAssembly specification, reference interpreter, and test suite.</div></div></div>",
        "id": 248882622,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628531152
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"234973\">@Till Schneidereit</span>, <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>, <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 248882690,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628531167
    },
    {
        "content": "<p>This seems like the most reasonable approach to me; alternatives are vendoring into the wasmtime repo  or depending on the whole WebAssembly/spec repo, which as pointed out is quite large. As long as we're going to pull out the subdirectory it makes sense to have a separate repo IMHO</p>",
        "id": 248883026,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628531337
    },
    {
        "content": "<p>that might be the best option, though I find it a bit unfortunate to have to keep a mirror around just because of this one use <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span> </p>\n<p>A potential alternative would be manually do the clone as part of the build script for our use of the interpreter. I'm doing roughly that with SpiderMonkey here: <a href=\"https://github.com/tschneidereit/spidermonkey-wasi-embedding/blob/main/build-engine.sh\">https://github.com/tschneidereit/spidermonkey-wasi-embedding/blob/main/build-engine.sh</a></p>\n<p>The goal here was to make it easy to do local development by just cloning the repo very cheaply (or <a href=\"https://github.com/fastly/js-compute-runtime/tree/main/c-dependencies\">including it as a submodule</a>), but also enabling building from source in situations where you don't want to depend on external binary blobs.</p>\n<p>Not the same situation for sure, but the approach of storing ~ the same information as <code>.gitmodules</code> in a slightly different form, and then manually cloning just that revision (and doing a shallow clone in the case of the interpreter) might work?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/tschneidereit/spidermonkey-wasi-embedding/blob/main/build-engine.sh\" style=\"background-image: url(https://opengraph.githubassets.com/e5b1cbb3586b612479c1f32650e2b892ba4475ef382181949d87207d75d96c0e/tschneidereit/spidermonkey-wasi-embedding)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/tschneidereit/spidermonkey-wasi-embedding/blob/main/build-engine.sh\" title=\"spidermonkey-wasi-embedding/build-engine.sh at main · tschneidereit/spidermonkey-wasi-embedding\">spidermonkey-wasi-embedding/build-engine.sh at main · tschneidereit/spidermonkey-wasi-embedding</a></div><div class=\"message_embed_description\">Contribute to tschneidereit/spidermonkey-wasi-embedding development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fastly/js-compute-runtime/tree/main/c-dependencies\" style=\"background-image: url(https://opengraph.githubassets.com/635128f22a9f4134ac86ed18aa1bce78ac79881c910e1fe12ebd550242d7a185/fastly/js-compute-runtime)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fastly/js-compute-runtime/tree/main/c-dependencies\" title=\"js-compute-runtime/c-dependencies at main · fastly/js-compute-runtime\">js-compute-runtime/c-dependencies at main · fastly/js-compute-runtime</a></div><div class=\"message_embed_description\">JavaScript runtime for Fastly Compute@Edge. Contribute to fastly/js-compute-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 248957689,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1628587934
    },
    {
        "content": "<p>I'm fine with either the mirror or pulling it in the build script. I know <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> has mentioned that a mirror would be nice since we expect to need a place to patch the spec interpreter temporarily as well as a place to merge in various proposals. Does that change the equation?</p>",
        "id": 248999097,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628611512
    },
    {
        "content": "<p>hmm, yeah, that's a good point. Let me think about this a bit and perhaps check in with a couple of folks, but yeah, that might be a solid reason for having our own full mirror</p>",
        "id": 248999779,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1628611886
    },
    {
        "content": "<p>oh, but if we do the mirror thing, then I think it'd be valuable for that mirror to be for the entire repository, not just the interpreter. That'd enable us to do direct PRs against the spec instead of having to hand-craft patches all the time. So perhaps we do both—have a mirror <em>and</em> do the manual checkout in the build script?</p>",
        "id": 249000192,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1628612069
    },
    {
        "content": "<p>ok, I checked in with some folks, and have firmed up my take on this <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>\n<p>I do think having the mirror is good, but also that it should be a full-repo mirror for the above-mentioned reasons. I hope the manual checkout in the build script is viable?</p>\n<p>The one thing we should make sure is to give the repo a name/description that make clear what they are and aren't. Lin pointed out that \"spec\" would make it sound like a BA spec, for example <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> Perhaps something sort of annoying like \"spec-mirror-for-fuzzing\" would make sense?</p>",
        "id": 249007282,
        "sender_full_name": "Till Schneidereit",
        "timestamp": 1628615237
    },
    {
        "content": "<p>How about <code>wasm-spec-mirror</code> with a description like: \"A mirror of <a href=\"https://github.com/WebAssembly/spec\">https://github.com/WebAssembly/spec</a> for fuzzing\"</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/spec\" style=\"background-image: url(https://opengraph.githubassets.com/5807f6f1eadfa518fa5e25dfc5bd103c6659d0e3e20dcaddb81a5eb5e46cc4e7/WebAssembly/spec)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/spec\" title=\"GitHub - WebAssembly/spec: WebAssembly specification, reference interpreter, and test suite.\">GitHub - WebAssembly/spec: WebAssembly specification, reference interpreter, and test suite.</a></div><div class=\"message_embed_description\">WebAssembly specification, reference interpreter, and test suite. - GitHub - WebAssembly/spec: WebAssembly specification, reference interpreter, and test suite.</div></div></div>",
        "id": 249008472,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628615827
    },
    {
        "content": "<p>Actually, wait: we don't need the mirror just yet if we are going to manually checkout the repo... Why not delay creating the repository until it is needed? (E.g. we need to patch it or merge in proposals)</p>",
        "id": 249008703,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628615963
    },
    {
        "content": "<p>The full mirror is not as helpful as a \"just the interpreter\" mirror because it contains all the extra weight that <span class=\"user-mention\" data-user-id=\"264278\">@bjorn3</span> was worried about... another reason to delay making it</p>",
        "id": 249008887,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628616066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> do you have any insights about the timeline of merging the SIMD spec into the main WebAssembly/spec repo? I wasn't able to find anything (open PR or issue for example)</p>",
        "id": 249008963,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628616111
    },
    {
        "content": "<p>that could be a reason to create our \"merged for-fuzzing mirror\" soon</p>",
        "id": 249009013,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1628616124
    },
    {
        "content": "<p>I should have asked that in the latest SIMD meeting but instead I asked when Safari will implement Wasm SIMD (answer: no one knows)</p>",
        "id": 249009425,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628616354
    },
    {
        "content": "<p>so, not really sure</p>",
        "id": 249009485,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628616374
    },
    {
        "content": "<p>I'll just create the mirror and we can figure this out later; sort of want to pop this PR off the stack</p>",
        "id": 249009525,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628616401
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/bytecodealliance/wasm-spec-mirror\">https://github.com/bytecodealliance/wasm-spec-mirror</a> is created and the latest commit on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/3124\">https://github.com/bytecodealliance/wasmtime/pull/3124</a> retrieves the repository, shallowly, in the <code>build.rs</code></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-spec-mirror\" style=\"background-image: url(https://opengraph.githubassets.com/37386ae57d36232f12fd73b3956bae0675d8d6aff59ca64a8cfb4aeaecc0bfd6/bytecodealliance/wasm-spec-mirror)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-spec-mirror\" title=\"GitHub - bytecodealliance/wasm-spec-mirror: Mirror of https://github.com/WebAssembly/spec for fuzzing\">GitHub - bytecodealliance/wasm-spec-mirror: Mirror of https://github.com/WebAssembly/spec for fuzzing</a></div><div class=\"message_embed_description\">Mirror of https://github.com/WebAssembly/spec for fuzzing - GitHub - bytecodealliance/wasm-spec-mirror: Mirror of https://github.com/WebAssembly/spec for fuzzing</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/3124\" style=\"background-image: url(https://opengraph.githubassets.com/644f2210a5dd015d9c61c36f69912f52d0506864997a2ca84c706b4a2225ff95/bytecodealliance/wasmtime/pull/3124)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/3124\" title=\"Fuzz Wasmtime against the official Wasm spec interpreter by abrown · Pull Request #3124 · bytecodealliance/wasmtime\">Fuzz Wasmtime against the official Wasm spec interpreter by abrown · Pull Request #3124 · bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">This change introduces a new fuzz target, differential_spec that compares the outputs of executing the first exported function of a Wasm module in Wasmtime and then in the official Wasm spec interp...</div></div></div>",
        "id": 249015670,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1628619366
    }
]