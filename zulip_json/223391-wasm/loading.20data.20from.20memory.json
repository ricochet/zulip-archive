[
    {
        "content": "<p>Hey all, thanks for the awesome work!</p>\n<p>I have what I <em>think</em> is a quick beginner level question here -- </p>\n<p>Is there a way to access memory from a non-JS, purely Rust context? </p>\n<p>I see <a href=\"https://docs.rs/wasm-bindgen/0.2.87/wasm_bindgen/fn.memory.html\"><code>wasm_bindgen::memory</code></a>, which I can get to give me the buffer, but after the module has been written out, it's failing to find import (ex. <code>unknown import: __wbindgen_placeholder__::__wbindgen_describe</code> has not been defined)</p>\n<p>I'm in a <code>wasm32-unknown-unknown</code> context, but <code>wasm32-wasi</code> would be great to know as well -- how do I just read data into a <code>Vec&lt;u8&gt;</code> from the \"default\" memory module in pure Rust?</p>\n<p>If I drop down and try to do it with WAT (let's say exporting a function that returns the data), it seems like I'd be limited to byte-by-byte reads</p>",
        "id": 370661532,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1688022601
    },
    {
        "content": "<p>If you are referring to Rust in a guest module then \"yes\"; Rust pointers are just offsets into \"normal\" memory. If you can give more detail about what you're looking to do there might be an easier approach.</p>",
        "id": 370775567,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688044015
    },
    {
        "content": "<p><code>wasm-bindgen</code> is only for targeting Wasm on the Web/node/JS hosts, so trying to use any <code>wasm-bindgen</code> stuff on <code>wasm32-wasi</code> and Wasmtime isn't going to work out</p>\n<p>Instead, you should either</p>\n<ul>\n<li>use <code>wit-bindgen</code>, which makes it so that you can't access memory directly, because components are shared-nothing. instead you only communicate via WIT's interfaces and its types</li>\n<li>define a custom ABI to pass around data and make sure that LLVM is exporting your memory so that your custom host code can read from it (typically via <code>wasmtime::Caller::get_export</code>)</li>\n</ul>",
        "id": 370822353,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1688051725
    },
    {
        "content": "<p>Appreciate the responses ya'll!</p>\n<p>Hey <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> thanks -- so what I'm trying to do is read memory in a guest module, from that guest module. Reading the guest module's own attached memory.</p>\n<p>I don't have a pointer yet, per-say -- I have Rust code that is doing wasm things. </p>\n<p>Your suggestion is making me think that actually I just need the start &amp; length of the memory to read it... So basically, I write a function to tell me where the memory starts and how long, then use that from the rust code. Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_main_mem_start</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">get_main_mem_len</span><span class=\"p\">()</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Then in the rust code I can do some <code>unsafe</code> reading of the memory from start?</p>\n<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> thanks for the detail -- at first I'm trying to do this with <code>wasm32-unknown-unknown</code> but I will keep this in mind for the <code>wasm32-wasi</code> attempt. </p>\n<p>I think your second point makes it really clear how I'm not explaining well enough! I'm trying to do <em>all of this from inside the guest</em>. </p>\n<p>Basically, I want to stuff a value into memory inside the guest module (currently, a wasm module, not a preview1/preview2 component), and read it back out, from the guest. </p>\n<p>In practice this starts with \"read data from memory\", inside the Rust module (just pretending like it's there), which I can't find a reasonable way to do just yet.</p>\n<p>Oh and another note, I want to do all this <em>without</em> modifying the <code>WasiCtx</code> at instantiation time. If a guest module has memory in it (which is written into the file itself), it <em>seems</em> like it should be able to read that data without being fed a constructed memory.</p>",
        "id": 370947484,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1688081353
    },
    {
        "content": "<p>Ah, so you are looking to read static data that is preinitialized in the module? The details of that will depend on how you are inserting that external data. You could, for example, initialize data from a file at compile time with e.g. <a href=\"https://doc.rust-lang.org/std/macro.include_bytes.html\">https://doc.rust-lang.org/std/macro.include_bytes.html</a>, and then there would be nothing wasm-specific to do.</p>",
        "id": 370951095,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688083226
    },
    {
        "content": "<p>As far as the byte-by-byte read solution which seemed more straight forward</p>\n<p>Some more code that <em>seems</em> like it would work, but doesn't:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"c1\">// Retrieve the default memory</span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">mem_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">module</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">memories</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">iter</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">next</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">ok_or_else</span><span class=\"p\">(</span><span class=\"o\">||</span><span class=\"w\"> </span><span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"list of memories was unexpectedly empty\"</span><span class=\"p\">))</span><span class=\"o\">?</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">load_fn</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">FunctionBuilder</span>::<span class=\"n\">new</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">types</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ValType</span>::<span class=\"n\">I32</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"p\">[</span><span class=\"n\">ValType</span>::<span class=\"n\">I32</span><span class=\"p\">]);</span>\n<span class=\"w\">    </span><span class=\"n\">load_fn</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">name</span><span class=\"p\">(</span><span class=\"s\">\"load_data\"</span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">())</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">func_body</span><span class=\"p\">()</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">local_get</span><span class=\"p\">(</span><span class=\"n\">read_offset</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"p\">(</span>\n<span class=\"w\">            </span><span class=\"n\">mem_id</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"n\">LoadKind</span>::<span class=\"n\">I32_8</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">kind</span>: <span class=\"nc\">ExtendedLoad</span>::<span class=\"n\">ZeroExtend</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">            </span><span class=\"n\">MemArg</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                </span><span class=\"n\">align</span>: <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">                </span><span class=\"n\">offset</span>: <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"w\">            </span><span class=\"p\">},</span>\n<span class=\"w\">        </span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">load_fn</span><span class=\"p\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"fm\">vec!</span><span class=\"p\">[</span><span class=\"n\">read_offset</span><span class=\"p\">],</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"p\">.</span><span class=\"n\">funcs</span><span class=\"p\">);</span>\n</code></pre></div>\n<p>From the guest, I try to do the following:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">load_data</span><span class=\"p\">(</span><span class=\"n\">offset</span>: <span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kt\">i32</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>When I call that though, wasmtime complains that the import has not been defined, but in the WAT I can see the function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"o\">....</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"env\"</span><span class=\"w\"> </span><span class=\"s\">\"load_data\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$load_data</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">3</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)))</span>\n<span class=\"o\">....</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$</span>#<span class=\"n\">func1498</span><span class=\"o\">&lt;</span><span class=\"n\">load_data</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"o\">@</span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"s\">\"load_data\"</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">1498</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load8_u</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Another thing that's occurring to me is that maybe <code>walrus</code> actually doesn't work on <code>wasm32-unknown-unknown</code> any more? the function naming I see being used (<code>@name</code>, etc) is quite unique compared to the other locally defined functions)</p>",
        "id": 370951284,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1688083305
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"480579\">Lann Martin</span> <a href=\"#narrow/stream/223391-wasm/topic/loading.20data.20from.20memory/near/370951095\">said</a>:</p>\n<blockquote>\n<p>Ah, so you are looking to read static data that is preinitialized in the module? The details of that will depend on how you are inserting that external data. You could, for example, initialize data from a file at compile time with e.g. <a href=\"https://doc.rust-lang.org/std/macro.include_bytes.html\">https://doc.rust-lang.org/std/macro.include_bytes.html</a>, and then there would be nothing wasm-specific to do.</p>\n</blockquote>\n<p>That's the interesting bit! I'm trying to inject this data into the module itself, with <code>walrus</code>. </p>\n<p>I <em>thought</em> the best way to do do this would be to insert a memory section with the data, but multiple memories are not supported just yet, so I'm trying to use the main memory module to do it (IIRC it's empty/waiting to be filled, normally).</p>\n<p>If it was just packing it in on the rust side it would have been trivial, thanks to <code>include_bytes</code> :)</p>\n<p>What I'm finding is that I can't even call an injected function correctly either (since technically I could convert any bunch of bytes into a horrible hacky function which returns each byte as a lookup)...</p>",
        "id": 370951488,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1688083388
    },
    {
        "content": "<p>It should be possible to do that with wasm bulk memory operations, but doing that from Rust is beyond my experience.</p>",
        "id": 370952647,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688083870
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"477605\">@Kyle Brown</span> does something similar in his template generator, but by generating wasm instructions directly.</p>",
        "id": 370952882,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688083979
    },
    {
        "content": "<p><a href=\"https://github.com/Kylebrown9/template-compiler/blob/ed45c5ae3ccfbd20fcd2755e0bcac86866281cf0/src/gen/template.rs#L171\">https://github.com/Kylebrown9/template-compiler/blob/ed45c5ae3ccfbd20fcd2755e0bcac86866281cf0/src/gen/template.rs#L171</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Kylebrown9/template-compiler/blob/ed45c5ae3ccfbd20fcd2755e0bcac86866281cf0/src/gen/template.rs#L171\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8d9c423154aa14adb3c2ef4d2e465c6cc45ab4f1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323835623736386561616536383133343832386164626138316239313031363363376433656266636530343265373236373130353263666264376563653832382f4b796c6562726f776e392f74656d706c6174652d636f6d70696c6572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Kylebrown9/template-compiler/blob/ed45c5ae3ccfbd20fcd2755e0bcac86866281cf0/src/gen/template.rs#L171\" title=\"template-compiler/src/gen/template.rs at ed45c5ae3ccfbd20fcd2755e0bcac86866281cf0 · Kylebrown9/template-compiler\">template-compiler/src/gen/template.rs at ed45c5ae3ccfbd20fcd2755e0bcac86866281cf0 · Kylebrown9/template-compiler</a></div><div class=\"message_embed_description\">Contribute to Kylebrown9/template-compiler development by creating an account on GitHub.</div></div></div>",
        "id": 370953279,
        "sender_full_name": "Lann Martin",
        "timestamp": 1688084128
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"480579\">@Lann Martin</span> thanks for noodling on it a bit! I think I have a path forward and there are so many avenues to try! I just really expected to be able to at least inject a function into the guest module (without instantiation), at the very least -- I'm sure there's something obvious I'm missing here.</p>",
        "id": 370955748,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1688085096
    },
    {
        "content": "<p>For anyone who might be trying to do this -- <span class=\"user-mention\" data-user-id=\"553681\">@Guy Bedford</span> has an excellent example here:</p>\n<p><a href=\"https://github.com/bytecodealliance/WASI-Virt\">https://github.com/bytecodealliance/WASI-Virt</a></p>\n<p>(the original <a href=\"https://github.com/bytecodealliance/WASI-Virt/pull/1/commits/6961bd738f08bf950a06004f668dce9907ad287d\">commit in the PR was a bit more instructive as it's a bit more raw</a>)</p>\n<p>While I ended up hacking my thing together by reserving some space &amp; modifying WAT files, the <em>more right</em> way is basically:</p>\n<ul>\n<li>write guest module code as if things work (you get a pointer to a memory location and parse it unsafely)</li>\n<li>reserve an address on the (<code>static</code> on the rust side Rust)</li>\n<li>expose that address via a callable function (necessarily <code>unsafe</code> -- see <code>get_env_ptr</code> in the raw code)</li>\n<li>write code that loads the guest module and modifies it (i.e. use <code>walrus</code>)</li>\n<li>find the first memory (well, until multiple memories are mainstream)</li>\n<li>get the memory location that the guest module used (that <code>unsafe</code> fn)</li>\n<li>use walrus to add a data segment to the memory w/ a byte slice, padding your data as necessary</li>\n<li>move the stack pointer downwards to make space (i.e. move the amount of bytes you're putting in) </li>\n</ul>\n<p>thanks <span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span> for forwarding this to me as an example!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d783662fad83d79c9044e526effbb4ce6772a42c\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653139343039363238343263616132643238313362306363663732643134653766376537313031613764626230343134623635366631653932623032326231312f62797465636f6465616c6c69616e63652f574153492d56697274)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt\" title=\"GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs\">GitHub - bytecodealliance/WASI-Virt: Virtual implementations of WASI APIs</a></div><div class=\"message_embed_description\">Virtual implementations of WASI APIs. Contribute to bytecodealliance/WASI-Virt development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/WASI-Virt/pull/1/commits/6961bd738f08bf950a06004f668dce9907ad287d\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/507f984c540e99c19cdcbfd41cd6808f00d803c4\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f3539383733303f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/WASI-Virt/pull/1/commits/6961bd738f08bf950a06004f668dce9907ad287d\" title=\"Initial work on env virtualization by guybedford · Pull Request #1 · bytecodealliance/WASI-Virt\">Initial work on env virtualization by guybedford · Pull Request #1 · bytecodealliance/WASI-Virt</a></div><div class=\"message_embed_description\">This implements an initial implementation of env virtualization for WASI Virt. It&#39;s a great first start because it&#39;s a relatively simple API where all the principles should then apply to mo...</div></div></div>",
        "id": 374698050,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1689183741
    },
    {
        "content": "<p>The wasi-virt usecase is slightly different, but the early version of the PR was exactly what I was trying to do. </p>\n<p>The wasi-virt ended up looking quite different (using the \"env\" import directly now, it looks like), but still really impressive/great to look at for understanding</p>",
        "id": 374698294,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1689183809
    },
    {
        "content": "<p>Gonna mark this resolved since there is high quality code that demonstrates this now</p>",
        "id": 374698498,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1689183853
    },
    {
        "content": "<p>JK, can't mark it resolved, if any admins come by this, feel free to mark it resolved!</p>",
        "id": 374698610,
        "sender_full_name": "Victor Adossi",
        "timestamp": 1689183883
    }
]