[
    {
        "content": "<p>I am looking to build up my Wasm research library. Does anyone have a list of favorite Wasm research papers? In particular, I'm interested in isolation of modules/components from each other or the general security stature of Wasm (or runtimes). But curiosity has no bounds</p>",
        "id": 399984597,
        "sender_full_name": "Kate Goldenring",
        "timestamp": 1698943985
    },
    {
        "content": "<p>shameless self-promotion for me but some academic collaborators and I have a paper in ASPLOS'24 about verification in Cranelift, where compiler correctness is load-bearing for Wasm sandboxing: <a href=\"https://cfallin.org/pubs/asplos2024_veri_isle.pdf\">https://cfallin.org/pubs/asplos2024_veri_isle.pdf</a></p>",
        "id": 399985256,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698944218
    },
    {
        "content": "<p>there's also VeriWasm, a static analysis to prove memory isolation (<a href=\"https://cseweb.ucsd.edu/~dstefan/pubs/johnson:2021:veriwasm.pdf\">https://cseweb.ucsd.edu/~dstefan/pubs/johnson:2021:veriwasm.pdf</a>), though I'm currently building a proof-carrying-code mechanism in Wasmtime that subsumes/replaces it</p>",
        "id": 399985450,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1698944284
    },
    {
        "content": "<p>I think I showed you this one already, Kate, but here it is again: <a href=\"https://cseweb.ucsd.edu/~dstefan/pubs/narayan:2023:hfi.pdf\">https://cseweb.ucsd.edu/~dstefan/pubs/narayan:2023:hfi.pdf</a> (a proposed hardware extension for lightweight isolation, with references to prior art).  And, yes, there's Chris Fallin again in the author list :)</p>",
        "id": 399986731,
        "sender_full_name": "Joel Dice",
        "timestamp": 1698944634
    },
    {
        "content": "<p>HFI sounds extremely useful, even beyond Wasm. Any idea how long these sorts of features take to end up in production chips? Or too variable to guess?</p>",
        "id": 400049307,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1698977545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267753\">@Tal Garfinkel</span> might have some insight about that.  See also his WasmCon presentation: <a href=\"https://wasmcon2023.sched.com/event/1PCMa/bridging-the-architecture-divide-how-hardware-limits-wasm-and-how-we-can-do-better-tal-garfinkel-uc-san-diego\">https://wasmcon2023.sched.com/event/1PCMa/bridging-the-architecture-divide-how-hardware-limits-wasm-and-how-we-can-do-better-tal-garfinkel-uc-san-diego</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://wasmcon2023.sched.com/event/1PCMa/bridging-the-architecture-divide-how-hardware-limits-wasm-and-how-we-can-do-better-tal-garfinkel-uc-san-diego\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/8d1af984bb229ef218e961cd286d333d47e00ef1\\/68747470733a2f2f7761736d636f6e323032332e73636865642e636f6d2f696d672f6170702d69636f6e2e706e673f31363939303232323831)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://wasmcon2023.sched.com/event/1PCMa/bridging-the-architecture-divide-how-hardware-limits-wasm-and-how-we-can-do-better-tal-garfinkel-uc-san-diego\" title=\"WasmCon 2023: Bridging the Architecture Divide: How Ha...\">WasmCon 2023: Bridging the Architecture Divide: How Ha...</a></div><div class=\"message_embed_description\">View more about this event at WasmCon 2023</div></div></div>",
        "id": 400146460,
        "sender_full_name": "Joel Dice",
        "timestamp": 1699022280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"470250\">@Jeff Parsons</span> time scale is typically low-order years for new ISA extensions from proposal to first silicon once a CPU vendor decides they want to do it; variability is mostly from the \"convincing them they want to do it\" part (and as one could imagine there's a limited budget for New Stuff in each generation so it has to be important enough etc)</p>",
        "id": 400161614,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1699027010
    },
    {
        "content": "<p>as Tal mentioned, conversations are happening with various folks, but at least I have no idea what the outcome will be; hope for the best, optimize the software in the meantime :-)</p>",
        "id": 400161699,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1699027043
    },
    {
        "content": "<p>Thanks for that link, Joel. I'll watch the presentation when I get a chance.</p>\n<p>And thanks for the extra context, Chris. I can certainly understand that even if it seems obvious from computing trends that something like this is important, there's still a big step from that to \"something like this\" is \"exactly this\", and that it's more urgent than whatever other new features are waiting for their turn.</p>",
        "id": 400216120,
        "sender_full_name": "Jeff Parsons",
        "timestamp": 1699052461
    },
    {
        "content": "<p>on security, I'll suggest a very interesting one by some researchers who categorized bugs in runtimes and then created a fuzzer that mimicked those approaches to discover new bugs in these categories. Very interesting: <a href=\"https://arxiv.org/pdf/2301.12102.pdf\">https://arxiv.org/pdf/2301.12102.pdf</a></p>",
        "id": 401835296,
        "sender_full_name": "Ralph",
        "timestamp": 1699905446
    },
    {
        "content": "<p>Another one is <a href=\"https://www.usenix.org/conference/usenixsecurity22/presentation/bosamiya\">rWasm</a>, which proposes compiling a .wasm binary to a native one with an informal proof of memory safety for the host, simply by transpiling it to safe Rust first. I'm working on a thesis partly based on this :) The paper also describes a formally proven memory safe wasm-to-x86 compiler written in F*.</p>",
        "id": 406727569,
        "sender_full_name": "Leon Thomm",
        "timestamp": 1702030513
    },
    {
        "content": "<p>\"Put Your Memory in Order: Efficient Domain-based Memory Isolation for WASM Applications\" <a href=\"https://dl.acm.org/doi/10.1145/3576915.3623205\">https://dl.acm.org/doi/10.1145/3576915.3623205</a></p>\n<blockquote>\n<p>Our insight is to use MPK hardware for efficient memory protection in WebAssembly [...] Our evaluation shows that \\tool can prevent memory corruption in real projects with a 1.77% average overhead and negligible memory cost.</p>\n</blockquote>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://dl.acm.org/doi/10.1145/3576915.3623205\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/ddcac752e060655e700cd6bef5dfa89e39ffb6ed/68747470733a2f2f646c2e61636d2e6f72672f636d732f61737365742f64633861356363632d343633652d346564652d393164382d3135306632353365323531302f333537363931352e636f7665722e6a7067&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://dl.acm.org/doi/10.1145/3576915.3623205\" title=\"Put Your Memory in Order: Efficient Domain-based Memory Isolation for WASM Applications | Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications Security\">Put Your Memory in Order: Efficient Domain-based Memory Isolation for WASM Applications | Proceedings of the 2023 ACM SIGSAC Conference on Computer and Communications Security</a></div><div class=\"message_embed_description\">Peking University, Beijing, China</div></div></div>",
        "id": 440273964,
        "sender_full_name": "mako yass",
        "timestamp": 1716453479
    },
    {
        "content": "<p>While I find it continually interesting that people fail to understand how security boundaries work in wasm (which is required to understand properly where they do not match your expectations), I generally like this paper, but without an understanding of where it doesn't use MPK as an implementation, I'm much less excited.</p>",
        "id": 440295563,
        "sender_full_name": "Ralph",
        "timestamp": 1716461043
    },
    {
        "content": "<p>for example, <a href=\"https://www.microsoft.com/en-us/research/uploads/prod/2019/05/park-libmpk.pdf\">park-libmpk.pdf (microsoft.com)</a> has also worked over this area outside of wasm</p>",
        "id": 440295619,
        "sender_full_name": "Ralph",
        "timestamp": 1716461059
    },
    {
        "content": "<p>all that said, it would be an amazing contribution to take that paper (imho) and understand how it could be done across architectures. this comment is the one I want to read about more. :-) <code>Alternatives to Intel MPK. Our prototype of PKUWA uses Intel MPK, but the DILM model is not hardware-specific. It works with any memory protection scheme similar to MPK, such as those in ARM, RISC-V, PowerPC, and Itanium CPUs [5, 13, 16, 57].</code></p>",
        "id": 440296597,
        "sender_full_name": "Ralph",
        "timestamp": 1716461461
    },
    {
        "content": "<p>Nothing but admiration for the work! I love these kinds of things.</p>",
        "id": 440296704,
        "sender_full_name": "Ralph",
        "timestamp": 1716461509
    }
]