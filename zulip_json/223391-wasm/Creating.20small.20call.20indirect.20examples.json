[
    {
        "content": "<p>Hi,  I am trying to understand why and where the compiler creates the specific patterns ahead of a call indirect, determining its index<br>\nI analyzed the <a href=\"https://github.com/sola-st/WasmBench\">WasmBench dataset</a> and looked for pattern ahead of a call indirect and it turns out, that there are basically two patterns determining over 87% the index. <br>\nThe first one is the <code>Add Case</code> and the second one the <code>Load Offset Case</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>ADD<span class=\"w\"> </span>CASE\ni32.add\ni32.const\ni32.and\ni32.const\nload<span class=\"w\"> </span>offset\ncall_indirect<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">type</span><span class=\"w\"> </span>x<span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>LOAD<span class=\"w\"> </span>OFFSET<span class=\"w\"> </span>CASE<span class=\"w\"> </span>I\nlocal.get\nload<span class=\"w\"> </span>offset\nlocal.get\nload<span class=\"w\"> </span>offset\ncall_indirect<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">type</span><span class=\"w\"> </span>x<span class=\"o\">)</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>LOAD<span class=\"w\"> </span>OFFSET<span class=\"w\"> </span>CASE<span class=\"w\"> </span>II\nlocal.get\nlocal.get\nload<span class=\"w\"> </span>offset\nload<span class=\"w\"> </span>offset\ncall_indirect<span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nb\">type</span><span class=\"w\"> </span>x<span class=\"o\">)</span>\n</code></pre></div>\n<p>I mainly want to focus on C++ and Rust, as there these patterns occurred the most in the dataset, with the Add Case being dominant withing C++ and the Load Offset Case being dominant within Rust (but both cases occur in both languages).<br>\nI am trying to recreate those patterns by manually writing minimum viable programs. For example if you  <a href=\"https://godbolt.org/z/xqeYK75co\">look at this small C Code</a>. I do so, as i already know that a lot of <code>call_indirects</code> come from libraries, for example in Rust a program with a std lib creates over 76 <code>call_indirects</code>, whereas a #![no_std] program, doesn't.</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>int<span class=\"w\"> </span>add<span class=\"o\">(</span>int<span class=\"w\"> </span>a,<span class=\"w\"> </span>int<span class=\"w\"> </span>b<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span>a+b<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">}</span>\nstatic<span class=\"w\"> </span>int<span class=\"w\"> </span>sub<span class=\"o\">(</span>int<span class=\"w\"> </span>a,<span class=\"w\"> </span>int<span class=\"w\"> </span>b<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span><span class=\"w\"> </span><span class=\"k\">return</span><span class=\"w\"> </span>a-b<span class=\"p\">;</span><span class=\"w\"> </span><span class=\"o\">}</span>\n\nint<span class=\"w\"> </span>main<span class=\"o\">(</span>int<span class=\"w\"> </span>argc<span class=\"o\">)</span><span class=\"w\"> </span><span class=\"o\">{</span>\n<span class=\"w\">    </span>int<span class=\"w\"> </span><span class=\"o\">(</span>*functionPtr<span class=\"o\">)(</span>int,<span class=\"w\"> </span>int<span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"o\">(</span>argc<span class=\"o\">)</span>\n<span class=\"w\">        </span><span class=\"nv\">functionPtr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>add<span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">else</span>\n<span class=\"w\">        </span><span class=\"nv\">functionPtr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>sub<span class=\"p\">;</span>\n\n<span class=\"w\">    </span>int<span class=\"w\"> </span><span class=\"nv\">a</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span>functionPtr<span class=\"o\">(</span><span class=\"m\">2</span>,<span class=\"w\"> </span><span class=\"m\">3</span><span class=\"o\">)</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span>a<span class=\"p\">;</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>This creates a small wat File, that is still readable and has a <code>call_indirect</code> instruction in it, as i want. But it does not yet have one of the patterns above<br>\n It would be nice to know and thus i am asking if anyone knows the section, where the compiler creates these snippets?<br>\nOr could help me manually creating these patterns.</p>\n<p>Thank you in advance, Jannik</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/sola-st/WasmBench\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/caf3c79386092989060f892ac1f440d31acf76a0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653264313431363131663033653837353365633563306231363435316639313962616336343135643734376239653232663930306164613835356462643835612f736f6c612d73742f5761736d42656e6368)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/sola-st/WasmBench\" title=\"GitHub - sola-st/WasmBench: A large dataset of real-world WebAssembly binaries, collected from the Web, GitHub, NPM and other sources. Useful as test data, to study WebAssembly, for training machine learning models, and much more.\">GitHub - sola-st/WasmBench: A large dataset of real-world WebAssembly binaries, collected from the Web, GitHub, NPM and other sources. Useful as test data, to study WebAssembly, for training machine learning models, and much more.</a></div><div class=\"message_embed_description\">A large dataset of real-world WebAssembly binaries, collected from the Web, GitHub, NPM and other sources. Useful as test data, to study WebAssembly, for training machine learning models, and much ...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://godbolt.org/z/xqeYK75co\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4bf336f7597f851df0732b12f8d4b7b383508ec8\\/68747470733a2f2f6769746875622e636f6d2f636f6d70696c65722d6578706c6f7265722f696e6672612f626c6f622f6d61696e2f6c6f676f2f66617669636f6e2e706e673f7261773d74727565)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://godbolt.org/z/xqeYK75co\" title=\"Compiler Explorer - C (WebAssembly clang (trunk))\">Compiler Explorer - C (WebAssembly clang (trunk))</a></div><div class=\"message_embed_description\">int add(int a, int b) { return a+b; }\nstatic int sub(int a, int b) { return a-b; }\n\nint main(int argc) {\n    int (*functionPtr)(int, int);\n    if (argc)\n        functionPtr = add;\n    else\n        functionPtr = sub;\n\n    int a = functionPtr(2, 3);\n    return a;\n}\n</div></div></div>",
        "id": 411276243,
        "sender_full_name": "Jannik Sch√ºtz",
        "timestamp": 1704409886
    }
]