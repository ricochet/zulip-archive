[
    {
        "content": "<p>Hi all! I'm playing with typed funcrefs to see about using them for efficient indirection (ICs); specifically I want globals that are mutable typed non-nullable funcrefs.</p>\n<p>I've hit some perplexing behavior that I can't square with anything I see in the proposal doc; specifically, a <code>ref.func</code> instruction yields an \"undeclared function reference\" error when validated by wasm-tools if the func it refers to is <em>not</em> also used in an init expression for a global or in a table element segment.</p>\n<p>This validates:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$ic</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$ic1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"cp\">$ic</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc1</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$ic2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"cp\">$ic</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc2</span><span class=\"p\">))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"setup\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">ref</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc2</span>\n<span class=\"w\">        </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"cp\">$ic1</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>but this does not:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">module</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"cp\">$ic</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">global</span><span class=\"w\"> </span><span class=\"cp\">$ic1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"w\"> </span><span class=\"cp\">$ic</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">ref</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc1</span><span class=\"p\">))</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc1</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc2</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"w\"> </span><span class=\"kt\">i32</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"setup\"</span><span class=\"p\">)</span>\n<span class=\"w\">        </span><span class=\"k\">ref</span><span class=\"p\">.</span><span class=\"n\">func</span><span class=\"w\"> </span><span class=\"cp\">$icfunc2</span>\n<span class=\"w\">        </span><span class=\"n\">global</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"cp\">$ic1</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>which looks like weird action-at-a-distance to me (removing global <code>$ic2</code> affects validation of a function that doesn't mention it at all). Any thoughts <span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> / <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> / anyone else?</p>\n<p>(validating with latest <code>main</code> of <code>wasm-tools</code>, using <code>wasm-tools validate -f all file.wat</code>)</p>",
        "id": 423060111,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708708633
    },
    {
        "content": "<p>Any function that isn’t exported needs to be in an (elem declare …) element for you to ref.func it</p>",
        "id": 423060385,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708708715
    },
    {
        "content": "<p>Ah yeah this is expected behavior (albeit with a bad error message), this came about with the reference-types proposal</p>",
        "id": 423060397,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708708718
    },
    {
        "content": "<p>IIRC the intention was to enable runtimes to, before the code section has arrived, be able to enumerate functions which could \"escape\" through globals/tables/etc</p>",
        "id": 423060455,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708708741
    },
    {
        "content": "<p>ah, great, I had missed that; thanks!</p>",
        "id": 423060530,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708708767
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254389\">Chris Fallin</span> has marked this topic as resolved.</p>",
        "id": 423060616,
        "sender_full_name": "Notification Bot",
        "timestamp": 1708708801
    },
    {
        "content": "<p>Thanks for working on this <span class=\"user-mention\" data-user-id=\"254389\">@Chris Fallin</span>.  I naively tried to use typed funcrefs in <code>componentize-py</code> before realizing they weren't implemented yet.  I look forward to revisiting that.</p>",
        "id": 423061053,
        "sender_full_name": "Joel Dice",
        "timestamp": 1708708929
    },
    {
        "content": "<p>yup, I had a realization that they are exactly what I want for \"just call a native function pointer with no checks plzkthx\" performance</p>",
        "id": 423061141,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708708964
    },
    {
        "content": "<p>thanks folks (fitzgen I think?) for implementing them :-)</p>",
        "id": 423061174,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708708974
    },
    {
        "content": "<p>Should I take that to mean typed funcrefs already work in recent versions of Wasmtime?  If so, that's awesome.</p>",
        "id": 423061488,
        "sender_full_name": "Joel Dice",
        "timestamp": 1708709058
    },
    {
        "content": "<p>I think that <code>call_ref</code> should work yeah, but I'll also note that the perf isn't quite there yet. Right now <code>call_ref</code> still does the fully general typecheck</p>",
        "id": 423061646,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708709102
    },
    {
        "content": "<p>I don't think we've implemented the optimization where the type information from validation flows directly into translation</p>",
        "id": 423061702,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708709121
    },
    {
        "content": "<p>that's what would enable completely skipping typechecks and such</p>",
        "id": 423061722,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708709128
    },
    {
        "content": "<p>my experiments last night showed a null check still (and there's a comment in <code>visit_call_ref</code> about removing it by threading type info, yeah), but no typecheck?</p>",
        "id": 423061737,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708709134
    },
    {
        "content": "<p>oh I must be misremembering the instruction then, I thought <code>call_ref</code> took a <code>funcref</code> as opposed to a <code>(ref $ty)</code></p>",
        "id": 423061867,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1708709165
    },
    {
        "content": "<p>Does anyone happen to know if typed funcrefs work in Node and/or recent browsers (e.g. if I were to use them in <code>componentize-py</code> and run the result with Jco)?</p>",
        "id": 423061961,
        "sender_full_name": "Joel Dice",
        "timestamp": 1708709195
    },
    {
        "content": "<p><a href=\"https://webassembly.org/features/\">https://webassembly.org/features/</a></p>",
        "id": 423062110,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708709244
    },
    {
        "content": "<p>they're a prereq for GC, so according to that ^^ at least FF and Chrome, but not Safari I guess</p>",
        "id": 423062154,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1708709264
    },
    {
        "content": "<p>it pretty much folded into the gc proposal, and browsers don't generally differentiate at this point</p>",
        "id": 423062247,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1708709287
    }
]