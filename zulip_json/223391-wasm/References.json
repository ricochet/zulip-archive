[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>,  a question about references: if I'm writing Rust and compiling to wasm32 and I want a certain function to be added as an element in a funcref table, what is the cleanest way to do that?</p>",
        "id": 251748257,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1630601960
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> mentioned using the function as a function pointer in some non-dead code... any other way? An attribute of some kind?</p>",
        "id": 251748383,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1630602001
    },
    {
        "content": "<p>it would be cool if there were <code>#[put_in_wasm_function_table]</code> but I kinda suspect there isn't anything like that</p>",
        "id": 251749316,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1630602319
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> there's no programmatic way to do that sort of, but all indirectly-called functions will be there. So if you return a function pointer, for example, in an exported function then that it'll be in the funcref table</p>",
        "id": 251749321,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630602322
    },
    {
        "content": "<p>The second question is how then to export the table? I think the answer is to get the <a href=\"https://lld.llvm.org/WebAssembly.html#cmdoption-export-table\"><code>--export-table</code> flag</a> to lld somehow--what is the best way to do that?</p>",
        "id": 251749672,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1630602448
    },
    {
        "content": "<p>I think it's probably through <code>RUSTFLAGS=-Clink-args=--export-table</code> or something like that</p>",
        "id": 251751396,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1630603099
    }
]