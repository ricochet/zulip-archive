[
    {
        "content": "<p>Are component, function, and module types in the same index space as <code>intertype</code>s?</p>\n<p>Specifically, is it valid (syntactictically? semantically?) for the \"indexed\" version of <code>intertype</code> (<code>intertype ::= i:&lt;typeidx&gt; =&gt; type-index-space[i]</code>) to reference a component/function/module type?</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> <span class=\"user-mention\" data-user-id=\"433534\">@Luke Wagner</span> <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>",
        "id": 271340691,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644437606
    },
    {
        "content": "<p>AFAIK it's all one type index space, yeah, and validation ensures that it's well-formed</p>",
        "id": 271340816,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1644437657
    },
    {
        "content": "<p>or do only the <code>valuetype</code>s/<code>intertype</code>s within a type section correspond to entries in the type index space</p>",
        "id": 271340821,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644437660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/223391-wasm/topic/components.3A.20are.20module.20and.20component.20types.20index.20spaces/near/271340816\">said</a>:</p>\n<blockquote>\n<p>AFAIK it's all one type index space, yeah, and validation ensures that it's well-formed</p>\n</blockquote>\n<p>if that's the case, why have one single, hetergeneous types space instead of multiple homogeneous types spaces (one for component types, one for function types, one for value types, etc)</p>",
        "id": 271340932,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644437718
    },
    {
        "content": "<p>In general, wasm index spaces are heterogeneous in that they contain different types of things and it's validation, not index space, which ensures everything is well-formed.  If anything, it's questionably a design mistake that wasm didn't have just have one big index space for everything.  In the particular case of the type index space, post-MVP wasm proposals are already adding other type constructors (beyond <code>func</code>) to the type section, so we're just following that precedent.</p>",
        "id": 271341745,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1644438143
    },
    {
        "content": "<p>is following that precedent the right choice?</p>",
        "id": 271342151,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644438337
    },
    {
        "content": "<p>I think so</p>",
        "id": 271342973,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1644438708
    },
    {
        "content": "<p>i also think so; to be pedantic, though, <code>intertype</code> aren't in the type index space, only <code>compoundintertype</code> are and the <code>i:&lt;typeidx&gt;</code> variant of <code>intertype</code> must validate to a <code>compoundintertype</code></p>",
        "id": 271344322,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644439338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253989\">Peter Huene</span> <a href=\"#narrow/stream/223391-wasm/topic/components.3A.20are.20module.20and.20component.20types.20index.20spaces/near/271344322\">said</a>:</p>\n<blockquote>\n<p><code>intertype</code> aren't in the type index space</p>\n</blockquote>\n<p>the types section is a <code>vec(type)</code> and we can have <code>type ::= deftype ::= valuetype ::= intertype</code> are we supposed to dynamically validate that this production never occurs?</p>",
        "id": 271344926,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644439628
    },
    {
        "content": "<p>value types aren't the same thing as <code>intertype</code>, just that value types are defined in terms of <code>intertype</code>. nowhere in the grammar can you refer to an <code>intertype</code> by type index, but you can refer to value types by index.</p>",
        "id": 271345296,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644439811
    },
    {
        "content": "<p>(confusingly overloaded name of \"value type\" aside since we have that in many places to mean i32, i64, etc from core wasm)</p>",
        "id": 271345355,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644439851
    },
    {
        "content": "<p>why does the grammar allow type sections to contain non-compound <code>valuetype</code>s if that isn't allowed? seems easy to statically eliminate in the grammar, rather than dynamically in validation</p>",
        "id": 271345645,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644439993
    },
    {
        "content": "<p>it doesn't. the top-level <code>type</code> rule only has the <code>compoundintertype</code> variant</p>",
        "id": 271345707,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440027
    },
    {
        "content": "<p>I see <code>type ::= deftype ::= valuetype</code> as a valid parse, when looking at the grammar</p>",
        "id": 271345822,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440070
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">type</span>              ::<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">dt</span>:<span class=\"o\">&lt;</span><span class=\"n\">deftype</span><span class=\"o\">&gt;</span><span class=\"w\">                               </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">dt</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">cit</span>:<span class=\"o\">&lt;</span><span class=\"n\">compoundintertype</span><span class=\"o\">&gt;</span><span class=\"w\">                    </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">cit</span><span class=\"w\"></span>\n<span class=\"n\">deftype</span><span class=\"w\">           </span>::<span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">mt</span>:<span class=\"o\">&lt;</span><span class=\"n\">moduletype</span><span class=\"o\">&gt;</span><span class=\"w\">                            </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">mt</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ct</span>:<span class=\"o\">&lt;</span><span class=\"n\">componenttype</span><span class=\"o\">&gt;</span><span class=\"w\">                         </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ct</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">it</span>:<span class=\"o\">&lt;</span><span class=\"n\">instancetype</span><span class=\"o\">&gt;</span><span class=\"w\">                          </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">it</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">ft</span>:<span class=\"o\">&lt;</span><span class=\"n\">functype</span><span class=\"o\">&gt;</span><span class=\"w\">                              </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">ft</span><span class=\"w\"></span>\n<span class=\"w\">                    </span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"n\">vt</span>:<span class=\"o\">&lt;</span><span class=\"n\">valuetype</span><span class=\"o\">&gt;</span><span class=\"w\">                             </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"n\">vt</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 271345855,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440097
    },
    {
        "content": "<p>wait now when I refresh, to see if the grammar has changed, the page is gone</p>",
        "id": 271346058,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440180
    },
    {
        "content": "<p>right, you can define value types in the type index space, but i'll reclarify you can't define <code>intertype</code>s</p>",
        "id": 271346063,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440183
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/component-model/blob/ast-and-binary/design/mvp/Binary.md\">https://github.com/WebAssembly/component-model/blob/ast-and-binary/design/mvp/Binary.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/component-model/blob/ast-and-binary/design/mvp/Binary.md\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/00a0490aaf544b0e85ab93a2ffc5eb2536611978\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646134626565623939363363636162353865613663316665383032383631333437613636373930333138646432636335666136616361613264396632333830622f576562417373656d626c792f636f6d706f6e656e742d6d6f64656c)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/component-model/blob/ast-and-binary/design/mvp/Binary.md\" title=\"component-model/Binary.md at ast-and-binary · WebAssembly/component-model\">component-model/Binary.md at ast-and-binary · WebAssembly/component-model</a></div><div class=\"message_embed_description\">Repository for design and specification of the Component Model - component-model/Binary.md at ast-and-binary · WebAssembly/component-model</div></div></div>",
        "id": 271346076,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440189
    },
    {
        "content": "<p>| Are component, function, and module types in the same index space as intertypes?</p>",
        "id": 271346160,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440230
    },
    {
        "content": "<p>from the original question, just pointing out <code>intertype</code> aren't in the index space</p>",
        "id": 271346187,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440244
    },
    {
        "content": "<p>okay, but <code>valuetype ::= intertype</code></p>",
        "id": 271346224,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440258
    },
    {
        "content": "<p>but those aren't intertypes :)</p>",
        "id": 271346252,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440276
    },
    {
        "content": "<p>so are value types in the type index space?</p>",
        "id": 271346312,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440290
    },
    {
        "content": "<p>yes</p>",
        "id": 271346320,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440294
    },
    {
        "content": "<p>are indexed <code>&lt;intertype&gt;</code>s allowed to refer to <code>valuetype</code>s?</p>",
        "id": 271346378,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440333
    },
    {
        "content": "<p>no</p>",
        "id": 271346388,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440342
    },
    {
        "content": "<p>only the indexes in start functions</p>",
        "id": 271346421,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440364
    },
    {
        "content": "<p>refer to value types</p>",
        "id": 271346429,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440369
    },
    {
        "content": "<p>which are why intertype and valuetypes are different semantic things</p>",
        "id": 271346533,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440406
    },
    {
        "content": "<p>this would be so much less confusing if these were different index spaces</p>",
        "id": 271346679,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440459
    },
    {
        "content": "<p>also probably better expressed by <code>=&gt; type-index-space[i] iff: compoundintertype</code> or some such</p>",
        "id": 271346936,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644440576
    },
    {
        "content": "<p>yes that would be very helpful</p>",
        "id": 271347004,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440611
    },
    {
        "content": "<p>I have to create and maintain different index spaces that point into the heterogeneous types index space for <code>wasm-smith</code> to generate valid components, I feel like we might as well just <em>actually</em> have different index spaces</p>",
        "id": 271347149,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440675
    },
    {
        "content": "<p>so much simpler</p>",
        "id": 271347161,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440680
    },
    {
        "content": "<p>the only argument I've heard for not doing it is \"following precedent\" which would make sense if there were no advantages to <em>not</em> following precedent, but that isn't the case here</p>",
        "id": 271347239,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440717
    },
    {
        "content": "<p>FWIW this isn't something new that wasm-smith deals with, the existing module-linking generator should handle this (not that it's pretty, just that it should)</p>",
        "id": 271347278,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1644440738
    },
    {
        "content": "<p>am I missing some other reason why a single heterogeneous type space is good?</p>",
        "id": 271347293,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440745
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"253994\">Alex Crichton</span> <a href=\"#narrow/stream/223391-wasm/topic/components.3A.20are.20module.20and.20component.20types.20index.20spaces/near/271347278\">said</a>:</p>\n<blockquote>\n<p>FWIW this isn't something new that wasm-smith deals with, the existing module-linking generator should handle this (not that it's pretty, just that it should)</p>\n</blockquote>\n<p>yeah and I feel like that isn't great either</p>",
        "id": 271347362,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1644440765
    },
    {
        "content": "<p>i mean there is something to adhering to the core spec in this regard (the core spec currently being type homogeneous notwithstanding) and that each entry in a type section increments the singular type index space (i.e. there's no individual sections for the different types), but then again there exists precedence in both formats  where a section (e.g. imports) doesn't have any index space at all and each entry increments a set of heterogeneous index spaces. i guess that's a long way of saying \"i guess i'm on the fence after all?\"</p>",
        "id": 271351504,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644442951
    },
    {
        "content": "<p>i do agree that perhaps we need a better reason than that's how core does it when core never had more than one type at the start</p>",
        "id": 271351606,
        "sender_full_name": "Peter Huene",
        "timestamp": 1644443010
    }
]