[
    {
        "content": "<p>Does the Global Allocator immediately give back memory to the wasm engine once a deallocation or drop trait is triggered? If not are they any other allocators you can recommend that are more aggressive?</p>",
        "id": 366587902,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1686853063
    },
    {
        "content": "<p>Wasm doesn't have a way to shrink the linear memory again.</p>",
        "id": 366593955,
        "sender_full_name": "bjorn3",
        "timestamp": 1686854499
    },
    {
        "content": "<p>I was thinking more of reuse not shrinking. If I free up a pice of memory can wasm reuse it if it has been freed?</p>",
        "id": 366595264,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1686854793
    },
    {
        "content": "<p>From the host's perspective there are no \"pieces\" of memory smaller than an entire \"linear memory\"</p>",
        "id": 366596016,
        "sender_full_name": "Lann Martin",
        "timestamp": 1686854972
    },
    {
        "content": "<p>I don't believe individual linear memories within a <code>Store</code> can be freed until the entire <code>Store</code> is dropped</p>",
        "id": 366596604,
        "sender_full_name": "Lann Martin",
        "timestamp": 1686855096
    },
    {
        "content": "<p>Okay I think its becoming more clear. I guess my last question would be would be that I see wasm-bindgen has a _wbindgen_malloc for allocation of memory using the alloc in std and _wbidgen_dealloc using dealloc. In this scenario is the dealloc useless since that memory cannot be reused? Thank you for response just trying to understand how this works</p>",
        "id": 366599946,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1686855891
    },
    {
        "content": "<p>Guests control their own allocation <em>within</em> a linear memory. You can definitely free and reuse memory from the guest perspective (assuming the guest allocator supports that), its just that if a new allocation causes the linear memory to grow then no amount of guest <code>free</code>ing will give that growth back to the host</p>",
        "id": 366600570,
        "sender_full_name": "Lann Martin",
        "timestamp": 1686856059
    },
    {
        "content": "<p>I guess I should have clarified I was talking about the guest memory this make sense now, thank you. Is the default rust global allocator good for this?</p>",
        "id": 366601178,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1686856213
    },
    {
        "content": "<p>I believe you'll usually end up with <code>dlmalloc</code> for wasm32 targets. I don't know exactly how it works but I'm sure it reuses free'd memory</p>",
        "id": 366601867,
        "sender_full_name": "Lann Martin",
        "timestamp": 1686856424
    },
    {
        "content": "<p>Awesome I will take a look at the repo. Thank you very much!</p>",
        "id": 366602464,
        "sender_full_name": "Cwasi4wasm",
        "timestamp": 1686856584
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"512603\">Cwasi4wasm</span> has marked this topic as resolved.</p>",
        "id": 366602491,
        "sender_full_name": "Notification Bot",
        "timestamp": 1686856592
    }
]