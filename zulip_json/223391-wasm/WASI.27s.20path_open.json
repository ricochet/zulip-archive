[
    {
        "content": "<p>I am looking at the spec for <code>path_open</code> and I don't see anything regarding whether it resolves symlinks or not when it internally calls <code>open</code>. Node.js doesn't seem to call open with <code>O_FOLLOW</code> and that flag doesn't seem to be checked at all whereas wasmtime and wasmer seem to respect that flag. What is the correct behavior? Am I missing something from the spec?</p>\n<p>Resolution to the host path can resolve symlinks but if you say that it should not follow symlinks then the host path will point e.g. to the symlink itself but then the <code>open</code> call would resolve it. I am not sure what the correct behavior is here.</p>",
        "id": 386607393,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692710585
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/wasi-filesystem/pull/127\">https://github.com/WebAssembly/wasi-filesystem/pull/127</a> is a PR adding documentation about this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-filesystem/pull/127\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ac766f93ac24c3345fa6ec6f949c0f05c7c14f49\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333565366262613064306436656331323032313030613636313432383737303862363736386464323363353238346237616663383831663936393537663666362f576562417373656d626c792f776173692d66696c6573797374656d2f70756c6c2f313237)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-filesystem/pull/127\" title=\"Describe wasi-filesystem's path sandboxing behavior by sunfishcode 路 Pull Request #127 路 WebAssembly/wasi-filesystem\">Describe wasi-filesystem's path sandboxing behavior by sunfishcode 路 Pull Request #127 路 WebAssembly/wasi-filesystem</a></div><div class=\"message_embed_description\">Add a new path-resolution.md document describing CloudABI-style path resolution behavior. wit/types.wit previously had a brief description of this behavior, however this new document presents it in...</div></div></div>",
        "id": 386607817,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1692710727
    },
    {
        "content": "<p>Oh! Interesting, thanks for sharing that</p>",
        "id": 386608015,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692710775
    },
    {
        "content": "<p>So if I understand correctly it means that symlinks in the middle are resolved and the last is not resolved if the last component is a symlink?</p>",
        "id": 386609343,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692711150
    },
    {
        "content": "<p>From the perspective of a user of wasi-filesystem, symlinks are resolved in all positions, just like in Unix.</p>",
        "id": 386609520,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1692711208
    },
    {
        "content": "<p>In the implementation, unless we have optimizations like Linux's <code>RESOLVE_BENEATH</code>, we disable host symlink resolution and do it \"in userspace\" to enforce sandboxing.</p>",
        "id": 386609709,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1692711261
    },
    {
        "content": "<p>Hm interesting, that means that Node.js behaves correctly in that it resolves all symlinks in all components but wasmer doesn't I guess.</p>",
        "id": 386615655,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692712763
    },
    {
        "content": "<p>wasmtime seems to take into account <code>O_NOFOLLOW</code> for the <code>open</code> call whereas Node.js does not.</p>",
        "id": 386619736,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692713718
    },
    {
        "content": "<p>And if you try to open a file with <code>O_NOFOLLOW</code> wasmtime throws with \"symbolic link loop\"</p>",
        "id": 386621078,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714069
    },
    {
        "content": "<p>How do I open a symlink then without resolving it?</p>",
        "id": 386621114,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714078
    },
    {
        "content": "<p>Just using <code>lstat</code> then in C?</p>",
        "id": 386621446,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714169
    },
    {
        "content": "<p>You can't \"open\" a symlink itself, only the file it points to</p>",
        "id": 386621863,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692714268
    },
    {
        "content": "<p>You might want <code>readlink</code>?</p>",
        "id": 386622015,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692714315
    },
    {
        "content": "<p>Hm ok got it. Is that default posix behavior?</p>",
        "id": 386622088,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714333
    },
    {
        "content": "<p>That you can't open a symlink only the target?</p>",
        "id": 386622107,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714338
    },
    {
        "content": "<p>Oh sorry, that was a terrible explanation <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 386622254,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692714364
    },
    {
        "content": "<p><code>wasi-libc</code> should open the file pointed to by a symlink by default, I believe</p>",
        "id": 386622542,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692714446
    },
    {
        "content": "<p>When I say \"you can't open a symlink itself\" I mean for example if the symlink doesn't point at an existing file then there isn't anything to open</p>",
        "id": 386622872,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692714527
    },
    {
        "content": "<p>If your platform isn't following symlinks by default, one option is to resolve them yourself, and a POSIXy way to do that is <code>readlink</code></p>",
        "id": 386623000,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692714567
    },
    {
        "content": "<p>Yea that makes sense</p>",
        "id": 386623197,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714618
    },
    {
        "content": "<p>Ah right</p>",
        "id": 386623281,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714643
    },
    {
        "content": "<p>Cause POSIX will also return with an ELOOP if the last component is a symlink and O_NOFOLLOW was specified</p>",
        "id": 386623345,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714663
    },
    {
        "content": "<p>Right</p>",
        "id": 386623355,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714665
    },
    {
        "content": "<p>So you can't really open a symlink</p>",
        "id": 386623382,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714671
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 386623398,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714675
    },
    {
        "content": "<p>So the difference here than with Node.js is that it just doesn't even pass along <code>O_NOFOLLOW</code> whereas wasmtime does which is why it throws with a \"symbolic link loop\"</p>",
        "id": 386623683,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714734
    },
    {
        "content": "<p>But Node doesn't because it never passes O_NOFOLLOW</p>",
        "id": 386623710,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714745
    },
    {
        "content": "<p>What is the right behavior then?</p>",
        "id": 386623786,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714765
    },
    {
        "content": "<p>Cause here it also doesn't mention anything of <code>O_NOFOLLOW</code> <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#fdflags\">https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#fdflags</a></p>",
        "id": 386623900,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714791
    },
    {
        "content": "<p>And those are the flags that Node also passes along</p>",
        "id": 386623939,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692714801
    },
    {
        "content": "<p>Its on <code>lookupflags</code>: <a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#-lookupflags-record\">https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md#-lookupflags-record</a></p>",
        "id": 386624944,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692715063
    },
    {
        "content": "<p>(<code>path-flags</code> in preview2)</p>",
        "id": 386625222,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692715122
    },
    {
        "content": "<p>Yes, but that only determines the resolution to the host path no?</p>",
        "id": 386625316,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692715145
    },
    {
        "content": "<p>So in case you'd specify <code>O_NOFOLLOW</code> then the host path will not be the symlink target but the symlink itself</p>",
        "id": 386625394,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692715165
    },
    {
        "content": "<p>And that path is then passed to <code>open</code> which will basically resolve the symlink</p>",
        "id": 386625472,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692715182
    },
    {
        "content": "<p>Cause <code>O_NOFOLLOW</code> is not passed to <code>open</code> as well.</p>",
        "id": 386625514,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692715192
    },
    {
        "content": "<p>The host gets to decide how to map a host filesystem into a wasi guest filesystem. The most obvious thing to do with symlinks is to convert them into guest symlinks, but this is tricky since a host symlink may try to \"escape\" the source directory of your mapping, which is why wasmtime does its own symlink resolution</p>",
        "id": 386627522,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692715662
    },
    {
        "content": "<p>The guest doesn't get to decide what the host does, only whether or not to follow what the host has presented as a symlink</p>",
        "id": 386627839,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692715742
    },
    {
        "content": "<p>So I guess the answer to \"What is the right behavior?\" is that the host gets to decide, as long as any symlinks it presents to the guest behave correctly</p>",
        "id": 386628558,
        "sender_full_name": "Lann Martin",
        "timestamp": 1692715913
    },
    {
        "content": "<p>Ok, so saying that resolving to a host path would not resolve the symlink when O_NOFOLLOW is passed, but <code>open</code> would resolve it then is also \"correct\" behavior then?</p>",
        "id": 386662771,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692725736
    },
    {
        "content": "<p>Cause it's up to the host?</p>",
        "id": 386662782,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692725742
    },
    {
        "content": "<p>Is that somewhere in the spec that this is up to the host?</p>",
        "id": 386662806,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692725750
    },
    {
        "content": "<p>It kind of just flows from the big picture with WASI. wasi-filesystem isn't giving you access to \"The Filesystem\"; it's giving you access to something that can be presented as a filesystem. That might be \"The Filesystem\" on the host, or it might be something that's not a filesystem at all, or it might be an attenuated version of the host filesystem where everything is presented as readonly, or, indeed, it could even be a view where symlinks are presented as non-symlinks.</p>",
        "id": 386665659,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1692726533
    },
    {
        "content": "<p>Ah okay got it. So the bottom line is that it's really up to the host then?</p>",
        "id": 386776030,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692774339
    },
    {
        "content": "<p>Thanks all!</p>",
        "id": 386930684,
        "sender_full_name": "Dominic Elm",
        "timestamp": 1692815614
    }
]