[
    {
        "content": "<p>to make sure it isn't my code, I compiled a minimal wasi component that only tries to list files in /usr/ during wizer.initialize and ran the wizer release binary, I can't get this to work, am I doing something wrong? The directory exists</p>\n<p>./wizer-v3.0.1-x86_64-linux/wizer --allow-wasi --mapdir \"/usr::usr/\" --wasm-bulk-memory true ../target/wasm32-wasi/release/wasi_runtime.wasm -o initialized.wasm<br>\nthread '&lt;unnamed&gt;' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: Custom { kind: Uncategorized, error: \"failed to find a pre-opened file descriptor through which \\\"/usr\\\" could be opened\" }', wasi_runtime/src/lib.rs:28:43</p>",
        "id": 378508440,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690297221
    },
    {
        "content": "<p>(I didn't know you can't edit initial messages) I compiled a minimal wasi module, not component</p>",
        "id": 378525458,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690300077
    },
    {
        "content": "<p>I've narrowed it down, calling the wit_bindgen::generate! macro breaks wizer's mapdir, if the wasm file has no component exports I can read files from the mapped dir, but when I add anything componentish it's as if I didn't provide mapdir</p>\n<p>how can I further debug this?</p>\n<p>even just adding the bindgen macro without actually implementing or exporting the component causes it to break</p>",
        "id": 378962124,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690412076
    },
    {
        "content": "<p>My only guess is that <code>wit-bindgen</code> is using <a href=\"https://github.com/bytecodealliance/wit-bindgen/blob/bc4fcebd2805d28ab513806b22483b5f8a0232b3/crates/guest-rust/src/lib.rs#L25\">https://github.com/bytecodealliance/wit-bindgen/blob/bc4fcebd2805d28ab513806b22483b5f8a0232b3/crates/guest-rust/src/lib.rs#L25</a> to invoke <code>__wasm_call_ctors</code>, which tells <code>wasm-ld</code> not to insert calls automatically into all exports.  Therefore your init function won't call it and thus won't initialize the preopen state.  Try adding this to the start of your init function:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">                </span><span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"s\">\"C\"</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">                    </span><span class=\"k\">fn</span> <span class=\"nf\">__wasm_call_ctors</span><span class=\"p\">();</span>\n<span class=\"w\">                </span><span class=\"p\">}</span>\n<span class=\"w\">                </span><span class=\"n\">__wasm_call_ctors</span><span class=\"p\">();</span>\n</code></pre></div>",
        "id": 378964119,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690413062
    },
    {
        "content": "<p>(you'll need to wrap that in an <code>unsafe</code> block, I imagine)</p>",
        "id": 378964272,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690413143
    },
    {
        "content": "<p>I'll try that next, right now I'm trying to figure out your commits from earlier today ;) world_exports seems to be rejected by the macro though, I think I'll downgrade for now to test your suggestion</p>",
        "id": 378969667,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690416158
    },
    {
        "content": "<p>Oops, sorry -- I didn't update the commit message to reflect the syntax we settled on: <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1268189438\">https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1268189438</a> plus <a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1269806777\">https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1269806777</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1268189438\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/44f6b7091627528f4b129aa61086637c6df940a5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396338626330343831363734666464306638313965346133653632613839633666376139633130323462313230643461663236326136623866623434343238332f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363034)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1268189438\" title=\"implement support for resources for C and Rust generators by dicej · Pull Request #604 · bytecodealliance/wit-bindgen\">implement support for resources for C and Rust generators by dicej · Pull Request #604 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This also provides stubs for the Java, Go, and Markdown generators.\nIn addition to resource support, I've changed how the Rust guest generator\nhandles exports per a conversation with Alex.  Instead...</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1269806777\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/44f6b7091627528f4b129aa61086637c6df940a5\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f396338626330343831363734666464306638313965346133653632613839633666376139633130323462313230643461663236326136623866623434343238332f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f70756c6c2f363034)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/pull/604#discussion_r1269806777\" title=\"implement support for resources for C and Rust generators by dicej · Pull Request #604 · bytecodealliance/wit-bindgen\">implement support for resources for C and Rust generators by dicej · Pull Request #604 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">This also provides stubs for the Java, Go, and Markdown generators.\nIn addition to resource support, I've changed how the Rust guest generator\nhandles exports per a conversation with Alex.  Instead...</div></div></div>",
        "id": 378970179,
        "sender_full_name": "Joel Dice",
        "timestamp": 1690416490
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"509936\">@Joel Dice</span> your assumption was correct, wasm_call_ctors got me further, I'll now try if the resulting wasm can be adapted into a working component and probably make an example since I can't be the only one who wants to initialize a component :)</p>",
        "id": 378971670,
        "sender_full_name": "Ramon Klass",
        "timestamp": 1690417470
    }
]