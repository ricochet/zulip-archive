[
    {
        "content": "<p>I'm looking to try an experiment where the host and guest leverage a shared region of memory for message communication. It leverages an assumption that imported and exported functions will used this region of memory to pass in a single argument and will use the same region to return an outcome.</p>\n<p>I'm struggling to even get the groundwork in place. Here's the idea I have: </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER_SIZE_MAX</span>: <span class=\"kt\">usize</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">1024</span><span class=\"p\">;</span>\n<span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER</span>: <span class=\"p\">[</span><span class=\"kt\">u8</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER_SIZE_MAX</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER_SIZE_MAX</span><span class=\"p\">];</span>\n\n<span class=\"cp\">#[export_name = </span><span class=\"s\">\"SHARED_BUFFER_OFFSET\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER_OFFSET</span>: <span class=\"o\">*</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"kt\">u8</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER</span><span class=\"w\"> </span><span class=\"p\">}.</span><span class=\"n\">as_ptr</span><span class=\"p\">();</span>\n\n<span class=\"cp\">#[export_name = </span><span class=\"s\">\"SHARED_BUFFER_SIZE\"</span><span class=\"cp\">]</span>\n<span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">static</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER_SIZE</span>: <span class=\"kt\">u32</span> <span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">SHARED_BUFFER_SIZE_MAX</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"kt\">u32</span><span class=\"p\">;</span>\n</code></pre></div>\n<p>The resulting <code>.wat</code> has this though:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;5;)</span> <span class=\"kt\">i32</span> <span class=\"nb\">i32.const</span> <span class=\"mf\">1091744</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"cm\">(;6;)</span> <span class=\"kt\">i32</span> <span class=\"nb\">i32.const</span> <span class=\"mf\">1049600</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"SHARED_BUFFER_OFFSET\"</span> <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"SHARED_BUFFER_SIZE\"</span> <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 428247087,
        "sender_full_name": "Geoff Goodman",
        "timestamp": 1711072063
    },
    {
        "content": "<p>That will work, yeah, but those values are stored in linear memory so the globals are pointers into linear memory you'd have to read. That's basically how globals work in LLVM, everything lives in linear memory and exports are pointers to the address in linear memory</p>",
        "id": 428255641,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711078902
    },
    {
        "content": "<p>Are there alternative approaches to accomplish what I'm trying to do?</p>",
        "id": 428321810,
        "sender_full_name": "Geoff Goodman",
        "timestamp": 1711111395
    },
    {
        "content": "<p>Probably not a big deal doing the extra read since I control the host.</p>",
        "id": 428327507,
        "sender_full_name": "Geoff Goodman",
        "timestamp": 1711113274
    },
    {
        "content": "<p>I'm not aware of any myself, AFAIK there's no way to export custom globals with custom values without liberal use of \"inline assembly\" which is not easy to do I believe</p>",
        "id": 428342232,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1711117830
    }
]