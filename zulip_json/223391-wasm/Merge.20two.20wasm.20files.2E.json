[
    {
        "content": "<p>I just discovered <code>wasm-tools</code>. Wow :) I have a certain task to do. I would like to merge two wasm files into one with a single module. Which tool should I use? I would like to merge functions, exports and imports and even resolve an import from one wasm with exported fn from another one.</p>",
        "id": 338356764,
        "sender_full_name": "Maciej Zieliński",
        "timestamp": 1677511270
    },
    {
        "content": "<p>I played a bit more. Why does the <code>wasm_encoder</code> and <code>wasmparser</code> have their own type systems? After parsing wasm it needs to be manualy translated to <code>wasm_encoder</code> types. Is it possible to parse *.wasm file to a <code>wasm_encoder::Module</code> in one step?</p>",
        "id": 338523669,
        "sender_full_name": "Maciej Zieliński",
        "timestamp": 1677572252
    },
    {
        "content": "<p><code>wasm_encoder</code>'s types aren't an AST for wasm. They're more of a builder that appends bytes to a buffer as you go. If you had <code>wasmparser</code> create a <code>wasm_encoder</code> module, you'd be back to the same exact vector of bytes.</p>",
        "id": 338618454,
        "sender_full_name": "Robin Brown",
        "timestamp": 1677598426
    },
    {
        "content": "<p>What's the use case for merging to modules together? There are some other things I might suggest depending on what you're trying to achieve.</p>",
        "id": 338619225,
        "sender_full_name": "Robin Brown",
        "timestamp": 1677598595
    },
    {
        "content": "<p>Thanks for replying <span class=\"user-mention\" data-user-id=\"477605\">@Kyle Brown</span> </p>\n<p>Here is my case:</p>\n<p>I want to have a Rust library that can be run on two different WASM VMs. Each VM has its own ffi set.</p>\n<p>Let me give you SQL based example. There are two WASM VMs that can run SQL query <code>SQLBackend1</code> and <code>SQLBackend2</code>. Both have different ffis that might look like that:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// SQLBackend1</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run_sql</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// SQLBackend2</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">query_db</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mode</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>Now my goal is allowing developers to code just once, and be able to pick the backend later.<br>\nTo do that I'd write two \"backend\" wasms with the same interface:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// sql_backend_1.wasm</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">run_sql</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">sql</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">run_sql</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// sql_backend_2.wasm</span>\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">query_db</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">mode</span>: <span class=\"kt\">u32</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">sql</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">query_db</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>After compilation this how WASM's exports and imports should look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">sql_backend_1</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">import</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">run_sql</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">export</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sql</span>\n\n<span class=\"n\">sql_backend_2</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">import</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">query_db</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">export</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sql</span>\n</code></pre></div>\n<p>Now I'm ready to write common code that uses <code>sql</code> function.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// caller.wasm</span>\n\n<span class=\"k\">extern</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">pub</span><span class=\"w\"> </span><span class=\"k\">fn</span> <span class=\"nf\">sql</span><span class=\"p\">(</span><span class=\"n\">query</span>: <span class=\"kp\">&amp;</span><span class=\"kt\">str</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"cp\">#[no_mangle]</span>\n<span class=\"k\">fn</span> <span class=\"nf\">main</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">unsafe</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">sql</span><span class=\"p\">(</span><span class=\"s\">\"INSERT INTO Customers (CustomerName) VALUES ('Cardinal');\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>After compilation this how WASM's exports and imports should look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">caller</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">import</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">sql</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">export</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">main</span>\n</code></pre></div>\n<p>What I think I would like to do is to combin:</p>\n<ul>\n<li><code>sql_backend_1.wasm</code> and <code>caller.wasm</code> into <code>backend_1_caller.wasm</code></li>\n<li><code>sql_backend_2.wasm</code> and <code>caller.wasm</code> into <code>backend_2_caller.wasm</code></li>\n</ul>\n<p>After compilation this how WASM's exports and imports should look like:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">backend_1_caller</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">import</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">run_sql</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">export</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">main</span>\n\n<span class=\"n\">sql_backend_2</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">import</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">query_db</span>\n<span class=\"w\">    </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">export</span>:\n        <span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">main</span>\n</code></pre></div>\n<p>Components should solve this \"plugable\" backend issue. The problem is that those two WASM VMs I have only accept WASMs with a single module in it.</p>\n<p>What I thought of doing is using <code>wasmparser</code> on each wasm resolve exports and imports manualy and put together a single module using <code>wasm_encoder</code>.</p>",
        "id": 338649255,
        "sender_full_name": "Maciej Zieliński",
        "timestamp": 1677605811
    },
    {
        "content": "<p>Components are definitely the \"right\" way to do this, but it should be possible as long as A) the runtime you're using supports multi-memory, B)  only one .wasm needs a memory, or C) they both use memory in a way that won't clobber each other if they share.</p>",
        "id": 338848422,
        "sender_full_name": "Robin Brown",
        "timestamp": 1677679339
    },
    {
        "content": "<p>There is no tool for doing this that I know of, but it should be entirely possible. It's just a matter of reading both, figuring out how the indexes change, and re-encoding everything.</p>",
        "id": 338848674,
        "sender_full_name": "Robin Brown",
        "timestamp": 1677679406
    },
    {
        "content": "<p>Say goodbye to your debug info if you've got any, because this won't preserve it.</p>",
        "id": 338848786,
        "sender_full_name": "Robin Brown",
        "timestamp": 1677679440
    },
    {
        "content": "<p>I don't know a lot about this, but emscripten seems to support doing this, by recording ELF-like relocations into custom sections (I think) and treating them similarly to ELF object files</p>",
        "id": 338850498,
        "sender_full_name": "David Lloyd",
        "timestamp": 1677679811
    }
]