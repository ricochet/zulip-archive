[
    {
        "content": "<p><a href=\"https://github.com/fitzgen/wasm-smith\">https://github.com/fitzgen/wasm-smith</a></p>\n<p>The README has the sales pitch. I've already used this to find a bunch of bugs in <code>wasmparser</code>. Isn't published on <a href=\"http://crates.io\">crates.io</a> yet, because I need to upstream some changes to the <code>arbitrary</code> crate first.</p>\n<p>cc <span class=\"user-mention\" data-user-id=\"253991\">@Yury Delendik</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"254051\">@Jonathan Foote</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/fitzgen/wasm-smith\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/74571?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/fitzgen/wasm-smith\" title=\"fitzgen/wasm-smith\">fitzgen/wasm-smith</a></div><div class=\"message_embed_description\">A WebAssembly test case generator. Contribute to fitzgen/wasm-smith development by creating an account on GitHub.</div></div></div>",
        "id": 207692746,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598049873
    },
    {
        "content": "<p>Nice! Definitely looking forward to seeing this hooked up to wasmtime</p>",
        "id": 207697950,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598054789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> this might be good to include in the wasm tools repo?</p>",
        "id": 207698570,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598055627
    },
    {
        "content": "<p>Perhaps!</p>",
        "id": 207700844,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598059512
    },
    {
        "content": "<p>Now up on <a href=\"http://crates.io\">crates.io</a>: <a href=\"https://crates.io/crates/wasm-smith\">https://crates.io/crates/wasm-smith</a></p>",
        "id": 207741234,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598128790
    },
    {
        "content": "<p>blog post describing its implementation, if anyone is interested: <a href=\"https://fitzgeraldnick.com/2020/08/24/writing-a-test-case-generator.html\">https://fitzgeraldnick.com/2020/08/24/writing-a-test-case-generator.html</a></p>",
        "id": 207859022,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598283534
    },
    {
        "content": "<p>and let the fuzz bugs begin...</p>",
        "id": 208054346,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598420074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> btw the auto-reduction oss-fuzz does is <em>really</em> good with wasm-smith</p>",
        "id": 208126673,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465219
    },
    {
        "content": "<p>it reduced a 30kb input to 4kb which generated a module with just one type in it</p>",
        "id": 208126688,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465228
    },
    {
        "content": "<p>so the pattern you're using for generating a wasm module I think is really amenable to auto-reduction</p>",
        "id": 208126726,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465248
    },
    {
        "content": "<p>although you probably knew this already heh</p>",
        "id": 208126739,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465255
    },
    {
        "content": "<p>yeah, I think it is a combo of two things:</p>\n<ol>\n<li>\n<p><code>wasm-opt -ttf</code> was cycling back over the raw input and doing funky stuff like xoring it with a counter, rather than simply padding the end of the input with zeroes. this meant that in order to reproduce a bug that involves something generated after it has cycled back around the input, you <em>have</em> to have the whole prefix. there is a lot of unintentional stuff entrained in the test case.</p>\n</li>\n<li>\n<p>I switched a few things in the arbitrary crate to be more fuzzing friendly. we are more lax about errors (eg a string that isn't perfectly utf-8 or when we need more input than the fuzzer provided us) and I also made it so that collections are built up via a \"continuation byte\" rather than by reading a length and then reading that many elements. This latter one was inspired by a paper about test case reduction from the python hypothesis testing framework. See <a href=\"https://github.com/rust-fuzz/arbitrary/issues/52\">https://github.com/rust-fuzz/arbitrary/issues/52</a> for details</p>\n</li>\n</ol>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/rust-fuzz/arbitrary/issues/52\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/25854843?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/rust-fuzz/arbitrary/issues/52\" title=\"Generate collections via a &quot;continuation byte&quot; rather than reading a length 路 Issue #52 路 rust-fuzz/arbitrary\">Generate collections via a \"continuation byte\" rather than reading a length 路 Issue #52 路 rust-fuzz/arbitrary</a></div><div class=\"message_embed_description\">Rather than doing let mut collection = Collection::new(); let n = u.arbitrary_len()?; for _ in 0..n { collection.insert(u.arbitrary()?); } to create a collection, we should consider doing let mut c...</div></div></div>",
        "id": 208127370,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598465576
    },
    {
        "content": "<p>yeah I saw that about the <code>keep_going</code> bool which I thought was pretty clever</p>",
        "id": 208127541,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465655
    },
    {
        "content": "<p>I do think though that one part about wasm-smith is that it's difficult to have a stable corpus, because as we tweak wasm-smith a previous input could be reinterpreted totally differently (e.g. with the patch I just sent)</p>",
        "id": 208127579,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465684
    },
    {
        "content": "<p>not really a huge issue, but also not sure how we'd fix it</p>",
        "id": 208127588,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1598465691
    },
    {
        "content": "<p>agreed. I don't think it is a huge deal and I'm also not sure how to fix it where the fix wouldn't be worse than just rediscovering some coverage</p>",
        "id": 208127790,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1598465813
    }
]