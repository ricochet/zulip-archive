[
    {
        "content": "<p>A question for various folks familiar with wasi-libc and/or expected <code>memory.grow</code> semantics (<span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ?): let's say I want to bundle some data with a Wasm snapshot and stick some pointers into the Wasm heap so that when re-enlivened, the module can access that data. (A second memory is out because it has to be accessible to C.) Are the semantics of <code>memory.grow</code> and the expectations of <code>dlmalloc</code> such that I can effectively do an offline <code>memory.grow</code>, sticking the data at the end of the snapshot's memory (at its minimum size) and bumping its minimum size?</p>\n<p>I do see configuration options in <code>dlmalloc</code> about whether to expect non-contiguous <code>sbrk</code> or not, I'm not sure if this is just for optimization or required for correctness though...</p>\n<p>(Let's consider this \"opt-in\" from the point of view of the module: it's asking for the changes via weval intrinsics, so visible semantics changes are fine)</p>",
        "id": 427949300,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710946996
    },
    {
        "content": "<p>if I understand what you are suggesting, whether this will work is really dependent on the particular malloc implementation and the linker</p>",
        "id": 427949605,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1710947074
    },
    {
        "content": "<p>Yes, the intention is, <code>dlmalloc</code> and <code>memory.grow</code> or \"logical aot <code>memory.grow</code>\" can interleave arbitrarily</p>",
        "id": 427949738,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1710947108
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> that's perfect, thanks</p>",
        "id": 427949846,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710947134
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> I think I'm fine assuming wasi-libc here, as we integrate with e.g. its startup symbol names with wizer anyway)</p>",
        "id": 427949984,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710947164
    },
    {
        "content": "<p>(I don't know the particulars here, just that some allocators will take advantage of lld's exported <code>__heap_base</code> and assume that they own everything after that up to <code>memory.size</code> and so any appended pages would fall into that region that they assume that they own)</p>",
        "id": 427950303,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1710947248
    },
    {
        "content": "<p>fair enough; the alternative is requiring the guest to pre-allocate a buffer large enough, but we don't know how big necessarily ahead-of-time (this is for a \"pre-wevaled functions\" lookup table to be inserted after wevaling); or I guess interpreting malloc offline (!); I think I'm comfortable leaning on Dan's statement about dlmalloc above and requiring wasi-libc for now though (as this is opt-in)</p>",
        "id": 427951465,
        "sender_full_name": "Chris Fallin",
        "timestamp": 1710947512
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253990\">@fitzgen (he/him)</span> fwiw there's now <code>__heap_end</code> in LLD to help with this</p>",
        "id": 427951971,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710947615
    },
    {
        "content": "<p>(and targeted at enabling exactly this use case)</p>",
        "id": 427952022,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1710947626
    },
    {
        "content": "<p>TIL!</p>",
        "id": 427952063,
        "sender_full_name": "fitzgen (he/him)",
        "timestamp": 1710947637
    },
    {
        "content": "<p>Yes, and <code>dlmalloc</code> uses it</p>",
        "id": 427953058,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1710947853
    }
]