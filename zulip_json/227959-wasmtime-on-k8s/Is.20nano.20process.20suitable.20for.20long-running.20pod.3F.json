[
    {
        "content": "<p>Stream created by <span class=\"user-mention silent\" data-user-id=\"273855\">Owen Ou</span>.</p>",
        "id": 191059388,
        "sender_full_name": "Notification Bot",
        "timestamp": 1584576773
    },
    {
        "content": "<p>hi!</p>",
        "id": 191059434,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1584576835
    },
    {
        "content": "<p>Hello <span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span></p>",
        "id": 191059526,
        "sender_full_name": "Owen Ou",
        "timestamp": 1584576885
    },
    {
        "content": "<p>Created this stream to communicate. I'm unsure if I should use the wasmtime stream or a new one (this). Let's try and see how it goes :)</p>",
        "id": 191059580,
        "sender_full_name": "Owen Ou",
        "timestamp": 1584576949
    },
    {
        "content": "<p>Posting Twitter discussion here for visibility: Krustlet spawns a thread for a long-running pod (<a href=\"https://github.com/deislabs/krustlet/blob/2eb577b88041349c463cc14b80cb83f63cc27e3a/crates/wasi-provider/src/wasi_runtime.rs#L139\" target=\"_blank\" title=\"https://github.com/deislabs/krustlet/blob/2eb577b88041349c463cc14b80cb83f63cc27e3a/crates/wasi-provider/src/wasi_runtime.rs#L139\">https://github.com/deislabs/krustlet/blob/2eb577b88041349c463cc14b80cb83f63cc27e3a/crates/wasi-provider/src/wasi_runtime.rs#L139</a>) which isn't recommended for a multi-tenant k8s cluster due to possible Spectre attack IIUC</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/blob/2eb577b88041349c463cc14b80cb83f63cc27e3a/crates/wasi-provider/src/wasi_runtime.rs#L139\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\" target=\"_blank\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/blob/2eb577b88041349c463cc14b80cb83f63cc27e3a/crates/wasi-provider/src/wasi_runtime.rs#L139\" target=\"_blank\" title=\"deislabs/krustlet\">deislabs/krustlet</a></div><div class=\"message_embed_description\">Kubernetes Rust Kubelet. Contribute to deislabs/krustlet development by creating an account on GitHub.</div></div></div>",
        "id": 191059967,
        "sender_full_name": "Owen Ou",
        "timestamp": 1584577226
    },
    {
        "content": "<p>(I'm not a Zulip expert, but it seems reasonable to have a separate stream just for these topics.)</p>",
        "id": 191061384,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1584578917
    },
    {
        "content": "<p>Yeah, so to restate what I said in the DM, it seems like it all depends on the context the service is being run in.  In full generality (long-running tasks, either with access to time or attacker is able to externally time), I believe you do have to put separate tenants/domains in separate OS processes.  It's a good question of what's the best way to achieve that with either a krustlet or containerd-shim approach.</p>",
        "id": 191061471,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1584579043
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span>, I'm interested in this as well; I tried to get krustlet running a while back but ran into issues so I put that on hold. Have you had better luck with that or WaPC? Or are you thinking about creating something completely different?</p>",
        "id": 191130547,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1584632106
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> I'm trying to get more information from the krustlet folks this week. I'm thinking of building a containerd-shim that drives wasmtime.</p>",
        "id": 191632635,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585065830
    },
    {
        "content": "<p>Regarding the wasmtime part, I would need wasmtime experts to chime in. It sounds like the most secure way is that each wasmtime instance runs in an OS process. But that means we don't get nano processes :(. Is there a way to avoid Spectre attack for nano processes?</p>",
        "id": 191633398,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585066130
    },
    {
        "content": "<p>I'm no expert but there have been discussions about this; cc: <span class=\"user-mention\" data-user-id=\"258954\">@Mingqiu Sun</span>, <span class=\"user-mention\" data-user-id=\"253992\">@Pat Hickey</span></p>",
        "id": 191635067,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1585066764
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> Circling back on the \"wasmtime daemon\" idea. There is a wasmtimed process that schedules wasm modules on a free wasmtime process in the wasmtime process pool. One nano process is scheduled on a wasmtime process at a time. Wasmtimed won't schedule module on a wasmtime process if it's already occupied by a nano process. <a href=\"/user_uploads/15107/vzg7mEEUQFwYAnsjxfzYSpKA/wasmtimed-1.png\" target=\"_blank\" title=\"wasmtimed-1.png\">wasmtimed-1.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/vzg7mEEUQFwYAnsjxfzYSpKA/wasmtimed-1.png\" target=\"_blank\" title=\"wasmtimed-1.png\"><img src=\"/user_uploads/15107/vzg7mEEUQFwYAnsjxfzYSpKA/wasmtimed-1.png\"></a></div>",
        "id": 191643503,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585070115
    },
    {
        "content": "<p>I think that was the gist of what Luke was describing, although I wonder if he meant it at the containerd-shim level or at a krustlet -implementation level.  I also think that there's timing attack mitigations we can do in WASI as well (a la limiting access to high-resolution timers like browsers do) that may assist in reducing attack surface for multi-tenant nanoprocesses in the same OS process.</p>",
        "id": 191648718,
        "sender_full_name": "Peter Huene",
        "timestamp": 1585072226
    },
    {
        "content": "<p>sorry, I don't have very much insight on this question, I'm not sure how the trust boundaries are being drawn in this problem space</p>",
        "id": 191649058,
        "sender_full_name": "Pat Hickey",
        "timestamp": 1585072392
    },
    {
        "content": "<p>You may consider using the Intel Protection Key Tech for spectre protection at the thread level. But  currently there is a 16 domain limitation.</p>",
        "id": 191657854,
        "sender_full_name": "Mingqiu Sun",
        "timestamp": 1585076518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> Yes, that is what I was imagining.  That design wasn't specific to either the krustlet or containerd-shim approach.  One high-level takeaway I had from the earlier chat was that the containerd-shim approach may force process creation in a way that might be incompatible with this approach -- it'd be good to verify that claim, though.</p>",
        "id": 191690433,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1585096513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> Even if we take away time via WASI impl, if the wasm can be long-running and the attacker can externally time how long it takes to run (b/c, e.g., the wasm is running as part of a request/response loop), then a timing attack is still possible (b/c the attacker wasm can vary how long it takes based on the speculatively-stolen secret value).</p>",
        "id": 191690515,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1585096597
    },
    {
        "content": "<p>Hey all! Finally joined in here so you can just ask Krustlet questions directly :D</p>",
        "id": 192419105,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585674297
    },
    {
        "content": "<p>RE: the threading vs. separate OS process approach: we are still working through Krustlet's design. We are still weighing both approaches, and both are possible in the current architecture - just write a new wasmtime Provider that spawns wasmtime instances in a new process and let the Provider manage the instance.</p>\n<p>You can take a look at <a href=\"http://wasi_runtime.rs\" title=\"http://wasi_runtime.rs\">wasi_runtime.rs</a> to see how this is accomplished: <a href=\"https://github.com/deislabs/krustlet/blob/af061f0487fdacdb407bb798501b92b95f78f978/crates/wasi-provider/src/wasi_runtime.rs#L132\" title=\"https://github.com/deislabs/krustlet/blob/af061f0487fdacdb407bb798501b92b95f78f978/crates/wasi-provider/src/wasi_runtime.rs#L132\">https://github.com/deislabs/krustlet/blob/af061f0487fdacdb407bb798501b92b95f78f978/crates/wasi-provider/src/wasi_runtime.rs#L132</a></p>\n<p>I'm not familiar with the speculative timing attacks mentioned here WRT spawning untrusted wasmtime instances in separate threads. Is there some ticket or design doc that describes this attack in more detail?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/blob/af061f0487fdacdb407bb798501b92b95f78f978/crates/wasi-provider/src/wasi_runtime.rs#L132\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/blob/af061f0487fdacdb407bb798501b92b95f78f978/crates/wasi-provider/src/wasi_runtime.rs#L132\" title=\"deislabs/krustlet\">deislabs/krustlet</a></div><div class=\"message_embed_description\">Kubernetes Rust Kubelet. Contribute to deislabs/krustlet development by creating an account on GitHub.</div></div></div>",
        "id": 192421203,
        "sender_full_name": "Matt Fisher",
        "timestamp": 1585675200
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280225\">@Matt Fisher</span>:  I think <span class=\"user-mention\" data-user-id=\"253998\">@Luke Wagner</span> and <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> have more info on ^</p>",
        "id": 192554987,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585758583
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280225\">@Matt Fisher</span>  The issue isn't really specific to wasmtime; it's more of a general Spectre consequence that is our new reality.  Basically, the only general way to prevent Spectre attacks is to use an OS process boundary (which are occasionally breached, but at least CPU/OS vendors work in concert to fix these by adding mitigations to context/ring switches).  Acknowledging this fact is why browsers are all doing process-per-origin/site (<a href=\"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\" title=\"https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md\">https://chromium.googlesource.com/chromium/src/+/master/docs/security/side-channel-threat-model.md</a>).  Wasmtime really doesn't have a say in the matter in the absence of any sub-process \"Time Protection\" (<a href=\"https://ts.data61.csiro.au/publications/csiro_full_text//Ge_YCH_19.pdf\" title=\"https://ts.data61.csiro.au/publications/csiro_full_text//Ge_YCH_19.pdf\">https://ts.data61.csiro.au/publications/csiro_full_text//Ge_YCH_19.pdf</a>) primitives.  Of course, in constrained execution scenarios (where you can limit what the attacker can do or observe), one can avoid OS processes, as edge compute vendors have done, but making that argument takes a lot more work and context.</p>",
        "id": 192564591,
        "sender_full_name": "Luke Wagner",
        "timestamp": 1585762484
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> <span class=\"user-mention\" data-user-id=\"280225\">@Matt Fisher</span> I'm trying to get krustlet to run on EKS. I was able to get the krustlet node to register but <code>kubectl logs</code> didn't work:</p>\n<div class=\"codehilite\"><pre><span></span>k get nodes -o wide\nNAME                                           STATUS   ROLES    AGE   VERSION              INTERNAL-IP      EXTERNAL-IP    OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME\nip-192-168-23-105.us-west-2.compute.internal   Ready    &lt;none&gt;   55m   v1.14.9-eks-1f0ca9   192.168.23.105   34.221.97.70   Amazon Linux 2   4.14.171-136.231.amzn2.x86_64   docker://18.9.9\nip-192-168-55-201.us-west-2.compute.internal   Ready    agent    8s    v1.17.0              192.168.55.201   &lt;none&gt;         &lt;unknown&gt;        &lt;unknown&gt;                       mvp\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>k get po\nNAME                    READY   STATUS       RESTARTS   AGE\nhello-world-wasi-rust   0/1     ExitCode:0   0          2s\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>k logs hello-world-wasi-rust\nError from server: Get https://192.168.55.201:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust: x509: cannot validate certificate for 192.168.55.201 because it doesn&#39;t contain any IP SANs\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>KUBECONFIG=./kubeconfig-sa PFX_PATH=./krustlet.pfx PFX_PASSWORD=password ./krustlet-wasi\n[2020-04-02T05:26:34Z ERROR kubelet::server] error handling connection: error:14094412:SSL routines:ssl3_read_bytes:sslv3 alert bad certificate:ssl/record/rec_layer_s3.c:1544:SSL alert number 42\n</pre></div>\n\n\n<p>There seems to be some cert issue. Do you happen to know what went wrong?</p>\n<p>On the node, I could curl the log though by ignoring the cert:</p>\n<div class=\"codehilite\"><pre><span></span>curl https://192.168.55.201:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust -v -k\n*   Trying 192.168.55.201...\n* TCP_NODELAY set\n* Connected to 192.168.55.201 (192.168.55.201) port 3000 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH\n* successfully set certificate verify locations:\n*   CAfile: /etc/pki/tls/certs/ca-bundle.crt\n  CApath: none\n* TLSv1.2 (OUT), TLS header, Certificate Status (22):\n* TLSv1.2 (OUT), TLS handshake, Client hello (1):\n* TLSv1.2 (IN), TLS handshake, Server hello (2):\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\n* TLSv1.2 (IN), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (IN), TLS handshake, Finished (20):\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\n* ALPN, server did not agree to a protocol\n* Server certificate:\n*  subject: C=US; ST=.; L=.; O=.; OU=.; CN=krustlet\n*  start date: Apr  2 04:44:00 2020 GMT\n*  expire date: Apr  2 04:44:00 2021 GMT\n*  issuer: CN=kubernetes\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\n&gt; GET /containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust HTTP/1.1\n&gt; Host: 192.168.55.201:3000\n&gt; User-Agent: curl/7.61.1\n&gt; Accept: */*\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; content-length: 116\n&lt; date: Thu, 02 Apr 2020 05:41:59 GMT\n&lt;\nhello from stdout!\nhello from stderr!\nFOO=bar\nCONFIG_MAP_VAL=cool stuff\nPOD_NAME=hello-world-wasi-rust\nArgs are: []\n* Connection #0 to host 192.168.55.201 left intact\n</pre></div>\n\n\n<p>Another question is that I was trying to run <code>kubectl logs</code> on my local machine against EKS and <code>192.168.55.201</code> is an internal IP. Would I be able to access the log via this internal IP? Should there be an external IP field for Krustlet in <code>kubectl get node</code>? This is what a normal kubelet registers on the same node with both internal ip and external ip:</p>\n<div class=\"codehilite\"><pre><span></span>k get nodes -o wide\nNAME                                           STATUS   ROLES    AGE   VERSION              INTERNAL-IP      EXTERNAL-IP      OS-IMAGE         KERNEL-VERSION                  CONTAINER-RUNTIME\nip-192-168-23-105.us-west-2.compute.internal   Ready    &lt;none&gt;   50m   v1.14.9-eks-1f0ca9   192.168.23.105   34.221.97.70     Amazon Linux 2   4.14.171-136.231.amzn2.x86_64   docker://18.9.9\nip-192-168-55-201.us-west-2.compute.internal   Ready    &lt;none&gt;   50m   v1.14.9-eks-1f0ca9   192.168.55.201   54.187.160.172   Amazon Linux 2   4.14.171-136.231.amzn2.x86_64   docker://19.3.6\n</pre></div>",
        "id": 192622629,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585805705
    },
    {
        "content": "<p>Go's TLS crypto library sure is funny... Do you have steps available for how you generated the certificate for the Krustlet node?</p>\n<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> have you seen this error before? Perhaps it has to do with the <code>common-name</code> parameter when generating the certificate...</p>",
        "id": 192679744,
        "sender_full_name": "Matt Fisher",
        "timestamp": 1585840399
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> It looks like you gave the cert the common name of \"krustlet\" but it has a host name of <code>ip-192-168-55-201.us-west-2.compute.internal</code> That could possibly be the issue. As for the external IP thing, we should probably open an issue to have it register that as well, although for this initial case, we have been targeting things that don't necessarily have a publicly accessible IP address</p>",
        "id": 192685256,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585842228
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> <span class=\"user-mention\" data-user-id=\"280225\">@Matt Fisher</span>:</p>\n<p>I followed the step in <a href=\"https://github.com/deislabs/krustlet/blob/master/docs/howto/krustlet-on-aks.md#step-2-create-certificate\" title=\"https://github.com/deislabs/krustlet/blob/master/docs/howto/krustlet-on-aks.md#step-2-create-certificate\">https://github.com/deislabs/krustlet/blob/master/docs/howto/krustlet-on-aks.md#step-2-create-certificate</a> to generate the cert.</p>\n<p>Same issue after changing the CN to <code>ip-192-168-55-201.us-west-2.compute.internal</code>:</p>\n<div class=\"codehilite\"><pre><span></span>k logs hello-world-wasi-rust\nError from server: Get https://192.168.55.201:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust: x509: cannot validate certificate for 192.168.55.201 because it doesn&#39;t contain any IP SANs\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>curl https://192.168.55.201:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust -v -k\n*   Trying 192.168.55.201...\n* TCP_NODELAY set\n* Connected to 192.168.55.201 (192.168.55.201) port 3000 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH\n* successfully set certificate verify locations:\n*   CAfile: /etc/pki/tls/certs/ca-bundle.crt\n  CApath: none\n* TLSv1.2 (OUT), TLS header, Certificate Status (22):\n* TLSv1.2 (OUT), TLS handshake, Client hello (1):\n* TLSv1.2 (IN), TLS handshake, Server hello (2):\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n* TLSv1.2 (IN), TLS handshake, Server key exchange (12):\n* TLSv1.2 (IN), TLS handshake, Server finished (14):\n* TLSv1.2 (OUT), TLS handshake, Client key exchange (16):\n* TLSv1.2 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (OUT), TLS handshake, Finished (20):\n* TLSv1.2 (IN), TLS change cipher, Change cipher spec (1):\n* TLSv1.2 (IN), TLS handshake, Finished (20):\n* SSL connection using TLSv1.2 / ECDHE-RSA-AES128-GCM-SHA256\n* ALPN, server did not agree to a protocol\n* Server certificate:\n*  subject: C=US; ST=.; L=.; O=.; OU=.; CN=ip-192-168-55-201.us-west-2.compute.internal\n*  start date: Apr  2 17:44:00 2020 GMT\n*  expire date: Apr  2 17:44:00 2021 GMT\n*  issuer: CN=kubernetes\n*  SSL certificate verify result: unable to get local issuer certificate (20), continuing anyway.\n&gt; GET /containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust HTTP/1.1\n&gt; Host: 192.168.55.201:3000\n&gt; User-Agent: curl/7.61.1\n&gt; Accept: */*\n&gt;\n&lt; HTTP/1.1 200 OK\n&lt; content-length: 116\n&lt; date: Thu, 02 Apr 2020 17:52:13 GMT\n&lt;\nhello from stdout!\nhello from stderr!\nFOO=bar\nCONFIG_MAP_VAL=cool stuff\nPOD_NAME=hello-world-wasi-rust\nArgs are: []\n* Connection #0 to host 192.168.55.201 left intact\n</pre></div>\n\n\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/blob/master/docs/howto/krustlet-on-aks.md#step-2-create-certificate\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/blob/master/docs/howto/krustlet-on-aks.md#step-2-create-certificate\" title=\"deislabs/krustlet\">deislabs/krustlet</a></div><div class=\"message_embed_description\">Kubernetes Rust Kubelet. Contribute to deislabs/krustlet development by creating an account on GitHub.</div></div></div>",
        "id": 192702921,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585850072
    },
    {
        "content": "<p>\"cannot validate certificate for 192.168.55.201 because it doesn't contain any IP SANs\" looks like we need to set its IP as well?</p>",
        "id": 192703005,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585850123
    },
    {
        "content": "<p>I didn't need to on the AKS example, but not sure what the differences are</p>",
        "id": 192703047,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585850143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> Setting IP as the CN? I did that as well and still got the same error.</p>",
        "id": 192705749,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585851425
    },
    {
        "content": "<p>I honestly am not good with cert stuff but I think you need to set the SAN with the IP as well (not as the CN):</p>\n<div class=\"codehilite\"><pre><span></span>[ req ]\ndefault_bits       = 2048\ndistinguished_name = req_distinguished_name\nreq_extensions     = req_ext\n[ req_distinguished_name ]\ncountryName                 = Country Name (2 letter code)\nstateOrProvinceName         = State or Province Name (full name)\nlocalityName               = Locality Name (eg, city)\norganizationName           = Organization Name (eg, company)\ncommonName                 = Common Name (e.g. server FQDN or YOUR name)\n[ req_ext ]\nsubjectAltName = @alt_names\n[alt_names]\nIP.1 = &lt;ip_addr&gt;\n</pre></div>",
        "id": 192708694,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585852993
    },
    {
        "content": "<p>Let me put together a full file</p>",
        "id": 192708734,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585853025
    },
    {
        "content": "<p>Try this: </p>\n<div class=\"codehilite\"><pre><span></span>[ req ]\ndistinguished_name = req_distinguished_name\nx509_extensions = v3_req\nprompt = no\n[ req_distinguished_name ]\nC = US\nST = .\nL = .\nOU = .\nCN = krustlet\n[ v3_req ]\nsubjectAltName = @alt_names\n[alt_names]\nIP.1 = 192.168.55.201\n</pre></div>\n\n\n<p>With this command: <br>\n<code>openssl req -new -sha256 -newkey rsa:2048 -keyout krustlet.key -out krustlet.csr -nodes -config test_csr.cnf</code></p>\n<p>Saving that file as `test_csr.cnf.</p>",
        "id": 192709578,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585853466
    },
    {
        "content": "<p>That should generate your CSR</p>",
        "id": 192709585,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585853470
    },
    {
        "content": "<p>And maybe with that IP address it will allow it</p>",
        "id": 192709762,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585853557
    },
    {
        "content": "<p>curl will never be successful without <code>-k</code> unless you have the CA cert from k8s available</p>",
        "id": 192709818,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585853605
    },
    {
        "content": "<p>I tried your cnf file and regenerated certs. Still the same <code>x509: cannot validate certificate for 192.168.55.201 because it doesn't contain any IP SANs</code> error</p>",
        "id": 192731429,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585864179
    },
    {
        "content": "<p>I tried to curl with the generated crt on the host and got an error:</p>\n<div class=\"codehilite\"><pre><span></span>curl https://192.168.55.201:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust -v --cacert ./krustlet.crt\n*   Trying 192.168.55.201...\n* TCP_NODELAY set\n* Connected to 192.168.55.201 (192.168.55.201) port 3000 (#0)\n* ALPN, offering h2\n* ALPN, offering http/1.1\n* Cipher selection: ALL:!EXPORT:!EXPORT40:!EXPORT56:!aNULL:!LOW:!RC4:@STRENGTH\n* successfully set certificate verify locations:\n*   CAfile: ./krustlet.crt\n  CApath: none\n* TLSv1.2 (OUT), TLS header, Certificate Status (22):\n* TLSv1.2 (OUT), TLS handshake, Client hello (1):\n* TLSv1.2 (IN), TLS handshake, Server hello (2):\n* TLSv1.2 (IN), TLS handshake, Certificate (11):\n* TLSv1.2 (OUT), TLS alert, unknown CA (560):\n* SSL certificate problem: unable to get local issuer certificate\n* Closing connection 0\ncurl: (60) SSL certificate problem: unable to get local issuer certificate\nMore details here: https://curl.haxx.se/docs/sslcerts.html\n\ncurl failed to verify the legitimacy of the server and therefore could not\nestablish a secure connection to it. To learn more about this situation and\nhow to fix it, please visit the web page mentioned above.\n</pre></div>",
        "id": 192732096,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585864582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> we might need to do a little debug session tomorrow. I am kind of confused how I got the certs to work so easily with AKS and it is being difficult with EKS, even though they are technically the same process. If you are available tomorrow, I can make some time</p>",
        "id": 192733525,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585865356
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> That would be perfect. Thank you! I'm available anytime after 2pm PST tomorrow. My email <a href=\"mailto:o@heroku.com\" title=\"mailto:o@heroku.com\">o@heroku.com</a></p>",
        "id": 192733683,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585865444
    },
    {
        "content": "<p>Hmm...I think it's an EKS issue: <a href=\"https://github.com/awslabs/amazon-eks-ami/issues/341\" title=\"https://github.com/awslabs/amazon-eks-ami/issues/341\">https://github.com/awslabs/amazon-eks-ami/issues/341</a>. The crt signed by kube api doesn't have IP bit:</p>\n<div class=\"codehilite\"><pre><span></span>$ openssl x509 -noout -text -in krustlet.crt\nCertificate:\n    Data:\n        Version: 3 (0x2)\n        Serial Number:\n            36:65:33:da:2b:34:a5:e5:e7:ee:4a:36:4b:5c:c3:c0:45:5c:de:a3\n    Signature Algorithm: sha256WithRSAEncryption\n        Issuer: CN=kubernetes\n        Validity\n            Not Before: Apr  2 05:42:00 2020 GMT\n            Not After : Apr  2 05:42:00 2021 GMT\n        Subject: C=US, ST=., L=., O=., OU=., CN=krustlet\n        Subject Public Key Info:\n            Public Key Algorithm: rsaEncryption\n                Public-Key: (2048 bit)\n                Modulus:\n                    00:ee:4a:1c:d5:24:6c:98:6c:87:0a:2b:09:74:16:\n                    9e:b9:01:15:92:dd:1e:0a:8f:58:19:68:a8:5c:3a:\n                    73:c1:d1:d7:ca:f0:30:c1:f3:09:40:71:f8:e1:3d:\n                    c4:bd:6e:c5:08:ba:36:27:7c:ab:85:4d:01:97:81:\n                    b7:e2:d0:39:8f:a4:09:e1:d0:77:3e:7c:80:60:6b:\n                    e3:c0:5a:16:e3:ed:ec:06:64:40:b0:15:2a:c1:fe:\n                    2a:fb:ed:ad:b6:11:d3:93:f7:88:2b:4a:0c:be:d9:\n                    3f:c9:1e:0a:95:b6:50:63:5e:d4:04:95:6a:23:11:\n                    b7:23:a6:8e:c0:0d:51:1b:9d:c9:f7:23:9b:ea:c5:\n                    85:0a:bb:12:55:15:4c:99:61:97:5d:29:2c:6f:03:\n                    02:11:44:18:fa:88:b8:9f:04:46:b4:df:e4:27:81:\n                    91:ba:5b:51:b9:ea:f9:df:ff:00:99:e3:69:f7:4e:\n                    af:ce:f0:9c:cb:23:0f:51:68:53:ab:0d:33:0d:27:\n                    92:d5:02:41:12:d8:5e:3c:bd:00:03:bc:98:21:f4:\n                    99:09:d1:19:21:02:1c:8d:5a:99:0e:f9:44:c5:6d:\n                    04:82:6e:06:e7:eb:e9:d2:91:18:be:96:3a:7b:81:\n                    89:e7:d6:ce:ca:26:8b:76:cc:05:25:fd:83:ee:d4:\n                    64:f5\n                Exponent: 65537 (0x10001)\n        X509v3 extensions:\n            X509v3 Key Usage: critical\n                Digital Signature, Key Encipherment\n            X509v3 Extended Key Usage:\n                TLS Web Server Authentication\n            X509v3 Basic Constraints: critical\n                CA:FALSE\n            X509v3 Subject Key Identifier:\n                B4:02:BB:10:95:05:31:73:2D:1E:44:E3:81:67:51:4B:7D:F2:25:E9\n    Signature Algorithm: sha256WithRSAEncryption\n         46:f2:e8:44:f4:f3:35:0d:56:32:df:5d:63:1d:0d:72:f4:98:\n         2e:3d:c3:05:dc:86:09:90:da:83:9e:28:74:a0:39:0b:43:4e:\n         90:a8:9f:a9:61:7f:2c:44:74:a0:b0:21:b6:b7:46:a5:d8:cd:\n         bf:68:30:32:19:4e:84:73:57:77:26:c0:78:d5:0e:21:d5:4d:\n         d4:4a:c9:8f:08:41:7f:d1:62:9b:b8:d1:4b:1f:4d:98:9a:15:\n         21:d2:26:bc:b3:6f:10:80:d3:53:43:71:29:39:39:6d:8e:0c:\n         67:a9:02:50:a9:37:b2:c4:3e:f0:30:eb:1a:1a:95:93:04:c4:\n         04:38:e3:89:55:e4:84:a4:fa:df:24:fa:44:88:20:46:c0:7d:\n         b9:c1:71:8a:63:a3:db:ee:ad:05:57:46:1b:b4:e4:1c:ff:75:\n         85:85:42:7a:40:87:10:34:af:53:8d:0c:f8:0e:10:96:53:37:\n         a4:97:5f:25:d2:23:9e:d4:6a:05:be:f9:a2:bd:47:ad:09:65:\n         90:4b:0f:c1:63:eb:b8:62:60:ee:2e:e1:92:cd:ae:e3:04:54:\n         b8:8c:b3:8e:36:22:4b:bd:97:ae:5a:51:c5:16:b2:13:cc:cc:\n         17:74:92:ee:60:28:22:02:a2:e0:29:0e:f8:cf:92:cf:a8:85:\n         2e:3a:b6:eb\n</pre></div>\n\n\n<p>But I can see IP in the altname for the csr that I uploaded:</p>\n<div class=\"codehilite\"><pre><span></span>$ k describe CertificateSigningRequest\nName:         krustlet\nLabels:       &lt;none&gt;\nAnnotations:  kubectl.kubernetes.io/last-applied-configuration\n\nCreationTimestamp:  Thu, 02 Apr 2020 15:47:50 -0700\nRequesting User:    kubernetes-admin\nStatus:             Approved,Issued\nSubject:\n  Common Name:    192.168.55.201\n  Serial Number:\nSubject Alternative Names:\n         DNS Names:     ip-192-168-55-201.us-west-2.compute.internal\n         IP Addresses:  192.168.55.201\nEvents:  &lt;none&gt;\n</pre></div>\n\n\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/awslabs/amazon-eks-ami/issues/341\" style=\"background-image: url(https://avatars2.githubusercontent.com/u/3299148?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/awslabs/amazon-eks-ami/issues/341\" title=\"Certificates generated by the cluster signer are missing SANs · Issue #341 · awslabs/amazon-eks-ami\">Certificates generated by the cluster signer are missing SANs · Issue #341 · awslabs/amazon-eks-ami</a></div><div class=\"message_embed_description\">We&#39;re facing an issue that was reported before as part of another issue (#244 (comment)) but since the original issue was about something different which is fixed by now I&#39;m extracting this...</div></div></div>",
        "id": 192739191,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585868764
    },
    {
        "content": "<p>Can Krustlet support getting the log by DNS name? For example, <code>https://192.168.55.201:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust</code> becomes <code>https://ip-192-168-55-201.us-west-2.compute.internal:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust</code>. Perhaps that's recommended by EKS. Besides, IP addr can change. Using DNS name is more stable.</p>",
        "id": 192739396,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585868917
    },
    {
        "content": "<p>Is this diagram accurate for Krustlet?<br>\n<a href=\"user_uploads/15107/_S1BRzJqfPftsR0jIr-qhkm7/krustlet.png\" title=\"user_uploads/15107/_S1BRzJqfPftsR0jIr-qhkm7/krustlet.png\">krustlet.png</a></p>\n<div class=\"message_inline_image\"><a href=\"user_uploads/15107/_S1BRzJqfPftsR0jIr-qhkm7/krustlet.png\" title=\"krustlet.png\"><img src=\"user_uploads/15107/_S1BRzJqfPftsR0jIr-qhkm7/krustlet.png\"></a></div><p>I see that there is no kube-proxy equivalent for krustlet yet. I assume it's going to be in the same krustlet process.</p>",
        "id": 192748188,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585876247
    },
    {
        "content": "<p>DNS is perfectly acceptable, I don't think that is a required change for Krustlet unless we aren't configuring something. But I know we are setting the hostname when creating the node, so it seems like a k8s thing (could be totally wrong). If it is something we need to change in Krustlet, let me know and we'll add it in</p>\n<p>As for your diagram, it looks correct, except for the providers. There is a 1:1 mapping between each krustlet \"node\" and provider. To clarify: each running Krustlet process only has 1 provider, though you can run multiple krustlet processes on the same node</p>",
        "id": 192825207,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585929460
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> So it looks like AKS is using DNS addresses: </p>\n<div class=\"codehilite\"><pre><span></span># Normal pod\nhttps://aks-agentpool-81651327-vmss000000:10250/containerLogs/kube-system/tunnelfront-864c788cf6-mtkg4/tunnel-front\n# Krustlet pod\nhttps://krustlet:3000/containerLogs/default/hello-world-wasi-rust/hello-world-wasi-rust\n</pre></div>",
        "id": 192834836,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585933403
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> Krustlet boots with the node IP. It seems like AKS does a reverse lookup of IP -&gt; DNS and call the DNS instead?</p>",
        "id": 192838748,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585935180
    },
    {
        "content": "<p>Krustlet sets the hostname (there is also an ability to override it) on the node object. Here is an example node from my cluster:</p>\n<div class=\"codehilite\"><pre><span></span>apiVersion: v1\nkind: Node\nmetadata:\n  annotations:\n    node.alpha.kubernetes.io/ttl: &quot;0&quot;\n    volumes.kubernetes.io/controller-managed-attach-detach: &quot;true&quot;\n  creationTimestamp: &quot;2020-04-02T18:13:32Z&quot;\n  labels:\n    beta.kubernetes.io/arch: wasm32-wasi\n    beta.kubernetes.io/os: linux\n    kubernetes.io/arch: wasm32-wasi\n    kubernetes.io/hostname: Taylors-MacBook-Pro.local\n    kubernetes.io/os: linux\n    kubernetes.io/role: agent\n    type: krustlet\n  name: krustlet-wasi\n  resourceVersion: &quot;2182784&quot;\n  selfLink: /api/v1/nodes/krustlet-wasi\n  uid: 89b11130-8f61-44d5-b92b-edd348497517\nspec:\n  podCIDR: 10.244.0.0/24\n  podCIDRs:\n  - 10.244.0.0/24\n  taints:\n  - effect: NoExecute\n    key: krustlet/arch\n    value: wasm32-wasi\n  - effect: NoSchedule\n    key: node.kubernetes.io/unreachable\n    timeAdded: &quot;2020-04-02T18:23:57Z&quot;\n  - effect: NoExecute\n    key: node.kubernetes.io/unreachable\n    timeAdded: &quot;2020-04-02T21:21:48Z&quot;\nstatus:\n  addresses:\n  - address: 10.10.76.188\n    type: InternalIP\n  - address: Taylors-MacBook-Pro.local\n    type: Hostname\n  allocatable:\n    cpu: &quot;4&quot;\n    ephemeral-storage: 61255492Ki\n    hugepages-1Gi: &quot;0&quot;\n    hugepages-2Mi: &quot;0&quot;\n    memory: 4032800Ki\n    pods: &quot;30&quot;\n  capacity:\n    cpu: &quot;4&quot;\n    ephemeral-storage: 61255492Ki\n    hugepages-1Gi: &quot;0&quot;\n    hugepages-2Mi: &quot;0&quot;\n    memory: 4032800Ki\n    pods: &quot;30&quot;\n  conditions:\n  - lastHeartbeatTime: &quot;2020-04-02T18:13:32Z&quot;\n    lastTransitionTime: &quot;2020-04-02T18:23:57Z&quot;\n    message: Kubelet stopped posting node status.\n    reason: NodeStatusUnknown\n    status: Unknown\n    type: Ready\n  - lastHeartbeatTime: &quot;2020-04-02T18:13:32Z&quot;\n    lastTransitionTime: &quot;2020-04-02T18:13:32Z&quot;\n    message: kubelet has sufficient disk space available\n    reason: KubeletHasSufficientDisk\n    status: &quot;False&quot;\n    type: OutOfDisk\n  - lastHeartbeatTime: &quot;2020-04-02T18:13:32Z&quot;\n    lastTransitionTime: &quot;2020-04-02T18:23:57Z&quot;\n    message: Kubelet never posted node status.\n    reason: NodeStatusNeverUpdated\n    status: Unknown\n    type: MemoryPressure\n  - lastHeartbeatTime: &quot;2020-04-02T18:13:32Z&quot;\n    lastTransitionTime: &quot;2020-04-02T18:23:57Z&quot;\n    message: Kubelet never posted node status.\n    reason: NodeStatusNeverUpdated\n    status: Unknown\n    type: DiskPressure\n  - lastHeartbeatTime: &quot;2020-04-02T18:13:32Z&quot;\n    lastTransitionTime: &quot;2020-04-02T18:23:57Z&quot;\n    message: Kubelet never posted node status.\n    reason: NodeStatusNeverUpdated\n    status: Unknown\n    type: PIDPressure\n  daemonEndpoints:\n    kubeletEndpoint:\n      Port: 3001\n  nodeInfo:\n    architecture: wasm-wasi\n    bootID: &quot;&quot;\n    containerRuntimeVersion: mvp\n    kernelVersion: &quot;&quot;\n    kubeProxyVersion: v1.17.0\n    kubeletVersion: v1.17.0\n    machineID: &quot;&quot;\n    operatingSystem: linux\n    osImage: &quot;&quot;\n    systemUUID: &quot;&quot;\n</pre></div>",
        "id": 192839419,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585935539
    },
    {
        "content": "<p>If you look at the address block, it has both the IP and the hostname setup</p>",
        "id": 192839441,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585935552
    },
    {
        "content": "<p>Basically, I don't see anything with this being a krustlet problem and everything with how we get certs configured properly</p>",
        "id": 192839503,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585935593
    },
    {
        "content": "<p>But I could totally be wrong</p>",
        "id": 192839578,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585935611
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> Is there someone you know who has lots of EKS knowledge? It may be useful to engage them to see if we are creating certs properly for EKS</p>",
        "id": 192841553,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1585936549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span>  This is the node info (one EKS kubelet node and one krustlet node):</p>\n<div class=\"codehilite\"><pre><span></span>apiVersion: v1\nitems:\n- apiVersion: v1\n  kind: Node\n  metadata:\n    annotations:\n      node.alpha.kubernetes.io/ttl: &quot;0&quot;\n      volumes.kubernetes.io/controller-managed-attach-detach: &quot;true&quot;\n    creationTimestamp: &quot;2020-04-02T04:30:13Z&quot;\n    labels:\n      alpha.eksctl.io/cluster-name: krustlet-o\n      alpha.eksctl.io/instance-id: i-0f4560ac42f0488cb\n      alpha.eksctl.io/nodegroup-name: ng-6acf5969\n      beta.kubernetes.io/arch: amd64\n      beta.kubernetes.io/instance-type: m5.large\n      beta.kubernetes.io/os: linux\n      failure-domain.beta.kubernetes.io/region: us-west-2\n      failure-domain.beta.kubernetes.io/zone: us-west-2a\n      kubernetes.io/arch: amd64\n      kubernetes.io/hostname: ip-192-168-23-105.us-west-2.compute.internal\n      kubernetes.io/os: linux\n    name: ip-192-168-23-105.us-west-2.compute.internal\n    resourceVersion: &quot;245495&quot;\n    selfLink: /api/v1/nodes/ip-192-168-23-105.us-west-2.compute.internal\n    uid: a5151dd5-749a-11ea-95cb-0a905beb9b08\n  spec:\n    providerID: aws:///us-west-2a/i-0f4560ac42f0488cb\n  status:\n    addresses:\n    - address: 192.168.23.105\n      type: InternalIP\n    - address: 34.221.97.70\n      type: ExternalIP\n    - address: ip-192-168-23-105.us-west-2.compute.internal\n      type: Hostname\n    - address: ip-192-168-23-105.us-west-2.compute.internal\n      type: InternalDNS\n    - address: ec2-34-221-97-70.us-west-2.compute.amazonaws.com\n      type: ExternalDNS\n    allocatable:\n      attachable-volumes-aws-ebs: &quot;25&quot;\n      cpu: &quot;2&quot;\n      ephemeral-storage: &quot;19316009748&quot;\n      hugepages-1Gi: &quot;0&quot;\n      hugepages-2Mi: &quot;0&quot;\n      memory: 7762632Ki\n      pods: &quot;29&quot;\n    capacity:\n      attachable-volumes-aws-ebs: &quot;25&quot;\n      cpu: &quot;2&quot;\n      ephemeral-storage: 20959212Ki\n      hugepages-1Gi: &quot;0&quot;\n      hugepages-2Mi: &quot;0&quot;\n      memory: 7865032Ki\n      pods: &quot;29&quot;\n    conditions:\n    - lastHeartbeatTime: &quot;2020-04-04T00:47:12Z&quot;\n      lastTransitionTime: &quot;2020-04-02T04:30:13Z&quot;\n      message: kubelet has sufficient memory available\n      reason: KubeletHasSufficientMemory\n      status: &quot;False&quot;\n      type: MemoryPressure\n    - lastHeartbeatTime: &quot;2020-04-04T00:47:12Z&quot;\n      lastTransitionTime: &quot;2020-04-02T04:30:13Z&quot;\n      message: kubelet has no disk pressure\n      reason: KubeletHasNoDiskPressure\n      status: &quot;False&quot;\n      type: DiskPressure\n    - lastHeartbeatTime: &quot;2020-04-04T00:47:12Z&quot;\n      lastTransitionTime: &quot;2020-04-02T04:30:13Z&quot;\n      message: kubelet has sufficient PID available\n      reason: KubeletHasSufficientPID\n      status: &quot;False&quot;\n      type: PIDPressure\n    - lastHeartbeatTime: &quot;2020-04-04T00:47:12Z&quot;\n      lastTransitionTime: &quot;2020-04-02T04:30:33Z&quot;\n      message: kubelet is posting ready status\n      reason: KubeletReady\n      status: &quot;True&quot;\n      type: Ready\n    daemonEndpoints:\n      kubeletEndpoint:\n        Port: 10250\n    images:\n    - names:\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni@sha256:a6d23b9fb3d4ba549321e32a28c42d8e79da203897072e93874472ab9e80b768\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.5.5\n      sizeBytes: 263850871\n    - names:\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy@sha256:d3a6122f63202665aa50f3c08644ef504dbe56c76a1e0ab05f8e296328f3a6b4\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy:v1.14.6\n      sizeBytes: 82044796\n    - names:\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns@sha256:ff6eadc11a45d8cbad5473b0950e01230c7f23bcb53392c80550feab69f905f1\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns:v1.6.6\n      sizeBytes: 44336675\n    - names:\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/pause-amd64@sha256:bea77c323c47f7b573355516acf927691182d1333333d1f41b7544012fab7adf\n      - 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/pause-amd64:3.1\n      sizeBytes: 742472\n    nodeInfo:\n      architecture: amd64\n      bootID: 058a481f-38c1-4368-8faf-1b67966bb06a\n      containerRuntimeVersion: docker://18.9.9\n      kernelVersion: 4.14.171-136.231.amzn2.x86_64\n      kubeProxyVersion: v1.14.9-eks-1f0ca9\n      kubeletVersion: v1.14.9-eks-1f0ca9\n      machineID: ec2574a7ef250c7988b7b403a4de213e\n      operatingSystem: linux\n      osImage: Amazon Linux 2\n      systemUUID: EC2574A7-EF25-0C79-88B7-B403A4DE213E\n- apiVersion: v1\n  kind: Node\n  metadata:\n    annotations:\n      node.alpha.kubernetes.io/ttl: &quot;0&quot;\n      volumes.kubernetes.io/controller-managed-attach-detach: &quot;true&quot;\n    creationTimestamp: &quot;2020-04-02T23:01:03Z&quot;\n    labels:\n      beta.kubernetes.io/arch: wasm32-wasi\n      beta.kubernetes.io/os: linux\n      kubernetes.io/arch: wasm32-wasi\n      kubernetes.io/hostname: ip-192-168-55-201.us-west-2.compute.internal\n      kubernetes.io/os: linux\n      kubernetes.io/role: agent\n      type: krustlet\n    name: ip-192-168-55-201.us-west-2.compute.internal\n    resourceVersion: &quot;118145&quot;\n    selfLink: /api/v1/nodes/ip-192-168-55-201.us-west-2.compute.internal\n    uid: d3f725a8-7535-11ea-95cb-0a905beb9b08\n  spec:\n    podCIDR: 10.244.0.0/24\n    taints:\n    - effect: NoSchedule\n      key: node.kubernetes.io/unreachable\n      timeAdded: &quot;2020-04-03T01:25:45Z&quot;\n    - effect: NoExecute\n      key: node.kubernetes.io/unreachable\n      timeAdded: &quot;2020-04-03T01:25:50Z&quot;\n  status:\n    addresses:\n    - address: 192.168.55.201\n      type: InternalIP\n    - address: ip-192-168-55-201.us-west-2.compute.internal\n      type: Hostname\n    allocatable:\n      cpu: &quot;4&quot;\n      ephemeral-storage: 61255492Ki\n      hugepages-1Gi: &quot;0&quot;\n      hugepages-2Mi: &quot;0&quot;\n      memory: 4032800Ki\n      pods: &quot;30&quot;\n    capacity:\n      cpu: &quot;4&quot;\n      ephemeral-storage: 61255492Ki\n      hugepages-1Gi: &quot;0&quot;\n      hugepages-2Mi: &quot;0&quot;\n      memory: 4032800Ki\n      pods: &quot;30&quot;\n    conditions:\n    - lastHeartbeatTime: &quot;2020-04-02T23:01:03Z&quot;\n      lastTransitionTime: &quot;2020-04-03T01:25:45Z&quot;\n      message: Kubelet stopped posting node status.\n      reason: NodeStatusUnknown\n      status: Unknown\n      type: Ready\n    - lastHeartbeatTime: &quot;2020-04-02T23:01:03Z&quot;\n      lastTransitionTime: &quot;2020-04-02T23:01:03Z&quot;\n      message: kubelet has sufficient disk space available\n      reason: KubeletHasSufficientDisk\n      status: &quot;False&quot;\n      type: OutOfDisk\n    - lastHeartbeatTime: &quot;2020-04-02T23:01:03Z&quot;\n      lastTransitionTime: &quot;2020-04-03T01:25:45Z&quot;\n      message: Kubelet never posted node status.\n      reason: NodeStatusNeverUpdated\n      status: Unknown\n      type: MemoryPressure\n    - lastHeartbeatTime: &quot;2020-04-02T23:01:03Z&quot;\n      lastTransitionTime: &quot;2020-04-03T01:25:45Z&quot;\n      message: Kubelet never posted node status.\n      reason: NodeStatusNeverUpdated\n      status: Unknown\n      type: DiskPressure\n    - lastHeartbeatTime: &quot;2020-04-02T23:01:03Z&quot;\n      lastTransitionTime: &quot;2020-04-03T01:25:45Z&quot;\n      message: Kubelet never posted node status.\n      reason: NodeStatusNeverUpdated\n      status: Unknown\n      type: PIDPressure\n    daemonEndpoints:\n      kubeletEndpoint:\n        Port: 3000\n    nodeInfo:\n      architecture: wasm-wasi\n      bootID: &quot;&quot;\n      containerRuntimeVersion: mvp\n      kernelVersion: &quot;&quot;\n      kubeProxyVersion: v1.17.0\n      kubeletVersion: v1.17.0\n      machineID: &quot;&quot;\n      operatingSystem: linux\n      osImage: &quot;&quot;\n      systemUUID: &quot;&quot;\nkind: List\nmetadata:\n  resourceVersion: &quot;&quot;\n  selfLink: &quot;&quot;\n</pre></div>",
        "id": 192880904,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585961921
    },
    {
        "content": "<p>How did you get the container log ULR for the normal pod (the <code>containerLogs</code> one)? I want to compare it to understand why IP (<a href=\"https://192.168.55.201:3000\" title=\"https://192.168.55.201:3000\">https://192.168.55.201:3000</a>) was preferred instead of the DNS name.</p>",
        "id": 192881052,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585962044
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192881190,
        "sender_full_name": "Owen Ou",
        "timestamp": 1585962230
    },
    {
        "content": "<p>Keep at it, <span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> .  When we figure out precisely what is going on with Krustlet and EKS that will help us document it and then work to get it working elsewhere, too. GKE, Alibaba, DO, and so on.....</p>",
        "id": 192908175,
        "sender_full_name": "Ralph",
        "timestamp": 1586007723
    },
    {
        "content": "<blockquote>\n<p>How did you get the container log ULR for the normal pod (the containerLogs one)? I want to compare it to understand why IP (<a href=\"https://192.168.55.201:3000\" title=\"https://192.168.55.201:3000\">https://192.168.55.201:3000</a>) was preferred instead of the DNS name.</p>\n</blockquote>\n<p>Funny story, this is actually because my node was offline when I did <code>kubectl logs</code> so when the request timed out, it told me that what the URL it timed out trying to hit. I am guessing you might be able to find it with the right logging level in your apiserver logs</p>",
        "id": 193063108,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1586188872
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> if you are still having problems, someone in the community created instructions for using Inlets to tunnel traffic to your krustlet node. Should work anywhere for any k8s cluster: <a href=\"https://gist.github.com/alexellis/d55d6d6a96ea9ae8d9d65b95297ec27e\" title=\"https://gist.github.com/alexellis/d55d6d6a96ea9ae8d9d65b95297ec27e\">https://gist.github.com/alexellis/d55d6d6a96ea9ae8d9d65b95297ec27e</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/alexellis/d55d6d6a96ea9ae8d9d65b95297ec27e\" style=\"background-image: url(https://github.githubassets.com/images/modules/gists/gist-og-image.png)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/alexellis/d55d6d6a96ea9ae8d9d65b95297ec27e\" title=\"krustlet-inlets\">krustlet-inlets</a></div><div class=\"message_embed_description\">krustlet-inlets. GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 193238145,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1586288707
    },
    {
        "content": "<p>Trying to help automate more of the EKS setup: <a href=\"https://github.com/deislabs/krustlet/pull/197\" title=\"https://github.com/deislabs/krustlet/pull/197\">https://github.com/deislabs/krustlet/pull/197</a> cc: <span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> <span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span> <span class=\"user-mention\" data-user-id=\"280225\">@Matt Fisher</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/pull/197\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/pull/197\" title=\"Allow specifying labels by jingweno · Pull Request #197 · deislabs/krustlet\">Allow specifying labels by jingweno · Pull Request #197 · deislabs/krustlet</a></div><div class=\"message_embed_description\">Add --node-labels to the command line option which appends extra\nlabels when registering a Krustlet node.\nDisclaimer: My Rust skill is rusty and my code may not be idiomatic Rust code :-).\nThis fix...</div></div></div>",
        "id": 194626086,
        "sender_full_name": "Owen Ou",
        "timestamp": 1587344926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> Can you take a look at <a href=\"https://github.com/deislabs/krustlet/pull/199\" title=\"https://github.com/deislabs/krustlet/pull/199\">https://github.com/deislabs/krustlet/pull/199</a>? We had the author of that PR join us in our weekly call today. He said he took the work you did and then modified it to parse everything according to the rule specified in the kubelet help text</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/pull/199\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/pull/199\" title=\"node labels being applied with business rules from help page enforced by DerekStrickland · Pull Request #199 · deislabs/krustlet\">node labels being applied with business rules from help page enforced by DerekStrickland · Pull Request #199 · deislabs/krustlet</a></div><div class=\"message_embed_description\">I&#39;m new to Rust and krustlet, so forgive me if it&#39;s not spot on. Happy to take feedback and incorporate.  I think this effectively enforces the rules specified by the man page, and also han...</div></div></div>",
        "id": 194700224,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1587400168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"280224\">@Taylor Thomas</span>  I see. I only quickly added support for labels to avoid manually labeling nodes (<a href=\"https://github.com/deislabs/krustlet/pull/197\" title=\"https://github.com/deislabs/krustlet/pull/197\">https://github.com/deislabs/krustlet/pull/197</a>) but it doesn't validate according to the spec. It's a nice thing to have</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/pull/197\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/pull/197\" title=\"Allow specifying labels by jingweno · Pull Request #197 · deislabs/krustlet\">Allow specifying labels by jingweno · Pull Request #197 · deislabs/krustlet</a></div><div class=\"message_embed_description\">Add --node-labels to the command line option which appends extra\nlabels when registering a Krustlet node.\nDisclaimer: My Rust skill is rusty and my code may not be idiomatic Rust code :-).\nThis fix...</div></div></div>",
        "id": 194739531,
        "sender_full_name": "Owen Ou",
        "timestamp": 1587420365
    },
    {
        "content": "<p>Is there anything I could help with <a href=\"https://github.com/deislabs/krustlet/issues/187\" title=\"https://github.com/deislabs/krustlet/issues/187\">https://github.com/deislabs/krustlet/issues/187</a>? It's a blocker to get a full experience on EKS</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/issues/187\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/issues/187\" title=\"Panic on EKS while watching nodes (401 unauthorized) · Issue #187 · deislabs/krustlet\">Panic on EKS while watching nodes (401 unauthorized) · Issue #187 · deislabs/krustlet</a></div><div class=\"message_embed_description\">I don&#39;t have repro steps other than standing up an EKS cluster and waiting for the node to show up as NotReady. Prior to the panic, the node was Ready and was successfully running WebAssembly a...</div></div></div>",
        "id": 194739568,
        "sender_full_name": "Owen Ou",
        "timestamp": 1587420409
    },
    {
        "content": "<p>Also, I didn't know you guys have a community weekly call. Is it open to everybody? Thinking that I may join and ask questions when we collaborate more closely in the future.</p>",
        "id": 194739685,
        "sender_full_name": "Owen Ou",
        "timestamp": 1587420494
    },
    {
        "content": "<p>Yep, we have an open call every monday</p>",
        "id": 194740986,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1587421449
    },
    {
        "content": "<p>And feel free to take on 187. Ryan suggested something we could do there</p>",
        "id": 194741021,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1587421471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253989\">@Peter Huene</span> <span class=\"user-mention\" data-user-id=\"273855\">@Owen Ou</span> <a href=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-618516479\" title=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-618516479\">https://github.com/deislabs/krustlet/issues/187#issuecomment-618516479</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-618516479\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-618516479\" title=\"Panic on EKS while watching nodes (401 unauthorized) · Issue #187 · deislabs/krustlet\">Panic on EKS while watching nodes (401 unauthorized) · Issue #187 · deislabs/krustlet</a></div><div class=\"message_embed_description\">I don&#39;t have repro steps other than standing up an EKS cluster and waiting for the node to show up as NotReady. Prior to the panic, the node was Ready and was successfully running WebAssembly a...</div></div></div>",
        "id": 195090166,
        "sender_full_name": "Taylor Thomas",
        "timestamp": 1587661063
    },
    {
        "content": "<p>I'll check today to see how the fix goes.</p>",
        "id": 195096505,
        "sender_full_name": "Peter Huene",
        "timestamp": 1587664172
    },
    {
        "content": "<p>Fix is looking good so far.  I'm going to leave the nodes running for a little while and monitor the service log.</p>",
        "id": 195142836,
        "sender_full_name": "Peter Huene",
        "timestamp": 1587698093
    },
    {
        "content": "<p>Trying to help validate this too: <a href=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-619424431\" title=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-619424431\">https://github.com/deislabs/krustlet/issues/187#issuecomment-619424431</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-619424431\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/44041561?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/deislabs/krustlet/issues/187#issuecomment-619424431\" title=\"Panic on EKS while watching nodes (401 unauthorized) · Issue #187 · deislabs/krustlet\">Panic on EKS while watching nodes (401 unauthorized) · Issue #187 · deislabs/krustlet</a></div><div class=\"message_embed_description\">I don&#39;t have repro steps other than standing up an EKS cluster and waiting for the node to show up as NotReady. Prior to the panic, the node was Ready and was successfully running WebAssembly a...</div></div></div>",
        "id": 195297580,
        "sender_full_name": "Owen Ou",
        "timestamp": 1587840600
    },
    {
        "content": "<p>For <code>wasm-to-oci</code>, is it expected that pushing to docker hub fails? <a href=\"https://github.com/engineerd/wasm-to-oci/issues/7\" title=\"https://github.com/engineerd/wasm-to-oci/issues/7\">https://github.com/engineerd/wasm-to-oci/issues/7</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/engineerd/wasm-to-oci/issues/7\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/47736799?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/engineerd/wasm-to-oci/issues/7\" title=\"Try pushing to docker hub and fail · Issue #7 · engineerd/wasm-to-oci\">Try pushing to docker hub and fail · Issue #7 · engineerd/wasm-to-oci</a></div><div class=\"message_embed_description\">Is pushing to docker hub supported? wasm-to-oci --log debug push target/wasm32-wasi/debug/hello-world-rust.wasm docker.io/jingweno/wasm:1234 Error: failed commit on ref &quot;manifest-sha256:beb9a5...</div></div></div>",
        "id": 195297745,
        "sender_full_name": "Owen Ou",
        "timestamp": 1587840879
    },
    {
        "content": "<p>(<a href=\"https://github.com/engineerd/wasm-to-oci/issues/7#issuecomment-619432537\" title=\"https://github.com/engineerd/wasm-to-oci/issues/7#issuecomment-619432537\">https://github.com/engineerd/wasm-to-oci/issues/7#issuecomment-619432537</a>)<br>\nTL; DR - the proposal used by wasm-to-oci, while an official proposal, is not yet implemented in most container registries - which actively reject unknown media types.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/engineerd/wasm-to-oci/issues/7#issuecomment-619432537\" style=\"background-image: url(https://avatars1.githubusercontent.com/u/47736799?s=400&amp;v=4)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/engineerd/wasm-to-oci/issues/7#issuecomment-619432537\" title=\"Try pushing to docker hub and fail · Issue #7 · engineerd/wasm-to-oci\">Try pushing to docker hub and fail · Issue #7 · engineerd/wasm-to-oci</a></div><div class=\"message_embed_description\">Is pushing to docker hub supported? wasm-to-oci --log debug push target/wasm32-wasi/debug/hello-world-rust.wasm docker.io/jingweno/wasm:1234 Error: failed commit on ref &quot;manifest-sha256:beb9a5...</div></div></div>",
        "id": 195300206,
        "sender_full_name": "Radu Matei",
        "timestamp": 1587844663
    }
]