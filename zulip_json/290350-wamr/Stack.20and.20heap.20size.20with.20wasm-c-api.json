[
    {
        "content": "<p>Hi, I've been using the wasm-c-api of WAMR so I can use <code>wasm_func_call</code> to obtain <code>wasm_trap_t</code> values which I can use to inspect the stack trace on crash. This means I've also had to use the wasm-c-api functions for creating the instance (since I need to pass a <code>wasm_func_t</code> to <code>wasm_func_call</code>, which I can obtain only from a <code>wasm_extern_t</code> which I obtain from <code>wasm_instance_exports</code> which requires a <code>wasm_instance_t</code>). <code>wasm_instance_t</code> needs to be constructed with <code>wasm_instance_new</code>, which doesn't take stack size and heap size parameters, unlike <code>wasm_runtime_instantiate</code>, and instead hardcodes them to 32 * 1024.</p>\n<p>Is there a way to obtain a <code>wasm_instance_t</code>, but edit the stack and heap sizes? If there isn't, perhaps  the <code>wasm_engine_new_with_config</code> API could be used to provide configuration like this.</p>",
        "id": 245966276,
        "sender_full_name": "Tyler Zhang",
        "timestamp": 1626272411
    },
    {
        "content": "<p>If there is no way to provide this configuration would it be okay if I raise a PR to add the <code>wasm_config_t</code> functions to add this functionality?</p>",
        "id": 245968992,
        "sender_full_name": "Tyler Zhang",
        "timestamp": 1626273565
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"426937\">@Tyler Zhang</span>  More missing wasm-c-api APIs were implemented with latest patch and the following new API was added:<br>\nwasm_instance_t* wasm_instance_new_with_args(<br>\n  wasm_store_t<em>, const wasm_module_t</em>, const wasm_extern_t *const imports[],<br>\n  own wasm_trap_t**, const uint32_t stack_size, const uint32_t heap_size<br>\n);<br>\nCould you please use it to create the module instance instead of wasm_instance_new? Thanks.</p>",
        "id": 247528966,
        "sender_full_name": "Wenyong Huang",
        "timestamp": 1627514212
    }
]