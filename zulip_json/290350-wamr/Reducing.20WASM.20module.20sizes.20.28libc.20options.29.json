[
    {
        "content": "<p>Hello. I'm looking for ways to reduce the size of my WASM executables (C with clang). I know that I can use the built-in libc and I've successfully reduced my hello world app to about 300 bytes (using -nostdlib). If I don't use that option, it ballons to 36k. I assume that it's because it's linking in libc into my WASM executable. What I'm wondering if there is a way to compile w/o libc and then reference the libc separately and share it for all of the WASM modules I run. That way my WASM executables are as small as possible.</p>",
        "id": 396923451,
        "sender_full_name": "Stephen Berard",
        "timestamp": 1697468682
    },
    {
        "content": "<p>Yes you are right. clang packs libc content(as wasi-libc) into the generation and causes the size gap between w/ and w/o<code>--nostdlib</code>. </p>\n<p>There are a few ways to reduce </p>\n<ul>\n<li><code>-nostdlib</code> and iwasm+builtin-libc. please refer to <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/9ed26404d5f0f5b76c803228d58ad0fd5ac64248/doc/build_wasm_app.md#2-how-to-reduce-the-footprint\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/9ed26404d5f0f5b76c803228d58ad0fd5ac64248/doc/build_wasm_app.md#2-how-to-reduce-the-footprint</a>.</li>\n<li><a href=\"https://github.com/bytecodealliance/registry\">warg</a> will be a solution in the future.</li>\n<li>WASI preview2 is a redesign and modelized version. It is able to let Wasm applications only involve necessary parts of WASI instead of all of WASI.  The host implementation of WASI Preview 2 was found in this repository's <a href=\"https://github.com/bytecodealliance/wasmtime/tree/main/crates/wasi/src/preview2\">wasmtime-crates-wasi</a>.</li>\n</ul>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/registry\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/33a0dfaccfc65db2b8dc3d0c2a4bd83a0d57034b\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616439313061313734336432356333666366656237343763363363386636303666356633396565353833373938656561336465306430376536623861383836312f62797465636f6465616c6c69616e63652f7265676973747279)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/registry\" title=\"GitHub - bytecodealliance/registry: WebAssembly Registry (Warg)\">GitHub - bytecodealliance/registry: WebAssembly Registry (Warg)</a></div><div class=\"message_embed_description\">WebAssembly Registry (Warg). Contribute to bytecodealliance/registry development by creating an account on GitHub.</div></div></div>",
        "id": 397009787,
        "sender_full_name": "lum1n0us",
        "timestamp": 1697508745
    },
    {
        "content": "<p>Thanks for the response.  That is was I suspected.  Another question, is there any way to provide libc via the -<code>--native-lib</code> command line option?</p>",
        "id": 397104251,
        "sender_full_name": "Stephen Berard",
        "timestamp": 1697547829
    },
    {
        "content": "<p>It might be a good idea. But I've never tried it before. guess it needs to disable all built-ins(<code>WAMR_BUILD_LIBC_XXX</code>) first. Please let us know the experiment result.</p>",
        "id": 397199069,
        "sender_full_name": "lum1n0us",
        "timestamp": 1697587356
    },
    {
        "content": "<blockquote>\n<p>What I'm wondering if there is a way to compile w/o libc and then reference the libc separately and share it for all of the WASM modules I run</p>\n</blockquote>\n<p>recent wasi-libc has a way to build as a shared library.<br>\nWAMR has an abandoned branch for the approach. <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink\">https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/df6b9adcaacd8133803839131e660ca52a526590\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376436333130643839323365643639333734363739343265373962653430373262626366623137643832386139653135386266333633613365363134326363362f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink\" title=\"Commits · bytecodealliance/wasm-micro-runtime\">Commits · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div>",
        "id": 397642957,
        "sender_full_name": "YAMAMOTO Takashi",
        "timestamp": 1697784870
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"567999\">YAMAMOTO Takashi</span> <a href=\"#narrow/stream/290350-wamr/topic/Reducing.20WASM.20module.20sizes.20.28libc.20options.29/near/397642957\">said</a>:</p>\n<blockquote>\n<p>recent wasi-libc has a way to build as a shared library.<br>\nWAMR has an abandoned branch for the approach. <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink\">https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink</a></p>\n</blockquote>\n<p>Thanks for this.  Is there a reason why this was abandoned?  Was it because warg/WASI-preview 2 are addressing the underlying need in a different manner?</p>",
        "id": 400557303,
        "sender_full_name": "Stephen Berard",
        "timestamp": 1699284906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"571349\">Stephen Berard</span> <a href=\"#narrow/stream/290350-wamr/topic/Reducing.20WASM.20module.20sizes.20.28libc.20options.29/near/400557303\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"567999\">YAMAMOTO Takashi</span> <a href=\"#narrow/stream/290350-wamr/topic/Reducing.20WASM.20module.20sizes.20.28libc.20options.29/near/397642957\">said</a>:</p>\n<blockquote>\n<p>recent wasi-libc has a way to build as a shared library.<br>\nWAMR has an abandoned branch for the approach. <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink\">https://github.com/bytecodealliance/wasm-micro-runtime/commits/dev/dylink</a></p>\n</blockquote>\n<p>Thanks for this.  Is there a reason why this was abandoned?  Was it because warg/WASI-preview 2 are addressing the underlying need in a different manner?</p>\n</blockquote>\n<p>i don't know why it has been stalled.<br>\nhere's the associated issue: <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/1026\">https://github.com/bytecodealliance/wasm-micro-runtime/issues/1026</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/1026\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/016dab1b69a4bf079f2c772771386cc54402eec1\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f666235623235353938373835326132633061386138393332313632373961343434663035383039323939316162353735306533636539353436303835623563612f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d652f6973737565732f31303236)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/issues/1026\" title=\"An experimental shared-everything multi module feature enabled at branch dev/link · Issue #1026 · bytecodealliance/wasm-micro-runtime\">An experimental shared-everything multi module feature enabled at branch dev/link · Issue #1026 · bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">Hi, I commited an experimental shared-everything multi module linking feature recently at dev/link, which based on dynamic linking conventiion. But because the convention was updated during develop...</div></div></div>",
        "id": 400920297,
        "sender_full_name": "YAMAMOTO Takashi",
        "timestamp": 1699441194
    }
]