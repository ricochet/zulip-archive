[
    {
        "content": "<p>Hi all,<br>\nI was looking at the AOT compilation process and just have a couple questions about it when embedding WAMR in an application.</p>\n<p>First, if I enable AOT during the build process, I can use this in my host to AOT-compile Wasm modules via including (in C++ for example) <code>aot_export.h</code>? I assume this is correct based on how wamrc works, but I thought I'd ask to make sure.</p>\n<p>Second, how does linking with external libraries work? If my host links with an external library (even one provided by the operating system), and I AOT-compile that module after registering all the natives, how do I tell the AOT compiler that these libraries are required (either linked statically or dynamically) with the final AOT binary?</p>\n<p>WAMR looks like a really cool project and I can't wait to give it a spin, but thought I'd ask these questions anyhow.</p>",
        "id": 419886632,
        "sender_full_name": "Ethin Probst",
        "timestamp": 1707152340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"689416\">Ethin Probst</span> <a href=\"#narrow/stream/290350-wamr/topic/Question.20about.20AOT.20compilation.20in.20WAMR.20and.20native.20symbols/near/419886632\">said</a>:</p>\n<blockquote>\n<p>First, if I enable AOT during the build process, I can use this in my host to AOT-compile Wasm modules via including (in C++ for example) <code>aot_export.h</code>? I assume this is correct based on how wamrc works, but I thought I'd ask to make sure.</p>\n</blockquote>\n<p>Hi, the aot_export.h is mainly used for the aot compiler and llvm jit, see <code>&lt;wamr_root&gt;/wamr-compiler/main.c</code>, not sure whether you need to call the API like aot_create_comp_data, aot_compiler_init, aot_create_comp_context and so on? If not, normally you can just include wasm_export.h instead.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Second</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">how</span><span class=\"w\"> </span><span class=\"n\">does</span><span class=\"w\"> </span><span class=\"n\">linking</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">external</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"n\">work</span><span class=\"o\">?</span><span class=\"w\"> </span><span class=\"n\">If</span><span class=\"w\"> </span><span class=\"n\">my</span><span class=\"w\"> </span><span class=\"n\">host</span><span class=\"w\"> </span><span class=\"n\">links</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"n\">external</span><span class=\"w\"> </span><span class=\"n\">library</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">even</span><span class=\"w\"> </span><span class=\"n\">one</span><span class=\"w\"> </span><span class=\"n\">provided</span><span class=\"w\"> </span><span class=\"n\">by</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">operating</span><span class=\"w\"> </span><span class=\"n\">system</span><span class=\"p\">),</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">AOT</span><span class=\"o\">-</span><span class=\"n\">compile</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">registering</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">natives</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">how</span><span class=\"w\"> </span><span class=\"kr\">do</span><span class=\"w\"> </span><span class=\"n\">I</span><span class=\"w\"> </span><span class=\"n\">tell</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"n\">AOT</span><span class=\"w\"> </span><span class=\"n\">compiler</span><span class=\"w\"> </span><span class=\"n\">that</span><span class=\"w\"> </span><span class=\"n\">these</span><span class=\"w\"> </span><span class=\"n\">libraries</span><span class=\"w\"> </span><span class=\"n\">are</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">either</span><span class=\"w\"> </span><span class=\"n\">linked</span><span class=\"w\"> </span><span class=\"n\">statically</span><span class=\"w\"> </span><span class=\"n\">or</span><span class=\"w\"> </span><span class=\"n\">dynamically</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">with</span><span class=\"w\"> </span><span class=\"n\">the</span><span class=\"w\"> </span><span class=\"kr\">final</span><span class=\"w\"> </span><span class=\"n\">AOT</span><span class=\"w\"> </span><span class=\"n\">binary</span><span class=\"o\">?</span>\n</code></pre></div>\n<p>Firstly, for iwasm or wamr library, please use wasm_runtime_register_natives to register the native APIs, refer to:<br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/export_native_api.md</a><br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/native-lib\">https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/native-lib</a><br>\nSecondly, for the aot compiler, developer can also pre-tell it the info of the native APIs that will be registered by iwasm or wasm library, by <code>wamrc --native-lib=&lt;so file&gt;</code>, so as to generate the optimized code to speedup the calling process from AOT code to native API, please refer to:<br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/perf_tune.md#81-refine-callings-to-native-apis-registered-by-wasm_runtime_register_natives-from-aot-code\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/perf_tune.md#81-refine-callings-to-native-apis-registered-by-wasm_runtime_register_natives-from-aot-code</a></p>",
        "id": 422772118,
        "sender_full_name": "Wenyong Huang",
        "timestamp": 1708592009
    }
]