[
    {
        "content": "<p>hey there</p>\n<p>I am working on a toy language and I was wondering if it would make sense for me to use WASI + WAMR as a compiler backend and get AOT binaries as output? I was thinking of this chain;<br>\ncompiler frontend &gt; wat files as the IR &gt; wat2wasm to generate wasm &gt; wamr to compile</p>\n<p>does that approach makes sense?</p>\n<p>Few more questions, as I am very new to the webassembly area;</p>\n<ol>\n<li>Does webassembly, or wasi, or wamr etc impose any memory management. or am I expected to build it on my own?</li>\n<li>can I load dlls/.so files using my compiled binaries?</li>\n<li>How about support for C ABI?</li>\n</ol>\n<p>Note: I would prefer not to use cranelift as I am not comfortable with rust and would prefer c99 instead.</p>",
        "id": 395677730,
        "sender_full_name": "Rishav Sharan",
        "timestamp": 1696851204
    },
    {
        "content": "<p>Hi,</p>\n<p>yes, normally you can use WASI + WAMR as a compiler backend as long as the input is a well-formed wasm file and it compiles with the proposal of wasi snapshot preview1:<br>\n<a href=\"https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md\">https://github.com/WebAssembly/WASI/blob/main/legacy/preview1/docs.md</a><br>\nAnd maybe you can refer to the output wasm file compiled by wasi-sdk or emsdk.</p>\n<p>And there is a similar project which compiles typescript into wasm, and then uses WAMR to run the wasm file:<br>\n<a href=\"https://github.com/intel/Wasmnizer-ts\">https://github.com/intel/Wasmnizer-ts</a><br>\nNote that it uses binaryen to emit the wasm bytecodes. And now it only supports interpreter mode, since the AOT mode requires WAMR GC AOT feature which is under development.</p>\n<p>For some questions:</p>\n<ol>\n<li>Does webassembly, or wasi, or wamr etc impose any memory management. or am I expected to build it on my own?</li>\n</ol>\n<p>Per our understanding, normally the linear memory is divided into three areas: data area, aux stack area (or shadow stack) and heap area, the <code>__data_end</code> and <code>__heap_base</code> globals can be exported to mark them. Refer to:<br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md</a></p>\n<ol start=\"2\">\n<li>can I load dlls/.so files using my compiled binaries?</li>\n</ol>\n<p>WAMR runtime doesn't support loading .dll/.so files yet.</p>\n<ol start=\"3\">\n<li>How about support for C ABI?</li>\n</ol>\n<p>Do you mean calling libc APIs from wasm application? It is supported if the wasm file imports the wasi APIs. And WAMR also supports the libc-builtin APIs to support a subset of libc, in which file/socket operations are not supported. Refer to here for a list of supported libc APIs:<br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/libraries/libc-builtin/libc_builtin_wrapper.c#L989-L1041\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/core/iwasm/libraries/libc-builtin/libc_builtin_wrapper.c#L989-L1041</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/intel/Wasmnizer-ts\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/256f8eff9bb29ff5d17efe4e6797cae40efc7a02\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323961613563326561356332303230376164333961623263303438346564386133396135393066303637353664346431643132633239396535613564643163312f696e74656c2f5761736d6e697a65722d7473)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/intel/Wasmnizer-ts\" title=\"GitHub - intel/Wasmnizer-ts: Toolchain for compiling TypeScript to WasmGC\">GitHub - intel/Wasmnizer-ts: Toolchain for compiling TypeScript to WasmGC</a></div><div class=\"message_embed_description\">Toolchain for compiling TypeScript to WasmGC. Contribute to intel/Wasmnizer-ts development by creating an account on GitHub.</div></div></div>",
        "id": 396003338,
        "sender_full_name": "Wenyong Huang",
        "timestamp": 1696996697
    }
]