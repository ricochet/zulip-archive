[
    {
        "content": "<p>I'm using WAMR with a custom lldb as detailed <a href=\"https://bytecodealliance.github.io/wamr.dev/blog/wamr-source-debugging-basic/\">in this blog post</a> (written by <span class=\"user-mention\" data-user-id=\"501128\">@Jun Xu</span> if I'm not mistaken). I'm able to do what is shown in the blog post, along with displaying the Wasm bytecode using <code>x/20i</code>-like instructions. An example :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">process</span><span class=\"w\"> </span><span class=\"n\">connect</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">p</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">connect</span>:<span class=\"c1\">//127.0.0.1:1234</span>\n<span class=\"n\">Process</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">stopped</span>\n<span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">nobody</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">stop</span><span class=\"w\"> </span><span class=\"n\">reason</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">trace</span>\n<span class=\"w\">    </span><span class=\"n\">frame</span><span class=\"w\"> </span>#<span class=\"mi\">0</span>: <span class=\"mh\">0x40000000000001d4</span><span class=\"w\"> </span><span class=\"n\">canary</span>\n-&gt;  <span class=\"mh\">0x40000000000001d4</span>: <span class=\"nc\">block</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001d6</span>: <span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001d8</span>: <span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"mi\">3808</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001df</span>: <span class=\"nc\">br_if</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">                         </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">down</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">label0</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">/</span><span class=\"mi\">10</span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"mh\">0x40000000000001d4</span>\n-&gt;  <span class=\"mh\">0x40000000000001d4</span>: <span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"mi\">40</span><span class=\"w\">                 </span><span class=\"n\">block</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001d6</span>: <span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                 </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001d8</span>: <span class=\"mi\">28</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">  </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">load</span><span class=\"w\"> </span><span class=\"mi\">3808</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001df</span>: <span class=\"mi\">0</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                 </span><span class=\"n\">br_if</span><span class=\"w\">  </span><span class=\"mi\">0</span><span class=\"w\">                         </span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"mi\">0</span>: <span class=\"nc\">down</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">label0</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001e1</span>: <span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                 </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001e3</span>: <span class=\"mi\">41</span><span class=\"w\"> </span><span class=\"mi\">01</span><span class=\"w\">                 </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"mi\">1</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001e5</span>: <span class=\"mi\">36</span><span class=\"w\"> </span><span class=\"mi\">02</span><span class=\"w\"> </span><span class=\"n\">e0</span><span class=\"w\"> </span><span class=\"mi\">9</span><span class=\"n\">d</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">  </span><span class=\"kt\">i32</span><span class=\"p\">.</span><span class=\"n\">store</span><span class=\"w\"> </span><span class=\"mi\">3808</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001ec</span>: <span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">87</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">     </span><span class=\"n\">call</span><span class=\"w\">   </span><span class=\"mi\">7</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001f2</span>: <span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"mi\">8</span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">80</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">     </span><span class=\"n\">call</span><span class=\"w\">   </span><span class=\"mi\">10</span>\n<span class=\"w\">    </span><span class=\"mh\">0x40000000000001f8</span>: <span class=\"mi\">21</span><span class=\"w\"> </span><span class=\"mi\">00</span><span class=\"w\">                 </span><span class=\"n\">local</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"w\"> </span><span class=\"mi\">0</span>\n<span class=\"p\">(</span><span class=\"n\">lldb</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Basically, using <code>x/i</code> on addresses indicated by the frame allows to see the related bytecode. It seems that it was implemented so the 32-bit Wasm code memory was mapped in 64-bit address space to <code>0x40000000XXXXXXXX</code> (from what I understood of the debugging behavior and lldb Wasm patches).</p>\n<p>My question is, can we also dump other memory regions (local and global variables are the most interesting to me, but we can also consider function tables and every other Wasm memory type) ?  I tried doing it using this 32 -&gt; 64 bit memory mapping but was unable to find how to do it if it's effectively the way to do.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.github.io/wamr.dev/blog/wamr-source-debugging-basic/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1fd6f09d0a9f29dcff4d6afed1938993cec7eaf0\\/68747470733a2f2f62797465636f6465616c6c69616e63652e6769746875622e696f2f77616d722e6465762f626c6f672f77616d722d736f757263652d646562756767696e672d62617369632f636f7665722e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.github.io/wamr.dev/blog/wamr-source-debugging-basic/\" title=\"WAMR source debugging basic\">WAMR source debugging basic</a></div><div class=\"message_embed_description\">WAMR source debugging basic</div></div></div>",
        "id": 416779471,
        "sender_full_name": "Quentin MICHAUD",
        "timestamp": 1705671458
    }
]