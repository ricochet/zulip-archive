[
    {
        "content": "<p>Hi, I tried to reproduce the buffer overlow as shown in <a href=\"https://www.usenix.org/system/files/sec20-lehmann.pdf\">Everything Old is New Again: Binary Security of WebAssembly</a> Fig. 5 a).</p>\n<p>While doing that I ran in two different problems.</p>\n<p>Firstly, when looking at the stack the number of characters put into the function vulnerable doesn't correspond to the characters copied.</p>\n<p>When putting a string with 5 characters into the function everything seems to work as supposed.<br>\n<a href=\"/user_uploads/15107/_P9MHg254xXa1EPQ3ry1IgJX/5xC.png\">5xC.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/_P9MHg254xXa1EPQ3ry1IgJX/5xC.png\" title=\"5xC.png\"><img src=\"/user_uploads/15107/_P9MHg254xXa1EPQ3ry1IgJX/5xC.png\"></a></div><p>With 12 <br>\n<a href=\"/user_uploads/15107/W88GgVFjjxaAaq-a9BwojMd_/12xC.png\">12xC.png</a><br>\nor 16 characters it seems off.<br>\n<a href=\"/user_uploads/15107/hR9yyUkQbLSrxfrak4IlMODr/16xC.png\">16xC.png</a><br>\nAlso, there will never be more then 12 bytes copied.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/15107/W88GgVFjjxaAaq-a9BwojMd_/12xC.png\" title=\"12xC.png\"><img src=\"/user_uploads/15107/W88GgVFjjxaAaq-a9BwojMd_/12xC.png\"></a></div><div class=\"message_inline_image\"><a href=\"/user_uploads/15107/hR9yyUkQbLSrxfrak4IlMODr/16xC.png\" title=\"16xC.png\"><img src=\"/user_uploads/15107/hR9yyUkQbLSrxfrak4IlMODr/16xC.png\"></a></div><div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">vulnerable</span><span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">input</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">same_frame</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"BBBBBBBB\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 8x B</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">];</span>\n<span class=\"w\">    </span><span class=\"n\">save_stack</span><span class=\"p\">(</span><span class=\"s\">\"first\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">strcpy</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">input</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">save_stack</span><span class=\"p\">(</span><span class=\"s\">\"second\"</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"buffer: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"same_frame: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">same_frame</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span><span class=\"w\"> </span><span class=\"nf\">parent</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kt\">char</span><span class=\"w\"> </span><span class=\"n\">parent_frame</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">\"AAAAAAAA\"</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">// 8x A</span>\n<span class=\"w\">    </span><span class=\"n\">vulnerable</span><span class=\"p\">(</span><span class=\"s\">\"CCCCCCCCCCCC\"</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">// 12x C</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"parent_frame: %s</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">parent_frame</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>excerpt from save_stack:</p>\n<div class=\"codehilite\" data-code-language=\"C\"><pre><span></span><code><span class=\"w\">    </span><span class=\"n\">uint32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">bottom</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">exec_env</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_stack</span><span class=\"p\">.</span><span class=\"n\">bottom</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">uint32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">top</span><span class=\"w\">  </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint32</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">exec_env</span><span class=\"o\">-&gt;</span><span class=\"n\">wasm_stack</span><span class=\"p\">.</span><span class=\"n\">top</span><span class=\"p\">;</span>\n<span class=\"w\">    </span><span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"Printing:</span><span class=\"se\">\\t</span><span class=\"s\">Bottom %p</span><span class=\"se\">\\t</span><span class=\"s\">Top %p</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">bottom</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kt\">size_t</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">top</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">uint32</span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">bottom</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\">  </span><span class=\"n\">top</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">        </span><span class=\"n\">fprintf</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s\">\"%p</span><span class=\"se\">\\t\\t</span><span class=\"s\">%08x</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">i</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"n\">i</span><span class=\"p\">);</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n</code></pre></div>\n<p>And secondly, when executing the same example without the save_stack function with 12 characters in vulnerable I get the following output:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>buffer: CCCCCCCCCCCC\nsame_frame: CCCC\nparent_frame: AAAAAAA\n</code></pre></div>\n<p>and with 16 characters.</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>buffer: CCCCCCCCBBBBBBB\nsame_frame: BBBBBBB\nparent_frame: AAAAAAA\n</code></pre></div>\n<p>Even though same_frame should just be even more overwritten?!</p>\n<p>Does sombody know why these two things occur or has a working Buffer Overflow Example?</p>",
        "id": 446311583,
        "sender_full_name": "Lasse",
        "timestamp": 1719083091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"730619\">@Lasse Kr√§hner</span> Did you find any buffer overflow issue in WAMR? I tried to compile and run the source code with wasi-sdk, but the compiler reported undefined reference error for <code>save_stack</code>, and if I removed calling this function, it generated wasm file successfully and iwasm output the same result with wasmtime, I think it is as expected.</p>\n<p>For why it outputs like the above, I think it is somewhat related to wasm spec and the compiler, for example, some data is put in the wasm function's params and locals (like <code>same_frame</code> pointer, <code>buffer</code> pointer), some data is put in the linear memory (like \"AAAAAAAAAA\", \"BBBBBBBB\") and some is put in a shadow stack which resides in the linear memory (like struct parameter, and maybe 8 bytes of <code>char buffer[8]</code>, not very sure). So maybe you need to look into the details to understand more.</p>",
        "id": 446814436,
        "sender_full_name": "Wenyong Huang",
        "timestamp": 1719305172
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"415404\">@Wenyong Huang</span> Thank you for your answer. I didn't find any new buffer overflows issues, yet. <br>\nDo you have further literature on how putting data in linear memory is working exactly and  the shadow  Stack?</p>",
        "id": 447170556,
        "sender_full_name": "Lasse",
        "timestamp": 1719395062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"730619\">Lasse Kr√§hner</span> <a href=\"#narrow/stream/290350-wamr/topic/Buffer.20Overflow.20Example/near/447170556\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"415404\">Wenyong Huang</span> Thank you for your answer. I didn't find any new buffer overflows issues, yet. <br>\nDo you have further literature on how putting data in linear memory is working exactly and  the shadow  Stack?</p>\n</blockquote>\n<p>Maybe you can refer to:<br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md</a><br>\n<a href=\"https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/\">https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/</a></p>\n<p>And output more details on the compiled wasm, e.g.<br>\n(1) Add more flags for wasi-sdk or clang when cimpiling C to wasm, for example:<br>\n<code>-Wl,--emit-relocs -Wl,--export=__heap_base -Wl,--export=__data_end -Wl,--export=__stack_pointer</code><br>\nNote that the global <code>__stack_pointer</code> is the stack pointer of the shadow stack.</p>\n<p>(2) Dump details of wasm file with wabt objdump:<br>\n  wasm-objdump -s -x -r -d xxx.wasm &gt; xxx.log</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/d208b47220259fe98f57389053520fe94fe8b954/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303963306237306365613230346633616662623038346538353933303463636135336536613163653961653337653134333931396566343964383437366564642f62797465636f6465616c6c69616e63652f7761736d2d6d6963726f2d72756e74696d65&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/doc/memory_tune.md\" title=\"wasm-micro-runtime/doc/memory_tune.md at main ¬∑ bytecodealliance/wasm-micro-runtime\">wasm-micro-runtime/doc/memory_tune.md at main ¬∑ bytecodealliance/wasm-micro-runtime</a></div><div class=\"message_embed_description\">WebAssembly Micro Runtime (WAMR). Contribute to bytecodealliance/wasm-micro-runtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/8c54c649f4409f2cc38adadf3d6f8d43a782c48f/68747470733a2f2f62797465636f6465616c6c69616e63652e6769746875622e696f2f77616d722e6465762f77616d722e706e67&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.github.io/wamr.dev/blog/understand-the-wamr-heaps/\" title=\"Understand the WAMR heaps\">Understand the WAMR heaps</a></div><div class=\"message_embed_description\">Linear memory # The linear memory is a contiguous, mutable array of raw bytes. For most compilers, e.g. wasi-sdk, emsdk, rustc or asc, normally it includes three parts, data area, auxiliary stack area and heap area. The initial and maximum sizes of linear memory can be configured through the compilation parameters:\nFor wasi-sdk, the initial/max size can be specified with -Wl,‚Äìinitial-memory=n1,‚Äìmax-memory=n2 For emsdk, the initial/max size can be specified with -s INITIAL_MEMORY=n1 -s MAXIMUM_MEMORY=n2 -s ALLOW_MEMORY_GROWTH=1 or -s TOTAL_MEMORY=n For asc, they can be specified with ‚ÄìinitialMemory and ‚ÄìmaximumMemory flags</div></div></div>",
        "id": 448214243,
        "sender_full_name": "Wenyong Huang",
        "timestamp": 1719806825
    }
]