[
    {
        "content": "<p>Zoom link incoming!</p>",
        "id": 389919843,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694193163
    },
    {
        "content": "<p><a href=\"https://cosmonic.zoom.us/j/81787322401?pwd=R2lIbmhNcWcvYVRkaGFQSDYraUwzZz09\">https://cosmonic.zoom.us/j/81787322401?pwd=R2lIbmhNcWcvYVRkaGFQSDYraUwzZz09</a></p>",
        "id": 389919940,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694193212
    },
    {
        "content": "<p>Hi Folks - We've got a table of 'C' and 'C++' folks here, we are going to walk through the creation of two C components and trying to show case the two components linked together and running. </p>\n<p>We are setting up the Zoom call so you can follow along. Any questions, please ask here in this channel and I'll bring it up as we go along.</p>",
        "id": 389920640,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694193500
    },
    {
        "content": "<p>Step 1 : Required tooling....</p>",
        "id": 389920777,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694193581
    },
    {
        "content": "<p>Install <a href=\"https://github.com/bytecodealliance/wasm-tools\">https://github.com/bytecodealliance/wasm-tools</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasm-tools\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/3f5b3441e8dadd650d5ed8169966660b735f4ac3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393034663965343262613930393265303330376334343931393732643162633232376632626537333236643331323966353962343630393230636536353132662f62797465636f6465616c6c69616e63652f7761736d2d746f6f6c73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasm-tools\" title=\"GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust\">GitHub - bytecodealliance/wasm-tools: Low level tooling for WebAssembly in Rust</a></div><div class=\"message_embed_description\">Low level tooling for WebAssembly in Rust. Contribute to bytecodealliance/wasm-tools development by creating an account on GitHub.</div></div></div>",
        "id": 389920890,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694193615
    },
    {
        "content": "<p>Install <a href=\"https://github.com/Webassembly/wasi-sdk\">https://github.com/Webassembly/wasi-sdk</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Webassembly/wasi-sdk\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/ab47b1f46fef53e7ff4496a13bee9f4180a68504\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373761666562316133386531323632303866333866653139303939363931363235666566316632373036333062363535613466383833623035303066623830302f576562417373656d626c792f776173692d73646b)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Webassembly/wasi-sdk\" title=\"GitHub - WebAssembly/wasi-sdk: WASI-enabled WebAssembly C/C++ toolchain\">GitHub - WebAssembly/wasi-sdk: WASI-enabled WebAssembly C/C++ toolchain</a></div><div class=\"message_embed_description\">WASI-enabled WebAssembly C/C++ toolchain. Contribute to WebAssembly/wasi-sdk development by creating an account on GitHub.</div></div></div>",
        "id": 389921013,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694193670
    },
    {
        "content": "<p>Install <a href=\"https://github.com/bytecodealliance/wit-bindgen/releases/tag/wit-bindgen-cli-0.11.0\">https://github.com/bytecodealliance/wit-bindgen/releases/tag/wit-bindgen-cli-0.11.0</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wit-bindgen/releases/tag/wit-bindgen-cli-0.11.0\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1f4c47152e801279c4fa05cfd6ee21584c509691\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f373666363830356538666363333565633362656564336162313765376633396266363863306536623436323031336239656336653833343463653233613333652f62797465636f6465616c6c69616e63652f7769742d62696e6467656e2f72656c65617365732f7461672f7769742d62696e6467656e2d636c692d302e31312e30)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wit-bindgen/releases/tag/wit-bindgen-cli-0.11.0\" title=\"Release wit-bindgen-cli-0.11.0 · bytecodealliance/wit-bindgen\">Release wit-bindgen-cli-0.11.0 · bytecodealliance/wit-bindgen</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - Release wit-bindgen-cli-0.11.0 · bytecodealliance/wit-bindgen</div></div></div>",
        "id": 389921070,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694193701
    },
    {
        "content": "<p>make sure you have the wasi-sdk, wasm-tools, wit bind-gen</p>",
        "id": 389921157,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694193727
    },
    {
        "content": "<p>Make sure you get version 20 of the wasi-sdk ...</p>",
        "id": 389921253,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694193774
    },
    {
        "content": "<p>There is no way to check what version of the wasi-sdk installed, but, if you check that you have clang version 16, that <em>should</em> be WASI SDK 20 .</p>",
        "id": 389921616,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694193945
    },
    {
        "content": "<p><a href=\"https://github.com/Kylebrown9/wasmcon2023/\">https://github.com/Kylebrown9/wasmcon2023/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/Kylebrown9/wasmcon2023/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/641cbf906f35cbba2710e92cfc8ff68c77f10ea8\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f376235646635303638383830306131623932316164393834376536386139393137666531336234636231666165343435313330616137653965386637356566392f4b796c6562726f776e392f7761736d636f6e32303233)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/Kylebrown9/wasmcon2023/\" title=\"GitHub - Kylebrown9/wasmcon2023\">GitHub - Kylebrown9/wasmcon2023</a></div><div class=\"message_embed_description\">Contribute to Kylebrown9/wasmcon2023 development by creating an account on GitHub.</div></div></div>",
        "id": 389921748,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694193996
    },
    {
        "content": "<p>We are looking at this file... <br>\n<a href=\"https://github.com/Kylebrown9/wasmcon2023/blob/main/wit/greeter.wit\">https://github.com/Kylebrown9/wasmcon2023/blob/main/wit/greeter.wit</a></p>",
        "id": 389921972,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694194094
    },
    {
        "content": "<p>It contains a line like this - &gt; interface %interface. The weird precentage inside of the name is a bit confusing. Interface is a keyword. Normally you wouldn't be able to use a keyword as an indentifier in your interface name, but the percentage symbol allows you to overcome this problem.</p>",
        "id": 389922128,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694194180
    },
    {
        "content": "<p>Check out the c folder here -&gt; <a href=\"https://github.com/Kylebrown9/wasmcon2023/tree/main/components/c\">https://github.com/Kylebrown9/wasmcon2023/tree/main/components/c</a></p>",
        "id": 389922316,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694194240
    },
    {
        "content": "<p>I am getting error .</p>\n<p>wit-bindgen c ../../wit/greeter.wit --world proxy-greeter</p>\n<p>Error: expected <code>default</code>, <code>world</code> or <code>interface</code>, found an identifier<br>\n     --&gt; ../../wit/greeter.wit:1:1<br>\n      |<br>\n    1 | package wasmcon2023:greet<br>\n      | ^------</p>",
        "id": 389922650,
        "sender_full_name": "Ayako Akasaka",
        "timestamp": 1694194398
    },
    {
        "content": "<p>I was using old version of wit-bindgen, with latest one, no problem <br>\nwit-bindgen-cli 0.11.0 (15907098d 2023-08-30)</p>",
        "id": 389923187,
        "sender_full_name": "Ayako Akasaka",
        "timestamp": 1694194684
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/3PB1Nw_sSbWizx_YWe03neRU/c-comp-install.sh\">c-comp-install.sh</a></p>\n<p>Script to setup and install the tools so far</p>",
        "id": 389925422,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1694195755
    },
    {
        "content": "<p><a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/389925422\">A message</a> was moved here from <a class=\"stream-topic\" data-stream-id=\"397735\" href=\"/#narrow/stream/397735-componentize-the-world-2023/topic/Install.20sc\">#componentize-the-world-2023 &gt; Install sc</a> by <span class=\"user-mention silent\" data-user-id=\"270657\">Shravan Narayan</span>.</p>",
        "id": 389925555,
        "sender_full_name": "Notification Bot",
        "timestamp": 1694195801
    },
    {
        "content": "<p>cargo install wasmtime-cli --features=component-model</p>",
        "id": 389926346,
        "sender_full_name": "Ayako Akasaka",
        "timestamp": 1694196115
    },
    {
        "content": "<p>cargo install wasmtime-cli --features=component-model --git <a href=\"https://github.com/bytecodealliance/wasmtime\">https://github.com/bytecodealliance/wasmtime</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/f0e1a5db4fa2b87083aff17b1ae8669d18bfe82d\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353732396163393730663564656463653766643935613736366531613434313236373130323663333364356539653366646538326533653832366562396635352f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime\" title=\"GitHub - bytecodealliance/wasmtime: A fast and secure runtime for WebAssembly\">GitHub - bytecodealliance/wasmtime: A fast and secure runtime for WebAssembly</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 389927512,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1694196621
    },
    {
        "content": "<p>Latest work-in-progress script</p>\n<p><a href=\"/user_uploads/15107/7TkMOTC5qplNOyeTsOKwTTo1/c-comp-install.sh\">c-comp-install.sh</a></p>",
        "id": 389927907,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1694196812
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/_ejsevsHodv-SRv4fJrhCUpC/component-endpoint.c\">component-endpoint.c</a></p>\n<p>Greeter</p>",
        "id": 389933736,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1694199415
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"421591\">@Bailey Hayes</span>  - help! how do we get wasm-compose working ? :)</p>",
        "id": 389935937,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694200371
    },
    {
        "content": "<p><a href=\"/user_uploads/15107/owXW11AEi3qr1aeUy-WQAlFQ/C-components-WIP.zip\">C-components-WIP.zip</a></p>\n<p>Here is my WIP, Run the <a href=\"http://c-comp-install.sh\">c-comp-install.sh</a></p>",
        "id": 389936703,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1694200741
    },
    {
        "content": "<p>In a wasmtime git checkout: wit-bindgen c crates/wasi/wit --world=wasi:cli/command</p>",
        "id": 389942291,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694203294
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435699\">Chris Woods</span> <a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/389935937\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"421591\">Bailey Hayes</span>  - help! how do we get wasm-compose working ? :)</p>\n</blockquote>\n<p>Let's do it! Where are we building?</p>",
        "id": 389943232,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694203710
    },
    {
        "content": "<p>I like to use <a href=\"https://wasmbuilder.app\">https://wasmbuilder.app</a> when I'm composing</p>",
        "id": 389943910,
        "sender_full_name": "Bailey Hayes",
        "timestamp": 1694204026
    },
    {
        "content": "<p>$ wit-bindgen c crates/wasi/wit --world=wasi:cli/command<br>\n$ cat &gt; implementation.c<br>\n#include \"command.h\"</p>\n<p>bool exports_wasi_cli_run_run(void) {<br>\n    return true;<br>\n}<br>\n$ clang implementation.c command.c command_component_type.o  -mexec-model=reactor -o core.wasm<br>\n$ wasm-tools component new core.wasm -o component.wasm<br>\n$ cargo run --features=component-model -- --wasm-features component-model component.wasm</p>",
        "id": 389946899,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694205437
    },
    {
        "content": "<p>$ target/debug/wasmtime --wasm-features component-model component.wasm</p>",
        "id": 389948235,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1694206147
    },
    {
        "content": "<p>Here is a simple one component example not using a runner but only relying on wasmtime: <a href=\"https://github.com/matsbror/wasm-c-component-example.git\">https://github.com/matsbror/wasm-c-component-example.git</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/matsbror/wasm-c-component-example.git\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1932598c6c466d41b3f490a3531677c985db6a30\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363962386261316134356632616137653338353664666533363430303834653464383666326261666633303365343030343533363438656434323938303932632f6d61747362726f722f7761736d2d632d636f6d706f6e656e742d6578616d706c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/matsbror/wasm-c-component-example.git\" title=\"GitHub - matsbror/wasm-c-component-example: A simple wasm component example in C\">GitHub - matsbror/wasm-c-component-example: A simple wasm component example in C</a></div><div class=\"message_embed_description\">A simple wasm component example in C. Contribute to matsbror/wasm-c-component-example development by creating an account on GitHub.</div></div></div>",
        "id": 389949064,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1694206566
    },
    {
        "content": "<p><span aria-label=\"wave\" class=\"emoji emoji-1f44b\" role=\"img\" title=\"wave\">:wave:</span> if you, like me, are desperate to use classes with WIT from C++ (guest or host side), I created a host/guest combination matrix at <a href=\"https://github.com/cpetig/resource-demo/\">https://github.com/cpetig/resource-demo/</a> - and I am hacking together a wit-bindgen for C++ at  <a href=\"https://github.com/cpetig/wit-bindgen\">https://github.com/cpetig/wit-bindgen</a> - it is far from finished, but I at least understood how to combine the existing tooling for WIT autocode generation and the easy examples in the first repo work already.<br>\nAlso feel free to ask me more questions in this chat.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/resource-demo/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7585290d664d93620c01c02c0efa7990f1754ebe\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616162623334636133623131346135336633393562383333323537653630346537353765656534313062646236363036376133643139396337373431616336302f6370657469672f7265736f757263652d64656d6f)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/resource-demo/\" title=\"GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments\">GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</a></div><div class=\"message_embed_description\">A demo showing WASM component model resources in various environments - GitHub - cpetig/resource-demo: A demo showing WASM component model resources in various environments</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7f0897f81fc528586a1a83381419203709bdcefb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313931316263616539666162343935653831376261383464306534666635376431313438343162663733653533643561313864306664323166353739313337662f6370657469672f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen\" title=\"GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div>",
        "id": 389949212,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694206657
    },
    {
        "content": "<p>Guest code example <a href=\"https://github.com/cpetig/resource-demo/blob/main/guest-cpp/main.cpp\">https://github.com/cpetig/resource-demo/blob/main/guest-cpp/main.cpp</a>, host code example <a href=\"https://github.com/cpetig/resource-demo/blob/main/host-wamr/implementations.cpp\">https://github.com/cpetig/resource-demo/blob/main/host-wamr/implementations.cpp</a></p>",
        "id": 389949372,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694206743
    },
    {
        "content": "<p>(and sorry for joining late) zoom feels a bit lonely right now</p>",
        "id": 389950703,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694207419
    },
    {
        "content": "<p>Has anyone tried wasmflow: <a href=\"https://wasmflow.com/docs/getting-started/native-components/\">https://wasmflow.com/docs/getting-started/native-components/</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://wasmflow.com/docs/getting-started/native-components/\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/fa72770c873c818fec71d7d088c049d243fe80c3\\/68747470733a2f2f7761736d666c6f772e636f6d2f636f7665722d7761736d666c6f772e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://wasmflow.com/docs/getting-started/native-components/\" title=\"Creating Native Components\">Creating Native Components</a></div><div class=\"message_embed_description\">Building native components from scratch.\n</div></div></div>",
        "id": 389951132,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1694207651
    },
    {
        "content": "<p>Example of c wasm components <br>\n<a href=\"https://github.com/shravanrn/wasm-c-comp-example\">https://github.com/shravanrn/wasm-c-comp-example</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/shravanrn/wasm-c-comp-example\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/a52d2e807cb043206be47d554bc62264cb5a1c37\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f633431376230323437356431383935353664383263353734636133373437393139326562333661343639313063613639653933653665653565626537333764612f7368726176616e726e2f7761736d2d632d636f6d702d6578616d706c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/shravanrn/wasm-c-comp-example\" title=\"GitHub - shravanrn/wasm-c-comp-example\">GitHub - shravanrn/wasm-c-comp-example</a></div><div class=\"message_embed_description\">Contribute to shravanrn/wasm-c-comp-example development by creating an account on GitHub.</div></div></div>",
        "id": 389951156,
        "sender_full_name": "Shravan Narayan",
        "timestamp": 1694207666
    },
    {
        "content": "<p>Sadly WAMR won't support real components soon, for now I work with modules containing wit information until full support is available.<br>\nExample with resouces: <a href=\"https://github.com/cpetig/resource-demo/blob/main/guest-c/main.c\">https://github.com/cpetig/resource-demo/blob/main/guest-c/main.c</a></p>",
        "id": 389951724,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694208053
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590366\">Christof Petig</span> <a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/389950703\">said</a>:</p>\n<blockquote>\n<p>(and sorry for joining late) zoom feels a bit lonely right now</p>\n</blockquote>\n<p>I'm sorry about that! :( - But thank you for joining !</p>",
        "id": 389952875,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694208741
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"590366\">Christof Petig</span> <a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/389951724\">said</a>:</p>\n<blockquote>\n<p>Sadly WAMR won't support real components soon, for now I work with modules containing wit information until full support is available.<br>\nExample with resouces: <a href=\"https://github.com/cpetig/resource-demo/blob/main/guest-c/main.c\">https://github.com/cpetig/resource-demo/blob/main/guest-c/main.c</a></p>\n</blockquote>\n<p>Yeah, unfortunatley this is true for the WAMR tool.  - I'm trying to understand the component model and get some stdout working at the moment. There is no preview2 libc implementation at the moment.</p>",
        "id": 389953143,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694208913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>  what I am working on <a href=\"https://github.com/cpetig/wit-bindgen/blob/main/autosar/radar.wit\">https://github.com/cpetig/wit-bindgen/blob/main/autosar/radar.wit</a></p>",
        "id": 389953539,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694209178
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"435699\">Chris Woods</span> <a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/389953143\">said</a>:</p>\n<blockquote>\n<p>Yeah, unfortunatley this is true for the WAMR tool.  - I'm trying to understand the component model and get some stdout working at the moment. There is no preview2 libc implementation at the moment.</p>\n</blockquote>\n<p>I modified the preview2 adapter to link statically to libc to generate preview2 modules - which should work nicely with WAMR once I add the new interfaces.</p>",
        "id": 389954124,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694209564
    },
    {
        "content": "<p>But be careful doing this, the adapter is very complex due to its memory allocation tricks.</p>",
        "id": 389954204,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694209612
    },
    {
        "content": "<p>And I got a modified wasm-threads wit file which I got working with jco in the browser <span aria-label=\"ghost\" class=\"emoji emoji-1f47b\" role=\"img\" title=\"ghost\">:ghost:</span> , so I will have some upstreaming to do once I feel confident enough with the solution.</p>",
        "id": 389954598,
        "sender_full_name": "Christof Petig",
        "timestamp": 1694209848
    },
    {
        "content": "<p>Things we've learnt so far:</p>\n<ol>\n<li>worlds only contain what you specify, so there is no \"printf\" unless you include the wasi::cli world</li>\n<li>the wasi::cli world in wasmtime is the currently active version, it is what wastime implements and is slightly ahead of the not-yet stable standard.</li>\n<li>the wasm-tools compose takes a yaml file, there are plans to drop the yaml file and replace it with something else, but not sure what that is at the moment. </li>\n<li>wit-bindgen c produces function stubs, in a header file only, but doesn't generate the implementation *.c file. which you need to create yourself.</li>\n<li>wit-bindgen c as a string type, which is intended to be UTF8, but is specified in c as a char* -&gt; we should log an issue to change this to a uint8_t so that is is clear that this is not a typical ASCII null terminated string, strlen will not work. (create an issue on github for this)</li>\n<li>wit-bindgen c generates stub functions for imported functions, these should be denoted with an \"extern\" keyword to indicate that they are not to be implemented in the implementation *.c file by the developer.</li>\n</ol>",
        "id": 389955149,
        "sender_full_name": "Chris Woods",
        "timestamp": 1694210221
    },
    {
        "content": "<p>I updated my repo with an example with multiple components: <a href=\"https://github.com/matsbror/wasm-c-component-example\">https://github.com/matsbror/wasm-c-component-example</a></p>\n<p>It was great meeting you all yesterday and to play with components. Thanks <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>  for all the support!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/matsbror/wasm-c-component-example\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/1932598c6c466d41b3f490a3531677c985db6a30\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363962386261316134356632616137653338353664666533363430303834653464383666326261666633303365343030343533363438656434323938303932632f6d61747362726f722f7761736d2d632d636f6d706f6e656e742d6578616d706c65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/matsbror/wasm-c-component-example\" title=\"GitHub - matsbror/wasm-c-component-example: A simple wasm component example in C\">GitHub - matsbror/wasm-c-component-example: A simple wasm component example in C</a></div><div class=\"message_embed_description\">A simple wasm component example in C. Contribute to matsbror/wasm-c-component-example development by creating an account on GitHub.</div></div></div>",
        "id": 390038531,
        "sender_full_name": "Mats Brorsson",
        "timestamp": 1694268973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> <br>\nI saw your great work(<a href=\"https://github.com/cpetig/resource-demo/blob/main/guest-cpp/main.cpp\">https://github.com/cpetig/resource-demo/blob/main/guest-cpp/main.cpp</a>) and <a href=\"https://github.com/cpetig/wit-bindgen.git\">https://github.com/cpetig/wit-bindgen.git</a>. It worked well for my project.<br>\nAre you going to push \"wit-bindgen cpp-host/c-host\" to main wit-bindgen? And can we contribute if it can help you to accelerate?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wit-bindgen.git\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7f0897f81fc528586a1a83381419203709bdcefb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313931316263616539666162343935653831376261383464306534666635376431313438343162663733653533643561313864306664323166353739313337662f6370657469672f7769742d62696e6467656e)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wit-bindgen.git\" title=\"GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types\">GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types</a></div><div class=\"message_embed_description\">A language binding generator for WebAssembly interface types - GitHub - cpetig/wit-bindgen: A language binding generator for WebAssembly interface types</div></div></div>",
        "id": 391645311,
        "sender_full_name": "Ayako Akasaka",
        "timestamp": 1695026442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"614853\">Ayako Akasaka</span> <a href=\"#narrow/stream/397735-componentize-the-world-2023/topic/c-athon/near/391645311\">said</a>:</p>\n<blockquote>\n<p>Are you going to push \"wit-bindgen cpp-host/c-host\" to main wit-bindgen? And can we contribute if it can help you to accelerate?</p>\n</blockquote>\n<p>I replied in the SIG-Guest-Languages stream (Topic: C++ language binding) but saw no further reactions. Is is possible that you can't see this reply?</p>",
        "id": 392207110,
        "sender_full_name": "Christof Petig",
        "timestamp": 1695243932
    },
    {
        "content": "<p>I'm subscribed to SIG-Guest-Languages generally but the C++ topic was muted for me for some reason, maybe happened to others as well</p>",
        "id": 392219320,
        "sender_full_name": "Milan",
        "timestamp": 1695251050
    },
    {
        "content": "<p>Thank you for replying my request  <span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span>  and <span class=\"user-mention\" data-user-id=\"417958\">@Milan</span> <br>\nSince I haven't subscribed to the \"SIG-Guest-Languages\" Channel, I haven't noticed.  But now I can. So, let me move to there about this topic. Thanks!</p>",
        "id": 392519766,
        "sender_full_name": "Ayako Akasaka",
        "timestamp": 1695389805
    }
]