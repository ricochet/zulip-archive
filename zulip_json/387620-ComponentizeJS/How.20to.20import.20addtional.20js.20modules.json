[
    {
        "content": "<p>If your top level js code requires additional modules that are not part of the wit how can they be imported?  Currently 'componetize' will fail with </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Import</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">util</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"n\">source</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"w\"> </span><span class=\"n\">is</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">world</span><span class=\"w\"> </span><span class=\"n\">import</span><span class=\"p\">.</span><span class=\"w\"> </span><span class=\"n\">Only</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"o\">-</span><span class=\"n\">defined</span><span class=\"w\"> </span><span class=\"n\">imports</span><span class=\"w\"> </span><span class=\"n\">can</span><span class=\"w\"> </span><span class=\"n\">be</span><span class=\"w\"> </span><span class=\"n\">used</span><span class=\"p\">.</span>\n</code></pre></div>\n<p>I was able to get this to work by modifying 'componentize.js' to add an additional option that adds a set of imports to the importWrappers array but I'm not sure this is the best approach to supporting this.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">httputil</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">httputil</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">utf8</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">util</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">util</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">utf8</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">uuid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">uuid</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">utf8</span><span class=\"o\">'</span><span class=\"p\">);</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">jsSource</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">readFile</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"na\">testjs</span><span class=\"p\">.</span><span class=\"n\">js</span><span class=\"o\">'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">utf8</span><span class=\"o\">'</span><span class=\"p\">);</span>\n\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">importWrappers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"s\">\"util\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">util</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"s\">\"httputil\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">httputil</span>\n<span class=\"w\">    </span><span class=\"p\">],</span>\n<span class=\"w\">    </span><span class=\"p\">[</span>\n<span class=\"w\">        </span><span class=\"s\">\"uuid\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">uuid</span>\n<span class=\"w\">    </span><span class=\"p\">]</span>\n<span class=\"p\">];</span>\n<span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">component</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"n\">componentize</span><span class=\"p\">(</span><span class=\"n\">jsSource</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"n\">witPath</span>: <span class=\"nc\">resolve</span><span class=\"p\">(</span><span class=\"o\">'</span><span class=\"p\">.</span><span class=\"o\">/</span><span class=\"n\">wit</span><span class=\"o\">/'</span><span class=\"p\">),</span>\n<span class=\"w\">    </span><span class=\"n\">enableStdout</span>: <span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">debug</span>: <span class=\"nc\">false</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">additionalImportWrappers</span>: <span class=\"nc\">importWrappers</span><span class=\"p\">,</span>\n<span class=\"p\">});</span>\n</code></pre></div>",
        "id": 386813209,
        "sender_full_name": "Richard Backhouse",
        "timestamp": 1692787264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"634674\">@Richard Backhouse</span> good question, we could effectively perform a bundling step with a JS bundler before running componentize, where the externals of the bundling would be the WIT imports.</p>\n<p>One problem with this approach is if you make a typo or use the wrong import, it might be surprising why it attempts to find it in node_modules instead. But I think overall that would be the best approach here. I've posted an issue in <a href=\"https://github.com/bytecodealliance/componentize-js/issues/46\">https://github.com/bytecodealliance/componentize-js/issues/46</a> to track this.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/componentize-js/issues/46\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/abfbd2df7a72dbc44d5922b9955237dcd92fdb10\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353463376434353131386261626239383036313032623138393530613966623166313234623235323338313435656535313231363662653533303062333239652f62797465636f6465616c6c69616e63652f636f6d706f6e656e74697a652d6a732f6973737565732f3436)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/componentize-js/issues/46\" title=\"Bundler step 路 Issue #46 路 bytecodealliance/componentize-js\">Bundler step 路 Issue #46 路 bytecodealliance/componentize-js</a></div><div class=\"message_embed_description\">When componentizing a JS application, we should including a JS bundler to build the JS file first before componentization. This could support both TypeScript as well as node_modules and local impor...</div></div></div>",
        "id": 386920936,
        "sender_full_name": "Guy Bedford",
        "timestamp": 1692811482
    }
]