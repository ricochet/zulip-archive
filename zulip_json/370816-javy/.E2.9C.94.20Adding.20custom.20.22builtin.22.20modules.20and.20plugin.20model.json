[
    {
        "content": "<p>I'm sure this is just something I'm not understanding, but how can I add my own builtin standard library and not incur the cost of the size of that library for each of my plugins/extensions built with javy that use that library?</p>\n<p>I think I read this is what shopify did in their original usecase, but I am unclear on the steps I need to achieve to accomplish this.</p>\n<p>I have started the process of having my own forked CLI, since I want this to be functionality in my own toolchain (in case that is a relevant step), but it seems like the onus for providing the implementation of my builtins has to occur at runtime.</p>\n<p>Hoping someone can steer me in the right direction.</p>",
        "id": 436503842,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714571911
    },
    {
        "content": "<blockquote>\n<p>how can I add my own builtin standard library and not incur the cost of the size of that library for each of my plugins/extensions built with javy that use that library?</p>\n</blockquote>\n<p>Do you mean using Javy's <a href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\">dynamic linking support</a>? That is, having multiple Wasm modules produced by Javy dynamically link against a single runtime Wasm module such that the Wasm modules produced by Javy are much smaller.</p>\n<p>Also have you read over <a href=\"https://github.com/bytecodealliance/javy/blob/main/docs/extending.md\">the documentation for extending Javy</a>?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7d79b1fc0e9d57455ab6ecf6441e0d3157ade4e5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663361356264313631313038643530326364303535363332613633663661333030343837396661333237373939623232613737613262393432303931656538362f62797465636f6465616c6c69616e63652f6a617679&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\" title=\"GitHub - bytecodealliance/javy: JS to WebAssembly toolchain\">GitHub - bytecodealliance/javy: JS to WebAssembly toolchain</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to bytecodealliance/javy development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/javy/blob/main/docs/extending.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/7d79b1fc0e9d57455ab6ecf6441e0d3157ade4e5/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663361356264313631313038643530326364303535363332613633663661333030343837396661333237373939623232613737613262393432303931656538362f62797465636f6465616c6c69616e63652f6a617679&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/javy/blob/main/docs/extending.md\" title=\"javy/docs/extending.md at main · bytecodealliance/javy\">javy/docs/extending.md at main · bytecodealliance/javy</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to bytecodealliance/javy development by creating an account on GitHub.</div></div></div>",
        "id": 436524486,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714578200
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"477345\">Jeff Charles</span> <a href=\"#narrow/stream/370816-javy/topic/Adding.20custom.20.22builtin.22.20modules.20and.20plugin.20model/near/436524486\">said</a>:</p>\n<blockquote>\n<p>Do you mean using Javy's <a href=\"https://github.com/bytecodealliance/javy?tab=readme-ov-file#creating-and-using-dynamically-linked-modules\">dynamic linking support</a>? That is, having multiple Wasm modules produced by Javy dynamically link against a single runtime Wasm module such that the Wasm modules produced by Javy are much smaller.</p>\n</blockquote>\n<p>Yup that's it. And you are right, I've focused on the <code>extending.md</code> doc and not that section of the ReadMe</p>",
        "id": 436552369,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714588460
    },
    {
        "content": "<p>The direct answer is, if you also fork the core crate and register your APIs in <a href=\"https://github.com/bytecodealliance/javy/blob/main/crates/core/src/runtime.rs\">runtime.rs</a>, those APIs will be present in the Wasm file emitted from building the core crate as a Wasm cdylib. That Wasm cdylib module is what the modules produced by Javy will be trying to link against.</p>\n<p>For some context, at a high level, the modules produced by running <code>javy compile -d</code> (that is, producing a module that uses dynamic linking) just contain QuickJS bytecode and a minimal set of Wasm instructions to trigger an evaluation of that QuickJS bytecode.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/javy/blob/main/crates/core/src/runtime.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f863283dc49baf47726b663e47875daf7d8213ae/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346334636232623436613463656631346134623131653966383331663066353533306530623134646330666433663037356465363534386230383834356432342f62797465636f6465616c6c69616e63652f6a617679&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/javy/blob/main/crates/core/src/runtime.rs\" title=\"javy/crates/core/src/runtime.rs at main · bytecodealliance/javy\">javy/crates/core/src/runtime.rs at main · bytecodealliance/javy</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to bytecodealliance/javy development by creating an account on GitHub.</div></div></div>",
        "id": 436558291,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714591146
    },
    {
        "content": "<p>So if I were to go ahead and add my fork of core and add my APIs and then have a fork of the cli, my cli should produce the correct Wasm binaries when I do the <code>-d</code> option?</p>",
        "id": 436558719,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714591333
    },
    {
        "content": "<p>Also is it possible to add modules to the API via JavaScript? Or do these all need to be backed by Rust code?</p>",
        "id": 436558799,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714591377
    },
    {
        "content": "<blockquote>\n<p>So if I were to go ahead and add my fork of core and add my APIs and then have a fork of the cli, my cli should produce the correct Wasm binaries when I do the <code>-d</code> option?</p>\n</blockquote>\n<p>Yes but you'll need to link those modules against the cdylib Wasm module produced from compiling your core crate (as opposed to the <code>javy-quickjs_provider.wasm</code> file that's available as a release asset) when instantiating those modules.</p>",
        "id": 436560048,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714591933
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 436560816,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714592281
    },
    {
        "content": "<p>What about extending via JS, is that a possibility? I'm actually thinking of mixing a combination of Rust code plus some JS based modules</p>",
        "id": 436561008,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714592351
    },
    {
        "content": "<blockquote>\n<p>Also is it possible to add modules to the API via JavaScript? Or do these all need to be backed by Rust code?</p>\n</blockquote>\n<p>I'm not entirely sure I completely understand what you're asking. You would need to write _some_ Rust to add the APIs. But the implementation for the <code>register</code> function could just invoke <code>context.eval_global</code> in Rust to run JS code in the global context (we do this to add some text encoding and stream I/O APIs).</p>",
        "id": 436561164,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714592406
    },
    {
        "content": "<blockquote>\n<p>What about extending via JS, is that a possibility? I'm actually thinking of mixing a combination of Rust code plus some JS based modules</p>\n</blockquote>\n<p>Take a look at <a href=\"https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/stream_io/mod.rs\">https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/stream_io/mod.rs</a> and <a href=\"https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/text_encoding/mod.rs\">https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/text_encoding/mod.rs</a> for a couple examples where we have mixed Rust and JS implementations.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/stream_io/mod.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f863283dc49baf47726b663e47875daf7d8213ae/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346334636232623436613463656631346134623131653966383331663066353533306530623134646330666433663037356465363534386230383834356432342f62797465636f6465616c6c69616e63652f6a617679&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/stream_io/mod.rs\" title=\"javy/crates/apis/src/stream_io/mod.rs at main · bytecodealliance/javy\">javy/crates/apis/src/stream_io/mod.rs at main · bytecodealliance/javy</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to bytecodealliance/javy development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/text_encoding/mod.rs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f863283dc49baf47726b663e47875daf7d8213ae/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f346334636232623436613463656631346134623131653966383331663066353533306530623134646330666433663037356465363534386230383834356432342f62797465636f6465616c6c69616e63652f6a617679&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/javy/blob/main/crates/apis/src/text_encoding/mod.rs\" title=\"javy/crates/apis/src/text_encoding/mod.rs at main · bytecodealliance/javy\">javy/crates/apis/src/text_encoding/mod.rs at main · bytecodealliance/javy</a></div><div class=\"message_embed_description\">JS to WebAssembly toolchain. Contribute to bytecodealliance/javy development by creating an account on GitHub.</div></div></div>",
        "id": 436561303,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714592478
    },
    {
        "content": "<p>I think that addresses my question. I want to define some modules in JS and load it as part of registration.</p>",
        "id": 436561367,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714592510
    },
    {
        "content": "<p>Those links are perfect.</p>",
        "id": 436561593,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714592624
    },
    {
        "content": "<p>One other thing to keep in mind is we're considering on merging a PR switching our quickjs bindings to use <a href=\"https://github.com/DelSkayn/rquickjs\">rquickjs</a> so that would likely change the APIs you would call for API definitions. The <code>rquickjs</code> bindings are quite a bit more ergonomic. But there shouldn't be any other architectural changes that would affect what you're doing.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/DelSkayn/rquickjs\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/f63a7a6c44882f5c683683d9689098fb02a7f615/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f616166396430333961636636356431333865396636343461306531333365386635343831643034376466653866343161343533363831373038623737646232332f44656c536b61796e2f72717569636b6a73&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/DelSkayn/rquickjs\" title=\"GitHub - DelSkayn/rquickjs: High level bindings to the quickjs javascript engine\">GitHub - DelSkayn/rquickjs: High level bindings to the quickjs javascript engine</a></div><div class=\"message_embed_description\">High level bindings to the quickjs javascript engine - DelSkayn/rquickjs</div></div></div>",
        "id": 436561795,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714592704
    },
    {
        "content": "<p>Thanks for the info and heads up. I'm glad to know a more modern quickjs version is being linked in, as I was considering whether I should use javy or directly build my own javy like thing ontop of one of these more modern quickjs crates.</p>\n<p>Hopefully last question: Can I add top level exports for this module that will be my equivalent of the quick_js_provider.wasm, or must this module also subscribe to the WASI command pattern?</p>",
        "id": 436562299,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714592917
    },
    {
        "content": "<p>If it's in the <code>lib.rs</code> file for core, they're not subject to the command pattern. It's just if you add the exports to <code>main.rs</code> which would be used in a static linking context (that is, where the runtime is included in the module produced by <code>javy compile</code>), then it would be subject to the command pattern.</p>",
        "id": 436563276,
        "sender_full_name": "Jeff Charles",
        "timestamp": 1714593364
    },
    {
        "content": "<p>Thanks that is what I thought, but wanted to check my understanding.</p>",
        "id": 436563435,
        "sender_full_name": "Damian Reeves",
        "timestamp": 1714593438
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"674430\">Damian Reeves</span> has marked this topic as resolved.</p>",
        "id": 436674030,
        "sender_full_name": "Notification Bot",
        "timestamp": 1714650120
    }
]