[
    {
        "content": "<p>Hello! I'm trying to get PureScript -&gt; JavaScript -&gt; Javy -&gt; WASM to work.</p>\n<p>This is the code. I implemented a lot on the JS side (instead of PureScript) because I'm still learning PureScript. I'm trying to implement the example code of javy here: <a href=\"https://gist.github.com/Industrial/234f029bcb26c4e093e2bc1056806d23\">https://gist.github.com/Industrial/234f029bcb26c4e093e2bc1056806d23</a></p>\n<p>The output is also there: <code>Error while running JS: Uncaught SyntaxError: unexpected token: ''</code>.</p>\n<p>Looks like it isn't passed anything. What did I do wrong?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://gist.github.com/Industrial/234f029bcb26c4e093e2bc1056806d23\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2aafd906f69f8f71c7544060163ba3e419b173e8\\/68747470733a2f2f6769746875622e6769746875626173736574732e636f6d2f696d616765732f6d6f64756c65732f67697374732f676973742d6f672d696d6167652e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://gist.github.com/Industrial/234f029bcb26c4e093e2bc1056806d23\" title=\"1-Main.purs\">1-Main.purs</a></div><div class=\"message_embed_description\">GitHub Gist: instantly share code, notes, and snippets.</div></div></div>",
        "id": 370483167,
        "sender_full_name": "Tom Wieland",
        "timestamp": 1687967450
    },
    {
        "content": "<p>I got it.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">  </span><span class=\"c1\">// const finalBuffer = Uint8Array.from(inputChunks)</span>\n<span class=\"w\">  </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">finalBuffer</span><span class=\"w\"> </span><span class=\"p\">}</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">inputChunks</span><span class=\"p\">.</span><span class=\"n\">reduce</span><span class=\"p\">((</span><span class=\"n\">context</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">finalBuffer</span><span class=\"p\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">bufferOffset</span><span class=\"p\">);</span>\n<span class=\"w\">      </span><span class=\"n\">context</span><span class=\"p\">.</span><span class=\"n\">bufferOffset</span><span class=\"w\"> </span><span class=\"o\">+=</span><span class=\"w\"> </span><span class=\"n\">chunk</span><span class=\"p\">.</span><span class=\"n\">length</span><span class=\"p\">;</span>\n<span class=\"w\">      </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">context</span><span class=\"p\">;</span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"n\">bufferOffset</span>: <span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">finalBuffer</span>: <span class=\"nc\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">totalBytes</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">});</span>\n</code></pre></div>\n<p>My assumption about <code>Uint8Array.from</code> was incorrect.</p>",
        "id": 370539591,
        "sender_full_name": "Tom Wieland",
        "timestamp": 1687977724
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"JavaScript\"><pre><span></span><code><span class=\"k\">export</span><span class=\"w\"> </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">writeOutput</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"p\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">encodedOutput</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">stringify</span><span class=\"p\">(</span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">TextEncoder</span><span class=\"p\">().</span><span class=\"nx\">encode</span><span class=\"p\">(</span><span class=\"nx\">output</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s1\">'encodedOutput'</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">encodedOutput</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nb\">Uint8Array</span><span class=\"p\">(</span><span class=\"nx\">encodedOutput</span><span class=\"p\">)</span>\n<span class=\"w\">    </span><span class=\"nx\">Javy</span><span class=\"p\">.</span><span class=\"nx\">IO</span><span class=\"p\">.</span><span class=\"nx\">writeSync</span><span class=\"p\">(</span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">buffer</span><span class=\"p\">)</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n<p>produces</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">encodedOutput</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s\">\"0\"</span>:<span class=\"mi\">91</span><span class=\"p\">,</span><span class=\"s\">\"1\"</span>:<span class=\"mi\">111</span><span class=\"p\">,</span><span class=\"s\">\"2\"</span>:<span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"s\">\"3\"</span>:<span class=\"mi\">106</span><span class=\"p\">,</span><span class=\"s\">\"4\"</span>:<span class=\"mi\">101</span><span class=\"p\">,</span><span class=\"s\">\"5\"</span>:<span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"s\">\"6\"</span>:<span class=\"mi\">116</span><span class=\"p\">,</span><span class=\"s\">\"7\"</span>:<span class=\"mi\">32</span><span class=\"p\">,</span><span class=\"s\">\"8\"</span>:<span class=\"mi\">79</span><span class=\"p\">,</span><span class=\"s\">\"9\"</span>:<span class=\"mi\">98</span><span class=\"p\">,</span><span class=\"s\">\"10\"</span>:<span class=\"mi\">106</span><span class=\"p\">,</span><span class=\"s\">\"11\"</span>:<span class=\"mi\">101</span><span class=\"p\">,</span><span class=\"s\">\"12\"</span>:<span class=\"mi\">99</span><span class=\"p\">,</span><span class=\"s\">\"13\"</span>:<span class=\"mi\">116</span><span class=\"p\">,</span><span class=\"s\">\"14\"</span>:<span class=\"mi\">93</span><span class=\"p\">}</span>\n</code></pre></div>\n<p>I checked <code>output</code> as well and it's correct/expected. The weird thing is that I get no standard out. What did I do wrong?</p>",
        "id": 370557378,
        "sender_full_name": "Tom Wieland",
        "timestamp": 1687981560
    },
    {
        "content": "<p>Again, wrong copy paste.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">encodedOutput</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">JSON</span><span class=\"p\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">TextEncoder</span><span class=\"p\">().</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">encodedOutput</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">TextEncoder</span><span class=\"p\">().</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">JSON</span><span class=\"p\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">))</span>\n</code></pre></div>",
        "id": 370558218,
        "sender_full_name": "Tom Wieland",
        "timestamp": 1687981744
    },
    {
        "content": "<p>I ended up with this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">concatenateBuffers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">buffer1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer2</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">([</span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">buffer1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"o\">..</span><span class=\"p\">.</span><span class=\"n\">buffer2</span><span class=\"p\">])</span>\n\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">readInput</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">chunkSize</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">  </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">buffers</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">[]</span>\n<span class=\"w\">    </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kc\">true</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span>\n<span class=\"w\">      </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">chunkSize</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">bytesRead</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">Javy</span><span class=\"p\">.</span><span class=\"n\">IO</span><span class=\"p\">.</span><span class=\"n\">readSync</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bytesRead</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">break</span>\n<span class=\"w\">      </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">bytesRead</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"n\">throw</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"s\">\"StdIn: Unexpected EOF\"</span><span class=\"p\">)</span>\n<span class=\"w\">      </span><span class=\"n\">buffers</span><span class=\"p\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">.</span><span class=\"n\">subarray</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">bytesRead</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"p\">}</span>\n<span class=\"w\">    </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">finalBuffer</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">buffers</span><span class=\"p\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">concatenateBuffers</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">))</span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"n\">JSON</span><span class=\"p\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">TextDecoder</span><span class=\"p\">().</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">finalBuffer</span><span class=\"p\">))</span>\n<span class=\"w\">  </span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">export</span><span class=\"w\"> </span><span class=\"k\">const</span><span class=\"w\"> </span><span class=\"n\">writeOutput</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span>\n<span class=\"w\">  </span><span class=\"n\">Javy</span><span class=\"p\">.</span><span class=\"n\">IO</span><span class=\"p\">.</span><span class=\"n\">writeSync</span><span class=\"p\">(</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"w\">    </span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">Uint8Array</span><span class=\"p\">(</span><span class=\"n\">new</span><span class=\"w\"> </span><span class=\"n\">TextEncoder</span><span class=\"p\">().</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">JSON</span><span class=\"p\">.</span><span class=\"n\">stringify</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)))</span>\n<span class=\"w\">  </span><span class=\"p\">)</span>\n</code></pre></div>",
        "id": 370565784,
        "sender_full_name": "Tom Wieland",
        "timestamp": 1687983632
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"628468\">Tom Wieland</span> has marked this topic as resolved.</p>",
        "id": 370759844,
        "sender_full_name": "Notification Bot",
        "timestamp": 1688041196
    }
]