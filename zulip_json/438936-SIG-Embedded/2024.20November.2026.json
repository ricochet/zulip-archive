[
    {
        "content": "<p>Hi Folks, looking forward to seeing those who can make it tomorrow (Tuesday 26th). There was a set of points for discussion which I've rolled over from last time, please do check them out: <a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Embedded/2024/11-26-Meeting-notes.md\">https://github.com/bytecodealliance/meetings/blob/main/SIG-Embedded/2024/11-26-Meeting-notes.md</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Embedded/2024/11-26-Meeting-notes.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/e477cc8b1e548f6e4db0edfc1b5ad4fdb0633ae4/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f323938343861333762356633373861356534336532643430383532333462363865363166626431326339643330323733386230303665353638336539313935632f62797465636f6465616c6c69616e63652f6d656574696e6773&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/meetings/blob/main/SIG-Embedded/2024/11-26-Meeting-notes.md\" title=\"meetings/SIG-Embedded/2024/11-26-Meeting-notes.md at main · bytecodealliance/meetings\">meetings/SIG-Embedded/2024/11-26-Meeting-notes.md at main · bytecodealliance/meetings</a></div><div class=\"message_embed_description\">Contribute to bytecodealliance/meetings development by creating an account on GitHub.</div></div></div>",
        "id": 484429699,
        "sender_full_name": "Chris Woods",
        "timestamp": 1732592703
    },
    {
        "content": "<p>I'm curious if there's a place that gathers all our ideas and conversations about shared memory? I've noticed that the information is dispersed through emails, PRs, issues, and meeting minutes, and can't be certain that everyone is on the same page.  At the very least, I'm aware that I've missed something, but I'm not sure which part.</p>",
        "id": 484437304,
        "sender_full_name": "lum1n0us",
        "timestamp": 1732598374
    },
    {
        "content": "<p>yeah, that would be totes coolio.....</p>",
        "id": 484526274,
        "sender_full_name": "Ralph",
        "timestamp": 1732631225
    },
    {
        "content": "<p>Hi Folks, the youtube video of our meeting is now available here : <a href=\"https://youtu.be/lX6eL5Cl7mI\">YouTube -  - YouTube</a></p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"lX6eL5Cl7mI\" href=\"https://youtu.be/lX6eL5Cl7mI\"><img src=\"https://uploads.zulipusercontent.net/f8b6f3a0cf961af980c6fb6e7d3920d6d7d1c2c6/68747470733a2f2f692e7974696d672e636f6d2f76692f6c5836654c35436c376d492f64656661756c742e6a7067\"></a></div>",
        "id": 484788250,
        "sender_full_name": "Chris Woods",
        "timestamp": 1732736591
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"415410\">@lum1n0us</span> <span class=\"user-mention\" data-user-id=\"268586\">@Ralph</span> - Indeed coolio, and I seem to be volunteered myself during the SIG to move the email conversation over to a GitHub issue. </p>\n<p>Progress will be a little delayed due to the the holidays this week.</p>",
        "id": 484788414,
        "sender_full_name": "Chris Woods",
        "timestamp": 1732736663
    },
    {
        "content": "<p>Gotta have holidays</p>",
        "id": 484795293,
        "sender_full_name": "Ralph",
        "timestamp": 1732739860
    },
    {
        "content": "<p>I just completed an example of using shared memory in a safe way (at least the documented semantics should make sure that ownership is never violated for the component model) which is still easy to implement (unless you need to drill holes across wasmtime component model helper functions to get the linear memory pointer) and reason about. I would love to hear more about this:</p>\n<p><a href=\"https://github.com/cpetig/wasm-shm-test\">https://github.com/cpetig/wasm-shm-test</a></p>\n<p>As Luke pointed out this conceptually forms a stream of frames, with the option to synchronize reader and writer via blocking or signalling in the host. So after the initial communication of the shm id reader and writer can independently communicate over this channel. [This isn't yet implemented in this PoC]</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/cpetig/wasm-shm-test\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/338ac2314dcbc2f54eec55d0308af95311f8b0a2/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353561653638363635643238333364393831613131366165653635616333363936666431666463613031353064653238353531656435633532343131303332382f6370657469672f7761736d2d73686d2d74657374&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/cpetig/wasm-shm-test\" title=\"GitHub - cpetig/wasm-shm-test: Prototype for zero-copy shared memory inter-component exchange\">GitHub - cpetig/wasm-shm-test: Prototype for zero-copy shared memory inter-component exchange</a></div><div class=\"message_embed_description\">Prototype for zero-copy shared memory inter-component exchange - cpetig/wasm-shm-test</div></div></div>",
        "id": 485087224,
        "sender_full_name": "Christof Petig",
        "timestamp": 1732882852
    },
    {
        "content": "<p>Wow, great work here! I'll dive into this....</p>",
        "id": 485096770,
        "sender_full_name": "Ralph",
        "timestamp": 1732886088
    }
]