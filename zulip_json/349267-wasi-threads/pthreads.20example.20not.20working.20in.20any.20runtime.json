[
    {
        "content": "<p>I've tried building <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/multi-thread/wasm-apps/main_global_atomic.c\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/multi-thread/wasm-apps/main_global_atomic.c</a> with the latest WASI SDK (v20), as well as latest master, and it fails to run in both wasmtime and wamr (iwasm):</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">WASMTIME_BACKTRACE_DETAILS</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"n\">pthreads</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Starting</span><span class=\"w\"> </span><span class=\"n\">threads</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">threads</span>\n<span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">update</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">pthreads</span><span class=\"p\">.</span><span class=\"n\">wasm</span><span class=\"err\">`</span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">error</span><span class=\"w\"> </span><span class=\"k\">while</span><span class=\"w\"> </span><span class=\"n\">executing</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x5a8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">__main_argc_argv</span>\n<span class=\"w\">                           </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">bastian</span><span class=\"o\">/</span><span class=\"n\">Documents</span><span class=\"o\">/</span><span class=\"n\">pthreads</span><span class=\"o\">/</span><span class=\"n\">main</span><span class=\"p\">.</span><span class=\"n\">c</span>:<span class=\"mi\">58</span>:<span class=\"mi\">9</span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>: <span class=\"mh\">0x2bb4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__main_void</span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x34b</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span>\n<span class=\"w\">    </span><span class=\"mi\">2</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">unreachable</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">instruction</span><span class=\"w\"> </span><span class=\"n\">executed</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"cp\">$</span><span class=\"w\"> </span><span class=\"n\">iwasm</span><span class=\"w\">  </span><span class=\"n\">pthreads</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">Starting</span><span class=\"w\"> </span><span class=\"n\">threads</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"n\">creation</span><span class=\"w\"> </span><span class=\"n\">failed</span>\n<span class=\"n\">Joining</span><span class=\"w\"> </span><span class=\"n\">threads</span>\n<span class=\"n\">Value</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">counter</span><span class=\"w\"> </span><span class=\"n\">after</span><span class=\"w\"> </span><span class=\"n\">update</span>: <span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n<span class=\"n\">Exception</span>: <span class=\"nc\">unreachable</span>\n</code></pre></div>\n<p>Is this a problem with the WASI SDK or the runtimes?</p>",
        "id": 405575184,
        "sender_full_name": "Bastian Müller",
        "timestamp": 1701558691
    },
    {
        "content": "<p>I guess the problem could involve how you compile and link your C program. I have successfully used iwasm together with both C++ (SDK v20) and Rust threads (wasm32-wasi-preview1-threads) - the tricky part is whether to import the memory or not.</p>",
        "id": 405672428,
        "sender_full_name": "Christof Petig",
        "timestamp": 1701615488
    },
    {
        "content": "<p>Oh, I see, this example still uses the somewhat outdated wasm32 target with wamr specific host extensions. Please give wasm32-wasi-(preview1-)threads a try.</p>\n<p>There is a newer wasi-threads example in WAMR as well.</p>",
        "id": 405672880,
        "sender_full_name": "Christof Petig",
        "timestamp": 1701615771
    },
    {
        "content": "<p>But even this example predates SDK v20 and makes no use of its built in pthread API. I would try a standard minimal pthread example and compile to wasm32-wasi-threads.</p>",
        "id": 405673383,
        "sender_full_name": "Christof Petig",
        "timestamp": 1701616195
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"590366\">@Christof Petig</span> Just to clarify:</p>\n<ul>\n<li>I'm only using the linked example file from the wamr repo, nothing else</li>\n<li>I'm already building for the <code>wasm32-wasi-threads</code> target, not just the <code>wasm32-wasi</code> target</li>\n<li>I'm using wasi-sdk builds, i.e. its wasi-libc, not wamr's </li>\n</ul>\n<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> do you have any ideas or a good simple example that uses pthreads?</p>",
        "id": 405709234,
        "sender_full_name": "Bastian Müller",
        "timestamp": 1701646649
    },
    {
        "content": "<p>The example builds fine for me</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code><span class=\"c1\"># From WAMR root folder</span>\n$<span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span>samples/multi-thread\n$<span class=\"w\"> </span>mkdir<span class=\"w\"> </span>build<span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">cd</span><span class=\"w\"> </span>build\n$<span class=\"w\"> </span>cmake<span class=\"w\"> </span>..<span class=\"w\"> </span>-DCMAKE_BUILD_TYPE<span class=\"o\">=</span>Debug<span class=\"w\"> </span>-GNinja\n$<span class=\"w\"> </span>ninja\n$<span class=\"w\"> </span>./iwasm<span class=\"w\"> </span>wasm-apps/main_global_atomic.wasm\nValue<span class=\"w\"> </span>of<span class=\"w\"> </span>counter<span class=\"w\"> </span>after<span class=\"w\"> </span>update:<span class=\"w\"> </span><span class=\"m\">4000</span><span class=\"w\"> </span><span class=\"o\">(</span><span class=\"nv\">expected</span><span class=\"o\">=</span><span class=\"m\">4000</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If you want to use WASI threads instead, I suggest you follow <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/wasi-threads\">https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/wasi-threads</a></p>",
        "id": 405778292,
        "sender_full_name": "Enrico Loparco",
        "timestamp": 1701680671
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"553990\">@Bastian Müller</span>, you could always try out the even simpler <a href=\"https://bytecodealliance.org/articles/wasi-threads\">example</a> from the original blog post, though I suspect the build command might need to be looked at again. How are you building <code>main_global_atomic.c</code>? I'm a bit confused by the back trace pointing at <code>/home/bastian/Documents/pthreads/main.c:58:9</code> because the original file does not have that many lines. How do I reproduce that Wasmtime failure?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://bytecodealliance.org/articles/wasi-threads\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b666ca74a20745aca2566cd241108afdcfa09d04\\/68747470733a2f2f62797465636f6465616c6c69616e63652e6f72672f696d616765732f6176617461722e706e67)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://bytecodealliance.org/articles/wasi-threads\" title=\"Announcing wasi-threads\">Announcing wasi-threads</a></div><div class=\"message_embed_description\">Until now, one piece missing from WebAssembly standalone engines was the ability to spawn threads.Browsers have had this ability for some time via Web Workers, but standalone engines had no standardway to do this. This post describes the...</div></div></div>",
        "id": 405888294,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1701714478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"619002\">Enrico Loparco</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/pthreads.20example.20not.20working.20in.20any.20runtime/near/405778292\">said</a>:</p>\n<blockquote>\n<p>The example builds fine for me<br>\n[...]</p>\n<p>If you want to use WASI threads instead, I suggest you follow <a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/wasi-threads\">https://github.com/bytecodealliance/wasm-micro-runtime/tree/main/samples/wasi-threads</a></p>\n</blockquote>\n<p>Like I mentioned above, I'm not using the build system from the example, but am using the latest WASI SDK targeting <code>wasm32-wasi-threads</code>. I saw that wamr provides also an older, direct pthreads implementation, but I wasn't using that.</p>",
        "id": 406989338,
        "sender_full_name": "Bastian Müller",
        "timestamp": 1702169384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> Thank you for pointing me to the blog post -- I had only looked at the wasi-threads, wasmtime, and wamr repos, but hadn't realized there was a great write-up with an overview and details of the extension, as well as an example.</p>\n<p>The blog post had the hint I was missing: It's important to import and export the memory, as well as specify a large enough maximum memory _at build-time_, i.e. pass e.g. <code>-Wl,--import-memory,--export-memory,--max-memory=67108864</code>. I had tried both importing and exporting the memory, but that alone didn't work, and also tried specifying max memory when _executing_ the built module, which also didn't help (obvious in hind-sight).</p>\n<p>Building the example with the options above makes it work in both wamr and wasmtime. </p>\n<p>It might be worth pointing this subtle, but very important detail of specifying the maximum memory during compilation in the documentation (not sure where is best). Without it, the build succeeds, but like I mentioned in my original question, the programs silently fail, and it isn't obvious why.</p>\n<p>Having a working pthreads example module, I was able to complete the threads implementation (shared memory, atomic operations, and wasi-threads) in w2c2  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> (pthreads example: <a href=\"https://github.com/turbolent/w2c2/pull/91/files#diff-1125cd266d1f65514d4efbdf3eb6537294f511c4fb92188e6cdd1985defbbf0e\">https://github.com/turbolent/w2c2/pull/91/files#diff-1125cd266d1f65514d4efbdf3eb6537294f511c4fb92188e6cdd1985defbbf0e</a>)</p>\n<p>Thank you everyone for the help!</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/turbolent/w2c2/pull/91/files#diff-1125cd266d1f65514d4efbdf3eb6537294f511c4fb92188e6cdd1985defbbf0e\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/797c1174b1f60639fd229fba4ff11969dc7ff5a6\\/68747470733a2f2f617661746172732e67697468756275736572636f6e74656e742e636f6d2f752f35313636313f733d34303026763d34)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/turbolent/w2c2/pull/91/files#diff-1125cd266d1f65514d4efbdf3eb6537294f511c4fb92188e6cdd1985defbbf0e\" title=\"Improve shared memory, add pthreads example by turbolent · Pull Request #91 · turbolent/w2c2\">Improve shared memory, add pthreads example by turbolent · Pull Request #91 · turbolent/w2c2</a></div><div class=\"message_embed_description\">Translates WebAssembly modules to portable C. Contribute to turbolent/w2c2 development by creating an account on GitHub.</div></div></div>",
        "id": 406990073,
        "sender_full_name": "Bastian Müller",
        "timestamp": 1702169841
    },
    {
        "content": "<blockquote>\n<p>Like I mentioned above, I'm not using the build system from the example, but am using the latest WASI SDK targeting wasm32-wasi-threads.</p>\n</blockquote>\n<p>I should have been more precise, I meant this one specifically<br>\n<a href=\"https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/wasi-threads/wasm-apps/CMakeLists.txt#L35-L43\">https://github.com/bytecodealliance/wasm-micro-runtime/blob/main/samples/wasi-threads/wasm-apps/CMakeLists.txt#L35-L43</a></p>",
        "id": 407107338,
        "sender_full_name": "Enrico Loparco",
        "timestamp": 1702242016
    }
]