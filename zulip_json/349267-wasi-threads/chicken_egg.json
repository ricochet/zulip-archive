[
    {
        "content": "<p>After patching <code>Config</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">diff</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">git</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"n\">index</span><span class=\"w\"> </span><span class=\"mi\">54073</span><span class=\"n\">aa83</span><span class=\"o\">..</span><span class=\"mf\">18e7</span><span class=\"n\">f1750</span><span class=\"w\"> </span><span class=\"mi\">100644</span><span class=\"w\"></span>\n<span class=\"o\">---</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">+++</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"o\">/</span><span class=\"n\">crates</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"o\">/</span><span class=\"n\">src</span><span class=\"o\">/</span><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"n\">rs</span><span class=\"w\"></span>\n<span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">188</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"mi\">188</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"w\"> </span><span class=\"o\">@@</span><span class=\"w\"> </span><span class=\"k\">impl</span><span class=\"w\"> </span><span class=\"n\">Config</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">wasm_backtrace</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">wasm_backtrace_details_env_used</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">native_unwind_info</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">-</span><span class=\"w\">            </span><span class=\"n\">features</span>: <span class=\"nc\">WasmFeatures</span>::<span class=\"n\">default</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"n\">features</span>: <span class=\"nc\">WasmFeatures</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"n\">threads</span>: <span class=\"nc\">true</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">                </span><span class=\"o\">..</span><span class=\"nb\">Default</span>::<span class=\"n\">default</span><span class=\"p\">()</span><span class=\"w\"></span>\n<span class=\"o\">+</span><span class=\"w\">            </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"cp\">#[cfg(feature = </span><span class=\"s\">\"async\"</span><span class=\"cp\">)]</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">async_stack_size</span>: <span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"o\">&lt;&lt;</span><span class=\"w\"> </span><span class=\"mi\">20</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">             </span><span class=\"n\">async_support</span>: <span class=\"nc\">false</span><span class=\"p\">,</span><span class=\"w\"></span>\n</code></pre></div>\n<p>I got this far with a patched wasi-libc:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">‚ùØ</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"o\">~/</span><span class=\"n\">pthread_create_example</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.23</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">harald</span><span class=\"o\">/</span><span class=\"n\">pthread_create_example</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">harald</span><span class=\"o\">/</span><span class=\"n\">pthread_create_example</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">instantiate</span><span class=\"w\"> </span><span class=\"s\">\"/home/harald/pthread_create_example\"</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">unknown</span><span class=\"w\"> </span><span class=\"n\">import</span>: <span class=\"err\">`</span><span class=\"n\">wasi_snapshot_preview2</span>::<span class=\"n\">thread_spawn</span><span class=\"err\">`</span><span class=\"w\"> </span><span class=\"n\">has</span><span class=\"w\"> </span><span class=\"n\">not</span><span class=\"w\"> </span><span class=\"n\">been</span><span class=\"w\"> </span><span class=\"n\">defined</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303599055,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665570539
    },
    {
        "content": "<p>ok, with a <code>wasi_snapshot_preview2::thread_spawn</code> stub function I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">harald</span><span class=\"o\">/</span><span class=\"n\">pthread_create_example</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x298</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasm_init_memory</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 303635382,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665583839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> ^^^</p>",
        "id": 303649531,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665585572
    },
    {
        "content": "<p>Good to see you are making some progress; not sure what to make of the <code>wasm trap: out of bounds memory access</code>--is there something wrong in <code>wasi-libc</code>? (BTW, you probably don't need to patch Wasmtime since you should be alter the configuration from the CLI; just use <code>cargo run -- --wasm-features threads ...</code> or something like that).</p>",
        "id": 303714859,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665605854
    },
    {
        "content": "<p>E.g., if your Wasm file's memory is declared like <code>(memory 0 ...)</code>, then somewhere in the Wasm file there needs to be a <code>memory.grow</code> or all memory accesses will be out of bounds.</p>",
        "id": 303715412,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665606083
    },
    {
        "content": "<p>Another thought, unrelated to the above, is that the <code>wasi-threads</code> implementation I'm working on is not the only piece to get a working end-to-end example in Wasmtime. Wasmtime only has stub implementations for <code>wait</code> and <code>notify</code> so those need to be implemented as well since they are used by, e.g., <code>pthread_join</code> in <code>wasi-libc</code>.</p>",
        "id": 303715951,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665606313
    },
    {
        "content": "<blockquote>\n<p>those need to be implemented</p>\n</blockquote>\n<p>Many chickens, many eggs...</p>",
        "id": 303716004,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665606335
    },
    {
        "content": "<p>yeah, it's the <code>--shared-memory</code> linker directive causing the \"__wasm_init_memory\" trap... set also by <code>-pthread</code> CC option</p>",
        "id": 304011216,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665747027
    },
    {
        "content": "<p><a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#shared-memory-and-passive-segments\">https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#shared-memory-and-passive-segments</a></p>\n<blockquote>\n<p>The memory.init instructions that initialize these passive segments and the data.drop instructions that mark them collectible will be emitted into a synthetic function __wasm_init_memory that is made the WebAssembly start function and called automatically on instantiation but is not exported. __wasm_init_memory shall perform any synchronization necessary to ensure that no thread returns from instantiation until memory has been fully initialized, even if a module is instantiated on multiple threads simultaneously.</p>\n</blockquote>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#shared-memory-and-passive-segments\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d4dd63f9d9590c859d86ec003a5ee79279a1c584\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336265343636373834613232336562666539343764633630656534323639393235653438653733656338336365353166636532643736643564613062346233362f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/main/Linking.md#shared-memory-and-passive-segments\" title=\"tool-conventions/Linking.md at main ¬∑ WebAssembly/tool-conventions\">tool-conventions/Linking.md at main ¬∑ WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - tool-conventions/Linking.md at main ¬∑ WebAssembly/tool-conventions</div></div></div>",
        "id": 304029493,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665753362
    },
    {
        "content": "<p>so, it's the start function created by the linker</p>",
        "id": 304029636,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665753410
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> </p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(;</span><span class=\"o\">@</span><span class=\"mi\">2</span><span class=\"n\">b6</span><span class=\"w\">   </span><span class=\"p\">;)</span><span class=\"w\">        </span><span class=\"n\">memory</span><span class=\"p\">.</span><span class=\"n\">atomic</span><span class=\"p\">.</span><span class=\"n\">notify</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304045871,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758004
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">_start</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">wasm</span><span class=\"w\"> </span><span class=\"n\">trap</span>: <span class=\"nc\">out</span><span class=\"w\"> </span><span class=\"n\">of</span><span class=\"w\"> </span><span class=\"n\">bounds</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">access</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x2b6</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasm_init_memory</span><span class=\"w\"></span>\n</code></pre></div>\n<p>for this one</p>",
        "id": 304046121,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758079
    },
    {
        "content": "<p>this is linker generated code, so it feels like <code>wasmtime</code> is missing something here?</p>",
        "id": 304046243,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758116
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"w\">    </span><span class=\"nb\">Err</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">anyhow</span>::<span class=\"n\">anyhow</span><span class=\"o\">!</span><span class=\"p\">(</span><span class=\"s\">\"unimplemented: wasm atomics (fn memory_atomic_notify) unsupported\"</span><span class=\"p\">,)</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">.</span><span class=\"n\">into</span><span class=\"p\">(),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304049392,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1665758984
    },
    {
        "content": "<p>Yeah, this is what I meant up above:</p>\n<blockquote>\n<p>Wasmtime only has stub implementations for wait and notify so those need to be implemented as well since they are used by...</p>\n</blockquote>",
        "id": 304060237,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665761828
    },
    {
        "content": "<p>I will hopefully have the WASI bindings for <code>wasi-threads</code> available in some form today but one of us needs to take a look at implementing <code>wait</code> and <code>notify</code> to make an end-to-end example work. (Also, you might be interested in <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>'s recent change to avoid running constructors twice in wasi-libc: <a href=\"https://github.com/WebAssembly/wasi-libc/pull/339\">https://github.com/WebAssembly/wasi-libc/pull/339</a>).</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/pull/339\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/be21566011788d1b097a5716712485c3057a3b9e\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f336333336263383132663264343430666466383265356537636534303630333138643933343038373963653462313962656430653466316538643066313535652f576562417373656d626c792f776173692d6c6962632f70756c6c2f333339)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/pull/339\" title=\"Support threads in the new crt1-command.c ctor check. by sunfishcode ¬∑ Pull Request #339 ¬∑ WebAssembly/wasi-libc\">Support threads in the new crt1-command.c ctor check. by sunfishcode ¬∑ Pull Request #339 ¬∑ WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">Use an atomic compare-and-swap for checking whether constructors have been run, when threads are enabled.</div></div></div>",
        "id": 304060701,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665761950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"449156\">@Harald Hoyer</span>, the progress I have made on a WIP implementation of <code>wasi-threads</code> is available on a branch of that name in my fork: <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads\">https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads</a>. The unstable feature <code>get_mut_unchecked</code> is a particularly heinous hack that will need to get resolved before I consider putting this up as a PR, even as a draft. I have documented the issues I observed in implementing this in the commit comments (note that this change stacks on <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5054\">#5054</a>, included in the branch). Please use this change with the understanding that it is highly experimental, unsafe (no host import locking), and can easily be broken.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/7f4e75bc205de4644f1fb3ea18ebcc64abf8b8f0\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f663662613262313030626364326463333661393963383138633639386137646530333135363564653537373363386437386639643139623463356330376233662f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads\" title=\"Comparing bytecodealliance:main...abrown:wasi-threads ¬∑ bytecodealliance/wasmtime\">Comparing bytecodealliance:main...abrown:wasi-threads ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5054\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4852d3ef71460e7428e2b5c9c20b6b3b59fae6fd\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f333362616365623037633534313037316436396362633361323239636465313733353436633536633635303761336132356363393035343963313361386333662f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35303534)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5054\" title=\"wiggle: allow wiggle to use shared memory by abrown ¬∑ Pull Request #5054 ¬∑ bytecodealliance/wasmtime\">wiggle: allow wiggle to use shared memory by abrown ¬∑ Pull Request #5054 ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">wiggle looks for an exported Memory named \"memory\" to use for its guest slices. This change allows it to use a SharedMemory if this is the kind of memory used for the export.</div></div></div>",
        "id": 304136230,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665792116
    },
    {
        "content": "<p>(cc: <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, who may be interested as well)</p>",
        "id": 304136319,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1665792171
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Diff\"><pre><span></span><code><span class=\"gh\">diff --git a/tests/all/cli_tests.rs b/tests/all/cli_tests.rs</span><span class=\"w\"></span>\n<span class=\"gh\">index fa13f32c4..002800bf0 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/tests/all/cli_tests.rs</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/tests/all/cli_tests.rs</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -404,13 +404,16 @@ fn run_threads() -&gt; Result&lt;()&gt; {</span><span class=\"w\"></span>\n<span class=\"w\"> </span>    let wasm = build_wasm(\"tests/all/cli_tests/threads.wat\")?;<span class=\"w\"></span>\n<span class=\"w\"> </span>    let stdout = run_wasmtime(&amp;[<span class=\"w\"></span>\n<span class=\"w\"> </span>        \"run\",<span class=\"w\"></span>\n<span class=\"gi\">+        \"--wasi-modules\",</span><span class=\"w\"></span>\n<span class=\"gi\">+        \"experimental-wasi-threads\",</span><span class=\"w\"></span>\n<span class=\"gi\">+        \"--wasm-features\",</span><span class=\"w\"></span>\n<span class=\"gi\">+        \"threads\",</span><span class=\"w\"></span>\n<span class=\"gi\">+        \"--disable-cache\",</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        \"--\",<span class=\"w\"></span>\n<span class=\"w\"> </span>        wasm.path().to_str().unwrap(),<span class=\"w\"></span>\n<span class=\"gd\">-        \"--wasi-modules experimental-wasi-threads\",</span><span class=\"w\"></span>\n<span class=\"gd\">-        \"--wasm-features threads\",</span><span class=\"w\"></span>\n<span class=\"gd\">-        \"--disable-cache\",</span><span class=\"w\"></span>\n<span class=\"w\"> </span>    ])?;<span class=\"w\"></span>\n</code></pre></div>",
        "id": 304467287,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666014998
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> ^^</p>",
        "id": 304467375,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666015015
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> here is an attempt for memory_atomic_wait32 and memory_atomic_notify <br>\n<a href=\"https://github.com/haraldh/wasmtime/commit/2341d1bb1ae2892992b977c4162d495233d1700b\">https://github.com/haraldh/wasmtime/commit/2341d1bb1ae2892992b977c4162d495233d1700b</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/haraldh/wasmtime/commit/2341d1bb1ae2892992b977c4162d495233d1700b\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/6a92e2ab51214c5710a4c5f6d5a9469cab1e6d69\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f653633373665613336393566363936633132373535303265303936353734333938386237353530383939316233376463336438383735666464303839393461392f686172616c64682f7761736d74696d652f636f6d6d69742f32333431643162623161653238393239393262393737633431363264343935323333643137303062)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/haraldh/wasmtime/commit/2341d1bb1ae2892992b977c4162d495233d1700b\" title=\"feat: add memory_atomic_wait32 and memory_atomic_notify ¬∑ haraldh/wasmtime@2341d1b\">feat: add memory_atomic_wait32 and memory_atomic_notify ¬∑ haraldh/wasmtime@2341d1b</a></div><div class=\"message_embed_description\">based upon Linux futex\n\nSigned-off-by: Harald Hoyer &lt;harald@profian.com&gt;</div></div></div>",
        "id": 304473536,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666016558
    },
    {
        "content": "<p>I kind of can report success, although the new threads do not have the same SharedMemory it seems</p>",
        "id": 304474162,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666016752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> also I have made a PR to fix <code>validate_atomic_addr()</code> .. <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\">https://github.com/bytecodealliance/wasmtime/pull/5063</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/08e54ebe8c946587d41b68720d7fdf8bd2189831\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f646331653332386336383239376532363030616139643036303036346338633230303665623066346233666237663333373863333436643065383465616535632f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35303633)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5063\" title=\"fix `validate_atomic_addr()` by haraldh ¬∑ Pull Request #5063 ¬∑ bytecodealliance/wasmtime\">fix `validate_atomic_addr()` by haraldh ¬∑ Pull Request #5063 ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Apparently addr is a pointer to real memory.\nSigned-off-by: Harald Hoyer harald@profian.com</div></div></div>",
        "id": 304474544,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666016849
    },
    {
        "content": "<p>So, if I use <code>clang -pthread ...</code> it generates code with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"p\">(</span><span class=\"n\">export</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>unless I use <code>-Xlinker --import-memory</code>, which produces:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">import</span><span class=\"w\"> </span><span class=\"s\">\"env\"</span><span class=\"w\"> </span><span class=\"s\">\"memory\"</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"p\">(;</span><span class=\"mi\">0</span><span class=\"p\">;)</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"n\">shared</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n<p>but then:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Error</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"n\">main</span><span class=\"w\"> </span><span class=\"n\">module</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"o\">/</span><span class=\"n\">home</span><span class=\"o\">/</span><span class=\"n\">harald</span><span class=\"o\">/</span><span class=\"n\">pthread_create_example</span><span class=\"err\">`</span><span class=\"w\"></span>\n\n<span class=\"n\">Caused</span><span class=\"w\"> </span><span class=\"n\">by</span>:\n    <span class=\"mi\">0</span>: <span class=\"nc\">failed</span><span class=\"w\"> </span><span class=\"n\">to</span><span class=\"w\"> </span><span class=\"n\">invoke</span><span class=\"w\"> </span><span class=\"n\">command</span><span class=\"w\"> </span><span class=\"n\">default</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">1</span>: <span class=\"nc\">missing</span><span class=\"w\"> </span><span class=\"n\">required</span><span class=\"w\"> </span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"n\">export</span><span class=\"w\"></span>\n<span class=\"w\">       </span><span class=\"n\">wasm</span><span class=\"w\"> </span><span class=\"n\">backtrace</span>:\n           <span class=\"mi\">0</span>:  <span class=\"mh\">0x751</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__wasi_fd_write</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">1</span>:  <span class=\"mh\">0x953</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">writev</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">2</span>:  <span class=\"mh\">0x9e4</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__stdio_write</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">3</span>: <span class=\"mh\">0x119d</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">vfprintf</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">4</span>: <span class=\"mh\">0x4089</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">fprintf</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">5</span>: <span class=\"mh\">0x6fa8</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__pthread_create</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">6</span>:  <span class=\"mh\">0x4ab</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">__original_main</span><span class=\"w\"></span>\n<span class=\"w\">           </span><span class=\"mi\">7</span>:  <span class=\"mh\">0x2d5</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">unknown</span><span class=\"o\">&gt;!</span><span class=\"n\">_start</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 304475923,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666017210
    },
    {
        "content": "<p>re: your initial patch to fix the test's CLI arguments, thanks! I think that is right. I still see test failures due to the WAT reading-writing though, so something else needs fixing</p>",
        "id": 304477242,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666017545
    },
    {
        "content": "<p>re: the shared memory, I believe that for now we must both import a shared memory (so that all of the thread instances share the same one) AND export that same memory (so that Wiggle can use it for buffers in host calls)</p>",
        "id": 304478224,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666017800
    },
    {
        "content": "<p>I can't tell from your last example if the emitted module had both the import and the export, but it seems as it does not due to the error. I side-stepped this by hand-crafting the WAT test. I would think there is a way to tell Clang to do both?</p>",
        "id": 304478769,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666017939
    },
    {
        "content": "<p>btw, I found in crates/wasmtime/src/memory.rs:695 :</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"sd\">/// let shared_memory = SharedMemory::new(&amp;engine, MemoryType::shared(1, 2))?;</span>\n<span class=\"sd\">/// let module = Module::new(&amp;engine, r#\"(module (memory (import \"\" \"\") 1 2 shared))\"#)?;</span>\n<span class=\"sd\">/// let instance = Instance::new(&amp;mut store, &amp;module, &amp;[shared_memory.into()])?;</span>\n</code></pre></div>",
        "id": 304482483,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666018671
    },
    {
        "content": "<p>and I have the feeling, that the <code>SharedMemory</code> returned from your <code>crates/wasi-threads/src/lib.rs:add_to_linker()</code> has to be used the same somehow</p>",
        "id": 304483000,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666018794
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304478769\">said</a>:</p>\n<blockquote>\n<p>I can't tell from your last example if the emitted module had both the import and the export, but it seems as it does not due to the error. I side-stepped this by hand-crafting the WAT test. I would think there is a way to tell Clang to do both?</p>\n</blockquote>\n<p>It had only the <code>import</code><br>\n‚ùØ $CC $CFLAGS -Xlinker --help  ~/pthread_create_example.c -o ~/pthread_create_example|fgrep memory<br>\n  --import-memory        Import memory from the environment<br>\n  --initial-memory=&lt;value&gt;<br>\n                         Initial size of the linear memory<br>\n  --max-memory=&lt;value&gt;   Maximum size of the linear memory<br>\n  --shared-memory        Use shared linear memory<br>\n  --stack-first          Place stack at start of linear memory rather than after data</p>",
        "id": 304487971,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666019423
    },
    {
        "content": "<p>Isn't <code>export</code> just fine, as <code>clang</code> does it with <code>-pthread</code> (which activates the <code>--shared-memory</code> linker flag)?</p>",
        "id": 304488297,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666019511
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449156\">Harald Hoyer</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304483000\">said</a>:</p>\n<blockquote>\n<p>and I have the feeling, that the <code>SharedMemory</code> returned from your <code>crates/wasi-threads/src/lib.rs:add_to_linker()</code> has to be used the same somehow</p>\n</blockquote>\n<p>Ah, so here's how that happens using a <code>Linker</code>, which in this case is a more indirect way of defining the imports: if <code>wasi_threads::add_to_linker</code> finds a shared memory import it must satisfy, it generates a new <code>SharedMemory</code> and adds it to the <code>Linker</code> <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads#diff-d213ee8ac09e5c4d18a2ac5faddc59fe1a5916f583693fbc45464e9b23dbd059R117\">here</a>. (<code>add_to_linker</code> should only be called once, so there should only be one shared memory to speak of). Then when the <code>Linker</code> is used to <code>instantiate</code> the child module <a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads#diff-d213ee8ac09e5c4d18a2ac5faddc59fe1a5916f583693fbc45464e9b23dbd059R49-R51\">here</a>, that shared memory will be imported to the child instance.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads#diff-d213ee8ac09e5c4d18a2ac5faddc59fe1a5916f583693fbc45464e9b23dbd059R117\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d035fdca659330e7a03cbe8aa455d0822efa6487\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353563653436643265393562653137373433393036316638396138663461373465633339643164363433313635613564613534333531666337346332386230322f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads#diff-d213ee8ac09e5c4d18a2ac5faddc59fe1a5916f583693fbc45464e9b23dbd059R117\" title=\"Comparing bytecodealliance:main...abrown:wasi-threads ¬∑ bytecodealliance/wasmtime\">Comparing bytecodealliance:main...abrown:wasi-threads ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads#diff-d213ee8ac09e5c4d18a2ac5faddc59fe1a5916f583693fbc45464e9b23dbd059R49-R51\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d035fdca659330e7a03cbe8aa455d0822efa6487\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f353563653436643265393562653137373433393036316638396138663461373465633339643164363433313635613564613534333531666337346332386230322f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/compare/main...abrown:wasmtime:wasi-threads#diff-d213ee8ac09e5c4d18a2ac5faddc59fe1a5916f583693fbc45464e9b23dbd059R49-R51\" title=\"Comparing bytecodealliance:main...abrown:wasi-threads ¬∑ bytecodealliance/wasmtime\">Comparing bytecodealliance:main...abrown:wasi-threads ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 304489890,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666019959
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449156\">Harald Hoyer</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304488297\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>export</code> just fine, as <code>clang</code> does it with <code>-pthread</code> (which activates the <code>--shared-memory</code> linker flag)?</p>\n</blockquote>\n<p>At least for now, until several things change, we will need to have the shared memory be both imported and exported.</p>",
        "id": 304490117,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666020023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304478224\">said</a>:</p>\n<blockquote>\n<p>re: the shared memory, I believe that for now we must both import a shared memory (so that all of the thread instances share the same one) AND export that same memory (so that Wiggle can use it for buffers in host calls)</p>\n</blockquote>",
        "id": 304490166,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666020041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304490166\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304478224\">said</a>:</p>\n<blockquote>\n<p>re: the shared memory, I believe that for now we must both import a shared memory (so that all of the thread instances share the same one) AND export that same memory (so that Wiggle can use it for buffers in host calls)<br>\n</p>\n</blockquote>\n</blockquote>\n<p>Why not just export it?  Then the runtime can use the exported shared memory when it creates new threads.    At least this is how we do it on the web currently.</p>",
        "id": 304836566,
        "sender_full_name": "Sam Clegg",
        "timestamp": 1666125534
    },
    {
        "content": "<p>Having the runtime create a memory and pass it in seems like extra work that the runtime doesn't need to do.  In emscripten we avoid creating the memory in the loader in almost all cases these days.</p>",
        "id": 304836895,
        "sender_full_name": "Sam Clegg",
        "timestamp": 1666125655
    },
    {
        "content": "<p>But we want the memory to actually be shared between all the threads: if the parent thread creates it then the only way to make sure the child threads use that same linear memory is some engine magic. By importing the shared memory, both the parent and the child threads can use the same memory in a Wasm-friendly way.</p>",
        "id": 304841048,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666127266
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/304841048\">said</a>:</p>\n<blockquote>\n<p>But we want the memory to actually be shared between all the threads: if the parent thread creates it then the only way to make sure the child threads use that same linear memory is some engine magic. By importing the shared memory, both the parent and the child threads can use the same memory in a Wasm-friendly way.</p>\n</blockquote>\n<p>Oh, you are completely correct, please ignore me :)   In emscripten we  create the memory (SAB) in the loader code in the case of the pthreads.  Doh</p>",
        "id": 304846575,
        "sender_full_name": "Sam Clegg",
        "timestamp": 1666129759
    },
    {
        "content": "<p>On the Web, with Worker-based threads, does a trap in one thread <em>automatically</em> take down the other threads, or does Emscripten implement this behavior in JS?</p>",
        "id": 304861057,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1666138263
    },
    {
        "content": "<p>Emscripten has to implement the behavior internally.   Basically, any uncaught exception in a worker is proxied back to the main thread an results in an abort that kill all threads/workers.</p>",
        "id": 304967137,
        "sender_full_name": "Sam Clegg",
        "timestamp": 1666189516
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> So, I can confirm threading works ... just one big problem: If I read that correct <code>WasiCtx</code> is not thread safe and is shared to all threads mutable, which leads to unwanted strange side effects. Or, if <code>WasiCtx</code> is not shared mutable, how can they share state change?</p>",
        "id": 304971310,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666190716
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ? ^^</p>",
        "id": 304971657,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666190825
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> and I were just discussing this a couple of days ago. I was thinking of placing a mutex or read-write lock around each WASI context but struggling to find a refactoring in which this can be done optionally, so that users who do not want threads can avoid the locking overhead.</p>",
        "id": 304976086,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666192076
    },
    {
        "content": "<p>Maybe for your use case it makes sense to always lock...</p>",
        "id": 304976261,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666192125
    },
    {
        "content": "<p>Some global locks defy the use of threading. So while one thread wants to listen for a connection and waits, another cannot write.</p>",
        "id": 304976517,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666192192
    },
    {
        "content": "<p>Then there is the problem of RwLockWriteGuard not being Send, which needs to be with async and await. And WasiCtx being created from non async code.</p>",
        "id": 304976823,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666192284
    },
    {
        "content": "<p>anyway, the whole <code>Table</code> is a problem</p>",
        "id": 304977586,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666192472
    },
    {
        "content": "<p>Let me retry again tomorrow..  I might have forgotten to Arc&lt;&gt; the RwLock&lt;&gt;s</p>",
        "id": 304993693,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666196953
    },
    {
        "content": "<p>Yeah, this sounds like the issues I was running into; what did you do re: the <code>get_cx</code> signature?</p>",
        "id": 305013590,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666202940
    },
    {
        "content": "<p>There are no shared tables in wasm (yet) so each instance/threads would get its own table.</p>",
        "id": 305035497,
        "sender_full_name": "Sam Clegg",
        "timestamp": 1666210826
    },
    {
        "content": "<p>(assuming you mean the indirection function table)</p>",
        "id": 305035559,
        "sender_full_name": "Sam Clegg",
        "timestamp": 1666210847
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"498825\">Sam Clegg</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/305035559\">said</a>:</p>\n<blockquote>\n<p>(assuming you mean the indirection function table)</p>\n</blockquote>\n<p>I mean the <code>WasiCtx.table</code> with the <code>WasiFile</code>s and directories and sockets.</p>",
        "id": 305092978,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666250523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"449156\">@Harald Hoyer</span> <code>WasiCtx</code> as a whole is fairly problematic. I have rather strong opinions about its current implementation.</p>",
        "id": 305150194,
        "sender_full_name": "Nathaniel McCallum",
        "timestamp": 1666272628
    },
    {
        "content": "<p>So, I managed to <code>Arc&lt;RwLock&gt;&gt;</code> the <code>Table</code> entries ... with <code>RwLock</code> from <code>async_lock</code>. Every now and then, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"o\">-</span><span class=\"mi\">680788223</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"o\">-</span><span class=\"mi\">680788223</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"n\">unsuccessfully</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">future</span>: <span class=\"nc\">must</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">wiggle</span><span class=\"w\"> </span><span class=\"s\">\"async\"</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">execute</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Although I enabled <code>\"wasmtime-wasi/tokio\", \"wasmtime/async\"</code></p>",
        "id": 305152319,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666273322
    },
    {
        "content": "<p>Here the debug output of some experimental C-lib  with TLS and a simple pthread_create with two threads and join at the end.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">‚ùØ</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.16</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11230</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11228</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11230</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">__wasi_thread_spawn</span><span class=\"p\">(</span><span class=\"mh\">0x11220</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">ret</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">28742</span><span class=\"w\"></span>\n<span class=\"n\">aligned_alloc</span><span class=\"w\"> </span><span class=\"n\">sizeof</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"nc\">pthread</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">112</span><span class=\"w\"> </span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">112</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">map</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112c0</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112b8</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112c0</span><span class=\"w\"></span>\n<span class=\"n\">m</span><span class=\"w\"> </span><span class=\"n\">__wasi_thread_spawn</span><span class=\"p\">(</span><span class=\"mh\">0x112b0</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">start_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11220</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11228</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11230</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">start_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">start_arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">First</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Finished</span><span class=\"w\"></span>\n<span class=\"n\">__pthread_exit</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x11230</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">start_args</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112b0</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"o\">&amp;</span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112b8</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">thread</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112c0</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">start_func</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x1</span><span class=\"w\"></span>\n<span class=\"n\">wasi_thread_start</span><span class=\"w\"> </span><span class=\"n\">args</span>-&gt;<span class=\"nc\">start_arg</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Second</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span><span class=\"n\">Finished</span><span class=\"w\"></span>\n<span class=\"n\">__pthread_exit</span><span class=\"w\"> </span><span class=\"bp\">self</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mh\">0x112c0</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 305153094,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666273538
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> I got a version of your <code>./tests/all/cli_tests/threads.wat</code>, which reliably outputs:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">_start</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">wasi_thread_start</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">wasi_thread_start</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">wasi_thread_start</span><span class=\"w\"></span>\n<span class=\"n\">Hello</span><span class=\"w\"> </span><span class=\"n\">done</span><span class=\"w\"></span>\n</code></pre></div>\n<p>using <code>memory.atomic.wait32</code> and <code>memory.atomic.notify</code></p>",
        "id": 305169648,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666278085
    },
    {
        "content": "<p>let me rework stuff and make PRs for the <code>memory.atomic</code> operations</p>",
        "id": 305169843,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666278128
    },
    {
        "content": "<p>Nice!</p>",
        "id": 305171515,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666278572
    },
    {
        "content": "<p>It's exciting that there is now a working example of all of this stuff working. Any more issues on the tool chain side? Now the trick is to see if we can find a way to make all of this upstreamable.</p>",
        "id": 305174147,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666279303
    },
    {
        "content": "<p>Do any of you want to meet today before going offline?</p>",
        "id": 305174268,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666279335
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449156\">Harald Hoyer</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/305152319\">said</a>:</p>\n<blockquote>\n<p>Every now and then, I get:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">thread</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"o\">-</span><span class=\"mi\">680788223</span><span class=\"o\">'</span><span class=\"w\"> </span><span class=\"n\">panicked</span><span class=\"w\"> </span><span class=\"n\">at</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"na\">wasi</span><span class=\"o\">-</span><span class=\"n\">thread</span><span class=\"o\">-</span><span class=\"mi\">680788223</span><span class=\"w\"> </span><span class=\"n\">exited</span><span class=\"w\"> </span><span class=\"n\">unsuccessfully</span>: <span class=\"nc\">Cannot</span><span class=\"w\"> </span><span class=\"n\">wait</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">pending</span><span class=\"w\"> </span><span class=\"n\">future</span>: <span class=\"nc\">must</span><span class=\"w\"> </span><span class=\"n\">enable</span><span class=\"w\"> </span><span class=\"n\">wiggle</span><span class=\"w\"> </span><span class=\"s\">\"async\"</span><span class=\"w\"> </span><span class=\"n\">future</span><span class=\"w\"> </span><span class=\"n\">and</span><span class=\"w\"> </span><span class=\"n\">execute</span><span class=\"w\"> </span><span class=\"n\">on</span><span class=\"w\"> </span><span class=\"n\">an</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"n\">Store</span><span class=\"w\"></span>\n</code></pre></div>\n<p>Although I enabled <code>\"wasmtime-wasi/tokio\", \"wasmtime/async\"</code></p>\n</blockquote>\n<p>ok, managed to create a full async wasmtime version. No help needed anymore</p>",
        "id": 305329135,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666350953
    },
    {
        "content": "<p>Looking at the wat, I see</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code>  <span class=\"p\">(</span><span class=\"k\">global</span> <span class=\"nv\">$__stack_pointer</span> <span class=\"cm\">(;0;)</span> <span class=\"p\">(</span><span class=\"k\">mut</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"nb\">i32.const</span> <span class=\"mf\">70000</span><span class=\"p\">)</span>\n</code></pre></div>\n<p>Is that something, which has to be TLS?</p>",
        "id": 305341252,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666355010
    },
    {
        "content": "<p>interesting ... <a href=\"https://github.com/kettle11/wasm_set_stack_pointer\">https://github.com/kettle11/wasm_set_stack_pointer</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/kettle11/wasm_set_stack_pointer\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e2b31ddea4158dde442f166e25d499df8881fbaa\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623135623830366261636232346635303039363235653831363330613630646665613432346635373337333430393334326466373532633439346136336432632f6b6574746c6531312f7761736d5f7365745f737461636b5f706f696e746572)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/kettle11/wasm_set_stack_pointer\" title=\"GitHub - kettle11/wasm_set_stack_pointer: Expose a function from Rust WebAssembly that allows the host to set the stack pointer\">GitHub - kettle11/wasm_set_stack_pointer: Expose a function from Rust WebAssembly that allows the host to set the stack pointer</a></div><div class=\"message_embed_description\">Expose a function from Rust WebAssembly that allows the host to set the stack pointer - GitHub - kettle11/wasm_set_stack_pointer: Expose a function from Rust WebAssembly that allows the host to set...</div></div></div>",
        "id": 305341851,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666355258
    },
    {
        "content": "<p>ok, TIL <code>global</code> is TLS</p>",
        "id": 305344227,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666355978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"254110\">Andrew Brown</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/305174147\">said</a>:</p>\n<blockquote>\n<p>It's exciting that there is now a working example of all of this stuff working. Any more issues on the tool chain side? Now the trick is to see if we can find a way to make all of this upstreamable.</p>\n</blockquote>\n<p>toolchain wise, the linker <code>-Xlinker --import-memory</code> works, but the re-export <code>(export \"memory\" (memory 0))</code> is missing then</p>",
        "id": 305369987,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666362982
    },
    {
        "content": "<p>other than that: <code>CFLAGS=-pthread</code> seems to work fine</p>",
        "id": 305370144,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666363034
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span>  so, regarding the <code>$__stack_pointer</code> I would love to hear your advice.. should it be a wasm assembler trampoline, which first allocates the stack, sets the <code>$__stack_pointer</code>, then calls the real <code>wasi_thread_start</code> func?</p>",
        "id": 305377582,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666365227
    },
    {
        "content": "<p>or  can this be done from within wasmtime?</p>",
        "id": 305377700,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666365250
    },
    {
        "content": "<blockquote>\n<p>toolchain wise, the linker <code>-Xlinker --import-memory</code> works, but the re-export <code>(export \"memory\" (memory 0))</code> is missing then</p>\n</blockquote>\n<p>I looked into this and perhaps it is not yet possible in the toolchains. <code>wasm-ld</code> (from wasi-sdk) has <code>--export=&lt;value&gt; </code> to force a symbol to be exported but I don't think we can name memories with symbols yet (right, <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>?). Perhaps there is some trick to convince <code>wasm-ld</code> to both import the memory and then turn around and export it, but I don't know it and don't see any <a href=\"https://lld.llvm.org/WebAssembly.html\">mention in the docs</a> either.</p>",
        "id": 305381552,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666366278
    },
    {
        "content": "<p>The \"import then export\" pattern seems to me a temporary thing, but perhaps this is still a useful feature to have in <code>wasm-ld</code>; what do you think <span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span>, <span class=\"user-mention\" data-user-id=\"498825\">@Sam Clegg</span>?</p>",
        "id": 305382807,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666366515
    },
    {
        "content": "<blockquote>\n<p>so, regarding the <code>$__stack_pointer</code> I would love to hear your advice</p>\n</blockquote>\n<p>I think the linker is <a href=\"https://github.com/WebAssembly/tool-conventions/blob/79d4b069951edf50546ba8d2f2ecdef24301b7a1/Linking.md#merging-global-sections\">adding this</a>, or perhaps you are triggering <a href=\"https://github.com/WebAssembly/tool-conventions/blob/79d4b069951edf50546ba8d2f2ecdef24301b7a1/Linking.md#merging-global-sections\">dynamic linking</a>? I don't have the answer off-hand but my sense is that some modifications to <a href=\"https://github.com/WebAssembly/wasi-libc/blob/21d93b927d11dcf54f04086dbf5aa0bf7a85e69f/libc-top-half/musl/src/thread/pthread_create.c#L329-L349\"><code>__pthread_create</code> in wasi-libc</a> should make this work?</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/tool-conventions/blob/79d4b069951edf50546ba8d2f2ecdef24301b7a1/Linking.md#merging-global-sections\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/b4dd572d7afde6861b25dc68a785462a4e4cbaaf\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f623363306130386365323962343232316433666433343237306435333531306663386335346466376230306333633562396138613036306539636536396435362f576562417373656d626c792f746f6f6c2d636f6e76656e74696f6e73)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/tool-conventions/blob/79d4b069951edf50546ba8d2f2ecdef24301b7a1/Linking.md#merging-global-sections\" title=\"tool-conventions/Linking.md at 79d4b069951edf50546ba8d2f2ecdef24301b7a1 ¬∑ WebAssembly/tool-conventions\">tool-conventions/Linking.md at 79d4b069951edf50546ba8d2f2ecdef24301b7a1 ¬∑ WebAssembly/tool-conventions</a></div><div class=\"message_embed_description\">Conventions supporting interoperatibility between tools working with WebAssembly. - tool-conventions/Linking.md at 79d4b069951edf50546ba8d2f2ecdef24301b7a1 ¬∑ WebAssembly/tool-conventions</div></div></div><div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/21d93b927d11dcf54f04086dbf5aa0bf7a85e69f/libc-top-half/musl/src/thread/pthread_create.c#L329-L349\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/d8a69ecaba55fa7ea8b2dc0dfbf04ce989bed861\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f343134373166393038323165383135313264643663663631383439393466666364623039333239306533663137643730383433636366613135626236633533362f576562417373656d626c792f776173692d6c696263)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/21d93b927d11dcf54f04086dbf5aa0bf7a85e69f/libc-top-half/musl/src/thread/pthread_create.c#L329-L349\" title=\"wasi-libc/pthread_create.c at 21d93b927d11dcf54f04086dbf5aa0bf7a85e69f ¬∑ WebAssembly/wasi-libc\">wasi-libc/pthread_create.c at 21d93b927d11dcf54f04086dbf5aa0bf7a85e69f ¬∑ WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 305384434,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666366847
    },
    {
        "content": "<p>To answer your earlier question about this, yes, I think the stack pointer should be part of the TLS data.</p>",
        "id": 305384860,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666366927
    },
    {
        "content": "<p>(rereading what I wrote, I think I would edit the above to read: I think the _stack_ should be part of the TLS data and the stack pointer global should be set as part of the TLS data setup in <code>pthread_create</code>)</p>",
        "id": 305424032,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666378847
    },
    {
        "content": "<p><a href=\"https://reviews.llvm.org/D135898\">https://reviews.llvm.org/D135898</a> is a patch which I think should support \"import than export\"</p>",
        "id": 305424638,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1666379066
    },
    {
        "content": "<p>please enlighten me and correct my statements.</p>\n<ul>\n<li><code>$__stack_pointer</code> is a <code>global </code> i32 pointer, which is thread local</li>\n<li><code>$__stack_pointer</code> points to memory in <code>env.memory</code></li>\n<li><code>env.memory</code> is shared across all threads</li>\n</ul>\n<p>So, what I am might see in my execution is <code>$__stack_pointer</code> being used with the same index in threads (leading to UB), because nothing initializes <code>$__stack_pointer</code> on thread start. And even, if, to what value should it be set???? Seems like the value of <code>$__stack_pointer</code> is just the same on thread clone.</p>",
        "id": 305795007,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666610071
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ^^</p>",
        "id": 305795111,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666610113
    },
    {
        "content": "<p>I guess, I will have to allocate memory and point the <code>$__stack_pointer</code> to it, using hand written functions without <code>$__stack_pointer</code> usage. The only remaining question is, how big should it be? Can I assume the current value of <code>$__stack_pointer</code> is a good size?</p>",
        "id": 305801033,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666612423
    },
    {
        "content": "<p>Even, if I allocate new memory, would I need to clone the old one, because it could still reference memory from there?</p>",
        "id": 305808365,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666614666
    },
    {
        "content": "<p>I expect you'll want to have the parent allocate the memory for the new thread, before the new thread is created, so that you can just use regular <code>malloc</code> and friends. Then the thread entrypoint can just have a small bit of code that assigns the thread-local stack pointer to the allocated stack before doing anything else.</p>",
        "id": 305833691,
        "sender_full_name": "Dan Gohman",
        "timestamp": 1666621989
    },
    {
        "content": "<p>got it working! :)</p>",
        "id": 305840663,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666623924
    },
    {
        "content": "<p>How do I allow memory.grow? Currently I am manually editing:<br>\n<code>(import \"env\" \"memory\" (memory (;0;) 2 2 shared))</code> to <code>(import \"env\" \"memory\" (memory (;0;) 100 100 shared))</code></p>",
        "id": 305840982,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666624006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254083\">@Dan Gohman</span> ?</p>",
        "id": 305841016,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666624015
    },
    {
        "content": "<p>But doing that I can create and join 10 threads :)</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"err\">‚ùØ</span><span class=\"w\"> </span><span class=\"n\">cargo</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"n\">nightly</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\">  </span><span class=\"o\">--</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">bulk</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">Finished</span><span class=\"w\"> </span><span class=\"n\">dev</span><span class=\"w\"> </span><span class=\"p\">[</span><span class=\"n\">unoptimized</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"n\">debuginfo</span><span class=\"p\">]</span><span class=\"w\"> </span><span class=\"n\">target</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">in</span><span class=\"w\"> </span><span class=\"mf\">0.12</span><span class=\"n\">s</span><span class=\"w\"></span>\n<span class=\"w\">     </span><span class=\"n\">Running</span><span class=\"w\"> </span><span class=\"err\">`</span><span class=\"n\">target</span><span class=\"o\">/</span><span class=\"n\">debug</span><span class=\"o\">/</span><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"n\">run</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">disable</span><span class=\"o\">-</span><span class=\"n\">cache</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasm</span><span class=\"o\">-</span><span class=\"n\">features</span><span class=\"w\"> </span><span class=\"n\">bulk</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"p\">,</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">modules</span><span class=\"w\"> </span><span class=\"n\">experimental</span><span class=\"o\">-</span><span class=\"n\">wasi</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">tt</span><span class=\"err\">`</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70064</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70496</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70352</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70640</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70928</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">69920</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70784</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70208</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">71216</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">71216</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70928</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70784</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70208</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">69920</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70496</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">71072</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70352</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70640</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"w\"> </span><span class=\"n\">Thread</span><span class=\"w\"> </span><span class=\"mi\">70064</span><span class=\"w\"> </span><span class=\"n\">still</span><span class=\"w\"> </span><span class=\"n\">processing</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"mi\">69920</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"mi\">70064</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">2</span><span class=\"w\"> </span><span class=\"mi\">70208</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">3</span><span class=\"w\"> </span><span class=\"mi\">70352</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">4</span><span class=\"w\"> </span><span class=\"mi\">70496</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">5</span><span class=\"w\"> </span><span class=\"mi\">70640</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">6</span><span class=\"w\"> </span><span class=\"mi\">70784</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">7</span><span class=\"w\"> </span><span class=\"mi\">70928</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">8</span><span class=\"w\"> </span><span class=\"mi\">71072</span><span class=\"w\"></span>\n<span class=\"n\">Joined</span><span class=\"w\"> </span><span class=\"n\">thread</span><span class=\"w\"> </span>#<span class=\"mi\">9</span><span class=\"w\"> </span><span class=\"mi\">71216</span><span class=\"w\"></span>\n<span class=\"n\">All</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"n\">joined</span><span class=\"w\"></span>\n</code></pre></div>",
        "id": 305841259,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666624080
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"449156\">Harald Hoyer</span> <a href=\"#narrow/stream/349267-wasi-threads/topic/chicken_egg/near/305840982\">said</a>:</p>\n<blockquote>\n<p>How do I allow memory.grow? Currently I am manually editing:<br>\n<code>(import \"env\" \"memory\" (memory (;0;) 2 2 shared))</code> to <code>(import \"env\" \"memory\" (memory (;0;) 100 100 shared))</code></p>\n</blockquote>\n<p>I think you could use the <code>--initial-memory</code> and <code>--max-memory</code> flags in the <code>wasm-ld</code> to do this when you compile the Wasm program (see <a href=\"https://lld.llvm.org/WebAssembly.html\">here</a>). (Sort of a separate issue, but this raises the question in my mind whether MUSL's stack limit heuristic <a href=\"https://github.com/WebAssembly/wasi-libc/blob/21d93b927d11dcf54f04086dbf5aa0bf7a85e69f/libc-top-half/musl/src/thread/pthread_create.c#L334-L343\">here</a> should change for Wasm.)</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/blob/21d93b927d11dcf54f04086dbf5aa0bf7a85e69f/libc-top-half/musl/src/thread/pthread_create.c#L334-L343\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/2cf34e5dc94c69a6c9d12690f36055027c985155\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f626362663838643363373437363430313835353861323166333963396130306266643034356334646433356261313230626334323235643938633866376531322f576562417373656d626c792f776173692d6c696263)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/blob/21d93b927d11dcf54f04086dbf5aa0bf7a85e69f/libc-top-half/musl/src/thread/pthread_create.c#L334-L343\" title=\"wasi-libc/pthread_create.c at 21d93b927d11dcf54f04086dbf5aa0bf7a85e69f ¬∑ WebAssembly/wasi-libc\">wasi-libc/pthread_create.c at 21d93b927d11dcf54f04086dbf5aa0bf7a85e69f ¬∑ WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">WASI libc implementation for WebAssembly. Contribute to WebAssembly/wasi-libc development by creating an account on GitHub.</div></div></div>",
        "id": 305921168,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1666649260
    },
    {
        "content": "<p>So, here is my wasi-libc PR:<br>\n<a href=\"https://github.com/WebAssembly/wasi-libc/pull/343\">https://github.com/WebAssembly/wasi-libc/pull/343</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/wasi-libc/pull/343\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/33ceb3b86c2f2c439a442613a7262f980426fbef\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f303333633266376632623333363038333566343363393064353562326465373863663139333063646462643336366562653339626134396663663064333337342f576562417373656d626c792f776173692d6c6962632f70756c6c2f333433)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/wasi-libc/pull/343\" title=\"feat: setup stacks and TLS in `wasi_thread_start` by haraldh ¬∑ Pull Request #343 ¬∑ WebAssembly/wasi-libc\">feat: setup stacks and TLS in `wasi_thread_start` by haraldh ¬∑ Pull Request #343 ¬∑ WebAssembly/wasi-libc</a></div><div class=\"message_embed_description\">and cleanup in pthread_exit()\nSigned-off-by: Harald Hoyer harald@profian.com</div></div></div>",
        "id": 306030630,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1666705111
    },
    {
        "content": "<p>so, here is a notify/wait implementation <a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\">https://github.com/bytecodealliance/wasmtime/pull/5255</a> with parking_lot_core</p>\n<p>CC <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/aa75427e489b637b103a455a5b5c2dd0d9c533b3\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f313666396434616534666135303939363935326464633962336436633934306532633433386339313533313634353235343062353362653563373839373366392f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35323535)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5255\" title=\"feat: implement memory.atomic.notify,wait32,wait64 by haraldh ¬∑ Pull Request #5255 ¬∑ bytecodealliance/wasmtime\">feat: implement memory.atomic.notify,wait32,wait64 by haraldh ¬∑ Pull Request #5255 ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">Use parking_lot_core, as this established crate does exactly what is needed here.\nWARNING\nmemory_atomic_wait32() and memory_atomic_wait64() are called with an unsigned timeout: u64.\nThe Threading p...</div></div></div>",
        "id": 309202098,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1668176681
    },
    {
        "content": "<p>CC <span class=\"user-mention\" data-user-id=\"301625\">@Amanieu</span></p>",
        "id": 309202191,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1668176719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> could you please give me some hints on how to construct a multi threaded test?</p>",
        "id": 310497741,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1668631277
    },
    {
        "content": "<p>There are some basic examples <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/threads.rs\">here</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/threads.rs\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/e14c85158caad4394e9206156ace0832d5538cbb\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f363737663939663535333538373861336133303434323664333839346165626537386334666361623163353866653838623263303231306463366333323937662f62797465636f6465616c6c69616e63652f7761736d74696d65)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/tests/all/threads.rs\" title=\"wasmtime/threads.rs at main ¬∑ bytecodealliance/wasmtime\">wasmtime/threads.rs at main ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">A fast and secure runtime for WebAssembly. Contribute to bytecodealliance/wasmtime development by creating an account on GitHub.</div></div></div>",
        "id": 310498135,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668631407
    },
    {
        "content": "<p>but I don't have much to offer beyond combining the primitives that the <code>wasmtime</code> crate API gives</p>",
        "id": 310498196,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668631426
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 310500473,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1668632283
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> first test added, more to come tomorrow</p>",
        "id": 310684696,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1668713792
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span>  Is there a way to access shared memory from a guest compiled from rust? All the examples I've seen are in wat so I don't know if the tooling supports it. Some related questions:</p>\n<ul>\n<li>What build flags are needed to create a shared memory section?</li>\n<li>Can the shared memory be accessed as a byte slice? (I suppose it would appear as  heap pinned slice?) </li>\n<li>Can Atomics from the <code>std::sync::atomic</code>  package be mapped into that shared memory?</li>\n</ul>",
        "id": 310740390,
        "sender_full_name": "Steve Schoettler",
        "timestamp": 1668740548
    },
    {
        "content": "<blockquote>\n<p>What build flags are needed to create a shared memory section?</p>\n</blockquote>\n<p>I have not personally tried to get <code>wasm32-wasi</code> working, but I know abrown has and may know more. Otherwise though this is sufficient for me: <code>RUSTFLAGS=-Ctarget-feature=+atomics,+bulk-memory,+mutable-globals cargo +nightly build -Zbuild-std=panic_abort,std --target wasm32-unknown-unknown</code></p>\n<blockquote>\n<p>Can the shared memory be accessed as a byte slice?</p>\n</blockquote>\n<p>Yes and not, it's just \"memory\". Rust only works with a single linear memory and with <code>+atomics</code> the singular linear memory is a shared memory.</p>\n<blockquote>\n<p>Can Atomics from the std::sync::atomic package be mapped into that shared memory?</p>\n</blockquote>\n<p>They can indeed, in <code>+atomics</code> mode atomic instructions are used for all atomic operations.</p>",
        "id": 310744419,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668743905
    },
    {
        "content": "<p>Thanks. I think I'm still missing one or two pieces of information. How does the rust guest get a pointer to the shared memory region? It's clear how the host can get it, so the host could export a function that the guest could use to fetch the pointer, but I don't know if there's a way for the guest to obtain that pointer directly. <br>\nThen, can you use mem::transmute to tell rust that a set of bytes contain an Atomic? I did't know if llvm/wasm has a special way to access atomics (vs other rust data structures), so I wasn't sure if it would work for arbitrary memory locations</p>",
        "id": 310761894,
        "sender_full_name": "Steve Schoettler",
        "timestamp": 1668756440
    },
    {
        "content": "<p>Rust doesn't really get a pointer to the region or anything specific like that, it just gets access to the whole thing. It's the same compilation model for Rust as before, it gets one linear memory, it's just that in this case it's a shared linear memory. If you mean whether the memory is defined locally or imported from the system then that's controlled by <code>-Clink-arg=--import-memory</code> or not</p>",
        "id": 310845419,
        "sender_full_name": "Alex Crichton",
        "timestamp": 1668784980
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> <span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> first Draft for immutable WasiCtx<br>\n<a href=\"https://github.com/bytecodealliance/wasmtime/pull/5326\">https://github.com/bytecodealliance/wasmtime/pull/5326</a></p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/bytecodealliance/wasmtime/pull/5326\" style=\"background-image: url(https\\:\\/\\/uploads\\.zulipusercontent\\.net\\/4609919c8436921f86685abfc9ca3ecf95ec6f10\\/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f643561366430383161356365386439616339353031333766363139626532663332363666386433306264373862376163353535333738643033653439333063632f62797465636f6465616c6c69616e63652f7761736d74696d652f70756c6c2f35333236)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/bytecodealliance/wasmtime/pull/5326\" title=\"WIP:  immutable WasiCtx by haraldh ¬∑ Pull Request #5326 ¬∑ bytecodealliance/wasmtime\">WIP:  immutable WasiCtx by haraldh ¬∑ Pull Request #5326 ¬∑ bytecodealliance/wasmtime</a></div><div class=\"message_embed_description\">\n No description provided. \n</div></div></div>",
        "id": 312218860,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1669392580
    },
    {
        "content": "<p>Still some things to do, of course</p>",
        "id": 312218897,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1669392598
    },
    {
        "content": "<p>This time I managed to use <code>std::sync::RwLock</code> by removing <code>async</code> from <code>WasiFile::num_ready_bytes()</code>, so no need to use tokio RwLock and go full tokio.</p>",
        "id": 312219304,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1669392726
    },
    {
        "content": "<p>Most of us in the US are out due to Thanksgiving; I will take a look on Monday.</p>",
        "id": 312223049,
        "sender_full_name": "Andrew Brown",
        "timestamp": 1669393981
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"516084\">@bstrie</span> !</p>",
        "id": 313056220,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1669813785
    },
    {
        "content": "<p>Hello!</p>",
        "id": 313056242,
        "sender_full_name": "bstrie",
        "timestamp": 1669813794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"254110\">@Andrew Brown</span> <span class=\"user-mention\" data-user-id=\"253994\">@Alex Crichton</span> meet <span class=\"user-mention\" data-user-id=\"516084\">@bstrie</span> , he will take over my wasi threads work for now, as I was shifted to implement a page fault handler in our microkernel for lazy memory loading, to provide wasmtime with 2GB of mmaped static memory (default).</p>",
        "id": 313077699,
        "sender_full_name": "Harald Hoyer",
        "timestamp": 1669820011
    }
]