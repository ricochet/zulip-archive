[
    {
        "content": "<p>I'm trying to make a <code>thread_join</code> function in WebAssembly by setting a mutex to 1 in the main thread, and then launching a thread. the thread unlocks its mutex before exiting. the main thread can get notified with the threads exit by trying to acquire the mutex and releasing it.</p>\n<p>This is my code:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$main_type</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_spawn_type</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_start_type</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi\"</span> <span class=\"s2\">\"thread-spawn\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$thread_spawn</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_spawn_type</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$try_lock_mutex</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_spawn_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span> <span class=\"c1\">;; expected</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span> <span class=\"c1\">;; locked</span>\n    <span class=\"kt\">i32</span><span class=\"err\">.atomic.rmw.cmpxchg</span>\n    <span class=\"nb\">i32.eqz</span>\n  <span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$lock_mutex</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"k\">block</span> <span class=\"nv\">$done</span>\n        <span class=\"k\">loop</span> <span class=\"nv\">$retry</span>\n          <span class=\"c1\">;; Try to lock the mutex. $tryLockMutex returns 1 if the mutex</span>\n          <span class=\"c1\">;; was locked, and 0 otherwise.</span>\n          <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n          <span class=\"nb\">call</span> <span class=\"nv\">$try_lock_mutex</span>\n          <span class=\"nb\">br_if</span> <span class=\"nv\">$done</span>\n          <span class=\"c1\">;; Wait for the other agent to finish with mutex.</span>\n          <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span> <span class=\"c1\">;; mutex address</span>\n          <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>              <span class=\"c1\">;; expected value (1 =&gt; locked)</span>\n          <span class=\"nb\">i64.const</span> <span class=\"mi\">-1</span>             <span class=\"c1\">;; infinite timeout</span>\n          <span class=\"err\">memory.atomic.wait</span><span class=\"mi\">32</span>\n          <span class=\"nb\">drop</span>\n          <span class=\"nb\">br</span> <span class=\"nv\">$retry</span>\n        <span class=\"k\">end</span>\n      <span class=\"k\">end</span>\n   <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$unlock_mutex</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"c1\">;; mutex must be locked before by caller</span>\n      <span class=\"c1\">;; Unlock the mutex.</span>\n      <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>     <span class=\"c1\">;; mutex address</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>              <span class=\"c1\">;; 0 =&gt; unlocked</span>\n      <span class=\"kt\">i32</span><span class=\"err\">.atomic.store</span>\n\n      <span class=\"c1\">;; Notify one agent that is waiting on this lock.</span>\n      <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>   <span class=\"c1\">;; mutex address</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>            <span class=\"c1\">;; notify 1 waiter</span>\n      <span class=\"err\">memory.atomic.not</span><span class=\"nb\">if</span><span class=\"err\">y</span>\n      <span class=\"nb\">drop</span>\n   <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$wait_mutex_lock</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$lock_mutex</span>\n    <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$unlock_mutex</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$wasi_thread_start</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_start_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n     <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n     <span class=\"nb\">call</span> <span class=\"nv\">$unlock_mutex</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$main_type</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$lock_mutex</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$thread_spawn</span>\n    <span class=\"nb\">drop</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$wait_mutex_lock</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">4 4</span> <span class=\"err\">shared</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"wasi_thread_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$wasi_thread_start</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>I convert it to <code>wasm</code> using <code>wat2wasm</code> like this:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wat2wasm</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>Then run it using <code>wasmtime</code> with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">proposals</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">\\</span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>\n<p>The mutex code is from the <a href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\">wasm-threads</a> proposal.</p>\n<p>The problem is that the mutex never gets unlocked by the launched thread and the main thread gets stuck in an infinite waiting state.</p>\n<div class=\"message_embed\"><a class=\"message_embed_image\" href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\" style=\"background-image: url(&quot;https://uploads.zulipusercontent.net/b0ce661e8ad893bf9004bb2e2418b9cd274afafe/68747470733a2f2f6f70656e67726170682e6769746875626173736574732e636f6d2f393235373265616430376138363535396233303439383063613333313935653539346434336538653265663031333566353539336364303763653038393336352f576562417373656d626c792f74687265616473&quot;)\"></a><div class=\"data-container\"><div class=\"message_embed_title\"><a href=\"https://github.com/WebAssembly/threads/blob/main/proposals/threads/Overview.md\" title=\"threads/proposals/threads/Overview.md at main · WebAssembly/threads\">threads/proposals/threads/Overview.md at main · WebAssembly/threads</a></div><div class=\"message_embed_description\">Threads and Atomics in WebAssembly. Contribute to WebAssembly/threads development by creating an account on GitHub.</div></div></div>",
        "id": 446863170,
        "sender_full_name": "Ali Ghanbari",
        "timestamp": 1719317404
    },
    {
        "content": "<p>just tried the code on WAMR and it worked as expected, perhaps a wasmtime-specific problem ?</p>",
        "id": 446865171,
        "sender_full_name": "Marcin Kolny",
        "timestamp": 1719317910
    },
    {
        "content": "<p>no I tried it with wasmer &amp; WAMR and it doesn't work. but I just  found what is wrong with the code above. you need to import &amp; export memory + explecitly specify atomic operation memory index for it to work.</p>",
        "id": 446917054,
        "sender_full_name": "Ali Ghanbari",
        "timestamp": 1719329376
    },
    {
        "content": "<p>Here is new working code:</p>\n<div class=\"codehilite\" data-code-language=\"WebAssembly\"><pre><span></span><code><span class=\"p\">(</span><span class=\"k\">module</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$main_type</span> <span class=\"p\">(</span><span class=\"k\">func</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_spawn_type</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_start_type</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"env\"</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"cm\">(;0;)</span> <span class=\"mf\">4 4</span> <span class=\"err\">shared</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">import</span> <span class=\"s2\">\"wasi\"</span> <span class=\"s2\">\"thread-spawn\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$thread_spawn</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_spawn_type</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$try_lock_mutex</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_spawn_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">result</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span> <span class=\"c1\">;; expected</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span> <span class=\"c1\">;; locked</span>\n    <span class=\"kt\">i32</span><span class=\"err\">.atomic.rmw.cmpxchg</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">i32.eqz</span>\n  <span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$lock_mutex</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"k\">block</span> <span class=\"nv\">$done</span>\n        <span class=\"k\">loop</span> <span class=\"nv\">$retry</span>\n          <span class=\"c1\">;; Try to lock the mutex. $tryLockMutex returns 1 if the mutex</span>\n          <span class=\"c1\">;; was locked, and 0 otherwise.</span>\n          <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n          <span class=\"nb\">call</span> <span class=\"nv\">$try_lock_mutex</span>\n          <span class=\"nb\">br_if</span> <span class=\"nv\">$done</span>\n          <span class=\"c1\">;; Wait for the other agent to finish with mutex.</span>\n          <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span> <span class=\"c1\">;; mutex address</span>\n          <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>              <span class=\"c1\">;; expected value (1 =&gt; locked)</span>\n          <span class=\"nb\">i64.const</span> <span class=\"mi\">-1</span>             <span class=\"c1\">;; infinite timeout</span>\n          <span class=\"err\">memory.atomic.wait</span><span class=\"mi\">32</span> <span class=\"mi\">0</span>\n          <span class=\"nb\">drop</span>\n          <span class=\"nb\">br</span> <span class=\"nv\">$retry</span>\n        <span class=\"k\">end</span>\n      <span class=\"k\">end</span>\n   <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$unlock_mutex</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n      <span class=\"c1\">;; mutex must be locked before by caller</span>\n      <span class=\"c1\">;; Unlock the mutex.</span>\n      <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>     <span class=\"c1\">;; mutex address</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>              <span class=\"c1\">;; 0 =&gt; unlocked</span>\n      <span class=\"kt\">i32</span><span class=\"err\">.atomic.store</span> <span class=\"mi\">0</span>\n\n      <span class=\"c1\">;; Notify one agent that is waiting on this lock.</span>\n      <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>   <span class=\"c1\">;; mutex address</span>\n      <span class=\"nb\">i32.const</span> <span class=\"mi\">1</span>            <span class=\"c1\">;; notify 1 waiter</span>\n      <span class=\"err\">memory.atomic.not</span><span class=\"nb\">if</span><span class=\"err\">y</span> <span class=\"mi\">0</span>\n      <span class=\"nb\">drop</span>\n   <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$wait_mutex_lock</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$simple_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"nv\">$mutex_address</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n    <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$lock_mutex</span>\n    <span class=\"nb\">local.get</span> <span class=\"nv\">$mutex_address</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$unlock_mutex</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$wasi_thread_start</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$thread_start_type</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\">param</span> <span class=\"kt\">i32</span> <span class=\"kt\">i32</span><span class=\"p\">)</span>\n     <span class=\"nb\">local.get</span> <span class=\"mi\">1</span>\n     <span class=\"nb\">call</span> <span class=\"nv\">$unlock_mutex</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span> <span class=\"p\">(</span><span class=\"k\">type</span> <span class=\"nv\">$main_type</span><span class=\"p\">)</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$lock_mutex</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$thread_spawn</span>\n    <span class=\"nb\">drop</span>\n    <span class=\"nb\">i32.const</span> <span class=\"mi\">0</span>\n    <span class=\"nb\">call</span> <span class=\"nv\">$wait_mutex_lock</span>\n  <span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"memory\"</span> <span class=\"p\">(</span><span class=\"k\">memory</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"wasi_thread_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$wasi_thread_start</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\">export</span> <span class=\"s2\">\"_start\"</span> <span class=\"p\">(</span><span class=\"k\">func</span> <span class=\"nv\">$main</span><span class=\"p\">))</span>\n<span class=\"p\">)</span>\n</code></pre></div>\n<p>and tested with:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"n\">wat2wasm</span><span class=\"p\">.</span><span class=\"n\">exe</span><span class=\"w\"> </span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">wat</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">multi</span><span class=\"o\">-</span><span class=\"n\">memory</span><span class=\"w\"> </span><span class=\"o\">--</span><span class=\"n\">enable</span><span class=\"o\">-</span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">o</span><span class=\"w\"> </span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n<span class=\"n\">wasmtime</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">W</span><span class=\"w\"> </span><span class=\"n\">all</span><span class=\"o\">-</span><span class=\"n\">proposals</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"n\">S</span><span class=\"w\"> </span><span class=\"n\">threads</span><span class=\"w\"> </span><span class=\"p\">.</span><span class=\"err\">\\</span><span class=\"n\">mutex</span><span class=\"p\">.</span><span class=\"n\">wasm</span>\n</code></pre></div>",
        "id": 446917611,
        "sender_full_name": "Ali Ghanbari",
        "timestamp": 1719329496
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"731171\">Ali Ghanbari</span> has marked this topic as resolved.</p>",
        "id": 446929535,
        "sender_full_name": "Notification Bot",
        "timestamp": 1719332093
    }
]