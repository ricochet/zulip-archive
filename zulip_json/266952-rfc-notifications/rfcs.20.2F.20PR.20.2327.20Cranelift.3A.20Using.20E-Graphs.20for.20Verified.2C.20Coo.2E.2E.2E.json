[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/rfcs/pull/27\">PR #27</a> from <code>cranelift-egraphs</code> to <code>main</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/cfallin/rfcs/blob/cranelift-egraphs/accepted/cranelift-egraph.md\">Rendered</a></p>\n<p>This RFC proposes to add a <a href=\"https://en.wikipedia.org/wiki/Compiler#Middle_end\">middle-end optimization framework</a> to Cranelift based on <a href=\"https://en.wikipedia.org/wiki/E-graph\">e-graphs</a>. A middle-end<br>\noptimization framework works to improve the target-independent <a href=\"https://en.wikipedia.org/wiki/Intermediate_representation\">IR (intermediate representation)</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md\">CLIF</a>, before Cranelift translates it to machine instructions. Cranelift already has some basic  ptimizations in this category: <a href=\"https://en.wikipedia.org/wiki/Value_numbering\">Global Value Numbering (GVN)</a>, <a href=\"https://en.wikipedia.org/wiki/Loop-invariant_code_motion\">Loop-Independent Code Motion (LICM)</a>, <a href=\"https://en.wikipedia.org/wiki/Constant_folding\">Constant folding</a>, and most recently, a very basic form of <a href=\"https://en.wikipedia.org/wiki/Alias_analysis\">alias analysis</a> and redundant-load elimination. However, the current situation falls short in several ways.</p>\n<p>The RFC will first describe how the current situation suffers from three problems: how to order and interleave these optimizations as we build more of them (the <em>phase-ordering problem</em>), how to ensure they are correct when they are all delicate hand-written code (the <em>verification problem</em>), and how to make it easier to build up a large body of known simplifications without tedious handwritten code. It will then describe how an e-graph-based framework could address all<br>\nthree of these problems. It will describe some novel contributions in how to encode control flow in e-graphs (necessary in order to use e-graphs to optimize whole function bodies) developed during initial experimentation. Then finally it will discuss how we can use our existing rewrite-rule DSL, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md\">ISLE</a>, to describe rewrites on the e-graph.</p>\n</blockquote>",
        "id": 287971503,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656561562
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r910746950\">PR review comment</a>:</p>\n<blockquote>\n<p>*hash-consing</p>\n</blockquote>",
        "id": 287991551,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656577396
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1024468246\">PR review</a>.</p>",
        "id": 287991554,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656577397
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1024470093\">PR review</a>.</p>",
        "id": 287991695,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656577475
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r910748217\">PR review comment</a>:</p>\n<blockquote>\n<p>*function</p>\n</blockquote>",
        "id": 287991696,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656577475
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1024470985\">PR review</a>.</p>",
        "id": 287991751,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656577512
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r910748873\">PR review comment</a>:</p>\n<blockquote>\n<p>*using</p>\n</blockquote>",
        "id": 287991754,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656577513
    },
    {
        "content": "<p>eqrion created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r911348157\">PR review comment</a>:</p>\n<blockquote>\n<p>I've not had a chance to read this paper yet [1], but do you know if PEG's are another graph-based IR in this category?</p>\n<p>[1] <a href=\"https://rosstate.org/publications/eqsat/\">https://rosstate.org/publications/eqsat/</a></p>\n</blockquote>",
        "id": 288070863,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656614698
    },
    {
        "content": "<p>eqrion submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1025351257\">PR review</a>.</p>",
        "id": 288070865,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656614698
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1025368471\">PR review</a>.</p>",
        "id": 288072739,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656615633
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r911359784\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the link -- I wasn't aware of PEGs previously, but they look to be in the same family as the other approaches! The theta-nodes for loops (see e.g. Fig. 2 in the POPL 2009 paper) indicate to me that these are region-based, like VSDGs, so the same discussion points apply (vs. the retained-CFG-skeleton approach here). I see also in the description that they compute each node at most once, and as a result do partial-redundancy elimination, whereas we take an approach trying to preserve our existing GVN semantics and only compute a value when we know it will be used, which is generally safer from an optimization-always-improves-perf point of view.</p>\n</blockquote>",
        "id": 288072740,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656615634
    },
    {
        "content": "<p>jameysharp submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1025413944\">PR review</a>.</p>",
        "id": 288078029,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656618307
    },
    {
        "content": "<p>jameysharp created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r911390807\">PR review comment</a>:</p>\n<blockquote>\n<p>I haven't checked whether this applies to Program Expression Graphs specifically, but similar dataflow-based IRs like the <a href=\"https://homes.cs.washington.edu/~mernst/pubs/vdg-popl94.pdf\">Value Dependence Graph</a> don't preserve non-termination. A loop that doesn't terminate might not define any values used later and would then be removed, \"because CFG values that are not demanded do not appear.\" Also, the \"Equality Saturation\" paper you cited has a whole side thing (section 6.1) about handling side-effects like heap access, because that's another challenge for purely dataflow IRs.</p>\n<p>This is what distinguishes the Value State Dependence Graph and the newer Regionalized VSDG. Treating state and termination dependencies as additional pseudo-dataflow edges means any topological sort of the graph is a valid serialization.</p>\n<p>I assume Chris' approach preserves termination and side effects (at the cost of missing some optimization opportunities that might be safe) but I haven't looked at it carefully enough yet to understand how it does that. From what I've heard so far I suspect it's different than anything I've seen in the literature.</p>\n</blockquote>",
        "id": 288078030,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656618307
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/27\">PR #27</a> from <code>cranelift-egraphs</code> to <code>main</code>.</p>",
        "id": 288078169,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656618369
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1025418133\">PR review</a>.</p>",
        "id": 288078504,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656618560
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r911393685\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, the approach proposed in this RFC preserves both termination and side-effects in a somewhat simple way: by just keeping that part of the CFG around. Or more precisely, it maintains a \"skeleton\", which is a list of eclass IDs in each basic block of side-effecting ops in original order. This is then used during the scoped elaboration to schedule the pure ops back into the spaces between them. One nice property of this, also, is that we stay close enough to the original CFG that we could actually do the roundtrip in a way that never has to move instruction data (memory traffic is expensive!) except when a node is truly duplicated: the skeleton's instructions are stored in the original <code>ir::Function</code>, and the original copy of each e-node remains in the <code>ir::Function</code> as well.</p>\n</blockquote>",
        "id": 288078505,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1656618560
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/27\">PR #27</a> from <code>cranelift-egraphs</code> to <code>main</code>.</p>",
        "id": 293625907,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660599935
    },
    {
        "content": "<p>avanhatt submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1074243423\">PR review</a>.</p>",
        "id": 293748208,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1074243423\">PR review</a>.</p>",
        "id": 293748209,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946864808\">PR review comment</a>:</p>\n<blockquote>\n<p>Total nit: loop-invariant not loop-independent</p>\n</blockquote>",
        "id": 293748210,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946866390\">PR review comment</a>:</p>\n<blockquote>\n<p>the re-inventing the wheel problem :D </p>\n</blockquote>",
        "id": 293748212,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946878115\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: if we're being precise, in the egraph itself, the references are to other eclasses, not other enodes. Unless aegraphs differ from egg-style egraphs here? </p>\n</blockquote>",
        "id": 293748213,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946874078\">PR review comment</a>:</p>\n<blockquote>\n<p>Ruler would be another good external cite here: <a href=\"https://www.mwillsey.com/papers/ruler\">https://www.mwillsey.com/papers/ruler</a></p>\n</blockquote>",
        "id": 293748214,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946875477\">PR review comment</a>:</p>\n<blockquote>\n<p>Nit: ID not defined at this point</p>\n</blockquote>",
        "id": 293748215,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946873714\">PR review comment</a>:</p>\n<blockquote>\n<p>Might be worth mentioning here that verification results still need to trust the rule application engine, but that in the rule-based world, you get to centralize the core that you need to trust.</p>\n</blockquote>",
        "id": 293748217,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>avanhatt created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r946967052\">PR review comment</a>:</p>\n<blockquote>\n<p>Basic question (sorry): is there an external source that detailed the operations/behavior on a scoped hashmap? When I've implemented GVN in the past it's been with a standard hashmap. I want to think of the scoped hashmap as conceptually equivalent to a stack of hashmaps, but I don't think that's quite right when a value spans multiple scopes.</p>\n</blockquote>",
        "id": 293748219,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660666027
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/27\">PR #27</a> from <code>cranelift-egraphs</code> to <code>main</code>.</p>",
        "id": 293914068,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748253
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1075902711\">PR review</a>.</p>",
        "id": 293914211,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748296
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r948054129\">PR review comment</a>:</p>\n<blockquote>\n<p>I just added a paragraph to describe this -- thanks! The basic idea is that it's like a lexical-scoping lookup: inserts add to deepest scope, lookups scan scopes from inner to outer.</p>\n</blockquote>",
        "id": 293914212,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748296
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1075903168\">PR review</a>.</p>",
        "id": 293914235,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748307
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r948054338\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated, thanks!</p>\n</blockquote>",
        "id": 293914236,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748307
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1075904104\">PR review</a>.</p>",
        "id": 293914269,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748320
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r948054587\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated, to \"same canonical representation\"</p>\n</blockquote>",
        "id": 293914272,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748321
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r948054699\">PR review comment</a>:</p>\n<blockquote>\n<p>Added!</p>\n</blockquote>",
        "id": 293914282,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748327
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1075904542\">PR review</a>.</p>",
        "id": 293914283,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748327
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1075904991\">PR review</a>.</p>",
        "id": 293914299,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748335
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r948054944\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, excellent point.</p>\n</blockquote>",
        "id": 293914301,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748335
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1075905430\">PR review</a>.</p>",
        "id": 293914335,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748345
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#discussion_r948055231\">PR review comment</a>:</p>\n<blockquote>\n<p>Fixed!</p>\n</blockquote>",
        "id": 293914336,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660748345
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1082534859\">PR review</a>.</p>",
        "id": 294909319,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1661273899
    },
    {
        "content": "<p>avanhatt submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1084239876\">PR review</a>.</p>",
        "id": 295092486,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1661361878
    },
    {
        "content": "<p>uweigand submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1084293314\">PR review</a>.</p>",
        "id": 295099484,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1661364381
    },
    {
        "content": "<p>elliottt submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/27#pullrequestreview-1084699733\">PR review</a>.</p>",
        "id": 295151641,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1661393606
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/rfcs/pull/27\">PR #27</a>.</p>",
        "id": 297619650,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1662566304
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/27\">PR #27</a> from <code>cranelift-egraphs</code> to <code>main</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-egraph.md\">Rendered</a></p>\n<p>This RFC proposes to add a <a href=\"https://en.wikipedia.org/wiki/Compiler#Middle_end\">middle-end optimization framework</a> to Cranelift based on <a href=\"https://en.wikipedia.org/wiki/E-graph\">e-graphs</a>. A middle-end<br>\noptimization framework works to improve the target-independent <a href=\"https://en.wikipedia.org/wiki/Intermediate_representation\">IR (intermediate representation)</a>, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/docs/ir.md\">CLIF</a>, before Cranelift translates it to machine instructions. Cranelift already has some basic  ptimizations in this category: <a href=\"https://en.wikipedia.org/wiki/Value_numbering\">Global Value Numbering (GVN)</a>, <a href=\"https://en.wikipedia.org/wiki/Loop-invariant_code_motion\">Loop-Independent Code Motion (LICM)</a>, <a href=\"https://en.wikipedia.org/wiki/Constant_folding\">Constant folding</a>, and most recently, a very basic form of <a href=\"https://en.wikipedia.org/wiki/Alias_analysis\">alias analysis</a> and redundant-load elimination. However, the current situation falls short in several ways.</p>\n<p>The RFC will first describe how the current situation suffers from three problems: how to order and interleave these optimizations as we build more of them (the <em>phase-ordering problem</em>), how to ensure they are correct when they are all delicate hand-written code (the <em>verification problem</em>), and how to make it easier to build up a large body of known simplifications without tedious handwritten code. It will then describe how an e-graph-based framework could address all<br>\nthree of these problems. It will describe some novel contributions in how to encode control flow in e-graphs (necessary in order to use e-graphs to optimize whole function bodies) developed during initial experimentation. Then finally it will discuss how we can use our existing rewrite-rule DSL, <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/cranelift/isle/docs/language-reference.md\">ISLE</a>, to describe rewrites on the e-graph.</p>\n</blockquote>",
        "id": 297619744,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1662566334
    }
]