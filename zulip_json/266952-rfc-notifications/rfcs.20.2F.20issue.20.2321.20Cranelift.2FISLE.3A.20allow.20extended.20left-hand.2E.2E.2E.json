[
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108077203\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>This is an elaboration of some of the high-level thoughts I mentioned in the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/main/meetings/cranelift/2022/cranelift-04-18.md\">last Cranelift biweekly</a>, and originally came from some discussions and head-scratching while pair-implementing some x64 rules with @abrown (thanks!). I spent some time playing with a bunch of different corners of the design space and this seems like the best option so far, but I'm curious if anyone has better ideas; I figured this was at the point that I could lay it out for feedback, in any case!</p>\n</blockquote>",
        "id": 280021175,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650862481
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108425069\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>This looks good to me... I'm currently trying to port IaddPairwise lowering to {U|S}ADDLP for aarch64 and I'm not finding it intuitive, so anything that makes it clearer how to use a N-to-1 extractor(s) would be great. My specific problem requires pattern matching a diamond shaped DAG and, I think, from your examples of current hacks, I can currently achieve this with using an approach from @uweigand. But, again, it doesn't look natural or really make obvious sense to me.</p>\n<p>For my clarification, can current extractors use put_in_reg? Or is this considered as having side-effects? </p>\n<p>I also like having the 'given' for predicates, such as for architecture features.</p>\n</blockquote>",
        "id": 280052869,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650884760
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108813498\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Thanks! For what it's worth @sparker-arm I'd be happy to help you work out how to get particular lowerings to work sometime, if you think that would be useful. (I've done some Zoom pair-implementing with abrown before and it's always interesting and educational for both of us!)</p>\n<blockquote>\n<p>For my clarification, can current extractors use put_in_reg? Or is this considered as having side-effects?</p>\n</blockquote>\n<p>It's a side-effecting constructor, so this would only come in the RHS. In general the phasing divide that makes sense I think is to collect as much as we need to match in the LHS (this includes \"pure\" parts that we may or may not be able to build, like certain immediate kinds), and then start the emission actions in the RHS. The only kinds of actions that <em>have</em> to come in the RHS (after we commit) are <code>put_in_reg</code>, <code>sink_inst</code>, and <code>emit</code>, I think.</p>\n</blockquote>",
        "id": 280097965,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650905704
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108834901\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Ah, I forgot to cc @avanhatt re: verification concerns -- please let us know what you think as well!</p>\n</blockquote>",
        "id": 280100882,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907047
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108835482\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>This example</p>\n<div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">lower</span> <span class=\"p\">(</span><span class=\"nv\">magic_simd_op</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nv\">given</span> <span class=\"p\">(</span><span class=\"nv\">magic_simd_extension_enabled</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nv\">x64_magic_simd_op</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n</code></pre></div>\n<p>seems like it would be better written as the following so that it isn't \"backwards\" -- which users have found confusing -- with the new language extension:</p>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">lower</span> <span class=\"p\">(</span><span class=\"nv\">magic_simd_op</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nv\">given</span> <span class=\"nv\">_</span> <span class=\"p\">(</span><span class=\"nv\">magic_simd_extension_enabled</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"nv\">x64_magic_simd_op</span> <span class=\"nv\">x</span> <span class=\"nv\">y</span><span class=\"p\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 280100918,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907063
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108839686\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>(And that would let us get rid of optional expressions in <code>given</code> clauses, simplifying the language extension a little)</p>\n</blockquote>",
        "id": 280101167,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907202
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108839883\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Overall, I like this a lot!</p>\n</blockquote>",
        "id": 280101224,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907212
    },
    {
        "content": "<p>fitzgen <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108840577\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Are you imagining that pure external terms would only get <code>&amp;self</code> context methods?</p>\n</blockquote>",
        "id": 280101282,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907264
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108843436\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<blockquote>\n<p>Are you imagining that pure external terms would only get <code>&amp;self</code> context methods?</p>\n</blockquote>\n<p>I actually hadn't considered that at least at first, as extractors take <code>&amp;mut self</code> right now as well (if I remember right this was mostly for consistency but there may be some cases where we memoize as well). But it does seem like a nice long-term goal to take <code>&amp;self</code> both for extractors and pure constructors, for more safety in the Rust bindings.</p>\n</blockquote>",
        "id": 280101728,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907477
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1108844436\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<blockquote>\n<p>(And that would let us get rid of optional expressions in <code>given</code> clauses, simplifying the language extension a little)</p>\n</blockquote>\n<p>Hmm, yeah, I like your version better here, thanks!</p>\n</blockquote>",
        "id": 280101895,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650907561
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1109532572\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<blockquote>\n<p>I'd be happy to help you work out how to get particular lowerings to work sometime</p>\n</blockquote>\n<p>Thanks!</p>\n<blockquote>\n<p>It's a side-effecting constructor, so this would only come in the RHS.</p>\n</blockquote>\n<p>Sorry to go off track, but why is it that to look at a value produced by an instruction, we have to put_in_reg first? Can't extractors understand an SSA value from an instruction, without causing side-effects? As a concrete example, is something like a simple optimisation like this possible?</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">lower</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">isub</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">given</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">are_equal</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\">  </span><span class=\"n\">y</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">(</span><span class=\"n\">iconst</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 280179111,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650963304
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1109988498\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<blockquote>\n<p>Sorry to go off track, but why is it that to look at a value produced by an instruction, we have to put_in_reg first? Can't extractors understand an SSA value from an instruction, without causing side-effects? As a concrete example, is something like a simple optimisation like this possible?</p>\n<p><code>\n(rule (lower (isub x y))\n  (given (are_equal x  y))\n  (iconst 0))\n</code></p>\n</blockquote>\n<p>That's definitely possible! <code>put_in_reg</code> isn't needed to look at the SSA <code>Value</code>; it is only needed once one decides to put the value in a register and use it in a machine instruction.</p>\n</blockquote>",
        "id": 280233216,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650989652
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1110229491\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Thanks all -- updated based on feedback!</p>\n<p>It seems like there are no really big concerns here yet (and after speaking with @avanhatt, @mlfbrown and @mpardesh today it sounds like this should work for <code>isle-veri</code> as well), but please let me know if there are any other lingering concerns. Otherwise I'll likely move this to final-call status in a day or two.</p>\n</blockquote>",
        "id": 280269319,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651005704
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time for the FCP, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[ ] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[ ] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[ ] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[ ] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[ ] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280404266,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651090077
    },
    {
        "content": "<p>fitzgen edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time for the FCP, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[ ] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[ ] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[ ] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[ ] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280405330,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651090639
    },
    {
        "content": "<p>alexcrichton edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time for the FCP, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[ ] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[ ] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[ ] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280407112,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651091627
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[ ] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[ ] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[ ] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280409703,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651093013
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[ ] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[ ] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[x] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280422600,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651100253
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111558371\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>With approvals from two separate groups (Fastly and Intel) this now enters the <em>Final Comment Period</em>, which will end on Mon May 9 (unless all groups have at least one approval, shortcutting the process, or any objections are raised, pausing it).</p>\n</blockquote>",
        "id": 280422745,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651100341
    },
    {
        "content": "<p>uweigand <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1112386381\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Looks good to me, thanks!</p>\n</blockquote>",
        "id": 280516384,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651161781
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[ ] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[x] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[x] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280526548,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651166071
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[ ] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[x] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[x] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[x] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280526564,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651166079
    },
    {
        "content": "<p>sparker-arm <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1112488232\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Yeah, LGTM too, thanks!</p>\n</blockquote>",
        "id": 280529814,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651167588
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[x] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[x] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[x] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[x] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[ ] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280529992,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651167681
    },
    {
        "content": "<p>cfallin edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[ ] @akirilov-arm</li>\n<li>[x] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[x] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[x] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[x] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[x] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280537288,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651170943
    },
    {
        "content": "<p>cfallin <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1112538125\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>With approvals from all stakeholder groups above, the final comment period has ended early and this RFC will merge:  as per the <a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/rfc-process.md\">RFC process</a>,</p>\n<blockquote>\n<p>Finally, the RFC is automatically merged/close if either:\n* The FCP elapses without any objections.\n* A stakeholder from each group has signed off, short-cutting the waiting period.</p>\n</blockquote>\n<p>Thanks all! I'll work on cleaning up the draft implementation in <a href=\"https://github.com/bytecodealliance/wasmtime/issues/4072\">bytecodealliance/wasmtime#4072</a>, incorporating changes from here (notably <code>given</code> -&gt; <code>if-let</code>), and hopefully we can start using this in our lowering rules soon!</p>\n</blockquote>",
        "id": 280537645,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651171103
    },
    {
        "content": "<p>akirilov-arm edited a <a href=\"https://github.com/bytecodealliance/rfcs/pull/21#issuecomment-1111432362\">comment</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/21\">issue #21</a>:</p>\n<blockquote>\n<p>Alright, it is now time to make a motion to finalize, I think! I'll create the stakeholders list below based on committers to Cranelift active in the past three months (since Jan 26, anything more than a trivial doc fix) and Cranelift-related RFCs, plus anyone who has commented here.</p>\n<h1>Motion to finalize with a disposition to merge</h1>\n<h1>Stakeholders sign-off</h1>\n<h2>Arm</h2>\n<ul>\n<li>[x] @akirilov-arm</li>\n<li>[x] @sparker-arm</li>\n<li>[ ] @dheaton-arm</li>\n<li>[ ] @FreddieLiardet</li>\n</ul>\n<h2>Cornell</h2>\n<ul>\n<li>[x] @avanhatt</li>\n</ul>\n<h2>Fastly</h2>\n<ul>\n<li>[x] @alexcrichton </li>\n<li>[x] @cfallin</li>\n<li>[x] @fitzgen </li>\n</ul>\n<h2>IBM</h2>\n<ul>\n<li>[x] @uweigand</li>\n</ul>\n<h2>Intel</h2>\n<ul>\n<li>[x] @abrown </li>\n<li>[ ] @jlb6740</li>\n</ul>\n<h2>Unaffiliated</h2>\n<ul>\n<li>[x] @bjorn3</li>\n</ul>\n</blockquote>",
        "id": 280622133,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651233694
    }
]