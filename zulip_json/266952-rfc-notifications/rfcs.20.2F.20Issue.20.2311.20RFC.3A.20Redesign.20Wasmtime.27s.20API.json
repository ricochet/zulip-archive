[
    {
        "content": "<p>acfoltzer <a href=\"https://github.com/bytecodealliance/rfcs/pull/11#issuecomment-833763821\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">Issue #11</a>:</p>\n<blockquote>\n<p>I'm so excited about this, thank you for making it happen!</p>\n<p>I'm a little unclear about the role of the store's type variable <code>T</code> from a library user perspective. I think it would help to have some examples of user code showing how the <code>T</code> impacts the developer experience. Is it usually going to be inferred or fixed by library code, or will the user have to reason about what this variable should be?</p>\n</blockquote>",
        "id": 237707879,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1620326116
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/rfcs/pull/11#issuecomment-833812656\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">Issue #11</a>:</p>\n<blockquote>\n<p>A good question! It's sort of tangentially touched on <a href=\"https://github.com/alexcrichton/rfcs-2/blob/new-api/accepted/new-api.md#wasi-changes\">here</a> but the general idea is that if you are a library crate then to work with a <code>Store&lt;T&gt;</code> you'll probably place some sort of trait bound on <code>T</code> to get access to the data you'd want. For example with WASI:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// in the wasmtime-wasi crate</span>\n<span class=\"k\">fn</span> <span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"n\">funcs</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">where</span><span class=\"w\"> </span><span class=\"n\">T</span>: <span class=\"nb\">AsMut</span><span class=\"o\">&lt;</span><span class=\"n\">WasiCtx</span><span class=\"o\">&gt;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</code></pre></div>\n<p>or alternatively:</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"c1\">// in your crate</span>\n<span class=\"k\">fn</span> <span class=\"nf\">add_to_linker</span><span class=\"o\">&lt;</span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">funcs</span>: <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">Linker</span><span class=\"o\">&lt;'</span><span class=\"nb\">_</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"o\">&gt;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">get</span>: <span class=\"nc\">impl</span><span class=\"w\"> </span><span class=\"nb\">Fn</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"k\">mut</span><span class=\"w\"> </span><span class=\"n\">T</span><span class=\"p\">)</span><span class=\"w\"> </span>-&gt; <span class=\"kp\">&amp;</span><span class=\"nc\">mut</span><span class=\"w\"> </span><span class=\"n\">MyLibraryState</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Copy</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Send</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"nb\">Sync</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"o\">'</span><span class=\"nb\">static</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div>\n<p>The idea being that the owner of the store will still determine the <code>T</code> for you. Libraries will work generically with some <code>T</code> with trait bounds or accessors or similar.</p>\n<p>In terms of application code and such I'd imagine that the <code>T</code> is generally inferred from a call to <code>Store::new</code> for you, given that you're selecting some type to be owned by the store there.</p>\n</blockquote>",
        "id": 237717969,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1620330392
    },
    {
        "content": "<p>acfoltzer <a href=\"https://github.com/bytecodealliance/rfcs/pull/11#issuecomment-836960119\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">Issue #11</a>:</p>\n<blockquote>\n<p>Hmm, I think I get it. To check my understanding, if I want to have my own application-specific context type but also a WASI context, how might that look? Create my own combined context type that impls both <code>AsMut&lt;WasiCtx&gt;</code> and <code>AsMut&lt;MyAppCtx&gt;</code>?</p>\n</blockquote>",
        "id": 238175249,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1620665613
    },
    {
        "content": "<p>alexcrichton <a href=\"https://github.com/bytecodealliance/rfcs/pull/11#issuecomment-837472243\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">Issue #11</a>:</p>\n<blockquote>\n<p>@acfoltzer indeed! While it's not the prettiest <a href=\"https://github.com/alexcrichton/wasmtime/blob/8d56a22eac107871ff83f6732a60eee82f8a69b1/src/commands/run.rs#L358-L405\">this is an example</a> in the branch I'm working on. The <code>wasmtime</code> CLI optionally supports some WASI proposals both at runtime and compile time, and that struct is used to manage the state where it's dynamically initialized and then used by linker-added functions through the <code>BorrowMut</code> traits</p>\n</blockquote>",
        "id": 238225305,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1620688083
    },
    {
        "content": "<p>acfoltzer <a href=\"https://github.com/bytecodealliance/rfcs/pull/11#issuecomment-837500863\">commented</a> on <a href=\"https://github.com/bytecodealliance/rfcs/pull/11\">Issue #11</a>:</p>\n<blockquote>\n<p>Perfect, that makes tons of sense. Thank you!</p>\n</blockquote>",
        "id": 238227852,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1620689816
    }
]