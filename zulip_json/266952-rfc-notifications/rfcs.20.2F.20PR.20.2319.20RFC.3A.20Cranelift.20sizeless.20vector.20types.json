[
    {
        "content": "<p>sparker-arm opened <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>:</p>\n<blockquote>\n<p>Copyright (c) 2021, Arm Limited.</p>\n</blockquote>",
        "id": 265279263,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737513
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835085273\">PR review</a>.</p>",
        "id": 265279447,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737631
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771289479\">PR review comment</a>:</p>\n<blockquote>\n<p>Please take it from the special types range instead.</p>\n</blockquote>",
        "id": 265279448,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737632
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771290882\">PR review comment</a>:</p>\n<blockquote>\n<p>Riscv allows smaller vectors, right?</p>\n</blockquote>",
        "id": 265279685,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737769
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835089236\">PR review</a>.</p>",
        "id": 265279686,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737769
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835092003\">PR review</a>.</p>",
        "id": 265279770,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737839
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771291635\">PR review comment</a>:</p>\n<blockquote>\n<p>Will operations like <code>iadd</code> work just like with regular vectors?</p>\n</blockquote>",
        "id": 265279771,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639737839
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835112880\">PR review</a>.</p>",
        "id": 265282087,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639739123
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771310562\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, apparently so, but the flexible vector spec does not.</p>\n</blockquote>",
        "id": 265282088,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639739123
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835114667\">PR review</a>.</p>",
        "id": 265282296,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639739250
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771311848\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, I think most polymorphic instructions can just be extended for sizeless types too. I've currently implemented: iadd, isub, imul, fadd, fsub and splat.</p>\n</blockquote>",
        "id": 265282297,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639739251
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835131121\">PR review</a>.</p>",
        "id": 265284220,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639740454
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771323710\">PR review comment</a>:</p>\n<blockquote>\n<p>Also, the flexible vectors specification might introduce the requirement that the underlying vector length is a power of 2, even though the Arm SVE and the RISC-V V extension, I suppose, do not have similar restrictions. Whether our IR should cover more than the common use cases (such as the Wasm flexible vectors, power-of-2 vector sizes, etc.) is something to discuss.</p>\n</blockquote>",
        "id": 265284221,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639740454
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-835662906\">PR review</a>.</p>",
        "id": 265365343,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639777808
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r771711221\">PR review comment</a>:</p>\n<blockquote>\n<p>It seems to me that supporting more general expressivity at the CLIF level is a good thing to establish early on if we plan to do it at all, or else we'll bake in a lot of assumptions to code that operates on these types, over time. So non-power-of-2 sizes is something to include (and test for) early. It does seem valuable to me to support this if underlying hardware commonly does.</p>\n<p>On the other hand, we don't want to come up with a design that requires handling difficult edge-cases; emulating smaller vector support than the fundamental unit seems like a good example of that. (Edge-cases if one were to try to emulate with bigger ops involve e.g. ensuring loads/stores don't run beyond the end of the heap, and having smaller alignments than usual.) So scaling down to 64 bits seems like an unreasonable goal just because one possible future platform supports it. So, I'd tentatively suggest a 128-bit minimum size.</p>\n</blockquote>",
        "id": 265365344,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639777808
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-843901415\">PR review</a>.</p>",
        "id": 266849333,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1641322975
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-843901415\">PR review</a>.</p>",
        "id": 266849334,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1641322975
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r778315519\">PR review comment</a>:</p>\n<blockquote>\n<p>To avoid ambiguity, we should rename <code>is_vector</code> to <code>is_sized_vector</code> if we move forward with this.</p>\n</blockquote>",
        "id": 266849335,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1641322975
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 270217400,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643725128
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-869203615\">PR review</a>.</p>",
        "id": 270218705,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643725561
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r796648005\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated in latest version.</p>\n</blockquote>",
        "id": 270218706,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643725561
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-882271718\">PR review</a>.</p>",
        "id": 271901278,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644879182
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-882271718\">PR review</a>.</p>",
        "id": 271901279,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644879183
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r806300030\">PR review comment</a>:</p>\n<blockquote>\n<p>What does \"vector_scale\" mean in this context? Number of basic-vector-register units in the vector value's width, or...?</p>\n</blockquote>",
        "id": 271901280,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644879183
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r806299155\">PR review comment</a>:</p>\n<blockquote>\n<p>We can definitely talk about designs that allow for different spill slot sizes; I can imagine a notion of \"multiple spill slot spaces\" (i.e., different index domains managed separately).</p>\n<p>But I think the simplest approach here is what we had talked about before: allocate vector registers as the basic unit; they are as wide as they are, and both v128-typed values and bigger-sizeless-typed values allocate one vector register. The spillslot then needs to be as big as the actual register width but otherwise this scheme seems reasonable enough to me.</p>\n<p>(FWIW, <a href=\"http://regalloc.rs\">regalloc.rs</a> and regalloc2 have the same design regarding spillslot abstractions and API, so the same considerations apply both before and after migration)</p>\n</blockquote>",
        "id": 271901281,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644879183
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r806302028\">PR review comment</a>:</p>\n<blockquote>\n<p>Key question that remains for me here just from reading the RFC: at what time do we know the size (i.e., at compile time or only at runtime -- I think in discussion you had said it will be known at compile time?), and then how is this communicated to the ABI code?</p>\n<p>Is the size of a sizeless vector actually always given by a method on the <code>TargetIsa</code>, and this is meant to be queried by the ABI code? Or does it have to be passed into the prologue somehow by e.g. giving it a global value that loads this config from a vmctx or register or...?</p>\n</blockquote>",
        "id": 271901282,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644879183
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-882756342\">PR review</a>.</p>",
        "id": 271952024,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644920009
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r806667049\">PR review comment</a>:</p>\n<blockquote>\n<p>This is the number of bytes of a  'sizeless' vector, allowing us to take a slot index and calculate an address. </p>\n</blockquote>",
        "id": 271952025,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644920009
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-882760375\">PR review</a>.</p>",
        "id": 271952403,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644920208
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r806669962\">PR review comment</a>:</p>\n<blockquote>\n<p>The current proposal only gets us half way to the runtime length support, as the register allocator wants a fixed number for a the size of a spill slot for a given register class. I've tried to enable 'sizeless' as much as possible with the hope of playing with regalloc2 to enable full runtime support later. So, for now, TargetIsa would have to provide a fixed size and so TargetIsa is passed, instead of settings::Flags, when calling new on ABICalleeImpl.</p>\n</blockquote>",
        "id": 271952404,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644920209
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-882793981\">PR review</a>.</p>",
        "id": 271955495,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644921855
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r806694524\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd add that modifying the backend ABI implementations to further support runtime lengths shouldn't be complicated but there is the issue of the frame size calculation for stack size checks and offset initialization, and I haven't looked into this much.</p>\n</blockquote>",
        "id": 271955496,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644921855
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890107468\">PR review</a>.</p>",
        "id": 272834971,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645549831
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812172076\">PR review comment</a>:</p>\n<blockquote>\n<p>@cfallin, @sparker-arm: I just caught up on all of the recent discussion above for how to implement this proposal in a platform-agnostic way, etc. It's good stuff and I think I understand a lot better your thoughts from the examples given.</p>\n<p>I do think, though, that this point is unaddressed by the comments about creating dynamic types in the prologue: if we create a dynamic type of a certain length, how then could we change that length dynamically? @penzn included a <a href=\"https://github.com/WebAssembly/flexible-vectors/blob/main/proposals/flexible-vectors/FlexibleVectorsThirdTier.md\">set of <code>set_length</code> instructions</a> (with caveats about needing more discussion). @sunfishcode had an alternate design idea here and, @sparker-arm, you've commented in the issue (<a href=\"https://github.com/WebAssembly/flexible-vectors/issues/21\">https://github.com/WebAssembly/flexible-vectors/issues/21</a>).</p>\n<p>My point is: I sense a mismatch with this dynamic type idea and <code>set_length</code> and I think we should figure that out (here or in the flexible vectors repository) before something gets designed that precludes it.</p>\n</blockquote>",
        "id": 272834974,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645549831
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812172076\">PR review comment</a>.</p>",
        "id": 272835034,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645549863
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890119271\">PR review</a>.</p>",
        "id": 272836430,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645550393
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812180553\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, that is a really interesting twist!</p>\n<p>I haven't fully digested the examples in that issue but e.g. the existence of a <code>vec_loop</code> primitive together with dynamically-sized vectors makes me think that somehow there should be a lowering step involved: once the code reaches CLIF, there is no more vector-specific loop primitive, so whatever blocking or grouping that the <code>vec_loop</code> does, and how it interacts with the truly dynamic and resizable size, should be lowered onto \"fixed for the function invocation\"-sized chunks.</p>\n<p>Also from a codegen perspective, resizable types have implications on stackframe layout: what does it mean for the regalloc if we end up having to spill <code>v0</code>, but <code>v0</code> has a type whose size changes throughout the function body?</p>\n<p>So I think there is a difficulty/complexity jump from \"dynamically sized, known at function entry\" and \"dynamically sized, changes size at arbitrary times\" and we should figure out if we can lower the latter (at Wasm level) onto the former (at CLIF level) if we can. Curious if there are other ideas here though!</p>\n</blockquote>",
        "id": 272836431,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645550393
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890134441\">PR review</a>.</p>",
        "id": 272837964,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645551024
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812190803\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>resizable types have implications on stackframe layout</p>\n</blockquote>\n<p>Brainstorming: it feels like there are two parts here, 1) the size of the slot that needs to be spilled, which could be the \"max vector size on this uarch,\" like the <code>dt0</code> example above, and 2) the number of lanes used by that vector, which could be modified by <code>set_length</code>. Even if only the lowest few lanes are used, the entire vector can be spilled, right?</p>\n</blockquote>",
        "id": 272837965,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645551025
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890136671\">PR review</a>.</p>",
        "id": 272838261,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645551133
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812192727\">PR review comment</a>:</p>\n<blockquote>\n<p>I guess I'm saying that the type need not be resizable, but there should be some other way to express how much of that type is being used.</p>\n</blockquote>",
        "id": 272838262,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645551133
    },
    {
        "content": "<p>abrown edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812192727\">PR review comment</a>.</p>",
        "id": 272838280,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645551141
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890214866\">PR review</a>.</p>",
        "id": 272848023,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645555202
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812249888\">PR review comment</a>:</p>\n<blockquote>\n<p>Yep, that's true; maybe what we want is an extra parameter on the operations that actually use the vector, to indicate how many lanes to operate on. So the type is <code>Nxi32</code> where N is the max size (could be dynamic, but fixed at function entry); and we then do an add on <code>Mxi32</code> units, where <code>M</code> was set by the latest <code>set_length</code>. I think this would imply tracking a separate \"current length\" variable for each dynamically-typed-and-resizable vector in the Wasm translator when building the SSA for CLIF. Does that seem reasonable?</p>\n</blockquote>",
        "id": 272848028,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645555202
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890230571\">PR review</a>.</p>",
        "id": 272849953,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645556108
    },
    {
        "content": "<p>abrown created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812261480\">PR review comment</a>:</p>\n<blockquote>\n<p>I think Petr's idea for <code>set_length</code> was even more dynamic than that--it can accept arbitrary <code>i32</code> values from the stack. I might be misunderstanding what you mean, but we wouldn't know what that <code>M</code> is until runtime, so it couldn't be fixed during translation. But maybe you mean that that \"variable\" in translation would be made available for <code>set_length</code> to change at runtime?</p>\n</blockquote>",
        "id": 272849954,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645556108
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890256610\">PR review</a>.</p>",
        "id": 272853504,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645557579
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812280373\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, exactly, it would be a variable that has an SSA <code>Value</code> at any given program point, like other Wasm locals, so truly dynamic. Then we could have something like <code>add_dynamic.dt0 v0, v1, v2</code> where <code>v0</code> and <code>v1</code> have type <code>dt0</code> (which is <code>Nxi32</code>, set to the max possible size), and <code>v2</code> is an <code>i32</code> that tells the op how many lanes to operate on.</p>\n</blockquote>",
        "id": 272853507,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645557579
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-890753721\">PR review</a>.</p>",
        "id": 272918037,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645605492
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r812658919\">PR review comment</a>:</p>\n<blockquote>\n<p>Just to note, my understanding was the vec_loop construct won't be pursued and instead predication, as @cfallin is suggesting here, will be the way to go. We can add predicated operations for those if/when it happens. As @abrown said, when it comes to spilling, I also presume predication (set_length) won't affect this, we'll still spill a whole register.</p>\n</blockquote>",
        "id": 272918038,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1645605493
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 277858305,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1649155808
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 278707920,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1649776592
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-948047434\">PR review</a>.</p>",
        "id": 279636857,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650517589
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-948047434\">PR review</a>.</p>",
        "id": 279636858,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650517589
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r854776283\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed, \"not allowed\" rather than just \"not expected\" -- the semantics are as-if loaded once in the prologue.</p>\n</blockquote>",
        "id": 279636859,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650517589
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#discussion_r854776408\">PR review comment</a>:</p>\n<blockquote>\n<p>s/accidently/accidentally/</p>\n</blockquote>",
        "id": 279636860,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650517589
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 279650322,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650529812
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 279650405,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650529878
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 279663006,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650538204
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-949174157\">PR review</a>.</p>",
        "id": 279734615,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650572477
    },
    {
        "content": "<p><strong>sparker-arm</strong> requested <a href=\"https://github.com/fitzgen\">fitzgen</a> for a review on <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a>.</p>",
        "id": 280034040,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650873121
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 280350131,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651066352
    },
    {
        "content": "<p>sparker-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a> from <code>cranelift-sizeless-vector</code> to <code>main</code>.</p>",
        "id": 280457037,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651132316
    },
    {
        "content": "<p>penzn submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/19#pullrequestreview-956825650\">PR review</a>.</p>",
        "id": 280529496,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651167428
    },
    {
        "content": "<p>sparker-arm merged <a href=\"https://github.com/bytecodealliance/rfcs/pull/19\">PR #19</a>.</p>",
        "id": 281861683,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1652205154
    }
]