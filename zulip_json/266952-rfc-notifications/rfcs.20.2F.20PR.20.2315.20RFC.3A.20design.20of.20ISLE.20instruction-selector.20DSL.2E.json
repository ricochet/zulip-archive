[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/rfcs/pull/15\">PR #15</a> from <code>cranelift-isel-isle-peepmatic</code> to <code>main</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/cfallin/rfcs/blob/cranelift-isel-isle-peepmatic/accepted/cranelift-isel-isle-peepmatic.md\">Rendered</a></p>\n<p>This RFC proposes a new DSL for the instruction selectors in Cranelift,<br>\nautomating the generation of the backends based on a list of term-rewriting<br>\nrules provided by the backend author.</p>\n<p>This is based on extensive discussions surrounding the ideas in<br>\n<a href=\"https://github.com/bytecodealliance/rfcs/issues/13\">bytecodealliance/rfcs#13</a> and is meant to be a refinement of earlier<br>\nideas that is compatible with our goals related to verification, and is<br>\nable to build on top of Peepmatic's automaton abstraction.</p>\n</blockquote>",
        "id": 249944509,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629352130
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-733716706\">PR review</a>.</p>",
        "id": 249957496,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629362238
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r691906080\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>For a concrete example, let us assume we have a term type representing a\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 249957497,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629362238
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-733793242\">PR review</a>.</p>",
        "id": 249967280,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629369250
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-733793242\">PR review</a>.</p>",
        "id": 249967281,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629369250
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r691964419\">PR review comment</a>:</p>\n<blockquote>\n<p>So does this mean we can write generic, and machine-level, pattern reducers as part of isel then? This suggests that 'B' could be a machine node and so we can use machine nodes as inputs. If so, could this be viewed as multiple peepmatic passes: (1) IR-to-IR reductions, (2) IR-to-MachInst ISel, (3) MachInst reductions? And then would having multiple passes have benefits over inlining while the tree is still being selected? Maybe splitting it into the two later phases would ease implementation and verification. And could we do some lowering with the same method - especially stuff like expanding unsupported SIMD operations?</p>\n</blockquote>",
        "id": 249967282,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629369250
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r691980678\">PR review comment</a>:</p>\n<blockquote>\n<p>Sounds cool, do you know if someone else is doing this? Sounds like it would be a hard problem for instructions that read/write global state.</p>\n</blockquote>",
        "id": 249967283,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629369250
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-733991225\">PR review</a>.</p>",
        "id": 249986371,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629379877
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692112881\">PR review comment</a>:</p>\n<blockquote>\n<p>It might make sense to tell when multiple rules can apply to the same input and maybe allow hints to acknowledge the overlap. These hints could then also contain the advisory priority or the rules.</p>\n</blockquote>",
        "id": 249986372,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629379877
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-733993293\">PR review</a>.</p>",
        "id": 249986617,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629379983
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692114409\">PR review comment</a>:</p>\n<blockquote>\n<p>A suggestion for an alternative syntax to consider:</p>\n<p><div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">Iadd</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=&gt;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">X86Add</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">);</span><span class=\"w\"></span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 249986618,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629379983
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-733996757\">PR review</a>.</p>",
        "id": 249987013,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629380163
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692116932\">PR review comment</a>:</p>\n<blockquote>\n<p>Might be nice to infer this using \"typechecker\" that takes constraints from the output instructions and propagates them to the input.</p>\n</blockquote>",
        "id": 249987016,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629380163
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/15\">PR #15</a> from <code>cranelift-isel-isle-peepmatic</code> to <code>main</code>.</p>",
        "id": 250037529,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629401629
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/15\">PR #15</a> from <code>cranelift-isel-isle-peepmatic</code> to <code>main</code>.</p>",
        "id": 250037530,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629401629
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734395983\">PR review</a>.</p>",
        "id": 250038382,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629401973
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692429032\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, the DSL itself is agnostic to whatever the input and output formats are (that depends on the \"bindings\" one writes with external extractor and constructor definitions), so in principle one could have all of the above.</p>\n<p>Reductions in the legalization sense, e.g. lowering a 64-bit add to two 32-bit adds (to take a simple example), should be possible as well. This has implications for the term stratification approach to ensuring termination, so we would need to expand that a bit (the RFC notes that allowing substructural recursion, or maybe just \"recurse during inlining up to limit k\") to allow the lowering code to be generated properly. But that's absolutely a goal -- writing fallback rules like this then composing with machine-specific rules is much more powerful than the support-all-features-on-all-machines approach we currently have (e.g. adding i128 separately on x64 and aarch64).</p>\n<p>We could also have multiple passes; @fitzgen and I discussed this a bit yesterday actually. For now I think it makes sense to start with the single lowering pass, because we have the existing machinery for that, but once the DSL compiler exists, it should be relatively straightforward to use it to generate another pass as well.</p>\n</blockquote>",
        "id": 250038383,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629401974
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734397709\">PR review</a>.</p>",
        "id": 250038661,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402109
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692431602\">PR review comment</a>:</p>\n<blockquote>\n<p>There are various research folks working on compiler verification; e.g. <a href=\"https://dl.acm.org/doi/abs/10.1145/3445814.3446751\">this paper</a> from recent ASPLOS 2021. The general term is \"translation validation\" when it involves proving a specific input and output are equivalent, I think. I don't see the core Cranelift team diving into this fulltime but <em>enabling</em> it is very important, and there are academics who might be interested!</p>\n</blockquote>",
        "id": 250038662,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402110
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734399088\">PR review</a>.</p>",
        "id": 250038929,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402221
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692433687\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, this gives me an idea for a DSL-compiler mode that produces some \"explainer\" output -- which overlaps occurred and which prioritization decisions were made. That could possibly be useful. Also if a rule is <em>never</em> used (because it's overshadowed by some other higher-priority rule that completely overlaps it) that is probably worth a warning.</p>\n</blockquote>",
        "id": 250038930,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402221
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734400435\">PR review</a>.</p>",
        "id": 250039199,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402324
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692434779\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm generally hoping to stay true to S-expression form here (so the toplevel forms/clauses are <code>(KEYWORD ...)</code>) but <code>=&gt;</code> as the keyword (<code>(=&gt; (A x) (B x))</code>), which is what Peepmatic does, could work. Others please let us know your favorite bikeshed color below!</p>\n</blockquote>",
        "id": 250039200,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402324
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734402915\">PR review</a>.</p>",
        "id": 250039678,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402507
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692436630\">PR review comment</a>:</p>\n<blockquote>\n<p>That feels a <em>bit</em> too magic/implicit, but what can be done instead is that constructors that build the final instructions take strongly-typed values that can only be produced by extractors that check the relevant conditions. So the plan is to have e.g. an <code>Aarch64Imm12</code> value type, and this can only represent legal values. Similar type-encoded conditions can be used for other properties.</p>\n</blockquote>",
        "id": 250039679,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402507
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734404390\">PR review</a>.</p>",
        "id": 250039899,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402615
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692437800\">PR review comment</a>:</p>\n<blockquote>\n<p>One more suggestion: Please enforce a specific formatting of the S-expressions on CI in rustfmt style. That is a 1-to-1 map from parsed AST to the resulting string. Not like eg clang-format which tries to preserve newlines and things like that and only normalizes things like spaces.</p>\n</blockquote>",
        "id": 250039901,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629402615
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734792736\">PR review</a>.</p>",
        "id": 250090523,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629447907
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692764428\">PR review comment</a>:</p>\n<blockquote>\n<p>We may also want to use this for things that are not typecheckable, such as a processor extension predicate.</p>\n<div class=\"codehilite\" data-code-language=\"Rust\"><pre><span></span><code><span class=\"p\">(</span><span class=\"n\">rule</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">iadd</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">i8x16</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"n\">when</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">has</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"n\">dnow</span><span class=\"p\">))</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"n\">dnow</span><span class=\"o\">-</span><span class=\"n\">add</span><span class=\"w\"> </span><span class=\"n\">a</span><span class=\"w\"> </span><span class=\"n\">b</span><span class=\"p\">))</span><span class=\"w\"></span>\n</code></pre></div>\n</blockquote>",
        "id": 250090524,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629447907
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692764428\">PR review comment</a>.</p>",
        "id": 250090568,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629447955
    },
    {
        "content": "<p>afonso360 edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692764428\">PR review comment</a>.</p>",
        "id": 250090687,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629448057
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734812209\">PR review</a>.</p>",
        "id": 250097500,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629452400
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734812209\">PR review</a>.</p>",
        "id": 250097501,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629452400
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692780111\">PR review comment</a>:</p>\n<blockquote>\n<p>In the aarch64 backend we have <a href=\"https://github.com/bytecodealliance/wasmtime/blob/74c18a6af4da63fa9d748e1d209b2214acbe79be/cranelift/codegen/src/isa/aarch64/lower.rs#L1853\">emit_shl_i128</a> which emits 9 instructions, and is used 4 times while lowering other instructions. In the <a href=\"https://github.com/bytecodealliance/wasmtime/blob/74c18a6af4da63fa9d748e1d209b2214acbe79be/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L854\">rotr/rotl </a> case we end up emitting 21 instructions (1 i128 shr + 1 i128 shl + 3 instructions), it would be nice not to have to repeat the shl/shr instructions 4 times in different orders.</p>\n<p>Would we do this via a <code>(shl-i128 a b</code>) constructor? Or can we do this as a separate rule which gets matched as well? </p>\n<p>This feels like an edge case, not sure if it happens elsewhere.</p>\n</blockquote>",
        "id": 250097504,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629452400
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692788527\">PR review comment</a>:</p>\n<blockquote>\n<p>A similar, but somewhat different case here would be <a href=\"https://github.com/bytecodealliance/wasmtime/blob/74c18a6af4da63fa9d748e1d209b2214acbe79be/cranelift/codegen/src/isa/aarch64/lower_inst.rs#L1233\"><code>popcnt</code></a>, where we emit a number of instructions, and then match a single instruction depending on the type of the input.</p>\n<p>But here, since the total size is about 6 instructions in 5 different input types it isn't as bad.</p>\n</blockquote>",
        "id": 250097505,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629452400
    },
    {
        "content": "<p>sparker-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692851017\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for the paper - interesting stuff! From my brief interactions with cranelift so far, the key differences that I see with cranelift and LLVM are that neither levels of IR are defined as well in cranelift, for example:<br>\n1) I don't think that the aarch64 backend actually models pstate flag setting.<br>\n2) The CLIF icmp has some ugly target defined behaviour...<br>\nSo I think having some verification would be an excellent driver for improving our internal semantics.</p>\n</blockquote>",
        "id": 250102717,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629456284
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734904775\">PR review</a>.</p>",
        "id": 250102718,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629456284
    },
    {
        "content": "<p>sparker-arm edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692851017\">PR review comment</a>.</p>",
        "id": 250102732,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629456295
    },
    {
        "content": "<p>afonso360 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-734954908\">PR review</a>.</p>",
        "id": 250108444,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629460774
    },
    {
        "content": "<p>afonso360 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r692889569\">PR review comment</a>:</p>\n<blockquote>\n<p>Re-reading the RFC now, it looks like the shl case would be a good use of <a href=\"https://github.com/cfallin/rfcs/blob/cranelift-isel-isle-peepmatic/accepted/cranelift-isel-isle-peepmatic.md#virtual-internal-terms\">Virtual Internal Terms</a>. <code>popcnt</code> might be too small for this to make sense.</p>\n</blockquote>",
        "id": 250108445,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629460774
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-735267309\">PR review</a>.</p>",
        "id": 250151838,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629482432
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r693126333\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, exactly, that's the intent of the ability to freely (in terms of runtime cost) create these virtual terms that chain rules together -- they allow additional factoring and abstraction.</p>\n</blockquote>",
        "id": 250151839,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629482432
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r694075319\">PR review comment</a>:</p>\n<blockquote>\n<p>The wildcard only exists in the grammar for LHS -- is it expected that it would always be discarded entirely (and if so, do you have an example of actual rules that would unconditionally discard one input), or is there a way to bind it and reuse it in the RHS that i've missed?</p>\n</blockquote>",
        "id": 250367519,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629732348
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-736261123\">PR review</a>.</p>",
        "id": 250367520,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629732348
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-736263053\">PR review</a>.</p>",
        "id": 250367767,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629732446
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r694076738\">PR review comment</a>:</p>\n<blockquote>\n<p>ah wait, in this example the wildcarded input is actually bound to <code>x</code>, so nevermind me.</p>\n</blockquote>",
        "id": 250367768,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629732446
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-736357104\">PR review</a>.</p>",
        "id": 250379790,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629737857
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r694148517\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>do you have an example of actual rules that would unconditionally discard one input</p>\n</blockquote>\n<p>It could be used in something like \"anything times zero is zero\":</p>\n<p><div class=\"codehilite\" data-code-language=\"Common Lisp\"><pre><span></span><code><span class=\"p\">(</span><span class=\"nv\">rule</span> <span class=\"p\">(</span><span class=\"nv\">Imul</span> <span class=\"nv\">_</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"nv\">Iconst</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 250379791,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1629737858
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-742915946\">PR review</a>.</p>",
        "id": 251411701,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630426149
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-742915946\">PR review</a>.</p>",
        "id": 251411702,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630426149
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r699466540\">PR review comment</a>:</p>\n<blockquote>\n<p>From looking at this, I'm thinking that constant propagation / strength reduction (maybe other optimizations) could be carried out within this framework as well, but those would operate in higher-level IR types (CLIF, not VCode) that aren't tied to a specific architecture. If I understand correctly, one could have two sets of declared patterns (i.e. in two files), each declaring its IR type, the set of rules, etc. and we could call the two resulting lower functions at different times during the optimization passes.</p>\n</blockquote>",
        "id": 251411703,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630426149
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r699473985\">PR review comment</a>:</p>\n<blockquote>\n<p>It's going to be harder to inspect some characteristics of the given resulting Rust enum: what are its size? which variant is the biggest (and thus determines the whole enum's size)? Reducing the memory footprint of IR data structures has been a fruitful exercise in the past, causing reductions in the number of malloc calls and thus compile-time speedups, and I'm a bit worried that this kind of optimization opportunities, that was very easy to implement in the past, will become unbearable within this framework, except for the framework author(s).</p>\n<p>On the other hand, one could argue that any improvement to the generic framework would benefit <em>all</em> the backends at once (but that's just a benefit from a generic framework: errors/bugs would be shared too!). Still, it doesn't seem like it's fitting the initial goal of being welcoming and simple for newcomers.</p>\n</blockquote>",
        "id": 251411704,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630426149
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r699463032\">PR review comment</a>:</p>\n<blockquote>\n<p>Seems this <code>FromInstOnlyUse</code> has disappeared below?</p>\n</blockquote>",
        "id": 251411705,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630426149
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-742977730\">PR review</a>.</p>",
        "id": 251418175,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630428885
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#discussion_r699510208\">PR review comment</a>:</p>\n<blockquote>\n<p>Ah, so a key thing here is that this <code>extern</code> type decl is referring to an enum that's already defined in Rust code elsewhere. Perhaps we could find a better way of doing it later, but for now the idea is to declare the view of the types that we need to generate Rust code against them, but not to generate the type definitions themselves. So during the migration, we still have the <code>enum Inst</code> in <code>isa/*/inst/mod.rs</code>, and we can still e.g. write tests against its size and play with its packing.</p>\n<p>One could argue that it'd be better to generate both from a single source of truth, and I think that has to be the eventual answer; in that case one could still write a unit-test against <code>std::mem::size_of::&lt;x64::Inst&gt;()</code> or whatnot but changing it would mean editing the DSL.</p>\n<p>A key factor in approachability IMHO (this may be controversial; please discuss!) could be to include the generated code in the git repo. Aside from implications on build-time above, it would mean that (i) the actual Rust definitions, at the stage in our evolution when they <em>are</em> all generated from the DSL, should be easy to find; and (ii) we can add a note to the top of the file saying \"autogenerated, please see file.isle\" and maybe on the actual enum a comment like \"autogenerated from definition Foo in file.isle line 123\".</p>\n<p>I <em>do</em> think that there is an interesting philosophical debate about the definition of \"welcoming and simple\": building some DSL framework means that if we're careful, the \"happy path\" of adding a new instruction or a new lowering rule is much easier, and also means that there is less cognitive load / fewer subtle invariants to keep in mind. That's pretty much the driving factor I had in mind at least. But I agree that it can make systemic optimizations, like \"make the <code>Inst</code> enum smaller\", more difficult it it means one has to step up into a meta-level, and it also puts a lot of pressure on the framework to be correct, lest we have difficult-to-find bugs. IMHO the tradeoff is worth it and does make the codebase more welcoming for the most common sort of contribution we anticipate in the future, but... please do discuss!</p>\n</blockquote>",
        "id": 251418176,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1630428885
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-794409997\">PR review</a>.</p>",
        "id": 259886413,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635784359
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-794458060\">PR review</a>.</p>",
        "id": 259893151,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635787289
    },
    {
        "content": "<p>sparker-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/15#pullrequestreview-796253040\">PR review</a>.</p>",
        "id": 260105082,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635930242
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/rfcs/pull/15\">PR #15</a>.</p>",
        "id": 261519125,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1636992671
    }
]