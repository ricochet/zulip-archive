[
    {
        "content": "<p>cfallin opened <a href=\"https://github.com/bytecodealliance/rfcs/pull/18\">PR #18</a> from <code>cranelift-2022</code> to <code>main</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/cfallin/rfcs/blob/cranelift-2022/accepted/cranelift-roadmap-2022.md\">Markdown rendered</a></p>\n<p>This is a roadmap for work on Cranelift in 2022, highlighting areas of interest and outlining the major projects that we want to focus on in the next year. It is meant to be part guiding document, part aspirational collection of interesting ideas and possibilities. As with <a href=\"https://github.com/bytecodealliance/rfcs/pull/8\">last year's roadmap</a>, we likely won't accomplish all of it, though if we're fortunate we may achieve a good amount of it.</p>\n<p>Thanks to @fitzgen for feedback on a draft, and many others (see Acknowledgments at end) for general input on these topics.</p>\n<p>Apologies if this misses anything important -- I tried to be as comprehensive as possible, while still coalescing into general themes. I'm very curious what the community thinks and how folks feel about these ideas!</p>\n</blockquote>",
        "id": 263384038,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638409933
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821178452\">PR review</a>.</p>",
        "id": 263405147,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638433622
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r760858083\">PR review comment</a>:</p>\n<blockquote>\n<p>There is also another design constraint: It shouldn't break parallel compilation to ensure that we don't drastically regress compilation times. Function compilation is currently entirely parallelizable as everything is local. Inlining however is an inherently non-local optimization.</p>\n</blockquote>",
        "id": 263405148,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638433622
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821182021\">PR review</a>.</p>",
        "id": 263405408,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638433828
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r760860867\">PR review comment</a>:</p>\n<blockquote>\n<p>DWARF exception handling also requires a tail call to <code>_Unwind_Resume</code>.</p>\n</blockquote>",
        "id": 263405409,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638433828
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821184657\">PR review</a>.</p>",
        "id": 263405592,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638433981
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r760862860\">PR review comment</a>:</p>\n<blockquote>\n<p>Also the landingpad must be able to take parameters. The x86_64 DWARF exception handling allows up to 4. Rustc requires 2.</p>\n</blockquote>",
        "id": 263405593,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638433981
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821188283\">PR review</a>.</p>",
        "id": 263406052,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638434204
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r760865700\">PR review comment</a>:</p>\n<blockquote>\n<p>You could also differentially fuzz between perturbations of the same input.</p>\n</blockquote>",
        "id": 263406053,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638434204
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821190329\">PR review</a>.</p>",
        "id": 263406245,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638434326
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r760867222\">PR review comment</a>:</p>\n<blockquote>\n<p>A moonshot idea, but what about exposing these details to the user. Then they could try to make better decisions than the compiler while still being guaranteed (assuming no bugs in clif) that the output isn't a miscompilation.</p>\n</blockquote>",
        "id": 263406246,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638434326
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821205957\">PR review</a>.</p>",
        "id": 263407794,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638435237
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r760878859\">PR review comment</a>:</p>\n<blockquote>\n<p>This is definitely way-out-there, but I do like the idea of a programmable meta layer as a first-class user-exposed interface. In the EDA (electronic design automation) world, tools have pretty much all standardized on Tcl as a command language, and one can write scripts like \"optimization1; optimization2; simplify x y z; ...\". Similarly for the \"strategy layer\" in proof-automation/verification tools. This would need a lot of thought and is lower-priority than any of the work that directly benefits correctness testing, but, yes, cool idea!</p>\n</blockquote>",
        "id": 263407795,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638435237
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821863726\">PR review</a>.</p>",
        "id": 263481928,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638470213
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821863726\">PR review</a>.</p>",
        "id": 263481929,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638470214
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r761353223\">PR review comment</a>:</p>\n<blockquote>\n<p>I think we actually <em>don't</em> want to encourage the use of things like <code>ref_to_int</code> and <code>int_to_ref</code>. This will still either suffer from the \"whoops, no stack map entry for this value because its an <code>int</code> and not a <code>ref</code>\" problem, or we will have to start adding stack map entries for <code>int</code>s derived from a <code>ref</code>, but then where do we stop? What about <code>int</code>s derived from an <code>int</code> derived from a <code>ref</code>? It gets messy really quick. Instead, I think we want to allow using <code>ref</code>s as address operands for loads and stores, and maybe a few other places where <code>int</code> operands are currently allowed, but <code>ref</code>s aren't (maybe even make <code>ref</code> usable <em>everywhere</em> <code>int</code> is, basically making them exactly the same <em>except</em> that <code>ref</code>s get stack map entries).</p>\n<p>But all of this is a bit too much in the weeds for a roadmap RFC. I think it suffices to say that we should make <code>r{32,64}</code> usable for non-opaque GC objects where we can load from/store to their fields (including fields that are themselves <code>r{32,64}</code>s) inline instead of only with out-of-line VM functions like what would be required now.</p>\n</blockquote>",
        "id": 263481930,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638470215
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-821917101\">PR review</a>.</p>",
        "id": 263486522,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638472257
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r761391061\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, that's a good point. I guess I had been imagining the lowering of a field access to be a \"cast to int, mask off the tag bits, and load, while carefully avoiding safepoints\" sort of operation (because the ref is dead/unrooted after the cast). But that's a big footgun. First-class operators that use refs as pointers are almost certainly better in that regard. </p>\n<p>One consideration I had in mind is that the conversion from ref to actual pointer actually needs to be a little bit flexible to work in various runtimes: I'm aware of at least low-bit tagging (classical \"pointers are aligned so use 2/3 tag bits\"), NaN boxing or upper-bit tagging generally (top 16 bits), and the JVM's \"compressed oop\" design where a 32-bit pointer is used in 64-bit space with <code>base + oop &lt;&lt; 3</code> (allowing a 2^35 / 32 GiB heap). We could in theory have a load_ref/store_ref that takes a mask, a shift, and an addend, but maybe there's something better.</p>\n<p>Another possibility that occurs to me: allow casts to ints, and allow the user to generate CLIF as needed, but <em>also</em> take the ref itself as an arg to the load/store. This requires keeping the ref alive up to the point of use, at least at the CLIF level. (If the load/store isn't a safepoint for the particular runtime then the lowering can drop it.) So we'd have <code>int := ref_to_int r; actual_ptr := arbitrary_conversion(int); value := load_ref actual_ptr, r</code>.</p>\n<p>Anyway, yeah, I'll update the RFC to be more generic on this point but this will be an interesting design discussion to have later!</p>\n</blockquote>",
        "id": 263486524,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638472258
    },
    {
        "content": "<p>eqrion submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-822663018\">PR review</a>.</p>",
        "id": 263580652,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638538787
    },
    {
        "content": "<p>eqrion created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r761944580\">PR review comment</a>:</p>\n<blockquote>\n<p>I’d like to add another point on the design space of deriving pointers from GC objects, although agreed that it warrants a deeper discussion elsewhere.</p>\n<p>An issue SpiderMonkey will have with the Wasm-GC proposal when we add optimizing support is that some of our GC objects are represented as a GC ref to a cell which contains a regular heap pointer to the actual data. The outline data’s lifetime is tied to the GC object and is freed with a finalizer. When we access a field/element for an object then, we need to acquire the data pointer and then get the field/element from the data pointer.</p>\n<p>There’s a potential hazard here however if the GC ref’s lifetime ends before the use of the data pointer and there is a safepoint/collection after the GC ref’s lifetime ends and before the use of the data pointer. This can’t be solved with just allowing r32/r64 to be manipulated as integers as the derived data pointer is not a ref that can be traced and shouldn’t get a stackmap entry. SM solves this by adding a synthetic use of the original GC ref to any loads using the data pointer. This extends the lifetime of the GC ref to match all uses of the data pointer. There may be other solutions here as well.</p>\n<p>Additionally, the outline data representation for GC objects is a pain for codegen efficiency and ideally would be eliminated. But that will require some work in the SM GC that may not be feasible right away.</p>\n</blockquote>",
        "id": 263580653,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638538787
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-831347395\">PR review</a>.</p>",
        "id": 264841303,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639480183
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r768558823\">PR review comment</a>:</p>\n<blockquote>\n<p>Should we mention the flexible vectors proposal (given that @sparker-arm is looking at it)?</p>\n</blockquote>",
        "id": 264841304,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639480183
    },
    {
        "content": "<p>cfallin updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/18\">PR #18</a> from <code>cranelift-2022</code> to <code>main</code>.</p>",
        "id": 265250175,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639711977
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-834810848\">PR review</a>.</p>",
        "id": 265250344,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712197
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r771083141\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a good point, thanks! I added a paragraph that describes the tradeoff. The three design points I can think of right away are</p>\n<ul>\n<li>Some sort of snapshotting, so that each function can be mutated separately while also accessing the function-to-be-inlined in a read-only way; or</li>\n<li>Some kind of partially-parallel design, where we \"stratify\" the callgraph into a DAG of SCCs then scan a parallel frontier of inlining up the DAG, from leafs to roots, processing serially within each SCC (this is maximally parallel while still allowing the inliner to see already-inlined versions of functions it might in turn inline); or</li>\n<li>Make inlining a special, optional, more costly pass that just operates serially, and takes a mutable borrow of the whole module or modules (collection of functions). This might be the best way to start.</li>\n</ul>\n</blockquote>",
        "id": 265250345,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712197
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-834810941\">PR review</a>.</p>",
        "id": 265250359,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712216
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r771083197\">PR review comment</a>:</p>\n<blockquote>\n<p>Added \"and dataflow\", thanks!</p>\n</blockquote>",
        "id": 265250361,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712217
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-834811037\">PR review</a>.</p>",
        "id": 265250371,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712234
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r771083283\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, that's a good idea; added a mention of this.</p>\n</blockquote>",
        "id": 265250372,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712234
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-834811345\">PR review</a>.</p>",
        "id": 265250386,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712282
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r771083560\">PR review comment</a>:</p>\n<blockquote>\n<p>Updated this description to note that there is a design space to explore, and some constraints (avoiding rooting issues, also being flexible across different reference representations, such as indirection or tagging approaches).</p>\n</blockquote>",
        "id": 265250387,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712282
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-834811395\">PR review</a>.</p>",
        "id": 265250429,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712290
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#discussion_r771083629\">PR review comment</a>:</p>\n<blockquote>\n<p>Added, thanks!</p>\n</blockquote>",
        "id": 265250430,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639712291
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-861574422\">PR review</a>.</p>",
        "id": 269180203,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643062327
    },
    {
        "content": "<p>abrown submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-862414880\">PR review</a>.</p>",
        "id": 269268789,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643122905
    },
    {
        "content": "<p>radu-matei submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-862514294\">PR review</a>.</p>",
        "id": 269279064,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643126801
    },
    {
        "content": "<p>mingqiusun closed without merge <a href=\"https://github.com/bytecodealliance/rfcs/pull/18\">PR #18</a>.</p>",
        "id": 269285480,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643129312
    },
    {
        "content": "<p>mingqiusun reopened <a href=\"https://github.com/bytecodealliance/rfcs/pull/18\">PR #18</a> from <code>cranelift-2022</code> to <code>main</code>.</p>",
        "id": 269285613,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643129364
    },
    {
        "content": "<p>pchickey submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/18#pullrequestreview-862720230\">PR review</a>.</p>",
        "id": 269304137,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1643136378
    },
    {
        "content": "<p>cfallin merged <a href=\"https://github.com/bytecodealliance/rfcs/pull/18\">PR #18</a>.</p>",
        "id": 270792682,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1644021986
    },
    {
        "content": "<p>cfallin edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/18\">PR #18</a> from <code>cranelift-2022</code> to <code>main</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/bytecodealliance/rfcs/blob/main/accepted/cranelift-roadmap-2022.md\">Markdown rendered</a></p>\n<p>This is a roadmap for work on Cranelift in 2022, highlighting areas of interest and outlining the major projects that we want to focus on in the next year. It is meant to be part guiding document, part aspirational collection of interesting ideas and possibilities. As with <a href=\"https://github.com/bytecodealliance/rfcs/pull/8\">last year's roadmap</a>, we likely won't accomplish all of it, though if we're fortunate we may achieve a good amount of it.</p>\n<p>Thanks to @fitzgen for feedback on a draft, and many others (see Acknowledgments at end) for general input on these topics.</p>\n<p>Apologies if this misses anything important -- I tried to be as comprehensive as possible, while still coalescing into general themes. I'm very curious what the community thinks and how folks feel about these ideas!</p>\n</blockquote>",
        "id": 281195827,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1651687511
    }
]