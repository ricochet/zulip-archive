[
    {
        "content": "<p>akirilov-arm opened <a href=\"https://github.com/bytecodealliance/rfcs/pull/17\">PR #17</a> from <code>cfi_improvements</code> to <code>main</code>:</p>\n<blockquote>\n<p>This RFC proposes to improve control flow integrity for compiled WebAssembly code by utilizing two technologies from the Arm instruction set architecture - Pointer Authentication and Branch Target Identification.</p>\n<p><a href=\"https://github.com/akirilov-arm/rfcs/blob/cfi_improvements/accepted/cfi-improvements-with-pauth-and-bti.md\">Rendered</a></p>\n</blockquote>",
        "id": 259093012,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635253675
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-789651897\">PR review</a>.</p>",
        "id": 259125869,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635266815
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r736728085\">PR review comment</a>:</p>\n<blockquote>\n<p>It might be good to understand what other userspace context-switching implementations do here: do e.g. <code>setjmp()</code>/<code>longjmp()</code> on PAuth-enabled systems somehow sign the saved state?</p>\n</blockquote>",
        "id": 259125870,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635266815
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-789651897\">PR review</a>.</p>",
        "id": 259125871,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635266815
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r736726378\">PR review comment</a>:</p>\n<blockquote>\n<p>x86 has <code>ENDBR</code> instructions which I think are the equivalent of aarch64's <code>BTI</code>. It also has the ability to use a shadow stack to guard return addresses; I think that pointer auth covers this on aarch64 (?).</p>\n<p>Of course I don't think we need to require more than one platform implementation initially; but it's good to see that it should be pretty easy to adapt/port whatever is done here to x86.</p>\n<p>(see e.g. <a href=\"https://www.linuxplumbersconf.org/event/2/contributions/147/attachments/72/83/CET-LPC-2018.pdf\">this presentation</a> for some details; I'm just learning about this too)</p>\n</blockquote>",
        "id": 259125872,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635266815
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r736731923\">PR review comment</a>:</p>\n<blockquote>\n<p>My instinct here is that the overhead (performance and/or code size) is probably non-negligible enough that we'll want this to be a configuration option; the overhead in comparison of testing with and without seems relatively minor (and maybe we don't need to fully double the tests; needs more thought).</p>\n</blockquote>",
        "id": 259125873,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635266815
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-789751234\">PR review</a>.</p>",
        "id": 259137693,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635271730
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r736799223\">PR review comment</a>:</p>\n<blockquote>\n<p>The concern here is mainly about environments that do not support PAuth and/or BTI, which are going to see extra <code>NOP</code>s - we should be able to quantify this right now, assuming that we have a good set of benchmarks. Perhaps Sightglass could help?</p>\n</blockquote>",
        "id": 259137694,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635271731
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r736810345\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, <code>ENDBR</code> seems quite similar to BTI, however from the presentation it is not clear to me if it can be used in the same fine-grained way, i.e. the usage of BTI can be controlled on a per-page basis, so it is possible to have a JIT runtime that generates hardened code, for instance, while the runtime implementation itself does not use the same protection, thus easing deployment for us.</p>\n<p>While the x86 shadow stack and PAuth have the same goal (back-edge CFI), they are quite different. It seems that the shadow stack will have a minimal impact on code generation (indeed, probably none at all), while unwinding will become more complicated.</p>\n</blockquote>",
        "id": 259139705,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635272668
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-789766362\">PR review</a>.</p>",
        "id": 259139706,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635272668
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r737654496\">PR review comment</a>:</p>\n<blockquote>\n<p>Well, here are <a href=\"https://github.com/apple/llvm-project/blob/next/clang/docs/PointerAuthentication.rst#register-clobbering\">Apple's recommendations</a>:</p>\n<blockquote>\n<p><code>setjmp</code> and <code>longjmp</code> should sign and authenticate the core registers (SP, FP, PC, and LR), but they do not need to worry about intermediate values because <code>setjmp</code> can only be called synchronously, and the compiler should never schedule pointer-authentication operations interleaved with arbitrary calls.</p>\n</blockquote>\n<p>However, a general remark I have is that the users of <code>setjmp()</code>, usually operating in a traditional statically compiled environment without any intra-process security boundaries, do not necessarily have the same threat model as a WebAssembly runtime that manages several security contexts within the same process, each of which executes arbitrary untrusted code. I think that the document I linked to above and indeed the implementations one is likely to encounter in C libraries is not written with the latter use case in mind.</p>\n</blockquote>",
        "id": 259267707,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635352644
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-790898789\">PR review</a>.</p>",
        "id": 259267708,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635352644
    },
    {
        "content": "<p>akirilov-arm edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r737654496\">PR review comment</a>.</p>",
        "id": 259267990,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635352748
    },
    {
        "content": "<p>alexcrichton submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-791060931\">PR review</a>.</p>",
        "id": 259292390,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635362207
    },
    {
        "content": "<p>alexcrichton created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r737772448\">PR review comment</a>:</p>\n<blockquote>\n<p>FWIW I think @cfallin's question is inspired by how we use setjmp/longjmp in Wasmtime to implement traps as well as for the <code>wasmtime-fiber</code> crate and the async implementation we have userland stack-switching code, so it sounds like we'll probably need to at least have some updates to the aarch64 implementation of <code>wasmtime-fiber</code> but setjmp/longjmp would otherwise be handled by the system libraries?</p>\n</blockquote>",
        "id": 259292391,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1635362208
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/17\">PR #17</a> from <code>cfi_improvements</code> to <code>main</code>.</p>",
        "id": 263027483,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638201556
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-817997499\">PR review</a>.</p>",
        "id": 263027946,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638201717
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r758505716\">PR review comment</a>:</p>\n<blockquote>\n<p>I added a note about the x86 alternative to the proposal text.</p>\n</blockquote>",
        "id": 263027947,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1638201717
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-834363835\">PR review</a>.</p>",
        "id": 265184912,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639673836
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r770738578\">PR review comment</a>:</p>\n<blockquote>\n<p>I investigated this issue a bit, and I have some further remarks:</p>\n<blockquote>\n<p>... it sounds like we'll probably need to at least have some updates to the aarch64 implementation of <code>wasmtime-fiber</code>...</p>\n</blockquote>\n<p>Actually we do not need to change anything to make things work (refer to <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3606\">bytecodealliance/wasmtime#3606</a>), but that would leave a gap in the CFI implementation.</p>\n<blockquote>\n<p>... but setjmp/longjmp would otherwise be handled by the system libraries?</p>\n</blockquote>\n<p>Yes, that is correct, and it looks like on Linux the system libraries do not do anything except maybe authenticate the return address, but I do not think that it is by design - maybe it is just an oversight.</p>\n<p>As for Apple's recommendation, it appears that I was partially right - it is written in the context of their pointer authentication ABI variant as far as I can tell, which mandates that all pointers be signed immediately after being generated, so no raw pointers would be kept in registers (or writable memory). In that situation it makes sense that only the set of core registers mentioned above needs special handling. We would not have the same guarantee in our stack switching code initially, so we should consider something more sophisticated, but we could start with the same approach, especially since it should be easier to implement - it could be done with just the <code>NOP</code> versions of the instructions, I think.</p>\n</blockquote>",
        "id": 265184913,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1639673837
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-858495027\">PR review</a>.</p>",
        "id": 268718221,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1642695853
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r788932695\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>... we could start with the same approach, especially since it should be easier to implement - it could be done with just the <code>NOP</code> versions of the instructions, I think.</p>\n</blockquote>\n<p>Now <a href=\"https://github.com/bytecodealliance/wasmtime/issues/3606\">bytecodealliance/wasmtime#3606</a> has an initial implementation of this bit as well.</p>\n</blockquote>",
        "id": 268718222,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1642695853
    },
    {
        "content": "<p>akirilov-arm updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/17\">PR #17</a> from <code>cfi_improvements</code> to <code>main</code>.</p>",
        "id": 274564465,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1646756447
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-903262865\">PR review</a>.</p>",
        "id": 274565142,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1646756714
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r821838982\">PR review comment</a>:</p>\n<blockquote>\n<p>I have changed the text, so that now the usage of both PAuth and BTI is disabled by default, and the values of the respective configuration options are decoupled from the capabilities of the host CPU.</p>\n</blockquote>",
        "id": 274565143,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1646756714
    },
    {
        "content": "<p>akirilov-arm submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-903304961\">PR review</a>.</p>",
        "id": 274569612,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1646758507
    },
    {
        "content": "<p>akirilov-arm created <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#discussion_r821869313\">PR review comment</a>:</p>\n<blockquote>\n<p>And the proposal text reflects it as well.</p>\n</blockquote>",
        "id": 274569615,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1646758507
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-933369728\">PR review</a>.</p>",
        "id": 278012759,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1649246461
    },
    {
        "content": "<p>PiotrSikora submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-933982383\">PR review</a>.</p>",
        "id": 278070828,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1649271776
    },
    {
        "content": "<p>radu-matei submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/17#pullrequestreview-935931295\">PR review</a>.</p>",
        "id": 278259733,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1649397104
    },
    {
        "content": "<p>akirilov-arm merged <a href=\"https://github.com/bytecodealliance/rfcs/pull/17\">PR #17</a>.</p>",
        "id": 279553054,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1650466095
    }
]