[
    {
        "content": "<p>saulecabrera opened <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>:</p>\n<blockquote>\n<p><a href=\"https://github.com/saulecabrera/rfcs/blob/wasmtime-baseline-compilation/accepted/wasmtime-baseline-compilation.md\">Rendered</a></p>\n<p>This RFC proposes the addition of a new WebAssembly (Wasm) compiler to Wasmtime:<br>\na single-pass or “baseline” compiler. A baseline compiler works to improve<br>\noverall compilation performance, yielding faster startup times, at the cost of<br>\nless optimized code.</p>\n<p>This RFC describes:</p>\n<ul>\n<li>The motivation for a baseline compiler</li>\n<li>\n<p>A high-level overview and description of the structure of the baseline<br>\n  compiler</p>\n</li>\n<li>\n<p>A high-level overview of its integration with Wasmtime</p>\n</li>\n</ul>\n<p>cc @cfallin @fitzgen @alexcrichton @bnjbvr </p>\n</blockquote>",
        "id": 291854643,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659535593
    },
    {
        "content": "<p>lqd submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060496588\">PR review</a>.</p>",
        "id": 291865575,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659539954
    },
    {
        "content": "<p>lqd created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r936795532\">PR review comment</a>:</p>\n<blockquote>\n<p>Tiny linebreak suggestion: </p>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>let add = cranelift_asm::x64::AluRmiR { op: AluRmiR::Add, … };\nlet mut buf = MachBuffer::new();\nadd.emit(&amp;mut buf, …);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 291865576,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659539954
    },
    {
        "content": "<p>lqd created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r936795908\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>wasmtime run --compiler=&lt;baseline|cranelift&gt; file.wasm\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 291865630,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659539977
    },
    {
        "content": "<p>lqd submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060497154\">PR review</a>.</p>",
        "id": 291865633,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659539978
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060700932\">PR review</a>.</p>",
        "id": 291879411,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659545664
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r936921733\">PR review comment</a>:</p>\n<blockquote>\n<p>I'd like to echo @alexcrichton's suggestion about building out (at least a realistic kernel of) support for a second architecture during the initial implementation. Because Winch is, by design, skipping an architecture-agnostic mid-end and IR, it has higher risk of baking in architecture-specific assumptions into the core design. Building support for a second architecture should mitigate and nullify this risk.</p>\n</blockquote>",
        "id": 291879412,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659545664
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060700932\">PR review</a>.</p>",
        "id": 291879413,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659545664
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r936925926\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not convinced that making this a compile time feature will be overly complex, and even if it turns out that it is, I would strongly prefer that we start by attempting to do it that way, and only fall back to runtime-only if we determine it isn't practical.</p>\n</blockquote>",
        "id": 291879414,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659545664
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r936924257\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>// request a general purpose register;\n// spill if none available.\nlet imm = self.value_stack.pop();\nlet rd = self.gpr();\nmasm.add(rd, imm);\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 291879415,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659545664
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060733930\">PR review</a>.</p>",
        "id": 291882169,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659546813
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r936945321\">PR review comment</a>:</p>\n<blockquote>\n<p>I see the appeal of compiled-out-by-default for minimizing impact, but I'll offer a few reasons from experience that might push in the other direction:</p>\n<ul>\n<li>Dealing with features in general is a speedbump for users. When developing the new x64 backend we had it cfg'd off behind a feature and it was a constant fight to get tools (LSP etc) to use the right flags, and meant that we couldn't have just one <code>cargo test</code> invocation to test the thing; we had to have a separate one with the feature enabled.</li>\n<li>Differential testing across the two configurations becomes impossible. For the x64 backend, I eventually had to refactor to use a runtime setting and allow both configs to co-exist so that I could build a differential fuzz target. In this case I guess the feature would be strictly additive (include another compiler backend) but I could imagine tests at the Wasmtime level might still run into issues.</li>\n<li>In general, features make for more confusing code; see e.g. @alexcrichton 's push for us to use very coarse-grained features in memfd, and remove the cfg-logic from the inner implementations; and also the difficulties arising from the feature-controlled uffd backend.</li>\n</ul>\n<p>On the other side, I guess the main concern is compile time? Or are you worried about e.g. users prematurely opting into using it and that opt-in being easier if it's a programmatic configuration vs. a feature flag in the dependency?</p>\n</blockquote>",
        "id": 291882171,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659546813
    },
    {
        "content": "<p>fitzgen submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060820944\">PR review</a>.</p>",
        "id": 291901011,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659551275
    },
    {
        "content": "<p>fitzgen created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r937006506\">PR review comment</a>:</p>\n<blockquote>\n<p>My concerns are (1) compile time and (2) factoring code such that it isn't entangled with the rest of Cranelift/Wasmtime.</p>\n<p>Differential testing should definitely be possible. I'm _not_ saying that we should have a compile time config to either use Winch xor cranelift (like the <code>experimental_x64</code> cargo feature did). I'm saying we should have a compile time config which when enabled adds support for and exposes the Winch compilation strategy variant. So both Winch and Cranelift would be available for differential testing or what have you when the cargo feature was enabled.</p>\n<p>I don't think this is an onerous imposition on development, and we can point to the ongoing component model work as something that is using this compile-time-cargo-feature-to-make-available-a-runtime-option approach successfully.</p>\n</blockquote>",
        "id": 291901012,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659551275
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r937015296\">PR review comment</a>:</p>\n<blockquote>\n<p>Fair enough; I think much of my experience is with the \"xor\" variant of feature (so a bunch of <code>#[cfg(not(feature = ...))]</code>) and that may have given me a darker view of how this could go.</p>\n<p>I do like the idea of ensuring proper layering/separation by having a build with the feature off, as well.</p>\n<p>So I guess this is fine; as you say we can always abandon the approach and go runtime-only if needed later.</p>\n</blockquote>",
        "id": 291902365,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659551917
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060833266\">PR review</a>.</p>",
        "id": 291902366,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659551917
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r937049630\">PR review comment</a>:</p>\n<blockquote>\n<p>I think I didn't do a good job expressing myself during the initial draft of the doc when I introduced the idea of/open questions around the compile time feature, which probably hinted the \"xor\" approach. I'm aligned with this though, my main goal is to allow the usage of both compilers, for ease of testing, but also I can definitely see cases in which an embedder might want to use Winch for fast startup and then compile with Cranelift in the background for subsequent requests; and according to the discussion here, such goal is still achievable with a compile time feature. </p>\n</blockquote>",
        "id": 291907569,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659554532
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060881199\">PR review</a>.</p>",
        "id": 291907570,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659554532
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 291909632,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659555531
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060910224\">PR review</a>.</p>",
        "id": 291909829,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659555615
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r937063203\">PR review comment</a>:</p>\n<blockquote>\n<p>I've bundled all the typo corrections in <a href=\"https://github.com/bytecodealliance/rfcs/pull/28/commits/d8d934ec8a16c6d0ae823c9d5ba499f472bfab99\">https://github.com/bytecodealliance/rfcs/pull/28/commits/d8d934ec8a16c6d0ae823c9d5ba499f472bfab99</a>, thanks!</p>\n</blockquote>",
        "id": 291909830,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659555615
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1060913633\">PR review</a>.</p>",
        "id": 291910074,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659555769
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r937065757\">PR review comment</a>:</p>\n<blockquote>\n<p>I've updated the doc to specify that changes will be introduced behind a compile-time feature. </p>\n</blockquote>",
        "id": 291910075,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659555770
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1062315383\">PR review</a>.</p>",
        "id": 292040781,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633070
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938053932\">PR review comment</a>:</p>\n<blockquote>\n<p>If <code>MacroAssembler</code> isn't used by Cranelift, I think it should not be put in <code>cranelift_asm</code>, but either in wince or a separate crate.</p>\n</blockquote>",
        "id": 292040782,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633070
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938054332\">PR review comment</a>:</p>\n<blockquote>\n<p>This is not valid rust.</p>\n</blockquote>",
        "id": 292040843,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633100
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1062315955\">PR review</a>.</p>",
        "id": 292040844,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633100
    },
    {
        "content": "<p>bjorn3 edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938053932\">PR review comment</a>.</p>",
        "id": 292041048,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633195
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1062318269\">PR review</a>.</p>",
        "id": 292041108,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633220
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938055948\">PR review comment</a>:</p>\n<blockquote>\n<p>Probably best left for the future, but it would be nice to support tiered compilation to compile with winch by default and with cranelift when a function turns out to be hot.</p>\n</blockquote>",
        "id": 292041109,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633220
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1062319131\">PR review</a>.</p>",
        "id": 292041240,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633265
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938056552\">PR review comment</a>:</p>\n<blockquote>\n<p>I personally prefer Winch over Baseline for consistency. Or maybe BaselineWinch.</p>\n</blockquote>",
        "id": 292041244,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659633266
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 292045663,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659635174
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938748450\">PR review comment</a>:</p>\n<blockquote>\n<p>It feels natural to have the MacroAssembler at this level in my opinion, given that <code>cranelift_asm</code>'s objective is to provide the functionality and building blocks for code emission from different scenarios. That said, I don't think that this is a one-way door decision, if it's proven to cause any issues, this is easily reversible. </p>\n</blockquote>",
        "id": 292144464,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659701297
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1063266068\">PR review</a>.</p>",
        "id": 292144465,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659701297
    },
    {
        "content": "<p>bjorn3 submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1063273590\">PR review</a>.</p>",
        "id": 292145170,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659701726
    },
    {
        "content": "<p>bjorn3 created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938753560\">PR review comment</a>:</p>\n<blockquote>\n<p>My main worry is about compilation time. Adding <code>MacroAssembler</code> to <code>cranelift_asm</code> would require compiling more code even though Cranelift doesn't need it.</p>\n</blockquote>",
        "id": 292145171,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659701726
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 292147916,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659703227
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r938773845\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, tiering and its heuristics are intentionally out of scope for this RFC.</p>\n</blockquote>",
        "id": 292148158,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659703362
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1063302984\">PR review</a>.</p>",
        "id": 292148159,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659703362
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 292150013,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659704368
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1063796166\">PR review</a>.</p>",
        "id": 292194456,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659725631
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r939119905\">PR review comment</a>:</p>\n<blockquote>\n<p>That's a fair concern; on the other hand, I'm confident that we can control exposing the MacroAssembler with a compile time feature, making it opt-in to consumers. </p>\n</blockquote>",
        "id": 292194457,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659725631
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r939119905\">PR review comment</a>.</p>",
        "id": 292195646,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659726214
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065238348\">PR review</a>.</p>",
        "id": 292408185,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968403
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940281295\">PR review comment</a>:</p>\n<blockquote>\n<p>As a source of inspiration for design (edit: now I see the design principles are very close to what's in this blog post), as well as numbers showing the speed of a baseline compiler, I recommend this great post by Andy Wingo: <a href=\"https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler\">https://wingolog.org/archives/2020/03/25/firefoxs-low-latency-webassembly-compiler</a></p>\n</blockquote>",
        "id": 292408186,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968403
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940285286\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>buffering the `MachInst` structs in memory, which we do not wish to do.\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292408187,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968403
    },
    {
        "content": "<p>bnjbvr submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065238348\">PR review</a>.</p>",
        "id": 292408188,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968403
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940289948\">PR review comment</a>:</p>\n<blockquote>\n<p>This is really mostly a nitpick from myself, but I think we're confusing two different levels of abstraction here. Provided the examples below, namely the higher-level API call, I think this is really an <code>Assembler</code> library. From my understanding of Spidermonkey's code base, a <code>MacroAssembler</code> tries to hide some extra complexity by only having \"operands\" (and details about memory addresses/registers are hidden by the abstraction). Or imbuing some other specific semantics of operators that don't exist at the assembler layer; think for instance about having some <code>wasm_div</code> method, that would trap if the divisor is zero; there's no assembly instructions to do so, but a macro-assembler would combine different assembler method calls to generate the code that implements this behavior. As a matter of fact, the macro-assembler is one layer of abstraction above an assembler, and what's described here rather looks like a plain assembler to me, unless I'm mistaken.</p>\n</blockquote>",
        "id": 292408189,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968403
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940291893\">PR review comment</a>:</p>\n<blockquote>\n<p>Will it spill _all_ the registers, or only the conflicting ones / enough that it can continue doing its work? Spidermonkey's wasm baseline compiler would spill all, if I remember correctly, as it's much simpler to reason about.</p>\n</blockquote>",
        "id": 292408191,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968403
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940279076\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>Wasmtime, similar to what is present in Wasm engines in Web browsers. This RFC\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292408192,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968404
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940290365\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>abstraction, per ISA, along with their availability. It will also hold\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292408193,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968404
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940297009\">PR review comment</a>:</p>\n<blockquote>\n<p>Should this be <code>winch</code> instead of baseline? (alternatively, should we change the <code>cranelift</code> option to <code>optimizing</code>?)</p>\n</blockquote>",
        "id": 292408194,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968404
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940292828\">PR review comment</a>:</p>\n<blockquote>\n<p><div class=\"codehilite\" data-code-language=\"suggestion\"><pre><span></span><code>let imm = self.value_stack.pop();\n// request a general purpose register;\n// spill if none available\nlet rd = self.gpr();\n</code></pre></div><br>\n</p>\n</blockquote>",
        "id": 292408195,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968404
    },
    {
        "content": "<p>bnjbvr created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940294593\">PR review comment</a>:</p>\n<blockquote>\n<p>There are many variants of linear scan register allocation, and I'm afraid that referring to a textbook implementation may be confusing: here it's really allocating registers on the fly, and spilling aggressively whenever none is available, rather than doing any kind of textbook analysis to figure out liveness intervals and all of that.</p>\n</blockquote>",
        "id": 292408196,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659968404
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065454525\">PR review</a>.</p>",
        "id": 292424412,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659975634
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940430117\">PR review comment</a>:</p>\n<blockquote>\n<p>Indeed a great post! I've used it as a source of inspiration and as a guide to navigate SpiderMonkey's code. </p>\n</blockquote>",
        "id": 292424413,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659975634
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940538617\">PR review comment</a>:</p>\n<blockquote>\n<p>Agree, this reference should probably be removed @saulecabrera ; what we describe here isn't true linear-scan but something more like \"single-pass register allocation\" (proper linear scan requires lookahead to know which register is used furthest in the future, to choose which to evict).</p>\n</blockquote>",
        "id": 292478575,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659983315
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065610608\">PR review</a>.</p>",
        "id": 292478576,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659983315
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 292486617,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659987557
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065701223\">PR review</a>.</p>",
        "id": 292486747,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659987621
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940600493\">PR review comment</a>:</p>\n<blockquote>\n<p>Thanks for flagging this, I should've updated it in <a href=\"https://github.com/bytecodealliance/rfcs/pull/28/commits/141a3c6e3df27b1a9dc2d70580e021ab2ec58d00\">https://github.com/bytecodealliance/rfcs/pull/28/commits/141a3c6e3df27b1a9dc2d70580e021ab2ec58d00</a>. For consistency I'd like to keep this as <code>winch</code></p>\n</blockquote>",
        "id": 292486748,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659987621
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940602528\">PR review comment</a>:</p>\n<blockquote>\n<p>Yeah, the current intention is to spill all the registers.</p>\n</blockquote>",
        "id": 292486978,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659987776
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065704003\">PR review</a>.</p>",
        "id": 292486979,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659987776
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065714075\">PR review</a>.</p>",
        "id": 292488064,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659988353
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940609559\">PR review comment</a>:</p>\n<blockquote>\n<p>Agreed, I've removed the reference. For my own knowledge: are there any papers that describe each of the linear scan variants? Or are variations purely a result of implementation differences?</p>\n</blockquote>",
        "id": 292488066,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659988353
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065717120\">PR review</a>.</p>",
        "id": 292488365,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659988524
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940611738\">PR review comment</a>:</p>\n<blockquote>\n<p>I'm not aware of any that describe the SpiderMonkey-style single pass allocator, but I haven't looked too hard either; at the level we care about it tends to be more instructive to look at other implementations and academics tend not to study the fiddly details that matter here. But if I find one I'll let you know (and vice-versa) :-)</p>\n</blockquote>",
        "id": 292488367,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1659988524
    },
    {
        "content": "<p>saulecabrera submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1065941067\">PR review</a>.</p>",
        "id": 292514522,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660004684
    },
    {
        "content": "<p>saulecabrera created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940774368\">PR review comment</a>:</p>\n<blockquote>\n<blockquote>\n<p>From my understanding of Spidermonkey's code base, a MacroAssembler tries to hide some extra complexity by only having \"operands\" (and details about memory addresses/registers are hidden by the abstraction).</p>\n</blockquote>\n<p>My understanding is a bit different here. As far as I can tell, the MacroAssembler aside from operating on<a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.h#530\"> top of the concept of operands</a>, also operates on top of other abstractions like <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.h#1046\">Register</a>, <a href=\"https://searchfox.org/mozilla-central/source/js/src/jit/MacroAssembler.h#1048\">Imm, and Address</a>; still encapsulating most of the architecture-specific details.</p>\n<p>As far as encapsulating complexity, my mental model doesn't diverge from what you've outlined: emitting a set of assembly assembly instructions representing a given wasm instruction, with the difference that we're not strictly relying on/introducing  the presence of an Assembler for lowering; but instead potentially relying on helper methods.</p>\n<p>From a strict point of view, at least taking in to account SpiderMonkey's implementation, maybe MacroAssembler is not the right term, but eventually it could grow to be the right term. For the initial implementation introducing an Assembler abstraction seems a bit premature IMO. That said, I wouldn't be opposed to naming this abstraction <code>Assembler</code> instead. </p>\n<p>@cfallin do you have any further thoughts that you'd like to share according to your experience with SpiderMonkey?</p>\n</blockquote>",
        "id": 292514523,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660004684
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940774368\">PR review comment</a>.</p>",
        "id": 292515783,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660006111
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940774368\">PR review comment</a>.</p>",
        "id": 292515789,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660006125
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940774368\">PR review comment</a>.</p>",
        "id": 292515959,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660006288
    },
    {
        "content": "<p>cfallin submitted <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#pullrequestreview-1066068180\">PR review</a>.</p>",
        "id": 292524413,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660017665
    },
    {
        "content": "<p>cfallin created <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940871621\">PR review comment</a>:</p>\n<blockquote>\n<p>Yes, I agree generally with Ben here that what we want initially is not-so-macro; actually I think as a first approximation, one method call per <code>MachInst</code> is about right. At that level, we'll need different wasm-opcode-to-assembler-API code for each architecture. Details like addressing modes, and two-register (x86) vs three-register (aarch64) form, are best dealt with explicitly at this level, rather than being papered over; for example an alternative approach to the 2/3-register-form difference would be to emit a mov/add sequence for every add and emulate 3-reg form on x86, but that's a significant pessimization.</p>\n<p>But I also think there's a lot of room to evolve a general set of abstractions on top of this and share implementations where necessary, especially for the more complex lowerings like (for example) reference-type read/write barrier fastpaths, and other ops built from primitives. We could implement something like a <code>CommonAssembler</code> trait that provides load/store/move/add/sub/compare/branch/... and then write another layer that is generic over that.</p>\n<p>I think that starting point and evolutionary path is the important point and the names aren't so important; so <code>Assembler</code> rather than <code>MacroAssembler</code> is fine, if that's the way others prefer!</p>\n</blockquote>",
        "id": 292524414,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660017665
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 292560115,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660044123
    },
    {
        "content": "<p>saulecabrera edited <a href=\"https://github.com/bytecodealliance/rfcs/pull/28#discussion_r940774368\">PR review comment</a>.</p>",
        "id": 292563821,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1660045997
    },
    {
        "content": "<p>saulecabrera updated <a href=\"https://github.com/bytecodealliance/rfcs/pull/28\">PR #28</a> from <code>wasmtime-baseline-compilation</code> to <code>main</code>.</p>",
        "id": 296834872,
        "sender_full_name": "RFC notifications bot",
        "timestamp": 1662129937
    }
]